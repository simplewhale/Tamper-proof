//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/ValidationSignMessage.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/ValidationSignMessage.h"
#include "com/youzh/lingtu/sign/crypto/Credentials.h"
#include "com/youzh/lingtu/sign/crypto/ECDSASignature.h"
#include "com/youzh/lingtu/sign/crypto/ECKeyPair.h"
#include "com/youzh/lingtu/sign/crypto/Hash.h"
#include "com/youzh/lingtu/sign/crypto/utils/Assertions.h"
#include "com/youzh/lingtu/sign/crypto/utils/Numeric.h"
#include "io/github/novacrypto/bip39/SeedCalculator.h"
#include "io/github/novacrypto/bip39/SeedCalculatorByWordListLookUp.h"
#include "io/github/novacrypto/bip39/wordlists/English.h"
#include "io/github/novacrypto/hashing/Sha256.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/interfaces/RSAPrivateKey.h"
#include "java/security/interfaces/RSAPublicKey.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/apache/commons/codec/binary/Base64.h"
#include "org/spongycastle/asn1/x9/X9ECParameters.h"
#include "org/spongycastle/asn1/x9/X9IntegerConverter.h"
#include "org/spongycastle/crypto/ec/CustomNamedCurves.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/math/ec/ECAlgorithms.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/math/ec/custom/sec/SecP256K1Curve.h"

@interface ComYouzhLingtuSignValidationSignMessage () {
 @public
  NSString *publicKey_;
  NSString *privateKey_;
}

+ (IOSByteArray *)signMessageWithByteArray:(IOSByteArray *)message
     withComYouzhLingtuSignCryptoECKeyPair:(ComYouzhLingtuSignCryptoECKeyPair *)keyPair;

+ (JavaMathBigInteger *)recoverFromSignatureWithInt:(jint)recId
         withComYouzhLingtuSignCryptoECDSASignature:(ComYouzhLingtuSignCryptoECDSASignature *)sig
                                      withByteArray:(IOSByteArray *)message;

+ (OrgSpongycastleMathEcECPoint *)decompressKeyWithJavaMathBigInteger:(JavaMathBigInteger *)xBN
                                                          withBoolean:(jboolean)yBit;

@end

J2OBJC_FIELD_SETTER(ComYouzhLingtuSignValidationSignMessage, publicKey_, NSString *)
J2OBJC_FIELD_SETTER(ComYouzhLingtuSignValidationSignMessage, privateKey_, NSString *)

inline NSString *ComYouzhLingtuSignValidationSignMessage_get_ETHPASSPHASE(void);
static NSString *ComYouzhLingtuSignValidationSignMessage_ETHPASSPHASE = @"akushgdiuqe";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignValidationSignMessage, ETHPASSPHASE, NSString *)

inline OrgSpongycastleAsn1X9X9ECParameters *ComYouzhLingtuSignValidationSignMessage_get_CURVE_PARAMS(void);
static OrgSpongycastleAsn1X9X9ECParameters *ComYouzhLingtuSignValidationSignMessage_CURVE_PARAMS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignValidationSignMessage, CURVE_PARAMS, OrgSpongycastleAsn1X9X9ECParameters *)

inline OrgSpongycastleCryptoParamsECDomainParameters *ComYouzhLingtuSignValidationSignMessage_get_CURVE(void);
static OrgSpongycastleCryptoParamsECDomainParameters *ComYouzhLingtuSignValidationSignMessage_CURVE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignValidationSignMessage, CURVE, OrgSpongycastleCryptoParamsECDomainParameters *)

__attribute__((unused)) static IOSByteArray *ComYouzhLingtuSignValidationSignMessage_signMessageWithByteArray_withComYouzhLingtuSignCryptoECKeyPair_(IOSByteArray *message, ComYouzhLingtuSignCryptoECKeyPair *keyPair);

__attribute__((unused)) static JavaMathBigInteger *ComYouzhLingtuSignValidationSignMessage_recoverFromSignatureWithInt_withComYouzhLingtuSignCryptoECDSASignature_withByteArray_(jint recId, ComYouzhLingtuSignCryptoECDSASignature *sig, IOSByteArray *message);

__attribute__((unused)) static OrgSpongycastleMathEcECPoint *ComYouzhLingtuSignValidationSignMessage_decompressKeyWithJavaMathBigInteger_withBoolean_(JavaMathBigInteger *xBN, jboolean yBit);

J2OBJC_INITIALIZED_DEFN(ComYouzhLingtuSignValidationSignMessage)

@implementation ComYouzhLingtuSignValidationSignMessage

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignValidationSignMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)signMessageWithNSString:(NSString *)message
                         withNSString:(NSString *)privateKey {
  return ComYouzhLingtuSignValidationSignMessage_signMessageWithNSString_withNSString_(message, privateKey);
}

+ (ComYouzhLingtuSignValidationSignMessage *)genKeyWithNSString:(NSString *)mnemonic {
  return ComYouzhLingtuSignValidationSignMessage_genKeyWithNSString_(mnemonic);
}

+ (IOSByteArray *)signMessageWithByteArray:(IOSByteArray *)message
     withComYouzhLingtuSignCryptoECKeyPair:(ComYouzhLingtuSignCryptoECKeyPair *)keyPair {
  return ComYouzhLingtuSignValidationSignMessage_signMessageWithByteArray_withComYouzhLingtuSignCryptoECKeyPair_(message, keyPair);
}

+ (JavaMathBigInteger *)recoverFromSignatureWithInt:(jint)recId
         withComYouzhLingtuSignCryptoECDSASignature:(ComYouzhLingtuSignCryptoECDSASignature *)sig
                                      withByteArray:(IOSByteArray *)message {
  return ComYouzhLingtuSignValidationSignMessage_recoverFromSignatureWithInt_withComYouzhLingtuSignCryptoECDSASignature_withByteArray_(recId, sig, message);
}

+ (OrgSpongycastleMathEcECPoint *)decompressKeyWithJavaMathBigInteger:(JavaMathBigInteger *)xBN
                                                          withBoolean:(jboolean)yBit {
  return ComYouzhLingtuSignValidationSignMessage_decompressKeyWithJavaMathBigInteger_withBoolean_(xBN, yBit);
}

- (id<JavaUtilMap>)genKeyPair {
  JavaSecurityKeyPairGenerator *keyPairGen = JavaSecurityKeyPairGenerator_getInstanceWithNSString_(@"RSA");
  JavaSecuritySecureRandom *secureRandom = new_JavaSecuritySecureRandom_init();
  [((JavaSecurityKeyPairGenerator *) nil_chk(keyPairGen)) initialize__WithInt:1024 withJavaSecuritySecureRandom:secureRandom];
  JavaSecurityKeyPair *keyPair = [keyPairGen generateKeyPair];
  id<JavaSecurityInterfacesRSAPrivateKey> privateKey = (id<JavaSecurityInterfacesRSAPrivateKey>) cast_check([((JavaSecurityKeyPair *) nil_chk(keyPair)) getPrivate], JavaSecurityInterfacesRSAPrivateKey_class_());
  id<JavaSecurityInterfacesRSAPublicKey> publicKey = (id<JavaSecurityInterfacesRSAPublicKey>) cast_check([keyPair getPublic], JavaSecurityInterfacesRSAPublicKey_class_());
  NSString *publicKeyString = [NSString java_stringWithBytes:OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_([((id<JavaSecurityInterfacesRSAPublicKey>) nil_chk(publicKey)) getEncoded])];
  NSString *privateKeyString = [NSString java_stringWithBytes:OrgApacheCommonsCodecBinaryBase64_encodeBase64WithByteArray_(([((id<JavaSecurityInterfacesRSAPrivateKey>) nil_chk(privateKey)) getEncoded]))];
  id<JavaUtilMap> map = new_JavaUtilHashMap_initWithInt_(2);
  (void) [map putWithId:@"publicKey" withId:publicKeyString];
  (void) [map putWithId:@"privateKey" withId:privateKeyString];
  return map;
}

- (void)setPublicKeyWithNSString:(NSString *)publicKey {
  self->publicKey_ = publicKey;
}

- (NSString *)getPublicKey {
  return self->publicKey_;
}

- (void)setPrivateKeyWithNSString:(NSString *)privateKey {
  self->privateKey_ = privateKey;
}

- (NSString *)getPrivateKey {
  return self->privateKey_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComYouzhLingtuSignValidationSignMessage;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 0, 4, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, 9, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(signMessageWithNSString:withNSString:);
  methods[2].selector = @selector(genKeyWithNSString:);
  methods[3].selector = @selector(signMessageWithByteArray:withComYouzhLingtuSignCryptoECKeyPair:);
  methods[4].selector = @selector(recoverFromSignatureWithInt:withComYouzhLingtuSignCryptoECDSASignature:withByteArray:);
  methods[5].selector = @selector(decompressKeyWithJavaMathBigInteger:withBoolean:);
  methods[6].selector = @selector(genKeyPair);
  methods[7].selector = @selector(setPublicKeyWithNSString:);
  methods[8].selector = @selector(getPublicKey);
  methods[9].selector = @selector(setPrivateKeyWithNSString:);
  methods[10].selector = @selector(getPrivateKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ETHPASSPHASE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "CURVE_PARAMS", "LOrgSpongycastleAsn1X9X9ECParameters;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "CURVE", "LOrgSpongycastleCryptoParamsECDomainParameters;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "publicKey_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privateKey_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "signMessage", "LNSString;LNSString;", "genKey", "LNSString;", "[BLComYouzhLingtuSignCryptoECKeyPair;", "recoverFromSignature", "ILComYouzhLingtuSignCryptoECDSASignature;[B", "decompressKey", "LJavaMathBigInteger;Z", "LJavaSecurityNoSuchAlgorithmException;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "setPublicKey", "setPrivateKey", &ComYouzhLingtuSignValidationSignMessage_ETHPASSPHASE, &ComYouzhLingtuSignValidationSignMessage_CURVE_PARAMS, &ComYouzhLingtuSignValidationSignMessage_CURVE };
  static const J2ObjcClassInfo _ComYouzhLingtuSignValidationSignMessage = { "ValidationSignMessage", "com.youzh.lingtu.sign", ptrTable, methods, fields, 7, 0x1, 11, 5, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignValidationSignMessage;
}

+ (void)initialize {
  if (self == [ComYouzhLingtuSignValidationSignMessage class]) {
    ComYouzhLingtuSignValidationSignMessage_CURVE_PARAMS = OrgSpongycastleCryptoEcCustomNamedCurves_getByNameWithNSString_(@"secp256k1");
    ComYouzhLingtuSignValidationSignMessage_CURVE = new_OrgSpongycastleCryptoParamsECDomainParameters_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_([((OrgSpongycastleAsn1X9X9ECParameters *) nil_chk(ComYouzhLingtuSignValidationSignMessage_CURVE_PARAMS)) getCurve], [ComYouzhLingtuSignValidationSignMessage_CURVE_PARAMS getG], [ComYouzhLingtuSignValidationSignMessage_CURVE_PARAMS getN], [ComYouzhLingtuSignValidationSignMessage_CURVE_PARAMS getH]);
    J2OBJC_SET_INITIALIZED(ComYouzhLingtuSignValidationSignMessage)
  }
}

@end

void ComYouzhLingtuSignValidationSignMessage_init(ComYouzhLingtuSignValidationSignMessage *self) {
  NSObject_init(self);
}

ComYouzhLingtuSignValidationSignMessage *new_ComYouzhLingtuSignValidationSignMessage_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignValidationSignMessage, init)
}

ComYouzhLingtuSignValidationSignMessage *create_ComYouzhLingtuSignValidationSignMessage_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignValidationSignMessage, init)
}

NSString *ComYouzhLingtuSignValidationSignMessage_signMessageWithNSString_withNSString_(NSString *message, NSString *privateKey) {
  ComYouzhLingtuSignValidationSignMessage_initialize();
  ComYouzhLingtuSignCryptoCredentials *credentials = ComYouzhLingtuSignCryptoCredentials_createWithNSString_(privateKey);
  ComYouzhLingtuSignCryptoECKeyPair *ecKeyPair = [((ComYouzhLingtuSignCryptoCredentials *) nil_chk(credentials)) getEcKeyPair];
  IOSByteArray *bMessage = [((NSString *) nil_chk(message)) java_getBytes];
  IOSByteArray *signMessage = ComYouzhLingtuSignValidationSignMessage_signMessageWithByteArray_withComYouzhLingtuSignCryptoECKeyPair_(bMessage, ecKeyPair);
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringNoPrefixWithByteArray_(signMessage);
}

ComYouzhLingtuSignValidationSignMessage *ComYouzhLingtuSignValidationSignMessage_genKeyWithNSString_(NSString *mnemonic) {
  ComYouzhLingtuSignValidationSignMessage_initialize();
  @try {
    id<JavaUtilList> mnemonicList = JavaUtilArrays_asListWithNSObjectArray_([((NSString *) nil_chk(mnemonic)) java_split:@" "]);
    IOSByteArray *seed = [((IoGithubNovacryptoBip39SeedCalculatorByWordListLookUp *) nil_chk([new_IoGithubNovacryptoBip39SeedCalculator_init() withWordsFromWordListWithIoGithubNovacryptoBip39WordList:JreLoadEnum(IoGithubNovacryptoBip39WordlistsEnglish, INSTANCE)])) calculateSeedWithJavaUtilCollection:mnemonicList withNSString:ComYouzhLingtuSignValidationSignMessage_ETHPASSPHASE];
    ComYouzhLingtuSignCryptoECKeyPair *ecKeyPair = ComYouzhLingtuSignCryptoECKeyPair_createWithByteArray_(IoGithubNovacryptoHashingSha256_sha256WithByteArray_(seed));
    NSString *privateKey = [((JavaMathBigInteger *) nil_chk([((ComYouzhLingtuSignCryptoECKeyPair *) nil_chk(ecKeyPair)) getPrivateKey])) toStringWithInt:16];
    NSString *publicKey = [((JavaMathBigInteger *) nil_chk([ecKeyPair getPublicKey])) toStringWithInt:16];
    ComYouzhLingtuSignValidationSignMessage *vm = new_ComYouzhLingtuSignValidationSignMessage_init();
    [vm setPublicKeyWithNSString:publicKey];
    [vm setPrivateKeyWithNSString:privateKey];
    return vm;
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
  }
  return nil;
}

IOSByteArray *ComYouzhLingtuSignValidationSignMessage_signMessageWithByteArray_withComYouzhLingtuSignCryptoECKeyPair_(IOSByteArray *message, ComYouzhLingtuSignCryptoECKeyPair *keyPair) {
  ComYouzhLingtuSignValidationSignMessage_initialize();
  JavaMathBigInteger *publicKey = [((ComYouzhLingtuSignCryptoECKeyPair *) nil_chk(keyPair)) getPublicKey];
  IOSByteArray *messageHash = ComYouzhLingtuSignCryptoHash_sha3WithByteArray_(message);
  ComYouzhLingtuSignCryptoECDSASignature *sig = [keyPair signWithByteArray:messageHash];
  jint recId = -1;
  jint headerByte;
  for (headerByte = 0; headerByte < 4; ++headerByte) {
    JavaMathBigInteger *k = ComYouzhLingtuSignValidationSignMessage_recoverFromSignatureWithInt_withComYouzhLingtuSignCryptoECDSASignature_withByteArray_(headerByte, sig, messageHash);
    if (k != nil && [k isEqual:publicKey]) {
      recId = headerByte;
      break;
    }
  }
  if (recId == -1) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Could not construct a recoverable key. This should never happen.");
  }
  else {
    IOSByteArray *r = ComYouzhLingtuSignCryptoUtilsNumeric_toBytesPaddedWithJavaMathBigInteger_withInt_(((ComYouzhLingtuSignCryptoECDSASignature *) nil_chk(sig))->r_, 32);
    IOSByteArray *s = ComYouzhLingtuSignCryptoUtilsNumeric_toBytesPaddedWithJavaMathBigInteger_withInt_(sig->s_, 32);
    IOSByteArray *bt = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(r))->size_ + ((IOSByteArray *) nil_chk(s))->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(r, 0, bt, 0, s->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(s, 0, bt, r->size_, s->size_);
    return bt;
  }
}

JavaMathBigInteger *ComYouzhLingtuSignValidationSignMessage_recoverFromSignatureWithInt_withComYouzhLingtuSignCryptoECDSASignature_withByteArray_(jint recId, ComYouzhLingtuSignCryptoECDSASignature *sig, IOSByteArray *message) {
  ComYouzhLingtuSignValidationSignMessage_initialize();
  ComYouzhLingtuSignCryptoUtilsAssertions_verifyPreconditionWithBoolean_withNSString_(recId >= 0, @"recId must be positive");
  ComYouzhLingtuSignCryptoUtilsAssertions_verifyPreconditionWithBoolean_withNSString_([((JavaMathBigInteger *) nil_chk(((ComYouzhLingtuSignCryptoECDSASignature *) nil_chk(sig))->r_)) signum] >= 0, @"r must be positive");
  ComYouzhLingtuSignCryptoUtilsAssertions_verifyPreconditionWithBoolean_withNSString_([((JavaMathBigInteger *) nil_chk(sig->s_)) signum] >= 0, @"s must be positive");
  ComYouzhLingtuSignCryptoUtilsAssertions_verifyPreconditionWithBoolean_withNSString_(message != nil, @"message cannot be null");
  JavaMathBigInteger *n = [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(ComYouzhLingtuSignValidationSignMessage_CURVE)) getN];
  JavaMathBigInteger *i = JavaMathBigInteger_valueOfWithLong_((jlong) recId / 2LL);
  JavaMathBigInteger *x = [sig->r_ addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(i)) multiplyWithJavaMathBigInteger:n]];
  JavaMathBigInteger *prime = JreLoadStatic(OrgSpongycastleMathEcCustomSecSecP256K1Curve, q);
  if ([((JavaMathBigInteger *) nil_chk(x)) compareToWithId:prime] >= 0) {
    return nil;
  }
  else {
    OrgSpongycastleMathEcECPoint *R = ComYouzhLingtuSignValidationSignMessage_decompressKeyWithJavaMathBigInteger_withBoolean_(x, (recId & 1) == 1);
    if (![((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(R)) multiplyWithJavaMathBigInteger:n])) isInfinity]) {
      return nil;
    }
    else {
      JavaMathBigInteger *e = new_JavaMathBigInteger_initWithInt_withByteArray_(1, message);
      JavaMathBigInteger *eInv = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JreLoadStatic(JavaMathBigInteger, ZERO))) subtractWithJavaMathBigInteger:e])) modWithJavaMathBigInteger:n];
      JavaMathBigInteger *rInv = [sig->r_ modInverseWithJavaMathBigInteger:n];
      JavaMathBigInteger *srInv = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(rInv)) multiplyWithJavaMathBigInteger:sig->s_])) modWithJavaMathBigInteger:n];
      JavaMathBigInteger *eInvrInv = [((JavaMathBigInteger *) nil_chk([rInv multiplyWithJavaMathBigInteger:eInv])) modWithJavaMathBigInteger:n];
      OrgSpongycastleMathEcECPoint *q = OrgSpongycastleMathEcECAlgorithms_sumOfTwoMultipliesWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_([ComYouzhLingtuSignValidationSignMessage_CURVE getG], eInvrInv, R, srInv);
      IOSByteArray *qBytes = [((OrgSpongycastleMathEcECPoint *) nil_chk(q)) getEncodedWithBoolean:false];
      return new_JavaMathBigInteger_initWithInt_withByteArray_(1, JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(qBytes, 1, ((IOSByteArray *) nil_chk(qBytes))->size_));
    }
  }
}

OrgSpongycastleMathEcECPoint *ComYouzhLingtuSignValidationSignMessage_decompressKeyWithJavaMathBigInteger_withBoolean_(JavaMathBigInteger *xBN, jboolean yBit) {
  ComYouzhLingtuSignValidationSignMessage_initialize();
  OrgSpongycastleAsn1X9X9IntegerConverter *x9 = new_OrgSpongycastleAsn1X9X9IntegerConverter_init();
  IOSByteArray *compEnc = [x9 integerToBytesWithJavaMathBigInteger:xBN withInt:1 + [x9 getByteLengthWithOrgSpongycastleMathEcECCurve:[((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(ComYouzhLingtuSignValidationSignMessage_CURVE)) getCurve]]];
  *IOSByteArray_GetRef(nil_chk(compEnc), 0) = (jbyte) (yBit ? 3 : 2);
  return [((OrgSpongycastleMathEcECCurve *) nil_chk([ComYouzhLingtuSignValidationSignMessage_CURVE getCurve])) decodePointWithByteArray:compEnc];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignValidationSignMessage)
