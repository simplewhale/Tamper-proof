//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/ECDSASignature.java
//

#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/ECDSASignature.h"
#include "com/youzh/lingtu/sign/crypto/Sign.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"

@implementation ComYouzhLingtuSignCryptoECDSASignature

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)r
                    withJavaMathBigInteger:(JavaMathBigInteger *)s {
  ComYouzhLingtuSignCryptoECDSASignature_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, r, s);
  return self;
}

- (jboolean)isCanonical {
  return [((JavaMathBigInteger *) nil_chk(s_)) compareToWithId:JreLoadStatic(ComYouzhLingtuSignCryptoSign, HALF_CURVE_ORDER)] <= 0;
}

- (ComYouzhLingtuSignCryptoECDSASignature *)toCanonicalised {
  if (![self isCanonical]) {
    return new_ComYouzhLingtuSignCryptoECDSASignature_initWithJavaMathBigInteger_withJavaMathBigInteger_(r_, [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(JreLoadStatic(ComYouzhLingtuSignCryptoSign, CURVE))) getN])) subtractWithJavaMathBigInteger:s_]);
  }
  else {
    return self;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComYouzhLingtuSignCryptoECDSASignature;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[1].selector = @selector(isCanonical);
  methods[2].selector = @selector(toCanonicalised);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "r_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "s_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoECDSASignature = { "ECDSASignature", "com.youzh.lingtu.sign.crypto", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoECDSASignature;
}

@end

void ComYouzhLingtuSignCryptoECDSASignature_initWithJavaMathBigInteger_withJavaMathBigInteger_(ComYouzhLingtuSignCryptoECDSASignature *self, JavaMathBigInteger *r, JavaMathBigInteger *s) {
  NSObject_init(self);
  self->r_ = r;
  self->s_ = s;
}

ComYouzhLingtuSignCryptoECDSASignature *new_ComYouzhLingtuSignCryptoECDSASignature_initWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *r, JavaMathBigInteger *s) {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoECDSASignature, initWithJavaMathBigInteger_withJavaMathBigInteger_, r, s)
}

ComYouzhLingtuSignCryptoECDSASignature *create_ComYouzhLingtuSignCryptoECDSASignature_initWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *r, JavaMathBigInteger *s) {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoECDSASignature, initWithJavaMathBigInteger_withJavaMathBigInteger_, r, s)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoECDSASignature)
