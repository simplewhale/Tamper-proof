//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/utils/BaseWrapCipher.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/config/BouncyCastleProvider.h"
#include "com/youzh/lingtu/sign/crypto/utils/BCJcaJceHelper.h"
#include "com/youzh/lingtu/sign/crypto/utils/BCPBEKey.h"
#include "com/youzh/lingtu/sign/crypto/utils/BaseWrapCipher.h"
#include "com/youzh/lingtu/sign/crypto/utils/JcaJceHelper.h"
#include "com/youzh/lingtu/sign/crypto/utils/PBE.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/KeyFactory.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/security/NoSuchProviderException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/security/spec/InvalidKeySpecException.h"
#include "java/security/spec/PKCS8EncodedKeySpec.h"
#include "java/security/spec/X509EncodedKeySpec.h"
#include "javax/crypto/BadPaddingException.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/CipherSpi.h"
#include "javax/crypto/IllegalBlockSizeException.h"
#include "javax/crypto/NoSuchPaddingException.h"
#include "javax/crypto/spec/IvParameterSpec.h"
#include "javax/crypto/spec/PBEParameterSpec.h"
#include "javax/crypto/spec/RC2ParameterSpec.h"
#include "javax/crypto/spec/RC5ParameterSpec.h"
#include "javax/crypto/spec/SecretKeySpec.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/spongycastle/asn1/pkcs/PrivateKeyInfo.h"
#include "org/spongycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/InvalidCipherTextException.h"
#include "org/spongycastle/crypto/Wrapper.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/util/Arrays.h"

@interface ComYouzhLingtuSignCryptoUtilsBaseWrapCipher () {
 @public
  IOSObjectArray *availableSpecs_;
  jint ivSize_;
  IOSByteArray *iv_;
  id<ComYouzhLingtuSignCryptoUtilsJcaJceHelper> helper_;
}

@end

J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoUtilsBaseWrapCipher, availableSpecs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoUtilsBaseWrapCipher, iv_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoUtilsBaseWrapCipher, helper_, id<ComYouzhLingtuSignCryptoUtilsJcaJceHelper>)

@implementation ComYouzhLingtuSignCryptoUtilsBaseWrapCipher

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoUtilsBaseWrapCipher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgSpongycastleCryptoWrapper:(id<OrgSpongycastleCryptoWrapper>)wrapEngine {
  ComYouzhLingtuSignCryptoUtilsBaseWrapCipher_initWithOrgSpongycastleCryptoWrapper_(self, wrapEngine);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoWrapper:(id<OrgSpongycastleCryptoWrapper>)wrapEngine
                                             withInt:(jint)ivSize {
  ComYouzhLingtuSignCryptoUtilsBaseWrapCipher_initWithOrgSpongycastleCryptoWrapper_withInt_(self, wrapEngine, ivSize);
  return self;
}

- (jint)engineGetBlockSize {
  return 0;
}

- (IOSByteArray *)engineGetIV {
  return OrgSpongycastleUtilArrays_cloneWithByteArray_(iv_);
}

- (jint)engineGetKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  return ((IOSByteArray *) nil_chk([((id<JavaSecurityKey>) nil_chk(key)) getEncoded]))->size_;
}

- (jint)engineGetOutputSizeWithInt:(jint)inputLen {
  return -1;
}

- (JavaSecurityAlgorithmParameters *)engineGetParameters {
  return nil;
}

- (JavaSecurityAlgorithmParameters *)createParametersInstanceWithNSString:(NSString *)algorithm {
  return [((id<ComYouzhLingtuSignCryptoUtilsJcaJceHelper>) nil_chk(helper_)) createAlgorithmParametersWithNSString:algorithm];
}

- (void)engineSetModeWithNSString:(NSString *)mode {
  @throw new_JavaSecurityNoSuchAlgorithmException_initWithNSString_(JreStrcat("$$", @"can't support mode ", mode));
}

- (void)engineSetPaddingWithNSString:(NSString *)padding {
  @throw new_JavaxCryptoNoSuchPaddingException_initWithNSString_(JreStrcat("$$$", @"Padding ", padding, @" unknown."));
}

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  id<OrgSpongycastleCryptoCipherParameters> param;
  if ([key isKindOfClass:[ComYouzhLingtuSignCryptoUtilsBCPBEKey class]]) {
    ComYouzhLingtuSignCryptoUtilsBCPBEKey *k = (ComYouzhLingtuSignCryptoUtilsBCPBEKey *) key;
    if ([params isKindOfClass:[JavaxCryptoSpecPBEParameterSpec class]]) {
      param = ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEParametersWithComYouzhLingtuSignCryptoUtilsBCPBEKey_withJavaSecuritySpecAlgorithmParameterSpec_withNSString_(k, params, [((id<OrgSpongycastleCryptoWrapper>) nil_chk(wrapEngine_)) getAlgorithmName]);
    }
    else if ([((ComYouzhLingtuSignCryptoUtilsBCPBEKey *) nil_chk(k)) getParam] != nil) {
      param = [k getParam];
    }
    else {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"PBE requires PBE parameters to be set.");
    }
  }
  else {
    param = new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_([((id<JavaSecurityKey>) nil_chk(key)) getEncoded]);
  }
  if ([params isKindOfClass:[JavaxCryptoSpecIvParameterSpec class]]) {
    JavaxCryptoSpecIvParameterSpec *iv = (JavaxCryptoSpecIvParameterSpec *) params;
    param = new_OrgSpongycastleCryptoParamsParametersWithIV_initWithOrgSpongycastleCryptoCipherParameters_withByteArray_(param, [((JavaxCryptoSpecIvParameterSpec *) nil_chk(iv)) getIV]);
  }
  if ([param isKindOfClass:[OrgSpongycastleCryptoParamsKeyParameter class]] && ivSize_ != 0) {
    iv_ = [IOSByteArray newArrayWithLength:ivSize_];
    [((JavaSecuritySecureRandom *) nil_chk(random)) nextBytesWithByteArray:iv_];
    param = new_OrgSpongycastleCryptoParamsParametersWithIV_initWithOrgSpongycastleCryptoCipherParameters_withByteArray_(param, iv_);
  }
  if (random != nil) {
    param = new_OrgSpongycastleCryptoParamsParametersWithRandom_initWithOrgSpongycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(param, random);
  }
  switch (opmode) {
    case JavaxCryptoCipher_WRAP_MODE:
    [((id<OrgSpongycastleCryptoWrapper>) nil_chk(wrapEngine_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:param];
    break;
    case JavaxCryptoCipher_UNWRAP_MODE:
    [((id<OrgSpongycastleCryptoWrapper>) nil_chk(wrapEngine_)) init__WithBoolean:false withOrgSpongycastleCryptoCipherParameters:param];
    break;
    case JavaxCryptoCipher_ENCRYPT_MODE:
    case JavaxCryptoCipher_DECRYPT_MODE:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"engine only valid for wrapping");
    default:
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"eeek!"];
  }
}

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecurityAlgorithmParameters:(JavaSecurityAlgorithmParameters *)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  id<JavaSecuritySpecAlgorithmParameterSpec> paramSpec = nil;
  if (params != nil) {
    for (jint i = 0; i != ((IOSObjectArray *) nil_chk(availableSpecs_))->size_; i++) {
      @try {
        paramSpec = [params getParameterSpecWithIOSClass:IOSObjectArray_Get(availableSpecs_, i)];
        break;
      }
      @catch (JavaLangException *e) {
      }
    }
    if (paramSpec == nil) {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$", @"can't handle parameter ", [params description]));
    }
  }
  engineParams_ = params;
  [self engineInitWithInt:opmode withJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:paramSpec withJavaSecuritySecureRandom:random];
}

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @try {
    [self engineInitWithInt:opmode withJavaSecurityKey:key withJavaSecuritySpecAlgorithmParameterSpec:nil withJavaSecuritySecureRandom:random];
  }
  @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_([e getMessage]);
  }
}

- (IOSByteArray *)engineUpdateWithByteArray:(IOSByteArray *)input
                                    withInt:(jint)inputOffset
                                    withInt:(jint)inputLen {
  @throw new_JavaLangRuntimeException_initWithNSString_(@"not supported for wrapping");
}

- (jint)engineUpdateWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inputOffset
                          withInt:(jint)inputLen
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset {
  @throw new_JavaLangRuntimeException_initWithNSString_(@"not supported for wrapping");
}

- (IOSByteArray *)engineDoFinalWithByteArray:(IOSByteArray *)input
                                     withInt:(jint)inputOffset
                                     withInt:(jint)inputLen {
  return nil;
}

- (jint)engineDoFinalWithByteArray:(IOSByteArray *)input
                           withInt:(jint)inputOffset
                           withInt:(jint)inputLen
                     withByteArray:(IOSByteArray *)output
                           withInt:(jint)outputOffset {
  return 0;
}

- (IOSByteArray *)engineWrapWithJavaSecurityKey:(id<JavaSecurityKey>)key {
  IOSByteArray *encoded = [((id<JavaSecurityKey>) nil_chk(key)) getEncoded];
  if (encoded == nil) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"Cannot wrap key, null encoding.");
  }
  @try {
    if (wrapEngine_ == nil) {
      return [self engineDoFinalWithByteArray:encoded withInt:0 withInt:encoded->size_];
    }
    else {
      return [wrapEngine_ wrapWithByteArray:encoded withInt:0 withInt:encoded->size_];
    }
  }
  @catch (JavaxCryptoBadPaddingException *e) {
    @throw new_JavaxCryptoIllegalBlockSizeException_initWithNSString_([e getMessage]);
  }
}

- (id<JavaSecurityKey>)engineUnwrapWithByteArray:(IOSByteArray *)wrappedKey
                                    withNSString:(NSString *)wrappedKeyAlgorithm
                                         withInt:(jint)wrappedKeyType {
  IOSByteArray *encoded;
  @try {
    if (wrapEngine_ == nil) {
      encoded = [self engineDoFinalWithByteArray:wrappedKey withInt:0 withInt:((IOSByteArray *) nil_chk(wrappedKey))->size_];
    }
    else {
      encoded = [wrapEngine_ unwrapWithByteArray:wrappedKey withInt:0 withInt:((IOSByteArray *) nil_chk(wrappedKey))->size_];
    }
  }
  @catch (OrgSpongycastleCryptoInvalidCipherTextException *e) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_([e getMessage]);
  }
  @catch (JavaxCryptoBadPaddingException *e) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_([e getMessage]);
  }
  @catch (JavaxCryptoIllegalBlockSizeException *e2) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_([e2 getMessage]);
  }
  if (wrappedKeyType == JavaxCryptoCipher_SECRET_KEY) {
    return new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_(encoded, wrappedKeyAlgorithm);
  }
  else if ([((NSString *) nil_chk(wrappedKeyAlgorithm)) isEqual:@""] && wrappedKeyType == JavaxCryptoCipher_PRIVATE_KEY) {
    @try {
      OrgSpongycastleAsn1PkcsPrivateKeyInfo *in = OrgSpongycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_(encoded);
      id<JavaSecurityPrivateKey> privKey = ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_getPrivateKeyWithOrgSpongycastleAsn1PkcsPrivateKeyInfo_(in);
      if (privKey != nil) {
        return privKey;
      }
      else {
        @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$@$", @"algorithm ", [((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1PkcsPrivateKeyInfo *) nil_chk(in)) getPrivateKeyAlgorithm])) getAlgorithm], @" not supported"));
      }
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"Invalid key encoding.");
    }
  }
  else {
    @try {
      JavaSecurityKeyFactory *kf = [((id<ComYouzhLingtuSignCryptoUtilsJcaJceHelper>) nil_chk(helper_)) createKeyFactoryWithNSString:wrappedKeyAlgorithm];
      if (wrappedKeyType == JavaxCryptoCipher_PUBLIC_KEY) {
        return [((JavaSecurityKeyFactory *) nil_chk(kf)) generatePublicWithJavaSecuritySpecKeySpec:new_JavaSecuritySpecX509EncodedKeySpec_initWithByteArray_(encoded)];
      }
      else if (wrappedKeyType == JavaxCryptoCipher_PRIVATE_KEY) {
        return [((JavaSecurityKeyFactory *) nil_chk(kf)) generatePrivateWithJavaSecuritySpecKeySpec:new_JavaSecuritySpecPKCS8EncodedKeySpec_initWithByteArray_(encoded)];
      }
    }
    @catch (JavaSecurityNoSuchProviderException *e) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"Unknown key type ", [e getMessage]));
    }
    @catch (JavaSecuritySpecInvalidKeySpecException *e2) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"Unknown key type ", [e2 getMessage]));
    }
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$I", @"Unknown key type ", wrappedKeyType));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x14, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 7, 10, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 7, 12, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 14, 15, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 16, 15, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 17, 18, -1, -1, -1 },
    { NULL, "[B", 0x4, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 19, 21, 22, -1, -1, -1 },
    { NULL, "[B", 0x4, 23, 20, 24, -1, -1, -1 },
    { NULL, "I", 0x4, 23, 21, 25, -1, -1, -1 },
    { NULL, "[B", 0x4, 26, 3, 27, -1, -1, -1 },
    { NULL, "LJavaSecurityKey;", 0x4, 28, 29, 30, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoWrapper:);
  methods[2].selector = @selector(initWithOrgSpongycastleCryptoWrapper:withInt:);
  methods[3].selector = @selector(engineGetBlockSize);
  methods[4].selector = @selector(engineGetIV);
  methods[5].selector = @selector(engineGetKeySizeWithJavaSecurityKey:);
  methods[6].selector = @selector(engineGetOutputSizeWithInt:);
  methods[7].selector = @selector(engineGetParameters);
  methods[8].selector = @selector(createParametersInstanceWithNSString:);
  methods[9].selector = @selector(engineSetModeWithNSString:);
  methods[10].selector = @selector(engineSetPaddingWithNSString:);
  methods[11].selector = @selector(engineInitWithInt:withJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[12].selector = @selector(engineInitWithInt:withJavaSecurityKey:withJavaSecurityAlgorithmParameters:withJavaSecuritySecureRandom:);
  methods[13].selector = @selector(engineInitWithInt:withJavaSecurityKey:withJavaSecuritySecureRandom:);
  methods[14].selector = @selector(engineUpdateWithByteArray:withInt:withInt:);
  methods[15].selector = @selector(engineUpdateWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[16].selector = @selector(engineDoFinalWithByteArray:withInt:withInt:);
  methods[17].selector = @selector(engineDoFinalWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[18].selector = @selector(engineWrapWithJavaSecurityKey:);
  methods[19].selector = @selector(engineUnwrapWithByteArray:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "availableSpecs_", "[LIOSClass;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pbeType_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pbeHash_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pbeKeySize_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pbeIvSize_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "engineParams_", "LJavaSecurityAlgorithmParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "wrapEngine_", "LOrgSpongycastleCryptoWrapper;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ivSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iv_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "helper_", "LComYouzhLingtuSignCryptoUtilsJcaJceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoWrapper;", "LOrgSpongycastleCryptoWrapper;I", "engineGetKeySize", "LJavaSecurityKey;", "engineGetOutputSize", "I", "createParametersInstance", "LNSString;", "LJavaSecurityNoSuchAlgorithmException;LJavaSecurityNoSuchProviderException;", "engineSetMode", "LJavaSecurityNoSuchAlgorithmException;", "engineSetPadding", "LJavaxCryptoNoSuchPaddingException;", "engineInit", "ILJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;LJavaSecurityInvalidAlgorithmParameterException;", "ILJavaSecurityKey;LJavaSecurityAlgorithmParameters;LJavaSecuritySecureRandom;", "ILJavaSecurityKey;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidKeyException;", "engineUpdate", "[BII", "[BII[BI", "LJavaxCryptoShortBufferException;", "engineDoFinal", "LJavaxCryptoIllegalBlockSizeException;LJavaxCryptoBadPaddingException;", "LJavaxCryptoIllegalBlockSizeException;LJavaxCryptoBadPaddingException;LJavaxCryptoShortBufferException;", "engineWrap", "LJavaxCryptoIllegalBlockSizeException;LJavaSecurityInvalidKeyException;", "engineUnwrap", "[BLNSString;I", "LJavaSecurityInvalidKeyException;LJavaSecurityNoSuchAlgorithmException;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoUtilsBaseWrapCipher = { "BaseWrapCipher", "com.youzh.lingtu.sign.crypto.utils", ptrTable, methods, fields, 7, 0x401, 20, 10, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoUtilsBaseWrapCipher;
}

@end

void ComYouzhLingtuSignCryptoUtilsBaseWrapCipher_init(ComYouzhLingtuSignCryptoUtilsBaseWrapCipher *self) {
  JavaxCryptoCipherSpi_init(self);
  self->availableSpecs_ = [IOSObjectArray newArrayWithObjects:(id[]){ JavaxCryptoSpecIvParameterSpec_class_(), JavaxCryptoSpecPBEParameterSpec_class_(), JavaxCryptoSpecRC2ParameterSpec_class_(), JavaxCryptoSpecRC5ParameterSpec_class_() } count:4 type:IOSClass_class_()];
  self->pbeType_ = ComYouzhLingtuSignCryptoUtilsPBE_PKCS12;
  self->pbeHash_ = ComYouzhLingtuSignCryptoUtilsPBE_SHA1;
  self->engineParams_ = nil;
  self->wrapEngine_ = nil;
  self->helper_ = new_ComYouzhLingtuSignCryptoUtilsBCJcaJceHelper_init();
}

void ComYouzhLingtuSignCryptoUtilsBaseWrapCipher_initWithOrgSpongycastleCryptoWrapper_(ComYouzhLingtuSignCryptoUtilsBaseWrapCipher *self, id<OrgSpongycastleCryptoWrapper> wrapEngine) {
  ComYouzhLingtuSignCryptoUtilsBaseWrapCipher_initWithOrgSpongycastleCryptoWrapper_withInt_(self, wrapEngine, 0);
}

void ComYouzhLingtuSignCryptoUtilsBaseWrapCipher_initWithOrgSpongycastleCryptoWrapper_withInt_(ComYouzhLingtuSignCryptoUtilsBaseWrapCipher *self, id<OrgSpongycastleCryptoWrapper> wrapEngine, jint ivSize) {
  JavaxCryptoCipherSpi_init(self);
  self->availableSpecs_ = [IOSObjectArray newArrayWithObjects:(id[]){ JavaxCryptoSpecIvParameterSpec_class_(), JavaxCryptoSpecPBEParameterSpec_class_(), JavaxCryptoSpecRC2ParameterSpec_class_(), JavaxCryptoSpecRC5ParameterSpec_class_() } count:4 type:IOSClass_class_()];
  self->pbeType_ = ComYouzhLingtuSignCryptoUtilsPBE_PKCS12;
  self->pbeHash_ = ComYouzhLingtuSignCryptoUtilsPBE_SHA1;
  self->engineParams_ = nil;
  self->wrapEngine_ = nil;
  self->helper_ = new_ComYouzhLingtuSignCryptoUtilsBCJcaJceHelper_init();
  self->wrapEngine_ = wrapEngine;
  self->ivSize_ = ivSize;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoUtilsBaseWrapCipher)
