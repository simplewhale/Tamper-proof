//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/utils/BaseSecretKeyFactory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/utils/BaseSecretKeyFactory.h"
#include "java/lang/Exception.h"
#include "java/lang/reflect/Constructor.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/spec/InvalidKeySpecException.h"
#include "java/security/spec/KeySpec.h"
#include "javax/crypto/SecretKey.h"
#include "javax/crypto/SecretKeyFactorySpi.h"
#include "javax/crypto/spec/SecretKeySpec.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"

@implementation ComYouzhLingtuSignCryptoUtilsBaseSecretKeyFactory

- (instancetype)initWithNSString:(NSString *)algName
withOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)algOid {
  ComYouzhLingtuSignCryptoUtilsBaseSecretKeyFactory_initWithNSString_withOrgSpongycastleAsn1ASN1ObjectIdentifier_(self, algName, algOid);
  return self;
}

- (id<JavaxCryptoSecretKey>)engineGenerateSecretWithJavaSecuritySpecKeySpec:(id<JavaSecuritySpecKeySpec>)keySpec {
  if ([keySpec isKindOfClass:[JavaxCryptoSpecSecretKeySpec class]]) {
    return (id<JavaxCryptoSecretKey>) cast_check(keySpec, JavaxCryptoSecretKey_class_());
  }
  @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"Invalid KeySpec");
}

- (id<JavaSecuritySpecKeySpec>)engineGetKeySpecWithJavaxCryptoSecretKey:(id<JavaxCryptoSecretKey>)key
                                                           withIOSClass:(IOSClass *)keySpec {
  if (keySpec == nil) {
    @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"keySpec parameter is null");
  }
  if (key == nil) {
    @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_(@"key parameter is null");
  }
  if ([JavaxCryptoSpecSecretKeySpec_class_() isAssignableFrom:keySpec]) {
    return new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_([key getEncoded], algName_);
  }
  @try {
    IOSObjectArray *parameters = [IOSObjectArray newArrayWithObjects:(id[]){ IOSClass_byteArray(1) } count:1 type:IOSClass_class_()];
    JavaLangReflectConstructor *c = [keySpec getConstructor:parameters];
    IOSObjectArray *p = [IOSObjectArray newArrayWithLength:1 type:NSObject_class_()];
    (void) IOSObjectArray_Set(p, 0, [key getEncoded]);
    return (id<JavaSecuritySpecKeySpec>) cast_check([((JavaLangReflectConstructor *) nil_chk(c)) newInstanceWithNSObjectArray:p], JavaSecuritySpecKeySpec_class_());
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecuritySpecInvalidKeySpecException_initWithNSString_([e description]);
  }
}

- (id<JavaxCryptoSecretKey>)engineTranslateKeyWithJavaxCryptoSecretKey:(id<JavaxCryptoSecretKey>)key {
  if (key == nil) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"key parameter is null");
  }
  if (![((NSString *) nil_chk([key getAlgorithm])) java_equalsIgnoreCase:algName_]) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$C", @"Key not of type ", algName_, '.'));
  }
  return new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_([key getEncoded], algName_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoSecretKey;", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecKeySpec;", 0x4, 4, 5, 3, -1, -1, -1 },
    { NULL, "LJavaxCryptoSecretKey;", 0x4, 6, 7, 8, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withOrgSpongycastleAsn1ASN1ObjectIdentifier:);
  methods[1].selector = @selector(engineGenerateSecretWithJavaSecuritySpecKeySpec:);
  methods[2].selector = @selector(engineGetKeySpecWithJavaxCryptoSecretKey:withIOSClass:);
  methods[3].selector = @selector(engineTranslateKeyWithJavaxCryptoSecretKey:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "algName_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "algOid_", "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LOrgSpongycastleAsn1ASN1ObjectIdentifier;", "engineGenerateSecret", "LJavaSecuritySpecKeySpec;", "LJavaSecuritySpecInvalidKeySpecException;", "engineGetKeySpec", "LJavaxCryptoSecretKey;LIOSClass;", "engineTranslateKey", "LJavaxCryptoSecretKey;", "LJavaSecurityInvalidKeyException;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoUtilsBaseSecretKeyFactory = { "BaseSecretKeyFactory", "com.youzh.lingtu.sign.crypto.utils", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoUtilsBaseSecretKeyFactory;
}

@end

void ComYouzhLingtuSignCryptoUtilsBaseSecretKeyFactory_initWithNSString_withOrgSpongycastleAsn1ASN1ObjectIdentifier_(ComYouzhLingtuSignCryptoUtilsBaseSecretKeyFactory *self, NSString *algName, OrgSpongycastleAsn1ASN1ObjectIdentifier *algOid) {
  JavaxCryptoSecretKeyFactorySpi_init(self);
  self->algName_ = algName;
  self->algOid_ = algOid;
}

ComYouzhLingtuSignCryptoUtilsBaseSecretKeyFactory *new_ComYouzhLingtuSignCryptoUtilsBaseSecretKeyFactory_initWithNSString_withOrgSpongycastleAsn1ASN1ObjectIdentifier_(NSString *algName, OrgSpongycastleAsn1ASN1ObjectIdentifier *algOid) {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsBaseSecretKeyFactory, initWithNSString_withOrgSpongycastleAsn1ASN1ObjectIdentifier_, algName, algOid)
}

ComYouzhLingtuSignCryptoUtilsBaseSecretKeyFactory *create_ComYouzhLingtuSignCryptoUtilsBaseSecretKeyFactory_initWithNSString_withOrgSpongycastleAsn1ASN1ObjectIdentifier_(NSString *algName, OrgSpongycastleAsn1ASN1ObjectIdentifier *algOid) {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsBaseSecretKeyFactory, initWithNSString_withOrgSpongycastleAsn1ASN1ObjectIdentifier_, algName, algOid)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoUtilsBaseSecretKeyFactory)
