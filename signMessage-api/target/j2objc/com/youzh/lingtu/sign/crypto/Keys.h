//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/Keys.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComYouzhLingtuSignCryptoKeys")
#ifdef RESTRICT_ComYouzhLingtuSignCryptoKeys
#define INCLUDE_ALL_ComYouzhLingtuSignCryptoKeys 0
#else
#define INCLUDE_ALL_ComYouzhLingtuSignCryptoKeys 1
#endif
#undef RESTRICT_ComYouzhLingtuSignCryptoKeys

#if !defined (ComYouzhLingtuSignCryptoKeys_) && (INCLUDE_ALL_ComYouzhLingtuSignCryptoKeys || defined(INCLUDE_ComYouzhLingtuSignCryptoKeys))
#define ComYouzhLingtuSignCryptoKeys_

@class ComYouzhLingtuSignCryptoECKeyPair;
@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaSecurityKeyPair;

@interface ComYouzhLingtuSignCryptoKeys : NSObject

#pragma mark Public

+ (ComYouzhLingtuSignCryptoECKeyPair *)createEcKeyPair;

+ (ComYouzhLingtuSignCryptoECKeyPair *)deserializeWithByteArray:(IOSByteArray *)input;

+ (NSString *)getAddressWithJavaMathBigInteger:(JavaMathBigInteger *)publicKey;

+ (IOSByteArray *)getAddressWithByteArray:(IOSByteArray *)publicKey;

+ (NSString *)getAddressWithComYouzhLingtuSignCryptoECKeyPair:(ComYouzhLingtuSignCryptoECKeyPair *)ecKeyPair;

+ (NSString *)getAddressWithNSString:(NSString *)publicKey;

+ (IOSByteArray *)serializeWithComYouzhLingtuSignCryptoECKeyPair:(ComYouzhLingtuSignCryptoECKeyPair *)ecKeyPair;

#pragma mark Package-Private

+ (JavaSecurityKeyPair *)createSecp256k1KeyPair;

@end

J2OBJC_STATIC_INIT(ComYouzhLingtuSignCryptoKeys)

inline jint ComYouzhLingtuSignCryptoKeys_get_PRIVATE_KEY_SIZE(void);
#define ComYouzhLingtuSignCryptoKeys_PRIVATE_KEY_SIZE 32
J2OBJC_STATIC_FIELD_CONSTANT(ComYouzhLingtuSignCryptoKeys, PRIVATE_KEY_SIZE, jint)

inline jint ComYouzhLingtuSignCryptoKeys_get_PUBLIC_KEY_SIZE(void);
#define ComYouzhLingtuSignCryptoKeys_PUBLIC_KEY_SIZE 64
J2OBJC_STATIC_FIELD_CONSTANT(ComYouzhLingtuSignCryptoKeys, PUBLIC_KEY_SIZE, jint)

inline jint ComYouzhLingtuSignCryptoKeys_get_ADDRESS_SIZE(void);
#define ComYouzhLingtuSignCryptoKeys_ADDRESS_SIZE 160
J2OBJC_STATIC_FIELD_CONSTANT(ComYouzhLingtuSignCryptoKeys, ADDRESS_SIZE, jint)

inline jint ComYouzhLingtuSignCryptoKeys_get_ADDRESS_LENGTH_IN_HEX(void);
#define ComYouzhLingtuSignCryptoKeys_ADDRESS_LENGTH_IN_HEX 40
J2OBJC_STATIC_FIELD_CONSTANT(ComYouzhLingtuSignCryptoKeys, ADDRESS_LENGTH_IN_HEX, jint)

inline jint ComYouzhLingtuSignCryptoKeys_get_PUBLIC_KEY_LENGTH_IN_HEX(void);
#define ComYouzhLingtuSignCryptoKeys_PUBLIC_KEY_LENGTH_IN_HEX 128
J2OBJC_STATIC_FIELD_CONSTANT(ComYouzhLingtuSignCryptoKeys, PUBLIC_KEY_LENGTH_IN_HEX, jint)

inline jint ComYouzhLingtuSignCryptoKeys_get_PRIVATE_KEY_LENGTH_IN_HEX(void);
#define ComYouzhLingtuSignCryptoKeys_PRIVATE_KEY_LENGTH_IN_HEX 64
J2OBJC_STATIC_FIELD_CONSTANT(ComYouzhLingtuSignCryptoKeys, PRIVATE_KEY_LENGTH_IN_HEX, jint)

FOUNDATION_EXPORT JavaSecurityKeyPair *ComYouzhLingtuSignCryptoKeys_createSecp256k1KeyPair(void);

FOUNDATION_EXPORT ComYouzhLingtuSignCryptoECKeyPair *ComYouzhLingtuSignCryptoKeys_createEcKeyPair(void);

FOUNDATION_EXPORT NSString *ComYouzhLingtuSignCryptoKeys_getAddressWithComYouzhLingtuSignCryptoECKeyPair_(ComYouzhLingtuSignCryptoECKeyPair *ecKeyPair);

FOUNDATION_EXPORT NSString *ComYouzhLingtuSignCryptoKeys_getAddressWithJavaMathBigInteger_(JavaMathBigInteger *publicKey);

FOUNDATION_EXPORT NSString *ComYouzhLingtuSignCryptoKeys_getAddressWithNSString_(NSString *publicKey);

FOUNDATION_EXPORT IOSByteArray *ComYouzhLingtuSignCryptoKeys_getAddressWithByteArray_(IOSByteArray *publicKey);

FOUNDATION_EXPORT IOSByteArray *ComYouzhLingtuSignCryptoKeys_serializeWithComYouzhLingtuSignCryptoECKeyPair_(ComYouzhLingtuSignCryptoECKeyPair *ecKeyPair);

FOUNDATION_EXPORT ComYouzhLingtuSignCryptoECKeyPair *ComYouzhLingtuSignCryptoKeys_deserializeWithByteArray_(IOSByteArray *input);

J2OBJC_TYPE_LITERAL_HEADER(ComYouzhLingtuSignCryptoKeys)

#endif

#pragma pop_macro("INCLUDE_ALL_ComYouzhLingtuSignCryptoKeys")
