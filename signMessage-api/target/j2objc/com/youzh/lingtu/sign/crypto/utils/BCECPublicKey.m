//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/utils/BCECPublicKey.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/config/BouncyCastleProvider.h"
#include "com/youzh/lingtu/sign/crypto/config/ProviderConfiguration.h"
#include "com/youzh/lingtu/sign/crypto/utils/BCECPublicKey.h"
#include "com/youzh/lingtu/sign/crypto/utils/EC5Util.h"
#include "com/youzh/lingtu/sign/crypto/utils/ECNamedCurveSpec.h"
#include "com/youzh/lingtu/sign/crypto/utils/ECParameterSpec.h"
#include "com/youzh/lingtu/sign/crypto/utils/ECPublicKeySpec.h"
#include "com/youzh/lingtu/sign/crypto/utils/ECUtil.h"
#include "com/youzh/lingtu/sign/crypto/utils/KeyUtil.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/interfaces/ECPublicKey.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/security/spec/ECPublicKeySpec.h"
#include "java/security/spec/EllipticCurve.h"
#include "org/spongycastle/asn1/ASN1Encodable.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/spongycastle/asn1/ASN1OctetString.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/DERBitString.h"
#include "org/spongycastle/asn1/DERNull.h"
#include "org/spongycastle/asn1/DEROctetString.h"
#include "org/spongycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/spongycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/spongycastle/asn1/x9/X962Parameters.h"
#include "org/spongycastle/asn1/x9/X9ECParameters.h"
#include "org/spongycastle/asn1/x9/X9ECPoint.h"
#include "org/spongycastle/asn1/x9/X9IntegerConverter.h"
#include "org/spongycastle/asn1/x9/X9ObjectIdentifiers.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECFieldElement.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/util/Strings.h"

@interface ComYouzhLingtuSignCryptoUtilsBCECPublicKey () {
 @public
  NSString *algorithm_;
  jboolean withCompression_;
  OrgSpongycastleMathEcECPoint *q_;
  JavaSecuritySpecECParameterSpec *ecSpec_;
  id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration_;
}

- (JavaSecuritySpecECParameterSpec *)createSpecWithJavaSecuritySpecEllipticCurve:(JavaSecuritySpecEllipticCurve *)ellipticCurve
                               withOrgSpongycastleCryptoParamsECDomainParameters:(OrgSpongycastleCryptoParamsECDomainParameters *)dp;

- (void)populateFromPubKeyInfoWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo:(OrgSpongycastleAsn1X509SubjectPublicKeyInfo *)info;

- (void)extractBytesWithByteArray:(IOSByteArray *)encKey
                          withInt:(jint)offSet
           withJavaMathBigInteger:(JavaMathBigInteger *)bI;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg;

@end

J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, algorithm_, NSString *)
J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, q_, OrgSpongycastleMathEcECPoint *)
J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, ecSpec_, JavaSecuritySpecECParameterSpec *)
J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, configuration_, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>)

__attribute__((unused)) static JavaSecuritySpecECParameterSpec *ComYouzhLingtuSignCryptoUtilsBCECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withOrgSpongycastleCryptoParamsECDomainParameters_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, JavaSecuritySpecEllipticCurve *ellipticCurve, OrgSpongycastleCryptoParamsECDomainParameters *dp);

__attribute__((unused)) static void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_populateFromPubKeyInfoWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, OrgSpongycastleAsn1X509SubjectPublicKeyInfo *info);

__attribute__((unused)) static void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_extractBytesWithByteArray_withInt_withJavaMathBigInteger_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, IOSByteArray *encKey, jint offSet, JavaMathBigInteger *bI);

__attribute__((unused)) static void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_readObjectWithJavaIoObjectInputStream_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, JavaIoObjectInputStream *inArg);

__attribute__((unused)) static void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_writeObjectWithJavaIoObjectOutputStream_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, JavaIoObjectOutputStream *outArg);

@implementation ComYouzhLingtuSignCryptoUtilsBCECPublicKey

- (instancetype)initWithNSString:(NSString *)algorithm
withComYouzhLingtuSignCryptoUtilsBCECPublicKey:(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *)key {
  ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withComYouzhLingtuSignCryptoUtilsBCECPublicKey_(self, algorithm, key);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withJavaSecuritySpecECPublicKeySpec:(JavaSecuritySpecECPublicKeySpec *)spec
withComYouzhLingtuSignCryptoConfigProviderConfiguration:(id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>)configuration {
  ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(self, algorithm, spec, configuration);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withComYouzhLingtuSignCryptoUtilsECPublicKeySpec:(ComYouzhLingtuSignCryptoUtilsECPublicKeySpec *)spec
withComYouzhLingtuSignCryptoConfigProviderConfiguration:(id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>)configuration {
  ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withComYouzhLingtuSignCryptoUtilsECPublicKeySpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(self, algorithm, spec, configuration);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withOrgSpongycastleCryptoParamsECPublicKeyParameters:(OrgSpongycastleCryptoParamsECPublicKeyParameters *)params
withJavaSecuritySpecECParameterSpec:(JavaSecuritySpecECParameterSpec *)spec
withComYouzhLingtuSignCryptoConfigProviderConfiguration:(id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>)configuration {
  ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(self, algorithm, params, spec, configuration);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withOrgSpongycastleCryptoParamsECPublicKeyParameters:(OrgSpongycastleCryptoParamsECPublicKeyParameters *)params
withComYouzhLingtuSignCryptoUtilsECParameterSpec:(ComYouzhLingtuSignCryptoUtilsECParameterSpec *)spec
withComYouzhLingtuSignCryptoConfigProviderConfiguration:(id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>)configuration {
  ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withComYouzhLingtuSignCryptoUtilsECParameterSpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(self, algorithm, params, spec, configuration);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withOrgSpongycastleCryptoParamsECPublicKeyParameters:(OrgSpongycastleCryptoParamsECPublicKeyParameters *)params
withComYouzhLingtuSignCryptoConfigProviderConfiguration:(id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>)configuration {
  ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(self, algorithm, params, configuration);
  return self;
}

- (instancetype)initWithJavaSecurityInterfacesECPublicKey:(id<JavaSecurityInterfacesECPublicKey>)key
  withComYouzhLingtuSignCryptoConfigProviderConfiguration:(id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>)configuration {
  ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithJavaSecurityInterfacesECPublicKey_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(self, key, configuration);
  return self;
}

- (instancetype)initWithNSString:(NSString *)algorithm
withOrgSpongycastleAsn1X509SubjectPublicKeyInfo:(OrgSpongycastleAsn1X509SubjectPublicKeyInfo *)info
withComYouzhLingtuSignCryptoConfigProviderConfiguration:(id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>)configuration {
  ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleAsn1X509SubjectPublicKeyInfo_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(self, algorithm, info, configuration);
  return self;
}

- (JavaSecuritySpecECParameterSpec *)createSpecWithJavaSecuritySpecEllipticCurve:(JavaSecuritySpecEllipticCurve *)ellipticCurve
                               withOrgSpongycastleCryptoParamsECDomainParameters:(OrgSpongycastleCryptoParamsECDomainParameters *)dp {
  return ComYouzhLingtuSignCryptoUtilsBCECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withOrgSpongycastleCryptoParamsECDomainParameters_(self, ellipticCurve, dp);
}

- (void)populateFromPubKeyInfoWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo:(OrgSpongycastleAsn1X509SubjectPublicKeyInfo *)info {
  ComYouzhLingtuSignCryptoUtilsBCECPublicKey_populateFromPubKeyInfoWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(self, info);
}

- (NSString *)getAlgorithm {
  return algorithm_;
}

- (NSString *)getFormat {
  return @"X.509";
}

- (IOSByteArray *)getEncoded {
  id<OrgSpongycastleAsn1ASN1Encodable> params;
  OrgSpongycastleAsn1X509SubjectPublicKeyInfo *info;
  if ([ecSpec_ isKindOfClass:[ComYouzhLingtuSignCryptoUtilsECNamedCurveSpec class]]) {
    OrgSpongycastleAsn1ASN1ObjectIdentifier *curveOid = ComYouzhLingtuSignCryptoUtilsECUtil_getNamedCurveOidWithNSString_([((ComYouzhLingtuSignCryptoUtilsECNamedCurveSpec *) nil_chk(((ComYouzhLingtuSignCryptoUtilsECNamedCurveSpec *) ecSpec_))) getName]);
    if (curveOid == nil) {
      curveOid = new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_([((ComYouzhLingtuSignCryptoUtilsECNamedCurveSpec *) nil_chk(((ComYouzhLingtuSignCryptoUtilsECNamedCurveSpec *) ecSpec_))) getName]);
    }
    params = new_OrgSpongycastleAsn1X9X962Parameters_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(curveOid);
  }
  else if (ecSpec_ == nil) {
    params = new_OrgSpongycastleAsn1X9X962Parameters_initWithOrgSpongycastleAsn1ASN1Null_(JreLoadStatic(OrgSpongycastleAsn1DERNull, INSTANCE));
  }
  else {
    OrgSpongycastleMathEcECCurve *curve = ComYouzhLingtuSignCryptoUtilsEC5Util_convertCurveWithJavaSecuritySpecEllipticCurve_([ecSpec_ getCurve]);
    OrgSpongycastleAsn1X9X9ECParameters *ecP = new_OrgSpongycastleAsn1X9X9ECParameters_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(curve, ComYouzhLingtuSignCryptoUtilsEC5Util_convertPointWithOrgSpongycastleMathEcECCurve_withJavaSecuritySpecECPoint_withBoolean_(curve, [((JavaSecuritySpecECParameterSpec *) nil_chk(ecSpec_)) getGenerator], withCompression_), [((JavaSecuritySpecECParameterSpec *) nil_chk(ecSpec_)) getOrder], JavaMathBigInteger_valueOfWithLong_([((JavaSecuritySpecECParameterSpec *) nil_chk(ecSpec_)) getCofactor]), [((JavaSecuritySpecEllipticCurve *) nil_chk([((JavaSecuritySpecECParameterSpec *) nil_chk(ecSpec_)) getCurve])) getSeed]);
    params = new_OrgSpongycastleAsn1X9X962Parameters_initWithOrgSpongycastleAsn1X9X9ECParameters_(ecP);
  }
  OrgSpongycastleMathEcECCurve *curve = [((OrgSpongycastleMathEcECPoint *) nil_chk([self engineGetQ])) getCurve];
  OrgSpongycastleAsn1ASN1OctetString *p;
  if (ecSpec_ == nil) {
    p = (OrgSpongycastleAsn1ASN1OctetString *) cast_chk([new_OrgSpongycastleAsn1X9X9ECPoint_initWithOrgSpongycastleMathEcECPoint_([((OrgSpongycastleMathEcECCurve *) nil_chk(curve)) createPointWithJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([self getQ])) getXCoord])) toBigInteger] withJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([self getQ])) getYCoord])) toBigInteger] withBoolean:withCompression_]) toASN1Primitive], [OrgSpongycastleAsn1ASN1OctetString class]);
  }
  else {
    p = (OrgSpongycastleAsn1ASN1OctetString *) cast_chk([new_OrgSpongycastleAsn1X9X9ECPoint_initWithOrgSpongycastleMathEcECPoint_([((OrgSpongycastleMathEcECCurve *) nil_chk(curve)) createPointWithJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([self getQ])) getAffineXCoord])) toBigInteger] withJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([self getQ])) getAffineYCoord])) toBigInteger] withBoolean:withCompression_]) toASN1Primitive], [OrgSpongycastleAsn1ASN1OctetString class]);
  }
  info = new_OrgSpongycastleAsn1X509SubjectPublicKeyInfo_initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withByteArray_(new_OrgSpongycastleAsn1X509AlgorithmIdentifier_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Encodable_(JreLoadStatic(OrgSpongycastleAsn1X9X9ObjectIdentifiers, id_ecPublicKey), params), [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(p)) getOctets]);
  return ComYouzhLingtuSignCryptoUtilsKeyUtil_getEncodedSubjectPublicKeyInfoWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(info);
}

- (void)extractBytesWithByteArray:(IOSByteArray *)encKey
                          withInt:(jint)offSet
           withJavaMathBigInteger:(JavaMathBigInteger *)bI {
  ComYouzhLingtuSignCryptoUtilsBCECPublicKey_extractBytesWithByteArray_withInt_withJavaMathBigInteger_(self, encKey, offSet, bI);
}

- (JavaSecuritySpecECParameterSpec *)getParams {
  return ecSpec_;
}

- (ComYouzhLingtuSignCryptoUtilsECParameterSpec *)getParameters {
  if (ecSpec_ == nil) {
    return nil;
  }
  return ComYouzhLingtuSignCryptoUtilsEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_(ecSpec_, withCompression_);
}

- (JavaSecuritySpecECPoint *)getW {
  return new_JavaSecuritySpecECPoint_initWithJavaMathBigInteger_withJavaMathBigInteger_([((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(q_)) getAffineXCoord])) toBigInteger], [((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(q_)) getAffineYCoord])) toBigInteger]);
}

- (OrgSpongycastleMathEcECPoint *)getQ {
  if (ecSpec_ == nil) {
    return [((OrgSpongycastleMathEcECPoint *) nil_chk(q_)) getDetachedPoint];
  }
  return q_;
}

- (OrgSpongycastleMathEcECPoint *)engineGetQ {
  return q_;
}

- (ComYouzhLingtuSignCryptoUtilsECParameterSpec *)engineGetSpec {
  if (ecSpec_ != nil) {
    return ComYouzhLingtuSignCryptoUtilsEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_(ecSpec_, withCompression_);
  }
  return [((id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>) nil_chk(configuration_)) getEcImplicitlyCa];
}

- (NSString *)description {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  NSString *nl = OrgSpongycastleUtilStrings_lineSeparator();
  (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"EC Public Key"])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            X: "])) appendWithNSString:[((JavaMathBigInteger *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(self->q_)) getAffineXCoord])) toBigInteger])) toStringWithInt:16]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            Y: "])) appendWithNSString:[((JavaMathBigInteger *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(self->q_)) getAffineYCoord])) toBigInteger])) toStringWithInt:16]])) appendWithNSString:nl];
  return [buf description];
}

- (void)setPointFormatWithNSString:(NSString *)style {
  withCompression_ = !([@"UNCOMPRESSED" java_equalsIgnoreCase:style]);
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[ComYouzhLingtuSignCryptoUtilsBCECPublicKey class]])) {
    return false;
  }
  ComYouzhLingtuSignCryptoUtilsBCECPublicKey *other = (ComYouzhLingtuSignCryptoUtilsBCECPublicKey *) cast_chk(o, [ComYouzhLingtuSignCryptoUtilsBCECPublicKey class]);
  return [((OrgSpongycastleMathEcECPoint *) nil_chk([self engineGetQ])) equalsWithOrgSpongycastleMathEcECPoint:[((ComYouzhLingtuSignCryptoUtilsBCECPublicKey *) nil_chk(other)) engineGetQ]] && ([((ComYouzhLingtuSignCryptoUtilsECParameterSpec *) nil_chk([self engineGetSpec])) isEqual:[other engineGetSpec]]);
}

- (NSUInteger)hash {
  return ((jint) [((OrgSpongycastleMathEcECPoint *) nil_chk([self engineGetQ])) hash]) ^ ((jint) [((ComYouzhLingtuSignCryptoUtilsECParameterSpec *) nil_chk([self engineGetSpec])) hash]);
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  ComYouzhLingtuSignCryptoUtilsBCECPublicKey_readObjectWithJavaIoObjectInputStream_(self, inArg);
}

- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)outArg {
  ComYouzhLingtuSignCryptoUtilsBCECPublicKey_writeObjectWithJavaIoObjectOutputStream_(self, outArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 7, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECParameterSpec;", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComYouzhLingtuSignCryptoUtilsECParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComYouzhLingtuSignCryptoUtilsECParameterSpec;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, 22, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 24, 25, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withComYouzhLingtuSignCryptoUtilsBCECPublicKey:);
  methods[1].selector = @selector(initWithNSString:withJavaSecuritySpecECPublicKeySpec:withComYouzhLingtuSignCryptoConfigProviderConfiguration:);
  methods[2].selector = @selector(initWithNSString:withComYouzhLingtuSignCryptoUtilsECPublicKeySpec:withComYouzhLingtuSignCryptoConfigProviderConfiguration:);
  methods[3].selector = @selector(initWithNSString:withOrgSpongycastleCryptoParamsECPublicKeyParameters:withJavaSecuritySpecECParameterSpec:withComYouzhLingtuSignCryptoConfigProviderConfiguration:);
  methods[4].selector = @selector(initWithNSString:withOrgSpongycastleCryptoParamsECPublicKeyParameters:withComYouzhLingtuSignCryptoUtilsECParameterSpec:withComYouzhLingtuSignCryptoConfigProviderConfiguration:);
  methods[5].selector = @selector(initWithNSString:withOrgSpongycastleCryptoParamsECPublicKeyParameters:withComYouzhLingtuSignCryptoConfigProviderConfiguration:);
  methods[6].selector = @selector(initWithJavaSecurityInterfacesECPublicKey:withComYouzhLingtuSignCryptoConfigProviderConfiguration:);
  methods[7].selector = @selector(initWithNSString:withOrgSpongycastleAsn1X509SubjectPublicKeyInfo:withComYouzhLingtuSignCryptoConfigProviderConfiguration:);
  methods[8].selector = @selector(createSpecWithJavaSecuritySpecEllipticCurve:withOrgSpongycastleCryptoParamsECDomainParameters:);
  methods[9].selector = @selector(populateFromPubKeyInfoWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo:);
  methods[10].selector = @selector(getAlgorithm);
  methods[11].selector = @selector(getFormat);
  methods[12].selector = @selector(getEncoded);
  methods[13].selector = @selector(extractBytesWithByteArray:withInt:withJavaMathBigInteger:);
  methods[14].selector = @selector(getParams);
  methods[15].selector = @selector(getParameters);
  methods[16].selector = @selector(getW);
  methods[17].selector = @selector(getQ);
  methods[18].selector = @selector(engineGetQ);
  methods[19].selector = @selector(engineGetSpec);
  methods[20].selector = @selector(description);
  methods[21].selector = @selector(setPointFormatWithNSString:);
  methods[22].selector = @selector(isEqual:);
  methods[23].selector = @selector(hash);
  methods[24].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[25].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ComYouzhLingtuSignCryptoUtilsBCECPublicKey_serialVersionUID, 0x18, -1, -1, -1, -1 },
    { "algorithm_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "withCompression_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "q_", "LOrgSpongycastleMathEcECPoint;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "ecSpec_", "LJavaSecuritySpecECParameterSpec;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "configuration_", "LComYouzhLingtuSignCryptoConfigProviderConfiguration;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LComYouzhLingtuSignCryptoUtilsBCECPublicKey;", "LNSString;LJavaSecuritySpecECPublicKeySpec;LComYouzhLingtuSignCryptoConfigProviderConfiguration;", "LNSString;LComYouzhLingtuSignCryptoUtilsECPublicKeySpec;LComYouzhLingtuSignCryptoConfigProviderConfiguration;", "LNSString;LOrgSpongycastleCryptoParamsECPublicKeyParameters;LJavaSecuritySpecECParameterSpec;LComYouzhLingtuSignCryptoConfigProviderConfiguration;", "LNSString;LOrgSpongycastleCryptoParamsECPublicKeyParameters;LComYouzhLingtuSignCryptoUtilsECParameterSpec;LComYouzhLingtuSignCryptoConfigProviderConfiguration;", "LNSString;LOrgSpongycastleCryptoParamsECPublicKeyParameters;LComYouzhLingtuSignCryptoConfigProviderConfiguration;", "LJavaSecurityInterfacesECPublicKey;LComYouzhLingtuSignCryptoConfigProviderConfiguration;", "LNSString;LOrgSpongycastleAsn1X509SubjectPublicKeyInfo;LComYouzhLingtuSignCryptoConfigProviderConfiguration;", "createSpec", "LJavaSecuritySpecEllipticCurve;LOrgSpongycastleCryptoParamsECDomainParameters;", "populateFromPubKeyInfo", "LOrgSpongycastleAsn1X509SubjectPublicKeyInfo;", "extractBytes", "[BILJavaMathBigInteger;", "toString", "setPointFormat", "LNSString;", "equals", "LNSObject;", "hashCode", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoUtilsBCECPublicKey = { "BCECPublicKey", "com.youzh.lingtu.sign.crypto.utils", ptrTable, methods, fields, 7, 0x1, 26, 6, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoUtilsBCECPublicKey;
}

@end

void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withComYouzhLingtuSignCryptoUtilsBCECPublicKey_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, NSString *algorithm, ComYouzhLingtuSignCryptoUtilsBCECPublicKey *key) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = algorithm;
  self->q_ = ((ComYouzhLingtuSignCryptoUtilsBCECPublicKey *) nil_chk(key))->q_;
  self->ecSpec_ = key->ecSpec_;
  self->withCompression_ = key->withCompression_;
  self->configuration_ = key->configuration_;
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *new_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withComYouzhLingtuSignCryptoUtilsBCECPublicKey_(NSString *algorithm, ComYouzhLingtuSignCryptoUtilsBCECPublicKey *key) {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithNSString_withComYouzhLingtuSignCryptoUtilsBCECPublicKey_, algorithm, key)
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *create_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withComYouzhLingtuSignCryptoUtilsBCECPublicKey_(NSString *algorithm, ComYouzhLingtuSignCryptoUtilsBCECPublicKey *key) {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithNSString_withComYouzhLingtuSignCryptoUtilsBCECPublicKey_, algorithm, key)
}

void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, NSString *algorithm, JavaSecuritySpecECPublicKeySpec *spec, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = algorithm;
  self->ecSpec_ = [((JavaSecuritySpecECPublicKeySpec *) nil_chk(spec)) getParams];
  self->q_ = ComYouzhLingtuSignCryptoUtilsEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_withBoolean_(self->ecSpec_, [spec getW], false);
  self->configuration_ = configuration;
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *new_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(NSString *algorithm, JavaSecuritySpecECPublicKeySpec *spec, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithNSString_withJavaSecuritySpecECPublicKeySpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_, algorithm, spec, configuration)
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *create_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withJavaSecuritySpecECPublicKeySpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(NSString *algorithm, JavaSecuritySpecECPublicKeySpec *spec, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithNSString_withJavaSecuritySpecECPublicKeySpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_, algorithm, spec, configuration)
}

void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withComYouzhLingtuSignCryptoUtilsECPublicKeySpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, NSString *algorithm, ComYouzhLingtuSignCryptoUtilsECPublicKeySpec *spec, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = algorithm;
  self->q_ = [((ComYouzhLingtuSignCryptoUtilsECPublicKeySpec *) nil_chk(spec)) getQ];
  if ([spec getParams] != nil) {
    OrgSpongycastleMathEcECCurve *curve = [((ComYouzhLingtuSignCryptoUtilsECParameterSpec *) nil_chk([spec getParams])) getCurve];
    JavaSecuritySpecEllipticCurve *ellipticCurve = ComYouzhLingtuSignCryptoUtilsEC5Util_convertCurveWithOrgSpongycastleMathEcECCurve_withByteArray_(curve, [((ComYouzhLingtuSignCryptoUtilsECParameterSpec *) nil_chk([spec getParams])) getSeed]);
    self->q_ = [((OrgSpongycastleMathEcECCurve *) nil_chk(ComYouzhLingtuSignCryptoUtilsEC5Util_convertCurveWithJavaSecuritySpecEllipticCurve_(ellipticCurve))) createPointWithJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([spec getQ])) getAffineXCoord])) toBigInteger] withJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([spec getQ])) getAffineYCoord])) toBigInteger]];
    self->ecSpec_ = ComYouzhLingtuSignCryptoUtilsEC5Util_convertSpecWithJavaSecuritySpecEllipticCurve_withComYouzhLingtuSignCryptoUtilsECParameterSpec_(ellipticCurve, [spec getParams]);
  }
  else {
    if ([((OrgSpongycastleMathEcECPoint *) nil_chk(self->q_)) getCurve] == nil) {
      ComYouzhLingtuSignCryptoUtilsECParameterSpec *s = [((id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>) nil_chk(configuration)) getEcImplicitlyCa];
      self->q_ = [((OrgSpongycastleMathEcECCurve *) nil_chk([((ComYouzhLingtuSignCryptoUtilsECParameterSpec *) nil_chk(s)) getCurve])) createPointWithJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(self->q_)) getXCoord])) toBigInteger] withJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(self->q_)) getYCoord])) toBigInteger] withBoolean:false];
    }
    self->ecSpec_ = nil;
  }
  self->configuration_ = configuration;
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *new_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withComYouzhLingtuSignCryptoUtilsECPublicKeySpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(NSString *algorithm, ComYouzhLingtuSignCryptoUtilsECPublicKeySpec *spec, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithNSString_withComYouzhLingtuSignCryptoUtilsECPublicKeySpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_, algorithm, spec, configuration)
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *create_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withComYouzhLingtuSignCryptoUtilsECPublicKeySpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(NSString *algorithm, ComYouzhLingtuSignCryptoUtilsECPublicKeySpec *spec, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithNSString_withComYouzhLingtuSignCryptoUtilsECPublicKeySpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_, algorithm, spec, configuration)
}

void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, NSString *algorithm, OrgSpongycastleCryptoParamsECPublicKeyParameters *params, JavaSecuritySpecECParameterSpec *spec, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  OrgSpongycastleCryptoParamsECDomainParameters *dp = [((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(params)) getParameters];
  self->algorithm_ = algorithm;
  self->q_ = [params getQ];
  if (spec == nil) {
    JavaSecuritySpecEllipticCurve *ellipticCurve = ComYouzhLingtuSignCryptoUtilsEC5Util_convertCurveWithOrgSpongycastleMathEcECCurve_withByteArray_([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(dp)) getCurve], [dp getSeed]);
    self->ecSpec_ = ComYouzhLingtuSignCryptoUtilsBCECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withOrgSpongycastleCryptoParamsECDomainParameters_(self, ellipticCurve, dp);
  }
  else {
    self->ecSpec_ = spec;
  }
  self->configuration_ = configuration;
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *new_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(NSString *algorithm, OrgSpongycastleCryptoParamsECPublicKeyParameters *params, JavaSecuritySpecECParameterSpec *spec, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_, algorithm, params, spec, configuration)
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *create_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(NSString *algorithm, OrgSpongycastleCryptoParamsECPublicKeyParameters *params, JavaSecuritySpecECParameterSpec *spec, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_, algorithm, params, spec, configuration)
}

void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withComYouzhLingtuSignCryptoUtilsECParameterSpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, NSString *algorithm, OrgSpongycastleCryptoParamsECPublicKeyParameters *params, ComYouzhLingtuSignCryptoUtilsECParameterSpec *spec, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  OrgSpongycastleCryptoParamsECDomainParameters *dp = [((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(params)) getParameters];
  self->algorithm_ = algorithm;
  if (spec == nil) {
    JavaSecuritySpecEllipticCurve *ellipticCurve = ComYouzhLingtuSignCryptoUtilsEC5Util_convertCurveWithOrgSpongycastleMathEcECCurve_withByteArray_([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(dp)) getCurve], [dp getSeed]);
    self->ecSpec_ = ComYouzhLingtuSignCryptoUtilsBCECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withOrgSpongycastleCryptoParamsECDomainParameters_(self, ellipticCurve, dp);
  }
  else {
    JavaSecuritySpecEllipticCurve *ellipticCurve = ComYouzhLingtuSignCryptoUtilsEC5Util_convertCurveWithOrgSpongycastleMathEcECCurve_withByteArray_([spec getCurve], [spec getSeed]);
    self->ecSpec_ = ComYouzhLingtuSignCryptoUtilsEC5Util_convertSpecWithJavaSecuritySpecEllipticCurve_withComYouzhLingtuSignCryptoUtilsECParameterSpec_(ellipticCurve, spec);
  }
  self->q_ = [((OrgSpongycastleMathEcECCurve *) nil_chk(ComYouzhLingtuSignCryptoUtilsEC5Util_convertCurveWithJavaSecuritySpecEllipticCurve_([((JavaSecuritySpecECParameterSpec *) nil_chk(self->ecSpec_)) getCurve]))) createPointWithJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([params getQ])) getAffineXCoord])) toBigInteger] withJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([params getQ])) getAffineYCoord])) toBigInteger]];
  self->configuration_ = configuration;
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *new_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withComYouzhLingtuSignCryptoUtilsECParameterSpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(NSString *algorithm, OrgSpongycastleCryptoParamsECPublicKeyParameters *params, ComYouzhLingtuSignCryptoUtilsECParameterSpec *spec, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withComYouzhLingtuSignCryptoUtilsECParameterSpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_, algorithm, params, spec, configuration)
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *create_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withComYouzhLingtuSignCryptoUtilsECParameterSpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(NSString *algorithm, OrgSpongycastleCryptoParamsECPublicKeyParameters *params, ComYouzhLingtuSignCryptoUtilsECParameterSpec *spec, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withComYouzhLingtuSignCryptoUtilsECParameterSpec_withComYouzhLingtuSignCryptoConfigProviderConfiguration_, algorithm, params, spec, configuration)
}

void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, NSString *algorithm, OrgSpongycastleCryptoParamsECPublicKeyParameters *params, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = algorithm;
  self->q_ = [((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(params)) getQ];
  self->ecSpec_ = nil;
  self->configuration_ = configuration;
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *new_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(NSString *algorithm, OrgSpongycastleCryptoParamsECPublicKeyParameters *params, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withComYouzhLingtuSignCryptoConfigProviderConfiguration_, algorithm, params, configuration)
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *create_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(NSString *algorithm, OrgSpongycastleCryptoParamsECPublicKeyParameters *params, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withComYouzhLingtuSignCryptoConfigProviderConfiguration_, algorithm, params, configuration)
}

void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithJavaSecurityInterfacesECPublicKey_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, id<JavaSecurityInterfacesECPublicKey> key, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = [((id<JavaSecurityInterfacesECPublicKey>) nil_chk(key)) getAlgorithm];
  self->ecSpec_ = [key getParams];
  self->q_ = ComYouzhLingtuSignCryptoUtilsEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_withBoolean_(self->ecSpec_, [key getW], false);
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *new_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithJavaSecurityInterfacesECPublicKey_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(id<JavaSecurityInterfacesECPublicKey> key, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithJavaSecurityInterfacesECPublicKey_withComYouzhLingtuSignCryptoConfigProviderConfiguration_, key, configuration)
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *create_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithJavaSecurityInterfacesECPublicKey_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(id<JavaSecurityInterfacesECPublicKey> key, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithJavaSecurityInterfacesECPublicKey_withComYouzhLingtuSignCryptoConfigProviderConfiguration_, key, configuration)
}

void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleAsn1X509SubjectPublicKeyInfo_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, NSString *algorithm, OrgSpongycastleAsn1X509SubjectPublicKeyInfo *info, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  NSObject_init(self);
  self->algorithm_ = @"EC";
  self->algorithm_ = algorithm;
  self->configuration_ = configuration;
  ComYouzhLingtuSignCryptoUtilsBCECPublicKey_populateFromPubKeyInfoWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(self, info);
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *new_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleAsn1X509SubjectPublicKeyInfo_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(NSString *algorithm, OrgSpongycastleAsn1X509SubjectPublicKeyInfo *info, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithNSString_withOrgSpongycastleAsn1X509SubjectPublicKeyInfo_withComYouzhLingtuSignCryptoConfigProviderConfiguration_, algorithm, info, configuration)
}

ComYouzhLingtuSignCryptoUtilsBCECPublicKey *create_ComYouzhLingtuSignCryptoUtilsBCECPublicKey_initWithNSString_withOrgSpongycastleAsn1X509SubjectPublicKeyInfo_withComYouzhLingtuSignCryptoConfigProviderConfiguration_(NSString *algorithm, OrgSpongycastleAsn1X509SubjectPublicKeyInfo *info, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> configuration) {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsBCECPublicKey, initWithNSString_withOrgSpongycastleAsn1X509SubjectPublicKeyInfo_withComYouzhLingtuSignCryptoConfigProviderConfiguration_, algorithm, info, configuration)
}

JavaSecuritySpecECParameterSpec *ComYouzhLingtuSignCryptoUtilsBCECPublicKey_createSpecWithJavaSecuritySpecEllipticCurve_withOrgSpongycastleCryptoParamsECDomainParameters_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, JavaSecuritySpecEllipticCurve *ellipticCurve, OrgSpongycastleCryptoParamsECDomainParameters *dp) {
  return new_JavaSecuritySpecECParameterSpec_initWithJavaSecuritySpecEllipticCurve_withJavaSecuritySpecECPoint_withJavaMathBigInteger_withInt_(ellipticCurve, new_JavaSecuritySpecECPoint_initWithJavaMathBigInteger_withJavaMathBigInteger_([((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(dp)) getG])) getAffineXCoord])) toBigInteger], [((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([dp getG])) getAffineYCoord])) toBigInteger]), [dp getN], [((JavaMathBigInteger *) nil_chk([dp getH])) intValue]);
}

void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_populateFromPubKeyInfoWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, OrgSpongycastleAsn1X509SubjectPublicKeyInfo *info) {
  OrgSpongycastleAsn1X9X962Parameters *params = new_OrgSpongycastleAsn1X9X962Parameters_initWithOrgSpongycastleAsn1ASN1Primitive_((OrgSpongycastleAsn1ASN1Primitive *) cast_chk([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(info)) getAlgorithm])) getParameters], [OrgSpongycastleAsn1ASN1Primitive class]));
  OrgSpongycastleMathEcECCurve *curve = ComYouzhLingtuSignCryptoUtilsEC5Util_getCurveWithComYouzhLingtuSignCryptoConfigProviderConfiguration_withOrgSpongycastleAsn1X9X962Parameters_(self->configuration_, params);
  self->ecSpec_ = ComYouzhLingtuSignCryptoUtilsEC5Util_convertToSpecWithOrgSpongycastleAsn1X9X962Parameters_withOrgSpongycastleMathEcECCurve_(params, curve);
  OrgSpongycastleAsn1DERBitString *bits = [info getPublicKeyData];
  IOSByteArray *data = [((OrgSpongycastleAsn1DERBitString *) nil_chk(bits)) getBytes];
  OrgSpongycastleAsn1ASN1OctetString *key = new_OrgSpongycastleAsn1DEROctetString_initWithByteArray_(data);
  if (IOSByteArray_Get(nil_chk(data), 0) == (jint) 0x04 && IOSByteArray_Get(data, 1) == data->size_ - 2 && (IOSByteArray_Get(data, 2) == (jint) 0x02 || IOSByteArray_Get(data, 2) == (jint) 0x03)) {
    jint qLength = [new_OrgSpongycastleAsn1X9X9IntegerConverter_init() getByteLengthWithOrgSpongycastleMathEcECCurve:curve];
    if (qLength >= data->size_ - 3) {
      @try {
        key = (OrgSpongycastleAsn1ASN1OctetString *) cast_chk(OrgSpongycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(data), [OrgSpongycastleAsn1ASN1OctetString class]);
      }
      @catch (JavaIoIOException *ex) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"error recovering public key");
      }
    }
  }
  OrgSpongycastleAsn1X9X9ECPoint *derQ = new_OrgSpongycastleAsn1X9X9ECPoint_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleAsn1ASN1OctetString_(curve, key);
  self->q_ = [derQ getPoint];
}

void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_extractBytesWithByteArray_withInt_withJavaMathBigInteger_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, IOSByteArray *encKey, jint offSet, JavaMathBigInteger *bI) {
  IOSByteArray *val = [((JavaMathBigInteger *) nil_chk(bI)) toByteArray];
  if (((IOSByteArray *) nil_chk(val))->size_ < 32) {
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:32];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(val, 0, tmp, tmp->size_ - val->size_, val->size_);
    val = tmp;
  }
  for (jint i = 0; i != 32; i++) {
    *IOSByteArray_GetRef(nil_chk(encKey), offSet + i) = IOSByteArray_Get(val, val->size_ - 1 - i);
  }
}

void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_readObjectWithJavaIoObjectInputStream_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, JavaIoObjectInputStream *inArg) {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  IOSByteArray *enc = (IOSByteArray *) cast_chk([inArg readObject], [IOSByteArray class]);
  ComYouzhLingtuSignCryptoUtilsBCECPublicKey_populateFromPubKeyInfoWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(self, OrgSpongycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(OrgSpongycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(enc)));
  self->configuration_ = JreLoadStatic(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, CONFIGURATION);
}

void ComYouzhLingtuSignCryptoUtilsBCECPublicKey_writeObjectWithJavaIoObjectOutputStream_(ComYouzhLingtuSignCryptoUtilsBCECPublicKey *self, JavaIoObjectOutputStream *outArg) {
  [((JavaIoObjectOutputStream *) nil_chk(outArg)) defaultWriteObject];
  [outArg writeObjectWithId:[self getEncoded]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoUtilsBCECPublicKey)
