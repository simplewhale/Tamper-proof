//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/utils/BaseMac.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/utils/BCPBEKey.h"
#include "com/youzh/lingtu/sign/crypto/utils/BaseMac.h"
#include "com/youzh/lingtu/sign/crypto/utils/PBE.h"
#include "com/youzh/lingtu/sign/crypto/utils/PKCS12Key.h"
#include "com/youzh/lingtu/sign/crypto/utils/SkeinParameterSpec.h"
#include "java/lang/Exception.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/util/Hashtable.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/crypto/MacSpi.h"
#include "javax/crypto/SecretKey.h"
#include "javax/crypto/interfaces/PBEKey.h"
#include "javax/crypto/spec/IvParameterSpec.h"
#include "javax/crypto/spec/PBEParameterSpec.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/Mac.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"
#include "org/spongycastle/crypto/params/SkeinParameters.h"

@interface ComYouzhLingtuSignCryptoUtilsBaseMac () {
 @public
  id<OrgSpongycastleCryptoMac> macEngine_;
  jint scheme_;
  jint pbeHash_;
  jint keySize_;
}

+ (JavaUtilHashtable *)copyMapWithJavaUtilMap:(id<JavaUtilMap>)paramsMap OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoUtilsBaseMac, macEngine_, id<OrgSpongycastleCryptoMac>)

__attribute__((unused)) static JavaUtilHashtable *ComYouzhLingtuSignCryptoUtilsBaseMac_copyMapWithJavaUtilMap_(id<JavaUtilMap> paramsMap);

@implementation ComYouzhLingtuSignCryptoUtilsBaseMac

- (instancetype)initWithOrgSpongycastleCryptoMac:(id<OrgSpongycastleCryptoMac>)macEngine {
  ComYouzhLingtuSignCryptoUtilsBaseMac_initWithOrgSpongycastleCryptoMac_(self, macEngine);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoMac:(id<OrgSpongycastleCryptoMac>)macEngine
                                         withInt:(jint)scheme
                                         withInt:(jint)pbeHash
                                         withInt:(jint)keySize {
  ComYouzhLingtuSignCryptoUtilsBaseMac_initWithOrgSpongycastleCryptoMac_withInt_withInt_withInt_(self, macEngine, scheme, pbeHash, keySize);
  return self;
}

- (void)engineInitWithJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params {
  id<OrgSpongycastleCryptoCipherParameters> param;
  if (key == nil) {
    @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"key is null");
  }
  if ([key isKindOfClass:[ComYouzhLingtuSignCryptoUtilsPKCS12Key class]]) {
    id<JavaxCryptoSecretKey> k;
    JavaxCryptoSpecPBEParameterSpec *pbeSpec;
    @try {
      k = (id<JavaxCryptoSecretKey>) cast_check(key, JavaxCryptoSecretKey_class_());
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"PKCS12 requires a SecretKey/PBEKey");
    }
    @try {
      pbeSpec = (JavaxCryptoSpecPBEParameterSpec *) cast_chk(params, [JavaxCryptoSpecPBEParameterSpec class]);
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"PKCS12 requires a PBEParameterSpec");
    }
    if ([JavaxCryptoInterfacesPBEKey_class_() isInstance:k] && pbeSpec == nil) {
      pbeSpec = new_JavaxCryptoSpecPBEParameterSpec_initWithByteArray_withInt_([((id<JavaxCryptoInterfacesPBEKey>) cast_check(k, JavaxCryptoInterfacesPBEKey_class_())) getSalt], [((id<JavaxCryptoInterfacesPBEKey>) cast_check(k, JavaxCryptoInterfacesPBEKey_class_())) getIterationCount]);
    }
    jint digest = ComYouzhLingtuSignCryptoUtilsPBE_SHA1;
    jint keySize = 160;
    if ([((NSString *) nil_chk([((id<OrgSpongycastleCryptoMac>) nil_chk(macEngine_)) getAlgorithmName])) java_hasPrefix:@"GOST"]) {
      digest = ComYouzhLingtuSignCryptoUtilsPBE_GOST3411;
      keySize = 256;
    }
    else if ([((NSString *) nil_chk([((id<OrgSpongycastleCryptoMac>) nil_chk(macEngine_)) getAlgorithmName])) java_hasPrefix:@"SHA256"]) {
      digest = ComYouzhLingtuSignCryptoUtilsPBE_SHA256;
      keySize = 256;
    }
    param = ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEMacParametersWithJavaxCryptoSecretKey_withInt_withInt_withInt_withJavaxCryptoSpecPBEParameterSpec_(k, ComYouzhLingtuSignCryptoUtilsPBE_PKCS12, digest, keySize, pbeSpec);
  }
  else if ([key isKindOfClass:[ComYouzhLingtuSignCryptoUtilsBCPBEKey class]]) {
    ComYouzhLingtuSignCryptoUtilsBCPBEKey *k = (ComYouzhLingtuSignCryptoUtilsBCPBEKey *) key;
    if ([k getParam] != nil) {
      param = [k getParam];
    }
    else if ([params isKindOfClass:[JavaxCryptoSpecPBEParameterSpec class]]) {
      param = ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEMacParametersWithComYouzhLingtuSignCryptoUtilsBCPBEKey_withJavaSecuritySpecAlgorithmParameterSpec_(k, params);
    }
    else {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"PBE requires PBE parameters to be set.");
    }
  }
  else if ([params isKindOfClass:[JavaxCryptoSpecIvParameterSpec class]]) {
    param = new_OrgSpongycastleCryptoParamsParametersWithIV_initWithOrgSpongycastleCryptoCipherParameters_withByteArray_(new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_([key getEncoded]), [((JavaxCryptoSpecIvParameterSpec *) nil_chk(((JavaxCryptoSpecIvParameterSpec *) params))) getIV]);
  }
  else if ([params isKindOfClass:[ComYouzhLingtuSignCryptoUtilsSkeinParameterSpec class]]) {
    param = [((OrgSpongycastleCryptoParamsSkeinParameters_Builder *) nil_chk([new_OrgSpongycastleCryptoParamsSkeinParameters_Builder_initWithJavaUtilHashtable_(ComYouzhLingtuSignCryptoUtilsBaseMac_copyMapWithJavaUtilMap_([((ComYouzhLingtuSignCryptoUtilsSkeinParameterSpec *) nil_chk(((ComYouzhLingtuSignCryptoUtilsSkeinParameterSpec *) params))) getParameters])) setKeyWithByteArray:[key getEncoded]])) build];
  }
  else if (params == nil) {
    param = new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_([key getEncoded]);
  }
  else {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"unknown parameter type.");
  }
  [((id<OrgSpongycastleCryptoMac>) nil_chk(macEngine_)) init__WithOrgSpongycastleCryptoCipherParameters:param];
}

- (jint)engineGetMacLength {
  return [((id<OrgSpongycastleCryptoMac>) nil_chk(macEngine_)) getMacSize];
}

- (void)engineReset {
  [((id<OrgSpongycastleCryptoMac>) nil_chk(macEngine_)) reset];
}

- (void)engineUpdateWithByte:(jbyte)input {
  [((id<OrgSpongycastleCryptoMac>) nil_chk(macEngine_)) updateWithByte:input];
}

- (void)engineUpdateWithByteArray:(IOSByteArray *)input
                          withInt:(jint)offset
                          withInt:(jint)len {
  [((id<OrgSpongycastleCryptoMac>) nil_chk(macEngine_)) updateWithByteArray:input withInt:offset withInt:len];
}

- (IOSByteArray *)engineDoFinal {
  IOSByteArray *out = [IOSByteArray newArrayWithLength:[self engineGetMacLength]];
  [((id<OrgSpongycastleCryptoMac>) nil_chk(macEngine_)) doFinalWithByteArray:out withInt:0];
  return out;
}

+ (JavaUtilHashtable *)copyMapWithJavaUtilMap:(id<JavaUtilMap>)paramsMap {
  return ComYouzhLingtuSignCryptoUtilsBaseMac_copyMapWithJavaUtilMap_(paramsMap);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, 4, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashtable;", 0xa, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoMac:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoMac:withInt:withInt:withInt:);
  methods[2].selector = @selector(engineInitWithJavaSecurityKey:withJavaSecuritySpecAlgorithmParameterSpec:);
  methods[3].selector = @selector(engineGetMacLength);
  methods[4].selector = @selector(engineReset);
  methods[5].selector = @selector(engineUpdateWithByte:);
  methods[6].selector = @selector(engineUpdateWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(engineDoFinal);
  methods[8].selector = @selector(copyMapWithJavaUtilMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "macEngine_", "LOrgSpongycastleCryptoMac;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scheme_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pbeHash_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keySize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoMac;", "LOrgSpongycastleCryptoMac;III", "engineInit", "LJavaSecurityKey;LJavaSecuritySpecAlgorithmParameterSpec;", "LJavaSecurityInvalidKeyException;LJavaSecurityInvalidAlgorithmParameterException;", "engineUpdate", "B", "[BII", "copyMap", "LJavaUtilMap;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoUtilsBaseMac = { "BaseMac", "com.youzh.lingtu.sign.crypto.utils", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoUtilsBaseMac;
}

@end

void ComYouzhLingtuSignCryptoUtilsBaseMac_initWithOrgSpongycastleCryptoMac_(ComYouzhLingtuSignCryptoUtilsBaseMac *self, id<OrgSpongycastleCryptoMac> macEngine) {
  JavaxCryptoMacSpi_init(self);
  self->scheme_ = ComYouzhLingtuSignCryptoUtilsPBE_PKCS12;
  self->pbeHash_ = ComYouzhLingtuSignCryptoUtilsPBE_SHA1;
  self->keySize_ = 160;
  self->macEngine_ = macEngine;
}

ComYouzhLingtuSignCryptoUtilsBaseMac *new_ComYouzhLingtuSignCryptoUtilsBaseMac_initWithOrgSpongycastleCryptoMac_(id<OrgSpongycastleCryptoMac> macEngine) {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsBaseMac, initWithOrgSpongycastleCryptoMac_, macEngine)
}

ComYouzhLingtuSignCryptoUtilsBaseMac *create_ComYouzhLingtuSignCryptoUtilsBaseMac_initWithOrgSpongycastleCryptoMac_(id<OrgSpongycastleCryptoMac> macEngine) {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsBaseMac, initWithOrgSpongycastleCryptoMac_, macEngine)
}

void ComYouzhLingtuSignCryptoUtilsBaseMac_initWithOrgSpongycastleCryptoMac_withInt_withInt_withInt_(ComYouzhLingtuSignCryptoUtilsBaseMac *self, id<OrgSpongycastleCryptoMac> macEngine, jint scheme, jint pbeHash, jint keySize) {
  JavaxCryptoMacSpi_init(self);
  self->scheme_ = ComYouzhLingtuSignCryptoUtilsPBE_PKCS12;
  self->pbeHash_ = ComYouzhLingtuSignCryptoUtilsPBE_SHA1;
  self->keySize_ = 160;
  self->macEngine_ = macEngine;
  self->scheme_ = scheme;
  self->pbeHash_ = pbeHash;
  self->keySize_ = keySize;
}

ComYouzhLingtuSignCryptoUtilsBaseMac *new_ComYouzhLingtuSignCryptoUtilsBaseMac_initWithOrgSpongycastleCryptoMac_withInt_withInt_withInt_(id<OrgSpongycastleCryptoMac> macEngine, jint scheme, jint pbeHash, jint keySize) {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsBaseMac, initWithOrgSpongycastleCryptoMac_withInt_withInt_withInt_, macEngine, scheme, pbeHash, keySize)
}

ComYouzhLingtuSignCryptoUtilsBaseMac *create_ComYouzhLingtuSignCryptoUtilsBaseMac_initWithOrgSpongycastleCryptoMac_withInt_withInt_withInt_(id<OrgSpongycastleCryptoMac> macEngine, jint scheme, jint pbeHash, jint keySize) {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsBaseMac, initWithOrgSpongycastleCryptoMac_withInt_withInt_withInt_, macEngine, scheme, pbeHash, keySize)
}

JavaUtilHashtable *ComYouzhLingtuSignCryptoUtilsBaseMac_copyMapWithJavaUtilMap_(id<JavaUtilMap> paramsMap) {
  ComYouzhLingtuSignCryptoUtilsBaseMac_initialize();
  JavaUtilHashtable *newTable = new_JavaUtilHashtable_init();
  id<JavaUtilIterator> keys = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(paramsMap)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(keys)) hasNext]) {
    id key = [keys next];
    (void) [newTable putWithId:key withId:[paramsMap getWithId:key]];
  }
  return newTable;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoUtilsBaseMac)
