//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/Keys.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/ECKeyPair.h"
#include "com/youzh/lingtu/sign/crypto/Hash.h"
#include "com/youzh/lingtu/sign/crypto/Keys.h"
#include "com/youzh/lingtu/sign/crypto/SecureRandomUtils.h"
#include "com/youzh/lingtu/sign/crypto/config/BouncyCastleProvider.h"
#include "com/youzh/lingtu/sign/crypto/utils/Numeric.h"
#include "com/youzh/lingtu/sign/crypto/utils/Strings.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/SecureRandom.h"
#include "java/security/Security.h"
#include "java/security/spec/ECGenParameterSpec.h"
#include "java/util/Arrays.h"

@interface ComYouzhLingtuSignCryptoKeys ()

- (instancetype)init;

@end

__attribute__((unused)) static void ComYouzhLingtuSignCryptoKeys_init(ComYouzhLingtuSignCryptoKeys *self);

__attribute__((unused)) static ComYouzhLingtuSignCryptoKeys *new_ComYouzhLingtuSignCryptoKeys_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYouzhLingtuSignCryptoKeys *create_ComYouzhLingtuSignCryptoKeys_init(void);

J2OBJC_INITIALIZED_DEFN(ComYouzhLingtuSignCryptoKeys)

@implementation ComYouzhLingtuSignCryptoKeys

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoKeys_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaSecurityKeyPair *)createSecp256k1KeyPair {
  return ComYouzhLingtuSignCryptoKeys_createSecp256k1KeyPair();
}

+ (ComYouzhLingtuSignCryptoECKeyPair *)createEcKeyPair {
  return ComYouzhLingtuSignCryptoKeys_createEcKeyPair();
}

+ (NSString *)getAddressWithComYouzhLingtuSignCryptoECKeyPair:(ComYouzhLingtuSignCryptoECKeyPair *)ecKeyPair {
  return ComYouzhLingtuSignCryptoKeys_getAddressWithComYouzhLingtuSignCryptoECKeyPair_(ecKeyPair);
}

+ (NSString *)getAddressWithJavaMathBigInteger:(JavaMathBigInteger *)publicKey {
  return ComYouzhLingtuSignCryptoKeys_getAddressWithJavaMathBigInteger_(publicKey);
}

+ (NSString *)getAddressWithNSString:(NSString *)publicKey {
  return ComYouzhLingtuSignCryptoKeys_getAddressWithNSString_(publicKey);
}

+ (IOSByteArray *)getAddressWithByteArray:(IOSByteArray *)publicKey {
  return ComYouzhLingtuSignCryptoKeys_getAddressWithByteArray_(publicKey);
}

+ (IOSByteArray *)serializeWithComYouzhLingtuSignCryptoECKeyPair:(ComYouzhLingtuSignCryptoECKeyPair *)ecKeyPair {
  return ComYouzhLingtuSignCryptoKeys_serializeWithComYouzhLingtuSignCryptoECKeyPair_(ecKeyPair);
}

+ (ComYouzhLingtuSignCryptoECKeyPair *)deserializeWithByteArray:(IOSByteArray *)input {
  return ComYouzhLingtuSignCryptoKeys_deserializeWithByteArray_(input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x8, -1, -1, 0, -1, -1, -1 },
    { NULL, "LComYouzhLingtuSignCryptoECKeyPair;", 0x9, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 2, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 3, -1, -1, -1, -1 },
    { NULL, "LComYouzhLingtuSignCryptoECKeyPair;", 0x9, 8, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createSecp256k1KeyPair);
  methods[2].selector = @selector(createEcKeyPair);
  methods[3].selector = @selector(getAddressWithComYouzhLingtuSignCryptoECKeyPair:);
  methods[4].selector = @selector(getAddressWithJavaMathBigInteger:);
  methods[5].selector = @selector(getAddressWithNSString:);
  methods[6].selector = @selector(getAddressWithByteArray:);
  methods[7].selector = @selector(serializeWithComYouzhLingtuSignCryptoECKeyPair:);
  methods[8].selector = @selector(deserializeWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PRIVATE_KEY_SIZE", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoKeys_PRIVATE_KEY_SIZE, 0x18, -1, -1, -1, -1 },
    { "PUBLIC_KEY_SIZE", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoKeys_PUBLIC_KEY_SIZE, 0x18, -1, -1, -1, -1 },
    { "ADDRESS_SIZE", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoKeys_ADDRESS_SIZE, 0x19, -1, -1, -1, -1 },
    { "ADDRESS_LENGTH_IN_HEX", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoKeys_ADDRESS_LENGTH_IN_HEX, 0x19, -1, -1, -1, -1 },
    { "PUBLIC_KEY_LENGTH_IN_HEX", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoKeys_PUBLIC_KEY_LENGTH_IN_HEX, 0x18, -1, -1, -1, -1 },
    { "PRIVATE_KEY_LENGTH_IN_HEX", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoKeys_PRIVATE_KEY_LENGTH_IN_HEX, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecurityNoSuchProviderException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidAlgorithmParameterException;", "LJavaSecurityInvalidAlgorithmParameterException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityNoSuchProviderException;", "getAddress", "LComYouzhLingtuSignCryptoECKeyPair;", "LJavaMathBigInteger;", "LNSString;", "[B", "serialize", "deserialize" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoKeys = { "Keys", "com.youzh.lingtu.sign.crypto", ptrTable, methods, fields, 7, 0x1, 9, 6, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoKeys;
}

+ (void)initialize {
  if (self == [ComYouzhLingtuSignCryptoKeys class]) {
    {
      JavaSecuritySecurity_addProviderWithJavaSecurityProvider_(new_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_init());
    }
    J2OBJC_SET_INITIALIZED(ComYouzhLingtuSignCryptoKeys)
  }
}

@end

void ComYouzhLingtuSignCryptoKeys_init(ComYouzhLingtuSignCryptoKeys *self) {
  NSObject_init(self);
}

ComYouzhLingtuSignCryptoKeys *new_ComYouzhLingtuSignCryptoKeys_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoKeys, init)
}

ComYouzhLingtuSignCryptoKeys *create_ComYouzhLingtuSignCryptoKeys_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoKeys, init)
}

JavaSecurityKeyPair *ComYouzhLingtuSignCryptoKeys_createSecp256k1KeyPair() {
  ComYouzhLingtuSignCryptoKeys_initialize();
  JavaSecurityKeyPairGenerator *keyPairGenerator = JavaSecurityKeyPairGenerator_getInstanceWithNSString_withNSString_(@"ECDSA", @"BC");
  JavaSecuritySpecECGenParameterSpec *ecGenParameterSpec = new_JavaSecuritySpecECGenParameterSpec_initWithNSString_(@"secp256k1");
  [((JavaSecurityKeyPairGenerator *) nil_chk(keyPairGenerator)) initialize__WithJavaSecuritySpecAlgorithmParameterSpec:ecGenParameterSpec withJavaSecuritySecureRandom:ComYouzhLingtuSignCryptoSecureRandomUtils_secureRandom()];
  return [keyPairGenerator generateKeyPair];
}

ComYouzhLingtuSignCryptoECKeyPair *ComYouzhLingtuSignCryptoKeys_createEcKeyPair() {
  ComYouzhLingtuSignCryptoKeys_initialize();
  JavaSecurityKeyPair *keyPair = ComYouzhLingtuSignCryptoKeys_createSecp256k1KeyPair();
  return ComYouzhLingtuSignCryptoECKeyPair_createWithJavaSecurityKeyPair_(keyPair);
}

NSString *ComYouzhLingtuSignCryptoKeys_getAddressWithComYouzhLingtuSignCryptoECKeyPair_(ComYouzhLingtuSignCryptoECKeyPair *ecKeyPair) {
  ComYouzhLingtuSignCryptoKeys_initialize();
  return ComYouzhLingtuSignCryptoKeys_getAddressWithJavaMathBigInteger_([((ComYouzhLingtuSignCryptoECKeyPair *) nil_chk(ecKeyPair)) getPublicKey]);
}

NSString *ComYouzhLingtuSignCryptoKeys_getAddressWithJavaMathBigInteger_(JavaMathBigInteger *publicKey) {
  ComYouzhLingtuSignCryptoKeys_initialize();
  return ComYouzhLingtuSignCryptoKeys_getAddressWithNSString_(ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringWithPrefixZeroPaddedWithJavaMathBigInteger_withInt_(publicKey, ComYouzhLingtuSignCryptoKeys_PUBLIC_KEY_LENGTH_IN_HEX));
}

NSString *ComYouzhLingtuSignCryptoKeys_getAddressWithNSString_(NSString *publicKey) {
  ComYouzhLingtuSignCryptoKeys_initialize();
  NSString *publicKeyNoPrefix = ComYouzhLingtuSignCryptoUtilsNumeric_cleanHexPrefixWithNSString_(publicKey);
  if ([((NSString *) nil_chk(publicKeyNoPrefix)) java_length] < ComYouzhLingtuSignCryptoKeys_PUBLIC_KEY_LENGTH_IN_HEX) {
    publicKeyNoPrefix = JreStrcat("$$", ComYouzhLingtuSignCryptoUtilsStrings_zerosWithInt_(ComYouzhLingtuSignCryptoKeys_PUBLIC_KEY_LENGTH_IN_HEX - [publicKeyNoPrefix java_length]), publicKeyNoPrefix);
  }
  NSString *hash_ = ComYouzhLingtuSignCryptoHash_sha3WithNSString_(publicKeyNoPrefix);
  return [((NSString *) nil_chk(hash_)) java_substring:[hash_ java_length] - ComYouzhLingtuSignCryptoKeys_ADDRESS_LENGTH_IN_HEX];
}

IOSByteArray *ComYouzhLingtuSignCryptoKeys_getAddressWithByteArray_(IOSByteArray *publicKey) {
  ComYouzhLingtuSignCryptoKeys_initialize();
  IOSByteArray *hash_ = ComYouzhLingtuSignCryptoHash_sha3WithByteArray_(publicKey);
  return JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(hash_, ((IOSByteArray *) nil_chk(hash_))->size_ - 20, hash_->size_);
}

IOSByteArray *ComYouzhLingtuSignCryptoKeys_serializeWithComYouzhLingtuSignCryptoECKeyPair_(ComYouzhLingtuSignCryptoECKeyPair *ecKeyPair) {
  ComYouzhLingtuSignCryptoKeys_initialize();
  IOSByteArray *privateKey = ComYouzhLingtuSignCryptoUtilsNumeric_toBytesPaddedWithJavaMathBigInteger_withInt_([((ComYouzhLingtuSignCryptoECKeyPair *) nil_chk(ecKeyPair)) getPrivateKey], ComYouzhLingtuSignCryptoKeys_PRIVATE_KEY_SIZE);
  IOSByteArray *publicKey = ComYouzhLingtuSignCryptoUtilsNumeric_toBytesPaddedWithJavaMathBigInteger_withInt_([ecKeyPair getPublicKey], ComYouzhLingtuSignCryptoKeys_PUBLIC_KEY_SIZE);
  IOSByteArray *result = JavaUtilArrays_copyOfWithByteArray_withInt_(privateKey, ComYouzhLingtuSignCryptoKeys_PRIVATE_KEY_SIZE + ComYouzhLingtuSignCryptoKeys_PUBLIC_KEY_SIZE);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(publicKey, 0, result, ComYouzhLingtuSignCryptoKeys_PRIVATE_KEY_SIZE, ComYouzhLingtuSignCryptoKeys_PUBLIC_KEY_SIZE);
  return result;
}

ComYouzhLingtuSignCryptoECKeyPair *ComYouzhLingtuSignCryptoKeys_deserializeWithByteArray_(IOSByteArray *input) {
  ComYouzhLingtuSignCryptoKeys_initialize();
  if (((IOSByteArray *) nil_chk(input))->size_ != ComYouzhLingtuSignCryptoKeys_PRIVATE_KEY_SIZE + ComYouzhLingtuSignCryptoKeys_PUBLIC_KEY_SIZE) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Invalid input key size");
  }
  JavaMathBigInteger *privateKey = ComYouzhLingtuSignCryptoUtilsNumeric_toBigIntWithByteArray_withInt_withInt_(input, 0, ComYouzhLingtuSignCryptoKeys_PRIVATE_KEY_SIZE);
  JavaMathBigInteger *publicKey = ComYouzhLingtuSignCryptoUtilsNumeric_toBigIntWithByteArray_withInt_withInt_(input, ComYouzhLingtuSignCryptoKeys_PRIVATE_KEY_SIZE, ComYouzhLingtuSignCryptoKeys_PUBLIC_KEY_SIZE);
  return new_ComYouzhLingtuSignCryptoECKeyPair_initWithJavaMathBigInteger_withJavaMathBigInteger_(privateKey, publicKey);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoKeys)
