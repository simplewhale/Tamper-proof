//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/Sign.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComYouzhLingtuSignCryptoSign")
#ifdef RESTRICT_ComYouzhLingtuSignCryptoSign
#define INCLUDE_ALL_ComYouzhLingtuSignCryptoSign 0
#else
#define INCLUDE_ALL_ComYouzhLingtuSignCryptoSign 1
#endif
#undef RESTRICT_ComYouzhLingtuSignCryptoSign

#if !defined (ComYouzhLingtuSignCryptoSign_) && (INCLUDE_ALL_ComYouzhLingtuSignCryptoSign || defined(INCLUDE_ComYouzhLingtuSignCryptoSign))
#define ComYouzhLingtuSignCryptoSign_

@class ComYouzhLingtuSignCryptoECKeyPair;
@class ComYouzhLingtuSignCryptoSign_SignatureData;
@class IOSByteArray;
@class JavaMathBigInteger;
@class OrgSpongycastleCryptoParamsECDomainParameters;

@interface ComYouzhLingtuSignCryptoSign : NSObject

#pragma mark Public

- (instancetype)init;

+ (JavaMathBigInteger *)publicKeyFromPrivateWithJavaMathBigInteger:(JavaMathBigInteger *)privKey;

+ (JavaMathBigInteger *)signedMessageToKeyWithByteArray:(IOSByteArray *)message
         withComYouzhLingtuSignCryptoSign_SignatureData:(ComYouzhLingtuSignCryptoSign_SignatureData *)signatureData;

+ (ComYouzhLingtuSignCryptoSign_SignatureData *)signMessageWithByteArray:(IOSByteArray *)message
                                   withComYouzhLingtuSignCryptoECKeyPair:(ComYouzhLingtuSignCryptoECKeyPair *)keyPair;

+ (ComYouzhLingtuSignCryptoSign_SignatureData *)signMessageWithByteArray:(IOSByteArray *)message
                                   withComYouzhLingtuSignCryptoECKeyPair:(ComYouzhLingtuSignCryptoECKeyPair *)keyPair
                                                             withBoolean:(jboolean)isHashed;

@end

J2OBJC_STATIC_INIT(ComYouzhLingtuSignCryptoSign)

inline OrgSpongycastleCryptoParamsECDomainParameters *ComYouzhLingtuSignCryptoSign_get_CURVE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgSpongycastleCryptoParamsECDomainParameters *ComYouzhLingtuSignCryptoSign_CURVE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoSign, CURVE, OrgSpongycastleCryptoParamsECDomainParameters *)

inline JavaMathBigInteger *ComYouzhLingtuSignCryptoSign_get_HALF_CURVE_ORDER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *ComYouzhLingtuSignCryptoSign_HALF_CURVE_ORDER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoSign, HALF_CURVE_ORDER, JavaMathBigInteger *)

FOUNDATION_EXPORT void ComYouzhLingtuSignCryptoSign_init(ComYouzhLingtuSignCryptoSign *self);

FOUNDATION_EXPORT ComYouzhLingtuSignCryptoSign *new_ComYouzhLingtuSignCryptoSign_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComYouzhLingtuSignCryptoSign *create_ComYouzhLingtuSignCryptoSign_init(void);

FOUNDATION_EXPORT ComYouzhLingtuSignCryptoSign_SignatureData *ComYouzhLingtuSignCryptoSign_signMessageWithByteArray_withComYouzhLingtuSignCryptoECKeyPair_(IOSByteArray *message, ComYouzhLingtuSignCryptoECKeyPair *keyPair);

FOUNDATION_EXPORT ComYouzhLingtuSignCryptoSign_SignatureData *ComYouzhLingtuSignCryptoSign_signMessageWithByteArray_withComYouzhLingtuSignCryptoECKeyPair_withBoolean_(IOSByteArray *message, ComYouzhLingtuSignCryptoECKeyPair *keyPair, jboolean isHashed);

FOUNDATION_EXPORT JavaMathBigInteger *ComYouzhLingtuSignCryptoSign_signedMessageToKeyWithByteArray_withComYouzhLingtuSignCryptoSign_SignatureData_(IOSByteArray *message, ComYouzhLingtuSignCryptoSign_SignatureData *signatureData);

FOUNDATION_EXPORT JavaMathBigInteger *ComYouzhLingtuSignCryptoSign_publicKeyFromPrivateWithJavaMathBigInteger_(JavaMathBigInteger *privKey);

J2OBJC_TYPE_LITERAL_HEADER(ComYouzhLingtuSignCryptoSign)

#endif

#if !defined (ComYouzhLingtuSignCryptoSign_SignatureData_) && (INCLUDE_ALL_ComYouzhLingtuSignCryptoSign || defined(INCLUDE_ComYouzhLingtuSignCryptoSign_SignatureData))
#define ComYouzhLingtuSignCryptoSign_SignatureData_

@class IOSByteArray;

@interface ComYouzhLingtuSignCryptoSign_SignatureData : NSObject

#pragma mark Public

- (instancetype)initWithByte:(jbyte)v
               withByteArray:(IOSByteArray *)r
               withByteArray:(IOSByteArray *)s;

- (jboolean)isEqual:(id)o;

- (IOSByteArray *)getR;

- (IOSByteArray *)getS;

- (jbyte)getV;

- (NSUInteger)hash;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComYouzhLingtuSignCryptoSign_SignatureData)

FOUNDATION_EXPORT void ComYouzhLingtuSignCryptoSign_SignatureData_initWithByte_withByteArray_withByteArray_(ComYouzhLingtuSignCryptoSign_SignatureData *self, jbyte v, IOSByteArray *r, IOSByteArray *s);

FOUNDATION_EXPORT ComYouzhLingtuSignCryptoSign_SignatureData *new_ComYouzhLingtuSignCryptoSign_SignatureData_initWithByte_withByteArray_withByteArray_(jbyte v, IOSByteArray *r, IOSByteArray *s) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComYouzhLingtuSignCryptoSign_SignatureData *create_ComYouzhLingtuSignCryptoSign_SignatureData_initWithByte_withByteArray_withByteArray_(jbyte v, IOSByteArray *r, IOSByteArray *s);

J2OBJC_TYPE_LITERAL_HEADER(ComYouzhLingtuSignCryptoSign_SignatureData)

#endif

#pragma pop_macro("INCLUDE_ALL_ComYouzhLingtuSignCryptoSign")
