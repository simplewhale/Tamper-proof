//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/dstu/SignatureSpi.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/config/BouncyCastleProvider.h"
#include "com/youzh/lingtu/sign/crypto/dstu/BCDSTU4145PublicKey.h"
#include "com/youzh/lingtu/sign/crypto/dstu/SignatureSpi.h"
#include "com/youzh/lingtu/sign/crypto/utils/ECKey.h"
#include "com/youzh/lingtu/sign/crypto/utils/ECPublicKey.h"
#include "com/youzh/lingtu/sign/crypto/utils/ECUtil.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/SecureRandom.h"
#include "java/security/SignatureException.h"
#include "java/security/SignatureSpi.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "org/spongycastle/asn1/ASN1OctetString.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/DEROctetString.h"
#include "org/spongycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DSA.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/digests/GOST3411Digest.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/crypto/signers/DSTU4145Signer.h"

@interface ComYouzhLingtuSignCryptoDstuSignatureSpi () {
 @public
  id<OrgSpongycastleCryptoDigest> digest_;
  id<OrgSpongycastleCryptoDSA> signer_;
}

@end

J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoDstuSignatureSpi, digest_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoDstuSignatureSpi, signer_, id<OrgSpongycastleCryptoDSA>)

inline IOSByteArray *ComYouzhLingtuSignCryptoDstuSignatureSpi_get_DEFAULT_SBOX(void);
inline IOSByteArray *ComYouzhLingtuSignCryptoDstuSignatureSpi_set_DEFAULT_SBOX(IOSByteArray *value);
static IOSByteArray *ComYouzhLingtuSignCryptoDstuSignatureSpi_DEFAULT_SBOX;
J2OBJC_STATIC_FIELD_OBJ(ComYouzhLingtuSignCryptoDstuSignatureSpi, DEFAULT_SBOX, IOSByteArray *)

J2OBJC_INITIALIZED_DEFN(ComYouzhLingtuSignCryptoDstuSignatureSpi)

@implementation ComYouzhLingtuSignCryptoDstuSignatureSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoDstuSignatureSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)engineInitVerifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey {
  id<OrgSpongycastleCryptoCipherParameters> param;
  if ([ComYouzhLingtuSignCryptoUtilsECPublicKey_class_() isInstance:publicKey]) {
    param = ComYouzhLingtuSignCryptoUtilsECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(publicKey);
  }
  else {
    @try {
      IOSByteArray *bytes = [((id<JavaSecurityPublicKey>) nil_chk(publicKey)) getEncoded];
      publicKey = ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_getPublicKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(OrgSpongycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(bytes));
      if ([ComYouzhLingtuSignCryptoUtilsECPublicKey_class_() isInstance:publicKey]) {
        param = ComYouzhLingtuSignCryptoUtilsECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(publicKey);
      }
      else {
        @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"can't recognise key type in DSA based signer");
      }
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"can't recognise key type in DSA based signer");
    }
  }
  digest_ = new_OrgSpongycastleCryptoDigestsGOST3411Digest_initWithByteArray_([self expandSboxWithByteArray:[((ComYouzhLingtuSignCryptoDstuBCDSTU4145PublicKey *) nil_chk(((ComYouzhLingtuSignCryptoDstuBCDSTU4145PublicKey *) cast_chk(publicKey, [ComYouzhLingtuSignCryptoDstuBCDSTU4145PublicKey class])))) getSbox]]);
  [((id<OrgSpongycastleCryptoDSA>) nil_chk(signer_)) init__WithBoolean:false withOrgSpongycastleCryptoCipherParameters:param];
}

- (IOSByteArray *)expandSboxWithByteArray:(IOSByteArray *)compressed {
  IOSByteArray *expanded = [IOSByteArray newArrayWithLength:128];
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(compressed))->size_; i++) {
    *IOSByteArray_GetRef(expanded, i * 2) = (jbyte) ((JreRShift32(IOSByteArray_Get(compressed, i), 4)) & (jint) 0xf);
    *IOSByteArray_GetRef(expanded, i * 2 + 1) = (jbyte) (IOSByteArray_Get(compressed, i) & (jint) 0xf);
  }
  return expanded;
}

- (void)engineInitSignWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privateKey {
  id<OrgSpongycastleCryptoCipherParameters> param = nil;
  if ([ComYouzhLingtuSignCryptoUtilsECKey_class_() isInstance:privateKey]) {
    param = ComYouzhLingtuSignCryptoUtilsECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(privateKey);
  }
  digest_ = new_OrgSpongycastleCryptoDigestsGOST3411Digest_initWithByteArray_(ComYouzhLingtuSignCryptoDstuSignatureSpi_DEFAULT_SBOX);
  if (appRandom_ != nil) {
    [((id<OrgSpongycastleCryptoDSA>) nil_chk(signer_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsParametersWithRandom_initWithOrgSpongycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(param, appRandom_)];
  }
  else {
    [((id<OrgSpongycastleCryptoDSA>) nil_chk(signer_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:param];
  }
}

- (void)engineUpdateWithByte:(jbyte)b {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByte:b];
}

- (void)engineUpdateWithByteArray:(IOSByteArray *)b
                          withInt:(jint)off
                          withInt:(jint)len {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:b withInt:off withInt:len];
}

- (IOSByteArray *)engineSign {
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hash_ withInt:0];
  @try {
    IOSObjectArray *sig = [((id<OrgSpongycastleCryptoDSA>) nil_chk(signer_)) generateSignatureWithByteArray:hash_];
    IOSByteArray *r = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(sig), 0))) toByteArray];
    IOSByteArray *s = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(sig, 1))) toByteArray];
    IOSByteArray *sigBytes = [IOSByteArray newArrayWithLength:(((IOSByteArray *) nil_chk(r))->size_ > ((IOSByteArray *) nil_chk(s))->size_ ? r->size_ * 2 : s->size_ * 2)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(s, 0, sigBytes, (sigBytes->size_ / 2) - s->size_, s->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(r, 0, sigBytes, sigBytes->size_ - r->size_, r->size_);
    return [new_OrgSpongycastleAsn1DEROctetString_initWithByteArray_(sigBytes) getEncoded];
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecuritySignatureException_initWithNSString_([e description]);
  }
}

- (jboolean)engineVerifyWithByteArray:(IOSByteArray *)sigBytes {
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hash_ withInt:0];
  IOSObjectArray *sig;
  @try {
    IOSByteArray *bytes = [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(((OrgSpongycastleAsn1ASN1OctetString *) cast_chk(OrgSpongycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(sigBytes), [OrgSpongycastleAsn1ASN1OctetString class])))) getOctets];
    IOSByteArray *r = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_ / 2];
    IOSByteArray *s = [IOSByteArray newArrayWithLength:bytes->size_ / 2];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, 0, s, 0, bytes->size_ / 2);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, bytes->size_ / 2, r, 0, bytes->size_ / 2);
    sig = [IOSObjectArray newArrayWithLength:2 type:JavaMathBigInteger_class_()];
    (void) IOSObjectArray_SetAndConsume(sig, 0, new_JavaMathBigInteger_initWithInt_withByteArray_(1, r));
    (void) IOSObjectArray_SetAndConsume(sig, 1, new_JavaMathBigInteger_initWithInt_withByteArray_(1, s));
  }
  @catch (JavaLangException *e) {
    @throw new_JavaSecuritySignatureException_initWithNSString_(@"error decoding signature bytes.");
  }
  return [((id<OrgSpongycastleCryptoDSA>) nil_chk(signer_)) verifySignatureWithByteArray:hash_ withJavaMathBigInteger:IOSObjectArray_Get(nil_chk(sig), 0) withJavaMathBigInteger:IOSObjectArray_Get(sig, 1)];
}

- (void)engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (void)engineSetParameterWithNSString:(NSString *)param
                                withId:(id)value {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

- (id)engineGetParameterWithNSString:(NSString *)param {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"engineSetParameter unsupported");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, 2, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, 9, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 10, 9, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 9, -1, -1, -1 },
    { NULL, "Z", 0x4, 11, 4, 9, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 14, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x4, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineInitVerifyWithJavaSecurityPublicKey:);
  methods[2].selector = @selector(expandSboxWithByteArray:);
  methods[3].selector = @selector(engineInitSignWithJavaSecurityPrivateKey:);
  methods[4].selector = @selector(engineUpdateWithByte:);
  methods[5].selector = @selector(engineUpdateWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(engineSign);
  methods[7].selector = @selector(engineVerifyWithByteArray:);
  methods[8].selector = @selector(engineSetParameterWithJavaSecuritySpecAlgorithmParameterSpec:);
  methods[9].selector = @selector(engineSetParameterWithNSString:withId:);
  methods[10].selector = @selector(engineGetParameterWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "signer_", "LOrgSpongycastleCryptoDSA;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_SBOX", "[B", .constantValue.asLong = 0, 0xa, -1, 17, -1, -1 },
  };
  static const void *ptrTable[] = { "engineInitVerify", "LJavaSecurityPublicKey;", "LJavaSecurityInvalidKeyException;", "expandSbox", "[B", "engineInitSign", "LJavaSecurityPrivateKey;", "engineUpdate", "B", "LJavaSecuritySignatureException;", "[BII", "engineVerify", "engineSetParameter", "LJavaSecuritySpecAlgorithmParameterSpec;", "LNSString;LNSObject;", "engineGetParameter", "LNSString;", &ComYouzhLingtuSignCryptoDstuSignatureSpi_DEFAULT_SBOX };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoDstuSignatureSpi = { "SignatureSpi", "com.youzh.lingtu.sign.crypto.dstu", ptrTable, methods, fields, 7, 0x1, 11, 3, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoDstuSignatureSpi;
}

+ (void)initialize {
  if (self == [ComYouzhLingtuSignCryptoDstuSignatureSpi class]) {
    ComYouzhLingtuSignCryptoDstuSignatureSpi_DEFAULT_SBOX = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0xa, (jint) 0x9, (jint) 0xd, (jint) 0x6, (jint) 0xe, (jint) 0xb, (jint) 0x4, (jint) 0x5, (jint) 0xf, (jint) 0x1, (jint) 0x3, (jint) 0xc, (jint) 0x7, (jint) 0x0, (jint) 0x8, (jint) 0x2, (jint) 0x8, (jint) 0x0, (jint) 0xc, (jint) 0x4, (jint) 0x9, (jint) 0x6, (jint) 0x7, (jint) 0xb, (jint) 0x2, (jint) 0x3, (jint) 0x1, (jint) 0xf, (jint) 0x5, (jint) 0xe, (jint) 0xa, (jint) 0xd, (jint) 0xf, (jint) 0x6, (jint) 0x5, (jint) 0x8, (jint) 0xe, (jint) 0xb, (jint) 0xa, (jint) 0x4, (jint) 0xc, (jint) 0x0, (jint) 0x3, (jint) 0x7, (jint) 0x2, (jint) 0x9, (jint) 0x1, (jint) 0xd, (jint) 0x3, (jint) 0x8, (jint) 0xd, (jint) 0x9, (jint) 0x6, (jint) 0xb, (jint) 0xf, (jint) 0x0, (jint) 0x2, (jint) 0x5, (jint) 0xc, (jint) 0xa, (jint) 0x4, (jint) 0xe, (jint) 0x1, (jint) 0x7, (jint) 0xf, (jint) 0x8, (jint) 0xe, (jint) 0x9, (jint) 0x7, (jint) 0x2, (jint) 0x0, (jint) 0xd, (jint) 0xc, (jint) 0x6, (jint) 0x1, (jint) 0x5, (jint) 0xb, (jint) 0x4, (jint) 0x3, (jint) 0xa, (jint) 0x2, (jint) 0x8, (jint) 0x9, (jint) 0x7, (jint) 0x5, (jint) 0xf, (jint) 0x0, (jint) 0xb, (jint) 0xc, (jint) 0x1, (jint) 0xd, (jint) 0xe, (jint) 0xa, (jint) 0x3, (jint) 0x6, (jint) 0x4, (jint) 0x3, (jint) 0x8, (jint) 0xb, (jint) 0x5, (jint) 0x6, (jint) 0x4, (jint) 0xe, (jint) 0xa, (jint) 0x2, (jint) 0xc, (jint) 0x1, (jint) 0x7, (jint) 0x9, (jint) 0xf, (jint) 0xd, (jint) 0x0, (jint) 0x1, (jint) 0x2, (jint) 0x3, (jint) 0xe, (jint) 0x6, (jint) 0xd, (jint) 0xb, (jint) 0x8, (jint) 0xf, (jint) 0xa, (jint) 0xc, (jint) 0x5, (jint) 0x7, (jint) 0x9, (jint) 0x0, (jint) 0x4 } count:128];
    J2OBJC_SET_INITIALIZED(ComYouzhLingtuSignCryptoDstuSignatureSpi)
  }
}

@end

void ComYouzhLingtuSignCryptoDstuSignatureSpi_init(ComYouzhLingtuSignCryptoDstuSignatureSpi *self) {
  JavaSecuritySignatureSpi_init(self);
  self->signer_ = new_OrgSpongycastleCryptoSignersDSTU4145Signer_init();
}

ComYouzhLingtuSignCryptoDstuSignatureSpi *new_ComYouzhLingtuSignCryptoDstuSignatureSpi_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoDstuSignatureSpi, init)
}

ComYouzhLingtuSignCryptoDstuSignatureSpi *create_ComYouzhLingtuSignCryptoDstuSignatureSpi_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoDstuSignatureSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoDstuSignatureSpi)
