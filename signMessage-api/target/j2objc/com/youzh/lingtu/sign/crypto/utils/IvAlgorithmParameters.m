//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/utils/IvAlgorithmParameters.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/utils/BaseAlgorithmParameters.h"
#include "com/youzh/lingtu/sign/crypto/utils/IvAlgorithmParameters.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/security/spec/InvalidParameterSpecException.h"
#include "javax/crypto/spec/IvParameterSpec.h"
#include "org/spongycastle/asn1/ASN1OctetString.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/DEROctetString.h"
#include "org/spongycastle/util/Arrays.h"

@interface ComYouzhLingtuSignCryptoUtilsIvAlgorithmParameters () {
 @public
  IOSByteArray *iv_;
}

@end

J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoUtilsIvAlgorithmParameters, iv_, IOSByteArray *)

@implementation ComYouzhLingtuSignCryptoUtilsIvAlgorithmParameters

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoUtilsIvAlgorithmParameters_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)engineGetEncoded {
  return [self engineGetEncodedWithNSString:@"ASN.1"];
}

- (IOSByteArray *)engineGetEncodedWithNSString:(NSString *)format {
  if ([self isASN1FormatStringWithNSString:format]) {
    return [new_OrgSpongycastleAsn1DEROctetString_initWithByteArray_([self engineGetEncodedWithNSString:@"RAW"]) getEncoded];
  }
  if ([((NSString *) nil_chk(format)) isEqual:@"RAW"]) {
    return OrgSpongycastleUtilArrays_cloneWithByteArray_(iv_);
  }
  return nil;
}

- (id<JavaSecuritySpecAlgorithmParameterSpec>)localEngineGetParameterSpecWithIOSClass:(IOSClass *)paramSpec {
  if (paramSpec == JavaxCryptoSpecIvParameterSpec_class_()) {
    return new_JavaxCryptoSpecIvParameterSpec_initWithByteArray_(iv_);
  }
  @throw new_JavaSecuritySpecInvalidParameterSpecException_initWithNSString_(@"unknown parameter spec passed to IV parameters object.");
}

- (void)engineInitWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)paramSpec {
  if (!([paramSpec isKindOfClass:[JavaxCryptoSpecIvParameterSpec class]])) {
    @throw new_JavaSecuritySpecInvalidParameterSpecException_initWithNSString_(@"IvParameterSpec required to initialise a IV parameters algorithm parameters object");
  }
  self->iv_ = [((JavaxCryptoSpecIvParameterSpec *) nil_chk(((JavaxCryptoSpecIvParameterSpec *) cast_chk(paramSpec, [JavaxCryptoSpecIvParameterSpec class])))) getIV];
}

- (void)engineInitWithByteArray:(IOSByteArray *)params {
  if ((((IOSByteArray *) nil_chk(params))->size_ % 8) != 0 && IOSByteArray_Get(params, 0) == (jint) 0x04 && IOSByteArray_Get(params, 1) == params->size_ - 2) {
    OrgSpongycastleAsn1ASN1OctetString *oct = (OrgSpongycastleAsn1ASN1OctetString *) cast_chk(OrgSpongycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(params), [OrgSpongycastleAsn1ASN1OctetString class]);
    params = [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(oct)) getOctets];
  }
  self->iv_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(params);
}

- (void)engineInitWithByteArray:(IOSByteArray *)params
                   withNSString:(NSString *)format {
  if ([self isASN1FormatStringWithNSString:format]) {
    @try {
      OrgSpongycastleAsn1ASN1OctetString *oct = (OrgSpongycastleAsn1ASN1OctetString *) cast_chk(OrgSpongycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(params), [OrgSpongycastleAsn1ASN1OctetString class]);
      [self engineInitWithByteArray:[((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(oct)) getOctets]];
    }
    @catch (JavaLangException *e) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"Exception decoding: ", e));
    }
    return;
  }
  if ([((NSString *) nil_chk(format)) isEqual:@"RAW"]) {
    [self engineInitWithByteArray:params];
    return;
  }
  @throw new_JavaIoIOException_initWithNSString_(@"Unknown parameters format in IV parameters object");
}

- (NSString *)engineToString {
  return @"IV Parameters";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, -1, -1, 0, -1, -1, -1 },
    { NULL, "[B", 0x4, 1, 2, 0, -1, -1, -1 },
    { NULL, "LJavaSecuritySpecAlgorithmParameterSpec;", 0x4, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, 5, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 8, 0, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 9, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineGetEncoded);
  methods[2].selector = @selector(engineGetEncodedWithNSString:);
  methods[3].selector = @selector(localEngineGetParameterSpecWithIOSClass:);
  methods[4].selector = @selector(engineInitWithJavaSecuritySpecAlgorithmParameterSpec:);
  methods[5].selector = @selector(engineInitWithByteArray:);
  methods[6].selector = @selector(engineInitWithByteArray:withNSString:);
  methods[7].selector = @selector(engineToString);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iv_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "engineGetEncoded", "LNSString;", "localEngineGetParameterSpec", "LIOSClass;", "LJavaSecuritySpecInvalidParameterSpecException;", "engineInit", "LJavaSecuritySpecAlgorithmParameterSpec;", "[B", "[BLNSString;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoUtilsIvAlgorithmParameters = { "IvAlgorithmParameters", "com.youzh.lingtu.sign.crypto.utils", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoUtilsIvAlgorithmParameters;
}

@end

void ComYouzhLingtuSignCryptoUtilsIvAlgorithmParameters_init(ComYouzhLingtuSignCryptoUtilsIvAlgorithmParameters *self) {
  ComYouzhLingtuSignCryptoUtilsBaseAlgorithmParameters_init(self);
}

ComYouzhLingtuSignCryptoUtilsIvAlgorithmParameters *new_ComYouzhLingtuSignCryptoUtilsIvAlgorithmParameters_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsIvAlgorithmParameters, init)
}

ComYouzhLingtuSignCryptoUtilsIvAlgorithmParameters *create_ComYouzhLingtuSignCryptoUtilsIvAlgorithmParameters_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsIvAlgorithmParameters, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoUtilsIvAlgorithmParameters)
