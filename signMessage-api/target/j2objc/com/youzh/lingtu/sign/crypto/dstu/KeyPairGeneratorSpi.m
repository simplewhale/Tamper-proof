//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/dstu/KeyPairGeneratorSpi.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/config/BouncyCastleProvider.h"
#include "com/youzh/lingtu/sign/crypto/config/ProviderConfiguration.h"
#include "com/youzh/lingtu/sign/crypto/dstu/BCDSTU4145PrivateKey.h"
#include "com/youzh/lingtu/sign/crypto/dstu/BCDSTU4145PublicKey.h"
#include "com/youzh/lingtu/sign/crypto/dstu/KeyPairGeneratorSpi.h"
#include "com/youzh/lingtu/sign/crypto/utils/EC5Util.h"
#include "com/youzh/lingtu/sign/crypto/utils/ECNamedCurveGenParameterSpec.h"
#include "com/youzh/lingtu/sign/crypto/utils/ECNamedCurveSpec.h"
#include "com/youzh/lingtu/sign/crypto/utils/ECParameterSpec.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidParameterException.h"
#include "java/security/KeyPair.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "java/security/spec/ECGenParameterSpec.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/security/spec/EllipticCurve.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/spongycastle/asn1/ua/DSTU4145NamedCurves.h"
#include "org/spongycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/spongycastle/crypto/generators/DSTU4145KeyPairGenerator.h"
#include "org/spongycastle/crypto/generators/ECKeyPairGenerator.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECKeyGenerationParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECPoint.h"

@implementation ComYouzhLingtuSignCryptoDstuKeyPairGeneratorSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoDstuKeyPairGeneratorSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initialize__WithInt:(jint)strength
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->random_ = random;
  if (ecParams_ != nil) {
    @try {
      [self initialize__WithJavaSecuritySpecAlgorithmParameterSpec:(JavaSecuritySpecECGenParameterSpec *) cast_chk(ecParams_, [JavaSecuritySpecECGenParameterSpec class]) withJavaSecuritySecureRandom:random];
    }
    @catch (JavaSecurityInvalidAlgorithmParameterException *e) {
      @throw new_JavaSecurityInvalidParameterException_initWithNSString_(@"key size not configurable.");
    }
  }
  else {
    @throw new_JavaSecurityInvalidParameterException_initWithNSString_(@"unknown key size.");
  }
}

- (void)initialize__WithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                  withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  if ([params isKindOfClass:[ComYouzhLingtuSignCryptoUtilsECParameterSpec class]]) {
    ComYouzhLingtuSignCryptoUtilsECParameterSpec *p = (ComYouzhLingtuSignCryptoUtilsECParameterSpec *) params;
    self->ecParams_ = params;
    param_ = new_OrgSpongycastleCryptoParamsECKeyGenerationParameters_initWithOrgSpongycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(new_OrgSpongycastleCryptoParamsECDomainParameters_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_([((ComYouzhLingtuSignCryptoUtilsECParameterSpec *) nil_chk(p)) getCurve], [p getG], [p getN]), random);
    [((OrgSpongycastleCryptoGeneratorsECKeyPairGenerator *) nil_chk(engine_)) init__WithOrgSpongycastleCryptoKeyGenerationParameters:param_];
    initialised_ = true;
  }
  else if ([params isKindOfClass:[JavaSecuritySpecECParameterSpec class]]) {
    JavaSecuritySpecECParameterSpec *p = (JavaSecuritySpecECParameterSpec *) params;
    self->ecParams_ = params;
    OrgSpongycastleMathEcECCurve *curve = ComYouzhLingtuSignCryptoUtilsEC5Util_convertCurveWithJavaSecuritySpecEllipticCurve_([((JavaSecuritySpecECParameterSpec *) nil_chk(p)) getCurve]);
    OrgSpongycastleMathEcECPoint *g = ComYouzhLingtuSignCryptoUtilsEC5Util_convertPointWithOrgSpongycastleMathEcECCurve_withJavaSecuritySpecECPoint_withBoolean_(curve, [p getGenerator], false);
    param_ = new_OrgSpongycastleCryptoParamsECKeyGenerationParameters_initWithOrgSpongycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(new_OrgSpongycastleCryptoParamsECDomainParameters_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(curve, g, [p getOrder], JavaMathBigInteger_valueOfWithLong_([p getCofactor])), random);
    [((OrgSpongycastleCryptoGeneratorsECKeyPairGenerator *) nil_chk(engine_)) init__WithOrgSpongycastleCryptoKeyGenerationParameters:param_];
    initialised_ = true;
  }
  else if ([params isKindOfClass:[JavaSecuritySpecECGenParameterSpec class]] || [params isKindOfClass:[ComYouzhLingtuSignCryptoUtilsECNamedCurveGenParameterSpec class]]) {
    NSString *curveName;
    if ([params isKindOfClass:[JavaSecuritySpecECGenParameterSpec class]]) {
      curveName = [((JavaSecuritySpecECGenParameterSpec *) nil_chk(((JavaSecuritySpecECGenParameterSpec *) params))) getName];
    }
    else {
      curveName = [((ComYouzhLingtuSignCryptoUtilsECNamedCurveGenParameterSpec *) nil_chk(((ComYouzhLingtuSignCryptoUtilsECNamedCurveGenParameterSpec *) cast_chk(params, [ComYouzhLingtuSignCryptoUtilsECNamedCurveGenParameterSpec class])))) getName];
    }
    OrgSpongycastleCryptoParamsECDomainParameters *ecP = OrgSpongycastleAsn1UaDSTU4145NamedCurves_getByOIDWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(curveName));
    if (ecP == nil) {
      @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$", @"unknown curve name: ", curveName));
    }
    self->ecParams_ = new_ComYouzhLingtuSignCryptoUtilsECNamedCurveSpec_initWithNSString_withOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(curveName, [ecP getCurve], [ecP getG], [ecP getN], [ecP getH], [ecP getSeed]);
    JavaSecuritySpecECParameterSpec *p = (JavaSecuritySpecECParameterSpec *) cast_chk(ecParams_, [JavaSecuritySpecECParameterSpec class]);
    OrgSpongycastleMathEcECCurve *curve = ComYouzhLingtuSignCryptoUtilsEC5Util_convertCurveWithJavaSecuritySpecEllipticCurve_([p getCurve]);
    OrgSpongycastleMathEcECPoint *g = ComYouzhLingtuSignCryptoUtilsEC5Util_convertPointWithOrgSpongycastleMathEcECCurve_withJavaSecuritySpecECPoint_withBoolean_(curve, [p getGenerator], false);
    param_ = new_OrgSpongycastleCryptoParamsECKeyGenerationParameters_initWithOrgSpongycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(new_OrgSpongycastleCryptoParamsECDomainParameters_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(curve, g, [p getOrder], JavaMathBigInteger_valueOfWithLong_([p getCofactor])), random);
    [((OrgSpongycastleCryptoGeneratorsECKeyPairGenerator *) nil_chk(engine_)) init__WithOrgSpongycastleCryptoKeyGenerationParameters:param_];
    initialised_ = true;
  }
  else if (params == nil && [((id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>) nil_chk(JreLoadStatic(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa] != nil) {
    ComYouzhLingtuSignCryptoUtilsECParameterSpec *p = [((id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>) nil_chk(JreLoadStatic(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
    self->ecParams_ = params;
    param_ = new_OrgSpongycastleCryptoParamsECKeyGenerationParameters_initWithOrgSpongycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(new_OrgSpongycastleCryptoParamsECDomainParameters_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_([((ComYouzhLingtuSignCryptoUtilsECParameterSpec *) nil_chk(p)) getCurve], [p getG], [p getN]), random);
    [((OrgSpongycastleCryptoGeneratorsECKeyPairGenerator *) nil_chk(engine_)) init__WithOrgSpongycastleCryptoKeyGenerationParameters:param_];
    initialised_ = true;
  }
  else if (params == nil && [((id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>) nil_chk(JreLoadStatic(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa] == nil) {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"null parameter passed but no implicitCA set");
  }
  else {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$", @"parameter object not a ECParameterSpec: ", [[((id<JavaSecuritySpecAlgorithmParameterSpec>) nil_chk(params)) java_getClass] getName]));
  }
}

- (JavaSecurityKeyPair *)generateKeyPair {
  if (!initialised_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"DSTU Key Pair Generator not initialised");
  }
  OrgSpongycastleCryptoAsymmetricCipherKeyPair *pair = [((OrgSpongycastleCryptoGeneratorsECKeyPairGenerator *) nil_chk(engine_)) generateKeyPair];
  OrgSpongycastleCryptoParamsECPublicKeyParameters *pub = (OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk([((OrgSpongycastleCryptoAsymmetricCipherKeyPair *) nil_chk(pair)) getPublic], [OrgSpongycastleCryptoParamsECPublicKeyParameters class]);
  OrgSpongycastleCryptoParamsECPrivateKeyParameters *priv = (OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk([pair getPrivate], [OrgSpongycastleCryptoParamsECPrivateKeyParameters class]);
  if ([ecParams_ isKindOfClass:[ComYouzhLingtuSignCryptoUtilsECParameterSpec class]]) {
    ComYouzhLingtuSignCryptoUtilsECParameterSpec *p = (ComYouzhLingtuSignCryptoUtilsECParameterSpec *) ecParams_;
    ComYouzhLingtuSignCryptoDstuBCDSTU4145PublicKey *pubKey = new_ComYouzhLingtuSignCryptoDstuBCDSTU4145PublicKey_initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withComYouzhLingtuSignCryptoUtilsECParameterSpec_(algorithm_KeyPairGeneratorSpi_, pub, p);
    return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(pubKey, new_ComYouzhLingtuSignCryptoDstuBCDSTU4145PrivateKey_initWithNSString_withOrgSpongycastleCryptoParamsECPrivateKeyParameters_withComYouzhLingtuSignCryptoDstuBCDSTU4145PublicKey_withComYouzhLingtuSignCryptoUtilsECParameterSpec_(algorithm_KeyPairGeneratorSpi_, priv, pubKey, p));
  }
  else if (ecParams_ == nil) {
    return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(new_ComYouzhLingtuSignCryptoDstuBCDSTU4145PublicKey_initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_(algorithm_KeyPairGeneratorSpi_, pub), new_ComYouzhLingtuSignCryptoDstuBCDSTU4145PrivateKey_initWithNSString_withOrgSpongycastleCryptoParamsECPrivateKeyParameters_(algorithm_KeyPairGeneratorSpi_, priv));
  }
  else {
    JavaSecuritySpecECParameterSpec *p = (JavaSecuritySpecECParameterSpec *) cast_chk(ecParams_, [JavaSecuritySpecECParameterSpec class]);
    ComYouzhLingtuSignCryptoDstuBCDSTU4145PublicKey *pubKey = new_ComYouzhLingtuSignCryptoDstuBCDSTU4145PublicKey_initWithNSString_withOrgSpongycastleCryptoParamsECPublicKeyParameters_withJavaSecuritySpecECParameterSpec_(algorithm_KeyPairGeneratorSpi_, pub, p);
    return new_JavaSecurityKeyPair_initWithJavaSecurityPublicKey_withJavaSecurityPrivateKey_(pubKey, new_ComYouzhLingtuSignCryptoDstuBCDSTU4145PrivateKey_initWithNSString_withOrgSpongycastleCryptoParamsECPrivateKeyParameters_withComYouzhLingtuSignCryptoDstuBCDSTU4145PublicKey_withJavaSecuritySpecECParameterSpec_(algorithm_KeyPairGeneratorSpi_, priv, pubKey, p));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, 3, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initialize__WithInt:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(initialize__WithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ecParams_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "engine_", "LOrgSpongycastleCryptoGeneratorsECKeyPairGenerator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "algorithm_KeyPairGeneratorSpi_", "LNSString;", .constantValue.asLong = 0, 0x0, 4, -1, -1, -1 },
    { "param_", "LOrgSpongycastleCryptoParamsECKeyGenerationParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "initialised_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "initialize", "ILJavaSecuritySecureRandom;", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;", "algorithm" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoDstuKeyPairGeneratorSpi = { "KeyPairGeneratorSpi", "com.youzh.lingtu.sign.crypto.dstu", ptrTable, methods, fields, 7, 0x1, 4, 6, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoDstuKeyPairGeneratorSpi;
}

@end

void ComYouzhLingtuSignCryptoDstuKeyPairGeneratorSpi_init(ComYouzhLingtuSignCryptoDstuKeyPairGeneratorSpi *self) {
  JavaSecurityKeyPairGenerator_initWithNSString_(self, @"DSTU4145");
  self->ecParams_ = nil;
  self->engine_ = new_OrgSpongycastleCryptoGeneratorsDSTU4145KeyPairGenerator_init();
  self->algorithm_KeyPairGeneratorSpi_ = @"DSTU4145";
  self->random_ = nil;
  self->initialised_ = false;
}

ComYouzhLingtuSignCryptoDstuKeyPairGeneratorSpi *new_ComYouzhLingtuSignCryptoDstuKeyPairGeneratorSpi_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoDstuKeyPairGeneratorSpi, init)
}

ComYouzhLingtuSignCryptoDstuKeyPairGeneratorSpi *create_ComYouzhLingtuSignCryptoDstuKeyPairGeneratorSpi_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoDstuKeyPairGeneratorSpi, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoDstuKeyPairGeneratorSpi)
