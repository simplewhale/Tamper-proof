//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/config/BouncyCastleProvider.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider")
#ifdef RESTRICT_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider
#define INCLUDE_ALL_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider 0
#else
#define INCLUDE_ALL_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider 1
#endif
#undef RESTRICT_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider

#if !defined (ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_) && (INCLUDE_ALL_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider || defined(INCLUDE_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider))
#define ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_

#define RESTRICT_JavaSecurityProvider 1
#define INCLUDE_JavaSecurityProvider 1
#include "java/security/Provider.h"

#define RESTRICT_ComYouzhLingtuSignCryptoConfigConfigurableProvider 1
#define INCLUDE_ComYouzhLingtuSignCryptoConfigConfigurableProvider 1
#include "com/youzh/lingtu/sign/crypto/config/ConfigurableProvider.h"

@class OrgSpongycastleAsn1ASN1ObjectIdentifier;
@class OrgSpongycastleAsn1PkcsPrivateKeyInfo;
@class OrgSpongycastleAsn1X509SubjectPublicKeyInfo;
@protocol ComYouzhLingtuSignCryptoConfigProviderConfiguration;
@protocol ComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter;
@protocol JavaSecurityPrivateKey;
@protocol JavaSecurityPublicKey;

@interface ComYouzhLingtuSignCryptoConfigBouncyCastleProvider : JavaSecurityProvider < ComYouzhLingtuSignCryptoConfigConfigurableProvider >

#pragma mark Public

- (instancetype)init;

- (void)addAlgorithmWithNSString:(NSString *)type
withOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid
                    withNSString:(NSString *)className_;

- (void)addAlgorithmWithNSString:(NSString *)key
                    withNSString:(NSString *)value;

- (void)addKeyInfoConverterWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid
           withComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter:(id<ComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter>)keyInfoConverter;

+ (id<JavaSecurityPrivateKey>)getPrivateKeyWithOrgSpongycastleAsn1PkcsPrivateKeyInfo:(OrgSpongycastleAsn1PkcsPrivateKeyInfo *)privateKeyInfo;

+ (id<JavaSecurityPublicKey>)getPublicKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo:(OrgSpongycastleAsn1X509SubjectPublicKeyInfo *)publicKeyInfo;

- (jboolean)hasAlgorithmWithNSString:(NSString *)type
                        withNSString:(NSString *)name;

- (void)setParameterWithNSString:(NSString *)parameterName
                          withId:(id)parameter;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSString:(NSString *)arg0
                      withDouble:(jdouble)arg1
                    withNSString:(NSString *)arg2 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider)

inline NSString *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_get_PROVIDER_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_PROVIDER_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, PROVIDER_NAME, NSString *)

inline id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_get_CONFIGURATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_CONFIGURATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, CONFIGURATION, id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>)

FOUNDATION_EXPORT void ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_init(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *self);

FOUNDATION_EXPORT ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *new_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *create_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_init(void);

FOUNDATION_EXPORT id<JavaSecurityPublicKey> ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_getPublicKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(OrgSpongycastleAsn1X509SubjectPublicKeyInfo *publicKeyInfo);

FOUNDATION_EXPORT id<JavaSecurityPrivateKey> ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_getPrivateKeyWithOrgSpongycastleAsn1PkcsPrivateKeyInfo_(OrgSpongycastleAsn1PkcsPrivateKeyInfo *privateKeyInfo);

J2OBJC_TYPE_LITERAL_HEADER(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider)

#endif

#pragma pop_macro("INCLUDE_ALL_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider")
