//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/digest/SHA256.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/config/ConfigurableProvider.h"
#include "com/youzh/lingtu/sign/crypto/digest/BCMessageDigest.h"
#include "com/youzh/lingtu/sign/crypto/digest/DigestAlgorithmProvider.h"
#include "com/youzh/lingtu/sign/crypto/digest/SHA256.h"
#include "com/youzh/lingtu/sign/crypto/utils/BaseKeyGenerator.h"
#include "com/youzh/lingtu/sign/crypto/utils/BaseMac.h"
#include "com/youzh/lingtu/sign/crypto/utils/PBE.h"
#include "com/youzh/lingtu/sign/crypto/utils/PBESecretKeyFactory.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/spongycastle/asn1/nist/NISTObjectIdentifiers.h"
#include "org/spongycastle/asn1/pkcs/PKCSObjectIdentifiers.h"
#include "org/spongycastle/crypto/CipherKeyGenerator.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/digests/SHA256Digest.h"
#include "org/spongycastle/crypto/macs/HMac.h"

@interface ComYouzhLingtuSignCryptoDigestSHA256 ()

- (instancetype)init;

@end

__attribute__((unused)) static void ComYouzhLingtuSignCryptoDigestSHA256_init(ComYouzhLingtuSignCryptoDigestSHA256 *self);

__attribute__((unused)) static ComYouzhLingtuSignCryptoDigestSHA256 *new_ComYouzhLingtuSignCryptoDigestSHA256_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYouzhLingtuSignCryptoDigestSHA256 *create_ComYouzhLingtuSignCryptoDigestSHA256_init(void);

inline NSString *ComYouzhLingtuSignCryptoDigestSHA256_Mappings_get_PREFIX(void);
static NSString *ComYouzhLingtuSignCryptoDigestSHA256_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoDigestSHA256_Mappings, PREFIX, NSString *)

@implementation ComYouzhLingtuSignCryptoDigestSHA256

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoDigestSHA256_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComYouzhLingtuSignCryptoDigestSHA256_Digest;LComYouzhLingtuSignCryptoDigestSHA256_HashMac;LComYouzhLingtuSignCryptoDigestSHA256_PBEWithMacKeyFactory;LComYouzhLingtuSignCryptoDigestSHA256_KeyGenerator;LComYouzhLingtuSignCryptoDigestSHA256_Mappings;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoDigestSHA256 = { "SHA256", "com.youzh.lingtu.sign.crypto.digest", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, 0, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoDigestSHA256;
}

@end

void ComYouzhLingtuSignCryptoDigestSHA256_init(ComYouzhLingtuSignCryptoDigestSHA256 *self) {
  NSObject_init(self);
}

ComYouzhLingtuSignCryptoDigestSHA256 *new_ComYouzhLingtuSignCryptoDigestSHA256_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoDigestSHA256, init)
}

ComYouzhLingtuSignCryptoDigestSHA256 *create_ComYouzhLingtuSignCryptoDigestSHA256_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoDigestSHA256, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoDigestSHA256)

@implementation ComYouzhLingtuSignCryptoDigestSHA256_Digest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoDigestSHA256_Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)java_clone {
  ComYouzhLingtuSignCryptoDigestSHA256_Digest *d = (ComYouzhLingtuSignCryptoDigestSHA256_Digest *) cast_chk([super java_clone], [ComYouzhLingtuSignCryptoDigestSHA256_Digest class]);
  ((ComYouzhLingtuSignCryptoDigestSHA256_Digest *) nil_chk(d))->digest_ = new_OrgSpongycastleCryptoDigestsSHA256Digest_initWithOrgSpongycastleCryptoDigestsSHA256Digest_((OrgSpongycastleCryptoDigestsSHA256Digest *) cast_chk(digest_, [OrgSpongycastleCryptoDigestsSHA256Digest class]));
  return d;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "clone", "LJavaLangCloneNotSupportedException;", "LComYouzhLingtuSignCryptoDigestSHA256;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoDigestSHA256_Digest = { "Digest", "com.youzh.lingtu.sign.crypto.digest", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoDigestSHA256_Digest;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void ComYouzhLingtuSignCryptoDigestSHA256_Digest_init(ComYouzhLingtuSignCryptoDigestSHA256_Digest *self) {
  ComYouzhLingtuSignCryptoDigestBCMessageDigest_initWithOrgSpongycastleCryptoDigest_(self, new_OrgSpongycastleCryptoDigestsSHA256Digest_init());
}

ComYouzhLingtuSignCryptoDigestSHA256_Digest *new_ComYouzhLingtuSignCryptoDigestSHA256_Digest_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoDigestSHA256_Digest, init)
}

ComYouzhLingtuSignCryptoDigestSHA256_Digest *create_ComYouzhLingtuSignCryptoDigestSHA256_Digest_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoDigestSHA256_Digest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoDigestSHA256_Digest)

@implementation ComYouzhLingtuSignCryptoDigestSHA256_HashMac

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoDigestSHA256_HashMac_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComYouzhLingtuSignCryptoDigestSHA256;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoDigestSHA256_HashMac = { "HashMac", "com.youzh.lingtu.sign.crypto.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoDigestSHA256_HashMac;
}

@end

void ComYouzhLingtuSignCryptoDigestSHA256_HashMac_init(ComYouzhLingtuSignCryptoDigestSHA256_HashMac *self) {
  ComYouzhLingtuSignCryptoUtilsBaseMac_initWithOrgSpongycastleCryptoMac_(self, new_OrgSpongycastleCryptoMacsHMac_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsSHA256Digest_init()));
}

ComYouzhLingtuSignCryptoDigestSHA256_HashMac *new_ComYouzhLingtuSignCryptoDigestSHA256_HashMac_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoDigestSHA256_HashMac, init)
}

ComYouzhLingtuSignCryptoDigestSHA256_HashMac *create_ComYouzhLingtuSignCryptoDigestSHA256_HashMac_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoDigestSHA256_HashMac, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoDigestSHA256_HashMac)

@implementation ComYouzhLingtuSignCryptoDigestSHA256_PBEWithMacKeyFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoDigestSHA256_PBEWithMacKeyFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComYouzhLingtuSignCryptoDigestSHA256;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoDigestSHA256_PBEWithMacKeyFactory = { "PBEWithMacKeyFactory", "com.youzh.lingtu.sign.crypto.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoDigestSHA256_PBEWithMacKeyFactory;
}

@end

void ComYouzhLingtuSignCryptoDigestSHA256_PBEWithMacKeyFactory_init(ComYouzhLingtuSignCryptoDigestSHA256_PBEWithMacKeyFactory *self) {
  ComYouzhLingtuSignCryptoUtilsPBESecretKeyFactory_initWithNSString_withOrgSpongycastleAsn1ASN1ObjectIdentifier_withBoolean_withInt_withInt_withInt_withInt_(self, @"PBEwithHmacSHA256", nil, false, ComYouzhLingtuSignCryptoUtilsPBE_PKCS12, ComYouzhLingtuSignCryptoUtilsPBE_SHA256, 256, 0);
}

ComYouzhLingtuSignCryptoDigestSHA256_PBEWithMacKeyFactory *new_ComYouzhLingtuSignCryptoDigestSHA256_PBEWithMacKeyFactory_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoDigestSHA256_PBEWithMacKeyFactory, init)
}

ComYouzhLingtuSignCryptoDigestSHA256_PBEWithMacKeyFactory *create_ComYouzhLingtuSignCryptoDigestSHA256_PBEWithMacKeyFactory_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoDigestSHA256_PBEWithMacKeyFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoDigestSHA256_PBEWithMacKeyFactory)

@implementation ComYouzhLingtuSignCryptoDigestSHA256_KeyGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoDigestSHA256_KeyGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComYouzhLingtuSignCryptoDigestSHA256;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoDigestSHA256_KeyGenerator = { "KeyGenerator", "com.youzh.lingtu.sign.crypto.digest", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoDigestSHA256_KeyGenerator;
}

@end

void ComYouzhLingtuSignCryptoDigestSHA256_KeyGenerator_init(ComYouzhLingtuSignCryptoDigestSHA256_KeyGenerator *self) {
  ComYouzhLingtuSignCryptoUtilsBaseKeyGenerator_initWithNSString_withInt_withOrgSpongycastleCryptoCipherKeyGenerator_(self, @"HMACSHA256", 256, new_OrgSpongycastleCryptoCipherKeyGenerator_init());
}

ComYouzhLingtuSignCryptoDigestSHA256_KeyGenerator *new_ComYouzhLingtuSignCryptoDigestSHA256_KeyGenerator_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoDigestSHA256_KeyGenerator, init)
}

ComYouzhLingtuSignCryptoDigestSHA256_KeyGenerator *create_ComYouzhLingtuSignCryptoDigestSHA256_KeyGenerator_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoDigestSHA256_KeyGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoDigestSHA256_KeyGenerator)

J2OBJC_INITIALIZED_DEFN(ComYouzhLingtuSignCryptoDigestSHA256_Mappings)

@implementation ComYouzhLingtuSignCryptoDigestSHA256_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoDigestSHA256_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithComYouzhLingtuSignCryptoConfigConfigurableProvider:(id<ComYouzhLingtuSignCryptoConfigConfigurableProvider>)provider {
  [((id<ComYouzhLingtuSignCryptoConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"MessageDigest.SHA-256" withNSString:JreStrcat("$$", ComYouzhLingtuSignCryptoDigestSHA256_Mappings_PREFIX, @"$Digest")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.MessageDigest.SHA256" withNSString:@"SHA-256"];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.MessageDigest.", JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha256)) withNSString:@"SHA-256"];
  [provider addAlgorithmWithNSString:@"SecretKeyFactory.PBEWITHHMACSHA256" withNSString:JreStrcat("$$", ComYouzhLingtuSignCryptoDigestSHA256_Mappings_PREFIX, @"$PBEWithMacKeyFactory")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.SecretKeyFactory.PBEWITHHMACSHA-256" withNSString:@"PBEWITHHMACSHA256"];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.SecretKeyFactory.", JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha256)) withNSString:@"PBEWITHHMACSHA256"];
  [self addHMACAlgorithmWithComYouzhLingtuSignCryptoConfigConfigurableProvider:provider withNSString:@"SHA256" withNSString:JreStrcat("$$", ComYouzhLingtuSignCryptoDigestSHA256_Mappings_PREFIX, @"$HashMac") withNSString:JreStrcat("$$", ComYouzhLingtuSignCryptoDigestSHA256_Mappings_PREFIX, @"$KeyGenerator")];
  [self addHMACAliasWithComYouzhLingtuSignCryptoConfigConfigurableProvider:provider withNSString:@"SHA256" withOrgSpongycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_hmacWithSHA256)];
  [self addHMACAliasWithComYouzhLingtuSignCryptoConfigConfigurableProvider:provider withNSString:@"SHA256" withOrgSpongycastleAsn1ASN1ObjectIdentifier:JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha256)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithComYouzhLingtuSignCryptoConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LComYouzhLingtuSignCryptoConfigConfigurableProvider;", &ComYouzhLingtuSignCryptoDigestSHA256_Mappings_PREFIX, "LComYouzhLingtuSignCryptoDigestSHA256;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoDigestSHA256_Mappings = { "Mappings", "com.youzh.lingtu.sign.crypto.digest", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoDigestSHA256_Mappings;
}

+ (void)initialize {
  if (self == [ComYouzhLingtuSignCryptoDigestSHA256_Mappings class]) {
    ComYouzhLingtuSignCryptoDigestSHA256_Mappings_PREFIX = [ComYouzhLingtuSignCryptoDigestSHA256_class_() getName];
    J2OBJC_SET_INITIALIZED(ComYouzhLingtuSignCryptoDigestSHA256_Mappings)
  }
}

@end

void ComYouzhLingtuSignCryptoDigestSHA256_Mappings_init(ComYouzhLingtuSignCryptoDigestSHA256_Mappings *self) {
  ComYouzhLingtuSignCryptoDigestDigestAlgorithmProvider_init(self);
}

ComYouzhLingtuSignCryptoDigestSHA256_Mappings *new_ComYouzhLingtuSignCryptoDigestSHA256_Mappings_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoDigestSHA256_Mappings, init)
}

ComYouzhLingtuSignCryptoDigestSHA256_Mappings *create_ComYouzhLingtuSignCryptoDigestSHA256_Mappings_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoDigestSHA256_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoDigestSHA256_Mappings)
