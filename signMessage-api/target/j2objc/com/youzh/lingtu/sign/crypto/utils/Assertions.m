//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/utils/Assertions.java
//

#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/utils/Assertions.h"
#include "java/lang/RuntimeException.h"

@implementation ComYouzhLingtuSignCryptoUtilsAssertions

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoUtilsAssertions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)verifyPreconditionWithBoolean:(jboolean)assertionResult
                         withNSString:(NSString *)errorMessage {
  ComYouzhLingtuSignCryptoUtilsAssertions_verifyPreconditionWithBoolean_withNSString_(assertionResult, errorMessage);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(verifyPreconditionWithBoolean:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "verifyPrecondition", "ZLNSString;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoUtilsAssertions = { "Assertions", "com.youzh.lingtu.sign.crypto.utils", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoUtilsAssertions;
}

@end

void ComYouzhLingtuSignCryptoUtilsAssertions_init(ComYouzhLingtuSignCryptoUtilsAssertions *self) {
  NSObject_init(self);
}

ComYouzhLingtuSignCryptoUtilsAssertions *new_ComYouzhLingtuSignCryptoUtilsAssertions_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsAssertions, init)
}

ComYouzhLingtuSignCryptoUtilsAssertions *create_ComYouzhLingtuSignCryptoUtilsAssertions_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsAssertions, init)
}

void ComYouzhLingtuSignCryptoUtilsAssertions_verifyPreconditionWithBoolean_withNSString_(jboolean assertionResult, NSString *errorMessage) {
  ComYouzhLingtuSignCryptoUtilsAssertions_initialize();
  if (!assertionResult) {
    @throw new_JavaLangRuntimeException_initWithNSString_(errorMessage);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoUtilsAssertions)
