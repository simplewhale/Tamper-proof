//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/digest/SM3.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/config/ConfigurableProvider.h"
#include "com/youzh/lingtu/sign/crypto/digest/BCMessageDigest.h"
#include "com/youzh/lingtu/sign/crypto/digest/DigestAlgorithmProvider.h"
#include "com/youzh/lingtu/sign/crypto/digest/SM3.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/digests/SM3Digest.h"

@interface ComYouzhLingtuSignCryptoDigestSM3 ()

- (instancetype)init;

@end

__attribute__((unused)) static void ComYouzhLingtuSignCryptoDigestSM3_init(ComYouzhLingtuSignCryptoDigestSM3 *self);

__attribute__((unused)) static ComYouzhLingtuSignCryptoDigestSM3 *new_ComYouzhLingtuSignCryptoDigestSM3_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYouzhLingtuSignCryptoDigestSM3 *create_ComYouzhLingtuSignCryptoDigestSM3_init(void);

inline NSString *ComYouzhLingtuSignCryptoDigestSM3_Mappings_get_PREFIX(void);
static NSString *ComYouzhLingtuSignCryptoDigestSM3_Mappings_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoDigestSM3_Mappings, PREFIX, NSString *)

@implementation ComYouzhLingtuSignCryptoDigestSM3

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoDigestSM3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LComYouzhLingtuSignCryptoDigestSM3_Digest;LComYouzhLingtuSignCryptoDigestSM3_Mappings;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoDigestSM3 = { "SM3", "com.youzh.lingtu.sign.crypto.digest", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, 0, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoDigestSM3;
}

@end

void ComYouzhLingtuSignCryptoDigestSM3_init(ComYouzhLingtuSignCryptoDigestSM3 *self) {
  NSObject_init(self);
}

ComYouzhLingtuSignCryptoDigestSM3 *new_ComYouzhLingtuSignCryptoDigestSM3_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoDigestSM3, init)
}

ComYouzhLingtuSignCryptoDigestSM3 *create_ComYouzhLingtuSignCryptoDigestSM3_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoDigestSM3, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoDigestSM3)

@implementation ComYouzhLingtuSignCryptoDigestSM3_Digest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoDigestSM3_Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)java_clone {
  ComYouzhLingtuSignCryptoDigestSM3_Digest *d = (ComYouzhLingtuSignCryptoDigestSM3_Digest *) cast_chk([super java_clone], [ComYouzhLingtuSignCryptoDigestSM3_Digest class]);
  ((ComYouzhLingtuSignCryptoDigestSM3_Digest *) nil_chk(d))->digest_ = new_OrgSpongycastleCryptoDigestsSM3Digest_initWithOrgSpongycastleCryptoDigestsSM3Digest_((OrgSpongycastleCryptoDigestsSM3Digest *) cast_chk(digest_, [OrgSpongycastleCryptoDigestsSM3Digest class]));
  return d;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "clone", "LJavaLangCloneNotSupportedException;", "LComYouzhLingtuSignCryptoDigestSM3;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoDigestSM3_Digest = { "Digest", "com.youzh.lingtu.sign.crypto.digest", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoDigestSM3_Digest;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void ComYouzhLingtuSignCryptoDigestSM3_Digest_init(ComYouzhLingtuSignCryptoDigestSM3_Digest *self) {
  ComYouzhLingtuSignCryptoDigestBCMessageDigest_initWithOrgSpongycastleCryptoDigest_(self, new_OrgSpongycastleCryptoDigestsSM3Digest_init());
}

ComYouzhLingtuSignCryptoDigestSM3_Digest *new_ComYouzhLingtuSignCryptoDigestSM3_Digest_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoDigestSM3_Digest, init)
}

ComYouzhLingtuSignCryptoDigestSM3_Digest *create_ComYouzhLingtuSignCryptoDigestSM3_Digest_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoDigestSM3_Digest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoDigestSM3_Digest)

J2OBJC_INITIALIZED_DEFN(ComYouzhLingtuSignCryptoDigestSM3_Mappings)

@implementation ComYouzhLingtuSignCryptoDigestSM3_Mappings

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoDigestSM3_Mappings_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)configureWithComYouzhLingtuSignCryptoConfigConfigurableProvider:(id<ComYouzhLingtuSignCryptoConfigConfigurableProvider>)provider {
  [((id<ComYouzhLingtuSignCryptoConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:@"MessageDigest.SM3" withNSString:JreStrcat("$$", ComYouzhLingtuSignCryptoDigestSM3_Mappings_PREFIX, @"$Digest")];
  [provider addAlgorithmWithNSString:@"Alg.Alias.MessageDigest.SM3" withNSString:@"SM3"];
  [provider addAlgorithmWithNSString:@"Alg.Alias.MessageDigest.1.2.156.197.1.401" withNSString:@"SM3"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(configureWithComYouzhLingtuSignCryptoConfigConfigurableProvider:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "configure", "LComYouzhLingtuSignCryptoConfigConfigurableProvider;", &ComYouzhLingtuSignCryptoDigestSM3_Mappings_PREFIX, "LComYouzhLingtuSignCryptoDigestSM3;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoDigestSM3_Mappings = { "Mappings", "com.youzh.lingtu.sign.crypto.digest", ptrTable, methods, fields, 7, 0x9, 2, 1, 3, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoDigestSM3_Mappings;
}

+ (void)initialize {
  if (self == [ComYouzhLingtuSignCryptoDigestSM3_Mappings class]) {
    ComYouzhLingtuSignCryptoDigestSM3_Mappings_PREFIX = [ComYouzhLingtuSignCryptoDigestSM3_class_() getName];
    J2OBJC_SET_INITIALIZED(ComYouzhLingtuSignCryptoDigestSM3_Mappings)
  }
}

@end

void ComYouzhLingtuSignCryptoDigestSM3_Mappings_init(ComYouzhLingtuSignCryptoDigestSM3_Mappings *self) {
  ComYouzhLingtuSignCryptoDigestDigestAlgorithmProvider_init(self);
}

ComYouzhLingtuSignCryptoDigestSM3_Mappings *new_ComYouzhLingtuSignCryptoDigestSM3_Mappings_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoDigestSM3_Mappings, init)
}

ComYouzhLingtuSignCryptoDigestSM3_Mappings *create_ComYouzhLingtuSignCryptoDigestSM3_Mappings_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoDigestSM3_Mappings, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoDigestSM3_Mappings)
