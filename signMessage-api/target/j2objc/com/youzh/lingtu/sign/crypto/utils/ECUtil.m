//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/utils/ECUtil.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/config/BouncyCastleProvider.h"
#include "com/youzh/lingtu/sign/crypto/config/ProviderConfiguration.h"
#include "com/youzh/lingtu/sign/crypto/utils/BCECPublicKey.h"
#include "com/youzh/lingtu/sign/crypto/utils/EC5Util.h"
#include "com/youzh/lingtu/sign/crypto/utils/ECParameterSpec.h"
#include "com/youzh/lingtu/sign/crypto/utils/ECPrivateKey.h"
#include "com/youzh/lingtu/sign/crypto/utils/ECPublicKey.h"
#include "com/youzh/lingtu/sign/crypto/utils/ECUtil.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/security/interfaces/ECPrivateKey.h"
#include "java/security/interfaces/ECPublicKey.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/security/spec/ECPoint.h"
#include "java/util/Enumeration.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/spongycastle/asn1/anssi/ANSSINamedCurves.h"
#include "org/spongycastle/asn1/cryptopro/ECGOST3410NamedCurves.h"
#include "org/spongycastle/asn1/nist/NISTNamedCurves.h"
#include "org/spongycastle/asn1/pkcs/PrivateKeyInfo.h"
#include "org/spongycastle/asn1/sec/SECNamedCurves.h"
#include "org/spongycastle/asn1/teletrust/TeleTrusTNamedCurves.h"
#include "org/spongycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/spongycastle/asn1/x9/ECNamedCurveTable.h"
#include "org/spongycastle/asn1/x9/X962NamedCurves.h"
#include "org/spongycastle/asn1/x9/X9ECParameters.h"
#include "org/spongycastle/crypto/ec/CustomNamedCurves.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECPoint.h"

@interface ComYouzhLingtuSignCryptoUtilsECUtil ()

+ (OrgSpongycastleAsn1ASN1ObjectIdentifier *)lookupOidByNameWithNSString:(NSString *)name;

@end

__attribute__((unused)) static OrgSpongycastleAsn1ASN1ObjectIdentifier *ComYouzhLingtuSignCryptoUtilsECUtil_lookupOidByNameWithNSString_(NSString *name);

@implementation ComYouzhLingtuSignCryptoUtilsECUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoUtilsECUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSIntArray *)convertMidTermsWithIntArray:(IOSIntArray *)k {
  return ComYouzhLingtuSignCryptoUtilsECUtil_convertMidTermsWithIntArray_(k);
}

+ (OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)generatePublicKeyParameterWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  return ComYouzhLingtuSignCryptoUtilsECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(key);
}

+ (OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)generatePrivateKeyParameterWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key {
  return ComYouzhLingtuSignCryptoUtilsECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(key);
}

+ (jint)getOrderBitLengthWithJavaMathBigInteger:(JavaMathBigInteger *)order
                         withJavaMathBigInteger:(JavaMathBigInteger *)privateValue {
  return ComYouzhLingtuSignCryptoUtilsECUtil_getOrderBitLengthWithJavaMathBigInteger_withJavaMathBigInteger_(order, privateValue);
}

+ (OrgSpongycastleAsn1ASN1ObjectIdentifier *)getNamedCurveOidWithNSString:(NSString *)curveName {
  return ComYouzhLingtuSignCryptoUtilsECUtil_getNamedCurveOidWithNSString_(curveName);
}

+ (OrgSpongycastleAsn1ASN1ObjectIdentifier *)lookupOidByNameWithNSString:(NSString *)name {
  return ComYouzhLingtuSignCryptoUtilsECUtil_lookupOidByNameWithNSString_(name);
}

+ (OrgSpongycastleAsn1ASN1ObjectIdentifier *)getNamedCurveOidWithComYouzhLingtuSignCryptoUtilsECParameterSpec:(ComYouzhLingtuSignCryptoUtilsECParameterSpec *)ecParameterSpec {
  return ComYouzhLingtuSignCryptoUtilsECUtil_getNamedCurveOidWithComYouzhLingtuSignCryptoUtilsECParameterSpec_(ecParameterSpec);
}

+ (OrgSpongycastleAsn1X9X9ECParameters *)getNamedCurveByOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid {
  return ComYouzhLingtuSignCryptoUtilsECUtil_getNamedCurveByOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
}

+ (OrgSpongycastleAsn1X9X9ECParameters *)getNamedCurveByNameWithNSString:(NSString *)curveName {
  return ComYouzhLingtuSignCryptoUtilsECUtil_getNamedCurveByNameWithNSString_(curveName);
}

+ (NSString *)getCurveNameWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid {
  return ComYouzhLingtuSignCryptoUtilsECUtil_getCurveNameWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 2, 3, 4, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 5, 6, 4, -1, -1, -1 },
    { NULL, "I", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", 0xa, 11, 10, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", 0x9, 9, 12, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X9X9ECParameters;", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X9X9ECParameters;", 0x9, 15, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 16, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertMidTermsWithIntArray:);
  methods[2].selector = @selector(generatePublicKeyParameterWithJavaSecurityPublicKey:);
  methods[3].selector = @selector(generatePrivateKeyParameterWithJavaSecurityPrivateKey:);
  methods[4].selector = @selector(getOrderBitLengthWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[5].selector = @selector(getNamedCurveOidWithNSString:);
  methods[6].selector = @selector(lookupOidByNameWithNSString:);
  methods[7].selector = @selector(getNamedCurveOidWithComYouzhLingtuSignCryptoUtilsECParameterSpec:);
  methods[8].selector = @selector(getNamedCurveByOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier:);
  methods[9].selector = @selector(getNamedCurveByNameWithNSString:);
  methods[10].selector = @selector(getCurveNameWithOrgSpongycastleAsn1ASN1ObjectIdentifier:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertMidTerms", "[I", "generatePublicKeyParameter", "LJavaSecurityPublicKey;", "LJavaSecurityInvalidKeyException;", "generatePrivateKeyParameter", "LJavaSecurityPrivateKey;", "getOrderBitLength", "LJavaMathBigInteger;LJavaMathBigInteger;", "getNamedCurveOid", "LNSString;", "lookupOidByName", "LComYouzhLingtuSignCryptoUtilsECParameterSpec;", "getNamedCurveByOid", "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", "getNamedCurveByName", "getCurveName" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoUtilsECUtil = { "ECUtil", "com.youzh.lingtu.sign.crypto.utils", ptrTable, methods, NULL, 7, 0x1, 11, 0, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoUtilsECUtil;
}

@end

void ComYouzhLingtuSignCryptoUtilsECUtil_init(ComYouzhLingtuSignCryptoUtilsECUtil *self) {
  NSObject_init(self);
}

ComYouzhLingtuSignCryptoUtilsECUtil *new_ComYouzhLingtuSignCryptoUtilsECUtil_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsECUtil, init)
}

ComYouzhLingtuSignCryptoUtilsECUtil *create_ComYouzhLingtuSignCryptoUtilsECUtil_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsECUtil, init)
}

IOSIntArray *ComYouzhLingtuSignCryptoUtilsECUtil_convertMidTermsWithIntArray_(IOSIntArray *k) {
  ComYouzhLingtuSignCryptoUtilsECUtil_initialize();
  IOSIntArray *res = [IOSIntArray newArrayWithLength:3];
  if (((IOSIntArray *) nil_chk(k))->size_ == 1) {
    *IOSIntArray_GetRef(res, 0) = IOSIntArray_Get(k, 0);
  }
  else {
    if (k->size_ != 3) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Only Trinomials and pentanomials supported");
    }
    if (IOSIntArray_Get(k, 0) < IOSIntArray_Get(k, 1) && IOSIntArray_Get(k, 0) < IOSIntArray_Get(k, 2)) {
      *IOSIntArray_GetRef(res, 0) = IOSIntArray_Get(k, 0);
      if (IOSIntArray_Get(k, 1) < IOSIntArray_Get(k, 2)) {
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 1);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 2);
      }
      else {
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 2);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 1);
      }
    }
    else if (IOSIntArray_Get(k, 1) < IOSIntArray_Get(k, 2)) {
      *IOSIntArray_GetRef(res, 0) = IOSIntArray_Get(k, 1);
      if (IOSIntArray_Get(k, 0) < IOSIntArray_Get(k, 2)) {
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 0);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 2);
      }
      else {
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 2);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 0);
      }
    }
    else {
      *IOSIntArray_GetRef(res, 0) = IOSIntArray_Get(k, 2);
      if (IOSIntArray_Get(k, 0) < IOSIntArray_Get(k, 1)) {
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 0);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 1);
      }
      else {
        *IOSIntArray_GetRef(res, 1) = IOSIntArray_Get(k, 1);
        *IOSIntArray_GetRef(res, 2) = IOSIntArray_Get(k, 0);
      }
    }
  }
  return res;
}

OrgSpongycastleCryptoParamsAsymmetricKeyParameter *ComYouzhLingtuSignCryptoUtilsECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key) {
  ComYouzhLingtuSignCryptoUtilsECUtil_initialize();
  if ([ComYouzhLingtuSignCryptoUtilsECPublicKey_class_() isInstance:key]) {
    id<ComYouzhLingtuSignCryptoUtilsECPublicKey> k = (id<ComYouzhLingtuSignCryptoUtilsECPublicKey>) cast_check(key, ComYouzhLingtuSignCryptoUtilsECPublicKey_class_());
    ComYouzhLingtuSignCryptoUtilsECParameterSpec *s = [((id<ComYouzhLingtuSignCryptoUtilsECPublicKey>) nil_chk(k)) getParameters];
    if (s == nil) {
      s = [((id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>) nil_chk(JreLoadStatic(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
      return new_OrgSpongycastleCryptoParamsECPublicKeyParameters_initWithOrgSpongycastleMathEcECPoint_withOrgSpongycastleCryptoParamsECDomainParameters_([((ComYouzhLingtuSignCryptoUtilsBCECPublicKey *) cast_chk(k, [ComYouzhLingtuSignCryptoUtilsBCECPublicKey class])) engineGetQ], new_OrgSpongycastleCryptoParamsECDomainParameters_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((ComYouzhLingtuSignCryptoUtilsECParameterSpec *) nil_chk(s)) getCurve], [s getG], [s getN], [s getH], [s getSeed]));
    }
    else {
      return new_OrgSpongycastleCryptoParamsECPublicKeyParameters_initWithOrgSpongycastleMathEcECPoint_withOrgSpongycastleCryptoParamsECDomainParameters_([k getQ], new_OrgSpongycastleCryptoParamsECDomainParameters_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([s getCurve], [s getG], [s getN], [s getH], [s getSeed]));
    }
  }
  else if ([JavaSecurityInterfacesECPublicKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesECPublicKey> pubKey = (id<JavaSecurityInterfacesECPublicKey>) cast_check(key, JavaSecurityInterfacesECPublicKey_class_());
    ComYouzhLingtuSignCryptoUtilsECParameterSpec *s = ComYouzhLingtuSignCryptoUtilsEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_([((id<JavaSecurityInterfacesECPublicKey>) nil_chk(pubKey)) getParams], false);
    return new_OrgSpongycastleCryptoParamsECPublicKeyParameters_initWithOrgSpongycastleMathEcECPoint_withOrgSpongycastleCryptoParamsECDomainParameters_(ComYouzhLingtuSignCryptoUtilsEC5Util_convertPointWithJavaSecuritySpecECParameterSpec_withJavaSecuritySpecECPoint_withBoolean_([pubKey getParams], [pubKey getW], false), new_OrgSpongycastleCryptoParamsECDomainParameters_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((ComYouzhLingtuSignCryptoUtilsECParameterSpec *) nil_chk(s)) getCurve], [s getG], [s getN], [s getH], [s getSeed]));
  }
  else {
    @try {
      IOSByteArray *bytes = [((id<JavaSecurityPublicKey>) nil_chk(key)) getEncoded];
      if (bytes == nil) {
        @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"no encoding for EC public key");
      }
      id<JavaSecurityPublicKey> publicKey = ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_getPublicKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(OrgSpongycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(bytes));
      if ([JavaSecurityInterfacesECPublicKey_class_() isInstance:publicKey]) {
        return ComYouzhLingtuSignCryptoUtilsECUtil_generatePublicKeyParameterWithJavaSecurityPublicKey_(publicKey);
      }
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"cannot identify EC public key: ", [e description]));
    }
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"cannot identify EC public key.");
}

OrgSpongycastleCryptoParamsAsymmetricKeyParameter *ComYouzhLingtuSignCryptoUtilsECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(id<JavaSecurityPrivateKey> key) {
  ComYouzhLingtuSignCryptoUtilsECUtil_initialize();
  if ([ComYouzhLingtuSignCryptoUtilsECPrivateKey_class_() isInstance:key]) {
    id<ComYouzhLingtuSignCryptoUtilsECPrivateKey> k = (id<ComYouzhLingtuSignCryptoUtilsECPrivateKey>) cast_check(key, ComYouzhLingtuSignCryptoUtilsECPrivateKey_class_());
    ComYouzhLingtuSignCryptoUtilsECParameterSpec *s = [((id<ComYouzhLingtuSignCryptoUtilsECPrivateKey>) nil_chk(k)) getParameters];
    if (s == nil) {
      s = [((id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>) nil_chk(JreLoadStatic(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
    }
    return new_OrgSpongycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withOrgSpongycastleCryptoParamsECDomainParameters_([k getD], new_OrgSpongycastleCryptoParamsECDomainParameters_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((ComYouzhLingtuSignCryptoUtilsECParameterSpec *) nil_chk(s)) getCurve], [s getG], [s getN], [s getH], [s getSeed]));
  }
  else if ([JavaSecurityInterfacesECPrivateKey_class_() isInstance:key]) {
    id<JavaSecurityInterfacesECPrivateKey> privKey = (id<JavaSecurityInterfacesECPrivateKey>) cast_check(key, JavaSecurityInterfacesECPrivateKey_class_());
    ComYouzhLingtuSignCryptoUtilsECParameterSpec *s = ComYouzhLingtuSignCryptoUtilsEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_([((id<JavaSecurityInterfacesECPrivateKey>) nil_chk(privKey)) getParams], false);
    return new_OrgSpongycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withOrgSpongycastleCryptoParamsECDomainParameters_([privKey getS], new_OrgSpongycastleCryptoParamsECDomainParameters_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((ComYouzhLingtuSignCryptoUtilsECParameterSpec *) nil_chk(s)) getCurve], [s getG], [s getN], [s getH], [s getSeed]));
  }
  else {
    @try {
      IOSByteArray *bytes = [((id<JavaSecurityPrivateKey>) nil_chk(key)) getEncoded];
      if (bytes == nil) {
        @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"no encoding for EC private key");
      }
      id<JavaSecurityPrivateKey> privateKey = ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_getPrivateKeyWithOrgSpongycastleAsn1PkcsPrivateKeyInfo_(OrgSpongycastleAsn1PkcsPrivateKeyInfo_getInstanceWithId_(bytes));
      if ([JavaSecurityInterfacesECPrivateKey_class_() isInstance:privateKey]) {
        return ComYouzhLingtuSignCryptoUtilsECUtil_generatePrivateKeyParameterWithJavaSecurityPrivateKey_(privateKey);
      }
    }
    @catch (JavaLangException *e) {
      @throw new_JavaSecurityInvalidKeyException_initWithNSString_(JreStrcat("$$", @"cannot identify EC private key: ", [e description]));
    }
  }
  @throw new_JavaSecurityInvalidKeyException_initWithNSString_(@"can't identify EC private key.");
}

jint ComYouzhLingtuSignCryptoUtilsECUtil_getOrderBitLengthWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *order, JavaMathBigInteger *privateValue) {
  ComYouzhLingtuSignCryptoUtilsECUtil_initialize();
  if (order == nil) {
    ComYouzhLingtuSignCryptoUtilsECParameterSpec *implicitCA = [((id<ComYouzhLingtuSignCryptoConfigProviderConfiguration>) nil_chk(JreLoadStatic(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, CONFIGURATION))) getEcImplicitlyCa];
    if (implicitCA == nil) {
      return [((JavaMathBigInteger *) nil_chk(privateValue)) bitLength];
    }
    return [((JavaMathBigInteger *) nil_chk([implicitCA getN])) bitLength];
  }
  else {
    return [order bitLength];
  }
}

OrgSpongycastleAsn1ASN1ObjectIdentifier *ComYouzhLingtuSignCryptoUtilsECUtil_getNamedCurveOidWithNSString_(NSString *curveName) {
  ComYouzhLingtuSignCryptoUtilsECUtil_initialize();
  NSString *name;
  if ([((NSString *) nil_chk(curveName)) java_indexOf:' '] > 0) {
    name = [curveName java_substring:[curveName java_indexOf:' '] + 1];
  }
  else {
    name = curveName;
  }
  @try {
    if ([((NSString *) nil_chk(name)) charAtWithInt:0] >= '0' && [name charAtWithInt:0] <= '2') {
      return new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(name);
    }
    else {
      return ComYouzhLingtuSignCryptoUtilsECUtil_lookupOidByNameWithNSString_(name);
    }
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    return ComYouzhLingtuSignCryptoUtilsECUtil_lookupOidByNameWithNSString_(name);
  }
}

OrgSpongycastleAsn1ASN1ObjectIdentifier *ComYouzhLingtuSignCryptoUtilsECUtil_lookupOidByNameWithNSString_(NSString *name) {
  ComYouzhLingtuSignCryptoUtilsECUtil_initialize();
  OrgSpongycastleAsn1ASN1ObjectIdentifier *oid = OrgSpongycastleAsn1X9X962NamedCurves_getOIDWithNSString_(name);
  if (oid == nil) {
    oid = OrgSpongycastleAsn1SecSECNamedCurves_getOIDWithNSString_(name);
    if (oid == nil) {
      oid = OrgSpongycastleAsn1NistNISTNamedCurves_getOIDWithNSString_(name);
    }
    if (oid == nil) {
      oid = OrgSpongycastleAsn1TeletrustTeleTrusTNamedCurves_getOIDWithNSString_(name);
    }
    if (oid == nil) {
      oid = OrgSpongycastleAsn1CryptoproECGOST3410NamedCurves_getOIDWithNSString_(name);
    }
    if (oid == nil) {
      oid = OrgSpongycastleAsn1AnssiANSSINamedCurves_getOIDWithNSString_(name);
    }
  }
  return oid;
}

OrgSpongycastleAsn1ASN1ObjectIdentifier *ComYouzhLingtuSignCryptoUtilsECUtil_getNamedCurveOidWithComYouzhLingtuSignCryptoUtilsECParameterSpec_(ComYouzhLingtuSignCryptoUtilsECParameterSpec *ecParameterSpec) {
  ComYouzhLingtuSignCryptoUtilsECUtil_initialize();
  for (id<JavaUtilEnumeration> names = OrgSpongycastleAsn1X9ECNamedCurveTable_getNames(); [((id<JavaUtilEnumeration>) nil_chk(names)) hasMoreElements]; ) {
    NSString *name = (NSString *) cast_chk([names nextElement], [NSString class]);
    OrgSpongycastleAsn1X9X9ECParameters *params = OrgSpongycastleAsn1X9ECNamedCurveTable_getByNameWithNSString_(name);
    if ([((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1X9X9ECParameters *) nil_chk(params)) getN])) isEqual:[((ComYouzhLingtuSignCryptoUtilsECParameterSpec *) nil_chk(ecParameterSpec)) getN]] && [((JavaMathBigInteger *) nil_chk([params getH])) isEqual:[ecParameterSpec getH]] && [((OrgSpongycastleMathEcECCurve *) nil_chk([params getCurve])) equalsWithOrgSpongycastleMathEcECCurve:[ecParameterSpec getCurve]] && [((OrgSpongycastleMathEcECPoint *) nil_chk([params getG])) equalsWithOrgSpongycastleMathEcECPoint:[ecParameterSpec getG]]) {
      return OrgSpongycastleAsn1X9ECNamedCurveTable_getOIDWithNSString_(name);
    }
  }
  return nil;
}

OrgSpongycastleAsn1X9X9ECParameters *ComYouzhLingtuSignCryptoUtilsECUtil_getNamedCurveByOidWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(OrgSpongycastleAsn1ASN1ObjectIdentifier *oid) {
  ComYouzhLingtuSignCryptoUtilsECUtil_initialize();
  OrgSpongycastleAsn1X9X9ECParameters *params = OrgSpongycastleCryptoEcCustomNamedCurves_getByOIDWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
  if (params == nil) {
    params = OrgSpongycastleAsn1X9X962NamedCurves_getByOIDWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
    if (params == nil) {
      params = OrgSpongycastleAsn1SecSECNamedCurves_getByOIDWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
    }
    if (params == nil) {
      params = OrgSpongycastleAsn1NistNISTNamedCurves_getByOIDWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
    }
    if (params == nil) {
      params = OrgSpongycastleAsn1TeletrustTeleTrusTNamedCurves_getByOIDWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
    }
  }
  return params;
}

OrgSpongycastleAsn1X9X9ECParameters *ComYouzhLingtuSignCryptoUtilsECUtil_getNamedCurveByNameWithNSString_(NSString *curveName) {
  ComYouzhLingtuSignCryptoUtilsECUtil_initialize();
  OrgSpongycastleAsn1X9X9ECParameters *params = OrgSpongycastleCryptoEcCustomNamedCurves_getByNameWithNSString_(curveName);
  if (params == nil) {
    params = OrgSpongycastleAsn1X9X962NamedCurves_getByNameWithNSString_(curveName);
    if (params == nil) {
      params = OrgSpongycastleAsn1SecSECNamedCurves_getByNameWithNSString_(curveName);
    }
    if (params == nil) {
      params = OrgSpongycastleAsn1NistNISTNamedCurves_getByNameWithNSString_(curveName);
    }
    if (params == nil) {
      params = OrgSpongycastleAsn1TeletrustTeleTrusTNamedCurves_getByNameWithNSString_(curveName);
    }
  }
  return params;
}

NSString *ComYouzhLingtuSignCryptoUtilsECUtil_getCurveNameWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(OrgSpongycastleAsn1ASN1ObjectIdentifier *oid) {
  ComYouzhLingtuSignCryptoUtilsECUtil_initialize();
  NSString *name = OrgSpongycastleAsn1X9X962NamedCurves_getNameWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
  if (name == nil) {
    name = OrgSpongycastleAsn1SecSECNamedCurves_getNameWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
    if (name == nil) {
      name = OrgSpongycastleAsn1NistNISTNamedCurves_getNameWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
    }
    if (name == nil) {
      name = OrgSpongycastleAsn1TeletrustTeleTrusTNamedCurves_getNameWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
    }
    if (name == nil) {
      name = OrgSpongycastleAsn1CryptoproECGOST3410NamedCurves_getNameWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
    }
  }
  return name;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoUtilsECUtil)
