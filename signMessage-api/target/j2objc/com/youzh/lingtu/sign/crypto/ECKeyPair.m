//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/ECKeyPair.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/BCECPrivateKey.h"
#include "com/youzh/lingtu/sign/crypto/BCECPublicKey.h"
#include "com/youzh/lingtu/sign/crypto/ECDSASignature.h"
#include "com/youzh/lingtu/sign/crypto/ECKeyPair.h"
#include "com/youzh/lingtu/sign/crypto/Sign.h"
#include "com/youzh/lingtu/sign/crypto/utils/Numeric.h"
#include "java/math/BigInteger.h"
#include "java/security/KeyPair.h"
#include "java/security/PrivateKey.h"
#include "java/security/PublicKey.h"
#include "java/util/Arrays.h"
#include "org/spongycastle/crypto/digests/SHA256Digest.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/signers/ECDSASigner.h"
#include "org/spongycastle/crypto/signers/HMacDSAKCalculator.h"
#include "org/spongycastle/math/ec/ECPoint.h"

@interface ComYouzhLingtuSignCryptoECKeyPair () {
 @public
  JavaMathBigInteger *privateKey_;
  JavaMathBigInteger *publicKey_;
}

@end

J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoECKeyPair, privateKey_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoECKeyPair, publicKey_, JavaMathBigInteger *)

@implementation ComYouzhLingtuSignCryptoECKeyPair

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)privateKey
                    withJavaMathBigInteger:(JavaMathBigInteger *)publicKey {
  ComYouzhLingtuSignCryptoECKeyPair_initWithJavaMathBigInteger_withJavaMathBigInteger_(self, privateKey, publicKey);
  return self;
}

- (JavaMathBigInteger *)getPrivateKey {
  return privateKey_;
}

- (JavaMathBigInteger *)getPublicKey {
  return publicKey_;
}

- (ComYouzhLingtuSignCryptoECDSASignature *)signWithByteArray:(IOSByteArray *)transactionHash {
  OrgSpongycastleCryptoSignersECDSASigner *signer = new_OrgSpongycastleCryptoSignersECDSASigner_initWithOrgSpongycastleCryptoSignersDSAKCalculator_(new_OrgSpongycastleCryptoSignersHMacDSAKCalculator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsSHA256Digest_init()));
  OrgSpongycastleCryptoParamsECPrivateKeyParameters *privKey = new_OrgSpongycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withOrgSpongycastleCryptoParamsECDomainParameters_(privateKey_, JreLoadStatic(ComYouzhLingtuSignCryptoSign, CURVE));
  [signer init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:privKey];
  IOSObjectArray *components = [signer generateSignatureWithByteArray:transactionHash];
  return [new_ComYouzhLingtuSignCryptoECDSASignature_initWithJavaMathBigInteger_withJavaMathBigInteger_(IOSObjectArray_Get(nil_chk(components), 0), IOSObjectArray_Get(components, 1)) toCanonicalised];
}

+ (ComYouzhLingtuSignCryptoECKeyPair *)createWithJavaSecurityKeyPair:(JavaSecurityKeyPair *)keyPair {
  return ComYouzhLingtuSignCryptoECKeyPair_createWithJavaSecurityKeyPair_(keyPair);
}

+ (ComYouzhLingtuSignCryptoECKeyPair *)createWithJavaMathBigInteger:(JavaMathBigInteger *)privateKey {
  return ComYouzhLingtuSignCryptoECKeyPair_createWithJavaMathBigInteger_(privateKey);
}

+ (ComYouzhLingtuSignCryptoECKeyPair *)createWithByteArray:(IOSByteArray *)privateKey {
  return ComYouzhLingtuSignCryptoECKeyPair_createWithByteArray_(privateKey);
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  if (o == nil || [self java_getClass] != [o java_getClass]) {
    return false;
  }
  ComYouzhLingtuSignCryptoECKeyPair *ecKeyPair = (ComYouzhLingtuSignCryptoECKeyPair *) cast_chk(o, [ComYouzhLingtuSignCryptoECKeyPair class]);
  if (privateKey_ != nil ? ![privateKey_ isEqual:ecKeyPair->privateKey_] : ecKeyPair->privateKey_ != nil) {
    return false;
  }
  return publicKey_ != nil ? [publicKey_ isEqual:ecKeyPair->publicKey_] : ecKeyPair->publicKey_ == nil;
}

- (NSUInteger)hash {
  jint result = privateKey_ != nil ? ((jint) [privateKey_ hash]) : 0;
  result = 31 * result + (publicKey_ != nil ? ((jint) [publicKey_ hash]) : 0);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComYouzhLingtuSignCryptoECDSASignature;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LComYouzhLingtuSignCryptoECKeyPair;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LComYouzhLingtuSignCryptoECKeyPair;", 0x9, 3, 5, -1, -1, -1, -1 },
    { NULL, "LComYouzhLingtuSignCryptoECKeyPair;", 0x9, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[1].selector = @selector(getPrivateKey);
  methods[2].selector = @selector(getPublicKey);
  methods[3].selector = @selector(signWithByteArray:);
  methods[4].selector = @selector(createWithJavaSecurityKeyPair:);
  methods[5].selector = @selector(createWithJavaMathBigInteger:);
  methods[6].selector = @selector(createWithByteArray:);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "privateKey_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "publicKey_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;LJavaMathBigInteger;", "sign", "[B", "create", "LJavaSecurityKeyPair;", "LJavaMathBigInteger;", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoECKeyPair = { "ECKeyPair", "com.youzh.lingtu.sign.crypto", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoECKeyPair;
}

@end

void ComYouzhLingtuSignCryptoECKeyPair_initWithJavaMathBigInteger_withJavaMathBigInteger_(ComYouzhLingtuSignCryptoECKeyPair *self, JavaMathBigInteger *privateKey, JavaMathBigInteger *publicKey) {
  NSObject_init(self);
  self->privateKey_ = privateKey;
  self->publicKey_ = publicKey;
}

ComYouzhLingtuSignCryptoECKeyPair *new_ComYouzhLingtuSignCryptoECKeyPair_initWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *privateKey, JavaMathBigInteger *publicKey) {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoECKeyPair, initWithJavaMathBigInteger_withJavaMathBigInteger_, privateKey, publicKey)
}

ComYouzhLingtuSignCryptoECKeyPair *create_ComYouzhLingtuSignCryptoECKeyPair_initWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *privateKey, JavaMathBigInteger *publicKey) {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoECKeyPair, initWithJavaMathBigInteger_withJavaMathBigInteger_, privateKey, publicKey)
}

ComYouzhLingtuSignCryptoECKeyPair *ComYouzhLingtuSignCryptoECKeyPair_createWithJavaSecurityKeyPair_(JavaSecurityKeyPair *keyPair) {
  ComYouzhLingtuSignCryptoECKeyPair_initialize();
  ComYouzhLingtuSignCryptoBCECPrivateKey *privateKey = (ComYouzhLingtuSignCryptoBCECPrivateKey *) cast_chk([((JavaSecurityKeyPair *) nil_chk(keyPair)) getPrivate], [ComYouzhLingtuSignCryptoBCECPrivateKey class]);
  ComYouzhLingtuSignCryptoBCECPublicKey *publicKey = (ComYouzhLingtuSignCryptoBCECPublicKey *) cast_chk([keyPair getPublic], [ComYouzhLingtuSignCryptoBCECPublicKey class]);
  JavaMathBigInteger *privateKeyValue = [((ComYouzhLingtuSignCryptoBCECPrivateKey *) nil_chk(privateKey)) getD];
  IOSByteArray *publicKeyBytes = [((OrgSpongycastleMathEcECPoint *) nil_chk([((ComYouzhLingtuSignCryptoBCECPublicKey *) nil_chk(publicKey)) getQ])) getEncodedWithBoolean:false];
  JavaMathBigInteger *publicKeyValue = new_JavaMathBigInteger_initWithInt_withByteArray_(1, JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(publicKeyBytes, 1, ((IOSByteArray *) nil_chk(publicKeyBytes))->size_));
  return new_ComYouzhLingtuSignCryptoECKeyPair_initWithJavaMathBigInteger_withJavaMathBigInteger_(privateKeyValue, publicKeyValue);
}

ComYouzhLingtuSignCryptoECKeyPair *ComYouzhLingtuSignCryptoECKeyPair_createWithJavaMathBigInteger_(JavaMathBigInteger *privateKey) {
  ComYouzhLingtuSignCryptoECKeyPair_initialize();
  return new_ComYouzhLingtuSignCryptoECKeyPair_initWithJavaMathBigInteger_withJavaMathBigInteger_(privateKey, ComYouzhLingtuSignCryptoSign_publicKeyFromPrivateWithJavaMathBigInteger_(privateKey));
}

ComYouzhLingtuSignCryptoECKeyPair *ComYouzhLingtuSignCryptoECKeyPair_createWithByteArray_(IOSByteArray *privateKey) {
  ComYouzhLingtuSignCryptoECKeyPair_initialize();
  return ComYouzhLingtuSignCryptoECKeyPair_createWithJavaMathBigInteger_(ComYouzhLingtuSignCryptoUtilsNumeric_toBigIntWithByteArray_(privateKey));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoECKeyPair)
