//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/utils/Numeric.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/utils/Numeric.h"
#include "com/youzh/lingtu/sign/crypto/utils/Strings.h"
#include "com/youzh/lingtu/sign/exceptions/MessageDecodingException.h"
#include "com/youzh/lingtu/sign/exceptions/MessageEncodingException.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/util/Arrays.h"

@interface ComYouzhLingtuSignCryptoUtilsNumeric ()

- (instancetype)init;

+ (jboolean)isValidHexQuantityWithNSString:(NSString *)value;

+ (NSString *)toHexStringZeroPaddedWithJavaMathBigInteger:(JavaMathBigInteger *)value
                                                  withInt:(jint)size
                                              withBoolean:(jboolean)withPrefix;

@end

inline NSString *ComYouzhLingtuSignCryptoUtilsNumeric_get_HEX_PREFIX(void);
static NSString *ComYouzhLingtuSignCryptoUtilsNumeric_HEX_PREFIX = @"0x";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoUtilsNumeric, HEX_PREFIX, NSString *)

__attribute__((unused)) static void ComYouzhLingtuSignCryptoUtilsNumeric_init(ComYouzhLingtuSignCryptoUtilsNumeric *self);

__attribute__((unused)) static ComYouzhLingtuSignCryptoUtilsNumeric *new_ComYouzhLingtuSignCryptoUtilsNumeric_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYouzhLingtuSignCryptoUtilsNumeric *create_ComYouzhLingtuSignCryptoUtilsNumeric_init(void);

__attribute__((unused)) static jboolean ComYouzhLingtuSignCryptoUtilsNumeric_isValidHexQuantityWithNSString_(NSString *value);

__attribute__((unused)) static NSString *ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringZeroPaddedWithJavaMathBigInteger_withInt_withBoolean_(JavaMathBigInteger *value, jint size, jboolean withPrefix);

@implementation ComYouzhLingtuSignCryptoUtilsNumeric

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoUtilsNumeric_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)encodeQuantityWithJavaMathBigInteger:(JavaMathBigInteger *)value {
  return ComYouzhLingtuSignCryptoUtilsNumeric_encodeQuantityWithJavaMathBigInteger_(value);
}

+ (JavaMathBigInteger *)decodeQuantityWithNSString:(NSString *)value {
  return ComYouzhLingtuSignCryptoUtilsNumeric_decodeQuantityWithNSString_(value);
}

+ (jboolean)isValidHexQuantityWithNSString:(NSString *)value {
  return ComYouzhLingtuSignCryptoUtilsNumeric_isValidHexQuantityWithNSString_(value);
}

+ (NSString *)cleanHexPrefixWithNSString:(NSString *)input {
  return ComYouzhLingtuSignCryptoUtilsNumeric_cleanHexPrefixWithNSString_(input);
}

+ (NSString *)prependHexPrefixWithNSString:(NSString *)input {
  return ComYouzhLingtuSignCryptoUtilsNumeric_prependHexPrefixWithNSString_(input);
}

+ (jboolean)containsHexPrefixWithNSString:(NSString *)input {
  return ComYouzhLingtuSignCryptoUtilsNumeric_containsHexPrefixWithNSString_(input);
}

+ (JavaMathBigInteger *)toBigIntWithByteArray:(IOSByteArray *)value
                                      withInt:(jint)offset
                                      withInt:(jint)length {
  return ComYouzhLingtuSignCryptoUtilsNumeric_toBigIntWithByteArray_withInt_withInt_(value, offset, length);
}

+ (JavaMathBigInteger *)toBigIntWithByteArray:(IOSByteArray *)value {
  return ComYouzhLingtuSignCryptoUtilsNumeric_toBigIntWithByteArray_(value);
}

+ (JavaMathBigInteger *)toBigIntWithNSString:(NSString *)hexValue {
  return ComYouzhLingtuSignCryptoUtilsNumeric_toBigIntWithNSString_(hexValue);
}

+ (JavaMathBigInteger *)toBigIntNoPrefixWithNSString:(NSString *)hexValue {
  return ComYouzhLingtuSignCryptoUtilsNumeric_toBigIntNoPrefixWithNSString_(hexValue);
}

+ (NSString *)toHexStringWithPrefixWithJavaMathBigInteger:(JavaMathBigInteger *)value {
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringWithPrefixWithJavaMathBigInteger_(value);
}

+ (NSString *)toHexStringNoPrefixWithJavaMathBigInteger:(JavaMathBigInteger *)value {
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringNoPrefixWithJavaMathBigInteger_(value);
}

+ (NSString *)toHexStringNoPrefixWithByteArray:(IOSByteArray *)input {
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringNoPrefixWithByteArray_(input);
}

+ (NSString *)toHexStringWithPrefixZeroPaddedWithJavaMathBigInteger:(JavaMathBigInteger *)value
                                                            withInt:(jint)size {
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringWithPrefixZeroPaddedWithJavaMathBigInteger_withInt_(value, size);
}

+ (NSString *)toHexStringWithPrefixSafeWithJavaMathBigInteger:(JavaMathBigInteger *)value {
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringWithPrefixSafeWithJavaMathBigInteger_(value);
}

+ (NSString *)toHexStringNoPrefixZeroPaddedWithJavaMathBigInteger:(JavaMathBigInteger *)value
                                                          withInt:(jint)size {
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringNoPrefixZeroPaddedWithJavaMathBigInteger_withInt_(value, size);
}

+ (NSString *)toHexStringZeroPaddedWithJavaMathBigInteger:(JavaMathBigInteger *)value
                                                  withInt:(jint)size
                                              withBoolean:(jboolean)withPrefix {
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringZeroPaddedWithJavaMathBigInteger_withInt_withBoolean_(value, size, withPrefix);
}

+ (IOSByteArray *)toBytesPaddedWithJavaMathBigInteger:(JavaMathBigInteger *)value
                                              withInt:(jint)length {
  return ComYouzhLingtuSignCryptoUtilsNumeric_toBytesPaddedWithJavaMathBigInteger_withInt_(value, length);
}

+ (IOSByteArray *)hexStringToByteArrayWithNSString:(NSString *)input {
  return ComYouzhLingtuSignCryptoUtilsNumeric_hexStringToByteArrayWithNSString_(input);
}

+ (NSString *)toHexStringWithByteArray:(IOSByteArray *)input
                               withInt:(jint)offset
                               withInt:(jint)length
                           withBoolean:(jboolean)withPrefix {
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringWithByteArray_withInt_withInt_withBoolean_(input, offset, length, withPrefix);
}

+ (NSString *)toHexStringWithByteArray:(IOSByteArray *)input {
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringWithByteArray_(input);
}

+ (jbyte)asByteWithInt:(jint)m
               withInt:(jint)n {
  return ComYouzhLingtuSignCryptoUtilsNumeric_asByteWithInt_withInt_(m, n);
}

+ (jboolean)isIntegerValueWithJavaMathBigDecimal:(JavaMathBigDecimal *)value {
  return ComYouzhLingtuSignCryptoUtilsNumeric_isIntegerValueWithJavaMathBigDecimal_(value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 3, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 8, 10, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 8, 3, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 11, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 12, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 16, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 17, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 18, 19, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 20, 15, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 21, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 10, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 26, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encodeQuantityWithJavaMathBigInteger:);
  methods[2].selector = @selector(decodeQuantityWithNSString:);
  methods[3].selector = @selector(isValidHexQuantityWithNSString:);
  methods[4].selector = @selector(cleanHexPrefixWithNSString:);
  methods[5].selector = @selector(prependHexPrefixWithNSString:);
  methods[6].selector = @selector(containsHexPrefixWithNSString:);
  methods[7].selector = @selector(toBigIntWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(toBigIntWithByteArray:);
  methods[9].selector = @selector(toBigIntWithNSString:);
  methods[10].selector = @selector(toBigIntNoPrefixWithNSString:);
  methods[11].selector = @selector(toHexStringWithPrefixWithJavaMathBigInteger:);
  methods[12].selector = @selector(toHexStringNoPrefixWithJavaMathBigInteger:);
  methods[13].selector = @selector(toHexStringNoPrefixWithByteArray:);
  methods[14].selector = @selector(toHexStringWithPrefixZeroPaddedWithJavaMathBigInteger:withInt:);
  methods[15].selector = @selector(toHexStringWithPrefixSafeWithJavaMathBigInteger:);
  methods[16].selector = @selector(toHexStringNoPrefixZeroPaddedWithJavaMathBigInteger:withInt:);
  methods[17].selector = @selector(toHexStringZeroPaddedWithJavaMathBigInteger:withInt:withBoolean:);
  methods[18].selector = @selector(toBytesPaddedWithJavaMathBigInteger:withInt:);
  methods[19].selector = @selector(hexStringToByteArrayWithNSString:);
  methods[20].selector = @selector(toHexStringWithByteArray:withInt:withInt:withBoolean:);
  methods[21].selector = @selector(toHexStringWithByteArray:);
  methods[22].selector = @selector(asByteWithInt:withInt:);
  methods[23].selector = @selector(isIntegerValueWithJavaMathBigDecimal:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HEX_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
  };
  static const void *ptrTable[] = { "encodeQuantity", "LJavaMathBigInteger;", "decodeQuantity", "LNSString;", "isValidHexQuantity", "cleanHexPrefix", "prependHexPrefix", "containsHexPrefix", "toBigInt", "[BII", "[B", "toBigIntNoPrefix", "toHexStringWithPrefix", "toHexStringNoPrefix", "toHexStringWithPrefixZeroPadded", "LJavaMathBigInteger;I", "toHexStringWithPrefixSafe", "toHexStringNoPrefixZeroPadded", "toHexStringZeroPadded", "LJavaMathBigInteger;IZ", "toBytesPadded", "hexStringToByteArray", "toHexString", "[BIIZ", "asByte", "II", "isIntegerValue", "LJavaMathBigDecimal;", &ComYouzhLingtuSignCryptoUtilsNumeric_HEX_PREFIX };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoUtilsNumeric = { "Numeric", "com.youzh.lingtu.sign.crypto.utils", ptrTable, methods, fields, 7, 0x11, 24, 1, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoUtilsNumeric;
}

@end

void ComYouzhLingtuSignCryptoUtilsNumeric_init(ComYouzhLingtuSignCryptoUtilsNumeric *self) {
  NSObject_init(self);
}

ComYouzhLingtuSignCryptoUtilsNumeric *new_ComYouzhLingtuSignCryptoUtilsNumeric_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsNumeric, init)
}

ComYouzhLingtuSignCryptoUtilsNumeric *create_ComYouzhLingtuSignCryptoUtilsNumeric_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsNumeric, init)
}

NSString *ComYouzhLingtuSignCryptoUtilsNumeric_encodeQuantityWithJavaMathBigInteger_(JavaMathBigInteger *value) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  if ([((JavaMathBigInteger *) nil_chk(value)) signum] != -1) {
    return JreStrcat("$$", ComYouzhLingtuSignCryptoUtilsNumeric_HEX_PREFIX, [value toStringWithInt:16]);
  }
  else {
    @throw new_ComYouzhLingtuSignExceptionsMessageEncodingException_initWithNSString_(@"Negative values are not supported");
  }
}

JavaMathBigInteger *ComYouzhLingtuSignCryptoUtilsNumeric_decodeQuantityWithNSString_(NSString *value) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  if (!ComYouzhLingtuSignCryptoUtilsNumeric_isValidHexQuantityWithNSString_(value)) {
    @throw new_ComYouzhLingtuSignExceptionsMessageDecodingException_initWithNSString_(@"Value must be in format 0x[1-9]+[0-9]* or 0x0");
  }
  @try {
    return new_JavaMathBigInteger_initWithNSString_withInt_([((NSString *) nil_chk(value)) java_substring:2], 16);
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw new_ComYouzhLingtuSignExceptionsMessageDecodingException_initWithNSString_withJavaLangThrowable_(@"Negative ", e);
  }
}

jboolean ComYouzhLingtuSignCryptoUtilsNumeric_isValidHexQuantityWithNSString_(NSString *value) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  if (value == nil) {
    return false;
  }
  if ([value java_length] < 3) {
    return false;
  }
  if (![value java_hasPrefix:ComYouzhLingtuSignCryptoUtilsNumeric_HEX_PREFIX]) {
    return false;
  }
  return true;
}

NSString *ComYouzhLingtuSignCryptoUtilsNumeric_cleanHexPrefixWithNSString_(NSString *input) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  if (ComYouzhLingtuSignCryptoUtilsNumeric_containsHexPrefixWithNSString_(input)) {
    return [((NSString *) nil_chk(input)) java_substring:2];
  }
  else {
    return input;
  }
}

NSString *ComYouzhLingtuSignCryptoUtilsNumeric_prependHexPrefixWithNSString_(NSString *input) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  if (!ComYouzhLingtuSignCryptoUtilsNumeric_containsHexPrefixWithNSString_(input)) {
    return JreStrcat("$$", ComYouzhLingtuSignCryptoUtilsNumeric_HEX_PREFIX, input);
  }
  else {
    return input;
  }
}

jboolean ComYouzhLingtuSignCryptoUtilsNumeric_containsHexPrefixWithNSString_(NSString *input) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  return [((NSString *) nil_chk(input)) java_length] > 1 && [input charAtWithInt:0] == '0' && [input charAtWithInt:1] == 'x';
}

JavaMathBigInteger *ComYouzhLingtuSignCryptoUtilsNumeric_toBigIntWithByteArray_withInt_withInt_(IOSByteArray *value, jint offset, jint length) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  return ComYouzhLingtuSignCryptoUtilsNumeric_toBigIntWithByteArray_((JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(value, offset, offset + length)));
}

JavaMathBigInteger *ComYouzhLingtuSignCryptoUtilsNumeric_toBigIntWithByteArray_(IOSByteArray *value) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, value);
}

JavaMathBigInteger *ComYouzhLingtuSignCryptoUtilsNumeric_toBigIntWithNSString_(NSString *hexValue) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  NSString *cleanValue = ComYouzhLingtuSignCryptoUtilsNumeric_cleanHexPrefixWithNSString_(hexValue);
  return ComYouzhLingtuSignCryptoUtilsNumeric_toBigIntNoPrefixWithNSString_(cleanValue);
}

JavaMathBigInteger *ComYouzhLingtuSignCryptoUtilsNumeric_toBigIntNoPrefixWithNSString_(NSString *hexValue) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  return new_JavaMathBigInteger_initWithNSString_withInt_(hexValue, 16);
}

NSString *ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringWithPrefixWithJavaMathBigInteger_(JavaMathBigInteger *value) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  return JreStrcat("$$", ComYouzhLingtuSignCryptoUtilsNumeric_HEX_PREFIX, [((JavaMathBigInteger *) nil_chk(value)) toStringWithInt:16]);
}

NSString *ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringNoPrefixWithJavaMathBigInteger_(JavaMathBigInteger *value) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  return [((JavaMathBigInteger *) nil_chk(value)) toStringWithInt:16];
}

NSString *ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringNoPrefixWithByteArray_(IOSByteArray *input) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringWithByteArray_withInt_withInt_withBoolean_(input, 0, ((IOSByteArray *) nil_chk(input))->size_, false);
}

NSString *ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringWithPrefixZeroPaddedWithJavaMathBigInteger_withInt_(JavaMathBigInteger *value, jint size) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringZeroPaddedWithJavaMathBigInteger_withInt_withBoolean_(value, size, true);
}

NSString *ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringWithPrefixSafeWithJavaMathBigInteger_(JavaMathBigInteger *value) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  NSString *result = ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringNoPrefixWithJavaMathBigInteger_(value);
  if ([((NSString *) nil_chk(result)) java_length] < 2) {
    result = JreStrcat("$$", ComYouzhLingtuSignCryptoUtilsStrings_zerosWithInt_(1), result);
  }
  return JreStrcat("$$", ComYouzhLingtuSignCryptoUtilsNumeric_HEX_PREFIX, result);
}

NSString *ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringNoPrefixZeroPaddedWithJavaMathBigInteger_withInt_(JavaMathBigInteger *value, jint size) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringZeroPaddedWithJavaMathBigInteger_withInt_withBoolean_(value, size, false);
}

NSString *ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringZeroPaddedWithJavaMathBigInteger_withInt_withBoolean_(JavaMathBigInteger *value, jint size, jboolean withPrefix) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  NSString *result = ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringNoPrefixWithJavaMathBigInteger_(value);
  jint length = [((NSString *) nil_chk(result)) java_length];
  if (length > size) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$$I", @"Value ", result, @"is larger then length ", size));
  }
  else if ([((JavaMathBigInteger *) nil_chk(value)) signum] < 0) {
    @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Value cannot be negative");
  }
  if (length < size) {
    result = JreStrcat("$$", ComYouzhLingtuSignCryptoUtilsStrings_zerosWithInt_(size - length), result);
  }
  if (withPrefix) {
    return JreStrcat("$$", ComYouzhLingtuSignCryptoUtilsNumeric_HEX_PREFIX, result);
  }
  else {
    return result;
  }
}

IOSByteArray *ComYouzhLingtuSignCryptoUtilsNumeric_toBytesPaddedWithJavaMathBigInteger_withInt_(JavaMathBigInteger *value, jint length) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  IOSByteArray *result = [IOSByteArray newArrayWithLength:length];
  IOSByteArray *bytes = [((JavaMathBigInteger *) nil_chk(value)) toByteArray];
  jint bytesLength;
  jint srcOffset;
  if (IOSByteArray_Get(nil_chk(bytes), 0) == 0) {
    bytesLength = bytes->size_ - 1;
    srcOffset = 1;
  }
  else {
    bytesLength = bytes->size_;
    srcOffset = 0;
  }
  if (bytesLength > length) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I", @"Input is too large to put in byte array of size ", length));
  }
  jint destOffset = length - bytesLength;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bytes, srcOffset, result, destOffset, bytesLength);
  return result;
}

IOSByteArray *ComYouzhLingtuSignCryptoUtilsNumeric_hexStringToByteArrayWithNSString_(NSString *input) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  NSString *cleanInput = ComYouzhLingtuSignCryptoUtilsNumeric_cleanHexPrefixWithNSString_(input);
  jint len = [((NSString *) nil_chk(cleanInput)) java_length];
  if (len == 0) {
    return [IOSByteArray newArrayWithBytes:(jbyte[]){  } count:0];
  }
  IOSByteArray *data;
  jint startIdx;
  if (len % 2 != 0) {
    data = [IOSByteArray newArrayWithLength:(len / 2) + 1];
    *IOSByteArray_GetRef(data, 0) = (jbyte) JavaLangCharacter_digitWithChar_withInt_([cleanInput charAtWithInt:0], 16);
    startIdx = 1;
  }
  else {
    data = [IOSByteArray newArrayWithLength:len / 2];
    startIdx = 0;
  }
  for (jint i = startIdx; i < len; i += 2) {
    *IOSByteArray_GetRef(data, (i + 1) / 2) = (jbyte) ((JreLShift32(JavaLangCharacter_digitWithChar_withInt_([cleanInput charAtWithInt:i], 16), 4)) + JavaLangCharacter_digitWithChar_withInt_([cleanInput charAtWithInt:i + 1], 16));
  }
  return data;
}

NSString *ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringWithByteArray_withInt_withInt_withBoolean_(IOSByteArray *input, jint offset, jint length, jboolean withPrefix) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  JavaLangStringBuilder *stringBuilder = new_JavaLangStringBuilder_init();
  if (withPrefix) {
    (void) [stringBuilder appendWithNSString:@"0x"];
  }
  for (jint i = offset; i < offset + length; i++) {
    (void) [stringBuilder appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"%02x", [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(IOSByteArray_Get(nil_chk(input), i) & (jint) 0xFF) } count:1 type:NSObject_class_()])];
  }
  return [stringBuilder description];
}

NSString *ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringWithByteArray_(IOSByteArray *input) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringWithByteArray_withInt_withInt_withBoolean_(input, 0, ((IOSByteArray *) nil_chk(input))->size_, true);
}

jbyte ComYouzhLingtuSignCryptoUtilsNumeric_asByteWithInt_withInt_(jint m, jint n) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  return (jbyte) ((JreLShift32(m, 4)) | n);
}

jboolean ComYouzhLingtuSignCryptoUtilsNumeric_isIntegerValueWithJavaMathBigDecimal_(JavaMathBigDecimal *value) {
  ComYouzhLingtuSignCryptoUtilsNumeric_initialize();
  return [((JavaMathBigDecimal *) nil_chk(value)) signum] == 0 || [value scale__] <= 0 || [((JavaMathBigDecimal *) nil_chk([value stripTrailingZeros])) scale__] <= 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoUtilsNumeric)
