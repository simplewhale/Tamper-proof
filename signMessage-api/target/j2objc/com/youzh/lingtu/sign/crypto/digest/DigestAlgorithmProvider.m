//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/digest/DigestAlgorithmProvider.java
//

#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/config/ConfigurableProvider.h"
#include "com/youzh/lingtu/sign/crypto/digest/DigestAlgorithmProvider.h"
#include "com/youzh/lingtu/sign/crypto/utils/AlgorithmProvider.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"

@implementation ComYouzhLingtuSignCryptoDigestDigestAlgorithmProvider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoDigestDigestAlgorithmProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addHMACAlgorithmWithComYouzhLingtuSignCryptoConfigConfigurableProvider:(id<ComYouzhLingtuSignCryptoConfigConfigurableProvider>)provider
                                                                  withNSString:(NSString *)algorithm
                                                                  withNSString:(NSString *)algorithmClassName
                                                                  withNSString:(NSString *)keyGeneratorClassName {
  NSString *mainName = JreStrcat("$$", @"HMAC", algorithm);
  [((id<ComYouzhLingtuSignCryptoConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:JreStrcat("$$", @"Mac.", mainName) withNSString:algorithmClassName];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"Alg.Alias.Mac.HMAC-", algorithm) withNSString:mainName];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"Alg.Alias.Mac.HMAC/", algorithm) withNSString:mainName];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"KeyGenerator.", mainName) withNSString:keyGeneratorClassName];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"Alg.Alias.KeyGenerator.HMAC-", algorithm) withNSString:mainName];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"Alg.Alias.KeyGenerator.HMAC/", algorithm) withNSString:mainName];
}

- (void)addHMACAliasWithComYouzhLingtuSignCryptoConfigConfigurableProvider:(id<ComYouzhLingtuSignCryptoConfigConfigurableProvider>)provider
                                                              withNSString:(NSString *)algorithm
                               withOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid {
  NSString *mainName = JreStrcat("$$", @"HMAC", algorithm);
  [((id<ComYouzhLingtuSignCryptoConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.Mac.", oid) withNSString:mainName];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.KeyGenerator.", oid) withNSString:mainName];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addHMACAlgorithmWithComYouzhLingtuSignCryptoConfigConfigurableProvider:withNSString:withNSString:withNSString:);
  methods[2].selector = @selector(addHMACAliasWithComYouzhLingtuSignCryptoConfigConfigurableProvider:withNSString:withOrgSpongycastleAsn1ASN1ObjectIdentifier:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "addHMACAlgorithm", "LComYouzhLingtuSignCryptoConfigConfigurableProvider;LNSString;LNSString;LNSString;", "addHMACAlias", "LComYouzhLingtuSignCryptoConfigConfigurableProvider;LNSString;LOrgSpongycastleAsn1ASN1ObjectIdentifier;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoDigestDigestAlgorithmProvider = { "DigestAlgorithmProvider", "com.youzh.lingtu.sign.crypto.digest", ptrTable, methods, NULL, 7, 0x400, 3, 0, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoDigestDigestAlgorithmProvider;
}

@end

void ComYouzhLingtuSignCryptoDigestDigestAlgorithmProvider_init(ComYouzhLingtuSignCryptoDigestDigestAlgorithmProvider *self) {
  ComYouzhLingtuSignCryptoUtilsAlgorithmProvider_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoDigestDigestAlgorithmProvider)
