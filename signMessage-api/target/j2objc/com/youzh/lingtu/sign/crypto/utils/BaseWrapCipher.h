//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/utils/BaseWrapCipher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ComYouzhLingtuSignCryptoUtilsBaseWrapCipher")
#ifdef RESTRICT_ComYouzhLingtuSignCryptoUtilsBaseWrapCipher
#define INCLUDE_ALL_ComYouzhLingtuSignCryptoUtilsBaseWrapCipher 0
#else
#define INCLUDE_ALL_ComYouzhLingtuSignCryptoUtilsBaseWrapCipher 1
#endif
#undef RESTRICT_ComYouzhLingtuSignCryptoUtilsBaseWrapCipher

#if !defined (ComYouzhLingtuSignCryptoUtilsBaseWrapCipher_) && (INCLUDE_ALL_ComYouzhLingtuSignCryptoUtilsBaseWrapCipher || defined(INCLUDE_ComYouzhLingtuSignCryptoUtilsBaseWrapCipher))
#define ComYouzhLingtuSignCryptoUtilsBaseWrapCipher_

#define RESTRICT_JavaxCryptoCipherSpi 1
#define INCLUDE_JavaxCryptoCipherSpi 1
#include "javax/crypto/CipherSpi.h"

#define RESTRICT_ComYouzhLingtuSignCryptoUtilsPBE 1
#define INCLUDE_ComYouzhLingtuSignCryptoUtilsPBE 1
#include "com/youzh/lingtu/sign/crypto/utils/PBE.h"

@class IOSByteArray;
@class JavaSecurityAlgorithmParameters;
@class JavaSecuritySecureRandom;
@protocol JavaSecurityKey;
@protocol JavaSecuritySpecAlgorithmParameterSpec;
@protocol OrgSpongycastleCryptoWrapper;

@interface ComYouzhLingtuSignCryptoUtilsBaseWrapCipher : JavaxCryptoCipherSpi < ComYouzhLingtuSignCryptoUtilsPBE > {
 @public
  jint pbeType_;
  jint pbeHash_;
  jint pbeKeySize_;
  jint pbeIvSize_;
  JavaSecurityAlgorithmParameters *engineParams_;
  id<OrgSpongycastleCryptoWrapper> wrapEngine_;
}

#pragma mark Protected

- (instancetype)init;

- (instancetype)initWithOrgSpongycastleCryptoWrapper:(id<OrgSpongycastleCryptoWrapper>)wrapEngine;

- (instancetype)initWithOrgSpongycastleCryptoWrapper:(id<OrgSpongycastleCryptoWrapper>)wrapEngine
                                             withInt:(jint)ivSize;

- (JavaSecurityAlgorithmParameters *)createParametersInstanceWithNSString:(NSString *)algorithm;

- (IOSByteArray *)engineDoFinalWithByteArray:(IOSByteArray *)input
                                     withInt:(jint)inputOffset
                                     withInt:(jint)inputLen;

- (jint)engineDoFinalWithByteArray:(IOSByteArray *)input
                           withInt:(jint)inputOffset
                           withInt:(jint)inputLen
                     withByteArray:(IOSByteArray *)output
                           withInt:(jint)outputOffset;

- (jint)engineGetBlockSize;

- (IOSByteArray *)engineGetIV;

- (jint)engineGetKeySizeWithJavaSecurityKey:(id<JavaSecurityKey>)key;

- (jint)engineGetOutputSizeWithInt:(jint)inputLen;

- (JavaSecurityAlgorithmParameters *)engineGetParameters;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecurityAlgorithmParameters:(JavaSecurityAlgorithmParameters *)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineInitWithInt:(jint)opmode
      withJavaSecurityKey:(id<JavaSecurityKey>)key
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (void)engineSetModeWithNSString:(NSString *)mode;

- (void)engineSetPaddingWithNSString:(NSString *)padding;

- (id<JavaSecurityKey>)engineUnwrapWithByteArray:(IOSByteArray *)wrappedKey
                                    withNSString:(NSString *)wrappedKeyAlgorithm
                                         withInt:(jint)wrappedKeyType;

- (IOSByteArray *)engineUpdateWithByteArray:(IOSByteArray *)input
                                    withInt:(jint)inputOffset
                                    withInt:(jint)inputLen;

- (jint)engineUpdateWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inputOffset
                          withInt:(jint)inputLen
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outputOffset;

- (IOSByteArray *)engineWrapWithJavaSecurityKey:(id<JavaSecurityKey>)key;

@end

J2OBJC_EMPTY_STATIC_INIT(ComYouzhLingtuSignCryptoUtilsBaseWrapCipher)

J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoUtilsBaseWrapCipher, engineParams_, JavaSecurityAlgorithmParameters *)
J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoUtilsBaseWrapCipher, wrapEngine_, id<OrgSpongycastleCryptoWrapper>)

FOUNDATION_EXPORT void ComYouzhLingtuSignCryptoUtilsBaseWrapCipher_init(ComYouzhLingtuSignCryptoUtilsBaseWrapCipher *self);

FOUNDATION_EXPORT void ComYouzhLingtuSignCryptoUtilsBaseWrapCipher_initWithOrgSpongycastleCryptoWrapper_(ComYouzhLingtuSignCryptoUtilsBaseWrapCipher *self, id<OrgSpongycastleCryptoWrapper> wrapEngine);

FOUNDATION_EXPORT void ComYouzhLingtuSignCryptoUtilsBaseWrapCipher_initWithOrgSpongycastleCryptoWrapper_withInt_(ComYouzhLingtuSignCryptoUtilsBaseWrapCipher *self, id<OrgSpongycastleCryptoWrapper> wrapEngine, jint ivSize);

J2OBJC_TYPE_LITERAL_HEADER(ComYouzhLingtuSignCryptoUtilsBaseWrapCipher)

#endif

#pragma pop_macro("INCLUDE_ALL_ComYouzhLingtuSignCryptoUtilsBaseWrapCipher")
