//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/config/BouncyCastleProvider.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/config/BouncyCastleProvider.h"
#include "com/youzh/lingtu/sign/crypto/config/BouncyCastleProviderConfiguration.h"
#include "com/youzh/lingtu/sign/crypto/config/ProviderConfiguration.h"
#include "com/youzh/lingtu/sign/crypto/utils/AlgorithmProvider.h"
#include "com/youzh/lingtu/sign/crypto/utils/AsymmetricKeyInfoConverter.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InternalError.h"
#include "java/security/AccessController.h"
#include "java/security/PrivateKey.h"
#include "java/security/PrivilegedAction.h"
#include "java/security/Provider.h"
#include "java/security/PublicKey.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/spongycastle/asn1/pkcs/PrivateKeyInfo.h"
#include "org/spongycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/spongycastle/asn1/x509/SubjectPublicKeyInfo.h"

@interface ComYouzhLingtuSignCryptoConfigBouncyCastleProvider ()

- (void)setup;

- (void)loadAlgorithmsWithNSString:(NSString *)packageName
                 withNSStringArray:(IOSObjectArray *)names;

@end

inline NSString *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_get_info(void);
inline NSString *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_set_info(NSString *value);
static NSString *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_info = @"BouncyCastle Security Provider v1.54";
J2OBJC_STATIC_FIELD_OBJ(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, info, NSString *)

inline id<JavaUtilMap> ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_get_keyInfoConverters(void);
static id<JavaUtilMap> ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_keyInfoConverters;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, keyInfoConverters, id<JavaUtilMap>)

inline NSString *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_get_SYMMETRIC_PACKAGE(void);
static NSString *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_PACKAGE = @"org.spongycastle.jcajce.provider.symmetric.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, SYMMETRIC_PACKAGE, NSString *)

inline IOSObjectArray *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_get_SYMMETRIC_GENERIC(void);
static IOSObjectArray *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_GENERIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, SYMMETRIC_GENERIC, IOSObjectArray *)

inline IOSObjectArray *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_get_SYMMETRIC_MACS(void);
static IOSObjectArray *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_MACS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, SYMMETRIC_MACS, IOSObjectArray *)

inline IOSObjectArray *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_get_SYMMETRIC_CIPHERS(void);
static IOSObjectArray *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_CIPHERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, SYMMETRIC_CIPHERS, IOSObjectArray *)

inline NSString *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_get_ASYMMETRIC_PACKAGE(void);
static NSString *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_ASYMMETRIC_PACKAGE = @"org.spongycastle.jcajce.provider.asymmetric.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, ASYMMETRIC_PACKAGE, NSString *)

inline IOSObjectArray *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_get_ASYMMETRIC_GENERIC(void);
static IOSObjectArray *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_ASYMMETRIC_GENERIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, ASYMMETRIC_GENERIC, IOSObjectArray *)

inline IOSObjectArray *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_get_ASYMMETRIC_CIPHERS(void);
static IOSObjectArray *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_ASYMMETRIC_CIPHERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, ASYMMETRIC_CIPHERS, IOSObjectArray *)

inline NSString *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_get_DIGEST_PACKAGE(void);
static NSString *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_DIGEST_PACKAGE = @"org.spongycastle.jcajce.provider.digest.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, DIGEST_PACKAGE, NSString *)

inline IOSObjectArray *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_get_DIGESTS(void);
static IOSObjectArray *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_DIGESTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, DIGESTS, IOSObjectArray *)

inline NSString *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_get_KEYSTORE_PACKAGE(void);
static NSString *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_KEYSTORE_PACKAGE = @"org.spongycastle.jcajce.provider.keystore.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, KEYSTORE_PACKAGE, NSString *)

inline IOSObjectArray *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_get_KEYSTORES(void);
static IOSObjectArray *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_KEYSTORES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, KEYSTORES, IOSObjectArray *)

__attribute__((unused)) static void ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_setup(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *self);

__attribute__((unused)) static void ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *self, NSString *packageName, IOSObjectArray *names);

@interface ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1 : NSObject < JavaSecurityPrivilegedAction > {
 @public
  ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *this$0_;
}

- (instancetype)initWithComYouzhLingtuSignCryptoConfigBouncyCastleProvider:(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *)outer$;

- (id)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1)

__attribute__((unused)) static void ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1_initWithComYouzhLingtuSignCryptoConfigBouncyCastleProvider_(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1 *self, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *outer$);

__attribute__((unused)) static ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1 *new_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1_initWithComYouzhLingtuSignCryptoConfigBouncyCastleProvider_(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1 *create_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1_initWithComYouzhLingtuSignCryptoConfigBouncyCastleProvider_(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *outer$);

J2OBJC_INITIALIZED_DEFN(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider)

NSString *ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_PROVIDER_NAME = @"SC";
id<ComYouzhLingtuSignCryptoConfigProviderConfiguration> ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_CONFIGURATION;

@implementation ComYouzhLingtuSignCryptoConfigBouncyCastleProvider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setup {
  ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_setup(self);
}

- (void)loadAlgorithmsWithNSString:(NSString *)packageName
                 withNSStringArray:(IOSObjectArray *)names {
  ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, packageName, names);
}

- (void)setParameterWithNSString:(NSString *)parameterName
                          withId:(id)parameter {
  @synchronized(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_CONFIGURATION) {
    [((ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration *) nil_chk(((ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration *) cast_chk(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_CONFIGURATION, [ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration class])))) setParameterWithNSString:parameterName withId:parameter];
  }
}

- (jboolean)hasAlgorithmWithNSString:(NSString *)type
                        withNSString:(NSString *)name {
  return [self containsKeyWithId:JreStrcat("$C$", type, '.', name)] || [self containsKeyWithId:JreStrcat("$$C$", @"Alg.Alias.", type, '.', name)];
}

- (void)addAlgorithmWithNSString:(NSString *)key
                    withNSString:(NSString *)value {
  if ([self containsKeyWithId:key]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"duplicate provider key (", key, @") found"));
  }
  (void) [self putWithId:key withId:value];
}

- (void)addAlgorithmWithNSString:(NSString *)type
withOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid
                    withNSString:(NSString *)className_ {
  [self addAlgorithmWithNSString:JreStrcat("$C@", type, '.', oid) withNSString:className_];
  [self addAlgorithmWithNSString:JreStrcat("$$@", type, @".OID.", oid) withNSString:className_];
}

- (void)addKeyInfoConverterWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid
           withComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter:(id<ComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter>)keyInfoConverter {
  (void) [((id<JavaUtilMap>) nil_chk(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_keyInfoConverters)) putWithId:oid withId:keyInfoConverter];
}

+ (id<JavaSecurityPublicKey>)getPublicKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo:(OrgSpongycastleAsn1X509SubjectPublicKeyInfo *)publicKeyInfo {
  return ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_getPublicKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(publicKeyInfo);
}

+ (id<JavaSecurityPrivateKey>)getPrivateKeyWithOrgSpongycastleAsn1PkcsPrivateKeyInfo:(OrgSpongycastleAsn1PkcsPrivateKeyInfo *)privateKeyInfo {
  return ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_getPrivateKeyWithOrgSpongycastleAsn1PkcsPrivateKeyInfo_(privateKeyInfo);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x9, 10, 11, 12, -1, -1, -1 },
    { NULL, "LJavaSecurityPrivateKey;", 0x9, 13, 14, 12, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setup);
  methods[2].selector = @selector(loadAlgorithmsWithNSString:withNSStringArray:);
  methods[3].selector = @selector(setParameterWithNSString:withId:);
  methods[4].selector = @selector(hasAlgorithmWithNSString:withNSString:);
  methods[5].selector = @selector(addAlgorithmWithNSString:withNSString:);
  methods[6].selector = @selector(addAlgorithmWithNSString:withOrgSpongycastleAsn1ASN1ObjectIdentifier:withNSString:);
  methods[7].selector = @selector(addKeyInfoConverterWithOrgSpongycastleAsn1ASN1ObjectIdentifier:withComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter:);
  methods[8].selector = @selector(getPublicKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo:);
  methods[9].selector = @selector(getPrivateKeyWithOrgSpongycastleAsn1PkcsPrivateKeyInfo:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "info", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
    { "PROVIDER_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "CONFIGURATION", "LComYouzhLingtuSignCryptoConfigProviderConfiguration;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "keyInfoConverters", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "SYMMETRIC_PACKAGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "SYMMETRIC_GENERIC", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "SYMMETRIC_MACS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "SYMMETRIC_CIPHERS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "ASYMMETRIC_PACKAGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "ASYMMETRIC_GENERIC", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "ASYMMETRIC_CIPHERS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "DIGEST_PACKAGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "DIGESTS", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "KEYSTORE_PACKAGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "KEYSTORES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAlgorithms", "LNSString;[LNSString;", "setParameter", "LNSString;LNSObject;", "hasAlgorithm", "LNSString;LNSString;", "addAlgorithm", "LNSString;LOrgSpongycastleAsn1ASN1ObjectIdentifier;LNSString;", "addKeyInfoConverter", "LOrgSpongycastleAsn1ASN1ObjectIdentifier;LComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter;", "getPublicKey", "LOrgSpongycastleAsn1X509SubjectPublicKeyInfo;", "LJavaIoIOException;", "getPrivateKey", "LOrgSpongycastleAsn1PkcsPrivateKeyInfo;", &ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_info, &ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_PROVIDER_NAME, &ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_CONFIGURATION, &ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_keyInfoConverters, &ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_PACKAGE, &ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_GENERIC, &ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_MACS, &ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_CIPHERS, &ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_ASYMMETRIC_PACKAGE, &ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_ASYMMETRIC_GENERIC, &ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_ASYMMETRIC_CIPHERS, &ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_DIGEST_PACKAGE, &ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_DIGESTS, &ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_KEYSTORE_PACKAGE, &ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_KEYSTORES };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoConfigBouncyCastleProvider = { "BouncyCastleProvider", "com.youzh.lingtu.sign.crypto.config", ptrTable, methods, fields, 7, 0x11, 10, 15, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider;
}

+ (void)initialize {
  if (self == [ComYouzhLingtuSignCryptoConfigBouncyCastleProvider class]) {
    ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_CONFIGURATION = new_ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_init();
    ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_keyInfoConverters = new_JavaUtilHashMap_init();
    ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_GENERIC = [IOSObjectArray newArrayWithObjects:(id[]){ @"PBEPBKDF2", @"PBEPKCS12" } count:2 type:NSString_class_()];
    ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_MACS = [IOSObjectArray newArrayWithObjects:(id[]){ @"SipHash" } count:1 type:NSString_class_()];
    ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_CIPHERS = [IOSObjectArray newArrayWithObjects:(id[]){ @"AES", @"ARC4", @"Blowfish", @"Camellia", @"CAST5", @"CAST6", @"ChaCha", @"DES", @"DESede", @"GOST28147", @"Grainv1", @"Grain128", @"HC128", @"HC256", @"IDEA", @"Noekeon", @"RC2", @"RC5", @"RC6", @"Rijndael", @"Salsa20", @"SEED", @"Serpent", @"Shacal2", @"Skipjack", @"SM4", @"TEA", @"Twofish", @"Threefish", @"VMPC", @"VMPCKSA3", @"XTEA", @"XSalsa20", @"OpenSSLPBKDF" } count:34 type:NSString_class_()];
    ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_ASYMMETRIC_GENERIC = [IOSObjectArray newArrayWithObjects:(id[]){ @"X509", @"IES" } count:2 type:NSString_class_()];
    ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_ASYMMETRIC_CIPHERS = [IOSObjectArray newArrayWithObjects:(id[]){ @"DSA", @"DH", @"EC", @"RSA", @"GOST", @"ECGOST", @"ElGamal", @"DSTU4145" } count:8 type:NSString_class_()];
    ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_DIGESTS = [IOSObjectArray newArrayWithObjects:(id[]){ @"GOST3411", @"Keccak", @"MD2", @"MD4", @"MD5", @"SHA1", @"RIPEMD128", @"RIPEMD160", @"RIPEMD256", @"RIPEMD320", @"SHA224", @"SHA256", @"SHA384", @"SHA512", @"SHA3", @"Skein", @"SM3", @"Tiger", @"Whirlpool", @"Blake2b" } count:20 type:NSString_class_()];
    ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_KEYSTORES = [IOSObjectArray newArrayWithObjects:(id[]){ @"BC", @"PKCS12" } count:2 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider)
  }
}

@end

void ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_init(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *self) {
  JavaSecurityProvider_initWithNSString_withDouble_withNSString_(self, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_PROVIDER_NAME, 1.54, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_info);
  (void) JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedAction_(new_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1_initWithComYouzhLingtuSignCryptoConfigBouncyCastleProvider_(self));
}

ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *new_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, init)
}

ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *create_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider, init)
}

void ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_setup(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *self) {
  ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_DIGEST_PACKAGE, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_DIGESTS);
  ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_PACKAGE, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_GENERIC);
  ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_PACKAGE, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_MACS);
  ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_PACKAGE, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_SYMMETRIC_CIPHERS);
  ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_ASYMMETRIC_PACKAGE, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_ASYMMETRIC_GENERIC);
  ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_ASYMMETRIC_PACKAGE, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_ASYMMETRIC_CIPHERS);
  ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(self, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_KEYSTORE_PACKAGE, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_KEYSTORES);
  (void) [self putWithId:@"X509Store.CERTIFICATE/COLLECTION" withId:@"org.spongycastle.jce.provider.X509StoreCertCollection"];
  (void) [self putWithId:@"X509Store.ATTRIBUTECERTIFICATE/COLLECTION" withId:@"org.spongycastle.jce.provider.X509StoreAttrCertCollection"];
  (void) [self putWithId:@"X509Store.CRL/COLLECTION" withId:@"org.spongycastle.jce.provider.X509StoreCRLCollection"];
  (void) [self putWithId:@"X509Store.CERTIFICATEPAIR/COLLECTION" withId:@"org.spongycastle.jce.provider.X509StoreCertPairCollection"];
  (void) [self putWithId:@"X509Store.CERTIFICATE/LDAP" withId:@"org.spongycastle.jce.provider.X509StoreLDAPCerts"];
  (void) [self putWithId:@"X509Store.CRL/LDAP" withId:@"org.spongycastle.jce.provider.X509StoreLDAPCRLs"];
  (void) [self putWithId:@"X509Store.ATTRIBUTECERTIFICATE/LDAP" withId:@"org.spongycastle.jce.provider.X509StoreLDAPAttrCerts"];
  (void) [self putWithId:@"X509Store.CERTIFICATEPAIR/LDAP" withId:@"org.spongycastle.jce.provider.X509StoreLDAPCertPairs"];
  (void) [self putWithId:@"X509StreamParser.CERTIFICATE" withId:@"org.spongycastle.jce.provider.X509CertParser"];
  (void) [self putWithId:@"X509StreamParser.ATTRIBUTECERTIFICATE" withId:@"org.spongycastle.jce.provider.X509AttrCertParser"];
  (void) [self putWithId:@"X509StreamParser.CRL" withId:@"org.spongycastle.jce.provider.X509CRLParser"];
  (void) [self putWithId:@"X509StreamParser.CERTIFICATEPAIR" withId:@"org.spongycastle.jce.provider.X509CertPairParser"];
  (void) [self putWithId:@"Cipher.BROKENPBEWITHMD5ANDDES" withId:@"org.spongycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithMD5AndDES"];
  (void) [self putWithId:@"Cipher.BROKENPBEWITHSHA1ANDDES" withId:@"org.spongycastle.jce.provider.BrokenJCEBlockCipher$BrokePBEWithSHA1AndDES"];
  (void) [self putWithId:@"Cipher.OLDPBEWITHSHAANDTWOFISH-CBC" withId:@"org.spongycastle.jce.provider.BrokenJCEBlockCipher$OldPBEWithSHAAndTwofish"];
  (void) [self putWithId:@"CertPathValidator.RFC3281" withId:@"org.spongycastle.jce.provider.PKIXAttrCertPathValidatorSpi"];
  (void) [self putWithId:@"CertPathBuilder.RFC3281" withId:@"org.spongycastle.jce.provider.PKIXAttrCertPathBuilderSpi"];
  (void) [self putWithId:@"CertPathValidator.RFC3280" withId:@"org.spongycastle.jce.provider.PKIXCertPathValidatorSpi"];
  (void) [self putWithId:@"CertPathBuilder.RFC3280" withId:@"org.spongycastle.jce.provider.PKIXCertPathBuilderSpi"];
  (void) [self putWithId:@"CertPathValidator.PKIX" withId:@"org.spongycastle.jce.provider.PKIXCertPathValidatorSpi"];
  (void) [self putWithId:@"CertPathBuilder.PKIX" withId:@"org.spongycastle.jce.provider.PKIXCertPathBuilderSpi"];
  (void) [self putWithId:@"CertStore.Collection" withId:@"org.spongycastle.jce.provider.CertStoreCollectionSpi"];
  (void) [self putWithId:@"CertStore.LDAP" withId:@"org.spongycastle.jce.provider.X509LDAPCertStoreSpi"];
  (void) [self putWithId:@"CertStore.Multi" withId:@"org.spongycastle.jce.provider.MultiCertStoreSpi"];
  (void) [self putWithId:@"Alg.Alias.CertStore.X509LDAP" withId:@"LDAP"];
}

void ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_loadAlgorithmsWithNSString_withNSStringArray_(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *self, NSString *packageName, IOSObjectArray *names) {
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(names))->size_; i++) {
    IOSClass *clazz = nil;
    @try {
      JavaLangClassLoader *loader = [[self java_getClass] getClassLoader];
      if (loader != nil) {
        clazz = [loader loadClassWithNSString:JreStrcat("$$$", packageName, IOSObjectArray_Get(names, i), @"$Mappings")];
      }
      else {
        clazz = IOSClass_forName_(JreStrcat("$$$", packageName, IOSObjectArray_Get(names, i), @"$Mappings"));
      }
    }
    @catch (JavaLangClassNotFoundException *e) {
    }
    if (clazz != nil) {
      @try {
        [((ComYouzhLingtuSignCryptoUtilsAlgorithmProvider *) nil_chk(((ComYouzhLingtuSignCryptoUtilsAlgorithmProvider *) cast_chk([clazz newInstance], [ComYouzhLingtuSignCryptoUtilsAlgorithmProvider class])))) configureWithComYouzhLingtuSignCryptoConfigConfigurableProvider:self];
      }
      @catch (JavaLangException *e) {
        @throw new_JavaLangInternalError_initWithNSString_(JreStrcat("$$$$@", @"cannot create instance of ", packageName, IOSObjectArray_Get(names, i), @"$Mappings : ", e));
      }
    }
  }
}

id<JavaSecurityPublicKey> ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_getPublicKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(OrgSpongycastleAsn1X509SubjectPublicKeyInfo *publicKeyInfo) {
  ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_initialize();
  id<ComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter> converter = (id<ComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter>) cast_check([((id<JavaUtilMap>) nil_chk(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_keyInfoConverters)) getWithId:[((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(publicKeyInfo)) getAlgorithm])) getAlgorithm]], ComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter_class_());
  if (converter == nil) {
    return nil;
  }
  return [converter generatePublicWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo:publicKeyInfo];
}

id<JavaSecurityPrivateKey> ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_getPrivateKeyWithOrgSpongycastleAsn1PkcsPrivateKeyInfo_(OrgSpongycastleAsn1PkcsPrivateKeyInfo *privateKeyInfo) {
  ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_initialize();
  id<ComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter> converter = (id<ComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter>) cast_check([((id<JavaUtilMap>) nil_chk(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_keyInfoConverters)) getWithId:[((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1PkcsPrivateKeyInfo *) nil_chk(privateKeyInfo)) getPrivateKeyAlgorithm])) getAlgorithm]], ComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter_class_());
  if (converter == nil) {
    return nil;
  }
  return [converter generatePrivateWithOrgSpongycastleAsn1PkcsPrivateKeyInfo:privateKeyInfo];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider)

@implementation ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1

- (instancetype)initWithComYouzhLingtuSignCryptoConfigBouncyCastleProvider:(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *)outer$ {
  ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1_initWithComYouzhLingtuSignCryptoConfigBouncyCastleProvider_(self, outer$);
  return self;
}

- (id)run {
  ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_setup(this$0_);
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComYouzhLingtuSignCryptoConfigBouncyCastleProvider:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LComYouzhLingtuSignCryptoConfigBouncyCastleProvider;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComYouzhLingtuSignCryptoConfigBouncyCastleProvider;", "init" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1 = { "", "com.youzh.lingtu.sign.crypto.config", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1;
}

@end

void ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1_initWithComYouzhLingtuSignCryptoConfigBouncyCastleProvider_(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1 *self, ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1 *new_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1_initWithComYouzhLingtuSignCryptoConfigBouncyCastleProvider_(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *outer$) {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1, initWithComYouzhLingtuSignCryptoConfigBouncyCastleProvider_, outer$)
}

ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1 *create_ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1_initWithComYouzhLingtuSignCryptoConfigBouncyCastleProvider_(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider *outer$) {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_1, initWithComYouzhLingtuSignCryptoConfigBouncyCastleProvider_, outer$)
}
