//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/utils/AsymmetricAlgorithmProvider.java
//

#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/config/ConfigurableProvider.h"
#include "com/youzh/lingtu/sign/crypto/utils/AlgorithmProvider.h"
#include "com/youzh/lingtu/sign/crypto/utils/AsymmetricAlgorithmProvider.h"
#include "com/youzh/lingtu/sign/crypto/utils/AsymmetricKeyInfoConverter.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"

@implementation ComYouzhLingtuSignCryptoUtilsAsymmetricAlgorithmProvider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoUtilsAsymmetricAlgorithmProvider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addSignatureAlgorithmWithComYouzhLingtuSignCryptoConfigConfigurableProvider:(id<ComYouzhLingtuSignCryptoConfigConfigurableProvider>)provider
                                                                       withNSString:(NSString *)digest
                                                                       withNSString:(NSString *)algorithm
                                                                       withNSString:(NSString *)className_
                                        withOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid {
  NSString *mainName = JreStrcat("$$$", digest, @"WITH", algorithm);
  NSString *jdk11Variation1 = JreStrcat("$$$", digest, @"with", algorithm);
  NSString *jdk11Variation2 = JreStrcat("$$$", digest, @"With", algorithm);
  NSString *alias = JreStrcat("$C$", digest, '/', algorithm);
  [((id<ComYouzhLingtuSignCryptoConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:JreStrcat("$$", @"Signature.", mainName) withNSString:className_];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"Alg.Alias.Signature.", jdk11Variation1) withNSString:mainName];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"Alg.Alias.Signature.", jdk11Variation2) withNSString:mainName];
  [provider addAlgorithmWithNSString:JreStrcat("$$", @"Alg.Alias.Signature.", alias) withNSString:mainName];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.Signature.", oid) withNSString:mainName];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.Signature.OID.", oid) withNSString:mainName];
}

- (void)registerOidWithComYouzhLingtuSignCryptoConfigConfigurableProvider:(id<ComYouzhLingtuSignCryptoConfigConfigurableProvider>)provider
                              withOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid
                                                             withNSString:(NSString *)name
              withComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter:(id<ComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter>)keyFactory {
  [((id<ComYouzhLingtuSignCryptoConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.KeyFactory.", oid) withNSString:name];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.KeyPairGenerator.", oid) withNSString:name];
  [provider addKeyInfoConverterWithOrgSpongycastleAsn1ASN1ObjectIdentifier:oid withComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter:keyFactory];
}

- (void)registerOidAlgorithmParametersWithComYouzhLingtuSignCryptoConfigConfigurableProvider:(id<ComYouzhLingtuSignCryptoConfigConfigurableProvider>)provider
                                                 withOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid
                                                                                withNSString:(NSString *)name {
  [((id<ComYouzhLingtuSignCryptoConfigConfigurableProvider>) nil_chk(provider)) addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.AlgorithmParameterGenerator.", oid) withNSString:name];
  [provider addAlgorithmWithNSString:JreStrcat("$@", @"Alg.Alias.AlgorithmParameters.", oid) withNSString:name];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addSignatureAlgorithmWithComYouzhLingtuSignCryptoConfigConfigurableProvider:withNSString:withNSString:withNSString:withOrgSpongycastleAsn1ASN1ObjectIdentifier:);
  methods[2].selector = @selector(registerOidWithComYouzhLingtuSignCryptoConfigConfigurableProvider:withOrgSpongycastleAsn1ASN1ObjectIdentifier:withNSString:withComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter:);
  methods[3].selector = @selector(registerOidAlgorithmParametersWithComYouzhLingtuSignCryptoConfigConfigurableProvider:withOrgSpongycastleAsn1ASN1ObjectIdentifier:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "addSignatureAlgorithm", "LComYouzhLingtuSignCryptoConfigConfigurableProvider;LNSString;LNSString;LNSString;LOrgSpongycastleAsn1ASN1ObjectIdentifier;", "registerOid", "LComYouzhLingtuSignCryptoConfigConfigurableProvider;LOrgSpongycastleAsn1ASN1ObjectIdentifier;LNSString;LComYouzhLingtuSignCryptoUtilsAsymmetricKeyInfoConverter;", "registerOidAlgorithmParameters", "LComYouzhLingtuSignCryptoConfigConfigurableProvider;LOrgSpongycastleAsn1ASN1ObjectIdentifier;LNSString;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoUtilsAsymmetricAlgorithmProvider = { "AsymmetricAlgorithmProvider", "com.youzh.lingtu.sign.crypto.utils", ptrTable, methods, NULL, 7, 0x401, 4, 0, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoUtilsAsymmetricAlgorithmProvider;
}

@end

void ComYouzhLingtuSignCryptoUtilsAsymmetricAlgorithmProvider_init(ComYouzhLingtuSignCryptoUtilsAsymmetricAlgorithmProvider *self) {
  ComYouzhLingtuSignCryptoUtilsAlgorithmProvider_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoUtilsAsymmetricAlgorithmProvider)
