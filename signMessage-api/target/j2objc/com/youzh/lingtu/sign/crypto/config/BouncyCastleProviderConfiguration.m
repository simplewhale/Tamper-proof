//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/config/BouncyCastleProviderConfiguration.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/config/BouncyCastleProvider.h"
#include "com/youzh/lingtu/sign/crypto/config/BouncyCastleProviderConfiguration.h"
#include "com/youzh/lingtu/sign/crypto/config/ConfigurableProvider.h"
#include "com/youzh/lingtu/sign/crypto/config/ProviderConfigurationPermission.h"
#include "com/youzh/lingtu/sign/crypto/utils/EC5Util.h"
#include "com/youzh/lingtu/sign/crypto/utils/ECParameterSpec.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/SecurityManager.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/math/BigInteger.h"
#include "java/security/Permission.h"
#include "java/security/spec/ECParameterSpec.h"
#include "javax/crypto/spec/DHParameterSpec.h"

@interface ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration () {
 @public
  JavaLangThreadLocal *ecThreadSpec_;
  JavaLangThreadLocal *dhThreadSpec_;
  volatile_id ecImplicitCaParams_;
  volatile_id dhDefaultParams_;
}

@end

J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration, ecThreadSpec_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration, dhThreadSpec_, JavaLangThreadLocal *)
J2OBJC_VOLATILE_FIELD_SETTER(ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration, ecImplicitCaParams_, ComYouzhLingtuSignCryptoUtilsECParameterSpec *)
J2OBJC_VOLATILE_FIELD_SETTER(ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration, dhDefaultParams_, id)

inline JavaSecurityPermission *ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_get_BC_EC_LOCAL_PERMISSION(void);
inline JavaSecurityPermission *ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_set_BC_EC_LOCAL_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_EC_LOCAL_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration, BC_EC_LOCAL_PERMISSION, JavaSecurityPermission *)

inline JavaSecurityPermission *ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_get_BC_EC_PERMISSION(void);
inline JavaSecurityPermission *ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_set_BC_EC_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_EC_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration, BC_EC_PERMISSION, JavaSecurityPermission *)

inline JavaSecurityPermission *ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_get_BC_DH_LOCAL_PERMISSION(void);
inline JavaSecurityPermission *ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_set_BC_DH_LOCAL_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_DH_LOCAL_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration, BC_DH_LOCAL_PERMISSION, JavaSecurityPermission *)

inline JavaSecurityPermission *ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_get_BC_DH_PERMISSION(void);
inline JavaSecurityPermission *ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_set_BC_DH_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_DH_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration, BC_DH_PERMISSION, JavaSecurityPermission *)

J2OBJC_INITIALIZED_DEFN(ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration)

@implementation ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setParameterWithNSString:(NSString *)parameterName
                          withId:(id)parameter {
  JavaLangSecurityManager *securityManager = JavaLangSystem_getSecurityManager();
  if ([((NSString *) nil_chk(parameterName)) isEqual:ComYouzhLingtuSignCryptoConfigConfigurableProvider_THREAD_LOCAL_EC_IMPLICITLY_CA]) {
    ComYouzhLingtuSignCryptoUtilsECParameterSpec *curveSpec;
    if (securityManager != nil) {
      [securityManager checkPermissionWithJavaSecurityPermission:ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_EC_LOCAL_PERMISSION];
    }
    if ([parameter isKindOfClass:[ComYouzhLingtuSignCryptoUtilsECParameterSpec class]] || parameter == nil) {
      curveSpec = (ComYouzhLingtuSignCryptoUtilsECParameterSpec *) cast_chk(parameter, [ComYouzhLingtuSignCryptoUtilsECParameterSpec class]);
    }
    else {
      curveSpec = ComYouzhLingtuSignCryptoUtilsEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_((JavaSecuritySpecECParameterSpec *) cast_chk(parameter, [JavaSecuritySpecECParameterSpec class]), false);
    }
    if (curveSpec == nil) {
      [((JavaLangThreadLocal *) nil_chk(ecThreadSpec_)) remove];
    }
    else {
      [((JavaLangThreadLocal *) nil_chk(ecThreadSpec_)) setWithId:curveSpec];
    }
  }
  else if ([parameterName isEqual:ComYouzhLingtuSignCryptoConfigConfigurableProvider_EC_IMPLICITLY_CA]) {
    if (securityManager != nil) {
      [securityManager checkPermissionWithJavaSecurityPermission:ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_EC_PERMISSION];
    }
    if ([parameter isKindOfClass:[ComYouzhLingtuSignCryptoUtilsECParameterSpec class]] || parameter == nil) {
      (void) JreVolatileStrongAssign(&ecImplicitCaParams_, (ComYouzhLingtuSignCryptoUtilsECParameterSpec *) cast_chk(parameter, [ComYouzhLingtuSignCryptoUtilsECParameterSpec class]));
    }
    else {
      (void) JreVolatileStrongAssign(&ecImplicitCaParams_, ComYouzhLingtuSignCryptoUtilsEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_((JavaSecuritySpecECParameterSpec *) cast_chk(parameter, [JavaSecuritySpecECParameterSpec class]), false));
    }
  }
  else if ([parameterName isEqual:ComYouzhLingtuSignCryptoConfigConfigurableProvider_THREAD_LOCAL_DH_DEFAULT_PARAMS]) {
    id dhSpec;
    if (securityManager != nil) {
      [securityManager checkPermissionWithJavaSecurityPermission:ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_DH_LOCAL_PERMISSION];
    }
    if ([parameter isKindOfClass:[JavaxCryptoSpecDHParameterSpec class]] || [IOSClass_arrayType(JavaxCryptoSpecDHParameterSpec_class_(), 1) isInstance:parameter] || parameter == nil) {
      dhSpec = parameter;
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"not a valid DHParameterSpec");
    }
    if (dhSpec == nil) {
      [((JavaLangThreadLocal *) nil_chk(dhThreadSpec_)) remove];
    }
    else {
      [((JavaLangThreadLocal *) nil_chk(dhThreadSpec_)) setWithId:dhSpec];
    }
  }
  else if ([parameterName isEqual:ComYouzhLingtuSignCryptoConfigConfigurableProvider_DH_DEFAULT_PARAMS]) {
    if (securityManager != nil) {
      [securityManager checkPermissionWithJavaSecurityPermission:ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_DH_PERMISSION];
    }
    if ([parameter isKindOfClass:[JavaxCryptoSpecDHParameterSpec class]] || [IOSClass_arrayType(JavaxCryptoSpecDHParameterSpec_class_(), 1) isInstance:parameter] || parameter == nil) {
      (void) JreVolatileStrongAssign(&dhDefaultParams_, parameter);
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"not a valid DHParameterSpec or DHParameterSpec[]");
    }
  }
}

- (ComYouzhLingtuSignCryptoUtilsECParameterSpec *)getEcImplicitlyCa {
  ComYouzhLingtuSignCryptoUtilsECParameterSpec *spec = (ComYouzhLingtuSignCryptoUtilsECParameterSpec *) cast_chk([((JavaLangThreadLocal *) nil_chk(ecThreadSpec_)) get], [ComYouzhLingtuSignCryptoUtilsECParameterSpec class]);
  if (spec != nil) {
    return spec;
  }
  return JreLoadVolatileId(&ecImplicitCaParams_);
}

- (JavaxCryptoSpecDHParameterSpec *)getDHDefaultParametersWithInt:(jint)keySize {
  id params = [((JavaLangThreadLocal *) nil_chk(dhThreadSpec_)) get];
  if (params == nil) {
    params = JreLoadVolatileId(&dhDefaultParams_);
  }
  if ([params isKindOfClass:[JavaxCryptoSpecDHParameterSpec class]]) {
    JavaxCryptoSpecDHParameterSpec *spec = (JavaxCryptoSpecDHParameterSpec *) params;
    if ([((JavaMathBigInteger *) nil_chk([((JavaxCryptoSpecDHParameterSpec *) nil_chk(spec)) getP])) bitLength] == keySize) {
      return spec;
    }
  }
  else if ([IOSClass_arrayType(JavaxCryptoSpecDHParameterSpec_class_(), 1) isInstance:params]) {
    IOSObjectArray *specs = (IOSObjectArray *) cast_check(params, IOSClass_arrayType(JavaxCryptoSpecDHParameterSpec_class_(), 1));
    for (jint i = 0; i != ((IOSObjectArray *) nil_chk(specs))->size_; i++) {
      if ([((JavaMathBigInteger *) nil_chk([((JavaxCryptoSpecDHParameterSpec *) nil_chk(IOSObjectArray_Get(specs, i))) getP])) bitLength] == keySize) {
        return IOSObjectArray_Get(specs, i);
      }
    }
  }
  return nil;
}

- (void)__javaClone:(ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&ecImplicitCaParams_, &original->ecImplicitCaParams_);
  JreCloneVolatileStrong(&dhDefaultParams_, &original->dhDefaultParams_);
}

- (void)dealloc {
  JreReleaseVolatile(&ecImplicitCaParams_);
  JreReleaseVolatile(&dhDefaultParams_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComYouzhLingtuSignCryptoUtilsECParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoSpecDHParameterSpec;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setParameterWithNSString:withId:);
  methods[2].selector = @selector(getEcImplicitlyCa);
  methods[3].selector = @selector(getDHDefaultParametersWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BC_EC_LOCAL_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 4, -1, -1 },
    { "BC_EC_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
    { "BC_DH_LOCAL_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 6, -1, -1 },
    { "BC_DH_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 7, -1, -1 },
    { "ecThreadSpec_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dhThreadSpec_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ecImplicitCaParams_", "LComYouzhLingtuSignCryptoUtilsECParameterSpec;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "dhDefaultParams_", "LNSObject;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setParameter", "LNSString;LNSObject;", "getDHDefaultParameters", "I", &ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_EC_LOCAL_PERMISSION, &ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_EC_PERMISSION, &ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_DH_LOCAL_PERMISSION, &ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_DH_PERMISSION };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration = { "BouncyCastleProviderConfiguration", "com.youzh.lingtu.sign.crypto.config", ptrTable, methods, fields, 7, 0x0, 4, 8, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration;
}

+ (void)initialize {
  if (self == [ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration class]) {
    ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_EC_LOCAL_PERMISSION = new_ComYouzhLingtuSignCryptoConfigProviderConfigurationPermission_initWithNSString_withNSString_(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_PROVIDER_NAME, ComYouzhLingtuSignCryptoConfigConfigurableProvider_THREAD_LOCAL_EC_IMPLICITLY_CA);
    ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_EC_PERMISSION = new_ComYouzhLingtuSignCryptoConfigProviderConfigurationPermission_initWithNSString_withNSString_(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_PROVIDER_NAME, ComYouzhLingtuSignCryptoConfigConfigurableProvider_EC_IMPLICITLY_CA);
    ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_DH_LOCAL_PERMISSION = new_ComYouzhLingtuSignCryptoConfigProviderConfigurationPermission_initWithNSString_withNSString_(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_PROVIDER_NAME, ComYouzhLingtuSignCryptoConfigConfigurableProvider_THREAD_LOCAL_DH_DEFAULT_PARAMS);
    ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_BC_DH_PERMISSION = new_ComYouzhLingtuSignCryptoConfigProviderConfigurationPermission_initWithNSString_withNSString_(ComYouzhLingtuSignCryptoConfigBouncyCastleProvider_PROVIDER_NAME, ComYouzhLingtuSignCryptoConfigConfigurableProvider_DH_DEFAULT_PARAMS);
    J2OBJC_SET_INITIALIZED(ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration)
  }
}

@end

void ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_init(ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration *self) {
  NSObject_init(self);
  self->ecThreadSpec_ = new_JavaLangThreadLocal_init();
  self->dhThreadSpec_ = new_JavaLangThreadLocal_init();
}

ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration *new_ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration, init)
}

ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration *create_ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoConfigBouncyCastleProviderConfiguration)
