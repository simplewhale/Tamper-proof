//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/utils/PBE.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/utils/BCPBEKey.h"
#include "com/youzh/lingtu/sign/crypto/utils/PBE.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "javax/crypto/SecretKey.h"
#include "javax/crypto/spec/PBEKeySpec.h"
#include "javax/crypto/spec/PBEParameterSpec.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/PBEParametersGenerator.h"
#include "org/spongycastle/crypto/digests/GOST3411Digest.h"
#include "org/spongycastle/crypto/digests/MD2Digest.h"
#include "org/spongycastle/crypto/digests/MD5Digest.h"
#include "org/spongycastle/crypto/digests/RIPEMD160Digest.h"
#include "org/spongycastle/crypto/digests/SHA1Digest.h"
#include "org/spongycastle/crypto/digests/SHA256Digest.h"
#include "org/spongycastle/crypto/digests/TigerDigest.h"
#include "org/spongycastle/crypto/generators/OpenSSLPBEParametersGenerator.h"
#include "org/spongycastle/crypto/generators/PKCS12ParametersGenerator.h"
#include "org/spongycastle/crypto/generators/PKCS5S1ParametersGenerator.h"
#include "org/spongycastle/crypto/generators/PKCS5S2ParametersGenerator.h"
#include "org/spongycastle/crypto/params/DESParameters.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"

@interface ComYouzhLingtuSignCryptoUtilsPBE : NSObject

@end

@interface ComYouzhLingtuSignCryptoUtilsPBE_Util ()

+ (OrgSpongycastleCryptoPBEParametersGenerator *)makePBEGeneratorWithInt:(jint)type
                                                                 withInt:(jint)hash_;

+ (IOSByteArray *)convertPasswordWithInt:(jint)type
           withJavaxCryptoSpecPBEKeySpec:(JavaxCryptoSpecPBEKeySpec *)keySpec;

@end

__attribute__((unused)) static OrgSpongycastleCryptoPBEParametersGenerator *ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEGeneratorWithInt_withInt_(jint type, jint hash_);

__attribute__((unused)) static IOSByteArray *ComYouzhLingtuSignCryptoUtilsPBE_Util_convertPasswordWithInt_withJavaxCryptoSpecPBEKeySpec_(jint type, JavaxCryptoSpecPBEKeySpec *keySpec);

@implementation ComYouzhLingtuSignCryptoUtilsPBE

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "MD5", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoUtilsPBE_MD5, 0x19, -1, -1, -1, -1 },
    { "SHA1", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoUtilsPBE_SHA1, 0x19, -1, -1, -1, -1 },
    { "RIPEMD160", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoUtilsPBE_RIPEMD160, 0x19, -1, -1, -1, -1 },
    { "TIGER", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoUtilsPBE_TIGER, 0x19, -1, -1, -1, -1 },
    { "SHA256", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoUtilsPBE_SHA256, 0x19, -1, -1, -1, -1 },
    { "MD2", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoUtilsPBE_MD2, 0x19, -1, -1, -1, -1 },
    { "GOST3411", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoUtilsPBE_GOST3411, 0x19, -1, -1, -1, -1 },
    { "PKCS5S1", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoUtilsPBE_PKCS5S1, 0x19, -1, -1, -1, -1 },
    { "PKCS5S2", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoUtilsPBE_PKCS5S2, 0x19, -1, -1, -1, -1 },
    { "PKCS12", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoUtilsPBE_PKCS12, 0x19, -1, -1, -1, -1 },
    { "OPENSSL", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoUtilsPBE_OPENSSL, 0x19, -1, -1, -1, -1 },
    { "PKCS5S1_UTF8", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoUtilsPBE_PKCS5S1_UTF8, 0x19, -1, -1, -1, -1 },
    { "PKCS5S2_UTF8", "I", .constantValue.asInt = ComYouzhLingtuSignCryptoUtilsPBE_PKCS5S2_UTF8, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComYouzhLingtuSignCryptoUtilsPBE_Util;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoUtilsPBE = { "PBE", "com.youzh.lingtu.sign.crypto.utils", ptrTable, NULL, fields, 7, 0x609, 0, 13, -1, 0, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoUtilsPBE;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoUtilsPBE)

@implementation ComYouzhLingtuSignCryptoUtilsPBE_Util

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoUtilsPBE_Util_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (OrgSpongycastleCryptoPBEParametersGenerator *)makePBEGeneratorWithInt:(jint)type
                                                                 withInt:(jint)hash_ {
  return ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEGeneratorWithInt_withInt_(type, hash_);
}

+ (id<OrgSpongycastleCryptoCipherParameters>)makePBEParametersWithByteArray:(IOSByteArray *)pbeKey
                                                                    withInt:(jint)scheme
                                                                    withInt:(jint)digest
                                                                    withInt:(jint)keySize
                                                                    withInt:(jint)ivSize
                                 withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)spec
                                                               withNSString:(NSString *)targetAlgorithm {
  return ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEParametersWithByteArray_withInt_withInt_withInt_withInt_withJavaSecuritySpecAlgorithmParameterSpec_withNSString_(pbeKey, scheme, digest, keySize, ivSize, spec, targetAlgorithm);
}

+ (id<OrgSpongycastleCryptoCipherParameters>)makePBEParametersWithComYouzhLingtuSignCryptoUtilsBCPBEKey:(ComYouzhLingtuSignCryptoUtilsBCPBEKey *)pbeKey
                                                             withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)spec
                                                                                           withNSString:(NSString *)targetAlgorithm {
  return ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEParametersWithComYouzhLingtuSignCryptoUtilsBCPBEKey_withJavaSecuritySpecAlgorithmParameterSpec_withNSString_(pbeKey, spec, targetAlgorithm);
}

+ (id<OrgSpongycastleCryptoCipherParameters>)makePBEMacParametersWithComYouzhLingtuSignCryptoUtilsBCPBEKey:(ComYouzhLingtuSignCryptoUtilsBCPBEKey *)pbeKey
                                                                withJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)spec {
  return ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEMacParametersWithComYouzhLingtuSignCryptoUtilsBCPBEKey_withJavaSecuritySpecAlgorithmParameterSpec_(pbeKey, spec);
}

+ (id<OrgSpongycastleCryptoCipherParameters>)makePBEMacParametersWithJavaxCryptoSpecPBEKeySpec:(JavaxCryptoSpecPBEKeySpec *)keySpec
                                                                                       withInt:(jint)type
                                                                                       withInt:(jint)hash_
                                                                                       withInt:(jint)keySize {
  return ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEMacParametersWithJavaxCryptoSpecPBEKeySpec_withInt_withInt_withInt_(keySpec, type, hash_, keySize);
}

+ (id<OrgSpongycastleCryptoCipherParameters>)makePBEParametersWithJavaxCryptoSpecPBEKeySpec:(JavaxCryptoSpecPBEKeySpec *)keySpec
                                                                                    withInt:(jint)type
                                                                                    withInt:(jint)hash_
                                                                                    withInt:(jint)keySize
                                                                                    withInt:(jint)ivSize {
  return ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEParametersWithJavaxCryptoSpecPBEKeySpec_withInt_withInt_withInt_withInt_(keySpec, type, hash_, keySize, ivSize);
}

+ (id<OrgSpongycastleCryptoCipherParameters>)makePBEMacParametersWithJavaxCryptoSecretKey:(id<JavaxCryptoSecretKey>)key
                                                                                  withInt:(jint)type
                                                                                  withInt:(jint)hash_
                                                                                  withInt:(jint)keySize
                                                      withJavaxCryptoSpecPBEParameterSpec:(JavaxCryptoSpecPBEParameterSpec *)pbeSpec {
  return ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEMacParametersWithJavaxCryptoSecretKey_withInt_withInt_withInt_withJavaxCryptoSpecPBEParameterSpec_(key, type, hash_, keySize, pbeSpec);
}

+ (IOSByteArray *)convertPasswordWithInt:(jint)type
           withJavaxCryptoSpecPBEKeySpec:(JavaxCryptoSpecPBEKeySpec *)keySpec {
  return ComYouzhLingtuSignCryptoUtilsPBE_Util_convertPasswordWithInt_withJavaxCryptoSpecPBEKeySpec_(type, keySpec);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoPBEParametersGenerator;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoCipherParameters;", 0x9, 2, 3, 4, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoCipherParameters;", 0x9, 2, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoCipherParameters;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoCipherParameters;", 0x9, 6, 8, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoCipherParameters;", 0x9, 2, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoCipherParameters;", 0x9, 6, 10, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(makePBEGeneratorWithInt:withInt:);
  methods[2].selector = @selector(makePBEParametersWithByteArray:withInt:withInt:withInt:withInt:withJavaSecuritySpecAlgorithmParameterSpec:withNSString:);
  methods[3].selector = @selector(makePBEParametersWithComYouzhLingtuSignCryptoUtilsBCPBEKey:withJavaSecuritySpecAlgorithmParameterSpec:withNSString:);
  methods[4].selector = @selector(makePBEMacParametersWithComYouzhLingtuSignCryptoUtilsBCPBEKey:withJavaSecuritySpecAlgorithmParameterSpec:);
  methods[5].selector = @selector(makePBEMacParametersWithJavaxCryptoSpecPBEKeySpec:withInt:withInt:withInt:);
  methods[6].selector = @selector(makePBEParametersWithJavaxCryptoSpecPBEKeySpec:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(makePBEMacParametersWithJavaxCryptoSecretKey:withInt:withInt:withInt:withJavaxCryptoSpecPBEParameterSpec:);
  methods[8].selector = @selector(convertPasswordWithInt:withJavaxCryptoSpecPBEKeySpec:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "makePBEGenerator", "II", "makePBEParameters", "[BIIIILJavaSecuritySpecAlgorithmParameterSpec;LNSString;", "LJavaSecurityInvalidAlgorithmParameterException;", "LComYouzhLingtuSignCryptoUtilsBCPBEKey;LJavaSecuritySpecAlgorithmParameterSpec;LNSString;", "makePBEMacParameters", "LComYouzhLingtuSignCryptoUtilsBCPBEKey;LJavaSecuritySpecAlgorithmParameterSpec;", "LJavaxCryptoSpecPBEKeySpec;III", "LJavaxCryptoSpecPBEKeySpec;IIII", "LJavaxCryptoSecretKey;IIILJavaxCryptoSpecPBEParameterSpec;", "convertPassword", "ILJavaxCryptoSpecPBEKeySpec;", "LComYouzhLingtuSignCryptoUtilsPBE;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoUtilsPBE_Util = { "Util", "com.youzh.lingtu.sign.crypto.utils", ptrTable, methods, NULL, 7, 0x9, 9, 0, 13, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoUtilsPBE_Util;
}

@end

void ComYouzhLingtuSignCryptoUtilsPBE_Util_init(ComYouzhLingtuSignCryptoUtilsPBE_Util *self) {
  NSObject_init(self);
}

ComYouzhLingtuSignCryptoUtilsPBE_Util *new_ComYouzhLingtuSignCryptoUtilsPBE_Util_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsPBE_Util, init)
}

ComYouzhLingtuSignCryptoUtilsPBE_Util *create_ComYouzhLingtuSignCryptoUtilsPBE_Util_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsPBE_Util, init)
}

OrgSpongycastleCryptoPBEParametersGenerator *ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEGeneratorWithInt_withInt_(jint type, jint hash_) {
  ComYouzhLingtuSignCryptoUtilsPBE_Util_initialize();
  OrgSpongycastleCryptoPBEParametersGenerator *generator;
  if (type == ComYouzhLingtuSignCryptoUtilsPBE_PKCS5S1 || type == ComYouzhLingtuSignCryptoUtilsPBE_PKCS5S1_UTF8) {
    switch (hash_) {
      case ComYouzhLingtuSignCryptoUtilsPBE_MD2:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS5S1ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsMD2Digest_init());
      break;
      case ComYouzhLingtuSignCryptoUtilsPBE_MD5:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS5S1ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsMD5Digest_init());
      break;
      case ComYouzhLingtuSignCryptoUtilsPBE_SHA1:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS5S1ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsSHA1Digest_init());
      break;
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"PKCS5 scheme 1 only supports MD2, MD5 and SHA1.");
    }
  }
  else if (type == ComYouzhLingtuSignCryptoUtilsPBE_PKCS5S2 || type == ComYouzhLingtuSignCryptoUtilsPBE_PKCS5S2_UTF8) {
    switch (hash_) {
      case ComYouzhLingtuSignCryptoUtilsPBE_MD2:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS5S2ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsMD2Digest_init());
      break;
      case ComYouzhLingtuSignCryptoUtilsPBE_MD5:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS5S2ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsMD5Digest_init());
      break;
      case ComYouzhLingtuSignCryptoUtilsPBE_SHA1:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS5S2ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsSHA1Digest_init());
      break;
      case ComYouzhLingtuSignCryptoUtilsPBE_RIPEMD160:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS5S2ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsRIPEMD160Digest_init());
      break;
      case ComYouzhLingtuSignCryptoUtilsPBE_TIGER:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS5S2ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsTigerDigest_init());
      break;
      case ComYouzhLingtuSignCryptoUtilsPBE_SHA256:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS5S2ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsSHA256Digest_init());
      break;
      case ComYouzhLingtuSignCryptoUtilsPBE_GOST3411:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS5S2ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsGOST3411Digest_init());
      break;
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unknown digest scheme for PBE PKCS5S2 encryption.");
    }
  }
  else if (type == ComYouzhLingtuSignCryptoUtilsPBE_PKCS12) {
    switch (hash_) {
      case ComYouzhLingtuSignCryptoUtilsPBE_MD2:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS12ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsMD2Digest_init());
      break;
      case ComYouzhLingtuSignCryptoUtilsPBE_MD5:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS12ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsMD5Digest_init());
      break;
      case ComYouzhLingtuSignCryptoUtilsPBE_SHA1:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS12ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsSHA1Digest_init());
      break;
      case ComYouzhLingtuSignCryptoUtilsPBE_RIPEMD160:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS12ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsRIPEMD160Digest_init());
      break;
      case ComYouzhLingtuSignCryptoUtilsPBE_TIGER:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS12ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsTigerDigest_init());
      break;
      case ComYouzhLingtuSignCryptoUtilsPBE_SHA256:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS12ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsSHA256Digest_init());
      break;
      case ComYouzhLingtuSignCryptoUtilsPBE_GOST3411:
      generator = new_OrgSpongycastleCryptoGeneratorsPKCS12ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsGOST3411Digest_init());
      break;
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unknown digest scheme for PBE encryption.");
    }
  }
  else {
    generator = new_OrgSpongycastleCryptoGeneratorsOpenSSLPBEParametersGenerator_init();
  }
  return generator;
}

id<OrgSpongycastleCryptoCipherParameters> ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEParametersWithByteArray_withInt_withInt_withInt_withInt_withJavaSecuritySpecAlgorithmParameterSpec_withNSString_(IOSByteArray *pbeKey, jint scheme, jint digest, jint keySize, jint ivSize, id<JavaSecuritySpecAlgorithmParameterSpec> spec, NSString *targetAlgorithm) {
  ComYouzhLingtuSignCryptoUtilsPBE_Util_initialize();
  if ((spec == nil) || !([spec isKindOfClass:[JavaxCryptoSpecPBEParameterSpec class]])) {
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"Need a PBEParameter spec with a PBE key.");
  }
  JavaxCryptoSpecPBEParameterSpec *pbeParam = (JavaxCryptoSpecPBEParameterSpec *) cast_chk(spec, [JavaxCryptoSpecPBEParameterSpec class]);
  OrgSpongycastleCryptoPBEParametersGenerator *generator = ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEGeneratorWithInt_withInt_(scheme, digest);
  IOSByteArray *key = pbeKey;
  id<OrgSpongycastleCryptoCipherParameters> param;
  [((OrgSpongycastleCryptoPBEParametersGenerator *) nil_chk(generator)) init__WithByteArray:key withByteArray:[((JavaxCryptoSpecPBEParameterSpec *) nil_chk(pbeParam)) getSalt] withInt:[pbeParam getIterationCount]];
  if (ivSize != 0) {
    param = [generator generateDerivedParametersWithInt:keySize withInt:ivSize];
  }
  else {
    param = [generator generateDerivedParametersWithInt:keySize];
  }
  if ([((NSString *) nil_chk(targetAlgorithm)) java_hasPrefix:@"DES"]) {
    if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithIV class]]) {
      OrgSpongycastleCryptoParamsKeyParameter *kParam = (OrgSpongycastleCryptoParamsKeyParameter *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithIV *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithIV *) param))) getParameters], [OrgSpongycastleCryptoParamsKeyParameter class]);
      OrgSpongycastleCryptoParamsDESParameters_setOddParityWithByteArray_([((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(kParam)) getKey]);
    }
    else {
      OrgSpongycastleCryptoParamsKeyParameter *kParam = (OrgSpongycastleCryptoParamsKeyParameter *) cast_chk(param, [OrgSpongycastleCryptoParamsKeyParameter class]);
      OrgSpongycastleCryptoParamsDESParameters_setOddParityWithByteArray_([((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(kParam)) getKey]);
    }
  }
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(key))->size_; i++) {
    *IOSByteArray_GetRef(key, i) = 0;
  }
  return param;
}

id<OrgSpongycastleCryptoCipherParameters> ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEParametersWithComYouzhLingtuSignCryptoUtilsBCPBEKey_withJavaSecuritySpecAlgorithmParameterSpec_withNSString_(ComYouzhLingtuSignCryptoUtilsBCPBEKey *pbeKey, id<JavaSecuritySpecAlgorithmParameterSpec> spec, NSString *targetAlgorithm) {
  ComYouzhLingtuSignCryptoUtilsPBE_Util_initialize();
  if ((spec == nil) || !([spec isKindOfClass:[JavaxCryptoSpecPBEParameterSpec class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Need a PBEParameter spec with a PBE key.");
  }
  JavaxCryptoSpecPBEParameterSpec *pbeParam = (JavaxCryptoSpecPBEParameterSpec *) cast_chk(spec, [JavaxCryptoSpecPBEParameterSpec class]);
  OrgSpongycastleCryptoPBEParametersGenerator *generator = ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEGeneratorWithInt_withInt_([((ComYouzhLingtuSignCryptoUtilsBCPBEKey *) nil_chk(pbeKey)) getType], [pbeKey getDigest]);
  IOSByteArray *key = [pbeKey getEncoded];
  id<OrgSpongycastleCryptoCipherParameters> param;
  if ([pbeKey shouldTryWrongPKCS12]) {
    key = [IOSByteArray newArrayWithLength:2];
  }
  [((OrgSpongycastleCryptoPBEParametersGenerator *) nil_chk(generator)) init__WithByteArray:key withByteArray:[((JavaxCryptoSpecPBEParameterSpec *) nil_chk(pbeParam)) getSalt] withInt:[pbeParam getIterationCount]];
  if ([pbeKey getIvSize] != 0) {
    param = [generator generateDerivedParametersWithInt:[pbeKey getKeySize] withInt:[pbeKey getIvSize]];
  }
  else {
    param = [generator generateDerivedParametersWithInt:[pbeKey getKeySize]];
  }
  if ([((NSString *) nil_chk(targetAlgorithm)) java_hasPrefix:@"DES"]) {
    if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithIV class]]) {
      OrgSpongycastleCryptoParamsKeyParameter *kParam = (OrgSpongycastleCryptoParamsKeyParameter *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithIV *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithIV *) param))) getParameters], [OrgSpongycastleCryptoParamsKeyParameter class]);
      OrgSpongycastleCryptoParamsDESParameters_setOddParityWithByteArray_([((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(kParam)) getKey]);
    }
    else {
      OrgSpongycastleCryptoParamsKeyParameter *kParam = (OrgSpongycastleCryptoParamsKeyParameter *) cast_chk(param, [OrgSpongycastleCryptoParamsKeyParameter class]);
      OrgSpongycastleCryptoParamsDESParameters_setOddParityWithByteArray_([((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(kParam)) getKey]);
    }
  }
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(key))->size_; i++) {
    *IOSByteArray_GetRef(key, i) = 0;
  }
  return param;
}

id<OrgSpongycastleCryptoCipherParameters> ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEMacParametersWithComYouzhLingtuSignCryptoUtilsBCPBEKey_withJavaSecuritySpecAlgorithmParameterSpec_(ComYouzhLingtuSignCryptoUtilsBCPBEKey *pbeKey, id<JavaSecuritySpecAlgorithmParameterSpec> spec) {
  ComYouzhLingtuSignCryptoUtilsPBE_Util_initialize();
  if ((spec == nil) || !([spec isKindOfClass:[JavaxCryptoSpecPBEParameterSpec class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Need a PBEParameter spec with a PBE key.");
  }
  JavaxCryptoSpecPBEParameterSpec *pbeParam = (JavaxCryptoSpecPBEParameterSpec *) cast_chk(spec, [JavaxCryptoSpecPBEParameterSpec class]);
  OrgSpongycastleCryptoPBEParametersGenerator *generator = ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEGeneratorWithInt_withInt_([((ComYouzhLingtuSignCryptoUtilsBCPBEKey *) nil_chk(pbeKey)) getType], [pbeKey getDigest]);
  IOSByteArray *key = [pbeKey getEncoded];
  id<OrgSpongycastleCryptoCipherParameters> param;
  [((OrgSpongycastleCryptoPBEParametersGenerator *) nil_chk(generator)) init__WithByteArray:key withByteArray:[((JavaxCryptoSpecPBEParameterSpec *) nil_chk(pbeParam)) getSalt] withInt:[pbeParam getIterationCount]];
  param = [generator generateDerivedMacParametersWithInt:[pbeKey getKeySize]];
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(key))->size_; i++) {
    *IOSByteArray_GetRef(key, i) = 0;
  }
  return param;
}

id<OrgSpongycastleCryptoCipherParameters> ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEMacParametersWithJavaxCryptoSpecPBEKeySpec_withInt_withInt_withInt_(JavaxCryptoSpecPBEKeySpec *keySpec, jint type, jint hash_, jint keySize) {
  ComYouzhLingtuSignCryptoUtilsPBE_Util_initialize();
  OrgSpongycastleCryptoPBEParametersGenerator *generator = ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEGeneratorWithInt_withInt_(type, hash_);
  IOSByteArray *key;
  id<OrgSpongycastleCryptoCipherParameters> param;
  key = ComYouzhLingtuSignCryptoUtilsPBE_Util_convertPasswordWithInt_withJavaxCryptoSpecPBEKeySpec_(type, keySpec);
  [((OrgSpongycastleCryptoPBEParametersGenerator *) nil_chk(generator)) init__WithByteArray:key withByteArray:[((JavaxCryptoSpecPBEKeySpec *) nil_chk(keySpec)) getSalt] withInt:[keySpec getIterationCount]];
  param = [generator generateDerivedMacParametersWithInt:keySize];
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(key))->size_; i++) {
    *IOSByteArray_GetRef(key, i) = 0;
  }
  return param;
}

id<OrgSpongycastleCryptoCipherParameters> ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEParametersWithJavaxCryptoSpecPBEKeySpec_withInt_withInt_withInt_withInt_(JavaxCryptoSpecPBEKeySpec *keySpec, jint type, jint hash_, jint keySize, jint ivSize) {
  ComYouzhLingtuSignCryptoUtilsPBE_Util_initialize();
  OrgSpongycastleCryptoPBEParametersGenerator *generator = ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEGeneratorWithInt_withInt_(type, hash_);
  IOSByteArray *key;
  id<OrgSpongycastleCryptoCipherParameters> param;
  key = ComYouzhLingtuSignCryptoUtilsPBE_Util_convertPasswordWithInt_withJavaxCryptoSpecPBEKeySpec_(type, keySpec);
  [((OrgSpongycastleCryptoPBEParametersGenerator *) nil_chk(generator)) init__WithByteArray:key withByteArray:[((JavaxCryptoSpecPBEKeySpec *) nil_chk(keySpec)) getSalt] withInt:[keySpec getIterationCount]];
  if (ivSize != 0) {
    param = [generator generateDerivedParametersWithInt:keySize withInt:ivSize];
  }
  else {
    param = [generator generateDerivedParametersWithInt:keySize];
  }
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(key))->size_; i++) {
    *IOSByteArray_GetRef(key, i) = 0;
  }
  return param;
}

id<OrgSpongycastleCryptoCipherParameters> ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEMacParametersWithJavaxCryptoSecretKey_withInt_withInt_withInt_withJavaxCryptoSpecPBEParameterSpec_(id<JavaxCryptoSecretKey> key, jint type, jint hash_, jint keySize, JavaxCryptoSpecPBEParameterSpec *pbeSpec) {
  ComYouzhLingtuSignCryptoUtilsPBE_Util_initialize();
  OrgSpongycastleCryptoPBEParametersGenerator *generator = ComYouzhLingtuSignCryptoUtilsPBE_Util_makePBEGeneratorWithInt_withInt_(type, hash_);
  id<OrgSpongycastleCryptoCipherParameters> param;
  IOSByteArray *keyBytes = [((id<JavaxCryptoSecretKey>) nil_chk(key)) getEncoded];
  [((OrgSpongycastleCryptoPBEParametersGenerator *) nil_chk(generator)) init__WithByteArray:[key getEncoded] withByteArray:[((JavaxCryptoSpecPBEParameterSpec *) nil_chk(pbeSpec)) getSalt] withInt:[pbeSpec getIterationCount]];
  param = [generator generateDerivedMacParametersWithInt:keySize];
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(keyBytes))->size_; i++) {
    *IOSByteArray_GetRef(keyBytes, i) = 0;
  }
  return param;
}

IOSByteArray *ComYouzhLingtuSignCryptoUtilsPBE_Util_convertPasswordWithInt_withJavaxCryptoSpecPBEKeySpec_(jint type, JavaxCryptoSpecPBEKeySpec *keySpec) {
  ComYouzhLingtuSignCryptoUtilsPBE_Util_initialize();
  IOSByteArray *key;
  if (type == ComYouzhLingtuSignCryptoUtilsPBE_PKCS12) {
    key = OrgSpongycastleCryptoPBEParametersGenerator_PKCS12PasswordToBytesWithCharArray_([((JavaxCryptoSpecPBEKeySpec *) nil_chk(keySpec)) getPassword]);
  }
  else if (type == ComYouzhLingtuSignCryptoUtilsPBE_PKCS5S2_UTF8 || type == ComYouzhLingtuSignCryptoUtilsPBE_PKCS5S1_UTF8) {
    key = OrgSpongycastleCryptoPBEParametersGenerator_PKCS5PasswordToUTF8BytesWithCharArray_([((JavaxCryptoSpecPBEKeySpec *) nil_chk(keySpec)) getPassword]);
  }
  else {
    key = OrgSpongycastleCryptoPBEParametersGenerator_PKCS5PasswordToBytesWithCharArray_([((JavaxCryptoSpecPBEKeySpec *) nil_chk(keySpec)) getPassword]);
  }
  return key;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoUtilsPBE_Util)
