//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/utils/BaseKeyGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/utils/BaseKeyGenerator.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/InvalidParameterException.h"
#include "java/security/SecureRandom.h"
#include "java/security/spec/AlgorithmParameterSpec.h"
#include "javax/crypto/KeyGeneratorSpi.h"
#include "javax/crypto/SecretKey.h"
#include "javax/crypto/spec/SecretKeySpec.h"
#include "org/spongycastle/crypto/CipherKeyGenerator.h"
#include "org/spongycastle/crypto/KeyGenerationParameters.h"

@implementation ComYouzhLingtuSignCryptoUtilsBaseKeyGenerator

- (instancetype)initWithNSString:(NSString *)algName
                         withInt:(jint)defaultKeySize
withOrgSpongycastleCryptoCipherKeyGenerator:(OrgSpongycastleCryptoCipherKeyGenerator *)engine {
  ComYouzhLingtuSignCryptoUtilsBaseKeyGenerator_initWithNSString_withInt_withOrgSpongycastleCryptoCipherKeyGenerator_(self, algName, defaultKeySize, engine);
  return self;
}

- (void)engineInitWithJavaSecuritySpecAlgorithmParameterSpec:(id<JavaSecuritySpecAlgorithmParameterSpec>)params
                                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(@"Not Implemented");
}

- (void)engineInitWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  if (random != nil) {
    [((OrgSpongycastleCryptoCipherKeyGenerator *) nil_chk(engine_)) init__WithOrgSpongycastleCryptoKeyGenerationParameters:new_OrgSpongycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(random, defaultKeySize_)];
    uninitialised_ = false;
  }
}

- (void)engineInitWithInt:(jint)keySize
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @try {
    if (random == nil) {
      random = new_JavaSecuritySecureRandom_init();
    }
    [((OrgSpongycastleCryptoCipherKeyGenerator *) nil_chk(engine_)) init__WithOrgSpongycastleCryptoKeyGenerationParameters:new_OrgSpongycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(random, keySize)];
    uninitialised_ = false;
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw new_JavaSecurityInvalidParameterException_initWithNSString_([e getMessage]);
  }
}

- (id<JavaxCryptoSecretKey>)engineGenerateKey {
  if (uninitialised_) {
    [((OrgSpongycastleCryptoCipherKeyGenerator *) nil_chk(engine_)) init__WithOrgSpongycastleCryptoKeyGenerationParameters:new_OrgSpongycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(new_JavaSecuritySecureRandom_init(), defaultKeySize_)];
    uninitialised_ = false;
  }
  return new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_([((OrgSpongycastleCryptoCipherKeyGenerator *) nil_chk(engine_)) generateKey], algName_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 5, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoSecretKey;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:withOrgSpongycastleCryptoCipherKeyGenerator:);
  methods[1].selector = @selector(engineInitWithJavaSecuritySpecAlgorithmParameterSpec:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(engineInitWithJavaSecuritySecureRandom:);
  methods[3].selector = @selector(engineInitWithInt:withJavaSecuritySecureRandom:);
  methods[4].selector = @selector(engineGenerateKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "algName_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "keySize_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "defaultKeySize_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "engine_", "LOrgSpongycastleCryptoCipherKeyGenerator;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "uninitialised_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;ILOrgSpongycastleCryptoCipherKeyGenerator;", "engineInit", "LJavaSecuritySpecAlgorithmParameterSpec;LJavaSecuritySecureRandom;", "LJavaSecurityInvalidAlgorithmParameterException;", "LJavaSecuritySecureRandom;", "ILJavaSecuritySecureRandom;" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoUtilsBaseKeyGenerator = { "BaseKeyGenerator", "com.youzh.lingtu.sign.crypto.utils", ptrTable, methods, fields, 7, 0x1, 5, 5, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoUtilsBaseKeyGenerator;
}

@end

void ComYouzhLingtuSignCryptoUtilsBaseKeyGenerator_initWithNSString_withInt_withOrgSpongycastleCryptoCipherKeyGenerator_(ComYouzhLingtuSignCryptoUtilsBaseKeyGenerator *self, NSString *algName, jint defaultKeySize, OrgSpongycastleCryptoCipherKeyGenerator *engine) {
  JavaxCryptoKeyGeneratorSpi_init(self);
  self->uninitialised_ = true;
  self->algName_ = algName;
  self->keySize_ = self->defaultKeySize_ = defaultKeySize;
  self->engine_ = engine;
}

ComYouzhLingtuSignCryptoUtilsBaseKeyGenerator *new_ComYouzhLingtuSignCryptoUtilsBaseKeyGenerator_initWithNSString_withInt_withOrgSpongycastleCryptoCipherKeyGenerator_(NSString *algName, jint defaultKeySize, OrgSpongycastleCryptoCipherKeyGenerator *engine) {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoUtilsBaseKeyGenerator, initWithNSString_withInt_withOrgSpongycastleCryptoCipherKeyGenerator_, algName, defaultKeySize, engine)
}

ComYouzhLingtuSignCryptoUtilsBaseKeyGenerator *create_ComYouzhLingtuSignCryptoUtilsBaseKeyGenerator_initWithNSString_withInt_withOrgSpongycastleCryptoCipherKeyGenerator_(NSString *algName, jint defaultKeySize, OrgSpongycastleCryptoCipherKeyGenerator *engine) {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoUtilsBaseKeyGenerator, initWithNSString_withInt_withOrgSpongycastleCryptoCipherKeyGenerator_, algName, defaultKeySize, engine)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoUtilsBaseKeyGenerator)
