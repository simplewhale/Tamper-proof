//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/src/main/java/com/youzh/lingtu/sign/crypto/Hash.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/youzh/lingtu/sign/crypto/Hash.h"
#include "com/youzh/lingtu/sign/crypto/digest/Keccak.h"
#include "com/youzh/lingtu/sign/crypto/utils/Numeric.h"
#include "java/lang/RuntimeException.h"
#include "java/nio/charset/Charset.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"

@interface ComYouzhLingtuSignCryptoHash ()

- (instancetype)init;

@end

__attribute__((unused)) static void ComYouzhLingtuSignCryptoHash_init(ComYouzhLingtuSignCryptoHash *self);

__attribute__((unused)) static ComYouzhLingtuSignCryptoHash *new_ComYouzhLingtuSignCryptoHash_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComYouzhLingtuSignCryptoHash *create_ComYouzhLingtuSignCryptoHash_init(void);

@implementation ComYouzhLingtuSignCryptoHash

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComYouzhLingtuSignCryptoHash_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)sha3WithNSString:(NSString *)hexInput {
  return ComYouzhLingtuSignCryptoHash_sha3WithNSString_(hexInput);
}

+ (IOSByteArray *)sha3WithByteArray:(IOSByteArray *)input
                            withInt:(jint)offset
                            withInt:(jint)length {
  return ComYouzhLingtuSignCryptoHash_sha3WithByteArray_withInt_withInt_(input, offset, length);
}

+ (IOSByteArray *)sha3WithByteArray:(IOSByteArray *)input {
  return ComYouzhLingtuSignCryptoHash_sha3WithByteArray_(input);
}

+ (NSString *)sha3StringWithNSString:(NSString *)utf8String {
  return ComYouzhLingtuSignCryptoHash_sha3StringWithNSString_(utf8String);
}

+ (IOSByteArray *)sha256WithByteArray:(IOSByteArray *)input {
  return ComYouzhLingtuSignCryptoHash_sha256WithByteArray_(input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 5, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(sha3WithNSString:);
  methods[2].selector = @selector(sha3WithByteArray:withInt:withInt:);
  methods[3].selector = @selector(sha3WithByteArray:);
  methods[4].selector = @selector(sha3StringWithNSString:);
  methods[5].selector = @selector(sha256WithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "sha3", "LNSString;", "[BII", "[B", "sha3String", "sha256" };
  static const J2ObjcClassInfo _ComYouzhLingtuSignCryptoHash = { "Hash", "com.youzh.lingtu.sign.crypto", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_ComYouzhLingtuSignCryptoHash;
}

@end

void ComYouzhLingtuSignCryptoHash_init(ComYouzhLingtuSignCryptoHash *self) {
  NSObject_init(self);
}

ComYouzhLingtuSignCryptoHash *new_ComYouzhLingtuSignCryptoHash_init() {
  J2OBJC_NEW_IMPL(ComYouzhLingtuSignCryptoHash, init)
}

ComYouzhLingtuSignCryptoHash *create_ComYouzhLingtuSignCryptoHash_init() {
  J2OBJC_CREATE_IMPL(ComYouzhLingtuSignCryptoHash, init)
}

NSString *ComYouzhLingtuSignCryptoHash_sha3WithNSString_(NSString *hexInput) {
  ComYouzhLingtuSignCryptoHash_initialize();
  IOSByteArray *bytes = ComYouzhLingtuSignCryptoUtilsNumeric_hexStringToByteArrayWithNSString_(hexInput);
  IOSByteArray *result = ComYouzhLingtuSignCryptoHash_sha3WithByteArray_(bytes);
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringWithByteArray_(result);
}

IOSByteArray *ComYouzhLingtuSignCryptoHash_sha3WithByteArray_withInt_withInt_(IOSByteArray *input, jint offset, jint length) {
  ComYouzhLingtuSignCryptoHash_initialize();
  ComYouzhLingtuSignCryptoDigestKeccak_DigestKeccak *kecc = new_ComYouzhLingtuSignCryptoDigestKeccak_Digest256_init();
  [kecc updateWithByteArray:input withInt:offset withInt:length];
  return [kecc digest];
}

IOSByteArray *ComYouzhLingtuSignCryptoHash_sha3WithByteArray_(IOSByteArray *input) {
  ComYouzhLingtuSignCryptoHash_initialize();
  return ComYouzhLingtuSignCryptoHash_sha3WithByteArray_withInt_withInt_(input, 0, ((IOSByteArray *) nil_chk(input))->size_);
}

NSString *ComYouzhLingtuSignCryptoHash_sha3StringWithNSString_(NSString *utf8String) {
  ComYouzhLingtuSignCryptoHash_initialize();
  return ComYouzhLingtuSignCryptoUtilsNumeric_toHexStringWithByteArray_(ComYouzhLingtuSignCryptoHash_sha3WithByteArray_([((NSString *) nil_chk(utf8String)) java_getBytesWithCharset:JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8")]));
}

IOSByteArray *ComYouzhLingtuSignCryptoHash_sha256WithByteArray_(IOSByteArray *input) {
  ComYouzhLingtuSignCryptoHash_initialize();
  @try {
    JavaSecurityMessageDigest *digest = JavaSecurityMessageDigest_getInstanceWithNSString_(@"SHA-256");
    return [((JavaSecurityMessageDigest *) nil_chk(digest)) digestWithByteArray:input];
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"Couldn't find a SHA-256 provider", e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComYouzhLingtuSignCryptoHash)
