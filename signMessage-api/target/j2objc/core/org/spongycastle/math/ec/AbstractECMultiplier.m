//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/math/ec/AbstractECMultiplier.java
//

#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/math/ec/AbstractECMultiplier.h"
#include "org/spongycastle/math/ec/ECAlgorithms.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECPoint.h"

@implementation OrgSpongycastleMathEcAbstractECMultiplier

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleMathEcAbstractECMultiplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgSpongycastleMathEcECPoint *)multiplyWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p
                                                    withJavaMathBigInteger:(JavaMathBigInteger *)k {
  jint sign = [((JavaMathBigInteger *) nil_chk(k)) signum];
  if (sign == 0 || [((OrgSpongycastleMathEcECPoint *) nil_chk(p)) isInfinity]) {
    return [((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getCurve])) getInfinity];
  }
  OrgSpongycastleMathEcECPoint *positive = [self multiplyPositiveWithOrgSpongycastleMathEcECPoint:p withJavaMathBigInteger:[k abs]];
  OrgSpongycastleMathEcECPoint *result = sign > 0 ? positive : [((OrgSpongycastleMathEcECPoint *) nil_chk(positive)) negate];
  return OrgSpongycastleMathEcECAlgorithms_validatePointWithOrgSpongycastleMathEcECPoint_(result);
}

- (OrgSpongycastleMathEcECPoint *)multiplyPositiveWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p
                                                            withJavaMathBigInteger:(JavaMathBigInteger *)k {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x404, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(multiplyWithOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:);
  methods[2].selector = @selector(multiplyPositiveWithOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "multiply", "LOrgSpongycastleMathEcECPoint;LJavaMathBigInteger;", "multiplyPositive" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcAbstractECMultiplier = { "AbstractECMultiplier", "org.spongycastle.math.ec", ptrTable, methods, NULL, 7, 0x401, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcAbstractECMultiplier;
}

@end

void OrgSpongycastleMathEcAbstractECMultiplier_init(OrgSpongycastleMathEcAbstractECMultiplier *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcAbstractECMultiplier)
