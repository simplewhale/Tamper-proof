//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/math/ec/GLVMultiplier.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/math/ec/AbstractECMultiplier.h"
#include "org/spongycastle/math/ec/ECAlgorithms.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/math/ec/ECPointMap.h"
#include "org/spongycastle/math/ec/GLVMultiplier.h"
#include "org/spongycastle/math/ec/endo/GLVEndomorphism.h"

@implementation OrgSpongycastleMathEcGLVMultiplier

- (instancetype)initWithOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)curve
        withOrgSpongycastleMathEcEndoGLVEndomorphism:(id<OrgSpongycastleMathEcEndoGLVEndomorphism>)glvEndomorphism {
  OrgSpongycastleMathEcGLVMultiplier_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcEndoGLVEndomorphism_(self, curve, glvEndomorphism);
  return self;
}

- (OrgSpongycastleMathEcECPoint *)multiplyPositiveWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p
                                                            withJavaMathBigInteger:(JavaMathBigInteger *)k {
  if (![((OrgSpongycastleMathEcECCurve *) nil_chk(curve_)) equalsWithOrgSpongycastleMathEcECCurve:[((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getCurve]]) {
    @throw new_JavaLangIllegalStateException_init();
  }
  JavaMathBigInteger *n = [((OrgSpongycastleMathEcECCurve *) nil_chk([p getCurve])) getOrder];
  IOSObjectArray *ab = [((id<OrgSpongycastleMathEcEndoGLVEndomorphism>) nil_chk(glvEndomorphism_)) decomposeScalarWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(k)) modWithJavaMathBigInteger:n]];
  JavaMathBigInteger *a = IOSObjectArray_Get(nil_chk(ab), 0);
  JavaMathBigInteger *b = IOSObjectArray_Get(ab, 1);
  id<OrgSpongycastleMathEcECPointMap> pointMap = [glvEndomorphism_ getPointMap];
  if ([glvEndomorphism_ hasEfficientPointMap]) {
    return OrgSpongycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPointMap_withJavaMathBigInteger_(p, a, pointMap, b);
  }
  return OrgSpongycastleMathEcECAlgorithms_implShamirsTrickWNafWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(p, a, [((id<OrgSpongycastleMathEcECPointMap>) nil_chk(pointMap)) mapWithOrgSpongycastleMathEcECPoint:p], b);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleMathEcECCurve:withOrgSpongycastleMathEcEndoGLVEndomorphism:);
  methods[1].selector = @selector(multiplyPositiveWithOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "curve_", "LOrgSpongycastleMathEcECCurve;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "glvEndomorphism_", "LOrgSpongycastleMathEcEndoGLVEndomorphism;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleMathEcECCurve;LOrgSpongycastleMathEcEndoGLVEndomorphism;", "multiplyPositive", "LOrgSpongycastleMathEcECPoint;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcGLVMultiplier = { "GLVMultiplier", "org.spongycastle.math.ec", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcGLVMultiplier;
}

@end

void OrgSpongycastleMathEcGLVMultiplier_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcEndoGLVEndomorphism_(OrgSpongycastleMathEcGLVMultiplier *self, OrgSpongycastleMathEcECCurve *curve, id<OrgSpongycastleMathEcEndoGLVEndomorphism> glvEndomorphism) {
  OrgSpongycastleMathEcAbstractECMultiplier_init(self);
  if (curve == nil || [curve getOrder] == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Need curve with known group order");
  }
  self->curve_ = curve;
  self->glvEndomorphism_ = glvEndomorphism;
}

OrgSpongycastleMathEcGLVMultiplier *new_OrgSpongycastleMathEcGLVMultiplier_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcEndoGLVEndomorphism_(OrgSpongycastleMathEcECCurve *curve, id<OrgSpongycastleMathEcEndoGLVEndomorphism> glvEndomorphism) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcGLVMultiplier, initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcEndoGLVEndomorphism_, curve, glvEndomorphism)
}

OrgSpongycastleMathEcGLVMultiplier *create_OrgSpongycastleMathEcGLVMultiplier_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcEndoGLVEndomorphism_(OrgSpongycastleMathEcECCurve *curve, id<OrgSpongycastleMathEcEndoGLVEndomorphism> glvEndomorphism) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcGLVMultiplier, initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcEndoGLVEndomorphism_, curve, glvEndomorphism)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcGLVMultiplier)
