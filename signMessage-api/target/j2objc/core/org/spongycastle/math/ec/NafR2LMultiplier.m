//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/math/ec/NafR2LMultiplier.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/math/ec/AbstractECMultiplier.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/math/ec/NafR2LMultiplier.h"
#include "org/spongycastle/math/ec/WNafUtil.h"

@implementation OrgSpongycastleMathEcNafR2LMultiplier

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleMathEcNafR2LMultiplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgSpongycastleMathEcECPoint *)multiplyPositiveWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p
                                                            withJavaMathBigInteger:(JavaMathBigInteger *)k {
  IOSIntArray *naf = OrgSpongycastleMathEcWNafUtil_generateCompactNafWithJavaMathBigInteger_(k);
  OrgSpongycastleMathEcECPoint *R0 = [((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getCurve])) getInfinity];
  OrgSpongycastleMathEcECPoint *R1 = p;
  jint zeroes = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(naf))->size_; ++i) {
    jint ni = IOSIntArray_Get(naf, i);
    jint digit = JreRShift32(ni, 16);
    zeroes += ni & (jint) 0xFFFF;
    R1 = [((OrgSpongycastleMathEcECPoint *) nil_chk(R1)) timesPow2WithInt:zeroes];
    R0 = [((OrgSpongycastleMathEcECPoint *) nil_chk(R0)) addWithOrgSpongycastleMathEcECPoint:digit < 0 ? [((OrgSpongycastleMathEcECPoint *) nil_chk(R1)) negate] : R1];
    zeroes = 1;
  }
  return R0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x4, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(multiplyPositiveWithOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "multiplyPositive", "LOrgSpongycastleMathEcECPoint;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcNafR2LMultiplier = { "NafR2LMultiplier", "org.spongycastle.math.ec", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcNafR2LMultiplier;
}

@end

void OrgSpongycastleMathEcNafR2LMultiplier_init(OrgSpongycastleMathEcNafR2LMultiplier *self) {
  OrgSpongycastleMathEcAbstractECMultiplier_init(self);
}

OrgSpongycastleMathEcNafR2LMultiplier *new_OrgSpongycastleMathEcNafR2LMultiplier_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcNafR2LMultiplier, init)
}

OrgSpongycastleMathEcNafR2LMultiplier *create_OrgSpongycastleMathEcNafR2LMultiplier_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcNafR2LMultiplier, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcNafR2LMultiplier)
