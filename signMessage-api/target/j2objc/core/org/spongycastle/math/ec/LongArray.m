//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/math/ec/LongArray.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/math/ec/ECConstants.h"
#include "org/spongycastle/math/ec/LongArray.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleMathEcLongArray () {
 @public
  IOSLongArray *m_ints_;
}

- (jint)degreeFromWithInt:(jint)limit;

+ (jint)bitLengthWithLong:(jlong)w;

- (IOSLongArray *)resizedIntsWithInt:(jint)newLen;

+ (jlong)shiftUpWithLongArray:(IOSLongArray *)x
                      withInt:(jint)xOff
                      withInt:(jint)count
                      withInt:(jint)shift;

+ (jlong)shiftUpWithLongArray:(IOSLongArray *)x
                      withInt:(jint)xOff
                withLongArray:(IOSLongArray *)z
                      withInt:(jint)zOff
                      withInt:(jint)count
                      withInt:(jint)shift;

- (void)addShiftedByBitsSafeWithOrgSpongycastleMathEcLongArray:(OrgSpongycastleMathEcLongArray *)other
                                                       withInt:(jint)otherDegree
                                                       withInt:(jint)bits;

+ (jlong)addShiftedUpWithLongArray:(IOSLongArray *)x
                           withInt:(jint)xOff
                     withLongArray:(IOSLongArray *)y
                           withInt:(jint)yOff
                           withInt:(jint)count
                           withInt:(jint)shift;

+ (jlong)addShiftedDownWithLongArray:(IOSLongArray *)x
                             withInt:(jint)xOff
                       withLongArray:(IOSLongArray *)y
                             withInt:(jint)yOff
                             withInt:(jint)count
                             withInt:(jint)shift;

+ (void)addWithLongArray:(IOSLongArray *)x
                 withInt:(jint)xOff
           withLongArray:(IOSLongArray *)y
                 withInt:(jint)yOff
                 withInt:(jint)count;

+ (void)addWithLongArray:(IOSLongArray *)x
                 withInt:(jint)xOff
           withLongArray:(IOSLongArray *)y
                 withInt:(jint)yOff
           withLongArray:(IOSLongArray *)z
                 withInt:(jint)zOff
                 withInt:(jint)count;

+ (void)addBothWithLongArray:(IOSLongArray *)x
                     withInt:(jint)xOff
               withLongArray:(IOSLongArray *)y1
                     withInt:(jint)y1Off
               withLongArray:(IOSLongArray *)y2
                     withInt:(jint)y2Off
                     withInt:(jint)count;

+ (void)distributeWithLongArray:(IOSLongArray *)x
                        withInt:(jint)src
                        withInt:(jint)dst1
                        withInt:(jint)dst2
                        withInt:(jint)count;

+ (void)flipWordWithLongArray:(IOSLongArray *)buf
                      withInt:(jint)off
                      withInt:(jint)bit
                     withLong:(jlong)word;

+ (jboolean)testBitWithLongArray:(IOSLongArray *)buf
                         withInt:(jint)off
                         withInt:(jint)n;

+ (void)flipBitWithLongArray:(IOSLongArray *)buf
                     withInt:(jint)off
                     withInt:(jint)n;

+ (void)multiplyWordWithLong:(jlong)a
               withLongArray:(IOSLongArray *)b
                     withInt:(jint)bLen
               withLongArray:(IOSLongArray *)c
                     withInt:(jint)cOff;

+ (OrgSpongycastleMathEcLongArray *)reduceResultWithLongArray:(IOSLongArray *)buf
                                                      withInt:(jint)off
                                                      withInt:(jint)len
                                                      withInt:(jint)m
                                                 withIntArray:(IOSIntArray *)ks;

+ (jint)reduceInPlaceWithLongArray:(IOSLongArray *)buf
                           withInt:(jint)off
                           withInt:(jint)len
                           withInt:(jint)m
                      withIntArray:(IOSIntArray *)ks;

+ (void)reduceBitWiseWithLongArray:(IOSLongArray *)buf
                           withInt:(jint)off
                           withInt:(jint)bitlength
                           withInt:(jint)m
                      withIntArray:(IOSIntArray *)ks;

+ (void)reduceBitWithLongArray:(IOSLongArray *)buf
                       withInt:(jint)off
                       withInt:(jint)bit
                       withInt:(jint)m
                  withIntArray:(IOSIntArray *)ks;

+ (void)reduceWordWiseWithLongArray:(IOSLongArray *)buf
                            withInt:(jint)off
                            withInt:(jint)len
                            withInt:(jint)toBit
                            withInt:(jint)m
                       withIntArray:(IOSIntArray *)ks;

+ (void)reduceWordWithLongArray:(IOSLongArray *)buf
                        withInt:(jint)off
                        withInt:(jint)bit
                       withLong:(jlong)word
                        withInt:(jint)m
                   withIntArray:(IOSIntArray *)ks;

+ (void)reduceVectorWiseWithLongArray:(IOSLongArray *)buf
                              withInt:(jint)off
                              withInt:(jint)len
                              withInt:(jint)words
                              withInt:(jint)m
                         withIntArray:(IOSIntArray *)ks;

+ (void)flipVectorWithLongArray:(IOSLongArray *)x
                        withInt:(jint)xOff
                  withLongArray:(IOSLongArray *)y
                        withInt:(jint)yOff
                        withInt:(jint)yLen
                        withInt:(jint)bits;

+ (void)squareInPlaceWithLongArray:(IOSLongArray *)x
                           withInt:(jint)xLen
                           withInt:(jint)m
                      withIntArray:(IOSIntArray *)ks;

+ (void)interleaveWithLongArray:(IOSLongArray *)x
                        withInt:(jint)xOff
                  withLongArray:(IOSLongArray *)z
                        withInt:(jint)zOff
                        withInt:(jint)count
                        withInt:(jint)width;

+ (void)interleave3WithLongArray:(IOSLongArray *)x
                         withInt:(jint)xOff
                   withLongArray:(IOSLongArray *)z
                         withInt:(jint)zOff
                         withInt:(jint)count;

+ (jlong)interleave3WithLong:(jlong)x;

+ (jlong)interleave3_21to63WithInt:(jint)x;

+ (void)interleave5WithLongArray:(IOSLongArray *)x
                         withInt:(jint)xOff
                   withLongArray:(IOSLongArray *)z
                         withInt:(jint)zOff
                         withInt:(jint)count;

+ (jlong)interleave5WithLong:(jlong)x;

+ (jlong)interleave3_13to65WithInt:(jint)x;

+ (void)interleave7WithLongArray:(IOSLongArray *)x
                         withInt:(jint)xOff
                   withLongArray:(IOSLongArray *)z
                         withInt:(jint)zOff
                         withInt:(jint)count;

+ (jlong)interleave7WithLong:(jlong)x;

+ (void)interleave2_nWithLongArray:(IOSLongArray *)x
                           withInt:(jint)xOff
                     withLongArray:(IOSLongArray *)z
                           withInt:(jint)zOff
                           withInt:(jint)count
                           withInt:(jint)rounds;

+ (jlong)interleave2_nWithLong:(jlong)x
                       withInt:(jint)rounds;

+ (jlong)interleave4_16to64WithInt:(jint)x;

+ (jlong)interleave2_32to64WithInt:(jint)x;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcLongArray, m_ints_, IOSLongArray *)

inline IOSShortArray *OrgSpongycastleMathEcLongArray_get_INTERLEAVE2_TABLE(void);
static IOSShortArray *OrgSpongycastleMathEcLongArray_INTERLEAVE2_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleMathEcLongArray, INTERLEAVE2_TABLE, IOSShortArray *)

inline IOSIntArray *OrgSpongycastleMathEcLongArray_get_INTERLEAVE3_TABLE(void);
static IOSIntArray *OrgSpongycastleMathEcLongArray_INTERLEAVE3_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleMathEcLongArray, INTERLEAVE3_TABLE, IOSIntArray *)

inline IOSIntArray *OrgSpongycastleMathEcLongArray_get_INTERLEAVE4_TABLE(void);
static IOSIntArray *OrgSpongycastleMathEcLongArray_INTERLEAVE4_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleMathEcLongArray, INTERLEAVE4_TABLE, IOSIntArray *)

inline IOSIntArray *OrgSpongycastleMathEcLongArray_get_INTERLEAVE5_TABLE(void);
static IOSIntArray *OrgSpongycastleMathEcLongArray_INTERLEAVE5_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleMathEcLongArray, INTERLEAVE5_TABLE, IOSIntArray *)

inline IOSLongArray *OrgSpongycastleMathEcLongArray_get_INTERLEAVE7_TABLE(void);
static IOSLongArray *OrgSpongycastleMathEcLongArray_INTERLEAVE7_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleMathEcLongArray, INTERLEAVE7_TABLE, IOSLongArray *)

inline NSString *OrgSpongycastleMathEcLongArray_get_ZEROES(void);
static NSString *OrgSpongycastleMathEcLongArray_ZEROES = @"0000000000000000000000000000000000000000000000000000000000000000";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleMathEcLongArray, ZEROES, NSString *)

__attribute__((unused)) static jint OrgSpongycastleMathEcLongArray_degreeFromWithInt_(OrgSpongycastleMathEcLongArray *self, jint limit);

__attribute__((unused)) static jint OrgSpongycastleMathEcLongArray_bitLengthWithLong_(jlong w);

__attribute__((unused)) static IOSLongArray *OrgSpongycastleMathEcLongArray_resizedIntsWithInt_(OrgSpongycastleMathEcLongArray *self, jint newLen);

__attribute__((unused)) static jlong OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withInt_withInt_(IOSLongArray *x, jint xOff, jint count, jint shift);

__attribute__((unused)) static jlong OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *z, jint zOff, jint count, jint shift);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_addShiftedByBitsSafeWithOrgSpongycastleMathEcLongArray_withInt_withInt_(OrgSpongycastleMathEcLongArray *self, OrgSpongycastleMathEcLongArray *other, jint otherDegree, jint bits);

__attribute__((unused)) static jlong OrgSpongycastleMathEcLongArray_addShiftedUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *y, jint yOff, jint count, jint shift);

__attribute__((unused)) static jlong OrgSpongycastleMathEcLongArray_addShiftedDownWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *y, jint yOff, jint count, jint shift);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_addWithLongArray_withInt_withLongArray_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *y, jint yOff, jint count);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_addWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *y, jint yOff, IOSLongArray *z, jint zOff, jint count);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_addBothWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *y1, jint y1Off, IOSLongArray *y2, jint y2Off, jint count);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_distributeWithLongArray_withInt_withInt_withInt_withInt_(IOSLongArray *x, jint src, jint dst1, jint dst2, jint count);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_flipWordWithLongArray_withInt_withInt_withLong_(IOSLongArray *buf, jint off, jint bit, jlong word);

__attribute__((unused)) static jboolean OrgSpongycastleMathEcLongArray_testBitWithLongArray_withInt_withInt_(IOSLongArray *buf, jint off, jint n);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_flipBitWithLongArray_withInt_withInt_(IOSLongArray *buf, jint off, jint n);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_multiplyWordWithLong_withLongArray_withInt_withLongArray_withInt_(jlong a, IOSLongArray *b, jint bLen, IOSLongArray *c, jint cOff);

__attribute__((unused)) static OrgSpongycastleMathEcLongArray *OrgSpongycastleMathEcLongArray_reduceResultWithLongArray_withInt_withInt_withInt_withIntArray_(IOSLongArray *buf, jint off, jint len, jint m, IOSIntArray *ks);

__attribute__((unused)) static jint OrgSpongycastleMathEcLongArray_reduceInPlaceWithLongArray_withInt_withInt_withInt_withIntArray_(IOSLongArray *buf, jint off, jint len, jint m, IOSIntArray *ks);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_reduceBitWiseWithLongArray_withInt_withInt_withInt_withIntArray_(IOSLongArray *buf, jint off, jint bitlength, jint m, IOSIntArray *ks);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_reduceBitWithLongArray_withInt_withInt_withInt_withIntArray_(IOSLongArray *buf, jint off, jint bit, jint m, IOSIntArray *ks);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_reduceWordWiseWithLongArray_withInt_withInt_withInt_withInt_withIntArray_(IOSLongArray *buf, jint off, jint len, jint toBit, jint m, IOSIntArray *ks);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_reduceWordWithLongArray_withInt_withInt_withLong_withInt_withIntArray_(IOSLongArray *buf, jint off, jint bit, jlong word, jint m, IOSIntArray *ks);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_reduceVectorWiseWithLongArray_withInt_withInt_withInt_withInt_withIntArray_(IOSLongArray *buf, jint off, jint len, jint words, jint m, IOSIntArray *ks);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_flipVectorWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *y, jint yOff, jint yLen, jint bits);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_squareInPlaceWithLongArray_withInt_withInt_withIntArray_(IOSLongArray *x, jint xLen, jint m, IOSIntArray *ks);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_interleaveWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *z, jint zOff, jint count, jint width);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_interleave3WithLongArray_withInt_withLongArray_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *z, jint zOff, jint count);

__attribute__((unused)) static jlong OrgSpongycastleMathEcLongArray_interleave3WithLong_(jlong x);

__attribute__((unused)) static jlong OrgSpongycastleMathEcLongArray_interleave3_21to63WithInt_(jint x);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_interleave5WithLongArray_withInt_withLongArray_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *z, jint zOff, jint count);

__attribute__((unused)) static jlong OrgSpongycastleMathEcLongArray_interleave5WithLong_(jlong x);

__attribute__((unused)) static jlong OrgSpongycastleMathEcLongArray_interleave3_13to65WithInt_(jint x);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_interleave7WithLongArray_withInt_withLongArray_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *z, jint zOff, jint count);

__attribute__((unused)) static jlong OrgSpongycastleMathEcLongArray_interleave7WithLong_(jlong x);

__attribute__((unused)) static void OrgSpongycastleMathEcLongArray_interleave2_nWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *z, jint zOff, jint count, jint rounds);

__attribute__((unused)) static jlong OrgSpongycastleMathEcLongArray_interleave2_nWithLong_withInt_(jlong x, jint rounds);

__attribute__((unused)) static jlong OrgSpongycastleMathEcLongArray_interleave4_16to64WithInt_(jint x);

__attribute__((unused)) static jlong OrgSpongycastleMathEcLongArray_interleave2_32to64WithInt_(jint x);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleMathEcLongArray)

IOSByteArray *OrgSpongycastleMathEcLongArray_bitLengths;

@implementation OrgSpongycastleMathEcLongArray

- (instancetype)initWithInt:(jint)intLen {
  OrgSpongycastleMathEcLongArray_initWithInt_(self, intLen);
  return self;
}

- (instancetype)initWithLongArray:(IOSLongArray *)ints {
  OrgSpongycastleMathEcLongArray_initWithLongArray_(self, ints);
  return self;
}

- (instancetype)initWithLongArray:(IOSLongArray *)ints
                          withInt:(jint)off
                          withInt:(jint)len {
  OrgSpongycastleMathEcLongArray_initWithLongArray_withInt_withInt_(self, ints, off, len);
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)bigInt {
  OrgSpongycastleMathEcLongArray_initWithJavaMathBigInteger_(self, bigInt);
  return self;
}

- (jboolean)isOne {
  IOSLongArray *a = m_ints_;
  if (IOSLongArray_Get(nil_chk(a), 0) != 1LL) {
    return false;
  }
  for (jint i = 1; i < a->size_; ++i) {
    if (IOSLongArray_Get(a, i) != 0LL) {
      return false;
    }
  }
  return true;
}

- (jboolean)isZero {
  IOSLongArray *a = m_ints_;
  for (jint i = 0; i < ((IOSLongArray *) nil_chk(a))->size_; ++i) {
    if (IOSLongArray_Get(a, i) != 0LL) {
      return false;
    }
  }
  return true;
}

- (jint)getUsedLength {
  return [self getUsedLengthFromWithInt:((IOSLongArray *) nil_chk(m_ints_))->size_];
}

- (jint)getUsedLengthFromWithInt:(jint)from {
  IOSLongArray *a = m_ints_;
  from = JavaLangMath_minWithInt_withInt_(from, ((IOSLongArray *) nil_chk(a))->size_);
  if (from < 1) {
    return 0;
  }
  if (IOSLongArray_Get(a, 0) != 0) {
    while (IOSLongArray_Get(a, --from) == 0) {
    }
    return from + 1;
  }
  do {
    if (IOSLongArray_Get(a, --from) != 0) {
      return from + 1;
    }
  }
  while (from > 0);
  return 0;
}

- (jint)degree {
  jint i = ((IOSLongArray *) nil_chk(m_ints_))->size_;
  jlong w;
  do {
    if (i == 0) {
      return 0;
    }
    w = IOSLongArray_Get(m_ints_, --i);
  }
  while (w == 0);
  return (JreLShift32(i, 6)) + OrgSpongycastleMathEcLongArray_bitLengthWithLong_(w);
}

- (jint)degreeFromWithInt:(jint)limit {
  return OrgSpongycastleMathEcLongArray_degreeFromWithInt_(self, limit);
}

+ (jint)bitLengthWithLong:(jlong)w {
  return OrgSpongycastleMathEcLongArray_bitLengthWithLong_(w);
}

- (IOSLongArray *)resizedIntsWithInt:(jint)newLen {
  return OrgSpongycastleMathEcLongArray_resizedIntsWithInt_(self, newLen);
}

- (JavaMathBigInteger *)toBigInteger {
  jint usedLen = [self getUsedLength];
  if (usedLen == 0) {
    return JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO);
  }
  jlong highestInt = IOSLongArray_Get(nil_chk(m_ints_), usedLen - 1);
  IOSByteArray *temp = [IOSByteArray newArrayWithLength:8];
  jint barrI = 0;
  jboolean trailingZeroBytesDone = false;
  for (jint j = 7; j >= 0; j--) {
    jbyte thisByte = (jbyte) (JreURShift64(highestInt, (8 * j)));
    if (trailingZeroBytesDone || (thisByte != 0)) {
      trailingZeroBytesDone = true;
      *IOSByteArray_GetRef(temp, barrI++) = thisByte;
    }
  }
  jint barrLen = 8 * (usedLen - 1) + barrI;
  IOSByteArray *barr = [IOSByteArray newArrayWithLength:barrLen];
  for (jint j = 0; j < barrI; j++) {
    *IOSByteArray_GetRef(barr, j) = IOSByteArray_Get(temp, j);
  }
  for (jint iarrJ = usedLen - 2; iarrJ >= 0; iarrJ--) {
    jlong mi = IOSLongArray_Get(m_ints_, iarrJ);
    for (jint j = 7; j >= 0; j--) {
      *IOSByteArray_GetRef(barr, barrI++) = (jbyte) (JreURShift64(mi, (8 * j)));
    }
  }
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, barr);
}

+ (jlong)shiftUpWithLongArray:(IOSLongArray *)x
                      withInt:(jint)xOff
                      withInt:(jint)count
                      withInt:(jint)shift {
  return OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withInt_withInt_(x, xOff, count, shift);
}

+ (jlong)shiftUpWithLongArray:(IOSLongArray *)x
                      withInt:(jint)xOff
                withLongArray:(IOSLongArray *)z
                      withInt:(jint)zOff
                      withInt:(jint)count
                      withInt:(jint)shift {
  return OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(x, xOff, z, zOff, count, shift);
}

- (OrgSpongycastleMathEcLongArray *)addOne {
  if (((IOSLongArray *) nil_chk(m_ints_))->size_ == 0) {
    return new_OrgSpongycastleMathEcLongArray_initWithLongArray_([IOSLongArray newArrayWithLongs:(jlong[]){ 1LL } count:1]);
  }
  jint resultLen = JavaLangMath_maxWithInt_withInt_(1, [self getUsedLength]);
  IOSLongArray *ints = OrgSpongycastleMathEcLongArray_resizedIntsWithInt_(self, resultLen);
  *IOSLongArray_GetRef(nil_chk(ints), 0) ^= 1LL;
  return new_OrgSpongycastleMathEcLongArray_initWithLongArray_(ints);
}

- (void)addShiftedByBitsSafeWithOrgSpongycastleMathEcLongArray:(OrgSpongycastleMathEcLongArray *)other
                                                       withInt:(jint)otherDegree
                                                       withInt:(jint)bits {
  OrgSpongycastleMathEcLongArray_addShiftedByBitsSafeWithOrgSpongycastleMathEcLongArray_withInt_withInt_(self, other, otherDegree, bits);
}

+ (jlong)addShiftedUpWithLongArray:(IOSLongArray *)x
                           withInt:(jint)xOff
                     withLongArray:(IOSLongArray *)y
                           withInt:(jint)yOff
                           withInt:(jint)count
                           withInt:(jint)shift {
  return OrgSpongycastleMathEcLongArray_addShiftedUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(x, xOff, y, yOff, count, shift);
}

+ (jlong)addShiftedDownWithLongArray:(IOSLongArray *)x
                             withInt:(jint)xOff
                       withLongArray:(IOSLongArray *)y
                             withInt:(jint)yOff
                             withInt:(jint)count
                             withInt:(jint)shift {
  return OrgSpongycastleMathEcLongArray_addShiftedDownWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(x, xOff, y, yOff, count, shift);
}

- (void)addShiftedByWordsWithOrgSpongycastleMathEcLongArray:(OrgSpongycastleMathEcLongArray *)other
                                                    withInt:(jint)words {
  jint otherUsedLen = [((OrgSpongycastleMathEcLongArray *) nil_chk(other)) getUsedLength];
  if (otherUsedLen == 0) {
    return;
  }
  jint minLen = otherUsedLen + words;
  if (minLen > ((IOSLongArray *) nil_chk(m_ints_))->size_) {
    m_ints_ = OrgSpongycastleMathEcLongArray_resizedIntsWithInt_(self, minLen);
  }
  OrgSpongycastleMathEcLongArray_addWithLongArray_withInt_withLongArray_withInt_withInt_(m_ints_, words, other->m_ints_, 0, otherUsedLen);
}

+ (void)addWithLongArray:(IOSLongArray *)x
                 withInt:(jint)xOff
           withLongArray:(IOSLongArray *)y
                 withInt:(jint)yOff
                 withInt:(jint)count {
  OrgSpongycastleMathEcLongArray_addWithLongArray_withInt_withLongArray_withInt_withInt_(x, xOff, y, yOff, count);
}

+ (void)addWithLongArray:(IOSLongArray *)x
                 withInt:(jint)xOff
           withLongArray:(IOSLongArray *)y
                 withInt:(jint)yOff
           withLongArray:(IOSLongArray *)z
                 withInt:(jint)zOff
                 withInt:(jint)count {
  OrgSpongycastleMathEcLongArray_addWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(x, xOff, y, yOff, z, zOff, count);
}

+ (void)addBothWithLongArray:(IOSLongArray *)x
                     withInt:(jint)xOff
               withLongArray:(IOSLongArray *)y1
                     withInt:(jint)y1Off
               withLongArray:(IOSLongArray *)y2
                     withInt:(jint)y2Off
                     withInt:(jint)count {
  OrgSpongycastleMathEcLongArray_addBothWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(x, xOff, y1, y1Off, y2, y2Off, count);
}

+ (void)distributeWithLongArray:(IOSLongArray *)x
                        withInt:(jint)src
                        withInt:(jint)dst1
                        withInt:(jint)dst2
                        withInt:(jint)count {
  OrgSpongycastleMathEcLongArray_distributeWithLongArray_withInt_withInt_withInt_withInt_(x, src, dst1, dst2, count);
}

- (jint)getLength {
  return ((IOSLongArray *) nil_chk(m_ints_))->size_;
}

+ (void)flipWordWithLongArray:(IOSLongArray *)buf
                      withInt:(jint)off
                      withInt:(jint)bit
                     withLong:(jlong)word {
  OrgSpongycastleMathEcLongArray_flipWordWithLongArray_withInt_withInt_withLong_(buf, off, bit, word);
}

- (jboolean)testBitZero {
  return ((IOSLongArray *) nil_chk(m_ints_))->size_ > 0 && (IOSLongArray_Get(m_ints_, 0) & 1LL) != 0;
}

+ (jboolean)testBitWithLongArray:(IOSLongArray *)buf
                         withInt:(jint)off
                         withInt:(jint)n {
  return OrgSpongycastleMathEcLongArray_testBitWithLongArray_withInt_withInt_(buf, off, n);
}

+ (void)flipBitWithLongArray:(IOSLongArray *)buf
                     withInt:(jint)off
                     withInt:(jint)n {
  OrgSpongycastleMathEcLongArray_flipBitWithLongArray_withInt_withInt_(buf, off, n);
}

+ (void)multiplyWordWithLong:(jlong)a
               withLongArray:(IOSLongArray *)b
                     withInt:(jint)bLen
               withLongArray:(IOSLongArray *)c
                     withInt:(jint)cOff {
  OrgSpongycastleMathEcLongArray_multiplyWordWithLong_withLongArray_withInt_withLongArray_withInt_(a, b, bLen, c, cOff);
}

- (OrgSpongycastleMathEcLongArray *)modMultiplyLDWithOrgSpongycastleMathEcLongArray:(OrgSpongycastleMathEcLongArray *)other
                                                                            withInt:(jint)m
                                                                       withIntArray:(IOSIntArray *)ks {
  jint aDeg = [self degree];
  if (aDeg == 0) {
    return self;
  }
  jint bDeg = [((OrgSpongycastleMathEcLongArray *) nil_chk(other)) degree];
  if (bDeg == 0) {
    return other;
  }
  OrgSpongycastleMathEcLongArray *A = self;
  OrgSpongycastleMathEcLongArray *B = other;
  if (aDeg > bDeg) {
    A = other;
    B = self;
    jint tmp = aDeg;
    aDeg = bDeg;
    bDeg = tmp;
  }
  jint aLen = JreURShift32((aDeg + 63), 6);
  jint bLen = JreURShift32((bDeg + 63), 6);
  jint cLen = JreURShift32((aDeg + bDeg + 62), 6);
  if (aLen == 1) {
    jlong a0 = IOSLongArray_Get(nil_chk(A->m_ints_), 0);
    if (a0 == 1LL) {
      return B;
    }
    IOSLongArray *c0 = [IOSLongArray newArrayWithLength:cLen];
    OrgSpongycastleMathEcLongArray_multiplyWordWithLong_withLongArray_withInt_withLongArray_withInt_(a0, B->m_ints_, bLen, c0, 0);
    return OrgSpongycastleMathEcLongArray_reduceResultWithLongArray_withInt_withInt_withInt_withIntArray_(c0, 0, cLen, m, ks);
  }
  jint bMax = JreURShift32((bDeg + 7 + 63), 6);
  IOSIntArray *ti = [IOSIntArray newArrayWithLength:16];
  IOSLongArray *T0 = [IOSLongArray newArrayWithLength:JreLShift32(bMax, 4)];
  jint tOff = bMax;
  *IOSIntArray_GetRef(ti, 1) = tOff;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(B->m_ints_, 0, T0, tOff, bLen);
  for (jint i = 2; i < 16; ++i) {
    *IOSIntArray_GetRef(ti, i) = (tOff += bMax);
    if ((i & 1) == 0) {
      OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(T0, JreURShift32(tOff, 1), T0, tOff, bMax, 1);
    }
    else {
      OrgSpongycastleMathEcLongArray_addWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(T0, bMax, T0, tOff - bMax, T0, tOff, bMax);
    }
  }
  IOSLongArray *T1 = [IOSLongArray newArrayWithLength:T0->size_];
  OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(T0, 0, T1, 0, T0->size_, 4);
  IOSLongArray *a = A->m_ints_;
  IOSLongArray *c = [IOSLongArray newArrayWithLength:cLen];
  jint MASK = (jint) 0xF;
  for (jint k = 56; k >= 0; k -= 8) {
    for (jint j = 1; j < aLen; j += 2) {
      jint aVal = (jint) (JreURShift64(IOSLongArray_Get(nil_chk(a), j), k));
      jint u = aVal & MASK;
      jint v = (JreURShift32(aVal, 4)) & MASK;
      OrgSpongycastleMathEcLongArray_addBothWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(c, j - 1, T0, IOSIntArray_Get(ti, u), T1, IOSIntArray_Get(ti, v), bMax);
    }
    OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withInt_withInt_(c, 0, cLen, 8);
  }
  for (jint k = 56; k >= 0; k -= 8) {
    for (jint j = 0; j < aLen; j += 2) {
      jint aVal = (jint) (JreURShift64(IOSLongArray_Get(nil_chk(a), j), k));
      jint u = aVal & MASK;
      jint v = (JreURShift32(aVal, 4)) & MASK;
      OrgSpongycastleMathEcLongArray_addBothWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(c, j, T0, IOSIntArray_Get(ti, u), T1, IOSIntArray_Get(ti, v), bMax);
    }
    if (k > 0) {
      OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withInt_withInt_(c, 0, cLen, 8);
    }
  }
  return OrgSpongycastleMathEcLongArray_reduceResultWithLongArray_withInt_withInt_withInt_withIntArray_(c, 0, cLen, m, ks);
}

- (OrgSpongycastleMathEcLongArray *)modMultiplyWithOrgSpongycastleMathEcLongArray:(OrgSpongycastleMathEcLongArray *)other
                                                                          withInt:(jint)m
                                                                     withIntArray:(IOSIntArray *)ks {
  jint aDeg = [self degree];
  if (aDeg == 0) {
    return self;
  }
  jint bDeg = [((OrgSpongycastleMathEcLongArray *) nil_chk(other)) degree];
  if (bDeg == 0) {
    return other;
  }
  OrgSpongycastleMathEcLongArray *A = self;
  OrgSpongycastleMathEcLongArray *B = other;
  if (aDeg > bDeg) {
    A = other;
    B = self;
    jint tmp = aDeg;
    aDeg = bDeg;
    bDeg = tmp;
  }
  jint aLen = JreURShift32((aDeg + 63), 6);
  jint bLen = JreURShift32((bDeg + 63), 6);
  jint cLen = JreURShift32((aDeg + bDeg + 62), 6);
  if (aLen == 1) {
    jlong a0 = IOSLongArray_Get(nil_chk(A->m_ints_), 0);
    if (a0 == 1LL) {
      return B;
    }
    IOSLongArray *c0 = [IOSLongArray newArrayWithLength:cLen];
    OrgSpongycastleMathEcLongArray_multiplyWordWithLong_withLongArray_withInt_withLongArray_withInt_(a0, B->m_ints_, bLen, c0, 0);
    return OrgSpongycastleMathEcLongArray_reduceResultWithLongArray_withInt_withInt_withInt_withIntArray_(c0, 0, cLen, m, ks);
  }
  jint bMax = JreURShift32((bDeg + 7 + 63), 6);
  IOSIntArray *ti = [IOSIntArray newArrayWithLength:16];
  IOSLongArray *T0 = [IOSLongArray newArrayWithLength:JreLShift32(bMax, 4)];
  jint tOff = bMax;
  *IOSIntArray_GetRef(ti, 1) = tOff;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(B->m_ints_, 0, T0, tOff, bLen);
  for (jint i = 2; i < 16; ++i) {
    *IOSIntArray_GetRef(ti, i) = (tOff += bMax);
    if ((i & 1) == 0) {
      OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(T0, JreURShift32(tOff, 1), T0, tOff, bMax, 1);
    }
    else {
      OrgSpongycastleMathEcLongArray_addWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(T0, bMax, T0, tOff - bMax, T0, tOff, bMax);
    }
  }
  IOSLongArray *T1 = [IOSLongArray newArrayWithLength:T0->size_];
  OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(T0, 0, T1, 0, T0->size_, 4);
  IOSLongArray *a = A->m_ints_;
  IOSLongArray *c = [IOSLongArray newArrayWithLength:JreLShift32(cLen, 3)];
  jint MASK = (jint) 0xF;
  for (jint aPos = 0; aPos < aLen; ++aPos) {
    jlong aVal = IOSLongArray_Get(nil_chk(a), aPos);
    jint cOff = aPos;
    for (; ; ) {
      jint u = (jint) aVal & MASK;
      JreURShiftAssignLong(&aVal, 4);
      jint v = (jint) aVal & MASK;
      OrgSpongycastleMathEcLongArray_addBothWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(c, cOff, T0, IOSIntArray_Get(ti, u), T1, IOSIntArray_Get(ti, v), bMax);
      JreURShiftAssignLong(&aVal, 4);
      if (aVal == 0LL) {
        break;
      }
      cOff += cLen;
    }
  }
  {
    jint cOff = c->size_;
    while ((cOff -= cLen) != 0) {
      OrgSpongycastleMathEcLongArray_addShiftedUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(c, cOff - cLen, c, cOff, cLen, 8);
    }
  }
  return OrgSpongycastleMathEcLongArray_reduceResultWithLongArray_withInt_withInt_withInt_withIntArray_(c, 0, cLen, m, ks);
}

- (OrgSpongycastleMathEcLongArray *)modMultiplyAltWithOrgSpongycastleMathEcLongArray:(OrgSpongycastleMathEcLongArray *)other
                                                                             withInt:(jint)m
                                                                        withIntArray:(IOSIntArray *)ks {
  jint aDeg = [self degree];
  if (aDeg == 0) {
    return self;
  }
  jint bDeg = [((OrgSpongycastleMathEcLongArray *) nil_chk(other)) degree];
  if (bDeg == 0) {
    return other;
  }
  OrgSpongycastleMathEcLongArray *A = self;
  OrgSpongycastleMathEcLongArray *B = other;
  if (aDeg > bDeg) {
    A = other;
    B = self;
    jint tmp = aDeg;
    aDeg = bDeg;
    bDeg = tmp;
  }
  jint aLen = JreURShift32((aDeg + 63), 6);
  jint bLen = JreURShift32((bDeg + 63), 6);
  jint cLen = JreURShift32((aDeg + bDeg + 62), 6);
  if (aLen == 1) {
    jlong a0 = IOSLongArray_Get(nil_chk(A->m_ints_), 0);
    if (a0 == 1LL) {
      return B;
    }
    IOSLongArray *c0 = [IOSLongArray newArrayWithLength:cLen];
    OrgSpongycastleMathEcLongArray_multiplyWordWithLong_withLongArray_withInt_withLongArray_withInt_(a0, B->m_ints_, bLen, c0, 0);
    return OrgSpongycastleMathEcLongArray_reduceResultWithLongArray_withInt_withInt_withInt_withIntArray_(c0, 0, cLen, m, ks);
  }
  jint width;
  jint positions;
  jint top;
  jint banks;
  width = 4;
  positions = 16;
  top = 64;
  banks = 8;
  jint shifts = top < 64 ? positions : positions - 1;
  jint bMax = JreURShift32((bDeg + shifts + 63), 6);
  jint bTotal = bMax * banks;
  jint stride = width * banks;
  IOSIntArray *ci = [IOSIntArray newArrayWithLength:JreLShift32(1, width)];
  jint cTotal = aLen;
  {
    *IOSIntArray_GetRef(ci, 0) = cTotal;
    cTotal += bTotal;
    *IOSIntArray_GetRef(ci, 1) = cTotal;
    for (jint i = 2; i < ci->size_; ++i) {
      cTotal += cLen;
      *IOSIntArray_GetRef(ci, i) = cTotal;
    }
    cTotal += cLen;
  }
  ++cTotal;
  IOSLongArray *c = [IOSLongArray newArrayWithLength:cTotal];
  OrgSpongycastleMathEcLongArray_interleaveWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(A->m_ints_, 0, c, 0, aLen, width);
  {
    jint bOff = aLen;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(B->m_ints_, 0, c, bOff, bLen);
    for (jint bank = 1; bank < banks; ++bank) {
      OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(c, aLen, c, bOff += bMax, bMax, bank);
    }
  }
  jint MASK = (JreLShift32(1, width)) - 1;
  jint k = 0;
  for (; ; ) {
    jint aPos = 0;
    do {
      jlong aVal = JreURShift64(IOSLongArray_Get(c, aPos), k);
      jint bank = 0;
      jint bOff = aLen;
      for (; ; ) {
        jint index = (jint) (aVal) & MASK;
        if (index != 0) {
          OrgSpongycastleMathEcLongArray_addWithLongArray_withInt_withLongArray_withInt_withInt_(c, aPos + IOSIntArray_Get(ci, index), c, bOff, bMax);
        }
        if (++bank == banks) {
          break;
        }
        bOff += bMax;
        JreURShiftAssignLong(&aVal, width);
      }
    }
    while (++aPos < aLen);
    if ((k += stride) >= top) {
      if (k >= 64) {
        break;
      }
      k = 64 - width;
      MASK &= JreLShift32(MASK, (top - k));
    }
    OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withInt_withInt_(c, aLen, bTotal, banks);
  }
  jint ciPos = ci->size_;
  while (--ciPos > 1) {
    if ((ciPos & 1LL) == 0LL) {
      OrgSpongycastleMathEcLongArray_addShiftedUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(c, IOSIntArray_Get(ci, JreURShift32(ciPos, 1)), c, IOSIntArray_Get(ci, ciPos), cLen, positions);
    }
    else {
      OrgSpongycastleMathEcLongArray_distributeWithLongArray_withInt_withInt_withInt_withInt_(c, IOSIntArray_Get(ci, ciPos), IOSIntArray_Get(ci, ciPos - 1), IOSIntArray_Get(ci, 1), cLen);
    }
  }
  return OrgSpongycastleMathEcLongArray_reduceResultWithLongArray_withInt_withInt_withInt_withIntArray_(c, IOSIntArray_Get(ci, 1), cLen, m, ks);
}

- (OrgSpongycastleMathEcLongArray *)modReduceWithInt:(jint)m
                                        withIntArray:(IOSIntArray *)ks {
  IOSLongArray *buf = OrgSpongycastleUtilArrays_cloneWithLongArray_(m_ints_);
  jint rLen = OrgSpongycastleMathEcLongArray_reduceInPlaceWithLongArray_withInt_withInt_withInt_withIntArray_(buf, 0, ((IOSLongArray *) nil_chk(buf))->size_, m, ks);
  return new_OrgSpongycastleMathEcLongArray_initWithLongArray_withInt_withInt_(buf, 0, rLen);
}

- (OrgSpongycastleMathEcLongArray *)multiplyWithOrgSpongycastleMathEcLongArray:(OrgSpongycastleMathEcLongArray *)other
                                                                       withInt:(jint)m
                                                                  withIntArray:(IOSIntArray *)ks {
  jint aDeg = [self degree];
  if (aDeg == 0) {
    return self;
  }
  jint bDeg = [((OrgSpongycastleMathEcLongArray *) nil_chk(other)) degree];
  if (bDeg == 0) {
    return other;
  }
  OrgSpongycastleMathEcLongArray *A = self;
  OrgSpongycastleMathEcLongArray *B = other;
  if (aDeg > bDeg) {
    A = other;
    B = self;
    jint tmp = aDeg;
    aDeg = bDeg;
    bDeg = tmp;
  }
  jint aLen = JreURShift32((aDeg + 63), 6);
  jint bLen = JreURShift32((bDeg + 63), 6);
  jint cLen = JreURShift32((aDeg + bDeg + 62), 6);
  if (aLen == 1) {
    jlong a0 = IOSLongArray_Get(nil_chk(A->m_ints_), 0);
    if (a0 == 1LL) {
      return B;
    }
    IOSLongArray *c0 = [IOSLongArray newArrayWithLength:cLen];
    OrgSpongycastleMathEcLongArray_multiplyWordWithLong_withLongArray_withInt_withLongArray_withInt_(a0, B->m_ints_, bLen, c0, 0);
    return new_OrgSpongycastleMathEcLongArray_initWithLongArray_withInt_withInt_(c0, 0, cLen);
  }
  jint bMax = JreURShift32((bDeg + 7 + 63), 6);
  IOSIntArray *ti = [IOSIntArray newArrayWithLength:16];
  IOSLongArray *T0 = [IOSLongArray newArrayWithLength:JreLShift32(bMax, 4)];
  jint tOff = bMax;
  *IOSIntArray_GetRef(ti, 1) = tOff;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(B->m_ints_, 0, T0, tOff, bLen);
  for (jint i = 2; i < 16; ++i) {
    *IOSIntArray_GetRef(ti, i) = (tOff += bMax);
    if ((i & 1) == 0) {
      OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(T0, JreURShift32(tOff, 1), T0, tOff, bMax, 1);
    }
    else {
      OrgSpongycastleMathEcLongArray_addWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(T0, bMax, T0, tOff - bMax, T0, tOff, bMax);
    }
  }
  IOSLongArray *T1 = [IOSLongArray newArrayWithLength:T0->size_];
  OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(T0, 0, T1, 0, T0->size_, 4);
  IOSLongArray *a = A->m_ints_;
  IOSLongArray *c = [IOSLongArray newArrayWithLength:JreLShift32(cLen, 3)];
  jint MASK = (jint) 0xF;
  for (jint aPos = 0; aPos < aLen; ++aPos) {
    jlong aVal = IOSLongArray_Get(nil_chk(a), aPos);
    jint cOff = aPos;
    for (; ; ) {
      jint u = (jint) aVal & MASK;
      JreURShiftAssignLong(&aVal, 4);
      jint v = (jint) aVal & MASK;
      OrgSpongycastleMathEcLongArray_addBothWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(c, cOff, T0, IOSIntArray_Get(ti, u), T1, IOSIntArray_Get(ti, v), bMax);
      JreURShiftAssignLong(&aVal, 4);
      if (aVal == 0LL) {
        break;
      }
      cOff += cLen;
    }
  }
  {
    jint cOff = c->size_;
    while ((cOff -= cLen) != 0) {
      OrgSpongycastleMathEcLongArray_addShiftedUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(c, cOff - cLen, c, cOff, cLen, 8);
    }
  }
  return new_OrgSpongycastleMathEcLongArray_initWithLongArray_withInt_withInt_(c, 0, cLen);
}

- (void)reduceWithInt:(jint)m
         withIntArray:(IOSIntArray *)ks {
  IOSLongArray *buf = m_ints_;
  jint rLen = OrgSpongycastleMathEcLongArray_reduceInPlaceWithLongArray_withInt_withInt_withInt_withIntArray_(buf, 0, ((IOSLongArray *) nil_chk(buf))->size_, m, ks);
  if (rLen < buf->size_) {
    m_ints_ = [IOSLongArray newArrayWithLength:rLen];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, 0, m_ints_, 0, rLen);
  }
}

+ (OrgSpongycastleMathEcLongArray *)reduceResultWithLongArray:(IOSLongArray *)buf
                                                      withInt:(jint)off
                                                      withInt:(jint)len
                                                      withInt:(jint)m
                                                 withIntArray:(IOSIntArray *)ks {
  return OrgSpongycastleMathEcLongArray_reduceResultWithLongArray_withInt_withInt_withInt_withIntArray_(buf, off, len, m, ks);
}

+ (jint)reduceInPlaceWithLongArray:(IOSLongArray *)buf
                           withInt:(jint)off
                           withInt:(jint)len
                           withInt:(jint)m
                      withIntArray:(IOSIntArray *)ks {
  return OrgSpongycastleMathEcLongArray_reduceInPlaceWithLongArray_withInt_withInt_withInt_withIntArray_(buf, off, len, m, ks);
}

+ (void)reduceBitWiseWithLongArray:(IOSLongArray *)buf
                           withInt:(jint)off
                           withInt:(jint)bitlength
                           withInt:(jint)m
                      withIntArray:(IOSIntArray *)ks {
  OrgSpongycastleMathEcLongArray_reduceBitWiseWithLongArray_withInt_withInt_withInt_withIntArray_(buf, off, bitlength, m, ks);
}

+ (void)reduceBitWithLongArray:(IOSLongArray *)buf
                       withInt:(jint)off
                       withInt:(jint)bit
                       withInt:(jint)m
                  withIntArray:(IOSIntArray *)ks {
  OrgSpongycastleMathEcLongArray_reduceBitWithLongArray_withInt_withInt_withInt_withIntArray_(buf, off, bit, m, ks);
}

+ (void)reduceWordWiseWithLongArray:(IOSLongArray *)buf
                            withInt:(jint)off
                            withInt:(jint)len
                            withInt:(jint)toBit
                            withInt:(jint)m
                       withIntArray:(IOSIntArray *)ks {
  OrgSpongycastleMathEcLongArray_reduceWordWiseWithLongArray_withInt_withInt_withInt_withInt_withIntArray_(buf, off, len, toBit, m, ks);
}

+ (void)reduceWordWithLongArray:(IOSLongArray *)buf
                        withInt:(jint)off
                        withInt:(jint)bit
                       withLong:(jlong)word
                        withInt:(jint)m
                   withIntArray:(IOSIntArray *)ks {
  OrgSpongycastleMathEcLongArray_reduceWordWithLongArray_withInt_withInt_withLong_withInt_withIntArray_(buf, off, bit, word, m, ks);
}

+ (void)reduceVectorWiseWithLongArray:(IOSLongArray *)buf
                              withInt:(jint)off
                              withInt:(jint)len
                              withInt:(jint)words
                              withInt:(jint)m
                         withIntArray:(IOSIntArray *)ks {
  OrgSpongycastleMathEcLongArray_reduceVectorWiseWithLongArray_withInt_withInt_withInt_withInt_withIntArray_(buf, off, len, words, m, ks);
}

+ (void)flipVectorWithLongArray:(IOSLongArray *)x
                        withInt:(jint)xOff
                  withLongArray:(IOSLongArray *)y
                        withInt:(jint)yOff
                        withInt:(jint)yLen
                        withInt:(jint)bits {
  OrgSpongycastleMathEcLongArray_flipVectorWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(x, xOff, y, yOff, yLen, bits);
}

- (OrgSpongycastleMathEcLongArray *)modSquareWithInt:(jint)m
                                        withIntArray:(IOSIntArray *)ks {
  jint len = [self getUsedLength];
  if (len == 0) {
    return self;
  }
  jint _2len = JreLShift32(len, 1);
  IOSLongArray *r = [IOSLongArray newArrayWithLength:_2len];
  jint pos = 0;
  while (pos < _2len) {
    jlong mi = IOSLongArray_Get(nil_chk(m_ints_), JreURShift32(pos, 1));
    *IOSLongArray_GetRef(r, pos++) = OrgSpongycastleMathEcLongArray_interleave2_32to64WithInt_((jint) mi);
    *IOSLongArray_GetRef(r, pos++) = OrgSpongycastleMathEcLongArray_interleave2_32to64WithInt_((jint) (JreURShift64(mi, 32)));
  }
  return new_OrgSpongycastleMathEcLongArray_initWithLongArray_withInt_withInt_(r, 0, OrgSpongycastleMathEcLongArray_reduceInPlaceWithLongArray_withInt_withInt_withInt_withIntArray_(r, 0, r->size_, m, ks));
}

- (OrgSpongycastleMathEcLongArray *)modSquareNWithInt:(jint)n
                                              withInt:(jint)m
                                         withIntArray:(IOSIntArray *)ks {
  jint len = [self getUsedLength];
  if (len == 0) {
    return self;
  }
  jint mLen = JreURShift32((m + 63), 6);
  IOSLongArray *r = [IOSLongArray newArrayWithLength:JreLShift32(mLen, 1)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(m_ints_, 0, r, 0, len);
  while (--n >= 0) {
    OrgSpongycastleMathEcLongArray_squareInPlaceWithLongArray_withInt_withInt_withIntArray_(r, len, m, ks);
    len = OrgSpongycastleMathEcLongArray_reduceInPlaceWithLongArray_withInt_withInt_withInt_withIntArray_(r, 0, r->size_, m, ks);
  }
  return new_OrgSpongycastleMathEcLongArray_initWithLongArray_withInt_withInt_(r, 0, len);
}

- (OrgSpongycastleMathEcLongArray *)squareWithInt:(jint)m
                                     withIntArray:(IOSIntArray *)ks {
  jint len = [self getUsedLength];
  if (len == 0) {
    return self;
  }
  jint _2len = JreLShift32(len, 1);
  IOSLongArray *r = [IOSLongArray newArrayWithLength:_2len];
  jint pos = 0;
  while (pos < _2len) {
    jlong mi = IOSLongArray_Get(nil_chk(m_ints_), JreURShift32(pos, 1));
    *IOSLongArray_GetRef(r, pos++) = OrgSpongycastleMathEcLongArray_interleave2_32to64WithInt_((jint) mi);
    *IOSLongArray_GetRef(r, pos++) = OrgSpongycastleMathEcLongArray_interleave2_32to64WithInt_((jint) (JreURShift64(mi, 32)));
  }
  return new_OrgSpongycastleMathEcLongArray_initWithLongArray_withInt_withInt_(r, 0, r->size_);
}

+ (void)squareInPlaceWithLongArray:(IOSLongArray *)x
                           withInt:(jint)xLen
                           withInt:(jint)m
                      withIntArray:(IOSIntArray *)ks {
  OrgSpongycastleMathEcLongArray_squareInPlaceWithLongArray_withInt_withInt_withIntArray_(x, xLen, m, ks);
}

+ (void)interleaveWithLongArray:(IOSLongArray *)x
                        withInt:(jint)xOff
                  withLongArray:(IOSLongArray *)z
                        withInt:(jint)zOff
                        withInt:(jint)count
                        withInt:(jint)width {
  OrgSpongycastleMathEcLongArray_interleaveWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(x, xOff, z, zOff, count, width);
}

+ (void)interleave3WithLongArray:(IOSLongArray *)x
                         withInt:(jint)xOff
                   withLongArray:(IOSLongArray *)z
                         withInt:(jint)zOff
                         withInt:(jint)count {
  OrgSpongycastleMathEcLongArray_interleave3WithLongArray_withInt_withLongArray_withInt_withInt_(x, xOff, z, zOff, count);
}

+ (jlong)interleave3WithLong:(jlong)x {
  return OrgSpongycastleMathEcLongArray_interleave3WithLong_(x);
}

+ (jlong)interleave3_21to63WithInt:(jint)x {
  return OrgSpongycastleMathEcLongArray_interleave3_21to63WithInt_(x);
}

+ (void)interleave5WithLongArray:(IOSLongArray *)x
                         withInt:(jint)xOff
                   withLongArray:(IOSLongArray *)z
                         withInt:(jint)zOff
                         withInt:(jint)count {
  OrgSpongycastleMathEcLongArray_interleave5WithLongArray_withInt_withLongArray_withInt_withInt_(x, xOff, z, zOff, count);
}

+ (jlong)interleave5WithLong:(jlong)x {
  return OrgSpongycastleMathEcLongArray_interleave5WithLong_(x);
}

+ (jlong)interleave3_13to65WithInt:(jint)x {
  return OrgSpongycastleMathEcLongArray_interleave3_13to65WithInt_(x);
}

+ (void)interleave7WithLongArray:(IOSLongArray *)x
                         withInt:(jint)xOff
                   withLongArray:(IOSLongArray *)z
                         withInt:(jint)zOff
                         withInt:(jint)count {
  OrgSpongycastleMathEcLongArray_interleave7WithLongArray_withInt_withLongArray_withInt_withInt_(x, xOff, z, zOff, count);
}

+ (jlong)interleave7WithLong:(jlong)x {
  return OrgSpongycastleMathEcLongArray_interleave7WithLong_(x);
}

+ (void)interleave2_nWithLongArray:(IOSLongArray *)x
                           withInt:(jint)xOff
                     withLongArray:(IOSLongArray *)z
                           withInt:(jint)zOff
                           withInt:(jint)count
                           withInt:(jint)rounds {
  OrgSpongycastleMathEcLongArray_interleave2_nWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(x, xOff, z, zOff, count, rounds);
}

+ (jlong)interleave2_nWithLong:(jlong)x
                       withInt:(jint)rounds {
  return OrgSpongycastleMathEcLongArray_interleave2_nWithLong_withInt_(x, rounds);
}

+ (jlong)interleave4_16to64WithInt:(jint)x {
  return OrgSpongycastleMathEcLongArray_interleave4_16to64WithInt_(x);
}

+ (jlong)interleave2_32to64WithInt:(jint)x {
  return OrgSpongycastleMathEcLongArray_interleave2_32to64WithInt_(x);
}

- (OrgSpongycastleMathEcLongArray *)modInverseWithInt:(jint)m
                                         withIntArray:(IOSIntArray *)ks {
  jint uzDegree = [self degree];
  if (uzDegree == 0) {
    @throw new_JavaLangIllegalStateException_init();
  }
  if (uzDegree == 1) {
    return self;
  }
  OrgSpongycastleMathEcLongArray *uz = (OrgSpongycastleMathEcLongArray *) cast_chk([self java_clone], [OrgSpongycastleMathEcLongArray class]);
  jint t = JreURShift32((m + 63), 6);
  OrgSpongycastleMathEcLongArray *vz = new_OrgSpongycastleMathEcLongArray_initWithInt_(t);
  OrgSpongycastleMathEcLongArray_reduceBitWithLongArray_withInt_withInt_withInt_withIntArray_(vz->m_ints_, 0, m, m, ks);
  OrgSpongycastleMathEcLongArray *g1z = new_OrgSpongycastleMathEcLongArray_initWithInt_(t);
  *IOSLongArray_GetRef(nil_chk(g1z->m_ints_), 0) = 1LL;
  OrgSpongycastleMathEcLongArray *g2z = new_OrgSpongycastleMathEcLongArray_initWithInt_(t);
  IOSIntArray *uvDeg = [IOSIntArray newArrayWithInts:(jint[]){ uzDegree, m + 1 } count:2];
  IOSObjectArray *uv = [IOSObjectArray newArrayWithObjects:(id[]){ uz, vz } count:2 type:OrgSpongycastleMathEcLongArray_class_()];
  IOSIntArray *ggDeg = [IOSIntArray newArrayWithInts:(jint[]){ 1, 0 } count:2];
  IOSObjectArray *gg = [IOSObjectArray newArrayWithObjects:(id[]){ g1z, g2z } count:2 type:OrgSpongycastleMathEcLongArray_class_()];
  jint b = 1;
  jint duv1 = IOSIntArray_Get(uvDeg, b);
  jint dgg1 = IOSIntArray_Get(ggDeg, b);
  jint j = duv1 - IOSIntArray_Get(uvDeg, 1 - b);
  for (; ; ) {
    if (j < 0) {
      j = -j;
      *IOSIntArray_GetRef(uvDeg, b) = duv1;
      *IOSIntArray_GetRef(ggDeg, b) = dgg1;
      b = 1 - b;
      duv1 = IOSIntArray_Get(uvDeg, b);
      dgg1 = IOSIntArray_Get(ggDeg, b);
    }
    OrgSpongycastleMathEcLongArray_addShiftedByBitsSafeWithOrgSpongycastleMathEcLongArray_withInt_withInt_(nil_chk(IOSObjectArray_Get(uv, b)), IOSObjectArray_Get(uv, 1 - b), IOSIntArray_Get(uvDeg, 1 - b), j);
    jint duv2 = OrgSpongycastleMathEcLongArray_degreeFromWithInt_(nil_chk(IOSObjectArray_Get(uv, b)), duv1);
    if (duv2 == 0) {
      return IOSObjectArray_Get(gg, 1 - b);
    }
    {
      jint dgg2 = IOSIntArray_Get(ggDeg, 1 - b);
      OrgSpongycastleMathEcLongArray_addShiftedByBitsSafeWithOrgSpongycastleMathEcLongArray_withInt_withInt_(nil_chk(IOSObjectArray_Get(gg, b)), IOSObjectArray_Get(gg, 1 - b), dgg2, j);
      dgg2 += j;
      if (dgg2 > dgg1) {
        dgg1 = dgg2;
      }
      else if (dgg2 == dgg1) {
        dgg1 = OrgSpongycastleMathEcLongArray_degreeFromWithInt_(nil_chk(IOSObjectArray_Get(gg, b)), dgg1);
      }
    }
    j += (duv2 - duv1);
    duv1 = duv2;
  }
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[OrgSpongycastleMathEcLongArray class]])) {
    return false;
  }
  OrgSpongycastleMathEcLongArray *other = (OrgSpongycastleMathEcLongArray *) cast_chk(o, [OrgSpongycastleMathEcLongArray class]);
  jint usedLen = [self getUsedLength];
  if ([((OrgSpongycastleMathEcLongArray *) nil_chk(other)) getUsedLength] != usedLen) {
    return false;
  }
  for (jint i = 0; i < usedLen; i++) {
    if (IOSLongArray_Get(nil_chk(m_ints_), i) != IOSLongArray_Get(other->m_ints_, i)) {
      return false;
    }
  }
  return true;
}

- (NSUInteger)hash {
  jint usedLen = [self getUsedLength];
  jint hash_ = 1;
  for (jint i = 0; i < usedLen; i++) {
    jlong mi = IOSLongArray_Get(nil_chk(m_ints_), i);
    hash_ *= 31;
    hash_ ^= (jint) mi;
    hash_ *= 31;
    hash_ ^= (jint) (JreURShift64(mi, 32));
  }
  return hash_;
}

- (id)java_clone {
  return new_OrgSpongycastleMathEcLongArray_initWithLongArray_(OrgSpongycastleUtilArrays_cloneWithLongArray_(m_ints_));
}

- (NSString *)description {
  jint i = [self getUsedLength];
  if (i == 0) {
    return @"0";
  }
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_initWithNSString_(JavaLangLong_toBinaryStringWithLong_(IOSLongArray_Get(nil_chk(m_ints_), --i)));
  while (--i >= 0) {
    NSString *s = JavaLangLong_toBinaryStringWithLong_(IOSLongArray_Get(nil_chk(m_ints_), i));
    jint len = [((NSString *) nil_chk(s)) java_length];
    if (len < 64) {
      (void) [sb appendWithNSString:[((NSString *) nil_chk(OrgSpongycastleMathEcLongArray_ZEROES)) java_substring:len]];
    }
    (void) [sb appendWithNSString:s];
  }
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 5, 0, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "[J", 0x2, 8, 0, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 9, 11, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcLongArray;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 14, 11, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 15, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 18, 20, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 21, 20, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 22, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 26, 2, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 27, 2, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 28, 29, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcLongArray;", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcLongArray;", 0x1, 32, 31, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcLongArray;", 0x1, 33, 31, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcLongArray;", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcLongArray;", 0x1, 36, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 35, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcLongArray;", 0xa, 38, 39, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 40, 39, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 41, 39, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 42, 39, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 47, 44, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 48, 11, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcLongArray;", 0x1, 49, 35, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcLongArray;", 0x1, 50, 51, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcLongArray;", 0x1, 52, 35, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 53, 54, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 55, 11, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 56, 19, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 56, 7, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 57, 0, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 58, 19, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 58, 7, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 59, 0, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 60, 19, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 60, 7, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 61, 11, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 61, 62, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 63, 0, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 64, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcLongArray;", 0x1, 65, 35, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 66, 67, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 68, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 69, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 70, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithLongArray:);
  methods[2].selector = @selector(initWithLongArray:withInt:withInt:);
  methods[3].selector = @selector(initWithJavaMathBigInteger:);
  methods[4].selector = @selector(isOne);
  methods[5].selector = @selector(isZero);
  methods[6].selector = @selector(getUsedLength);
  methods[7].selector = @selector(getUsedLengthFromWithInt:);
  methods[8].selector = @selector(degree);
  methods[9].selector = @selector(degreeFromWithInt:);
  methods[10].selector = @selector(bitLengthWithLong:);
  methods[11].selector = @selector(resizedIntsWithInt:);
  methods[12].selector = @selector(toBigInteger);
  methods[13].selector = @selector(shiftUpWithLongArray:withInt:withInt:withInt:);
  methods[14].selector = @selector(shiftUpWithLongArray:withInt:withLongArray:withInt:withInt:withInt:);
  methods[15].selector = @selector(addOne);
  methods[16].selector = @selector(addShiftedByBitsSafeWithOrgSpongycastleMathEcLongArray:withInt:withInt:);
  methods[17].selector = @selector(addShiftedUpWithLongArray:withInt:withLongArray:withInt:withInt:withInt:);
  methods[18].selector = @selector(addShiftedDownWithLongArray:withInt:withLongArray:withInt:withInt:withInt:);
  methods[19].selector = @selector(addShiftedByWordsWithOrgSpongycastleMathEcLongArray:withInt:);
  methods[20].selector = @selector(addWithLongArray:withInt:withLongArray:withInt:withInt:);
  methods[21].selector = @selector(addWithLongArray:withInt:withLongArray:withInt:withLongArray:withInt:withInt:);
  methods[22].selector = @selector(addBothWithLongArray:withInt:withLongArray:withInt:withLongArray:withInt:withInt:);
  methods[23].selector = @selector(distributeWithLongArray:withInt:withInt:withInt:withInt:);
  methods[24].selector = @selector(getLength);
  methods[25].selector = @selector(flipWordWithLongArray:withInt:withInt:withLong:);
  methods[26].selector = @selector(testBitZero);
  methods[27].selector = @selector(testBitWithLongArray:withInt:withInt:);
  methods[28].selector = @selector(flipBitWithLongArray:withInt:withInt:);
  methods[29].selector = @selector(multiplyWordWithLong:withLongArray:withInt:withLongArray:withInt:);
  methods[30].selector = @selector(modMultiplyLDWithOrgSpongycastleMathEcLongArray:withInt:withIntArray:);
  methods[31].selector = @selector(modMultiplyWithOrgSpongycastleMathEcLongArray:withInt:withIntArray:);
  methods[32].selector = @selector(modMultiplyAltWithOrgSpongycastleMathEcLongArray:withInt:withIntArray:);
  methods[33].selector = @selector(modReduceWithInt:withIntArray:);
  methods[34].selector = @selector(multiplyWithOrgSpongycastleMathEcLongArray:withInt:withIntArray:);
  methods[35].selector = @selector(reduceWithInt:withIntArray:);
  methods[36].selector = @selector(reduceResultWithLongArray:withInt:withInt:withInt:withIntArray:);
  methods[37].selector = @selector(reduceInPlaceWithLongArray:withInt:withInt:withInt:withIntArray:);
  methods[38].selector = @selector(reduceBitWiseWithLongArray:withInt:withInt:withInt:withIntArray:);
  methods[39].selector = @selector(reduceBitWithLongArray:withInt:withInt:withInt:withIntArray:);
  methods[40].selector = @selector(reduceWordWiseWithLongArray:withInt:withInt:withInt:withInt:withIntArray:);
  methods[41].selector = @selector(reduceWordWithLongArray:withInt:withInt:withLong:withInt:withIntArray:);
  methods[42].selector = @selector(reduceVectorWiseWithLongArray:withInt:withInt:withInt:withInt:withIntArray:);
  methods[43].selector = @selector(flipVectorWithLongArray:withInt:withLongArray:withInt:withInt:withInt:);
  methods[44].selector = @selector(modSquareWithInt:withIntArray:);
  methods[45].selector = @selector(modSquareNWithInt:withInt:withIntArray:);
  methods[46].selector = @selector(squareWithInt:withIntArray:);
  methods[47].selector = @selector(squareInPlaceWithLongArray:withInt:withInt:withIntArray:);
  methods[48].selector = @selector(interleaveWithLongArray:withInt:withLongArray:withInt:withInt:withInt:);
  methods[49].selector = @selector(interleave3WithLongArray:withInt:withLongArray:withInt:withInt:);
  methods[50].selector = @selector(interleave3WithLong:);
  methods[51].selector = @selector(interleave3_21to63WithInt:);
  methods[52].selector = @selector(interleave5WithLongArray:withInt:withLongArray:withInt:withInt:);
  methods[53].selector = @selector(interleave5WithLong:);
  methods[54].selector = @selector(interleave3_13to65WithInt:);
  methods[55].selector = @selector(interleave7WithLongArray:withInt:withLongArray:withInt:withInt:);
  methods[56].selector = @selector(interleave7WithLong:);
  methods[57].selector = @selector(interleave2_nWithLongArray:withInt:withLongArray:withInt:withInt:withInt:);
  methods[58].selector = @selector(interleave2_nWithLong:withInt:);
  methods[59].selector = @selector(interleave4_16to64WithInt:);
  methods[60].selector = @selector(interleave2_32to64WithInt:);
  methods[61].selector = @selector(modInverseWithInt:withIntArray:);
  methods[62].selector = @selector(isEqual:);
  methods[63].selector = @selector(hash);
  methods[64].selector = @selector(java_clone);
  methods[65].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INTERLEAVE2_TABLE", "[S", .constantValue.asLong = 0, 0x1a, -1, 71, -1, -1 },
    { "INTERLEAVE3_TABLE", "[I", .constantValue.asLong = 0, 0x1a, -1, 72, -1, -1 },
    { "INTERLEAVE4_TABLE", "[I", .constantValue.asLong = 0, 0x1a, -1, 73, -1, -1 },
    { "INTERLEAVE5_TABLE", "[I", .constantValue.asLong = 0, 0x1a, -1, 74, -1, -1 },
    { "INTERLEAVE7_TABLE", "[J", .constantValue.asLong = 0, 0x1a, -1, 75, -1, -1 },
    { "ZEROES", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 76, -1, -1 },
    { "bitLengths", "[B", .constantValue.asLong = 0, 0x18, -1, 77, -1, -1 },
    { "m_ints_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "[J", "[JII", "LJavaMathBigInteger;", "getUsedLengthFrom", "degreeFrom", "bitLength", "J", "resizedInts", "shiftUp", "[JIII", "[JI[JIII", "addShiftedByBitsSafe", "LOrgSpongycastleMathEcLongArray;II", "addShiftedUp", "addShiftedDown", "addShiftedByWords", "LOrgSpongycastleMathEcLongArray;I", "add", "[JI[JII", "[JI[JI[JII", "addBoth", "distribute", "[JIIII", "flipWord", "[JIIJ", "testBit", "flipBit", "multiplyWord", "J[JI[JI", "modMultiplyLD", "LOrgSpongycastleMathEcLongArray;I[I", "modMultiply", "modMultiplyAlt", "modReduce", "I[I", "multiply", "reduce", "reduceResult", "[JIII[I", "reduceInPlace", "reduceBitWise", "reduceBit", "reduceWordWise", "[JIIII[I", "reduceWord", "[JIIJI[I", "reduceVectorWise", "flipVector", "modSquare", "modSquareN", "II[I", "square", "squareInPlace", "[JII[I", "interleave", "interleave3", "interleave3_21to63", "interleave5", "interleave3_13to65", "interleave7", "interleave2_n", "JI", "interleave4_16to64", "interleave2_32to64", "modInverse", "equals", "LNSObject;", "hashCode", "clone", "toString", &OrgSpongycastleMathEcLongArray_INTERLEAVE2_TABLE, &OrgSpongycastleMathEcLongArray_INTERLEAVE3_TABLE, &OrgSpongycastleMathEcLongArray_INTERLEAVE4_TABLE, &OrgSpongycastleMathEcLongArray_INTERLEAVE5_TABLE, &OrgSpongycastleMathEcLongArray_INTERLEAVE7_TABLE, &OrgSpongycastleMathEcLongArray_ZEROES, &OrgSpongycastleMathEcLongArray_bitLengths };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcLongArray = { "LongArray", "org.spongycastle.math.ec", ptrTable, methods, fields, 7, 0x0, 66, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcLongArray;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

+ (void)initialize {
  if (self == [OrgSpongycastleMathEcLongArray class]) {
    OrgSpongycastleMathEcLongArray_INTERLEAVE2_TABLE = [IOSShortArray newArrayWithShorts:(jshort[]){ (jint) 0x0000, (jint) 0x0001, (jint) 0x0004, (jint) 0x0005, (jint) 0x0010, (jint) 0x0011, (jint) 0x0014, (jint) 0x0015, (jint) 0x0040, (jint) 0x0041, (jint) 0x0044, (jint) 0x0045, (jint) 0x0050, (jint) 0x0051, (jint) 0x0054, (jint) 0x0055, (jint) 0x0100, (jint) 0x0101, (jint) 0x0104, (jint) 0x0105, (jint) 0x0110, (jint) 0x0111, (jint) 0x0114, (jint) 0x0115, (jint) 0x0140, (jint) 0x0141, (jint) 0x0144, (jint) 0x0145, (jint) 0x0150, (jint) 0x0151, (jint) 0x0154, (jint) 0x0155, (jint) 0x0400, (jint) 0x0401, (jint) 0x0404, (jint) 0x0405, (jint) 0x0410, (jint) 0x0411, (jint) 0x0414, (jint) 0x0415, (jint) 0x0440, (jint) 0x0441, (jint) 0x0444, (jint) 0x0445, (jint) 0x0450, (jint) 0x0451, (jint) 0x0454, (jint) 0x0455, (jint) 0x0500, (jint) 0x0501, (jint) 0x0504, (jint) 0x0505, (jint) 0x0510, (jint) 0x0511, (jint) 0x0514, (jint) 0x0515, (jint) 0x0540, (jint) 0x0541, (jint) 0x0544, (jint) 0x0545, (jint) 0x0550, (jint) 0x0551, (jint) 0x0554, (jint) 0x0555, (jint) 0x1000, (jint) 0x1001, (jint) 0x1004, (jint) 0x1005, (jint) 0x1010, (jint) 0x1011, (jint) 0x1014, (jint) 0x1015, (jint) 0x1040, (jint) 0x1041, (jint) 0x1044, (jint) 0x1045, (jint) 0x1050, (jint) 0x1051, (jint) 0x1054, (jint) 0x1055, (jint) 0x1100, (jint) 0x1101, (jint) 0x1104, (jint) 0x1105, (jint) 0x1110, (jint) 0x1111, (jint) 0x1114, (jint) 0x1115, (jint) 0x1140, (jint) 0x1141, (jint) 0x1144, (jint) 0x1145, (jint) 0x1150, (jint) 0x1151, (jint) 0x1154, (jint) 0x1155, (jint) 0x1400, (jint) 0x1401, (jint) 0x1404, (jint) 0x1405, (jint) 0x1410, (jint) 0x1411, (jint) 0x1414, (jint) 0x1415, (jint) 0x1440, (jint) 0x1441, (jint) 0x1444, (jint) 0x1445, (jint) 0x1450, (jint) 0x1451, (jint) 0x1454, (jint) 0x1455, (jint) 0x1500, (jint) 0x1501, (jint) 0x1504, (jint) 0x1505, (jint) 0x1510, (jint) 0x1511, (jint) 0x1514, (jint) 0x1515, (jint) 0x1540, (jint) 0x1541, (jint) 0x1544, (jint) 0x1545, (jint) 0x1550, (jint) 0x1551, (jint) 0x1554, (jint) 0x1555, (jint) 0x4000, (jint) 0x4001, (jint) 0x4004, (jint) 0x4005, (jint) 0x4010, (jint) 0x4011, (jint) 0x4014, (jint) 0x4015, (jint) 0x4040, (jint) 0x4041, (jint) 0x4044, (jint) 0x4045, (jint) 0x4050, (jint) 0x4051, (jint) 0x4054, (jint) 0x4055, (jint) 0x4100, (jint) 0x4101, (jint) 0x4104, (jint) 0x4105, (jint) 0x4110, (jint) 0x4111, (jint) 0x4114, (jint) 0x4115, (jint) 0x4140, (jint) 0x4141, (jint) 0x4144, (jint) 0x4145, (jint) 0x4150, (jint) 0x4151, (jint) 0x4154, (jint) 0x4155, (jint) 0x4400, (jint) 0x4401, (jint) 0x4404, (jint) 0x4405, (jint) 0x4410, (jint) 0x4411, (jint) 0x4414, (jint) 0x4415, (jint) 0x4440, (jint) 0x4441, (jint) 0x4444, (jint) 0x4445, (jint) 0x4450, (jint) 0x4451, (jint) 0x4454, (jint) 0x4455, (jint) 0x4500, (jint) 0x4501, (jint) 0x4504, (jint) 0x4505, (jint) 0x4510, (jint) 0x4511, (jint) 0x4514, (jint) 0x4515, (jint) 0x4540, (jint) 0x4541, (jint) 0x4544, (jint) 0x4545, (jint) 0x4550, (jint) 0x4551, (jint) 0x4554, (jint) 0x4555, (jint) 0x5000, (jint) 0x5001, (jint) 0x5004, (jint) 0x5005, (jint) 0x5010, (jint) 0x5011, (jint) 0x5014, (jint) 0x5015, (jint) 0x5040, (jint) 0x5041, (jint) 0x5044, (jint) 0x5045, (jint) 0x5050, (jint) 0x5051, (jint) 0x5054, (jint) 0x5055, (jint) 0x5100, (jint) 0x5101, (jint) 0x5104, (jint) 0x5105, (jint) 0x5110, (jint) 0x5111, (jint) 0x5114, (jint) 0x5115, (jint) 0x5140, (jint) 0x5141, (jint) 0x5144, (jint) 0x5145, (jint) 0x5150, (jint) 0x5151, (jint) 0x5154, (jint) 0x5155, (jint) 0x5400, (jint) 0x5401, (jint) 0x5404, (jint) 0x5405, (jint) 0x5410, (jint) 0x5411, (jint) 0x5414, (jint) 0x5415, (jint) 0x5440, (jint) 0x5441, (jint) 0x5444, (jint) 0x5445, (jint) 0x5450, (jint) 0x5451, (jint) 0x5454, (jint) 0x5455, (jint) 0x5500, (jint) 0x5501, (jint) 0x5504, (jint) 0x5505, (jint) 0x5510, (jint) 0x5511, (jint) 0x5514, (jint) 0x5515, (jint) 0x5540, (jint) 0x5541, (jint) 0x5544, (jint) 0x5545, (jint) 0x5550, (jint) 0x5551, (jint) 0x5554, (jint) 0x5555 } count:256];
    OrgSpongycastleMathEcLongArray_INTERLEAVE3_TABLE = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x00000, (jint) 0x00001, (jint) 0x00008, (jint) 0x00009, (jint) 0x00040, (jint) 0x00041, (jint) 0x00048, (jint) 0x00049, (jint) 0x00200, (jint) 0x00201, (jint) 0x00208, (jint) 0x00209, (jint) 0x00240, (jint) 0x00241, (jint) 0x00248, (jint) 0x00249, (jint) 0x01000, (jint) 0x01001, (jint) 0x01008, (jint) 0x01009, (jint) 0x01040, (jint) 0x01041, (jint) 0x01048, (jint) 0x01049, (jint) 0x01200, (jint) 0x01201, (jint) 0x01208, (jint) 0x01209, (jint) 0x01240, (jint) 0x01241, (jint) 0x01248, (jint) 0x01249, (jint) 0x08000, (jint) 0x08001, (jint) 0x08008, (jint) 0x08009, (jint) 0x08040, (jint) 0x08041, (jint) 0x08048, (jint) 0x08049, (jint) 0x08200, (jint) 0x08201, (jint) 0x08208, (jint) 0x08209, (jint) 0x08240, (jint) 0x08241, (jint) 0x08248, (jint) 0x08249, (jint) 0x09000, (jint) 0x09001, (jint) 0x09008, (jint) 0x09009, (jint) 0x09040, (jint) 0x09041, (jint) 0x09048, (jint) 0x09049, (jint) 0x09200, (jint) 0x09201, (jint) 0x09208, (jint) 0x09209, (jint) 0x09240, (jint) 0x09241, (jint) 0x09248, (jint) 0x09249, (jint) 0x40000, (jint) 0x40001, (jint) 0x40008, (jint) 0x40009, (jint) 0x40040, (jint) 0x40041, (jint) 0x40048, (jint) 0x40049, (jint) 0x40200, (jint) 0x40201, (jint) 0x40208, (jint) 0x40209, (jint) 0x40240, (jint) 0x40241, (jint) 0x40248, (jint) 0x40249, (jint) 0x41000, (jint) 0x41001, (jint) 0x41008, (jint) 0x41009, (jint) 0x41040, (jint) 0x41041, (jint) 0x41048, (jint) 0x41049, (jint) 0x41200, (jint) 0x41201, (jint) 0x41208, (jint) 0x41209, (jint) 0x41240, (jint) 0x41241, (jint) 0x41248, (jint) 0x41249, (jint) 0x48000, (jint) 0x48001, (jint) 0x48008, (jint) 0x48009, (jint) 0x48040, (jint) 0x48041, (jint) 0x48048, (jint) 0x48049, (jint) 0x48200, (jint) 0x48201, (jint) 0x48208, (jint) 0x48209, (jint) 0x48240, (jint) 0x48241, (jint) 0x48248, (jint) 0x48249, (jint) 0x49000, (jint) 0x49001, (jint) 0x49008, (jint) 0x49009, (jint) 0x49040, (jint) 0x49041, (jint) 0x49048, (jint) 0x49049, (jint) 0x49200, (jint) 0x49201, (jint) 0x49208, (jint) 0x49209, (jint) 0x49240, (jint) 0x49241, (jint) 0x49248, (jint) 0x49249 } count:128];
    OrgSpongycastleMathEcLongArray_INTERLEAVE4_TABLE = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x00000000, (jint) 0x00000001, (jint) 0x00000010, (jint) 0x00000011, (jint) 0x00000100, (jint) 0x00000101, (jint) 0x00000110, (jint) 0x00000111, (jint) 0x00001000, (jint) 0x00001001, (jint) 0x00001010, (jint) 0x00001011, (jint) 0x00001100, (jint) 0x00001101, (jint) 0x00001110, (jint) 0x00001111, (jint) 0x00010000, (jint) 0x00010001, (jint) 0x00010010, (jint) 0x00010011, (jint) 0x00010100, (jint) 0x00010101, (jint) 0x00010110, (jint) 0x00010111, (jint) 0x00011000, (jint) 0x00011001, (jint) 0x00011010, (jint) 0x00011011, (jint) 0x00011100, (jint) 0x00011101, (jint) 0x00011110, (jint) 0x00011111, (jint) 0x00100000, (jint) 0x00100001, (jint) 0x00100010, (jint) 0x00100011, (jint) 0x00100100, (jint) 0x00100101, (jint) 0x00100110, (jint) 0x00100111, (jint) 0x00101000, (jint) 0x00101001, (jint) 0x00101010, (jint) 0x00101011, (jint) 0x00101100, (jint) 0x00101101, (jint) 0x00101110, (jint) 0x00101111, (jint) 0x00110000, (jint) 0x00110001, (jint) 0x00110010, (jint) 0x00110011, (jint) 0x00110100, (jint) 0x00110101, (jint) 0x00110110, (jint) 0x00110111, (jint) 0x00111000, (jint) 0x00111001, (jint) 0x00111010, (jint) 0x00111011, (jint) 0x00111100, (jint) 0x00111101, (jint) 0x00111110, (jint) 0x00111111, (jint) 0x01000000, (jint) 0x01000001, (jint) 0x01000010, (jint) 0x01000011, (jint) 0x01000100, (jint) 0x01000101, (jint) 0x01000110, (jint) 0x01000111, (jint) 0x01001000, (jint) 0x01001001, (jint) 0x01001010, (jint) 0x01001011, (jint) 0x01001100, (jint) 0x01001101, (jint) 0x01001110, (jint) 0x01001111, (jint) 0x01010000, (jint) 0x01010001, (jint) 0x01010010, (jint) 0x01010011, (jint) 0x01010100, (jint) 0x01010101, (jint) 0x01010110, (jint) 0x01010111, (jint) 0x01011000, (jint) 0x01011001, (jint) 0x01011010, (jint) 0x01011011, (jint) 0x01011100, (jint) 0x01011101, (jint) 0x01011110, (jint) 0x01011111, (jint) 0x01100000, (jint) 0x01100001, (jint) 0x01100010, (jint) 0x01100011, (jint) 0x01100100, (jint) 0x01100101, (jint) 0x01100110, (jint) 0x01100111, (jint) 0x01101000, (jint) 0x01101001, (jint) 0x01101010, (jint) 0x01101011, (jint) 0x01101100, (jint) 0x01101101, (jint) 0x01101110, (jint) 0x01101111, (jint) 0x01110000, (jint) 0x01110001, (jint) 0x01110010, (jint) 0x01110011, (jint) 0x01110100, (jint) 0x01110101, (jint) 0x01110110, (jint) 0x01110111, (jint) 0x01111000, (jint) 0x01111001, (jint) 0x01111010, (jint) 0x01111011, (jint) 0x01111100, (jint) 0x01111101, (jint) 0x01111110, (jint) 0x01111111, (jint) 0x10000000, (jint) 0x10000001, (jint) 0x10000010, (jint) 0x10000011, (jint) 0x10000100, (jint) 0x10000101, (jint) 0x10000110, (jint) 0x10000111, (jint) 0x10001000, (jint) 0x10001001, (jint) 0x10001010, (jint) 0x10001011, (jint) 0x10001100, (jint) 0x10001101, (jint) 0x10001110, (jint) 0x10001111, (jint) 0x10010000, (jint) 0x10010001, (jint) 0x10010010, (jint) 0x10010011, (jint) 0x10010100, (jint) 0x10010101, (jint) 0x10010110, (jint) 0x10010111, (jint) 0x10011000, (jint) 0x10011001, (jint) 0x10011010, (jint) 0x10011011, (jint) 0x10011100, (jint) 0x10011101, (jint) 0x10011110, (jint) 0x10011111, (jint) 0x10100000, (jint) 0x10100001, (jint) 0x10100010, (jint) 0x10100011, (jint) 0x10100100, (jint) 0x10100101, (jint) 0x10100110, (jint) 0x10100111, (jint) 0x10101000, (jint) 0x10101001, (jint) 0x10101010, (jint) 0x10101011, (jint) 0x10101100, (jint) 0x10101101, (jint) 0x10101110, (jint) 0x10101111, (jint) 0x10110000, (jint) 0x10110001, (jint) 0x10110010, (jint) 0x10110011, (jint) 0x10110100, (jint) 0x10110101, (jint) 0x10110110, (jint) 0x10110111, (jint) 0x10111000, (jint) 0x10111001, (jint) 0x10111010, (jint) 0x10111011, (jint) 0x10111100, (jint) 0x10111101, (jint) 0x10111110, (jint) 0x10111111, (jint) 0x11000000, (jint) 0x11000001, (jint) 0x11000010, (jint) 0x11000011, (jint) 0x11000100, (jint) 0x11000101, (jint) 0x11000110, (jint) 0x11000111, (jint) 0x11001000, (jint) 0x11001001, (jint) 0x11001010, (jint) 0x11001011, (jint) 0x11001100, (jint) 0x11001101, (jint) 0x11001110, (jint) 0x11001111, (jint) 0x11010000, (jint) 0x11010001, (jint) 0x11010010, (jint) 0x11010011, (jint) 0x11010100, (jint) 0x11010101, (jint) 0x11010110, (jint) 0x11010111, (jint) 0x11011000, (jint) 0x11011001, (jint) 0x11011010, (jint) 0x11011011, (jint) 0x11011100, (jint) 0x11011101, (jint) 0x11011110, (jint) 0x11011111, (jint) 0x11100000, (jint) 0x11100001, (jint) 0x11100010, (jint) 0x11100011, (jint) 0x11100100, (jint) 0x11100101, (jint) 0x11100110, (jint) 0x11100111, (jint) 0x11101000, (jint) 0x11101001, (jint) 0x11101010, (jint) 0x11101011, (jint) 0x11101100, (jint) 0x11101101, (jint) 0x11101110, (jint) 0x11101111, (jint) 0x11110000, (jint) 0x11110001, (jint) 0x11110010, (jint) 0x11110011, (jint) 0x11110100, (jint) 0x11110101, (jint) 0x11110110, (jint) 0x11110111, (jint) 0x11111000, (jint) 0x11111001, (jint) 0x11111010, (jint) 0x11111011, (jint) 0x11111100, (jint) 0x11111101, (jint) 0x11111110, (jint) 0x11111111 } count:256];
    OrgSpongycastleMathEcLongArray_INTERLEAVE5_TABLE = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x00000000, (jint) 0x00000001, (jint) 0x00000020, (jint) 0x00000021, (jint) 0x00000400, (jint) 0x00000401, (jint) 0x00000420, (jint) 0x00000421, (jint) 0x00008000, (jint) 0x00008001, (jint) 0x00008020, (jint) 0x00008021, (jint) 0x00008400, (jint) 0x00008401, (jint) 0x00008420, (jint) 0x00008421, (jint) 0x00100000, (jint) 0x00100001, (jint) 0x00100020, (jint) 0x00100021, (jint) 0x00100400, (jint) 0x00100401, (jint) 0x00100420, (jint) 0x00100421, (jint) 0x00108000, (jint) 0x00108001, (jint) 0x00108020, (jint) 0x00108021, (jint) 0x00108400, (jint) 0x00108401, (jint) 0x00108420, (jint) 0x00108421, (jint) 0x02000000, (jint) 0x02000001, (jint) 0x02000020, (jint) 0x02000021, (jint) 0x02000400, (jint) 0x02000401, (jint) 0x02000420, (jint) 0x02000421, (jint) 0x02008000, (jint) 0x02008001, (jint) 0x02008020, (jint) 0x02008021, (jint) 0x02008400, (jint) 0x02008401, (jint) 0x02008420, (jint) 0x02008421, (jint) 0x02100000, (jint) 0x02100001, (jint) 0x02100020, (jint) 0x02100021, (jint) 0x02100400, (jint) 0x02100401, (jint) 0x02100420, (jint) 0x02100421, (jint) 0x02108000, (jint) 0x02108001, (jint) 0x02108020, (jint) 0x02108021, (jint) 0x02108400, (jint) 0x02108401, (jint) 0x02108420, (jint) 0x02108421, (jint) 0x40000000, (jint) 0x40000001, (jint) 0x40000020, (jint) 0x40000021, (jint) 0x40000400, (jint) 0x40000401, (jint) 0x40000420, (jint) 0x40000421, (jint) 0x40008000, (jint) 0x40008001, (jint) 0x40008020, (jint) 0x40008021, (jint) 0x40008400, (jint) 0x40008401, (jint) 0x40008420, (jint) 0x40008421, (jint) 0x40100000, (jint) 0x40100001, (jint) 0x40100020, (jint) 0x40100021, (jint) 0x40100400, (jint) 0x40100401, (jint) 0x40100420, (jint) 0x40100421, (jint) 0x40108000, (jint) 0x40108001, (jint) 0x40108020, (jint) 0x40108021, (jint) 0x40108400, (jint) 0x40108401, (jint) 0x40108420, (jint) 0x40108421, (jint) 0x42000000, (jint) 0x42000001, (jint) 0x42000020, (jint) 0x42000021, (jint) 0x42000400, (jint) 0x42000401, (jint) 0x42000420, (jint) 0x42000421, (jint) 0x42008000, (jint) 0x42008001, (jint) 0x42008020, (jint) 0x42008021, (jint) 0x42008400, (jint) 0x42008401, (jint) 0x42008420, (jint) 0x42008421, (jint) 0x42100000, (jint) 0x42100001, (jint) 0x42100020, (jint) 0x42100021, (jint) 0x42100400, (jint) 0x42100401, (jint) 0x42100420, (jint) 0x42100421, (jint) 0x42108000, (jint) 0x42108001, (jint) 0x42108020, (jint) 0x42108021, (jint) 0x42108400, (jint) 0x42108401, (jint) 0x42108420, (jint) 0x42108421 } count:128];
    OrgSpongycastleMathEcLongArray_INTERLEAVE7_TABLE = [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0x0000000000000000LL, (jlong) 0x0000000000000001LL, (jlong) 0x0000000000000080LL, (jlong) 0x0000000000000081LL, (jlong) 0x0000000000004000LL, (jlong) 0x0000000000004001LL, (jlong) 0x0000000000004080LL, (jlong) 0x0000000000004081LL, (jlong) 0x0000000000200000LL, (jlong) 0x0000000000200001LL, (jlong) 0x0000000000200080LL, (jlong) 0x0000000000200081LL, (jlong) 0x0000000000204000LL, (jlong) 0x0000000000204001LL, (jlong) 0x0000000000204080LL, (jlong) 0x0000000000204081LL, (jlong) 0x0000000010000000LL, (jlong) 0x0000000010000001LL, (jlong) 0x0000000010000080LL, (jlong) 0x0000000010000081LL, (jlong) 0x0000000010004000LL, (jlong) 0x0000000010004001LL, (jlong) 0x0000000010004080LL, (jlong) 0x0000000010004081LL, (jlong) 0x0000000010200000LL, (jlong) 0x0000000010200001LL, (jlong) 0x0000000010200080LL, (jlong) 0x0000000010200081LL, (jlong) 0x0000000010204000LL, (jlong) 0x0000000010204001LL, (jlong) 0x0000000010204080LL, (jlong) 0x0000000010204081LL, (jlong) 0x0000000800000000LL, (jlong) 0x0000000800000001LL, (jlong) 0x0000000800000080LL, (jlong) 0x0000000800000081LL, (jlong) 0x0000000800004000LL, (jlong) 0x0000000800004001LL, (jlong) 0x0000000800004080LL, (jlong) 0x0000000800004081LL, (jlong) 0x0000000800200000LL, (jlong) 0x0000000800200001LL, (jlong) 0x0000000800200080LL, (jlong) 0x0000000800200081LL, (jlong) 0x0000000800204000LL, (jlong) 0x0000000800204001LL, (jlong) 0x0000000800204080LL, (jlong) 0x0000000800204081LL, (jlong) 0x0000000810000000LL, (jlong) 0x0000000810000001LL, (jlong) 0x0000000810000080LL, (jlong) 0x0000000810000081LL, (jlong) 0x0000000810004000LL, (jlong) 0x0000000810004001LL, (jlong) 0x0000000810004080LL, (jlong) 0x0000000810004081LL, (jlong) 0x0000000810200000LL, (jlong) 0x0000000810200001LL, (jlong) 0x0000000810200080LL, (jlong) 0x0000000810200081LL, (jlong) 0x0000000810204000LL, (jlong) 0x0000000810204001LL, (jlong) 0x0000000810204080LL, (jlong) 0x0000000810204081LL, (jlong) 0x0000040000000000LL, (jlong) 0x0000040000000001LL, (jlong) 0x0000040000000080LL, (jlong) 0x0000040000000081LL, (jlong) 0x0000040000004000LL, (jlong) 0x0000040000004001LL, (jlong) 0x0000040000004080LL, (jlong) 0x0000040000004081LL, (jlong) 0x0000040000200000LL, (jlong) 0x0000040000200001LL, (jlong) 0x0000040000200080LL, (jlong) 0x0000040000200081LL, (jlong) 0x0000040000204000LL, (jlong) 0x0000040000204001LL, (jlong) 0x0000040000204080LL, (jlong) 0x0000040000204081LL, (jlong) 0x0000040010000000LL, (jlong) 0x0000040010000001LL, (jlong) 0x0000040010000080LL, (jlong) 0x0000040010000081LL, (jlong) 0x0000040010004000LL, (jlong) 0x0000040010004001LL, (jlong) 0x0000040010004080LL, (jlong) 0x0000040010004081LL, (jlong) 0x0000040010200000LL, (jlong) 0x0000040010200001LL, (jlong) 0x0000040010200080LL, (jlong) 0x0000040010200081LL, (jlong) 0x0000040010204000LL, (jlong) 0x0000040010204001LL, (jlong) 0x0000040010204080LL, (jlong) 0x0000040010204081LL, (jlong) 0x0000040800000000LL, (jlong) 0x0000040800000001LL, (jlong) 0x0000040800000080LL, (jlong) 0x0000040800000081LL, (jlong) 0x0000040800004000LL, (jlong) 0x0000040800004001LL, (jlong) 0x0000040800004080LL, (jlong) 0x0000040800004081LL, (jlong) 0x0000040800200000LL, (jlong) 0x0000040800200001LL, (jlong) 0x0000040800200080LL, (jlong) 0x0000040800200081LL, (jlong) 0x0000040800204000LL, (jlong) 0x0000040800204001LL, (jlong) 0x0000040800204080LL, (jlong) 0x0000040800204081LL, (jlong) 0x0000040810000000LL, (jlong) 0x0000040810000001LL, (jlong) 0x0000040810000080LL, (jlong) 0x0000040810000081LL, (jlong) 0x0000040810004000LL, (jlong) 0x0000040810004001LL, (jlong) 0x0000040810004080LL, (jlong) 0x0000040810004081LL, (jlong) 0x0000040810200000LL, (jlong) 0x0000040810200001LL, (jlong) 0x0000040810200080LL, (jlong) 0x0000040810200081LL, (jlong) 0x0000040810204000LL, (jlong) 0x0000040810204001LL, (jlong) 0x0000040810204080LL, (jlong) 0x0000040810204081LL, (jlong) 0x0002000000000000LL, (jlong) 0x0002000000000001LL, (jlong) 0x0002000000000080LL, (jlong) 0x0002000000000081LL, (jlong) 0x0002000000004000LL, (jlong) 0x0002000000004001LL, (jlong) 0x0002000000004080LL, (jlong) 0x0002000000004081LL, (jlong) 0x0002000000200000LL, (jlong) 0x0002000000200001LL, (jlong) 0x0002000000200080LL, (jlong) 0x0002000000200081LL, (jlong) 0x0002000000204000LL, (jlong) 0x0002000000204001LL, (jlong) 0x0002000000204080LL, (jlong) 0x0002000000204081LL, (jlong) 0x0002000010000000LL, (jlong) 0x0002000010000001LL, (jlong) 0x0002000010000080LL, (jlong) 0x0002000010000081LL, (jlong) 0x0002000010004000LL, (jlong) 0x0002000010004001LL, (jlong) 0x0002000010004080LL, (jlong) 0x0002000010004081LL, (jlong) 0x0002000010200000LL, (jlong) 0x0002000010200001LL, (jlong) 0x0002000010200080LL, (jlong) 0x0002000010200081LL, (jlong) 0x0002000010204000LL, (jlong) 0x0002000010204001LL, (jlong) 0x0002000010204080LL, (jlong) 0x0002000010204081LL, (jlong) 0x0002000800000000LL, (jlong) 0x0002000800000001LL, (jlong) 0x0002000800000080LL, (jlong) 0x0002000800000081LL, (jlong) 0x0002000800004000LL, (jlong) 0x0002000800004001LL, (jlong) 0x0002000800004080LL, (jlong) 0x0002000800004081LL, (jlong) 0x0002000800200000LL, (jlong) 0x0002000800200001LL, (jlong) 0x0002000800200080LL, (jlong) 0x0002000800200081LL, (jlong) 0x0002000800204000LL, (jlong) 0x0002000800204001LL, (jlong) 0x0002000800204080LL, (jlong) 0x0002000800204081LL, (jlong) 0x0002000810000000LL, (jlong) 0x0002000810000001LL, (jlong) 0x0002000810000080LL, (jlong) 0x0002000810000081LL, (jlong) 0x0002000810004000LL, (jlong) 0x0002000810004001LL, (jlong) 0x0002000810004080LL, (jlong) 0x0002000810004081LL, (jlong) 0x0002000810200000LL, (jlong) 0x0002000810200001LL, (jlong) 0x0002000810200080LL, (jlong) 0x0002000810200081LL, (jlong) 0x0002000810204000LL, (jlong) 0x0002000810204001LL, (jlong) 0x0002000810204080LL, (jlong) 0x0002000810204081LL, (jlong) 0x0002040000000000LL, (jlong) 0x0002040000000001LL, (jlong) 0x0002040000000080LL, (jlong) 0x0002040000000081LL, (jlong) 0x0002040000004000LL, (jlong) 0x0002040000004001LL, (jlong) 0x0002040000004080LL, (jlong) 0x0002040000004081LL, (jlong) 0x0002040000200000LL, (jlong) 0x0002040000200001LL, (jlong) 0x0002040000200080LL, (jlong) 0x0002040000200081LL, (jlong) 0x0002040000204000LL, (jlong) 0x0002040000204001LL, (jlong) 0x0002040000204080LL, (jlong) 0x0002040000204081LL, (jlong) 0x0002040010000000LL, (jlong) 0x0002040010000001LL, (jlong) 0x0002040010000080LL, (jlong) 0x0002040010000081LL, (jlong) 0x0002040010004000LL, (jlong) 0x0002040010004001LL, (jlong) 0x0002040010004080LL, (jlong) 0x0002040010004081LL, (jlong) 0x0002040010200000LL, (jlong) 0x0002040010200001LL, (jlong) 0x0002040010200080LL, (jlong) 0x0002040010200081LL, (jlong) 0x0002040010204000LL, (jlong) 0x0002040010204001LL, (jlong) 0x0002040010204080LL, (jlong) 0x0002040010204081LL, (jlong) 0x0002040800000000LL, (jlong) 0x0002040800000001LL, (jlong) 0x0002040800000080LL, (jlong) 0x0002040800000081LL, (jlong) 0x0002040800004000LL, (jlong) 0x0002040800004001LL, (jlong) 0x0002040800004080LL, (jlong) 0x0002040800004081LL, (jlong) 0x0002040800200000LL, (jlong) 0x0002040800200001LL, (jlong) 0x0002040800200080LL, (jlong) 0x0002040800200081LL, (jlong) 0x0002040800204000LL, (jlong) 0x0002040800204001LL, (jlong) 0x0002040800204080LL, (jlong) 0x0002040800204081LL, (jlong) 0x0002040810000000LL, (jlong) 0x0002040810000001LL, (jlong) 0x0002040810000080LL, (jlong) 0x0002040810000081LL, (jlong) 0x0002040810004000LL, (jlong) 0x0002040810004001LL, (jlong) 0x0002040810004080LL, (jlong) 0x0002040810004081LL, (jlong) 0x0002040810200000LL, (jlong) 0x0002040810200001LL, (jlong) 0x0002040810200080LL, (jlong) 0x0002040810200081LL, (jlong) 0x0002040810204000LL, (jlong) 0x0002040810204001LL, (jlong) 0x0002040810204080LL, (jlong) 0x0002040810204081LL, (jlong) 0x0100000000000000LL, (jlong) 0x0100000000000001LL, (jlong) 0x0100000000000080LL, (jlong) 0x0100000000000081LL, (jlong) 0x0100000000004000LL, (jlong) 0x0100000000004001LL, (jlong) 0x0100000000004080LL, (jlong) 0x0100000000004081LL, (jlong) 0x0100000000200000LL, (jlong) 0x0100000000200001LL, (jlong) 0x0100000000200080LL, (jlong) 0x0100000000200081LL, (jlong) 0x0100000000204000LL, (jlong) 0x0100000000204001LL, (jlong) 0x0100000000204080LL, (jlong) 0x0100000000204081LL, (jlong) 0x0100000010000000LL, (jlong) 0x0100000010000001LL, (jlong) 0x0100000010000080LL, (jlong) 0x0100000010000081LL, (jlong) 0x0100000010004000LL, (jlong) 0x0100000010004001LL, (jlong) 0x0100000010004080LL, (jlong) 0x0100000010004081LL, (jlong) 0x0100000010200000LL, (jlong) 0x0100000010200001LL, (jlong) 0x0100000010200080LL, (jlong) 0x0100000010200081LL, (jlong) 0x0100000010204000LL, (jlong) 0x0100000010204001LL, (jlong) 0x0100000010204080LL, (jlong) 0x0100000010204081LL, (jlong) 0x0100000800000000LL, (jlong) 0x0100000800000001LL, (jlong) 0x0100000800000080LL, (jlong) 0x0100000800000081LL, (jlong) 0x0100000800004000LL, (jlong) 0x0100000800004001LL, (jlong) 0x0100000800004080LL, (jlong) 0x0100000800004081LL, (jlong) 0x0100000800200000LL, (jlong) 0x0100000800200001LL, (jlong) 0x0100000800200080LL, (jlong) 0x0100000800200081LL, (jlong) 0x0100000800204000LL, (jlong) 0x0100000800204001LL, (jlong) 0x0100000800204080LL, (jlong) 0x0100000800204081LL, (jlong) 0x0100000810000000LL, (jlong) 0x0100000810000001LL, (jlong) 0x0100000810000080LL, (jlong) 0x0100000810000081LL, (jlong) 0x0100000810004000LL, (jlong) 0x0100000810004001LL, (jlong) 0x0100000810004080LL, (jlong) 0x0100000810004081LL, (jlong) 0x0100000810200000LL, (jlong) 0x0100000810200001LL, (jlong) 0x0100000810200080LL, (jlong) 0x0100000810200081LL, (jlong) 0x0100000810204000LL, (jlong) 0x0100000810204001LL, (jlong) 0x0100000810204080LL, (jlong) 0x0100000810204081LL, (jlong) 0x0100040000000000LL, (jlong) 0x0100040000000001LL, (jlong) 0x0100040000000080LL, (jlong) 0x0100040000000081LL, (jlong) 0x0100040000004000LL, (jlong) 0x0100040000004001LL, (jlong) 0x0100040000004080LL, (jlong) 0x0100040000004081LL, (jlong) 0x0100040000200000LL, (jlong) 0x0100040000200001LL, (jlong) 0x0100040000200080LL, (jlong) 0x0100040000200081LL, (jlong) 0x0100040000204000LL, (jlong) 0x0100040000204001LL, (jlong) 0x0100040000204080LL, (jlong) 0x0100040000204081LL, (jlong) 0x0100040010000000LL, (jlong) 0x0100040010000001LL, (jlong) 0x0100040010000080LL, (jlong) 0x0100040010000081LL, (jlong) 0x0100040010004000LL, (jlong) 0x0100040010004001LL, (jlong) 0x0100040010004080LL, (jlong) 0x0100040010004081LL, (jlong) 0x0100040010200000LL, (jlong) 0x0100040010200001LL, (jlong) 0x0100040010200080LL, (jlong) 0x0100040010200081LL, (jlong) 0x0100040010204000LL, (jlong) 0x0100040010204001LL, (jlong) 0x0100040010204080LL, (jlong) 0x0100040010204081LL, (jlong) 0x0100040800000000LL, (jlong) 0x0100040800000001LL, (jlong) 0x0100040800000080LL, (jlong) 0x0100040800000081LL, (jlong) 0x0100040800004000LL, (jlong) 0x0100040800004001LL, (jlong) 0x0100040800004080LL, (jlong) 0x0100040800004081LL, (jlong) 0x0100040800200000LL, (jlong) 0x0100040800200001LL, (jlong) 0x0100040800200080LL, (jlong) 0x0100040800200081LL, (jlong) 0x0100040800204000LL, (jlong) 0x0100040800204001LL, (jlong) 0x0100040800204080LL, (jlong) 0x0100040800204081LL, (jlong) 0x0100040810000000LL, (jlong) 0x0100040810000001LL, (jlong) 0x0100040810000080LL, (jlong) 0x0100040810000081LL, (jlong) 0x0100040810004000LL, (jlong) 0x0100040810004001LL, (jlong) 0x0100040810004080LL, (jlong) 0x0100040810004081LL, (jlong) 0x0100040810200000LL, (jlong) 0x0100040810200001LL, (jlong) 0x0100040810200080LL, (jlong) 0x0100040810200081LL, (jlong) 0x0100040810204000LL, (jlong) 0x0100040810204001LL, (jlong) 0x0100040810204080LL, (jlong) 0x0100040810204081LL, (jlong) 0x0102000000000000LL, (jlong) 0x0102000000000001LL, (jlong) 0x0102000000000080LL, (jlong) 0x0102000000000081LL, (jlong) 0x0102000000004000LL, (jlong) 0x0102000000004001LL, (jlong) 0x0102000000004080LL, (jlong) 0x0102000000004081LL, (jlong) 0x0102000000200000LL, (jlong) 0x0102000000200001LL, (jlong) 0x0102000000200080LL, (jlong) 0x0102000000200081LL, (jlong) 0x0102000000204000LL, (jlong) 0x0102000000204001LL, (jlong) 0x0102000000204080LL, (jlong) 0x0102000000204081LL, (jlong) 0x0102000010000000LL, (jlong) 0x0102000010000001LL, (jlong) 0x0102000010000080LL, (jlong) 0x0102000010000081LL, (jlong) 0x0102000010004000LL, (jlong) 0x0102000010004001LL, (jlong) 0x0102000010004080LL, (jlong) 0x0102000010004081LL, (jlong) 0x0102000010200000LL, (jlong) 0x0102000010200001LL, (jlong) 0x0102000010200080LL, (jlong) 0x0102000010200081LL, (jlong) 0x0102000010204000LL, (jlong) 0x0102000010204001LL, (jlong) 0x0102000010204080LL, (jlong) 0x0102000010204081LL, (jlong) 0x0102000800000000LL, (jlong) 0x0102000800000001LL, (jlong) 0x0102000800000080LL, (jlong) 0x0102000800000081LL, (jlong) 0x0102000800004000LL, (jlong) 0x0102000800004001LL, (jlong) 0x0102000800004080LL, (jlong) 0x0102000800004081LL, (jlong) 0x0102000800200000LL, (jlong) 0x0102000800200001LL, (jlong) 0x0102000800200080LL, (jlong) 0x0102000800200081LL, (jlong) 0x0102000800204000LL, (jlong) 0x0102000800204001LL, (jlong) 0x0102000800204080LL, (jlong) 0x0102000800204081LL, (jlong) 0x0102000810000000LL, (jlong) 0x0102000810000001LL, (jlong) 0x0102000810000080LL, (jlong) 0x0102000810000081LL, (jlong) 0x0102000810004000LL, (jlong) 0x0102000810004001LL, (jlong) 0x0102000810004080LL, (jlong) 0x0102000810004081LL, (jlong) 0x0102000810200000LL, (jlong) 0x0102000810200001LL, (jlong) 0x0102000810200080LL, (jlong) 0x0102000810200081LL, (jlong) 0x0102000810204000LL, (jlong) 0x0102000810204001LL, (jlong) 0x0102000810204080LL, (jlong) 0x0102000810204081LL, (jlong) 0x0102040000000000LL, (jlong) 0x0102040000000001LL, (jlong) 0x0102040000000080LL, (jlong) 0x0102040000000081LL, (jlong) 0x0102040000004000LL, (jlong) 0x0102040000004001LL, (jlong) 0x0102040000004080LL, (jlong) 0x0102040000004081LL, (jlong) 0x0102040000200000LL, (jlong) 0x0102040000200001LL, (jlong) 0x0102040000200080LL, (jlong) 0x0102040000200081LL, (jlong) 0x0102040000204000LL, (jlong) 0x0102040000204001LL, (jlong) 0x0102040000204080LL, (jlong) 0x0102040000204081LL, (jlong) 0x0102040010000000LL, (jlong) 0x0102040010000001LL, (jlong) 0x0102040010000080LL, (jlong) 0x0102040010000081LL, (jlong) 0x0102040010004000LL, (jlong) 0x0102040010004001LL, (jlong) 0x0102040010004080LL, (jlong) 0x0102040010004081LL, (jlong) 0x0102040010200000LL, (jlong) 0x0102040010200001LL, (jlong) 0x0102040010200080LL, (jlong) 0x0102040010200081LL, (jlong) 0x0102040010204000LL, (jlong) 0x0102040010204001LL, (jlong) 0x0102040010204080LL, (jlong) 0x0102040010204081LL, (jlong) 0x0102040800000000LL, (jlong) 0x0102040800000001LL, (jlong) 0x0102040800000080LL, (jlong) 0x0102040800000081LL, (jlong) 0x0102040800004000LL, (jlong) 0x0102040800004001LL, (jlong) 0x0102040800004080LL, (jlong) 0x0102040800004081LL, (jlong) 0x0102040800200000LL, (jlong) 0x0102040800200001LL, (jlong) 0x0102040800200080LL, (jlong) 0x0102040800200081LL, (jlong) 0x0102040800204000LL, (jlong) 0x0102040800204001LL, (jlong) 0x0102040800204080LL, (jlong) 0x0102040800204081LL, (jlong) 0x0102040810000000LL, (jlong) 0x0102040810000001LL, (jlong) 0x0102040810000080LL, (jlong) 0x0102040810000081LL, (jlong) 0x0102040810004000LL, (jlong) 0x0102040810004001LL, (jlong) 0x0102040810004080LL, (jlong) 0x0102040810004081LL, (jlong) 0x0102040810200000LL, (jlong) 0x0102040810200001LL, (jlong) 0x0102040810200080LL, (jlong) 0x0102040810200081LL, (jlong) 0x0102040810204000LL, (jlong) 0x0102040810204001LL, (jlong) 0x0102040810204080LL, (jlong) 0x0102040810204081LL } count:512];
    OrgSpongycastleMathEcLongArray_bitLengths = [IOSByteArray newArrayWithBytes:(jbyte[]){ 0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8 } count:256];
    J2OBJC_SET_INITIALIZED(OrgSpongycastleMathEcLongArray)
  }
}

@end

void OrgSpongycastleMathEcLongArray_initWithInt_(OrgSpongycastleMathEcLongArray *self, jint intLen) {
  NSObject_init(self);
  self->m_ints_ = [IOSLongArray newArrayWithLength:intLen];
}

OrgSpongycastleMathEcLongArray *new_OrgSpongycastleMathEcLongArray_initWithInt_(jint intLen) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcLongArray, initWithInt_, intLen)
}

OrgSpongycastleMathEcLongArray *create_OrgSpongycastleMathEcLongArray_initWithInt_(jint intLen) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcLongArray, initWithInt_, intLen)
}

void OrgSpongycastleMathEcLongArray_initWithLongArray_(OrgSpongycastleMathEcLongArray *self, IOSLongArray *ints) {
  NSObject_init(self);
  self->m_ints_ = ints;
}

OrgSpongycastleMathEcLongArray *new_OrgSpongycastleMathEcLongArray_initWithLongArray_(IOSLongArray *ints) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcLongArray, initWithLongArray_, ints)
}

OrgSpongycastleMathEcLongArray *create_OrgSpongycastleMathEcLongArray_initWithLongArray_(IOSLongArray *ints) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcLongArray, initWithLongArray_, ints)
}

void OrgSpongycastleMathEcLongArray_initWithLongArray_withInt_withInt_(OrgSpongycastleMathEcLongArray *self, IOSLongArray *ints, jint off, jint len) {
  NSObject_init(self);
  if (off == 0 && len == ((IOSLongArray *) nil_chk(ints))->size_) {
    self->m_ints_ = ints;
  }
  else {
    self->m_ints_ = [IOSLongArray newArrayWithLength:len];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ints, off, self->m_ints_, 0, len);
  }
}

OrgSpongycastleMathEcLongArray *new_OrgSpongycastleMathEcLongArray_initWithLongArray_withInt_withInt_(IOSLongArray *ints, jint off, jint len) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcLongArray, initWithLongArray_withInt_withInt_, ints, off, len)
}

OrgSpongycastleMathEcLongArray *create_OrgSpongycastleMathEcLongArray_initWithLongArray_withInt_withInt_(IOSLongArray *ints, jint off, jint len) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcLongArray, initWithLongArray_withInt_withInt_, ints, off, len)
}

void OrgSpongycastleMathEcLongArray_initWithJavaMathBigInteger_(OrgSpongycastleMathEcLongArray *self, JavaMathBigInteger *bigInt) {
  NSObject_init(self);
  if (bigInt == nil || [bigInt signum] < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid F2m field value");
  }
  if ([bigInt signum] == 0) {
    self->m_ints_ = [IOSLongArray newArrayWithLongs:(jlong[]){ 0LL } count:1];
    return;
  }
  IOSByteArray *barr = [bigInt toByteArray];
  jint barrLen = ((IOSByteArray *) nil_chk(barr))->size_;
  jint barrStart = 0;
  if (IOSByteArray_Get(barr, 0) == 0) {
    barrLen--;
    barrStart = 1;
  }
  jint intLen = (barrLen + 7) / 8;
  self->m_ints_ = [IOSLongArray newArrayWithLength:intLen];
  jint iarrJ = intLen - 1;
  jint rem = barrLen % 8 + barrStart;
  jlong temp = 0;
  jint barrI = barrStart;
  if (barrStart < rem) {
    for (; barrI < rem; barrI++) {
      JreLShiftAssignLong(&temp, 8);
      jint barrBarrI = IOSByteArray_Get(barr, barrI) & (jint) 0xFF;
      temp |= barrBarrI;
    }
    *IOSLongArray_GetRef(self->m_ints_, iarrJ--) = temp;
  }
  for (; iarrJ >= 0; iarrJ--) {
    temp = 0;
    for (jint i = 0; i < 8; i++) {
      JreLShiftAssignLong(&temp, 8);
      jint barrBarrI = IOSByteArray_Get(barr, barrI++) & (jint) 0xFF;
      temp |= barrBarrI;
    }
    *IOSLongArray_GetRef(self->m_ints_, iarrJ) = temp;
  }
}

OrgSpongycastleMathEcLongArray *new_OrgSpongycastleMathEcLongArray_initWithJavaMathBigInteger_(JavaMathBigInteger *bigInt) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcLongArray, initWithJavaMathBigInteger_, bigInt)
}

OrgSpongycastleMathEcLongArray *create_OrgSpongycastleMathEcLongArray_initWithJavaMathBigInteger_(JavaMathBigInteger *bigInt) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcLongArray, initWithJavaMathBigInteger_, bigInt)
}

jint OrgSpongycastleMathEcLongArray_degreeFromWithInt_(OrgSpongycastleMathEcLongArray *self, jint limit) {
  jint i = JreURShift32((limit + 62), 6);
  jlong w;
  do {
    if (i == 0) {
      return 0;
    }
    w = IOSLongArray_Get(nil_chk(self->m_ints_), --i);
  }
  while (w == 0);
  return (JreLShift32(i, 6)) + OrgSpongycastleMathEcLongArray_bitLengthWithLong_(w);
}

jint OrgSpongycastleMathEcLongArray_bitLengthWithLong_(jlong w) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint u = (jint) (JreURShift64(w, 32));
  jint b;
  if (u == 0) {
    u = (jint) w;
    b = 0;
  }
  else {
    b = 32;
  }
  jint t = JreURShift32(u, 16);
  jint k;
  if (t == 0) {
    t = JreURShift32(u, 8);
    k = (t == 0) ? IOSByteArray_Get(nil_chk(OrgSpongycastleMathEcLongArray_bitLengths), u) : 8 + IOSByteArray_Get(nil_chk(OrgSpongycastleMathEcLongArray_bitLengths), t);
  }
  else {
    jint v = JreURShift32(t, 8);
    k = (v == 0) ? 16 + IOSByteArray_Get(nil_chk(OrgSpongycastleMathEcLongArray_bitLengths), t) : 24 + IOSByteArray_Get(nil_chk(OrgSpongycastleMathEcLongArray_bitLengths), v);
  }
  return b + k;
}

IOSLongArray *OrgSpongycastleMathEcLongArray_resizedIntsWithInt_(OrgSpongycastleMathEcLongArray *self, jint newLen) {
  IOSLongArray *newInts = [IOSLongArray newArrayWithLength:newLen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->m_ints_, 0, newInts, 0, JavaLangMath_minWithInt_withInt_(((IOSLongArray *) nil_chk(self->m_ints_))->size_, newLen));
  return newInts;
}

jlong OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withInt_withInt_(IOSLongArray *x, jint xOff, jint count, jint shift) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint shiftInv = 64 - shift;
  jlong prev = 0;
  for (jint i = 0; i < count; ++i) {
    jlong next = IOSLongArray_Get(nil_chk(x), xOff + i);
    *IOSLongArray_GetRef(x, xOff + i) = (JreLShift64(next, shift)) | prev;
    prev = JreURShift64(next, shiftInv);
  }
  return prev;
}

jlong OrgSpongycastleMathEcLongArray_shiftUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *z, jint zOff, jint count, jint shift) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint shiftInv = 64 - shift;
  jlong prev = 0;
  for (jint i = 0; i < count; ++i) {
    jlong next = IOSLongArray_Get(nil_chk(x), xOff + i);
    *IOSLongArray_GetRef(nil_chk(z), zOff + i) = (JreLShift64(next, shift)) | prev;
    prev = JreURShift64(next, shiftInv);
  }
  return prev;
}

void OrgSpongycastleMathEcLongArray_addShiftedByBitsSafeWithOrgSpongycastleMathEcLongArray_withInt_withInt_(OrgSpongycastleMathEcLongArray *self, OrgSpongycastleMathEcLongArray *other, jint otherDegree, jint bits) {
  jint otherLen = JreURShift32((otherDegree + 63), 6);
  jint words = JreURShift32(bits, 6);
  jint shift = bits & (jint) 0x3F;
  if (shift == 0) {
    OrgSpongycastleMathEcLongArray_addWithLongArray_withInt_withLongArray_withInt_withInt_(self->m_ints_, words, ((OrgSpongycastleMathEcLongArray *) nil_chk(other))->m_ints_, 0, otherLen);
    return;
  }
  jlong carry = OrgSpongycastleMathEcLongArray_addShiftedUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(self->m_ints_, words, ((OrgSpongycastleMathEcLongArray *) nil_chk(other))->m_ints_, 0, otherLen, shift);
  if (carry != 0LL) {
    *IOSLongArray_GetRef(nil_chk(self->m_ints_), otherLen + words) ^= carry;
  }
}

jlong OrgSpongycastleMathEcLongArray_addShiftedUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *y, jint yOff, jint count, jint shift) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint shiftInv = 64 - shift;
  jlong prev = 0;
  for (jint i = 0; i < count; ++i) {
    jlong next = IOSLongArray_Get(nil_chk(y), yOff + i);
    *IOSLongArray_GetRef(nil_chk(x), xOff + i) ^= (JreLShift64(next, shift)) | prev;
    prev = JreURShift64(next, shiftInv);
  }
  return prev;
}

jlong OrgSpongycastleMathEcLongArray_addShiftedDownWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *y, jint yOff, jint count, jint shift) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint shiftInv = 64 - shift;
  jlong prev = 0;
  jint i = count;
  while (--i >= 0) {
    jlong next = IOSLongArray_Get(nil_chk(y), yOff + i);
    *IOSLongArray_GetRef(nil_chk(x), xOff + i) ^= (JreURShift64(next, shift)) | prev;
    prev = JreLShift64(next, shiftInv);
  }
  return prev;
}

void OrgSpongycastleMathEcLongArray_addWithLongArray_withInt_withLongArray_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *y, jint yOff, jint count) {
  OrgSpongycastleMathEcLongArray_initialize();
  for (jint i = 0; i < count; ++i) {
    *IOSLongArray_GetRef(nil_chk(x), xOff + i) ^= IOSLongArray_Get(nil_chk(y), yOff + i);
  }
}

void OrgSpongycastleMathEcLongArray_addWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *y, jint yOff, IOSLongArray *z, jint zOff, jint count) {
  OrgSpongycastleMathEcLongArray_initialize();
  for (jint i = 0; i < count; ++i) {
    *IOSLongArray_GetRef(nil_chk(z), zOff + i) = IOSLongArray_Get(nil_chk(x), xOff + i) ^ IOSLongArray_Get(nil_chk(y), yOff + i);
  }
}

void OrgSpongycastleMathEcLongArray_addBothWithLongArray_withInt_withLongArray_withInt_withLongArray_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *y1, jint y1Off, IOSLongArray *y2, jint y2Off, jint count) {
  OrgSpongycastleMathEcLongArray_initialize();
  for (jint i = 0; i < count; ++i) {
    *IOSLongArray_GetRef(nil_chk(x), xOff + i) ^= IOSLongArray_Get(nil_chk(y1), y1Off + i) ^ IOSLongArray_Get(nil_chk(y2), y2Off + i);
  }
}

void OrgSpongycastleMathEcLongArray_distributeWithLongArray_withInt_withInt_withInt_withInt_(IOSLongArray *x, jint src, jint dst1, jint dst2, jint count) {
  OrgSpongycastleMathEcLongArray_initialize();
  for (jint i = 0; i < count; ++i) {
    jlong v = IOSLongArray_Get(nil_chk(x), src + i);
    *IOSLongArray_GetRef(x, dst1 + i) ^= v;
    *IOSLongArray_GetRef(x, dst2 + i) ^= v;
  }
}

void OrgSpongycastleMathEcLongArray_flipWordWithLongArray_withInt_withInt_withLong_(IOSLongArray *buf, jint off, jint bit, jlong word) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint n = off + (JreURShift32(bit, 6));
  jint shift = bit & (jint) 0x3F;
  if (shift == 0) {
    *IOSLongArray_GetRef(nil_chk(buf), n) ^= word;
  }
  else {
    *IOSLongArray_GetRef(nil_chk(buf), n) ^= JreLShift64(word, shift);
    JreURShiftAssignLong(&word, (64 - shift));
    if (word != 0) {
      *IOSLongArray_GetRef(buf, ++n) ^= word;
    }
  }
}

jboolean OrgSpongycastleMathEcLongArray_testBitWithLongArray_withInt_withInt_(IOSLongArray *buf, jint off, jint n) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint theInt = JreURShift32(n, 6);
  jint theBit = n & (jint) 0x3F;
  jlong tester = JreLShift64(1LL, theBit);
  return (IOSLongArray_Get(nil_chk(buf), off + theInt) & tester) != 0;
}

void OrgSpongycastleMathEcLongArray_flipBitWithLongArray_withInt_withInt_(IOSLongArray *buf, jint off, jint n) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint theInt = JreURShift32(n, 6);
  jint theBit = n & (jint) 0x3F;
  jlong flipper = JreLShift64(1LL, theBit);
  *IOSLongArray_GetRef(nil_chk(buf), off + theInt) ^= flipper;
}

void OrgSpongycastleMathEcLongArray_multiplyWordWithLong_withLongArray_withInt_withLongArray_withInt_(jlong a, IOSLongArray *b, jint bLen, IOSLongArray *c, jint cOff) {
  OrgSpongycastleMathEcLongArray_initialize();
  if ((a & 1LL) != 0LL) {
    OrgSpongycastleMathEcLongArray_addWithLongArray_withInt_withLongArray_withInt_withInt_(c, cOff, b, 0, bLen);
  }
  jint k = 1;
  while ((JreURShiftAssignLong(&a, 1)) != 0LL) {
    if ((a & 1LL) != 0LL) {
      jlong carry = OrgSpongycastleMathEcLongArray_addShiftedUpWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(c, cOff, b, 0, bLen, k);
      if (carry != 0LL) {
        *IOSLongArray_GetRef(nil_chk(c), cOff + bLen) ^= carry;
      }
    }
    ++k;
  }
}

OrgSpongycastleMathEcLongArray *OrgSpongycastleMathEcLongArray_reduceResultWithLongArray_withInt_withInt_withInt_withIntArray_(IOSLongArray *buf, jint off, jint len, jint m, IOSIntArray *ks) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint rLen = OrgSpongycastleMathEcLongArray_reduceInPlaceWithLongArray_withInt_withInt_withInt_withIntArray_(buf, off, len, m, ks);
  return new_OrgSpongycastleMathEcLongArray_initWithLongArray_withInt_withInt_(buf, off, rLen);
}

jint OrgSpongycastleMathEcLongArray_reduceInPlaceWithLongArray_withInt_withInt_withInt_withIntArray_(IOSLongArray *buf, jint off, jint len, jint m, IOSIntArray *ks) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint mLen = JreURShift32((m + 63), 6);
  if (len < mLen) {
    return len;
  }
  jint numBits = JavaLangMath_minWithInt_withInt_(JreLShift32(len, 6), (JreLShift32(m, 1)) - 1);
  jint excessBits = (JreLShift32(len, 6)) - numBits;
  while (excessBits >= 64) {
    --len;
    excessBits -= 64;
  }
  jint kLen = ((IOSIntArray *) nil_chk(ks))->size_;
  jint kMax = IOSIntArray_Get(ks, kLen - 1);
  jint kNext = kLen > 1 ? IOSIntArray_Get(ks, kLen - 2) : 0;
  jint wordWiseLimit = JavaLangMath_maxWithInt_withInt_(m, kMax + 64);
  jint vectorableWords = JreRShift32((excessBits + JavaLangMath_minWithInt_withInt_(numBits - wordWiseLimit, m - kNext)), 6);
  if (vectorableWords > 1) {
    jint vectorWiseWords = len - vectorableWords;
    OrgSpongycastleMathEcLongArray_reduceVectorWiseWithLongArray_withInt_withInt_withInt_withInt_withIntArray_(buf, off, len, vectorWiseWords, m, ks);
    while (len > vectorWiseWords) {
      *IOSLongArray_GetRef(nil_chk(buf), off + --len) = 0LL;
    }
    numBits = JreLShift32(vectorWiseWords, 6);
  }
  if (numBits > wordWiseLimit) {
    OrgSpongycastleMathEcLongArray_reduceWordWiseWithLongArray_withInt_withInt_withInt_withInt_withIntArray_(buf, off, len, wordWiseLimit, m, ks);
    numBits = wordWiseLimit;
  }
  if (numBits > m) {
    OrgSpongycastleMathEcLongArray_reduceBitWiseWithLongArray_withInt_withInt_withInt_withIntArray_(buf, off, numBits, m, ks);
  }
  return mLen;
}

void OrgSpongycastleMathEcLongArray_reduceBitWiseWithLongArray_withInt_withInt_withInt_withIntArray_(IOSLongArray *buf, jint off, jint bitlength, jint m, IOSIntArray *ks) {
  OrgSpongycastleMathEcLongArray_initialize();
  while (--bitlength >= m) {
    if (OrgSpongycastleMathEcLongArray_testBitWithLongArray_withInt_withInt_(buf, off, bitlength)) {
      OrgSpongycastleMathEcLongArray_reduceBitWithLongArray_withInt_withInt_withInt_withIntArray_(buf, off, bitlength, m, ks);
    }
  }
}

void OrgSpongycastleMathEcLongArray_reduceBitWithLongArray_withInt_withInt_withInt_withIntArray_(IOSLongArray *buf, jint off, jint bit, jint m, IOSIntArray *ks) {
  OrgSpongycastleMathEcLongArray_initialize();
  OrgSpongycastleMathEcLongArray_flipBitWithLongArray_withInt_withInt_(buf, off, bit);
  jint n = bit - m;
  jint j = ((IOSIntArray *) nil_chk(ks))->size_;
  while (--j >= 0) {
    OrgSpongycastleMathEcLongArray_flipBitWithLongArray_withInt_withInt_(buf, off, IOSIntArray_Get(ks, j) + n);
  }
  OrgSpongycastleMathEcLongArray_flipBitWithLongArray_withInt_withInt_(buf, off, n);
}

void OrgSpongycastleMathEcLongArray_reduceWordWiseWithLongArray_withInt_withInt_withInt_withInt_withIntArray_(IOSLongArray *buf, jint off, jint len, jint toBit, jint m, IOSIntArray *ks) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint toPos = JreURShift32(toBit, 6);
  while (--len > toPos) {
    jlong word = IOSLongArray_Get(nil_chk(buf), off + len);
    if (word != 0) {
      *IOSLongArray_GetRef(buf, off + len) = 0;
      OrgSpongycastleMathEcLongArray_reduceWordWithLongArray_withInt_withInt_withLong_withInt_withIntArray_(buf, off, (JreLShift32(len, 6)), word, m, ks);
    }
  }
  {
    jint partial = toBit & (jint) 0x3F;
    jlong word = JreURShift64(IOSLongArray_Get(nil_chk(buf), off + toPos), partial);
    if (word != 0) {
      *IOSLongArray_GetRef(buf, off + toPos) ^= JreLShift64(word, partial);
      OrgSpongycastleMathEcLongArray_reduceWordWithLongArray_withInt_withInt_withLong_withInt_withIntArray_(buf, off, toBit, word, m, ks);
    }
  }
}

void OrgSpongycastleMathEcLongArray_reduceWordWithLongArray_withInt_withInt_withLong_withInt_withIntArray_(IOSLongArray *buf, jint off, jint bit, jlong word, jint m, IOSIntArray *ks) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint offset = bit - m;
  jint j = ((IOSIntArray *) nil_chk(ks))->size_;
  while (--j >= 0) {
    OrgSpongycastleMathEcLongArray_flipWordWithLongArray_withInt_withInt_withLong_(buf, off, offset + IOSIntArray_Get(ks, j), word);
  }
  OrgSpongycastleMathEcLongArray_flipWordWithLongArray_withInt_withInt_withLong_(buf, off, offset, word);
}

void OrgSpongycastleMathEcLongArray_reduceVectorWiseWithLongArray_withInt_withInt_withInt_withInt_withIntArray_(IOSLongArray *buf, jint off, jint len, jint words, jint m, IOSIntArray *ks) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint baseBit = (JreLShift32(words, 6)) - m;
  jint j = ((IOSIntArray *) nil_chk(ks))->size_;
  while (--j >= 0) {
    OrgSpongycastleMathEcLongArray_flipVectorWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(buf, off, buf, off + words, len - words, baseBit + IOSIntArray_Get(ks, j));
  }
  OrgSpongycastleMathEcLongArray_flipVectorWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(buf, off, buf, off + words, len - words, baseBit);
}

void OrgSpongycastleMathEcLongArray_flipVectorWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *y, jint yOff, jint yLen, jint bits) {
  OrgSpongycastleMathEcLongArray_initialize();
  xOff += JreURShift32(bits, 6);
  bits &= (jint) 0x3F;
  if (bits == 0) {
    OrgSpongycastleMathEcLongArray_addWithLongArray_withInt_withLongArray_withInt_withInt_(x, xOff, y, yOff, yLen);
  }
  else {
    jlong carry = OrgSpongycastleMathEcLongArray_addShiftedDownWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(x, xOff + 1, y, yOff, yLen, 64 - bits);
    *IOSLongArray_GetRef(nil_chk(x), xOff) ^= carry;
  }
}

void OrgSpongycastleMathEcLongArray_squareInPlaceWithLongArray_withInt_withInt_withIntArray_(IOSLongArray *x, jint xLen, jint m, IOSIntArray *ks) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint pos = JreLShift32(xLen, 1);
  while (--xLen >= 0) {
    jlong xVal = IOSLongArray_Get(nil_chk(x), xLen);
    *IOSLongArray_GetRef(x, --pos) = OrgSpongycastleMathEcLongArray_interleave2_32to64WithInt_((jint) (JreURShift64(xVal, 32)));
    *IOSLongArray_GetRef(x, --pos) = OrgSpongycastleMathEcLongArray_interleave2_32to64WithInt_((jint) xVal);
  }
}

void OrgSpongycastleMathEcLongArray_interleaveWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *z, jint zOff, jint count, jint width) {
  OrgSpongycastleMathEcLongArray_initialize();
  switch (width) {
    case 3:
    OrgSpongycastleMathEcLongArray_interleave3WithLongArray_withInt_withLongArray_withInt_withInt_(x, xOff, z, zOff, count);
    break;
    case 5:
    OrgSpongycastleMathEcLongArray_interleave5WithLongArray_withInt_withLongArray_withInt_withInt_(x, xOff, z, zOff, count);
    break;
    case 7:
    OrgSpongycastleMathEcLongArray_interleave7WithLongArray_withInt_withLongArray_withInt_withInt_(x, xOff, z, zOff, count);
    break;
    default:
    OrgSpongycastleMathEcLongArray_interleave2_nWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(x, xOff, z, zOff, count, IOSByteArray_Get(nil_chk(OrgSpongycastleMathEcLongArray_bitLengths), width) - 1);
    break;
  }
}

void OrgSpongycastleMathEcLongArray_interleave3WithLongArray_withInt_withLongArray_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *z, jint zOff, jint count) {
  OrgSpongycastleMathEcLongArray_initialize();
  for (jint i = 0; i < count; ++i) {
    *IOSLongArray_GetRef(nil_chk(z), zOff + i) = OrgSpongycastleMathEcLongArray_interleave3WithLong_(IOSLongArray_Get(nil_chk(x), xOff + i));
  }
}

jlong OrgSpongycastleMathEcLongArray_interleave3WithLong_(jlong x) {
  OrgSpongycastleMathEcLongArray_initialize();
  jlong z = x & (JreLShift64(1LL, 63));
  return z | OrgSpongycastleMathEcLongArray_interleave3_21to63WithInt_((jint) x & (jint) 0x1FFFFF) | (JreLShift64(OrgSpongycastleMathEcLongArray_interleave3_21to63WithInt_((jint) (JreURShift64(x, 21)) & (jint) 0x1FFFFF), 1)) | (JreLShift64(OrgSpongycastleMathEcLongArray_interleave3_21to63WithInt_((jint) (JreURShift64(x, 42)) & (jint) 0x1FFFFF), 2));
}

jlong OrgSpongycastleMathEcLongArray_interleave3_21to63WithInt_(jint x) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint r00 = IOSIntArray_Get(nil_chk(OrgSpongycastleMathEcLongArray_INTERLEAVE3_TABLE), x & (jint) 0x7F);
  jint r21 = IOSIntArray_Get(OrgSpongycastleMathEcLongArray_INTERLEAVE3_TABLE, (JreURShift32(x, 7)) & (jint) 0x7F);
  jint r42 = IOSIntArray_Get(OrgSpongycastleMathEcLongArray_INTERLEAVE3_TABLE, JreURShift32(x, 14));
  return (JreLShift64((r42 & (jlong) 0xFFFFFFFFLL), 42)) | (JreLShift64((r21 & (jlong) 0xFFFFFFFFLL), 21)) | (r00 & (jlong) 0xFFFFFFFFLL);
}

void OrgSpongycastleMathEcLongArray_interleave5WithLongArray_withInt_withLongArray_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *z, jint zOff, jint count) {
  OrgSpongycastleMathEcLongArray_initialize();
  for (jint i = 0; i < count; ++i) {
    *IOSLongArray_GetRef(nil_chk(z), zOff + i) = OrgSpongycastleMathEcLongArray_interleave5WithLong_(IOSLongArray_Get(nil_chk(x), xOff + i));
  }
}

jlong OrgSpongycastleMathEcLongArray_interleave5WithLong_(jlong x) {
  OrgSpongycastleMathEcLongArray_initialize();
  return OrgSpongycastleMathEcLongArray_interleave3_13to65WithInt_((jint) x & (jint) 0x1FFF) | (JreLShift64(OrgSpongycastleMathEcLongArray_interleave3_13to65WithInt_((jint) (JreURShift64(x, 13)) & (jint) 0x1FFF), 1)) | (JreLShift64(OrgSpongycastleMathEcLongArray_interleave3_13to65WithInt_((jint) (JreURShift64(x, 26)) & (jint) 0x1FFF), 2)) | (JreLShift64(OrgSpongycastleMathEcLongArray_interleave3_13to65WithInt_((jint) (JreURShift64(x, 39)) & (jint) 0x1FFF), 3)) | (JreLShift64(OrgSpongycastleMathEcLongArray_interleave3_13to65WithInt_((jint) (JreURShift64(x, 52)) & (jint) 0x1FFF), 4));
}

jlong OrgSpongycastleMathEcLongArray_interleave3_13to65WithInt_(jint x) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint r00 = IOSIntArray_Get(nil_chk(OrgSpongycastleMathEcLongArray_INTERLEAVE5_TABLE), x & (jint) 0x7F);
  jint r35 = IOSIntArray_Get(OrgSpongycastleMathEcLongArray_INTERLEAVE5_TABLE, JreURShift32(x, 7));
  return (JreLShift64((r35 & (jlong) 0xFFFFFFFFLL), 35)) | (r00 & (jlong) 0xFFFFFFFFLL);
}

void OrgSpongycastleMathEcLongArray_interleave7WithLongArray_withInt_withLongArray_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *z, jint zOff, jint count) {
  OrgSpongycastleMathEcLongArray_initialize();
  for (jint i = 0; i < count; ++i) {
    *IOSLongArray_GetRef(nil_chk(z), zOff + i) = OrgSpongycastleMathEcLongArray_interleave7WithLong_(IOSLongArray_Get(nil_chk(x), xOff + i));
  }
}

jlong OrgSpongycastleMathEcLongArray_interleave7WithLong_(jlong x) {
  OrgSpongycastleMathEcLongArray_initialize();
  jlong z = x & (JreLShift64(1LL, 63));
  return z | IOSLongArray_Get(nil_chk(OrgSpongycastleMathEcLongArray_INTERLEAVE7_TABLE), (jint) x & (jint) 0x1FF) | (JreLShift64(IOSLongArray_Get(OrgSpongycastleMathEcLongArray_INTERLEAVE7_TABLE, (jint) (JreURShift64(x, 9)) & (jint) 0x1FF), 1)) | (JreLShift64(IOSLongArray_Get(OrgSpongycastleMathEcLongArray_INTERLEAVE7_TABLE, (jint) (JreURShift64(x, 18)) & (jint) 0x1FF), 2)) | (JreLShift64(IOSLongArray_Get(OrgSpongycastleMathEcLongArray_INTERLEAVE7_TABLE, (jint) (JreURShift64(x, 27)) & (jint) 0x1FF), 3)) | (JreLShift64(IOSLongArray_Get(OrgSpongycastleMathEcLongArray_INTERLEAVE7_TABLE, (jint) (JreURShift64(x, 36)) & (jint) 0x1FF), 4)) | (JreLShift64(IOSLongArray_Get(OrgSpongycastleMathEcLongArray_INTERLEAVE7_TABLE, (jint) (JreURShift64(x, 45)) & (jint) 0x1FF), 5)) | (JreLShift64(IOSLongArray_Get(OrgSpongycastleMathEcLongArray_INTERLEAVE7_TABLE, (jint) (JreURShift64(x, 54)) & (jint) 0x1FF), 6));
}

void OrgSpongycastleMathEcLongArray_interleave2_nWithLongArray_withInt_withLongArray_withInt_withInt_withInt_(IOSLongArray *x, jint xOff, IOSLongArray *z, jint zOff, jint count, jint rounds) {
  OrgSpongycastleMathEcLongArray_initialize();
  for (jint i = 0; i < count; ++i) {
    *IOSLongArray_GetRef(nil_chk(z), zOff + i) = OrgSpongycastleMathEcLongArray_interleave2_nWithLong_withInt_(IOSLongArray_Get(nil_chk(x), xOff + i), rounds);
  }
}

jlong OrgSpongycastleMathEcLongArray_interleave2_nWithLong_withInt_(jlong x, jint rounds) {
  OrgSpongycastleMathEcLongArray_initialize();
  while (rounds > 1) {
    rounds -= 2;
    x = OrgSpongycastleMathEcLongArray_interleave4_16to64WithInt_((jint) x & (jint) 0xFFFF) | (JreLShift64(OrgSpongycastleMathEcLongArray_interleave4_16to64WithInt_((jint) (JreURShift64(x, 16)) & (jint) 0xFFFF), 1)) | (JreLShift64(OrgSpongycastleMathEcLongArray_interleave4_16to64WithInt_((jint) (JreURShift64(x, 32)) & (jint) 0xFFFF), 2)) | (JreLShift64(OrgSpongycastleMathEcLongArray_interleave4_16to64WithInt_((jint) (JreURShift64(x, 48)) & (jint) 0xFFFF), 3));
  }
  if (rounds > 0) {
    x = OrgSpongycastleMathEcLongArray_interleave2_32to64WithInt_((jint) x) | (JreLShift64(OrgSpongycastleMathEcLongArray_interleave2_32to64WithInt_((jint) (JreURShift64(x, 32))), 1));
  }
  return x;
}

jlong OrgSpongycastleMathEcLongArray_interleave4_16to64WithInt_(jint x) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint r00 = IOSIntArray_Get(nil_chk(OrgSpongycastleMathEcLongArray_INTERLEAVE4_TABLE), x & (jint) 0xFF);
  jint r32 = IOSIntArray_Get(OrgSpongycastleMathEcLongArray_INTERLEAVE4_TABLE, JreURShift32(x, 8));
  return (JreLShift64((r32 & (jlong) 0xFFFFFFFFLL), 32)) | (r00 & (jlong) 0xFFFFFFFFLL);
}

jlong OrgSpongycastleMathEcLongArray_interleave2_32to64WithInt_(jint x) {
  OrgSpongycastleMathEcLongArray_initialize();
  jint r00 = IOSShortArray_Get(nil_chk(OrgSpongycastleMathEcLongArray_INTERLEAVE2_TABLE), x & (jint) 0xFF) | (JreLShift32(IOSShortArray_Get(OrgSpongycastleMathEcLongArray_INTERLEAVE2_TABLE, (JreURShift32(x, 8)) & (jint) 0xFF), 16));
  jint r32 = IOSShortArray_Get(OrgSpongycastleMathEcLongArray_INTERLEAVE2_TABLE, (JreURShift32(x, 16)) & (jint) 0xFF) | (JreLShift32(IOSShortArray_Get(OrgSpongycastleMathEcLongArray_INTERLEAVE2_TABLE, JreURShift32(x, 24)), 16));
  return (JreLShift64((r32 & (jlong) 0xFFFFFFFFLL), 32)) | (r00 & (jlong) 0xFFFFFFFFLL);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcLongArray)
