//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/math/ec/DoubleAddMultiplier.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/math/ec/AbstractECMultiplier.h"
#include "org/spongycastle/math/ec/DoubleAddMultiplier.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECPoint.h"

@implementation OrgSpongycastleMathEcDoubleAddMultiplier

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleMathEcDoubleAddMultiplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgSpongycastleMathEcECPoint *)multiplyPositiveWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p
                                                            withJavaMathBigInteger:(JavaMathBigInteger *)k {
  IOSObjectArray *R = [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getCurve])) getInfinity], p } count:2 type:OrgSpongycastleMathEcECPoint_class_()];
  jint n = [((JavaMathBigInteger *) nil_chk(k)) bitLength];
  for (jint i = 0; i < n; ++i) {
    jint b = [k testBitWithInt:i] ? 1 : 0;
    jint bp = 1 - b;
    (void) IOSObjectArray_Set(R, bp, [((OrgSpongycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(R, bp))) twicePlusWithOrgSpongycastleMathEcECPoint:IOSObjectArray_Get(R, b)]);
  }
  return IOSObjectArray_Get(R, 0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x4, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(multiplyPositiveWithOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "multiplyPositive", "LOrgSpongycastleMathEcECPoint;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcDoubleAddMultiplier = { "DoubleAddMultiplier", "org.spongycastle.math.ec", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcDoubleAddMultiplier;
}

@end

void OrgSpongycastleMathEcDoubleAddMultiplier_init(OrgSpongycastleMathEcDoubleAddMultiplier *self) {
  OrgSpongycastleMathEcAbstractECMultiplier_init(self);
}

OrgSpongycastleMathEcDoubleAddMultiplier *new_OrgSpongycastleMathEcDoubleAddMultiplier_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcDoubleAddMultiplier, init)
}

OrgSpongycastleMathEcDoubleAddMultiplier *create_OrgSpongycastleMathEcDoubleAddMultiplier_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcDoubleAddMultiplier, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcDoubleAddMultiplier)
