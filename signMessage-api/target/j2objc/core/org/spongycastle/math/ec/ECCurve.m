//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/math/ec/ECCurve.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/math/BigInteger.h"
#include "java/util/Hashtable.h"
#include "java/util/Random.h"
#include "org/spongycastle/math/ec/ECAlgorithms.h"
#include "org/spongycastle/math/ec/ECConstants.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECFieldElement.h"
#include "org/spongycastle/math/ec/ECMultiplier.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/math/ec/GLVMultiplier.h"
#include "org/spongycastle/math/ec/LongArray.h"
#include "org/spongycastle/math/ec/PreCompInfo.h"
#include "org/spongycastle/math/ec/Tnaf.h"
#include "org/spongycastle/math/ec/WNafL2RMultiplier.h"
#include "org/spongycastle/math/ec/WTauNafMultiplier.h"
#include "org/spongycastle/math/ec/endo/ECEndomorphism.h"
#include "org/spongycastle/math/ec/endo/GLVEndomorphism.h"
#include "org/spongycastle/math/field/FiniteField.h"
#include "org/spongycastle/math/field/FiniteFields.h"
#include "org/spongycastle/math/field/PolynomialExtensionField.h"
#include "org/spongycastle/util/BigIntegers.h"
#include "org/spongycastle/util/Integers.h"

__attribute__((unused)) static id<OrgSpongycastleMathEcECMultiplier> OrgSpongycastleMathEcECCurve_createDefaultMultiplier(OrgSpongycastleMathEcECCurve *self);

__attribute__((unused)) static OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECCurve_importPointWithOrgSpongycastleMathEcECPoint_(OrgSpongycastleMathEcECCurve *self, OrgSpongycastleMathEcECPoint *p);

@interface OrgSpongycastleMathEcECCurve_Config () {
 @public
  OrgSpongycastleMathEcECCurve *this$0_;
}

@end

inline jint OrgSpongycastleMathEcECCurve_Fp_get_FP_DEFAULT_COORDS(void);
#define OrgSpongycastleMathEcECCurve_Fp_FP_DEFAULT_COORDS 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleMathEcECCurve_Fp, FP_DEFAULT_COORDS, jint)

@interface OrgSpongycastleMathEcECCurve_AbstractF2m () {
 @public
  IOSObjectArray *si_;
}

+ (id<OrgSpongycastleMathFieldFiniteField>)buildFieldWithInt:(jint)m
                                                     withInt:(jint)k1
                                                     withInt:(jint)k2
                                                     withInt:(jint)k3;

- (OrgSpongycastleMathEcECFieldElement *)solveQuadraticEquationWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)beta;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECCurve_AbstractF2m, si_, IOSObjectArray *)

__attribute__((unused)) static id<OrgSpongycastleMathFieldFiniteField> OrgSpongycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(jint m, jint k1, jint k2, jint k3);

__attribute__((unused)) static OrgSpongycastleMathEcECFieldElement *OrgSpongycastleMathEcECCurve_AbstractF2m_solveQuadraticEquationWithOrgSpongycastleMathEcECFieldElement_(OrgSpongycastleMathEcECCurve_AbstractF2m *self, OrgSpongycastleMathEcECFieldElement *beta);

@interface OrgSpongycastleMathEcECCurve_F2m () {
 @public
  jint m_;
  jint k1_;
  jint k2_;
  jint k3_;
  OrgSpongycastleMathEcECPoint_F2m *infinity_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleMathEcECCurve_F2m, infinity_, OrgSpongycastleMathEcECPoint_F2m *)

inline jint OrgSpongycastleMathEcECCurve_F2m_get_F2M_DEFAULT_COORDS(void);
#define OrgSpongycastleMathEcECCurve_F2m_F2M_DEFAULT_COORDS 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleMathEcECCurve_F2m, F2M_DEFAULT_COORDS, jint)

@implementation OrgSpongycastleMathEcECCurve

+ (IOSIntArray *)getAllCoordinateSystems {
  return OrgSpongycastleMathEcECCurve_getAllCoordinateSystems();
}

- (instancetype)initWithOrgSpongycastleMathFieldFiniteField:(id<OrgSpongycastleMathFieldFiniteField>)field {
  OrgSpongycastleMathEcECCurve_initWithOrgSpongycastleMathFieldFiniteField_(self, field);
  return self;
}

- (jint)getFieldSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgSpongycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isValidFieldElementWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgSpongycastleMathEcECCurve_Config *)configure {
  @synchronized(self) {
    return new_OrgSpongycastleMathEcECCurve_Config_initWithOrgSpongycastleMathEcECCurve_withInt_withOrgSpongycastleMathEcEndoECEndomorphism_withOrgSpongycastleMathEcECMultiplier_(self, self->coord_, self->endomorphism_, self->multiplier_);
  }
}

- (OrgSpongycastleMathEcECPoint *)validatePointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                               withJavaMathBigInteger:(JavaMathBigInteger *)y {
  OrgSpongycastleMathEcECPoint *p = [self createPointWithJavaMathBigInteger:x withJavaMathBigInteger:y];
  if (![((OrgSpongycastleMathEcECPoint *) nil_chk(p)) isValid]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point coordinates");
  }
  return p;
}

- (OrgSpongycastleMathEcECPoint *)validatePointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                               withJavaMathBigInteger:(JavaMathBigInteger *)y
                                                          withBoolean:(jboolean)withCompression {
  OrgSpongycastleMathEcECPoint *p = [self createPointWithJavaMathBigInteger:x withJavaMathBigInteger:y withBoolean:withCompression];
  if (![((OrgSpongycastleMathEcECPoint *) nil_chk(p)) isValid]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point coordinates");
  }
  return p;
}

- (OrgSpongycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                             withJavaMathBigInteger:(JavaMathBigInteger *)y {
  return [self createPointWithJavaMathBigInteger:x withJavaMathBigInteger:y withBoolean:false];
}

- (OrgSpongycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                             withJavaMathBigInteger:(JavaMathBigInteger *)y
                                                        withBoolean:(jboolean)withCompression {
  return [self createRawPointWithOrgSpongycastleMathEcECFieldElement:[self fromBigIntegerWithJavaMathBigInteger:x] withOrgSpongycastleMathEcECFieldElement:[self fromBigIntegerWithJavaMathBigInteger:y] withBoolean:withCompression];
}

- (OrgSpongycastleMathEcECCurve *)cloneCurve {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgSpongycastleMathEcECPoint *)createRawPointWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y
                                                                            withBoolean:(jboolean)withCompression {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgSpongycastleMathEcECPoint *)createRawPointWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y
                                           withOrgSpongycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                                            withBoolean:(jboolean)withCompression {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgSpongycastleMathEcECMultiplier>)createDefaultMultiplier {
  return OrgSpongycastleMathEcECCurve_createDefaultMultiplier(self);
}

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord {
  return coord == OrgSpongycastleMathEcECCurve_COORD_AFFINE;
}

- (id<OrgSpongycastleMathEcPreCompInfo>)getPreCompInfoWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)point
                                                                          withNSString:(NSString *)name {
  [self checkPointWithOrgSpongycastleMathEcECPoint:point];
  @synchronized(point) {
    JavaUtilHashtable *table = ((OrgSpongycastleMathEcECPoint *) nil_chk(point))->preCompTable_;
    return table == nil ? nil : (id<OrgSpongycastleMathEcPreCompInfo>) cast_check([table getWithId:name], OrgSpongycastleMathEcPreCompInfo_class_());
  }
}

- (void)setPreCompInfoWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)point
                                          withNSString:(NSString *)name
                  withOrgSpongycastleMathEcPreCompInfo:(id<OrgSpongycastleMathEcPreCompInfo>)preCompInfo {
  [self checkPointWithOrgSpongycastleMathEcECPoint:point];
  @synchronized(point) {
    JavaUtilHashtable *table = ((OrgSpongycastleMathEcECPoint *) nil_chk(point))->preCompTable_;
    if (nil == table) {
      point->preCompTable_ = table = new_JavaUtilHashtable_initWithInt_(4);
    }
    (void) [table putWithId:name withId:preCompInfo];
  }
}

- (OrgSpongycastleMathEcECPoint *)importPointWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p {
  return OrgSpongycastleMathEcECCurve_importPointWithOrgSpongycastleMathEcECPoint_(self, p);
}

- (void)normalizeAllWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)points {
  [self normalizeAllWithOrgSpongycastleMathEcECPointArray:points withInt:0 withInt:((IOSObjectArray *) nil_chk(points))->size_ withOrgSpongycastleMathEcECFieldElement:nil];
}

- (void)normalizeAllWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)points
                                                  withInt:(jint)off
                                                  withInt:(jint)len
                  withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)iso {
  [self checkPointsWithOrgSpongycastleMathEcECPointArray:points withInt:off withInt:len];
  switch ([self getCoordinateSystem]) {
    case OrgSpongycastleMathEcECCurve_COORD_AFFINE:
    case OrgSpongycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    {
      if (iso != nil) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'iso' not valid for affine coordinates");
      }
      return;
    }
  }
  IOSObjectArray *zs = [IOSObjectArray newArrayWithLength:len type:OrgSpongycastleMathEcECFieldElement_class_()];
  IOSIntArray *indices = [IOSIntArray newArrayWithLength:len];
  jint count = 0;
  for (jint i = 0; i < len; ++i) {
    OrgSpongycastleMathEcECPoint *p = IOSObjectArray_Get(nil_chk(points), off + i);
    if (nil != p && (iso != nil || ![p isNormalized])) {
      (void) IOSObjectArray_Set(zs, count, [p getZCoordWithInt:0]);
      *IOSIntArray_GetRef(indices, count++) = off + i;
    }
  }
  if (count == 0) {
    return;
  }
  OrgSpongycastleMathEcECAlgorithms_montgomeryTrickWithOrgSpongycastleMathEcECFieldElementArray_withInt_withInt_withOrgSpongycastleMathEcECFieldElement_(zs, 0, count, iso);
  for (jint j = 0; j < count; ++j) {
    jint index = IOSIntArray_Get(indices, j);
    (void) IOSObjectArray_Set(nil_chk(points), index, [((OrgSpongycastleMathEcECPoint *) nil_chk(IOSObjectArray_Get(points, index))) normalizeWithOrgSpongycastleMathEcECFieldElement:IOSObjectArray_Get(zs, j)]);
  }
}

- (OrgSpongycastleMathEcECPoint *)getInfinity {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgSpongycastleMathFieldFiniteField>)getField {
  return field_;
}

- (OrgSpongycastleMathEcECFieldElement *)getA {
  return a_;
}

- (OrgSpongycastleMathEcECFieldElement *)getB {
  return b_;
}

- (JavaMathBigInteger *)getOrder {
  return order_;
}

- (JavaMathBigInteger *)getCofactor {
  return cofactor_;
}

- (jint)getCoordinateSystem {
  return coord_;
}

- (OrgSpongycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                  withJavaMathBigInteger:(JavaMathBigInteger *)X1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgSpongycastleMathEcEndoECEndomorphism>)getEndomorphism {
  return endomorphism_;
}

- (id<OrgSpongycastleMathEcECMultiplier>)getMultiplier {
  @synchronized(self) {
    if (self->multiplier_ == nil) {
      self->multiplier_ = [self createDefaultMultiplier];
    }
    return self->multiplier_;
  }
}

- (OrgSpongycastleMathEcECPoint *)decodePointWithByteArray:(IOSByteArray *)encoded {
  OrgSpongycastleMathEcECPoint *p = nil;
  jint expectedLength = ([self getFieldSize] + 7) / 8;
  jbyte type = IOSByteArray_Get(nil_chk(encoded), 0);
  switch (type) {
    case (jint) 0x00:
    {
      if (encoded->size_ != 1) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Incorrect length for infinity encoding");
      }
      p = [self getInfinity];
      break;
    }
    case (jint) 0x02:
    case (jint) 0x03:
    {
      if (encoded->size_ != (expectedLength + 1)) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Incorrect length for compressed encoding");
      }
      jint yTilde = type & 1;
      JavaMathBigInteger *X = OrgSpongycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1, expectedLength);
      p = [self decompressPointWithInt:yTilde withJavaMathBigInteger:X];
      if (![((OrgSpongycastleMathEcECPoint *) nil_chk(p)) satisfiesCofactor]) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point");
      }
      break;
    }
    case (jint) 0x04:
    {
      if (encoded->size_ != (2 * expectedLength + 1)) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Incorrect length for uncompressed encoding");
      }
      JavaMathBigInteger *X = OrgSpongycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1, expectedLength);
      JavaMathBigInteger *Y = OrgSpongycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1 + expectedLength, expectedLength);
      p = [self validatePointWithJavaMathBigInteger:X withJavaMathBigInteger:Y];
      break;
    }
    case (jint) 0x06:
    case (jint) 0x07:
    {
      if (encoded->size_ != (2 * expectedLength + 1)) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Incorrect length for hybrid encoding");
      }
      JavaMathBigInteger *X = OrgSpongycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1, expectedLength);
      JavaMathBigInteger *Y = OrgSpongycastleUtilBigIntegers_fromUnsignedByteArrayWithByteArray_withInt_withInt_(encoded, 1 + expectedLength, expectedLength);
      if ([((JavaMathBigInteger *) nil_chk(Y)) testBitWithInt:0] != (type == (jint) 0x07)) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Inconsistent Y coordinate in hybrid encoding");
      }
      p = [self validatePointWithJavaMathBigInteger:X withJavaMathBigInteger:Y];
      break;
    }
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid point encoding 0x", JavaLangInteger_toStringWithInt_withInt_(type, 16)));
  }
  if (type != (jint) 0x00 && [((OrgSpongycastleMathEcECPoint *) nil_chk(p)) isInfinity]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid infinity encoding");
  }
  return p;
}

- (void)checkPointWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)point {
  if (nil == point || (self != [point getCurve])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'point' must be non-null and on this curve");
  }
}

- (void)checkPointsWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)points {
  [self checkPointsWithOrgSpongycastleMathEcECPointArray:points withInt:0 withInt:((IOSObjectArray *) nil_chk(points))->size_];
}

- (void)checkPointsWithOrgSpongycastleMathEcECPointArray:(IOSObjectArray *)points
                                                 withInt:(jint)off
                                                 withInt:(jint)len {
  if (points == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'points' cannot be null");
  }
  if (off < 0 || len < 0 || (off > (points->size_ - len))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid range specified for 'points'");
  }
  for (jint i = 0; i < len; ++i) {
    OrgSpongycastleMathEcECPoint *point = IOSObjectArray_Get(points, off + i);
    if (nil != point && self != [point getCurve]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'points' entries must be null or on this curve");
    }
  }
}

- (jboolean)equalsWithOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)other {
  return self == other || (nil != other && [((id<OrgSpongycastleMathFieldFiniteField>) nil_chk([self getField])) isEqual:[other getField]] && [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([self getA])) toBigInteger])) isEqual:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([other getA])) toBigInteger]] && [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([self getB])) toBigInteger])) isEqual:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([other getB])) toBigInteger]]);
}

- (jboolean)isEqual:(id)obj {
  return self == obj || ([obj isKindOfClass:[OrgSpongycastleMathEcECCurve class]] && [self equalsWithOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *) cast_chk(obj, [OrgSpongycastleMathEcECCurve class])]);
}

- (NSUInteger)hash {
  return ((jint) [((id<OrgSpongycastleMathFieldFiniteField>) nil_chk([self getField])) hash]) ^ OrgSpongycastleUtilIntegers_rotateLeftWithInt_withInt_(((jint) [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([self getA])) toBigInteger])) hash]), 8) ^ OrgSpongycastleUtilIntegers_rotateLeftWithInt_withInt_(((jint) [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([self getB])) toBigInteger])) hash]), 16);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x401, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 3, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECCurve_Config;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECCurve;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x404, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x404, 8, 10, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcPreCompInfo;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 21, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathFieldFiniteField;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x404, 22, 23, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcEndoECEndomorphism;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECMultiplier;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 26, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 27, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 27, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 31, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 32, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAllCoordinateSystems);
  methods[1].selector = @selector(initWithOrgSpongycastleMathFieldFiniteField:);
  methods[2].selector = @selector(getFieldSize);
  methods[3].selector = @selector(fromBigIntegerWithJavaMathBigInteger:);
  methods[4].selector = @selector(isValidFieldElementWithJavaMathBigInteger:);
  methods[5].selector = @selector(configure);
  methods[6].selector = @selector(validatePointWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[7].selector = @selector(validatePointWithJavaMathBigInteger:withJavaMathBigInteger:withBoolean:);
  methods[8].selector = @selector(createPointWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[9].selector = @selector(createPointWithJavaMathBigInteger:withJavaMathBigInteger:withBoolean:);
  methods[10].selector = @selector(cloneCurve);
  methods[11].selector = @selector(createRawPointWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:withBoolean:);
  methods[12].selector = @selector(createRawPointWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElementArray:withBoolean:);
  methods[13].selector = @selector(createDefaultMultiplier);
  methods[14].selector = @selector(supportsCoordinateSystemWithInt:);
  methods[15].selector = @selector(getPreCompInfoWithOrgSpongycastleMathEcECPoint:withNSString:);
  methods[16].selector = @selector(setPreCompInfoWithOrgSpongycastleMathEcECPoint:withNSString:withOrgSpongycastleMathEcPreCompInfo:);
  methods[17].selector = @selector(importPointWithOrgSpongycastleMathEcECPoint:);
  methods[18].selector = @selector(normalizeAllWithOrgSpongycastleMathEcECPointArray:);
  methods[19].selector = @selector(normalizeAllWithOrgSpongycastleMathEcECPointArray:withInt:withInt:withOrgSpongycastleMathEcECFieldElement:);
  methods[20].selector = @selector(getInfinity);
  methods[21].selector = @selector(getField);
  methods[22].selector = @selector(getA);
  methods[23].selector = @selector(getB);
  methods[24].selector = @selector(getOrder);
  methods[25].selector = @selector(getCofactor);
  methods[26].selector = @selector(getCoordinateSystem);
  methods[27].selector = @selector(decompressPointWithInt:withJavaMathBigInteger:);
  methods[28].selector = @selector(getEndomorphism);
  methods[29].selector = @selector(getMultiplier);
  methods[30].selector = @selector(decodePointWithByteArray:);
  methods[31].selector = @selector(checkPointWithOrgSpongycastleMathEcECPoint:);
  methods[32].selector = @selector(checkPointsWithOrgSpongycastleMathEcECPointArray:);
  methods[33].selector = @selector(checkPointsWithOrgSpongycastleMathEcECPointArray:withInt:withInt:);
  methods[34].selector = @selector(equalsWithOrgSpongycastleMathEcECCurve:);
  methods[35].selector = @selector(isEqual:);
  methods[36].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COORD_AFFINE", "I", .constantValue.asInt = OrgSpongycastleMathEcECCurve_COORD_AFFINE, 0x19, -1, -1, -1, -1 },
    { "COORD_HOMOGENEOUS", "I", .constantValue.asInt = OrgSpongycastleMathEcECCurve_COORD_HOMOGENEOUS, 0x19, -1, -1, -1, -1 },
    { "COORD_JACOBIAN", "I", .constantValue.asInt = OrgSpongycastleMathEcECCurve_COORD_JACOBIAN, 0x19, -1, -1, -1, -1 },
    { "COORD_JACOBIAN_CHUDNOVSKY", "I", .constantValue.asInt = OrgSpongycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY, 0x19, -1, -1, -1, -1 },
    { "COORD_JACOBIAN_MODIFIED", "I", .constantValue.asInt = OrgSpongycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED, 0x19, -1, -1, -1, -1 },
    { "COORD_LAMBDA_AFFINE", "I", .constantValue.asInt = OrgSpongycastleMathEcECCurve_COORD_LAMBDA_AFFINE, 0x19, -1, -1, -1, -1 },
    { "COORD_LAMBDA_PROJECTIVE", "I", .constantValue.asInt = OrgSpongycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE, 0x19, -1, -1, -1, -1 },
    { "COORD_SKEWED", "I", .constantValue.asInt = OrgSpongycastleMathEcECCurve_COORD_SKEWED, 0x19, -1, -1, -1, -1 },
    { "field_", "LOrgSpongycastleMathFieldFiniteField;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "a_", "LOrgSpongycastleMathEcECFieldElement;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "b_", "LOrgSpongycastleMathEcECFieldElement;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "order_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cofactor_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "coord_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "endomorphism_", "LOrgSpongycastleMathEcEndoECEndomorphism;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "multiplier_", "LOrgSpongycastleMathEcECMultiplier;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleMathFieldFiniteField;", "fromBigInteger", "LJavaMathBigInteger;", "isValidFieldElement", "validatePoint", "LJavaMathBigInteger;LJavaMathBigInteger;", "LJavaMathBigInteger;LJavaMathBigInteger;Z", "createPoint", "createRawPoint", "LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;Z", "LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;[LOrgSpongycastleMathEcECFieldElement;Z", "supportsCoordinateSystem", "I", "getPreCompInfo", "LOrgSpongycastleMathEcECPoint;LNSString;", "setPreCompInfo", "LOrgSpongycastleMathEcECPoint;LNSString;LOrgSpongycastleMathEcPreCompInfo;", "importPoint", "LOrgSpongycastleMathEcECPoint;", "normalizeAll", "[LOrgSpongycastleMathEcECPoint;", "[LOrgSpongycastleMathEcECPoint;IILOrgSpongycastleMathEcECFieldElement;", "decompressPoint", "ILJavaMathBigInteger;", "decodePoint", "[B", "checkPoint", "checkPoints", "[LOrgSpongycastleMathEcECPoint;II", "equals", "LOrgSpongycastleMathEcECCurve;", "LNSObject;", "hashCode", "LOrgSpongycastleMathEcECCurve_Config;LOrgSpongycastleMathEcECCurve_AbstractFp;LOrgSpongycastleMathEcECCurve_Fp;LOrgSpongycastleMathEcECCurve_AbstractF2m;LOrgSpongycastleMathEcECCurve_F2m;" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcECCurve = { "ECCurve", "org.spongycastle.math.ec", ptrTable, methods, fields, 7, 0x401, 37, 16, -1, 33, -1, -1, -1 };
  return &_OrgSpongycastleMathEcECCurve;
}

@end

IOSIntArray *OrgSpongycastleMathEcECCurve_getAllCoordinateSystems() {
  OrgSpongycastleMathEcECCurve_initialize();
  return [IOSIntArray newArrayWithInts:(jint[]){ OrgSpongycastleMathEcECCurve_COORD_AFFINE, OrgSpongycastleMathEcECCurve_COORD_HOMOGENEOUS, OrgSpongycastleMathEcECCurve_COORD_JACOBIAN, OrgSpongycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY, OrgSpongycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED, OrgSpongycastleMathEcECCurve_COORD_LAMBDA_AFFINE, OrgSpongycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE, OrgSpongycastleMathEcECCurve_COORD_SKEWED } count:8];
}

void OrgSpongycastleMathEcECCurve_initWithOrgSpongycastleMathFieldFiniteField_(OrgSpongycastleMathEcECCurve *self, id<OrgSpongycastleMathFieldFiniteField> field) {
  NSObject_init(self);
  self->coord_ = OrgSpongycastleMathEcECCurve_COORD_AFFINE;
  self->endomorphism_ = nil;
  self->multiplier_ = nil;
  self->field_ = field;
}

id<OrgSpongycastleMathEcECMultiplier> OrgSpongycastleMathEcECCurve_createDefaultMultiplier(OrgSpongycastleMathEcECCurve *self) {
  if ([OrgSpongycastleMathEcEndoGLVEndomorphism_class_() isInstance:self->endomorphism_]) {
    return new_OrgSpongycastleMathEcGLVMultiplier_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcEndoGLVEndomorphism_(self, (id<OrgSpongycastleMathEcEndoGLVEndomorphism>) cast_check(self->endomorphism_, OrgSpongycastleMathEcEndoGLVEndomorphism_class_()));
  }
  return new_OrgSpongycastleMathEcWNafL2RMultiplier_init();
}

OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcECCurve_importPointWithOrgSpongycastleMathEcECPoint_(OrgSpongycastleMathEcECCurve *self, OrgSpongycastleMathEcECPoint *p) {
  if (self == [((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getCurve]) {
    return p;
  }
  if ([p isInfinity]) {
    return [self getInfinity];
  }
  p = [p normalize];
  return [self validatePointWithJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getXCoord])) toBigInteger] withJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk([p getYCoord])) toBigInteger] withBoolean:p->withCompression_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcECCurve)

@implementation OrgSpongycastleMathEcECCurve_Config

- (instancetype)initWithOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)outer$
                                             withInt:(jint)coord
         withOrgSpongycastleMathEcEndoECEndomorphism:(id<OrgSpongycastleMathEcEndoECEndomorphism>)endomorphism
               withOrgSpongycastleMathEcECMultiplier:(id<OrgSpongycastleMathEcECMultiplier>)multiplier {
  OrgSpongycastleMathEcECCurve_Config_initWithOrgSpongycastleMathEcECCurve_withInt_withOrgSpongycastleMathEcEndoECEndomorphism_withOrgSpongycastleMathEcECMultiplier_(self, outer$, coord, endomorphism, multiplier);
  return self;
}

- (OrgSpongycastleMathEcECCurve_Config *)setCoordinateSystemWithInt:(jint)coord {
  self->coord_ = coord;
  return self;
}

- (OrgSpongycastleMathEcECCurve_Config *)setEndomorphismWithOrgSpongycastleMathEcEndoECEndomorphism:(id<OrgSpongycastleMathEcEndoECEndomorphism>)endomorphism {
  self->endomorphism_ = endomorphism;
  return self;
}

- (OrgSpongycastleMathEcECCurve_Config *)setMultiplierWithOrgSpongycastleMathEcECMultiplier:(id<OrgSpongycastleMathEcECMultiplier>)multiplier {
  self->multiplier_ = multiplier;
  return self;
}

- (OrgSpongycastleMathEcECCurve *)create {
  if (![this$0_ supportsCoordinateSystemWithInt:coord_]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported coordinate system");
  }
  OrgSpongycastleMathEcECCurve *c = [this$0_ cloneCurve];
  if (c == this$0_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"implementation returned current curve");
  }
  @synchronized(c) {
    ((OrgSpongycastleMathEcECCurve *) nil_chk(c))->coord_ = coord_;
    c->endomorphism_ = endomorphism_;
    c->multiplier_ = multiplier_;
  }
  return c;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECCurve_Config;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECCurve_Config;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECCurve_Config;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECCurve;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleMathEcECCurve:withInt:withOrgSpongycastleMathEcEndoECEndomorphism:withOrgSpongycastleMathEcECMultiplier:);
  methods[1].selector = @selector(setCoordinateSystemWithInt:);
  methods[2].selector = @selector(setEndomorphismWithOrgSpongycastleMathEcEndoECEndomorphism:);
  methods[3].selector = @selector(setMultiplierWithOrgSpongycastleMathEcECMultiplier:);
  methods[4].selector = @selector(create);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgSpongycastleMathEcECCurve;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "coord_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "endomorphism_", "LOrgSpongycastleMathEcEndoECEndomorphism;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "multiplier_", "LOrgSpongycastleMathEcECMultiplier;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILOrgSpongycastleMathEcEndoECEndomorphism;LOrgSpongycastleMathEcECMultiplier;", "setCoordinateSystem", "I", "setEndomorphism", "LOrgSpongycastleMathEcEndoECEndomorphism;", "setMultiplier", "LOrgSpongycastleMathEcECMultiplier;", "LOrgSpongycastleMathEcECCurve;" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcECCurve_Config = { "Config", "org.spongycastle.math.ec", ptrTable, methods, fields, 7, 0x1, 5, 4, 7, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcECCurve_Config;
}

@end

void OrgSpongycastleMathEcECCurve_Config_initWithOrgSpongycastleMathEcECCurve_withInt_withOrgSpongycastleMathEcEndoECEndomorphism_withOrgSpongycastleMathEcECMultiplier_(OrgSpongycastleMathEcECCurve_Config *self, OrgSpongycastleMathEcECCurve *outer$, jint coord, id<OrgSpongycastleMathEcEndoECEndomorphism> endomorphism, id<OrgSpongycastleMathEcECMultiplier> multiplier) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->coord_ = coord;
  self->endomorphism_ = endomorphism;
  self->multiplier_ = multiplier;
}

OrgSpongycastleMathEcECCurve_Config *new_OrgSpongycastleMathEcECCurve_Config_initWithOrgSpongycastleMathEcECCurve_withInt_withOrgSpongycastleMathEcEndoECEndomorphism_withOrgSpongycastleMathEcECMultiplier_(OrgSpongycastleMathEcECCurve *outer$, jint coord, id<OrgSpongycastleMathEcEndoECEndomorphism> endomorphism, id<OrgSpongycastleMathEcECMultiplier> multiplier) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECCurve_Config, initWithOrgSpongycastleMathEcECCurve_withInt_withOrgSpongycastleMathEcEndoECEndomorphism_withOrgSpongycastleMathEcECMultiplier_, outer$, coord, endomorphism, multiplier)
}

OrgSpongycastleMathEcECCurve_Config *create_OrgSpongycastleMathEcECCurve_Config_initWithOrgSpongycastleMathEcECCurve_withInt_withOrgSpongycastleMathEcEndoECEndomorphism_withOrgSpongycastleMathEcECMultiplier_(OrgSpongycastleMathEcECCurve *outer$, jint coord, id<OrgSpongycastleMathEcEndoECEndomorphism> endomorphism, id<OrgSpongycastleMathEcECMultiplier> multiplier) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECCurve_Config, initWithOrgSpongycastleMathEcECCurve_withInt_withOrgSpongycastleMathEcEndoECEndomorphism_withOrgSpongycastleMathEcECMultiplier_, outer$, coord, endomorphism, multiplier)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcECCurve_Config)

@implementation OrgSpongycastleMathEcECCurve_AbstractFp

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q {
  OrgSpongycastleMathEcECCurve_AbstractFp_initWithJavaMathBigInteger_(self, q);
  return self;
}

- (jboolean)isValidFieldElementWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return x != nil && [x signum] >= 0 && [x compareToWithId:[((id<OrgSpongycastleMathFieldFiniteField>) nil_chk([self getField])) getCharacteristic]] < 0;
}

- (OrgSpongycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                  withJavaMathBigInteger:(JavaMathBigInteger *)X1 {
  OrgSpongycastleMathEcECFieldElement *x = [self fromBigIntegerWithJavaMathBigInteger:X1];
  OrgSpongycastleMathEcECFieldElement *rhs = [((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk(x)) square])) addWithOrgSpongycastleMathEcECFieldElement:self->a_])) multiplyWithOrgSpongycastleMathEcECFieldElement:x])) addWithOrgSpongycastleMathEcECFieldElement:self->b_];
  OrgSpongycastleMathEcECFieldElement *y = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(rhs)) sqrt];
  if (y == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point compression");
  }
  if ([y testBitZero] != (yTilde == 1)) {
    y = [y negate];
  }
  return [self createRawPointWithOrgSpongycastleMathEcECFieldElement:x withOrgSpongycastleMathEcECFieldElement:y withBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x4, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:);
  methods[1].selector = @selector(isValidFieldElementWithJavaMathBigInteger:);
  methods[2].selector = @selector(decompressPointWithInt:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaMathBigInteger;", "isValidFieldElement", "decompressPoint", "ILJavaMathBigInteger;", "LOrgSpongycastleMathEcECCurve;" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcECCurve_AbstractFp = { "AbstractFp", "org.spongycastle.math.ec", ptrTable, methods, NULL, 7, 0x409, 3, 0, 4, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcECCurve_AbstractFp;
}

@end

void OrgSpongycastleMathEcECCurve_AbstractFp_initWithJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_AbstractFp *self, JavaMathBigInteger *q) {
  OrgSpongycastleMathEcECCurve_initWithOrgSpongycastleMathFieldFiniteField_(self, OrgSpongycastleMathFieldFiniteFields_getPrimeFieldWithJavaMathBigInteger_(q));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcECCurve_AbstractFp)

@implementation OrgSpongycastleMathEcECCurve_Fp

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)a
                    withJavaMathBigInteger:(JavaMathBigInteger *)b {
  OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, q, a, b);
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)a
                    withJavaMathBigInteger:(JavaMathBigInteger *)b
                    withJavaMathBigInteger:(JavaMathBigInteger *)order
                    withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, q, a, b, order, cofactor);
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)r
   withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)a
   withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b {
  OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_(self, q, r, a, b);
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)r
   withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)a
   withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b
                    withJavaMathBigInteger:(JavaMathBigInteger *)order
                    withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(self, q, r, a, b, order, cofactor);
  return self;
}

- (OrgSpongycastleMathEcECCurve *)cloneCurve {
  return new_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(self->q_, self->r_, self->a_, self->b_, self->order_, self->cofactor_);
}

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord {
  switch (coord) {
    case OrgSpongycastleMathEcECCurve_COORD_AFFINE:
    case OrgSpongycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case OrgSpongycastleMathEcECCurve_COORD_JACOBIAN:
    case OrgSpongycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    return true;
    default:
    return false;
  }
}

- (JavaMathBigInteger *)getQ {
  return q_;
}

- (jint)getFieldSize {
  return [((JavaMathBigInteger *) nil_chk(q_)) bitLength];
}

- (OrgSpongycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return new_OrgSpongycastleMathEcECFieldElement_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self->q_, self->r_, x);
}

- (OrgSpongycastleMathEcECPoint *)createRawPointWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y
                                                                            withBoolean:(jboolean)withCompression {
  return new_OrgSpongycastleMathEcECPoint_Fp_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withBoolean_(self, x, y, withCompression);
}

- (OrgSpongycastleMathEcECPoint *)createRawPointWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y
                                           withOrgSpongycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                                            withBoolean:(jboolean)withCompression {
  return new_OrgSpongycastleMathEcECPoint_Fp_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElementArray_withBoolean_(self, x, y, zs, withCompression);
}

- (OrgSpongycastleMathEcECPoint *)importPointWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p {
  if (self != [((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getCurve] && [self getCoordinateSystem] == OrgSpongycastleMathEcECCurve_COORD_JACOBIAN && ![p isInfinity]) {
    switch ([((OrgSpongycastleMathEcECCurve *) nil_chk([p getCurve])) getCoordinateSystem]) {
      case OrgSpongycastleMathEcECCurve_COORD_JACOBIAN:
      case OrgSpongycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY:
      case OrgSpongycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
      return new_OrgSpongycastleMathEcECPoint_Fp_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElementArray_withBoolean_(self, [self fromBigIntegerWithJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk(p->x_)) toBigInteger]], [self fromBigIntegerWithJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk(p->y_)) toBigInteger]], [IOSObjectArray newArrayWithObjects:(id[]){ [self fromBigIntegerWithJavaMathBigInteger:[((OrgSpongycastleMathEcECFieldElement *) nil_chk(IOSObjectArray_Get(nil_chk(p->zs_), 0))) toBigInteger]] } count:1 type:OrgSpongycastleMathEcECFieldElement_class_()], p->withCompression_);
      default:
      break;
    }
  }
  return OrgSpongycastleMathEcECCurve_importPointWithOrgSpongycastleMathEcECPoint_(self, p);
}

- (OrgSpongycastleMathEcECPoint *)getInfinity {
  return infinity_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECCurve;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x4, 8, 10, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[1].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[2].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:);
  methods[3].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[4].selector = @selector(cloneCurve);
  methods[5].selector = @selector(supportsCoordinateSystemWithInt:);
  methods[6].selector = @selector(getQ);
  methods[7].selector = @selector(getFieldSize);
  methods[8].selector = @selector(fromBigIntegerWithJavaMathBigInteger:);
  methods[9].selector = @selector(createRawPointWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:withBoolean:);
  methods[10].selector = @selector(createRawPointWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElementArray:withBoolean:);
  methods[11].selector = @selector(importPointWithOrgSpongycastleMathEcECPoint:);
  methods[12].selector = @selector(getInfinity);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FP_DEFAULT_COORDS", "I", .constantValue.asInt = OrgSpongycastleMathEcECCurve_Fp_FP_DEFAULT_COORDS, 0x1a, -1, -1, -1, -1 },
    { "q_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "r_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "infinity_", "LOrgSpongycastleMathEcECPoint_Fp;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "LJavaMathBigInteger;LJavaMathBigInteger;LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;", "LJavaMathBigInteger;LJavaMathBigInteger;LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;LJavaMathBigInteger;LJavaMathBigInteger;", "supportsCoordinateSystem", "I", "fromBigInteger", "LJavaMathBigInteger;", "createRawPoint", "LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;Z", "LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;[LOrgSpongycastleMathEcECFieldElement;Z", "importPoint", "LOrgSpongycastleMathEcECPoint;", "LOrgSpongycastleMathEcECCurve;" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcECCurve_Fp = { "Fp", "org.spongycastle.math.ec", ptrTable, methods, fields, 7, 0x9, 13, 4, 13, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcECCurve_Fp;
}

@end

void OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, q, a, b, nil, nil);
}

OrgSpongycastleMathEcECCurve_Fp *new_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, a, b)
}

OrgSpongycastleMathEcECCurve_Fp *create_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, a, b)
}

void OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  OrgSpongycastleMathEcECCurve_AbstractFp_initWithJavaMathBigInteger_(self, q);
  self->q_ = q;
  self->r_ = OrgSpongycastleMathEcECFieldElement_Fp_calculateResidueWithJavaMathBigInteger_(q);
  self->infinity_ = new_OrgSpongycastleMathEcECPoint_Fp_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_(self, nil, nil);
  self->a_ = [self fromBigIntegerWithJavaMathBigInteger:a];
  self->b_ = [self fromBigIntegerWithJavaMathBigInteger:b];
  self->order_ = order;
  self->cofactor_ = cofactor;
  self->coord_ = OrgSpongycastleMathEcECCurve_Fp_FP_DEFAULT_COORDS;
}

OrgSpongycastleMathEcECCurve_Fp *new_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, a, b, order, cofactor)
}

OrgSpongycastleMathEcECCurve_Fp *create_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, q, a, b, order, cofactor)
}

void OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_(OrgSpongycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *r, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b) {
  OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(self, q, r, a, b, nil, nil);
}

OrgSpongycastleMathEcECCurve_Fp *new_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_(JavaMathBigInteger *q, JavaMathBigInteger *r, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_, q, r, a, b)
}

OrgSpongycastleMathEcECCurve_Fp *create_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_(JavaMathBigInteger *q, JavaMathBigInteger *r, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_, q, r, a, b)
}

void OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_Fp *self, JavaMathBigInteger *q, JavaMathBigInteger *r, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  OrgSpongycastleMathEcECCurve_AbstractFp_initWithJavaMathBigInteger_(self, q);
  self->q_ = q;
  self->r_ = r;
  self->infinity_ = new_OrgSpongycastleMathEcECPoint_Fp_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_(self, nil, nil);
  self->a_ = a;
  self->b_ = b;
  self->order_ = order;
  self->cofactor_ = cofactor;
  self->coord_ = OrgSpongycastleMathEcECCurve_Fp_FP_DEFAULT_COORDS;
}

OrgSpongycastleMathEcECCurve_Fp *new_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_, q, r, a, b, order, cofactor)
}

OrgSpongycastleMathEcECCurve_Fp *create_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *r, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECCurve_Fp, initWithJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_, q, r, a, b, order, cofactor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcECCurve_Fp)

@implementation OrgSpongycastleMathEcECCurve_AbstractF2m

+ (JavaMathBigInteger *)inverseWithInt:(jint)m
                          withIntArray:(IOSIntArray *)ks
                withJavaMathBigInteger:(JavaMathBigInteger *)x {
  return OrgSpongycastleMathEcECCurve_AbstractF2m_inverseWithInt_withIntArray_withJavaMathBigInteger_(m, ks, x);
}

+ (id<OrgSpongycastleMathFieldFiniteField>)buildFieldWithInt:(jint)m
                                                     withInt:(jint)k1
                                                     withInt:(jint)k2
                                                     withInt:(jint)k3 {
  return OrgSpongycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(m, k1, k2, k3);
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3 {
  OrgSpongycastleMathEcECCurve_AbstractF2m_initWithInt_withInt_withInt_withInt_(self, m, k1, k2, k3);
  return self;
}

- (jboolean)isValidFieldElementWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return x != nil && [x signum] >= 0 && [x bitLength] <= [self getFieldSize];
}

- (OrgSpongycastleMathEcECPoint *)createPointWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                             withJavaMathBigInteger:(JavaMathBigInteger *)y
                                                        withBoolean:(jboolean)withCompression {
  OrgSpongycastleMathEcECFieldElement *X = [self fromBigIntegerWithJavaMathBigInteger:x];
  OrgSpongycastleMathEcECFieldElement *Y = [self fromBigIntegerWithJavaMathBigInteger:y];
  jint coord = [self getCoordinateSystem];
  switch (coord) {
    case OrgSpongycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
    case OrgSpongycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    {
      if ([((OrgSpongycastleMathEcECFieldElement *) nil_chk(X)) isZero]) {
        if (![((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk(Y)) square])) isEqual:[self getB]]) {
          @throw new_JavaLangIllegalArgumentException_init();
        }
      }
      else {
        Y = [((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk(Y)) divideWithOrgSpongycastleMathEcECFieldElement:X])) addWithOrgSpongycastleMathEcECFieldElement:X];
      }
      break;
    }
    default:
    {
      break;
    }
  }
  return [self createRawPointWithOrgSpongycastleMathEcECFieldElement:X withOrgSpongycastleMathEcECFieldElement:Y withBoolean:withCompression];
}

- (OrgSpongycastleMathEcECPoint *)decompressPointWithInt:(jint)yTilde
                                  withJavaMathBigInteger:(JavaMathBigInteger *)X1 {
  OrgSpongycastleMathEcECFieldElement *x = [self fromBigIntegerWithJavaMathBigInteger:X1];
  OrgSpongycastleMathEcECFieldElement *y = nil;
  if ([((OrgSpongycastleMathEcECFieldElement *) nil_chk(x)) isZero]) {
    y = [((OrgSpongycastleMathEcECFieldElement *) nil_chk([self getB])) sqrt];
  }
  else {
    OrgSpongycastleMathEcECFieldElement *beta = [((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([x square])) invert])) multiplyWithOrgSpongycastleMathEcECFieldElement:[self getB]])) addWithOrgSpongycastleMathEcECFieldElement:[self getA]])) addWithOrgSpongycastleMathEcECFieldElement:x];
    OrgSpongycastleMathEcECFieldElement *z = OrgSpongycastleMathEcECCurve_AbstractF2m_solveQuadraticEquationWithOrgSpongycastleMathEcECFieldElement_(self, beta);
    if (z != nil) {
      if ([z testBitZero] != (yTilde == 1)) {
        z = [z addOne];
      }
      switch ([self getCoordinateSystem]) {
        case OrgSpongycastleMathEcECCurve_COORD_LAMBDA_AFFINE:
        case OrgSpongycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
        {
          y = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(z)) addWithOrgSpongycastleMathEcECFieldElement:x];
          break;
        }
        default:
        {
          y = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(z)) multiplyWithOrgSpongycastleMathEcECFieldElement:x];
          break;
        }
      }
    }
  }
  if (y == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid point compression");
  }
  return [self createRawPointWithOrgSpongycastleMathEcECFieldElement:x withOrgSpongycastleMathEcECFieldElement:y withBoolean:true];
}

- (OrgSpongycastleMathEcECFieldElement *)solveQuadraticEquationWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)beta {
  return OrgSpongycastleMathEcECCurve_AbstractF2m_solveQuadraticEquationWithOrgSpongycastleMathEcECFieldElement_(self, beta);
}

- (IOSObjectArray *)getSi {
  @synchronized(self) {
    if (si_ == nil) {
      si_ = OrgSpongycastleMathEcTnaf_getSiWithOrgSpongycastleMathEcECCurve_AbstractF2m_(self);
    }
    return si_;
  }
}

- (jboolean)isKoblitz {
  return self->order_ != nil && self->cofactor_ != nil && [((OrgSpongycastleMathEcECFieldElement *) nil_chk(self->b_)) isOne] && ([((OrgSpongycastleMathEcECFieldElement *) nil_chk(self->a_)) isZero] || [((OrgSpongycastleMathEcECFieldElement *) nil_chk(self->a_)) isOne]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaMathBigInteger;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathFieldFiniteField;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(inverseWithInt:withIntArray:withJavaMathBigInteger:);
  methods[1].selector = @selector(buildFieldWithInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(initWithInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(isValidFieldElementWithJavaMathBigInteger:);
  methods[4].selector = @selector(createPointWithJavaMathBigInteger:withJavaMathBigInteger:withBoolean:);
  methods[5].selector = @selector(decompressPointWithInt:withJavaMathBigInteger:);
  methods[6].selector = @selector(solveQuadraticEquationWithOrgSpongycastleMathEcECFieldElement:);
  methods[7].selector = @selector(getSi);
  methods[8].selector = @selector(isKoblitz);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "si_", "[LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "inverse", "I[ILJavaMathBigInteger;", "buildField", "IIII", "isValidFieldElement", "LJavaMathBigInteger;", "createPoint", "LJavaMathBigInteger;LJavaMathBigInteger;Z", "decompressPoint", "ILJavaMathBigInteger;", "solveQuadraticEquation", "LOrgSpongycastleMathEcECFieldElement;", "LOrgSpongycastleMathEcECCurve;" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcECCurve_AbstractF2m = { "AbstractF2m", "org.spongycastle.math.ec", ptrTable, methods, fields, 7, 0x409, 9, 1, 12, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcECCurve_AbstractF2m;
}

@end

JavaMathBigInteger *OrgSpongycastleMathEcECCurve_AbstractF2m_inverseWithInt_withIntArray_withJavaMathBigInteger_(jint m, IOSIntArray *ks, JavaMathBigInteger *x) {
  OrgSpongycastleMathEcECCurve_AbstractF2m_initialize();
  return [((OrgSpongycastleMathEcLongArray *) nil_chk([new_OrgSpongycastleMathEcLongArray_initWithJavaMathBigInteger_(x) modInverseWithInt:m withIntArray:ks])) toBigInteger];
}

id<OrgSpongycastleMathFieldFiniteField> OrgSpongycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(jint m, jint k1, jint k2, jint k3) {
  OrgSpongycastleMathEcECCurve_AbstractF2m_initialize();
  if (k1 == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"k1 must be > 0");
  }
  if (k2 == 0) {
    if (k3 != 0) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"k3 must be 0 if k2 == 0");
    }
    return OrgSpongycastleMathFieldFiniteFields_getBinaryExtensionFieldWithIntArray_([IOSIntArray newArrayWithInts:(jint[]){ 0, k1, m } count:3]);
  }
  if (k2 <= k1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"k2 must be > k1");
  }
  if (k3 <= k2) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"k3 must be > k2");
  }
  return OrgSpongycastleMathFieldFiniteFields_getBinaryExtensionFieldWithIntArray_([IOSIntArray newArrayWithInts:(jint[]){ 0, k1, k2, k3, m } count:5]);
}

void OrgSpongycastleMathEcECCurve_AbstractF2m_initWithInt_withInt_withInt_withInt_(OrgSpongycastleMathEcECCurve_AbstractF2m *self, jint m, jint k1, jint k2, jint k3) {
  OrgSpongycastleMathEcECCurve_initWithOrgSpongycastleMathFieldFiniteField_(self, OrgSpongycastleMathEcECCurve_AbstractF2m_buildFieldWithInt_withInt_withInt_withInt_(m, k1, k2, k3));
  self->si_ = nil;
}

OrgSpongycastleMathEcECFieldElement *OrgSpongycastleMathEcECCurve_AbstractF2m_solveQuadraticEquationWithOrgSpongycastleMathEcECFieldElement_(OrgSpongycastleMathEcECCurve_AbstractF2m *self, OrgSpongycastleMathEcECFieldElement *beta) {
  if ([((OrgSpongycastleMathEcECFieldElement *) nil_chk(beta)) isZero]) {
    return beta;
  }
  OrgSpongycastleMathEcECFieldElement *gamma;
  OrgSpongycastleMathEcECFieldElement *z;
  OrgSpongycastleMathEcECFieldElement *zeroElement = [self fromBigIntegerWithJavaMathBigInteger:JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)];
  jint m = [self getFieldSize];
  JavaUtilRandom *rand = new_JavaUtilRandom_init();
  do {
    OrgSpongycastleMathEcECFieldElement *t = [self fromBigIntegerWithJavaMathBigInteger:new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(m, rand)];
    z = zeroElement;
    OrgSpongycastleMathEcECFieldElement *w = beta;
    for (jint i = 1; i < m; i++) {
      OrgSpongycastleMathEcECFieldElement *w2 = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(w)) square];
      z = [((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk(z)) square])) addWithOrgSpongycastleMathEcECFieldElement:[((OrgSpongycastleMathEcECFieldElement *) nil_chk(w2)) multiplyWithOrgSpongycastleMathEcECFieldElement:t]];
      w = [w2 addWithOrgSpongycastleMathEcECFieldElement:beta];
    }
    if (![((OrgSpongycastleMathEcECFieldElement *) nil_chk(w)) isZero]) {
      return nil;
    }
    gamma = [((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk(z)) square])) addWithOrgSpongycastleMathEcECFieldElement:z];
  }
  while ([((OrgSpongycastleMathEcECFieldElement *) nil_chk(gamma)) isZero]);
  return z;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcECCurve_AbstractF2m)

@implementation OrgSpongycastleMathEcECCurve_F2m

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b {
  OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k, a, b);
  return self;
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k, a, b, order, cofactor);
  return self;
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b {
  OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k1, k2, k3, a, b);
  return self;
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
     withJavaMathBigInteger:(JavaMathBigInteger *)a
     withJavaMathBigInteger:(JavaMathBigInteger *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k1, k2, k3, a, b, order, cofactor);
  return self;
}

- (instancetype)initWithInt:(jint)m
                    withInt:(jint)k1
                    withInt:(jint)k2
                    withInt:(jint)k3
withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)a
withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)b
     withJavaMathBigInteger:(JavaMathBigInteger *)order
     withJavaMathBigInteger:(JavaMathBigInteger *)cofactor {
  OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k1, k2, k3, a, b, order, cofactor);
  return self;
}

- (OrgSpongycastleMathEcECCurve *)cloneCurve {
  return new_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(self->m_, self->k1_, self->k2_, self->k3_, self->a_, self->b_, self->order_, self->cofactor_);
}

- (jboolean)supportsCoordinateSystemWithInt:(jint)coord {
  switch (coord) {
    case OrgSpongycastleMathEcECCurve_COORD_AFFINE:
    case OrgSpongycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case OrgSpongycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    return true;
    default:
    return false;
  }
}

- (id<OrgSpongycastleMathEcECMultiplier>)createDefaultMultiplier {
  if ([self isKoblitz]) {
    return new_OrgSpongycastleMathEcWTauNafMultiplier_init();
  }
  return OrgSpongycastleMathEcECCurve_createDefaultMultiplier(self);
}

- (jint)getFieldSize {
  return m_;
}

- (OrgSpongycastleMathEcECFieldElement *)fromBigIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return new_OrgSpongycastleMathEcECFieldElement_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_(self->m_, self->k1_, self->k2_, self->k3_, x);
}

- (OrgSpongycastleMathEcECPoint *)createRawPointWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y
                                                                            withBoolean:(jboolean)withCompression {
  return new_OrgSpongycastleMathEcECPoint_F2m_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withBoolean_(self, x, y, withCompression);
}

- (OrgSpongycastleMathEcECPoint *)createRawPointWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                                withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)y
                                           withOrgSpongycastleMathEcECFieldElementArray:(IOSObjectArray *)zs
                                                                            withBoolean:(jboolean)withCompression {
  return new_OrgSpongycastleMathEcECPoint_F2m_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElementArray_withBoolean_(self, x, y, zs, withCompression);
}

- (OrgSpongycastleMathEcECPoint *)getInfinity {
  return infinity_;
}

- (jint)getM {
  return m_;
}

- (jboolean)isTrinomial {
  return k2_ == 0 && k3_ == 0;
}

- (jint)getK1 {
  return k1_;
}

- (jint)getK2 {
  return k2_;
}

- (jint)getK3 {
  return k3_;
}

- (JavaMathBigInteger *)getN {
  return self->order_;
}

- (JavaMathBigInteger *)getH {
  return self->cofactor_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 4, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECCurve;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x4, 9, 11, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[1].selector = @selector(initWithInt:withInt:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[2].selector = @selector(initWithInt:withInt:withInt:withInt:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[3].selector = @selector(initWithInt:withInt:withInt:withInt:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[4].selector = @selector(initWithInt:withInt:withInt:withInt:withOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[5].selector = @selector(cloneCurve);
  methods[6].selector = @selector(supportsCoordinateSystemWithInt:);
  methods[7].selector = @selector(createDefaultMultiplier);
  methods[8].selector = @selector(getFieldSize);
  methods[9].selector = @selector(fromBigIntegerWithJavaMathBigInteger:);
  methods[10].selector = @selector(createRawPointWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:withBoolean:);
  methods[11].selector = @selector(createRawPointWithOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElement:withOrgSpongycastleMathEcECFieldElementArray:withBoolean:);
  methods[12].selector = @selector(getInfinity);
  methods[13].selector = @selector(getM);
  methods[14].selector = @selector(isTrinomial);
  methods[15].selector = @selector(getK1);
  methods[16].selector = @selector(getK2);
  methods[17].selector = @selector(getK3);
  methods[18].selector = @selector(getN);
  methods[19].selector = @selector(getH);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "F2M_DEFAULT_COORDS", "I", .constantValue.asInt = OrgSpongycastleMathEcECCurve_F2m_F2M_DEFAULT_COORDS, 0x1a, -1, -1, -1, -1 },
    { "m_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k1_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k2_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k3_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "infinity_", "LOrgSpongycastleMathEcECPoint_F2m;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IILJavaMathBigInteger;LJavaMathBigInteger;", "IILJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "IIIILJavaMathBigInteger;LJavaMathBigInteger;", "IIIILJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "IIIILOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;LJavaMathBigInteger;LJavaMathBigInteger;", "supportsCoordinateSystem", "I", "fromBigInteger", "LJavaMathBigInteger;", "createRawPoint", "LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;Z", "LOrgSpongycastleMathEcECFieldElement;LOrgSpongycastleMathEcECFieldElement;[LOrgSpongycastleMathEcECFieldElement;Z", "LOrgSpongycastleMathEcECCurve;" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcECCurve_F2m = { "F2m", "org.spongycastle.math.ec", ptrTable, methods, fields, 7, 0x9, 20, 6, 12, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcECCurve_F2m;
}

@end

void OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_F2m *self, jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k, 0, 0, a, b, nil, nil);
}

OrgSpongycastleMathEcECCurve_F2m *new_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECCurve_F2m, initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_, m, k, a, b)
}

OrgSpongycastleMathEcECCurve_F2m *create_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECCurve_F2m, initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_, m, k, a, b)
}

void OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_F2m *self, jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k, 0, 0, a, b, order, cofactor);
}

OrgSpongycastleMathEcECCurve_F2m *new_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECCurve_F2m, initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, m, k, a, b, order, cofactor)
}

OrgSpongycastleMathEcECCurve_F2m *create_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECCurve_F2m, initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, m, k, a, b, order, cofactor)
}

void OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_F2m *self, jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, m, k1, k2, k3, a, b, nil, nil);
}

OrgSpongycastleMathEcECCurve_F2m *new_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b)
}

OrgSpongycastleMathEcECCurve_F2m *create_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b)
}

void OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_F2m *self, jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  OrgSpongycastleMathEcECCurve_AbstractF2m_initWithInt_withInt_withInt_withInt_(self, m, k1, k2, k3);
  self->m_ = m;
  self->k1_ = k1;
  self->k2_ = k2;
  self->k3_ = k3;
  self->order_ = order;
  self->cofactor_ = cofactor;
  self->infinity_ = new_OrgSpongycastleMathEcECPoint_F2m_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_(self, nil, nil);
  self->a_ = [self fromBigIntegerWithJavaMathBigInteger:a];
  self->b_ = [self fromBigIntegerWithJavaMathBigInteger:b];
  self->coord_ = OrgSpongycastleMathEcECCurve_F2m_F2M_DEFAULT_COORDS;
}

OrgSpongycastleMathEcECCurve_F2m *new_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b, order, cofactor)
}

OrgSpongycastleMathEcECCurve_F2m *create_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, JavaMathBigInteger *a, JavaMathBigInteger *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b, order, cofactor)
}

void OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleMathEcECCurve_F2m *self, jint m, jint k1, jint k2, jint k3, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  OrgSpongycastleMathEcECCurve_AbstractF2m_initWithInt_withInt_withInt_withInt_(self, m, k1, k2, k3);
  self->m_ = m;
  self->k1_ = k1;
  self->k2_ = k2;
  self->k3_ = k3;
  self->order_ = order;
  self->cofactor_ = cofactor;
  self->infinity_ = new_OrgSpongycastleMathEcECPoint_F2m_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_(self, nil, nil);
  self->a_ = a;
  self->b_ = b;
  self->coord_ = OrgSpongycastleMathEcECCurve_F2m_F2M_DEFAULT_COORDS;
}

OrgSpongycastleMathEcECCurve_F2m *new_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b, order, cofactor)
}

OrgSpongycastleMathEcECCurve_F2m *create_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_(jint m, jint k1, jint k2, jint k3, OrgSpongycastleMathEcECFieldElement *a, OrgSpongycastleMathEcECFieldElement *b, JavaMathBigInteger *order, JavaMathBigInteger *cofactor) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcECCurve_F2m, initWithInt_withInt_withInt_withInt_withOrgSpongycastleMathEcECFieldElement_withOrgSpongycastleMathEcECFieldElement_withJavaMathBigInteger_withJavaMathBigInteger_, m, k1, k2, k3, a, b, order, cofactor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcECCurve_F2m)
