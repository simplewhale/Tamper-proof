//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/math/ec/ZSignedDigitR2LMultiplier.java
//

#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/math/ec/AbstractECMultiplier.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/math/ec/ZSignedDigitR2LMultiplier.h"

@implementation OrgSpongycastleMathEcZSignedDigitR2LMultiplier

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleMathEcZSignedDigitR2LMultiplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgSpongycastleMathEcECPoint *)multiplyPositiveWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p
                                                            withJavaMathBigInteger:(JavaMathBigInteger *)k {
  OrgSpongycastleMathEcECPoint *R0 = [((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getCurve])) getInfinity];
  OrgSpongycastleMathEcECPoint *R1 = p;
  jint n = [((JavaMathBigInteger *) nil_chk(k)) bitLength];
  jint s = [k getLowestSetBit];
  R1 = [R1 timesPow2WithInt:s];
  jint i = s;
  while (++i < n) {
    R0 = [((OrgSpongycastleMathEcECPoint *) nil_chk(R0)) addWithOrgSpongycastleMathEcECPoint:[k testBitWithInt:i] ? R1 : [((OrgSpongycastleMathEcECPoint *) nil_chk(R1)) negate]];
    R1 = [((OrgSpongycastleMathEcECPoint *) nil_chk(R1)) twice];
  }
  R0 = [((OrgSpongycastleMathEcECPoint *) nil_chk(R0)) addWithOrgSpongycastleMathEcECPoint:R1];
  return R0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x4, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(multiplyPositiveWithOrgSpongycastleMathEcECPoint:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "multiplyPositive", "LOrgSpongycastleMathEcECPoint;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _OrgSpongycastleMathEcZSignedDigitR2LMultiplier = { "ZSignedDigitR2LMultiplier", "org.spongycastle.math.ec", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleMathEcZSignedDigitR2LMultiplier;
}

@end

void OrgSpongycastleMathEcZSignedDigitR2LMultiplier_init(OrgSpongycastleMathEcZSignedDigitR2LMultiplier *self) {
  OrgSpongycastleMathEcAbstractECMultiplier_init(self);
}

OrgSpongycastleMathEcZSignedDigitR2LMultiplier *new_OrgSpongycastleMathEcZSignedDigitR2LMultiplier_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleMathEcZSignedDigitR2LMultiplier, init)
}

OrgSpongycastleMathEcZSignedDigitR2LMultiplier *create_OrgSpongycastleMathEcZSignedDigitR2LMultiplier_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleMathEcZSignedDigitR2LMultiplier, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleMathEcZSignedDigitR2LMultiplier)
