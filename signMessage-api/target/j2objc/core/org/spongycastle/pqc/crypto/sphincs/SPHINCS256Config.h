//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/sphincs/SPHINCS256Config.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastlePqcCryptoSphincsSPHINCS256Config")
#ifdef RESTRICT_OrgSpongycastlePqcCryptoSphincsSPHINCS256Config
#define INCLUDE_ALL_OrgSpongycastlePqcCryptoSphincsSPHINCS256Config 0
#else
#define INCLUDE_ALL_OrgSpongycastlePqcCryptoSphincsSPHINCS256Config 1
#endif
#undef RESTRICT_OrgSpongycastlePqcCryptoSphincsSPHINCS256Config

#if !defined (OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_) && (INCLUDE_ALL_OrgSpongycastlePqcCryptoSphincsSPHINCS256Config || defined(INCLUDE_OrgSpongycastlePqcCryptoSphincsSPHINCS256Config))
#define OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_

@interface OrgSpongycastlePqcCryptoSphincsSPHINCS256Config : NSObject

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastlePqcCryptoSphincsSPHINCS256Config)

inline jint OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_get_SUBTREE_HEIGHT(void);
#define OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcCryptoSphincsSPHINCS256Config, SUBTREE_HEIGHT, jint)

inline jint OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_get_TOTALTREE_HEIGHT(void);
#define OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT 60
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcCryptoSphincsSPHINCS256Config, TOTALTREE_HEIGHT, jint)

inline jint OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_get_N_LEVELS(void);
#define OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_N_LEVELS 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcCryptoSphincsSPHINCS256Config, N_LEVELS, jint)

inline jint OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_get_SEED_BYTES(void);
#define OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcCryptoSphincsSPHINCS256Config, SEED_BYTES, jint)

inline jint OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_get_SK_RAND_SEED_BYTES(void);
#define OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SK_RAND_SEED_BYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcCryptoSphincsSPHINCS256Config, SK_RAND_SEED_BYTES, jint)

inline jint OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_get_MESSAGE_HASH_SEED_BYTES(void);
#define OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcCryptoSphincsSPHINCS256Config, MESSAGE_HASH_SEED_BYTES, jint)

inline jint OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_get_HASH_BYTES(void);
#define OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcCryptoSphincsSPHINCS256Config, HASH_BYTES, jint)

inline jint OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_get_MSGHASH_BYTES(void);
#define OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MSGHASH_BYTES 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcCryptoSphincsSPHINCS256Config, MSGHASH_BYTES, jint)

inline jint OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_get_CRYPTO_PUBLICKEYBYTES(void);
#define OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES 1056
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcCryptoSphincsSPHINCS256Config, CRYPTO_PUBLICKEYBYTES, jint)

inline jint OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_get_CRYPTO_SECRETKEYBYTES(void);
#define OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_SECRETKEYBYTES 1088
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcCryptoSphincsSPHINCS256Config, CRYPTO_SECRETKEYBYTES, jint)

inline jint OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_get_CRYPTO_BYTES(void);
#define OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES 41000
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcCryptoSphincsSPHINCS256Config, CRYPTO_BYTES, jint)

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_init(OrgSpongycastlePqcCryptoSphincsSPHINCS256Config *self);

FOUNDATION_EXPORT OrgSpongycastlePqcCryptoSphincsSPHINCS256Config *new_OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastlePqcCryptoSphincsSPHINCS256Config *create_OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastlePqcCryptoSphincsSPHINCS256Config)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastlePqcCryptoSphincsSPHINCS256Config")
