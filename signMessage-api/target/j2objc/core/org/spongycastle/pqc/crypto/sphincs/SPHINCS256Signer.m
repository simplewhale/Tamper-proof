//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/sphincs/SPHINCS256Signer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/pqc/crypto/sphincs/HashFunctions.h"
#include "org/spongycastle/pqc/crypto/sphincs/Horst.h"
#include "org/spongycastle/pqc/crypto/sphincs/SPHINCS256Config.h"
#include "org/spongycastle/pqc/crypto/sphincs/SPHINCS256Signer.h"
#include "org/spongycastle/pqc/crypto/sphincs/SPHINCSPrivateKeyParameters.h"
#include "org/spongycastle/pqc/crypto/sphincs/SPHINCSPublicKeyParameters.h"
#include "org/spongycastle/pqc/crypto/sphincs/Seed.h"
#include "org/spongycastle/pqc/crypto/sphincs/Tree.h"
#include "org/spongycastle/pqc/crypto/sphincs/Wots.h"
#include "org/spongycastle/util/Pack.h"

@interface OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer () {
 @public
  OrgSpongycastlePqcCryptoSphincsHashFunctions *hashFunctions_;
  IOSByteArray *keyData_;
}

- (void)zerobytesWithByteArray:(IOSByteArray *)tsk
                       withInt:(jint)off
                       withInt:(jint)cryptoSecretkeybytes;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer, hashFunctions_, OrgSpongycastlePqcCryptoSphincsHashFunctions *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer, keyData_, IOSByteArray *)

__attribute__((unused)) static void OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_zerobytesWithByteArray_withInt_withInt_(OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer *self, IOSByteArray *tsk, jint off, jint cryptoSecretkeybytes);

@implementation OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)nDigest
                    withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)twoNDigest {
  OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_(self, nDigest, twoNDigest);
  return self;
}

- (void)init__WithBoolean:(jboolean)forSigning
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  if (forSigning) {
    keyData_ = [((OrgSpongycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *) nil_chk(((OrgSpongycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters *) cast_chk(param, [OrgSpongycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters class])))) getKeyData];
  }
  else {
    keyData_ = [((OrgSpongycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *) nil_chk(((OrgSpongycastlePqcCryptoSphincsSPHINCSPublicKeyParameters *) cast_chk(param, [OrgSpongycastlePqcCryptoSphincsSPHINCSPublicKeyParameters class])))) getKeyData];
  }
}

- (IOSByteArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  return [self crypto_signWithOrgSpongycastlePqcCryptoSphincsHashFunctions:hashFunctions_ withByteArray:message withByteArray:keyData_];
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature {
  return [self verifyWithOrgSpongycastlePqcCryptoSphincsHashFunctions:hashFunctions_ withByteArray:message withByteArray:signature withByteArray:keyData_];
}

+ (void)validate_authpathWithOrgSpongycastlePqcCryptoSphincsHashFunctions:(OrgSpongycastlePqcCryptoSphincsHashFunctions *)hs
                                                            withByteArray:(IOSByteArray *)root
                                                            withByteArray:(IOSByteArray *)leaf
                                                                  withInt:(jint)leafidx
                                                            withByteArray:(IOSByteArray *)authpath
                                                                  withInt:(jint)auOff
                                                            withByteArray:(IOSByteArray *)masks
                                                                  withInt:(jint)height {
  OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_validate_authpathWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(hs, root, leaf, leafidx, authpath, auOff, masks, height);
}

+ (void)compute_authpath_wotsWithOrgSpongycastlePqcCryptoSphincsHashFunctions:(OrgSpongycastlePqcCryptoSphincsHashFunctions *)hs
                                                                withByteArray:(IOSByteArray *)root
                                                                withByteArray:(IOSByteArray *)authpath
                                                                      withInt:(jint)authOff
                             withOrgSpongycastlePqcCryptoSphincsTree_leafaddr:(OrgSpongycastlePqcCryptoSphincsTree_leafaddr *)a
                                                                withByteArray:(IOSByteArray *)sk
                                                                withByteArray:(IOSByteArray *)masks
                                                                      withInt:(jint)height {
  OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_compute_authpath_wotsWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withOrgSpongycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withByteArray_withInt_(hs, root, authpath, authOff, a, sk, masks, height);
}

- (IOSByteArray *)crypto_signWithOrgSpongycastlePqcCryptoSphincsHashFunctions:(OrgSpongycastlePqcCryptoSphincsHashFunctions *)hs
                                                                withByteArray:(IOSByteArray *)m
                                                                withByteArray:(IOSByteArray *)sk {
  IOSByteArray *sm = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES];
  jint i;
  jlong leafidx;
  IOSByteArray *R = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES];
  IOSByteArray *m_h = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MSGHASH_BYTES];
  IOSLongArray *rnd = [IOSLongArray newArrayWithLength:8];
  IOSByteArray *root = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES];
  IOSByteArray *masks = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsHorst_N_MASKS * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  jint pk;
  IOSByteArray *tsk = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_SECRETKEYBYTES];
  for (i = 0; i < OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_SECRETKEYBYTES; i++) {
    *IOSByteArray_GetRef(tsk, i) = IOSByteArray_Get(nil_chk(sk), i);
  }
  {
    jint scratch = OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES - OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SK_RAND_SEED_BYTES;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tsk, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_SECRETKEYBYTES - OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SK_RAND_SEED_BYTES, sm, scratch, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SK_RAND_SEED_BYTES);
    id<OrgSpongycastleCryptoDigest> d = [((OrgSpongycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) getMessageHash];
    IOSByteArray *bRnd = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(d)) getDigestSize]];
    [d updateWithByteArray:sm withInt:scratch withInt:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SK_RAND_SEED_BYTES];
    [d updateWithByteArray:m withInt:0 withInt:((IOSByteArray *) nil_chk(m))->size_];
    [d doFinalWithByteArray:bRnd withInt:0];
    OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_zerobytesWithByteArray_withInt_withInt_(self, sm, scratch, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SK_RAND_SEED_BYTES);
    for (jint j = 0; j != rnd->size_; j++) {
      *IOSLongArray_GetRef(rnd, j) = OrgSpongycastleUtilPack_littleEndianToLongWithByteArray_withInt_(bRnd, j * 8);
    }
    leafidx = IOSLongArray_Get(rnd, 0) & (jlong) 0xfffffffffffffffLL;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bRnd, 16, R, 0, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES);
    scratch = OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES - OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES - OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(R, 0, sm, scratch, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES);
    OrgSpongycastlePqcCryptoSphincsTree_leafaddr *b = new_OrgSpongycastlePqcCryptoSphincsTree_leafaddr_init();
    b->level_ = OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_N_LEVELS - 1;
    b->subtree_ = 0;
    b->subleaf_ = 0;
    pk = scratch + OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tsk, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES, sm, pk, OrgSpongycastlePqcCryptoSphincsHorst_N_MASKS * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
    OrgSpongycastlePqcCryptoSphincsTree_treehashWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withInt_withByteArray_withOrgSpongycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withInt_(hs, sm, pk + (OrgSpongycastlePqcCryptoSphincsHorst_N_MASKS * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES), OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT, tsk, b, sm, pk);
    d = [hs getMessageHash];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(d)) updateWithByteArray:sm withInt:scratch withInt:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES + OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES];
    [d updateWithByteArray:m withInt:0 withInt:m->size_];
    [d doFinalWithByteArray:m_h withInt:0];
  }
  OrgSpongycastlePqcCryptoSphincsTree_leafaddr *a = new_OrgSpongycastlePqcCryptoSphincsTree_leafaddr_init();
  a->level_ = OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_N_LEVELS;
  a->subleaf_ = (jint) (leafidx & ((JreLShift32(1, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)) - 1));
  a->subtree_ = JreURShift64(leafidx, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT);
  for (i = 0; i < OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES; i++) {
    *IOSByteArray_GetRef(sm, i) = IOSByteArray_Get(R, i);
  }
  jint smOff = OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tsk, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES, masks, 0, OrgSpongycastlePqcCryptoSphincsHorst_N_MASKS * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
  for (i = 0; i < (OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT + 7) / 8; i++) {
    *IOSByteArray_GetRef(sm, smOff + i) = (jbyte) ((JreURShift64(leafidx, 8 * i)) & (jint) 0xff);
  }
  smOff += (OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT + 7) / 8;
  OrgSpongycastlePqcCryptoSphincsSeed_get_seedWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withOrgSpongycastlePqcCryptoSphincsTree_leafaddr_(hs, seed, 0, tsk, a);
  OrgSpongycastlePqcCryptoSphincsHorst *ht = new_OrgSpongycastlePqcCryptoSphincsHorst_init();
  jint horst_sigbytes = OrgSpongycastlePqcCryptoSphincsHorst_horst_signWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withByteArray_withByteArray_withByteArray_(hs, sm, smOff, root, seed, masks, m_h);
  smOff += horst_sigbytes;
  OrgSpongycastlePqcCryptoSphincsWots *w = new_OrgSpongycastlePqcCryptoSphincsWots_init();
  for (i = 0; i < OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_N_LEVELS; i++) {
    a->level_ = i;
    OrgSpongycastlePqcCryptoSphincsSeed_get_seedWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withOrgSpongycastlePqcCryptoSphincsTree_leafaddr_(hs, seed, 0, tsk, a);
    [w wots_signWithOrgSpongycastlePqcCryptoSphincsHashFunctions:hs withByteArray:sm withInt:smOff withByteArray:root withByteArray:seed withByteArray:masks];
    smOff += OrgSpongycastlePqcCryptoSphincsWots_WOTS_SIGBYTES;
    OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_compute_authpath_wotsWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withOrgSpongycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withByteArray_withInt_(hs, root, sm, smOff, a, tsk, masks, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT);
    smOff += OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
    a->subleaf_ = (jint) (a->subtree_ & ((JreLShift32(1, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)) - 1));
    JreURShiftAssignLong(&a->subtree_, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT);
  }
  OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_zerobytesWithByteArray_withInt_withInt_(self, tsk, 0, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_SECRETKEYBYTES);
  return sm;
}

- (void)zerobytesWithByteArray:(IOSByteArray *)tsk
                       withInt:(jint)off
                       withInt:(jint)cryptoSecretkeybytes {
  OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_zerobytesWithByteArray_withInt_withInt_(self, tsk, off, cryptoSecretkeybytes);
}

- (jboolean)verifyWithOrgSpongycastlePqcCryptoSphincsHashFunctions:(OrgSpongycastlePqcCryptoSphincsHashFunctions *)hs
                                                     withByteArray:(IOSByteArray *)m
                                                     withByteArray:(IOSByteArray *)sm
                                                     withByteArray:(IOSByteArray *)pk {
  jint i;
  jint smlen = ((IOSByteArray *) nil_chk(sm))->size_;
  jlong leafidx = 0;
  IOSByteArray *wots_pk = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsWots_WOTS_L * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  IOSByteArray *pkhash = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  IOSByteArray *root = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  IOSByteArray *sig = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES];
  jint sigp;
  IOSByteArray *tpk = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES];
  if (smlen != OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"signature wrong size");
  }
  IOSByteArray *m_h = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MSGHASH_BYTES];
  for (i = 0; i < OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES; i++) *IOSByteArray_GetRef(tpk, i) = IOSByteArray_Get(nil_chk(pk), i);
  {
    IOSByteArray *R = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES];
    for (i = 0; i < OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES; i++) *IOSByteArray_GetRef(R, i) = IOSByteArray_Get(sm, i);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sm, 0, sig, 0, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_BYTES);
    id<OrgSpongycastleCryptoDigest> mHash = [((OrgSpongycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) getMessageHash];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(mHash)) updateWithByteArray:R withInt:0 withInt:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES];
    [mHash updateWithByteArray:tpk withInt:0 withInt:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES];
    [mHash updateWithByteArray:m withInt:0 withInt:((IOSByteArray *) nil_chk(m))->size_];
    [mHash doFinalWithByteArray:m_h withInt:0];
  }
  sigp = 0;
  sigp += OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES;
  smlen -= OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_MESSAGE_HASH_SEED_BYTES;
  for (i = 0; i < (OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT + 7) / 8; i++) {
    leafidx ^= (JreLShift64((jlong) (IOSByteArray_Get(sig, sigp + i) & (jint) 0xff), (8 * i)));
  }
  OrgSpongycastlePqcCryptoSphincsHorst_horst_verifyWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withByteArray_withByteArray_(hs, root, sig, sigp + (OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT + 7) / 8, tpk, m_h);
  sigp += (OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT + 7) / 8;
  smlen -= (OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_TOTALTREE_HEIGHT + 7) / 8;
  sigp += OrgSpongycastlePqcCryptoSphincsHorst_HORST_SIGBYTES;
  smlen -= OrgSpongycastlePqcCryptoSphincsHorst_HORST_SIGBYTES;
  OrgSpongycastlePqcCryptoSphincsWots *w = new_OrgSpongycastlePqcCryptoSphincsWots_init();
  for (i = 0; i < OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_N_LEVELS; i++) {
    [w wots_verifyWithOrgSpongycastlePqcCryptoSphincsHashFunctions:hs withByteArray:wots_pk withByteArray:sig withInt:sigp withByteArray:root withByteArray:tpk];
    sigp += OrgSpongycastlePqcCryptoSphincsWots_WOTS_SIGBYTES;
    smlen -= OrgSpongycastlePqcCryptoSphincsWots_WOTS_SIGBYTES;
    OrgSpongycastlePqcCryptoSphincsTree_l_treeWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(hs, pkhash, 0, wots_pk, 0, tpk, 0);
    OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_validate_authpathWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(hs, root, pkhash, (jint) (leafidx & (jint) 0x1f), sig, sigp, tpk, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT);
    JreRShiftAssignLong(&leafidx, 5);
    sigp += OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
    smlen -= OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
  }
  jboolean verified = true;
  for (i = 0; i < OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; i++) {
    if (IOSByteArray_Get(root, i) != IOSByteArray_Get(tpk, i + OrgSpongycastlePqcCryptoSphincsHorst_N_MASKS * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES)) {
      verified = false;
    }
  }
  return verified;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 9, 10, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoDigest:withOrgSpongycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(generateSignatureWithByteArray:);
  methods[3].selector = @selector(verifySignatureWithByteArray:withByteArray:);
  methods[4].selector = @selector(validate_authpathWithOrgSpongycastlePqcCryptoSphincsHashFunctions:withByteArray:withByteArray:withInt:withByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(compute_authpath_wotsWithOrgSpongycastlePqcCryptoSphincsHashFunctions:withByteArray:withByteArray:withInt:withOrgSpongycastlePqcCryptoSphincsTree_leafaddr:withByteArray:withByteArray:withInt:);
  methods[6].selector = @selector(crypto_signWithOrgSpongycastlePqcCryptoSphincsHashFunctions:withByteArray:withByteArray:);
  methods[7].selector = @selector(zerobytesWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(verifyWithOrgSpongycastlePqcCryptoSphincsHashFunctions:withByteArray:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hashFunctions_", "LOrgSpongycastlePqcCryptoSphincsHashFunctions;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keyData_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDigest;LOrgSpongycastleCryptoDigest;", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[B[B", "validate_authpath", "LOrgSpongycastlePqcCryptoSphincsHashFunctions;[B[BI[BI[BI", "compute_authpath_wots", "LOrgSpongycastlePqcCryptoSphincsHashFunctions;[B[BILOrgSpongycastlePqcCryptoSphincsTree_leafaddr;[B[BI", "crypto_sign", "LOrgSpongycastlePqcCryptoSphincsHashFunctions;[B[B", "zerobytes", "[BII", "verify", "LOrgSpongycastlePqcCryptoSphincsHashFunctions;[B[B[B" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer = { "SPHINCS256Signer", "org.spongycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer;
}

@end

void OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_(OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer *self, id<OrgSpongycastleCryptoDigest> nDigest, id<OrgSpongycastleCryptoDigest> twoNDigest) {
  NSObject_init(self);
  if ([((id<OrgSpongycastleCryptoDigest>) nil_chk(nDigest)) getDigestSize] != 32) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"n-digest needs to produce 32 bytes of output");
  }
  if ([((id<OrgSpongycastleCryptoDigest>) nil_chk(twoNDigest)) getDigestSize] != 64) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"2n-digest needs to produce 64 bytes of output");
  }
  self->hashFunctions_ = new_OrgSpongycastlePqcCryptoSphincsHashFunctions_initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_(nDigest, twoNDigest);
}

OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer *new_OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> nDigest, id<OrgSpongycastleCryptoDigest> twoNDigest) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer, initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_, nDigest, twoNDigest)
}

OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer *create_OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> nDigest, id<OrgSpongycastleCryptoDigest> twoNDigest) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer, initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_, nDigest, twoNDigest)
}

void OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_validate_authpathWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(OrgSpongycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *root, IOSByteArray *leaf, jint leafidx, IOSByteArray *authpath, jint auOff, IOSByteArray *masks, jint height) {
  OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_initialize();
  jint i;
  jint j;
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:2 * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  if ((leafidx & 1) != 0) {
    for (j = 0; j < OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++) {
      *IOSByteArray_GetRef(buffer, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + j) = IOSByteArray_Get(nil_chk(leaf), j);
    }
    for (j = 0; j < OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++) {
      *IOSByteArray_GetRef(buffer, j) = IOSByteArray_Get(nil_chk(authpath), auOff + j);
    }
  }
  else {
    for (j = 0; j < OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++) {
      *IOSByteArray_GetRef(buffer, j) = IOSByteArray_Get(nil_chk(leaf), j);
    }
    for (j = 0; j < OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++) {
      *IOSByteArray_GetRef(buffer, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + j) = IOSByteArray_Get(nil_chk(authpath), auOff + j);
    }
  }
  jint authOff = auOff + OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
  for (i = 0; i < height - 1; i++) {
    JreURShiftAssignInt(&leafidx, 1);
    if ((leafidx & 1) != 0) {
      [((OrgSpongycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:buffer withInt:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:buffer withInt:0 withByteArray:masks withInt:2 * (OrgSpongycastlePqcCryptoSphincsWots_WOTS_LOG_L + i) * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
      for (j = 0; j < OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++) {
        *IOSByteArray_GetRef(buffer, j) = IOSByteArray_Get(nil_chk(authpath), authOff + j);
      }
    }
    else {
      [((OrgSpongycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:buffer withInt:0 withByteArray:buffer withInt:0 withByteArray:masks withInt:2 * (OrgSpongycastlePqcCryptoSphincsWots_WOTS_LOG_L + i) * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
      for (j = 0; j < OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; j++) {
        *IOSByteArray_GetRef(buffer, j + OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES) = IOSByteArray_Get(nil_chk(authpath), authOff + j);
      }
    }
    authOff += OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES;
  }
  [((OrgSpongycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:root withInt:0 withByteArray:buffer withInt:0 withByteArray:masks withInt:2 * (OrgSpongycastlePqcCryptoSphincsWots_WOTS_LOG_L + height - 1) * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
}

void OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_compute_authpath_wotsWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withByteArray_withInt_withOrgSpongycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withByteArray_withInt_(OrgSpongycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *root, IOSByteArray *authpath, jint authOff, OrgSpongycastlePqcCryptoSphincsTree_leafaddr *a, IOSByteArray *sk, IOSByteArray *masks, jint height) {
  OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_initialize();
  jint i;
  jint idx;
  jint j;
  OrgSpongycastlePqcCryptoSphincsTree_leafaddr *ta = new_OrgSpongycastlePqcCryptoSphincsTree_leafaddr_initWithOrgSpongycastlePqcCryptoSphincsTree_leafaddr_(a);
  IOSByteArray *tree = [IOSByteArray newArrayWithLength:2 * (JreLShift32(1, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)) * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:(JreLShift32(1, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)) * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES];
  IOSByteArray *pk = [IOSByteArray newArrayWithLength:(JreLShift32(1, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)) * OrgSpongycastlePqcCryptoSphincsWots_WOTS_L * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  for (ta->subleaf_ = 0; ta->subleaf_ < (JreLShift32(1, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)); ta->subleaf_++) {
    OrgSpongycastlePqcCryptoSphincsSeed_get_seedWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withOrgSpongycastlePqcCryptoSphincsTree_leafaddr_(hs, seed, (jint) (ta->subleaf_ * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES), sk, ta);
  }
  OrgSpongycastlePqcCryptoSphincsWots *w = new_OrgSpongycastlePqcCryptoSphincsWots_init();
  for (ta->subleaf_ = 0; ta->subleaf_ < (JreLShift32(1, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)); ta->subleaf_++) {
    [w wots_pkgenWithOrgSpongycastlePqcCryptoSphincsHashFunctions:hs withByteArray:pk withInt:(jint) (ta->subleaf_ * OrgSpongycastlePqcCryptoSphincsWots_WOTS_L * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES) withByteArray:seed withInt:(jint) (ta->subleaf_ * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES) withByteArray:masks withInt:0];
  }
  for (ta->subleaf_ = 0; ta->subleaf_ < (JreLShift32(1, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)); ta->subleaf_++) {
    OrgSpongycastlePqcCryptoSphincsTree_l_treeWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(hs, tree, (jint) ((JreLShift32(1, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)) * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + ta->subleaf_ * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES), pk, (jint) (ta->subleaf_ * OrgSpongycastlePqcCryptoSphincsWots_WOTS_L * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES), masks, 0);
  }
  jint level = 0;
  for (i = (JreLShift32(1, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)); i > 0; JreURShiftAssignInt(&i, 1)) {
    for (j = 0; j < i; j += 2) {
      [((OrgSpongycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) hash_2n_n_maskWithByteArray:tree withInt:(JreURShift32(i, 1)) * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + (JreURShift32(j, 1)) * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:tree withInt:i * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + j * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES withByteArray:masks withInt:2 * (OrgSpongycastlePqcCryptoSphincsWots_WOTS_LOG_L + level) * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
    }
    level++;
  }
  idx = (jint) ((OrgSpongycastlePqcCryptoSphincsTree_leafaddr *) nil_chk(a))->subleaf_;
  for (i = 0; i < height; i++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tree, (JreURShift32((JreLShift32(1, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT)), i)) * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES + ((JreURShift32(idx, i)) ^ 1) * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, authpath, authOff + i * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tree, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES, root, 0, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
}

void OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer_zerobytesWithByteArray_withInt_withInt_(OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer *self, IOSByteArray *tsk, jint off, jint cryptoSecretkeybytes) {
  for (jint i = 0; i != cryptoSecretkeybytes; i++) {
    *IOSByteArray_GetRef(nil_chk(tsk), off + i) = 0;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoSphincsSPHINCS256Signer)
