//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/ntru/IndexGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/pqc/crypto/ntru/IndexGenerator.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUEncryptionParameters.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastlePqcCryptoNtruIndexGenerator () {
 @public
  IOSByteArray *seed_;
  jint N_;
  jint c_;
  jint minCallsR_;
  jint totLen_;
  jint remLen_;
  OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString *buf_;
  jint counter_;
  jboolean initialized_;
  id<OrgSpongycastleCryptoDigest> hashAlg_;
  jint hLen_;
}

- (void)appendHashWithOrgSpongycastlePqcCryptoNtruIndexGenerator_BitString:(OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString *)m
                                                             withByteArray:(IOSByteArray *)hash_;

- (void)putIntWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hashAlg
                                      withInt:(jint)counter;

+ (IOSByteArray *)copyOfWithByteArray:(IOSByteArray *)src
                              withInt:(jint)len OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoNtruIndexGenerator, seed_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoNtruIndexGenerator, buf_, OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoNtruIndexGenerator, hashAlg_, id<OrgSpongycastleCryptoDigest>)

__attribute__((unused)) static void OrgSpongycastlePqcCryptoNtruIndexGenerator_appendHashWithOrgSpongycastlePqcCryptoNtruIndexGenerator_BitString_withByteArray_(OrgSpongycastlePqcCryptoNtruIndexGenerator *self, OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString *m, IOSByteArray *hash_);

__attribute__((unused)) static void OrgSpongycastlePqcCryptoNtruIndexGenerator_putIntWithOrgSpongycastleCryptoDigest_withInt_(OrgSpongycastlePqcCryptoNtruIndexGenerator *self, id<OrgSpongycastleCryptoDigest> hashAlg, jint counter);

__attribute__((unused)) static IOSByteArray *OrgSpongycastlePqcCryptoNtruIndexGenerator_copyOfWithByteArray_withInt_(IOSByteArray *src, jint len);

@implementation OrgSpongycastlePqcCryptoNtruIndexGenerator

- (instancetype)initWithByteArray:(IOSByteArray *)seed
withOrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters:(OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *)params {
  OrgSpongycastlePqcCryptoNtruIndexGenerator_initWithByteArray_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_(self, seed, params);
  return self;
}

- (jint)nextIndex {
  if (!initialized_) {
    buf_ = new_OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString_init();
    IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(hashAlg_)) getDigestSize]];
    while (counter_ < minCallsR_) {
      OrgSpongycastlePqcCryptoNtruIndexGenerator_appendHashWithOrgSpongycastlePqcCryptoNtruIndexGenerator_BitString_withByteArray_(self, buf_, hash_);
      counter_++;
    }
    totLen_ = minCallsR_ * 8 * hLen_;
    remLen_ = totLen_;
    initialized_ = true;
  }
  while (true) {
    totLen_ += c_;
    OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString *M = [((OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString *) nil_chk(buf_)) getTrailingWithInt:remLen_];
    if (remLen_ < c_) {
      jint tmpLen = c_ - remLen_;
      jint cThreshold = counter_ + (tmpLen + hLen_ - 1) / hLen_;
      IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(hashAlg_)) getDigestSize]];
      while (counter_ < cThreshold) {
        OrgSpongycastlePqcCryptoNtruIndexGenerator_appendHashWithOrgSpongycastlePqcCryptoNtruIndexGenerator_BitString_withByteArray_(self, M, hash_);
        counter_++;
        if (tmpLen > 8 * hLen_) {
          tmpLen -= 8 * hLen_;
        }
      }
      remLen_ = 8 * hLen_ - tmpLen;
      buf_ = new_OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString_init();
      [buf_ appendBitsWithByteArray:hash_];
    }
    else {
      remLen_ -= c_;
    }
    jint i = [((OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString *) nil_chk(M)) getLeadingAsIntWithInt:c_];
    if (i < (JreLShift32(1, c_)) - ((JreLShift32(1, c_)) % N_)) {
      return i % N_;
    }
  }
}

- (void)appendHashWithOrgSpongycastlePqcCryptoNtruIndexGenerator_BitString:(OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString *)m
                                                             withByteArray:(IOSByteArray *)hash_ {
  OrgSpongycastlePqcCryptoNtruIndexGenerator_appendHashWithOrgSpongycastlePqcCryptoNtruIndexGenerator_BitString_withByteArray_(self, m, hash_);
}

- (void)putIntWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hashAlg
                                      withInt:(jint)counter {
  OrgSpongycastlePqcCryptoNtruIndexGenerator_putIntWithOrgSpongycastleCryptoDigest_withInt_(self, hashAlg, counter);
}

+ (IOSByteArray *)copyOfWithByteArray:(IOSByteArray *)src
                              withInt:(jint)len {
  return OrgSpongycastlePqcCryptoNtruIndexGenerator_copyOfWithByteArray_withInt_(src, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withOrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters:);
  methods[1].selector = @selector(nextIndex);
  methods[2].selector = @selector(appendHashWithOrgSpongycastlePqcCryptoNtruIndexGenerator_BitString:withByteArray:);
  methods[3].selector = @selector(putIntWithOrgSpongycastleCryptoDigest:withInt:);
  methods[4].selector = @selector(copyOfWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "seed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "N_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "c_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "minCallsR_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "totLen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "remLen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buf_", "LOrgSpongycastlePqcCryptoNtruIndexGenerator_BitString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "counter_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashAlg_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hLen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BLOrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters;", "appendHash", "LOrgSpongycastlePqcCryptoNtruIndexGenerator_BitString;[B", "putInt", "LOrgSpongycastleCryptoDigest;I", "copyOf", "[BI", "LOrgSpongycastlePqcCryptoNtruIndexGenerator_BitString;" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoNtruIndexGenerator = { "IndexGenerator", "org.spongycastle.pqc.crypto.ntru", ptrTable, methods, fields, 7, 0x1, 5, 11, -1, 7, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoNtruIndexGenerator;
}

@end

void OrgSpongycastlePqcCryptoNtruIndexGenerator_initWithByteArray_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_(OrgSpongycastlePqcCryptoNtruIndexGenerator *self, IOSByteArray *seed, OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *params) {
  NSObject_init(self);
  self->seed_ = seed;
  self->N_ = ((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(params))->N_;
  self->c_ = params->c_;
  self->minCallsR_ = params->minCallsR_;
  self->totLen_ = 0;
  self->remLen_ = 0;
  self->counter_ = 0;
  self->hashAlg_ = params->hashAlg_;
  self->hLen_ = [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->hashAlg_)) getDigestSize];
  self->initialized_ = false;
}

OrgSpongycastlePqcCryptoNtruIndexGenerator *new_OrgSpongycastlePqcCryptoNtruIndexGenerator_initWithByteArray_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_(IOSByteArray *seed, OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *params) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoNtruIndexGenerator, initWithByteArray_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_, seed, params)
}

OrgSpongycastlePqcCryptoNtruIndexGenerator *create_OrgSpongycastlePqcCryptoNtruIndexGenerator_initWithByteArray_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_(IOSByteArray *seed, OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *params) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoNtruIndexGenerator, initWithByteArray_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_, seed, params)
}

void OrgSpongycastlePqcCryptoNtruIndexGenerator_appendHashWithOrgSpongycastlePqcCryptoNtruIndexGenerator_BitString_withByteArray_(OrgSpongycastlePqcCryptoNtruIndexGenerator *self, OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString *m, IOSByteArray *hash_) {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->hashAlg_)) updateWithByteArray:self->seed_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->seed_))->size_];
  OrgSpongycastlePqcCryptoNtruIndexGenerator_putIntWithOrgSpongycastleCryptoDigest_withInt_(self, self->hashAlg_, self->counter_);
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->hashAlg_)) doFinalWithByteArray:hash_ withInt:0];
  [((OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString *) nil_chk(m)) appendBitsWithByteArray:hash_];
}

void OrgSpongycastlePqcCryptoNtruIndexGenerator_putIntWithOrgSpongycastleCryptoDigest_withInt_(OrgSpongycastlePqcCryptoNtruIndexGenerator *self, id<OrgSpongycastleCryptoDigest> hashAlg, jint counter) {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(hashAlg)) updateWithByte:(jbyte) (JreRShift32(counter, 24))];
  [hashAlg updateWithByte:(jbyte) (JreRShift32(counter, 16))];
  [hashAlg updateWithByte:(jbyte) (JreRShift32(counter, 8))];
  [hashAlg updateWithByte:(jbyte) counter];
}

IOSByteArray *OrgSpongycastlePqcCryptoNtruIndexGenerator_copyOfWithByteArray_withInt_(IOSByteArray *src, jint len) {
  OrgSpongycastlePqcCryptoNtruIndexGenerator_initialize();
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(src, 0, tmp, 0, len < ((IOSByteArray *) nil_chk(src))->size_ ? len : src->size_);
  return tmp;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoNtruIndexGenerator)

@implementation OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)appendBitsWithByteArray:(IOSByteArray *)bytes {
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(bytes))->size_; i++) {
    [self appendBitsWithByte:IOSByteArray_Get(bytes, i)];
  }
}

- (void)appendBitsWithByte:(jbyte)b {
  if (numBytes_ == ((IOSByteArray *) nil_chk(bytes_))->size_) {
    bytes_ = OrgSpongycastlePqcCryptoNtruIndexGenerator_copyOfWithByteArray_withInt_(bytes_, 2 * bytes_->size_);
  }
  if (numBytes_ == 0) {
    numBytes_ = 1;
    *IOSByteArray_GetRef(nil_chk(bytes_), 0) = b;
    lastByteBits_ = 8;
  }
  else if (lastByteBits_ == 8) {
    *IOSByteArray_GetRef(nil_chk(bytes_), numBytes_++) = b;
  }
  else {
    jint s = 8 - lastByteBits_;
    *IOSByteArray_GetRef(nil_chk(bytes_), numBytes_ - 1) |= JreLShift32((b & (jint) 0xFF), lastByteBits_);
    *IOSByteArray_GetRef(bytes_, numBytes_++) = (jbyte) (JreRShift32((b & (jint) 0xFF), s));
  }
}

- (OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString *)getTrailingWithInt:(jint)numBits {
  OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString *newStr = new_OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString_init();
  newStr->numBytes_ = (numBits + 7) / 8;
  newStr->bytes_ = [IOSByteArray newArrayWithLength:newStr->numBytes_];
  for (jint i = 0; i < newStr->numBytes_; i++) {
    *IOSByteArray_GetRef(newStr->bytes_, i) = IOSByteArray_Get(bytes_, i);
  }
  newStr->lastByteBits_ = numBits % 8;
  if (newStr->lastByteBits_ == 0) {
    newStr->lastByteBits_ = 8;
  }
  else {
    jint s = 32 - newStr->lastByteBits_;
    *IOSByteArray_GetRef(newStr->bytes_, newStr->numBytes_ - 1) = (jbyte) (JreURShift32(JreLShift32(IOSByteArray_Get(newStr->bytes_, newStr->numBytes_ - 1), s), s));
  }
  return newStr;
}

- (jint)getLeadingAsIntWithInt:(jint)numBits {
  jint startBit = (numBytes_ - 1) * 8 + lastByteBits_ - numBits;
  jint startByte = startBit / 8;
  jint startBitInStartByte = startBit % 8;
  jint sum = JreURShift32((IOSByteArray_Get(nil_chk(bytes_), startByte) & (jint) 0xFF), startBitInStartByte);
  jint shift = 8 - startBitInStartByte;
  for (jint i = startByte + 1; i < numBytes_; i++) {
    sum |= JreLShift32((IOSByteArray_Get(bytes_, i) & (jint) 0xFF), shift);
    shift += 8;
  }
  return sum;
}

- (IOSByteArray *)getBytes {
  return OrgSpongycastleUtilArrays_cloneWithByteArray_(bytes_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcCryptoNtruIndexGenerator_BitString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(appendBitsWithByteArray:);
  methods[2].selector = @selector(appendBitsWithByte:);
  methods[3].selector = @selector(getTrailingWithInt:);
  methods[4].selector = @selector(getLeadingAsIntWithInt:);
  methods[5].selector = @selector(getBytes);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bytes_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "numBytes_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastByteBits_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "appendBits", "[B", "B", "getTrailing", "I", "getLeadingAsInt", "LOrgSpongycastlePqcCryptoNtruIndexGenerator;" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString = { "BitString", "org.spongycastle.pqc.crypto.ntru", ptrTable, methods, fields, 7, 0x9, 6, 3, 6, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString;
}

@end

void OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString_init(OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString *self) {
  NSObject_init(self);
  self->bytes_ = [IOSByteArray newArrayWithLength:4];
}

OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString *new_OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString, init)
}

OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString *create_OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoNtruIndexGenerator_BitString)
