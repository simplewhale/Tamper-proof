//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/sphincs/HashFunctions.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/pqc/crypto/sphincs/HashFunctions.h"
#include "org/spongycastle/pqc/crypto/sphincs/Permute.h"
#include "org/spongycastle/pqc/crypto/sphincs/SPHINCS256Config.h"
#include "org/spongycastle/util/Strings.h"

@interface OrgSpongycastlePqcCryptoSphincsHashFunctions () {
 @public
  id<OrgSpongycastleCryptoDigest> dig256_;
  id<OrgSpongycastleCryptoDigest> dig512_;
  OrgSpongycastlePqcCryptoSphincsPermute *perm_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoSphincsHashFunctions, dig256_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoSphincsHashFunctions, dig512_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoSphincsHashFunctions, perm_, OrgSpongycastlePqcCryptoSphincsPermute *)

inline IOSByteArray *OrgSpongycastlePqcCryptoSphincsHashFunctions_get_hashc(void);
static IOSByteArray *OrgSpongycastlePqcCryptoSphincsHashFunctions_hashc;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcCryptoSphincsHashFunctions, hashc, IOSByteArray *)

J2OBJC_INITIALIZED_DEFN(OrgSpongycastlePqcCryptoSphincsHashFunctions)

@implementation OrgSpongycastlePqcCryptoSphincsHashFunctions

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)dig256 {
  OrgSpongycastlePqcCryptoSphincsHashFunctions_initWithOrgSpongycastleCryptoDigest_(self, dig256);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)dig256
                    withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)dig512 {
  OrgSpongycastlePqcCryptoSphincsHashFunctions_initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_(self, dig256, dig512);
  return self;
}

- (jint)varlen_hashWithByteArray:(IOSByteArray *)outArg
                         withInt:(jint)outOff
                   withByteArray:(IOSByteArray *)inArg
                         withInt:(jint)inLen {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(dig256_)) updateWithByteArray:inArg withInt:0 withInt:inLen];
  [dig256_ doFinalWithByteArray:outArg withInt:outOff];
  return 0;
}

- (id<OrgSpongycastleCryptoDigest>)getMessageHash {
  return dig512_;
}

- (jint)hash_2n_nWithByteArray:(IOSByteArray *)outArg
                       withInt:(jint)outOff
                 withByteArray:(IOSByteArray *)inArg
                       withInt:(jint)inOff {
  IOSByteArray *x = [IOSByteArray newArrayWithLength:64];
  jint i;
  for (i = 0; i < 32; i++) {
    *IOSByteArray_GetRef(x, i) = IOSByteArray_Get(nil_chk(inArg), inOff + i);
    *IOSByteArray_GetRef(x, i + 32) = IOSByteArray_Get(nil_chk(OrgSpongycastlePqcCryptoSphincsHashFunctions_hashc), i);
  }
  [((OrgSpongycastlePqcCryptoSphincsPermute *) nil_chk(perm_)) chacha_permuteWithByteArray:x withByteArray:x];
  for (i = 0; i < 32; i++) {
    *IOSByteArray_GetRef(x, i) = (jbyte) (IOSByteArray_Get(x, i) ^ IOSByteArray_Get(nil_chk(inArg), inOff + i + 32));
  }
  [perm_ chacha_permuteWithByteArray:x withByteArray:x];
  for (i = 0; i < 32; i++) {
    *IOSByteArray_GetRef(nil_chk(outArg), outOff + i) = IOSByteArray_Get(x, i);
  }
  return 0;
}

- (jint)hash_2n_n_maskWithByteArray:(IOSByteArray *)outArg
                            withInt:(jint)outOff
                      withByteArray:(IOSByteArray *)inArg
                            withInt:(jint)inOff
                      withByteArray:(IOSByteArray *)mask
                            withInt:(jint)maskOff {
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:2 * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  jint i;
  for (i = 0; i < 2 * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; i++) {
    *IOSByteArray_GetRef(buf, i) = (jbyte) (IOSByteArray_Get(nil_chk(inArg), inOff + i) ^ IOSByteArray_Get(nil_chk(mask), maskOff + i));
  }
  jint rv = [self hash_2n_nWithByteArray:outArg withInt:outOff withByteArray:buf withInt:0];
  return rv;
}

- (jint)hash_n_nWithByteArray:(IOSByteArray *)outArg
                      withInt:(jint)outOff
                withByteArray:(IOSByteArray *)inArg
                      withInt:(jint)inOff {
  IOSByteArray *x = [IOSByteArray newArrayWithLength:64];
  jint i;
  for (i = 0; i < 32; i++) {
    *IOSByteArray_GetRef(x, i) = IOSByteArray_Get(nil_chk(inArg), inOff + i);
    *IOSByteArray_GetRef(x, i + 32) = IOSByteArray_Get(nil_chk(OrgSpongycastlePqcCryptoSphincsHashFunctions_hashc), i);
  }
  [((OrgSpongycastlePqcCryptoSphincsPermute *) nil_chk(perm_)) chacha_permuteWithByteArray:x withByteArray:x];
  for (i = 0; i < 32; i++) {
    *IOSByteArray_GetRef(nil_chk(outArg), outOff + i) = IOSByteArray_Get(x, i);
  }
  return 0;
}

- (jint)hash_n_n_maskWithByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                     withByteArray:(IOSByteArray *)inArg
                           withInt:(jint)inOff
                     withByteArray:(IOSByteArray *)mask
                           withInt:(jint)maskOff {
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES];
  jint i;
  for (i = 0; i < OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES; i++) {
    *IOSByteArray_GetRef(buf, i) = (jbyte) (IOSByteArray_Get(nil_chk(inArg), inOff + i) ^ IOSByteArray_Get(nil_chk(mask), maskOff + i));
  }
  return [self hash_n_nWithByteArray:outArg withInt:outOff withByteArray:buf withInt:0];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoDigest;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 7, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 8, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoDigest:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoDigest:withOrgSpongycastleCryptoDigest:);
  methods[2].selector = @selector(varlen_hashWithByteArray:withInt:withByteArray:withInt:);
  methods[3].selector = @selector(getMessageHash);
  methods[4].selector = @selector(hash_2n_nWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(hash_2n_n_maskWithByteArray:withInt:withByteArray:withInt:withByteArray:withInt:);
  methods[6].selector = @selector(hash_n_nWithByteArray:withInt:withByteArray:withInt:);
  methods[7].selector = @selector(hash_n_n_maskWithByteArray:withInt:withByteArray:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hashc", "[B", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "dig256_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "dig512_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "perm_", "LOrgSpongycastlePqcCryptoSphincsPermute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDigest;", "LOrgSpongycastleCryptoDigest;LOrgSpongycastleCryptoDigest;", "varlen_hash", "[BI[BI", "hash_2n_n", "hash_2n_n_mask", "[BI[BI[BI", "hash_n_n", "hash_n_n_mask", &OrgSpongycastlePqcCryptoSphincsHashFunctions_hashc };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoSphincsHashFunctions = { "HashFunctions", "org.spongycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x0, 8, 4, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoSphincsHashFunctions;
}

+ (void)initialize {
  if (self == [OrgSpongycastlePqcCryptoSphincsHashFunctions class]) {
    OrgSpongycastlePqcCryptoSphincsHashFunctions_hashc = OrgSpongycastleUtilStrings_toByteArrayWithNSString_(@"expand 32-byte to 64-byte state!");
    J2OBJC_SET_INITIALIZED(OrgSpongycastlePqcCryptoSphincsHashFunctions)
  }
}

@end

void OrgSpongycastlePqcCryptoSphincsHashFunctions_initWithOrgSpongycastleCryptoDigest_(OrgSpongycastlePqcCryptoSphincsHashFunctions *self, id<OrgSpongycastleCryptoDigest> dig256) {
  OrgSpongycastlePqcCryptoSphincsHashFunctions_initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_(self, dig256, nil);
}

OrgSpongycastlePqcCryptoSphincsHashFunctions *new_OrgSpongycastlePqcCryptoSphincsHashFunctions_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> dig256) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoSphincsHashFunctions, initWithOrgSpongycastleCryptoDigest_, dig256)
}

OrgSpongycastlePqcCryptoSphincsHashFunctions *create_OrgSpongycastlePqcCryptoSphincsHashFunctions_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> dig256) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoSphincsHashFunctions, initWithOrgSpongycastleCryptoDigest_, dig256)
}

void OrgSpongycastlePqcCryptoSphincsHashFunctions_initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_(OrgSpongycastlePqcCryptoSphincsHashFunctions *self, id<OrgSpongycastleCryptoDigest> dig256, id<OrgSpongycastleCryptoDigest> dig512) {
  NSObject_init(self);
  self->perm_ = new_OrgSpongycastlePqcCryptoSphincsPermute_init();
  self->dig256_ = dig256;
  self->dig512_ = dig512;
}

OrgSpongycastlePqcCryptoSphincsHashFunctions *new_OrgSpongycastlePqcCryptoSphincsHashFunctions_initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> dig256, id<OrgSpongycastleCryptoDigest> dig512) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoSphincsHashFunctions, initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_, dig256, dig512)
}

OrgSpongycastlePqcCryptoSphincsHashFunctions *create_OrgSpongycastlePqcCryptoSphincsHashFunctions_initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> dig256, id<OrgSpongycastleCryptoDigest> dig512) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoSphincsHashFunctions, initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_, dig256, dig512)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoSphincsHashFunctions)
