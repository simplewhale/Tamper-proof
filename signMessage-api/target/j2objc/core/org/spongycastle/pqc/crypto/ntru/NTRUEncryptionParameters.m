//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/ntru/NTRUEncryptionParameters.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Arrays.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/digests/SHA256Digest.h"
#include "org/spongycastle/crypto/digests/SHA512Digest.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUEncryptionParameters.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUParameters.h"

@interface OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters ()

- (void)init__ OBJC_METHOD_FAMILY_NONE;

@end

__attribute__((unused)) static void OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_init__(OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *self);

@implementation OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters

- (instancetype)initWithInt:(jint)N
                    withInt:(jint)q
                    withInt:(jint)df
                    withInt:(jint)dm0
                    withInt:(jint)db
                    withInt:(jint)c
                    withInt:(jint)minCallsR
                    withInt:(jint)minCallsMask
                withBoolean:(jboolean)hashSeed
              withByteArray:(IOSByteArray *)oid
                withBoolean:(jboolean)sparse
                withBoolean:(jboolean)fastFp
withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hashAlg {
  OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_withByteArray_withBoolean_withBoolean_withOrgSpongycastleCryptoDigest_(self, N, q, df, dm0, db, c, minCallsR, minCallsMask, hashSeed, oid, sparse, fastFp, hashAlg);
  return self;
}

- (instancetype)initWithInt:(jint)N
                    withInt:(jint)q
                    withInt:(jint)df1
                    withInt:(jint)df2
                    withInt:(jint)df3
                    withInt:(jint)dm0
                    withInt:(jint)db
                    withInt:(jint)c
                    withInt:(jint)minCallsR
                    withInt:(jint)minCallsMask
                withBoolean:(jboolean)hashSeed
              withByteArray:(IOSByteArray *)oid
                withBoolean:(jboolean)sparse
                withBoolean:(jboolean)fastFp
withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hashAlg {
  OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_withByteArray_withBoolean_withBoolean_withOrgSpongycastleCryptoDigest_(self, N, q, df1, df2, df3, dm0, db, c, minCallsR, minCallsMask, hashSeed, oid, sparse, fastFp, hashAlg);
  return self;
}

- (void)init__ {
  OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_init__(self);
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is {
  OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_initWithJavaIoInputStream_(self, is);
  return self;
}

- (OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *)java_clone {
  if (polyType_ == OrgSpongycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_SIMPLE) {
    return new_OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_withByteArray_withBoolean_withBoolean_withOrgSpongycastleCryptoDigest_(N_, q_, df_, dm0_, db_, c_, minCallsR_, minCallsMask_, hashSeed_, oid_, sparse_, fastFp_, hashAlg_);
  }
  else {
    return new_OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_withByteArray_withBoolean_withBoolean_withOrgSpongycastleCryptoDigest_(N_, q_, df1_, df2_, df3_, dm0_, db_, c_, minCallsR_, minCallsMask_, hashSeed_, oid_, sparse_, fastFp_, hashAlg_);
  }
}

- (jint)getMaxMessageLength {
  return maxMsgLenBytes_;
}

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  JavaIoDataOutputStream *dos = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_(os);
  [dos writeIntWithInt:N_];
  [dos writeIntWithInt:q_];
  [dos writeIntWithInt:df_];
  [dos writeIntWithInt:df1_];
  [dos writeIntWithInt:df2_];
  [dos writeIntWithInt:df3_];
  [dos writeIntWithInt:db_];
  [dos writeIntWithInt:dm0_];
  [dos writeIntWithInt:c_];
  [dos writeIntWithInt:minCallsR_];
  [dos writeIntWithInt:minCallsMask_];
  [dos writeBooleanWithBoolean:hashSeed_];
  [dos writeWithByteArray:oid_];
  [dos writeBooleanWithBoolean:sparse_];
  [dos writeBooleanWithBoolean:fastFp_];
  [dos writeWithInt:polyType_];
  [dos writeUTFWithNSString:[((id<OrgSpongycastleCryptoDigest>) nil_chk(hashAlg_)) getAlgorithmName]];
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + N_;
  result = prime * result + bufferLenBits_;
  result = prime * result + bufferLenTrits_;
  result = prime * result + c_;
  result = prime * result + db_;
  result = prime * result + df_;
  result = prime * result + df1_;
  result = prime * result + df2_;
  result = prime * result + df3_;
  result = prime * result + dg_;
  result = prime * result + dm0_;
  result = prime * result + dr_;
  result = prime * result + dr1_;
  result = prime * result + dr2_;
  result = prime * result + dr3_;
  result = prime * result + (fastFp_ ? 1231 : 1237);
  result = prime * result + ((hashAlg_ == nil) ? 0 : ((jint) [((NSString *) nil_chk([((id<OrgSpongycastleCryptoDigest>) nil_chk(hashAlg_)) getAlgorithmName])) hash]));
  result = prime * result + (hashSeed_ ? 1231 : 1237);
  result = prime * result + llen_;
  result = prime * result + maxMsgLenBytes_;
  result = prime * result + minCallsMask_;
  result = prime * result + minCallsR_;
  result = prime * result + JavaUtilArrays_hashCodeWithByteArray_(oid_);
  result = prime * result + pkLen_;
  result = prime * result + polyType_;
  result = prime * result + q_;
  result = prime * result + (sparse_ ? 1231 : 1237);
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if ([self java_getClass] != [obj java_getClass]) {
    return false;
  }
  OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *other = (OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) cast_chk(obj, [OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters class]);
  if (N_ != other->N_) {
    return false;
  }
  if (bufferLenBits_ != other->bufferLenBits_) {
    return false;
  }
  if (bufferLenTrits_ != other->bufferLenTrits_) {
    return false;
  }
  if (c_ != other->c_) {
    return false;
  }
  if (db_ != other->db_) {
    return false;
  }
  if (df_ != other->df_) {
    return false;
  }
  if (df1_ != other->df1_) {
    return false;
  }
  if (df2_ != other->df2_) {
    return false;
  }
  if (df3_ != other->df3_) {
    return false;
  }
  if (dg_ != other->dg_) {
    return false;
  }
  if (dm0_ != other->dm0_) {
    return false;
  }
  if (dr_ != other->dr_) {
    return false;
  }
  if (dr1_ != other->dr1_) {
    return false;
  }
  if (dr2_ != other->dr2_) {
    return false;
  }
  if (dr3_ != other->dr3_) {
    return false;
  }
  if (fastFp_ != other->fastFp_) {
    return false;
  }
  if (hashAlg_ == nil) {
    if (other->hashAlg_ != nil) {
      return false;
    }
  }
  else if (![((NSString *) nil_chk([hashAlg_ getAlgorithmName])) isEqual:[((id<OrgSpongycastleCryptoDigest>) nil_chk(other->hashAlg_)) getAlgorithmName]]) {
    return false;
  }
  if (hashSeed_ != other->hashSeed_) {
    return false;
  }
  if (llen_ != other->llen_) {
    return false;
  }
  if (maxMsgLenBytes_ != other->maxMsgLenBytes_) {
    return false;
  }
  if (minCallsMask_ != other->minCallsMask_) {
    return false;
  }
  if (minCallsR_ != other->minCallsR_) {
    return false;
  }
  if (!JavaUtilArrays_equalsWithByteArray_withByteArray_(oid_, other->oid_)) {
    return false;
  }
  if (pkLen_ != other->pkLen_) {
    return false;
  }
  if (polyType_ != other->polyType_) {
    return false;
  }
  if (q_ != other->q_) {
    return false;
  }
  if (sparse_ != other->sparse_) {
    return false;
  }
  return true;
}

- (NSString *)description {
  JavaLangStringBuilder *output = new_JavaLangStringBuilder_initWithNSString_(JreStrcat("$I$I", @"EncryptionParameters(N=", N_, @" q=", q_));
  if (polyType_ == OrgSpongycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_SIMPLE) {
    (void) [output appendWithNSString:JreStrcat("$I", @" polyType=SIMPLE df=", df_)];
  }
  else {
    (void) [output appendWithNSString:JreStrcat("$I$I$I", @" polyType=PRODUCT df1=", df1_, @" df2=", df2_, @" df3=", df3_)];
  }
  (void) [output appendWithNSString:JreStrcat("$I$I$I$I$I$Z$@$$$ZC", @" dm0=", dm0_, @" db=", db_, @" c=", c_, @" minCallsR=", minCallsR_, @" minCallsMask=", minCallsMask_, @" hashSeed=", hashSeed_, @" hashAlg=", hashAlg_, @" oid=", JavaUtilArrays_toStringWithByteArray_(oid_), @" sparse=", sparse_, ')')];
  return [output description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 4, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 4, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withBoolean:withByteArray:withBoolean:withBoolean:withOrgSpongycastleCryptoDigest:);
  methods[1].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withBoolean:withByteArray:withBoolean:withBoolean:withOrgSpongycastleCryptoDigest:);
  methods[2].selector = @selector(init__);
  methods[3].selector = @selector(initWithJavaIoInputStream:);
  methods[4].selector = @selector(java_clone);
  methods[5].selector = @selector(getMaxMessageLength);
  methods[6].selector = @selector(writeToWithJavaIoOutputStream:);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "N_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "q_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "df_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "df1_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "df2_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "df3_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dr_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dr1_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dr2_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dr3_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dg_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "llen_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxMsgLenBytes_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "db_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bufferLenBits_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bufferLenTrits_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "dm0_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "pkLen_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "c_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "minCallsR_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "minCallsMask_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "hashSeed_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "oid_", "[B", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "sparse_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "fastFp_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "polyType_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "hashAlg_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIIIIIIIZ[BZZLOrgSpongycastleCryptoDigest;", "IIIIIIIIIIZ[BZZLOrgSpongycastleCryptoDigest;", "init", "LJavaIoInputStream;", "LJavaIoIOException;", "clone", "writeTo", "LJavaIoOutputStream;", "hashCode", "equals", "LNSObject;", "toString" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters = { "NTRUEncryptionParameters", "org.spongycastle.pqc.crypto.ntru", ptrTable, methods, fields, 7, 0x1, 10, 27, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_withByteArray_withBoolean_withBoolean_withOrgSpongycastleCryptoDigest_(OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *self, jint N, jint q, jint df, jint dm0, jint db, jint c, jint minCallsR, jint minCallsMask, jboolean hashSeed, IOSByteArray *oid, jboolean sparse, jboolean fastFp, id<OrgSpongycastleCryptoDigest> hashAlg) {
  NSObject_init(self);
  self->N_ = N;
  self->q_ = q;
  self->df_ = df;
  self->db_ = db;
  self->dm0_ = dm0;
  self->c_ = c;
  self->minCallsR_ = minCallsR;
  self->minCallsMask_ = minCallsMask;
  self->hashSeed_ = hashSeed;
  self->oid_ = oid;
  self->sparse_ = sparse;
  self->fastFp_ = fastFp;
  self->polyType_ = OrgSpongycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_SIMPLE;
  self->hashAlg_ = hashAlg;
  OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_init__(self);
}

OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *new_OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_withByteArray_withBoolean_withBoolean_withOrgSpongycastleCryptoDigest_(jint N, jint q, jint df, jint dm0, jint db, jint c, jint minCallsR, jint minCallsMask, jboolean hashSeed, IOSByteArray *oid, jboolean sparse, jboolean fastFp, id<OrgSpongycastleCryptoDigest> hashAlg) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_withByteArray_withBoolean_withBoolean_withOrgSpongycastleCryptoDigest_, N, q, df, dm0, db, c, minCallsR, minCallsMask, hashSeed, oid, sparse, fastFp, hashAlg)
}

OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *create_OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_withByteArray_withBoolean_withBoolean_withOrgSpongycastleCryptoDigest_(jint N, jint q, jint df, jint dm0, jint db, jint c, jint minCallsR, jint minCallsMask, jboolean hashSeed, IOSByteArray *oid, jboolean sparse, jboolean fastFp, id<OrgSpongycastleCryptoDigest> hashAlg) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_withByteArray_withBoolean_withBoolean_withOrgSpongycastleCryptoDigest_, N, q, df, dm0, db, c, minCallsR, minCallsMask, hashSeed, oid, sparse, fastFp, hashAlg)
}

void OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_withByteArray_withBoolean_withBoolean_withOrgSpongycastleCryptoDigest_(OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *self, jint N, jint q, jint df1, jint df2, jint df3, jint dm0, jint db, jint c, jint minCallsR, jint minCallsMask, jboolean hashSeed, IOSByteArray *oid, jboolean sparse, jboolean fastFp, id<OrgSpongycastleCryptoDigest> hashAlg) {
  NSObject_init(self);
  self->N_ = N;
  self->q_ = q;
  self->df1_ = df1;
  self->df2_ = df2;
  self->df3_ = df3;
  self->db_ = db;
  self->dm0_ = dm0;
  self->c_ = c;
  self->minCallsR_ = minCallsR;
  self->minCallsMask_ = minCallsMask;
  self->hashSeed_ = hashSeed;
  self->oid_ = oid;
  self->sparse_ = sparse;
  self->fastFp_ = fastFp;
  self->polyType_ = OrgSpongycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_PRODUCT;
  self->hashAlg_ = hashAlg;
  OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_init__(self);
}

OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *new_OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_withByteArray_withBoolean_withBoolean_withOrgSpongycastleCryptoDigest_(jint N, jint q, jint df1, jint df2, jint df3, jint dm0, jint db, jint c, jint minCallsR, jint minCallsMask, jboolean hashSeed, IOSByteArray *oid, jboolean sparse, jboolean fastFp, id<OrgSpongycastleCryptoDigest> hashAlg) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_withByteArray_withBoolean_withBoolean_withOrgSpongycastleCryptoDigest_, N, q, df1, df2, df3, dm0, db, c, minCallsR, minCallsMask, hashSeed, oid, sparse, fastFp, hashAlg)
}

OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *create_OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_withByteArray_withBoolean_withBoolean_withOrgSpongycastleCryptoDigest_(jint N, jint q, jint df1, jint df2, jint df3, jint dm0, jint db, jint c, jint minCallsR, jint minCallsMask, jboolean hashSeed, IOSByteArray *oid, jboolean sparse, jboolean fastFp, id<OrgSpongycastleCryptoDigest> hashAlg) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_withByteArray_withBoolean_withBoolean_withOrgSpongycastleCryptoDigest_, N, q, df1, df2, df3, dm0, db, c, minCallsR, minCallsMask, hashSeed, oid, sparse, fastFp, hashAlg)
}

void OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_init__(OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *self) {
  self->dr_ = self->df_;
  self->dr1_ = self->df1_;
  self->dr2_ = self->df2_;
  self->dr3_ = self->df3_;
  self->dg_ = self->N_ / 3;
  self->llen_ = 1;
  self->maxMsgLenBytes_ = self->N_ * 3 / 2 / 8 - self->llen_ - self->db_ / 8 - 1;
  self->bufferLenBits_ = (self->N_ * 3 / 2 + 7) / 8 * 8 + 1;
  self->bufferLenTrits_ = self->N_ - 1;
  self->pkLen_ = self->db_;
}

void OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_initWithJavaIoInputStream_(OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *self, JavaIoInputStream *is) {
  NSObject_init(self);
  JavaIoDataInputStream *dis = new_JavaIoDataInputStream_initWithJavaIoInputStream_(is);
  self->N_ = [dis readInt];
  self->q_ = [dis readInt];
  self->df_ = [dis readInt];
  self->df1_ = [dis readInt];
  self->df2_ = [dis readInt];
  self->df3_ = [dis readInt];
  self->db_ = [dis readInt];
  self->dm0_ = [dis readInt];
  self->c_ = [dis readInt];
  self->minCallsR_ = [dis readInt];
  self->minCallsMask_ = [dis readInt];
  self->hashSeed_ = [dis readBoolean];
  self->oid_ = [IOSByteArray newArrayWithLength:3];
  [dis readWithByteArray:self->oid_];
  self->sparse_ = [dis readBoolean];
  self->fastFp_ = [dis readBoolean];
  self->polyType_ = [dis read];
  NSString *alg = [dis readUTF];
  if ([@"SHA-512" isEqual:alg]) {
    self->hashAlg_ = new_OrgSpongycastleCryptoDigestsSHA512Digest_init();
  }
  else if ([@"SHA-256" isEqual:alg]) {
    self->hashAlg_ = new_OrgSpongycastleCryptoDigestsSHA256Digest_init();
  }
  OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_init__(self);
}

OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *new_OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_initWithJavaIoInputStream_(JavaIoInputStream *is) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters, initWithJavaIoInputStream_, is)
}

OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *create_OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_initWithJavaIoInputStream_(JavaIoInputStream *is) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters, initWithJavaIoInputStream_, is)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters)
