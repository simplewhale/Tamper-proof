//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/newhope/NewHope.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastlePqcCryptoNewhopeNewHope")
#ifdef RESTRICT_OrgSpongycastlePqcCryptoNewhopeNewHope
#define INCLUDE_ALL_OrgSpongycastlePqcCryptoNewhopeNewHope 0
#else
#define INCLUDE_ALL_OrgSpongycastlePqcCryptoNewhopeNewHope 1
#endif
#undef RESTRICT_OrgSpongycastlePqcCryptoNewhopeNewHope

#if !defined (OrgSpongycastlePqcCryptoNewhopeNewHope_) && (INCLUDE_ALL_OrgSpongycastlePqcCryptoNewhopeNewHope || defined(INCLUDE_OrgSpongycastlePqcCryptoNewhopeNewHope))
#define OrgSpongycastlePqcCryptoNewhopeNewHope_

@class IOSByteArray;
@class IOSShortArray;
@class JavaSecuritySecureRandom;

@interface OrgSpongycastlePqcCryptoNewhopeNewHope : NSObject

#pragma mark Public

+ (void)keygenWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand
                             withByteArray:(IOSByteArray *)send
                            withShortArray:(IOSShortArray *)sk;

+ (void)sharedAWithByteArray:(IOSByteArray *)sharedKey
              withShortArray:(IOSShortArray *)sk
               withByteArray:(IOSByteArray *)received;

+ (void)sharedBWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand
                              withByteArray:(IOSByteArray *)sharedKey
                              withByteArray:(IOSByteArray *)send
                              withByteArray:(IOSByteArray *)received;

#pragma mark Package-Private

- (instancetype)init;

+ (void)decodeAWithShortArray:(IOSShortArray *)pk
                withByteArray:(IOSByteArray *)seed
                withByteArray:(IOSByteArray *)r;

+ (void)decodeBWithShortArray:(IOSShortArray *)b
               withShortArray:(IOSShortArray *)c
                withByteArray:(IOSByteArray *)r;

+ (void)encodeAWithByteArray:(IOSByteArray *)r
              withShortArray:(IOSShortArray *)pk
               withByteArray:(IOSByteArray *)seed;

+ (void)encodeBWithByteArray:(IOSByteArray *)r
              withShortArray:(IOSShortArray *)b
              withShortArray:(IOSShortArray *)c;

+ (void)generateAWithShortArray:(IOSShortArray *)a
                  withByteArray:(IOSByteArray *)seed;

+ (void)sha3WithByteArray:(IOSByteArray *)sharedKey;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastlePqcCryptoNewhopeNewHope)

inline jint OrgSpongycastlePqcCryptoNewhopeNewHope_get_AGREEMENT_SIZE(void);
#define OrgSpongycastlePqcCryptoNewhopeNewHope_AGREEMENT_SIZE 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcCryptoNewhopeNewHope, AGREEMENT_SIZE, jint)

inline jint OrgSpongycastlePqcCryptoNewhopeNewHope_get_POLY_SIZE(void);
#define OrgSpongycastlePqcCryptoNewhopeNewHope_POLY_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcCryptoNewhopeNewHope, POLY_SIZE, jint)

inline jint OrgSpongycastlePqcCryptoNewhopeNewHope_get_SENDA_BYTES(void);
#define OrgSpongycastlePqcCryptoNewhopeNewHope_SENDA_BYTES 1824
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcCryptoNewhopeNewHope, SENDA_BYTES, jint)

inline jint OrgSpongycastlePqcCryptoNewhopeNewHope_get_SENDB_BYTES(void);
#define OrgSpongycastlePqcCryptoNewhopeNewHope_SENDB_BYTES 2048
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcCryptoNewhopeNewHope, SENDB_BYTES, jint)

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoNewhopeNewHope_init(OrgSpongycastlePqcCryptoNewhopeNewHope *self);

FOUNDATION_EXPORT OrgSpongycastlePqcCryptoNewhopeNewHope *new_OrgSpongycastlePqcCryptoNewhopeNewHope_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastlePqcCryptoNewhopeNewHope *create_OrgSpongycastlePqcCryptoNewhopeNewHope_init(void);

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoNewhopeNewHope_keygenWithJavaSecuritySecureRandom_withByteArray_withShortArray_(JavaSecuritySecureRandom *rand, IOSByteArray *send, IOSShortArray *sk);

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoNewhopeNewHope_sharedBWithJavaSecuritySecureRandom_withByteArray_withByteArray_withByteArray_(JavaSecuritySecureRandom *rand, IOSByteArray *sharedKey, IOSByteArray *send, IOSByteArray *received);

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoNewhopeNewHope_sharedAWithByteArray_withShortArray_withByteArray_(IOSByteArray *sharedKey, IOSShortArray *sk, IOSByteArray *received);

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoNewhopeNewHope_decodeAWithShortArray_withByteArray_withByteArray_(IOSShortArray *pk, IOSByteArray *seed, IOSByteArray *r);

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoNewhopeNewHope_decodeBWithShortArray_withShortArray_withByteArray_(IOSShortArray *b, IOSShortArray *c, IOSByteArray *r);

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoNewhopeNewHope_encodeAWithByteArray_withShortArray_withByteArray_(IOSByteArray *r, IOSShortArray *pk, IOSByteArray *seed);

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoNewhopeNewHope_encodeBWithByteArray_withShortArray_withShortArray_(IOSByteArray *r, IOSShortArray *b, IOSShortArray *c);

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoNewhopeNewHope_generateAWithShortArray_withByteArray_(IOSShortArray *a, IOSByteArray *seed);

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoNewhopeNewHope_sha3WithByteArray_(IOSByteArray *sharedKey);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastlePqcCryptoNewhopeNewHope)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastlePqcCryptoNewhopeNewHope")
