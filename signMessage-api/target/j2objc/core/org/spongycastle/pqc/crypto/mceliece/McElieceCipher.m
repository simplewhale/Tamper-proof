//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/mceliece/McElieceCipher.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/InvalidCipherTextException.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/pqc/crypto/mceliece/McElieceCipher.h"
#include "org/spongycastle/pqc/crypto/mceliece/McElieceKeyParameters.h"
#include "org/spongycastle/pqc/crypto/mceliece/McEliecePrivateKeyParameters.h"
#include "org/spongycastle/pqc/crypto/mceliece/McEliecePublicKeyParameters.h"
#include "org/spongycastle/pqc/math/linearalgebra/GF2Matrix.h"
#include "org/spongycastle/pqc/math/linearalgebra/GF2Vector.h"
#include "org/spongycastle/pqc/math/linearalgebra/GF2mField.h"
#include "org/spongycastle/pqc/math/linearalgebra/GoppaCode.h"
#include "org/spongycastle/pqc/math/linearalgebra/Permutation.h"
#include "org/spongycastle/pqc/math/linearalgebra/PolynomialGF2mSmallM.h"
#include "org/spongycastle/pqc/math/linearalgebra/Vector.h"

@interface OrgSpongycastlePqcCryptoMcelieceMcElieceCipher () {
 @public
  JavaSecuritySecureRandom *sr_;
  jint n_;
  jint k_;
  jint t_;
  OrgSpongycastlePqcCryptoMcelieceMcElieceKeyParameters *key_;
  jboolean forEncryption_;
}

- (void)initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters:(OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *)pubKey OBJC_METHOD_FAMILY_NONE;

- (void)initCipherDecryptWithOrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters:(OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *)privKey OBJC_METHOD_FAMILY_NONE;

- (OrgSpongycastlePqcMathLinearalgebraGF2Vector *)computeMessageRepresentativeWithByteArray:(IOSByteArray *)input;

- (IOSByteArray *)computeMessageWithOrgSpongycastlePqcMathLinearalgebraGF2Vector:(OrgSpongycastlePqcMathLinearalgebraGF2Vector *)mr;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoMcelieceMcElieceCipher, sr_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoMcelieceMcElieceCipher, key_, OrgSpongycastlePqcCryptoMcelieceMcElieceKeyParameters *)

__attribute__((unused)) static void OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(OrgSpongycastlePqcCryptoMcelieceMcElieceCipher *self, OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *pubKey);

__attribute__((unused)) static void OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_initCipherDecryptWithOrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(OrgSpongycastlePqcCryptoMcelieceMcElieceCipher *self, OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *privKey);

__attribute__((unused)) static OrgSpongycastlePqcMathLinearalgebraGF2Vector *OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_computeMessageRepresentativeWithByteArray_(OrgSpongycastlePqcCryptoMcelieceMcElieceCipher *self, IOSByteArray *input);

__attribute__((unused)) static IOSByteArray *OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_computeMessageWithOrgSpongycastlePqcMathLinearalgebraGF2Vector_(OrgSpongycastlePqcCryptoMcelieceMcElieceCipher *self, OrgSpongycastlePqcMathLinearalgebraGF2Vector *mr);

NSString *OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_OID = @"1.3.6.1.4.1.8301.3.1.3.4.1";

@implementation OrgSpongycastlePqcCryptoMcelieceMcElieceCipher

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  self->forEncryption_ = forEncryption;
  if (forEncryption) {
    if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
      OrgSpongycastleCryptoParamsParametersWithRandom *rParam = (OrgSpongycastleCryptoParamsParametersWithRandom *) param;
      self->sr_ = [((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      self->key_ = (OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk([rParam getParameters], [OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]);
      OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(self, (OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk(key_, [OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]));
    }
    else {
      self->sr_ = new_JavaSecuritySecureRandom_init();
      self->key_ = (OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk(param, [OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]);
      OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(self, (OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk(key_, [OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]));
    }
  }
  else {
    self->key_ = (OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) cast_chk(param, [OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters class]);
    OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_initCipherDecryptWithOrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(self, (OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) cast_chk(key_, [OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters class]));
  }
}

- (jint)getKeySizeWithOrgSpongycastlePqcCryptoMcelieceMcElieceKeyParameters:(OrgSpongycastlePqcCryptoMcelieceMcElieceKeyParameters *)key {
  if ([key isKindOfClass:[OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class]]) {
    return [((OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) nil_chk(((OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) key))) getN];
  }
  if ([key isKindOfClass:[OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters class]]) {
    return [((OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) nil_chk(((OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) key))) getN];
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported type");
}

- (void)initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters:(OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *)pubKey {
  OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(self, pubKey);
}

- (void)initCipherDecryptWithOrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters:(OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *)privKey {
  OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_initCipherDecryptWithOrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(self, privKey);
}

- (IOSByteArray *)messageEncryptWithByteArray:(IOSByteArray *)input {
  if (!forEncryption_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  OrgSpongycastlePqcMathLinearalgebraGF2Vector *m = OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_computeMessageRepresentativeWithByteArray_(self, input);
  OrgSpongycastlePqcMathLinearalgebraGF2Vector *z = new_OrgSpongycastlePqcMathLinearalgebraGF2Vector_initWithInt_withInt_withJavaSecuritySecureRandom_(n_, t_, sr_);
  OrgSpongycastlePqcMathLinearalgebraGF2Matrix *g = [((OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) nil_chk(((OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) cast_chk(key_, [OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters class])))) getG];
  OrgSpongycastlePqcMathLinearalgebraVector *mG = [((OrgSpongycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(g)) leftMultiplyWithOrgSpongycastlePqcMathLinearalgebraVector:m];
  OrgSpongycastlePqcMathLinearalgebraGF2Vector *mGZ = (OrgSpongycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((OrgSpongycastlePqcMathLinearalgebraVector *) nil_chk(mG)) addWithOrgSpongycastlePqcMathLinearalgebraVector:z], [OrgSpongycastlePqcMathLinearalgebraGF2Vector class]);
  return [((OrgSpongycastlePqcMathLinearalgebraGF2Vector *) nil_chk(mGZ)) getEncoded];
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Vector *)computeMessageRepresentativeWithByteArray:(IOSByteArray *)input {
  return OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_computeMessageRepresentativeWithByteArray_(self, input);
}

- (IOSByteArray *)messageDecryptWithByteArray:(IOSByteArray *)input {
  if (forEncryption_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  OrgSpongycastlePqcMathLinearalgebraGF2Vector *vec = OrgSpongycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(n_, input);
  OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *privKey = (OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) cast_chk(key_, [OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters class]);
  OrgSpongycastlePqcMathLinearalgebraGF2mField *field = [((OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) nil_chk(privKey)) getField];
  OrgSpongycastlePqcMathLinearalgebraPolynomialGF2mSmallM *gp = [privKey getGoppaPoly];
  OrgSpongycastlePqcMathLinearalgebraGF2Matrix *sInv = [privKey getSInv];
  OrgSpongycastlePqcMathLinearalgebraPermutation *p1 = [privKey getP1];
  OrgSpongycastlePqcMathLinearalgebraPermutation *p2 = [privKey getP2];
  OrgSpongycastlePqcMathLinearalgebraGF2Matrix *h = [privKey getH];
  IOSObjectArray *qInv = [privKey getQInv];
  OrgSpongycastlePqcMathLinearalgebraPermutation *p = [((OrgSpongycastlePqcMathLinearalgebraPermutation *) nil_chk(p1)) rightMultiplyWithOrgSpongycastlePqcMathLinearalgebraPermutation:p2];
  OrgSpongycastlePqcMathLinearalgebraPermutation *pInv = [((OrgSpongycastlePqcMathLinearalgebraPermutation *) nil_chk(p)) computeInverse];
  OrgSpongycastlePqcMathLinearalgebraGF2Vector *cPInv = (OrgSpongycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((OrgSpongycastlePqcMathLinearalgebraGF2Vector *) nil_chk(vec)) multiplyWithOrgSpongycastlePqcMathLinearalgebraPermutation:pInv], [OrgSpongycastlePqcMathLinearalgebraGF2Vector class]);
  OrgSpongycastlePqcMathLinearalgebraGF2Vector *syndrome = (OrgSpongycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((OrgSpongycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(h)) rightMultiplyWithOrgSpongycastlePqcMathLinearalgebraVector:cPInv], [OrgSpongycastlePqcMathLinearalgebraGF2Vector class]);
  OrgSpongycastlePqcMathLinearalgebraGF2Vector *z = OrgSpongycastlePqcMathLinearalgebraGoppaCode_syndromeDecodeWithOrgSpongycastlePqcMathLinearalgebraGF2Vector_withOrgSpongycastlePqcMathLinearalgebraGF2mField_withOrgSpongycastlePqcMathLinearalgebraPolynomialGF2mSmallM_withOrgSpongycastlePqcMathLinearalgebraPolynomialGF2mSmallMArray_(syndrome, field, gp, qInv);
  OrgSpongycastlePqcMathLinearalgebraGF2Vector *mSG = (OrgSpongycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((OrgSpongycastlePqcMathLinearalgebraGF2Vector *) nil_chk(cPInv)) addWithOrgSpongycastlePqcMathLinearalgebraVector:z], [OrgSpongycastlePqcMathLinearalgebraGF2Vector class]);
  mSG = (OrgSpongycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((OrgSpongycastlePqcMathLinearalgebraGF2Vector *) nil_chk(mSG)) multiplyWithOrgSpongycastlePqcMathLinearalgebraPermutation:p1], [OrgSpongycastlePqcMathLinearalgebraGF2Vector class]);
  z = (OrgSpongycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((OrgSpongycastlePqcMathLinearalgebraGF2Vector *) nil_chk(z)) multiplyWithOrgSpongycastlePqcMathLinearalgebraPermutation:p], [OrgSpongycastlePqcMathLinearalgebraGF2Vector class]);
  OrgSpongycastlePqcMathLinearalgebraGF2Vector *mS = [((OrgSpongycastlePqcMathLinearalgebraGF2Vector *) nil_chk(mSG)) extractRightVectorWithInt:k_];
  OrgSpongycastlePqcMathLinearalgebraGF2Vector *mVec = (OrgSpongycastlePqcMathLinearalgebraGF2Vector *) cast_chk([((OrgSpongycastlePqcMathLinearalgebraGF2Matrix *) nil_chk(sInv)) leftMultiplyWithOrgSpongycastlePqcMathLinearalgebraVector:mS], [OrgSpongycastlePqcMathLinearalgebraGF2Vector class]);
  return OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_computeMessageWithOrgSpongycastlePqcMathLinearalgebraGF2Vector_(self, mVec);
}

- (IOSByteArray *)computeMessageWithOrgSpongycastlePqcMathLinearalgebraGF2Vector:(OrgSpongycastlePqcMathLinearalgebraGF2Vector *)mr {
  return OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_computeMessageWithOrgSpongycastlePqcMathLinearalgebraGF2Vector_(self, mr);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Vector;", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 9, 12, -1, -1, -1 },
    { NULL, "[B", 0x2, 13, 14, 12, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getKeySizeWithOrgSpongycastlePqcCryptoMcelieceMcElieceKeyParameters:);
  methods[3].selector = @selector(initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters:);
  methods[4].selector = @selector(initCipherDecryptWithOrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters:);
  methods[5].selector = @selector(messageEncryptWithByteArray:);
  methods[6].selector = @selector(computeMessageRepresentativeWithByteArray:);
  methods[7].selector = @selector(messageDecryptWithByteArray:);
  methods[8].selector = @selector(computeMessageWithOrgSpongycastlePqcMathLinearalgebraGF2Vector:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "sr_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "t_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxPlainTextSize_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "cipherTextSize_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "key_", "LOrgSpongycastlePqcCryptoMcelieceMcElieceKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;", "getKeySize", "LOrgSpongycastlePqcCryptoMcelieceMcElieceKeyParameters;", "initCipherEncrypt", "LOrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters;", "initCipherDecrypt", "LOrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters;", "messageEncrypt", "[B", "computeMessageRepresentative", "messageDecrypt", "LOrgSpongycastleCryptoInvalidCipherTextException;", "computeMessage", "LOrgSpongycastlePqcMathLinearalgebraGF2Vector;", &OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_OID };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoMcelieceMcElieceCipher = { "McElieceCipher", "org.spongycastle.pqc.crypto.mceliece", ptrTable, methods, fields, 7, 0x1, 9, 9, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoMcelieceMcElieceCipher;
}

@end

void OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_init(OrgSpongycastlePqcCryptoMcelieceMcElieceCipher *self) {
  NSObject_init(self);
}

OrgSpongycastlePqcCryptoMcelieceMcElieceCipher *new_OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoMcelieceMcElieceCipher, init)
}

OrgSpongycastlePqcCryptoMcelieceMcElieceCipher *create_OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoMcelieceMcElieceCipher, init)
}

void OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters_(OrgSpongycastlePqcCryptoMcelieceMcElieceCipher *self, OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *pubKey) {
  self->sr_ = self->sr_ != nil ? self->sr_ : new_JavaSecuritySecureRandom_init();
  self->n_ = [((OrgSpongycastlePqcCryptoMcelieceMcEliecePublicKeyParameters *) nil_chk(pubKey)) getN];
  self->k_ = [pubKey getK];
  self->t_ = [pubKey getT];
  self->cipherTextSize_ = JreRShift32(self->n_, 3);
  self->maxPlainTextSize_ = (JreRShift32(self->k_, 3));
}

void OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_initCipherDecryptWithOrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters_(OrgSpongycastlePqcCryptoMcelieceMcElieceCipher *self, OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *privKey) {
  self->n_ = [((OrgSpongycastlePqcCryptoMcelieceMcEliecePrivateKeyParameters *) nil_chk(privKey)) getN];
  self->k_ = [privKey getK];
  self->maxPlainTextSize_ = (JreRShift32(self->k_, 3));
  self->cipherTextSize_ = JreRShift32(self->n_, 3);
}

OrgSpongycastlePqcMathLinearalgebraGF2Vector *OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_computeMessageRepresentativeWithByteArray_(OrgSpongycastlePqcCryptoMcelieceMcElieceCipher *self, IOSByteArray *input) {
  IOSByteArray *data = [IOSByteArray newArrayWithLength:self->maxPlainTextSize_ + ((self->k_ & (jint) 0x07) != 0 ? 1 : 0)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(input, 0, data, 0, ((IOSByteArray *) nil_chk(input))->size_);
  *IOSByteArray_GetRef(data, input->size_) = (jint) 0x01;
  return OrgSpongycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(self->k_, data);
}

IOSByteArray *OrgSpongycastlePqcCryptoMcelieceMcElieceCipher_computeMessageWithOrgSpongycastlePqcMathLinearalgebraGF2Vector_(OrgSpongycastlePqcCryptoMcelieceMcElieceCipher *self, OrgSpongycastlePqcMathLinearalgebraGF2Vector *mr) {
  IOSByteArray *mrBytes = [((OrgSpongycastlePqcMathLinearalgebraGF2Vector *) nil_chk(mr)) getEncoded];
  jint index;
  for (index = ((IOSByteArray *) nil_chk(mrBytes))->size_ - 1; index >= 0 && IOSByteArray_Get(mrBytes, index) == 0; index--) {
    
    ;
  }
  if (index < 0 || IOSByteArray_Get(mrBytes, index) != (jint) 0x01) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"Bad Padding: invalid ciphertext");
  }
  IOSByteArray *mBytes = [IOSByteArray newArrayWithLength:index];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mrBytes, 0, mBytes, 0, index);
  return mBytes;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoMcelieceMcElieceCipher)
