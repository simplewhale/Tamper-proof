//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/ntru/NTRUSigningKeyGenerationParameters.java
//

#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"
#include "java/security/SecureRandom.h"
#include "java/text/DecimalFormat.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/KeyGenerationParameters.h"
#include "org/spongycastle/crypto/digests/SHA256Digest.h"
#include "org/spongycastle/crypto/digests/SHA512Digest.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUParameters.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUSigningKeyGenerationParameters.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUSigningParameters.h"

@interface OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters ()

- (void)init__ OBJC_METHOD_FAMILY_NONE;

@end

__attribute__((unused)) static void OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_init__(OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *self);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters)

OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_APR2011_439;
OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_APR2011_439_PROD;
OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_APR2011_743;
OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_APR2011_743_PROD;
OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_TEST157;
OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_TEST157_PROD;

@implementation OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters

- (instancetype)initWithInt:(jint)N
                    withInt:(jint)q
                    withInt:(jint)d
                    withInt:(jint)B
                    withInt:(jint)basisType
                 withDouble:(jdouble)beta
                 withDouble:(jdouble)normBound
                 withDouble:(jdouble)keyNormBound
                withBoolean:(jboolean)primeCheck
                withBoolean:(jboolean)sparse
                    withInt:(jint)keyGenAlg
withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hashAlg {
  OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(self, N, q, d, B, basisType, beta, normBound, keyNormBound, primeCheck, sparse, keyGenAlg, hashAlg);
  return self;
}

- (instancetype)initWithInt:(jint)N
                    withInt:(jint)q
                    withInt:(jint)d1
                    withInt:(jint)d2
                    withInt:(jint)d3
                    withInt:(jint)B
                    withInt:(jint)basisType
                 withDouble:(jdouble)beta
                 withDouble:(jdouble)normBound
                 withDouble:(jdouble)keyNormBound
                withBoolean:(jboolean)primeCheck
                withBoolean:(jboolean)sparse
                    withInt:(jint)keyGenAlg
withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hashAlg {
  OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(self, N, q, d1, d2, d3, B, basisType, beta, normBound, keyNormBound, primeCheck, sparse, keyGenAlg, hashAlg);
  return self;
}

- (void)init__ {
  OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_init__(self);
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is {
  OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithJavaIoInputStream_(self, is);
  return self;
}

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  JavaIoDataOutputStream *dos = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_(os);
  [dos writeIntWithInt:N_];
  [dos writeIntWithInt:q_];
  [dos writeIntWithInt:d_];
  [dos writeIntWithInt:d1_];
  [dos writeIntWithInt:d2_];
  [dos writeIntWithInt:d3_];
  [dos writeIntWithInt:B_];
  [dos writeIntWithInt:basisType_];
  [dos writeDoubleWithDouble:beta_];
  [dos writeDoubleWithDouble:normBound_];
  [dos writeDoubleWithDouble:keyNormBound_];
  [dos writeIntWithInt:signFailTolerance_];
  [dos writeBooleanWithBoolean:primeCheck_];
  [dos writeBooleanWithBoolean:sparse_];
  [dos writeIntWithInt:bitsF_];
  [dos writeWithInt:keyGenAlg_];
  [dos writeUTFWithNSString:[((id<OrgSpongycastleCryptoDigest>) nil_chk(hashAlg_)) getAlgorithmName]];
  [dos writeWithInt:polyType_];
}

- (OrgSpongycastlePqcCryptoNtruNTRUSigningParameters *)getSigningParameters {
  return new_OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_initWithInt_withInt_withInt_withInt_withDouble_withDouble_withOrgSpongycastleCryptoDigest_(N_, q_, d_, B_, beta_, normBound_, hashAlg_);
}

- (OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *)java_clone {
  if (polyType_ == OrgSpongycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_SIMPLE) {
    return new_OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(N_, q_, d_, B_, basisType_, beta_, normBound_, keyNormBound_, primeCheck_, sparse_, keyGenAlg_, hashAlg_);
  }
  else {
    return new_OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(N_, q_, d1_, d2_, d3_, B_, basisType_, beta_, normBound_, keyNormBound_, primeCheck_, sparse_, keyGenAlg_, hashAlg_);
  }
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + B_;
  result = prime * result + N_;
  result = prime * result + basisType_;
  jlong temp;
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(beta_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(betaSq_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  result = prime * result + bitsF_;
  result = prime * result + d_;
  result = prime * result + d1_;
  result = prime * result + d2_;
  result = prime * result + d3_;
  result = prime * result + ((hashAlg_ == nil) ? 0 : ((jint) [((NSString *) nil_chk([((id<OrgSpongycastleCryptoDigest>) nil_chk(hashAlg_)) getAlgorithmName])) hash]));
  result = prime * result + keyGenAlg_;
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(keyNormBound_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(keyNormBoundSq_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(normBound_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(normBoundSq_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  result = prime * result + polyType_;
  result = prime * result + (primeCheck_ ? 1231 : 1237);
  result = prime * result + q_;
  result = prime * result + signFailTolerance_;
  result = prime * result + (sparse_ ? 1231 : 1237);
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if (!([obj isKindOfClass:[OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters class]])) {
    return false;
  }
  OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *other = (OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *) cast_chk(obj, [OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters class]);
  if (B_ != other->B_) {
    return false;
  }
  if (N_ != other->N_) {
    return false;
  }
  if (basisType_ != other->basisType_) {
    return false;
  }
  if (JavaLangDouble_doubleToLongBitsWithDouble_(beta_) != JavaLangDouble_doubleToLongBitsWithDouble_(other->beta_)) {
    return false;
  }
  if (JavaLangDouble_doubleToLongBitsWithDouble_(betaSq_) != JavaLangDouble_doubleToLongBitsWithDouble_(other->betaSq_)) {
    return false;
  }
  if (bitsF_ != other->bitsF_) {
    return false;
  }
  if (d_ != other->d_) {
    return false;
  }
  if (d1_ != other->d1_) {
    return false;
  }
  if (d2_ != other->d2_) {
    return false;
  }
  if (d3_ != other->d3_) {
    return false;
  }
  if (hashAlg_ == nil) {
    if (other->hashAlg_ != nil) {
      return false;
    }
  }
  else if (![((NSString *) nil_chk([hashAlg_ getAlgorithmName])) isEqual:[((id<OrgSpongycastleCryptoDigest>) nil_chk(other->hashAlg_)) getAlgorithmName]]) {
    return false;
  }
  if (keyGenAlg_ != other->keyGenAlg_) {
    return false;
  }
  if (JavaLangDouble_doubleToLongBitsWithDouble_(keyNormBound_) != JavaLangDouble_doubleToLongBitsWithDouble_(other->keyNormBound_)) {
    return false;
  }
  if (JavaLangDouble_doubleToLongBitsWithDouble_(keyNormBoundSq_) != JavaLangDouble_doubleToLongBitsWithDouble_(other->keyNormBoundSq_)) {
    return false;
  }
  if (JavaLangDouble_doubleToLongBitsWithDouble_(normBound_) != JavaLangDouble_doubleToLongBitsWithDouble_(other->normBound_)) {
    return false;
  }
  if (JavaLangDouble_doubleToLongBitsWithDouble_(normBoundSq_) != JavaLangDouble_doubleToLongBitsWithDouble_(other->normBoundSq_)) {
    return false;
  }
  if (polyType_ != other->polyType_) {
    return false;
  }
  if (primeCheck_ != other->primeCheck_) {
    return false;
  }
  if (q_ != other->q_) {
    return false;
  }
  if (signFailTolerance_ != other->signFailTolerance_) {
    return false;
  }
  if (sparse_ != other->sparse_) {
    return false;
  }
  return true;
}

- (NSString *)description {
  JavaTextDecimalFormat *format = new_JavaTextDecimalFormat_initWithNSString_(@"0.00");
  JavaLangStringBuilder *output = new_JavaLangStringBuilder_initWithNSString_(JreStrcat("$I$I", @"SignatureParameters(N=", N_, @" q=", q_));
  if (polyType_ == OrgSpongycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_SIMPLE) {
    (void) [output appendWithNSString:JreStrcat("$I", @" polyType=SIMPLE d=", d_)];
  }
  else {
    (void) [output appendWithNSString:JreStrcat("$I$I$I", @" polyType=PRODUCT d1=", d1_, @" d2=", d2_, @" d3=", d3_)];
  }
  (void) [output appendWithNSString:JreStrcat("$I$I$$$$$$$Z$Z$I$@C", @" B=", B_, @" basisType=", basisType_, @" beta=", [format formatWithDouble:beta_], @" normBound=", [format formatWithDouble:normBound_], @" keyNormBound=", [format formatWithDouble:keyNormBound_], @" prime=", primeCheck_, @" sparse=", sparse_, @" keyGenAlg=", keyGenAlg_, @" hashAlg=", hashAlg_, ')')];
  return [output description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcCryptoNtruNTRUSigningParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withDouble:withDouble:withDouble:withBoolean:withBoolean:withInt:withOrgSpongycastleCryptoDigest:);
  methods[1].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withDouble:withDouble:withDouble:withBoolean:withBoolean:withInt:withOrgSpongycastleCryptoDigest:);
  methods[2].selector = @selector(init__);
  methods[3].selector = @selector(initWithJavaIoInputStream:);
  methods[4].selector = @selector(writeToWithJavaIoOutputStream:);
  methods[5].selector = @selector(getSigningParameters);
  methods[6].selector = @selector(java_clone);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BASIS_TYPE_STANDARD", "I", .constantValue.asInt = OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_BASIS_TYPE_STANDARD, 0x19, -1, -1, -1, -1 },
    { "BASIS_TYPE_TRANSPOSE", "I", .constantValue.asInt = OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_BASIS_TYPE_TRANSPOSE, 0x19, -1, -1, -1, -1 },
    { "KEY_GEN_ALG_RESULTANT", "I", .constantValue.asInt = OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_KEY_GEN_ALG_RESULTANT, 0x19, -1, -1, -1, -1 },
    { "KEY_GEN_ALG_FLOAT", "I", .constantValue.asInt = OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_KEY_GEN_ALG_FLOAT, 0x19, -1, -1, -1, -1 },
    { "APR2011_439", "LOrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "APR2011_439_PROD", "LOrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "APR2011_743", "LOrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "APR2011_743_PROD", "LOrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "TEST157", "LOrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "TEST157_PROD", "LOrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "N_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "q_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "d_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "d1_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "d2_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "d3_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "B_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "beta_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "betaSq_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "normBound_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "normBoundSq_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "signFailTolerance_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "keyNormBound_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "keyNormBoundSq_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "primeCheck_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "basisType_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bitsF_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sparse_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "keyGenAlg_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "hashAlg_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "polyType_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIIIIDDDZZILOrgSpongycastleCryptoDigest;", "IIIIIIIDDDZZILOrgSpongycastleCryptoDigest;", "init", "LJavaIoInputStream;", "LJavaIoIOException;", "writeTo", "LJavaIoOutputStream;", "clone", "hashCode", "equals", "LNSObject;", "toString", &OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_APR2011_439, &OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_APR2011_439_PROD, &OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_APR2011_743, &OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_APR2011_743_PROD, &OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_TEST157, &OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_TEST157_PROD };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters = { "NTRUSigningKeyGenerationParameters", "org.spongycastle.pqc.crypto.ntru", ptrTable, methods, fields, 7, 0x1, 10, 31, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

+ (void)initialize {
  if (self == [OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters class]) {
    OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_APR2011_439 = new_OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(439, 2048, 146, 1, OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_BASIS_TYPE_TRANSPOSE, 0.165, 490, 280, false, true, OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_KEY_GEN_ALG_RESULTANT, new_OrgSpongycastleCryptoDigestsSHA256Digest_init());
    OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_APR2011_439_PROD = new_OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(439, 2048, 9, 8, 5, 1, OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_BASIS_TYPE_TRANSPOSE, 0.165, 490, 280, false, true, OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_KEY_GEN_ALG_RESULTANT, new_OrgSpongycastleCryptoDigestsSHA256Digest_init());
    OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_APR2011_743 = new_OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(743, 2048, 248, 1, OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_BASIS_TYPE_TRANSPOSE, 0.127, 560, 360, true, false, OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_KEY_GEN_ALG_RESULTANT, new_OrgSpongycastleCryptoDigestsSHA512Digest_init());
    OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_APR2011_743_PROD = new_OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(743, 2048, 11, 11, 15, 1, OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_BASIS_TYPE_TRANSPOSE, 0.127, 560, 360, true, false, OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_KEY_GEN_ALG_RESULTANT, new_OrgSpongycastleCryptoDigestsSHA512Digest_init());
    OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_TEST157 = new_OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(157, 256, 29, 1, OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_BASIS_TYPE_TRANSPOSE, 0.38, 200, 80, false, false, OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_KEY_GEN_ALG_RESULTANT, new_OrgSpongycastleCryptoDigestsSHA256Digest_init());
    OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_TEST157_PROD = new_OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(157, 256, 5, 5, 8, 1, OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_BASIS_TYPE_TRANSPOSE, 0.38, 200, 80, false, false, OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_KEY_GEN_ALG_RESULTANT, new_OrgSpongycastleCryptoDigestsSHA256Digest_init());
    J2OBJC_SET_INITIALIZED(OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters)
  }
}

@end

void OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *self, jint N, jint q, jint d, jint B, jint basisType, jdouble beta, jdouble normBound, jdouble keyNormBound, jboolean primeCheck, jboolean sparse, jint keyGenAlg, id<OrgSpongycastleCryptoDigest> hashAlg) {
  OrgSpongycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(self, new_JavaSecuritySecureRandom_init(), N);
  self->signFailTolerance_ = 100;
  self->bitsF_ = 6;
  self->N_ = N;
  self->q_ = q;
  self->d_ = d;
  self->B_ = B;
  self->basisType_ = basisType;
  self->beta_ = beta;
  self->normBound_ = normBound;
  self->keyNormBound_ = keyNormBound;
  self->primeCheck_ = primeCheck;
  self->sparse_ = sparse;
  self->keyGenAlg_ = keyGenAlg;
  self->hashAlg_ = hashAlg;
  self->polyType_ = OrgSpongycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_SIMPLE;
  OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_init__(self);
}

OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *new_OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(jint N, jint q, jint d, jint B, jint basisType, jdouble beta, jdouble normBound, jdouble keyNormBound, jboolean primeCheck, jboolean sparse, jint keyGenAlg, id<OrgSpongycastleCryptoDigest> hashAlg) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters, initWithInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_, N, q, d, B, basisType, beta, normBound, keyNormBound, primeCheck, sparse, keyGenAlg, hashAlg)
}

OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *create_OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(jint N, jint q, jint d, jint B, jint basisType, jdouble beta, jdouble normBound, jdouble keyNormBound, jboolean primeCheck, jboolean sparse, jint keyGenAlg, id<OrgSpongycastleCryptoDigest> hashAlg) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters, initWithInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_, N, q, d, B, basisType, beta, normBound, keyNormBound, primeCheck, sparse, keyGenAlg, hashAlg)
}

void OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *self, jint N, jint q, jint d1, jint d2, jint d3, jint B, jint basisType, jdouble beta, jdouble normBound, jdouble keyNormBound, jboolean primeCheck, jboolean sparse, jint keyGenAlg, id<OrgSpongycastleCryptoDigest> hashAlg) {
  OrgSpongycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(self, new_JavaSecuritySecureRandom_init(), N);
  self->signFailTolerance_ = 100;
  self->bitsF_ = 6;
  self->N_ = N;
  self->q_ = q;
  self->d1_ = d1;
  self->d2_ = d2;
  self->d3_ = d3;
  self->B_ = B;
  self->basisType_ = basisType;
  self->beta_ = beta;
  self->normBound_ = normBound;
  self->keyNormBound_ = keyNormBound;
  self->primeCheck_ = primeCheck;
  self->sparse_ = sparse;
  self->keyGenAlg_ = keyGenAlg;
  self->hashAlg_ = hashAlg;
  self->polyType_ = OrgSpongycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_PRODUCT;
  OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_init__(self);
}

OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *new_OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(jint N, jint q, jint d1, jint d2, jint d3, jint B, jint basisType, jdouble beta, jdouble normBound, jdouble keyNormBound, jboolean primeCheck, jboolean sparse, jint keyGenAlg, id<OrgSpongycastleCryptoDigest> hashAlg) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_, N, q, d1, d2, d3, B, basisType, beta, normBound, keyNormBound, primeCheck, sparse, keyGenAlg, hashAlg)
}

OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *create_OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_(jint N, jint q, jint d1, jint d2, jint d3, jint B, jint basisType, jdouble beta, jdouble normBound, jdouble keyNormBound, jboolean primeCheck, jboolean sparse, jint keyGenAlg, id<OrgSpongycastleCryptoDigest> hashAlg) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters, initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withBoolean_withBoolean_withInt_withOrgSpongycastleCryptoDigest_, N, q, d1, d2, d3, B, basisType, beta, normBound, keyNormBound, primeCheck, sparse, keyGenAlg, hashAlg)
}

void OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_init__(OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *self) {
  self->betaSq_ = self->beta_ * self->beta_;
  self->normBoundSq_ = self->normBound_ * self->normBound_;
  self->keyNormBoundSq_ = self->keyNormBound_ * self->keyNormBound_;
}

void OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithJavaIoInputStream_(OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *self, JavaIoInputStream *is) {
  OrgSpongycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(self, new_JavaSecuritySecureRandom_init(), 0);
  self->signFailTolerance_ = 100;
  self->bitsF_ = 6;
  JavaIoDataInputStream *dis = new_JavaIoDataInputStream_initWithJavaIoInputStream_(is);
  self->N_ = [dis readInt];
  self->q_ = [dis readInt];
  self->d_ = [dis readInt];
  self->d1_ = [dis readInt];
  self->d2_ = [dis readInt];
  self->d3_ = [dis readInt];
  self->B_ = [dis readInt];
  self->basisType_ = [dis readInt];
  self->beta_ = [dis readDouble];
  self->normBound_ = [dis readDouble];
  self->keyNormBound_ = [dis readDouble];
  self->signFailTolerance_ = [dis readInt];
  self->primeCheck_ = [dis readBoolean];
  self->sparse_ = [dis readBoolean];
  self->bitsF_ = [dis readInt];
  self->keyGenAlg_ = [dis read];
  NSString *alg = [dis readUTF];
  if ([@"SHA-512" isEqual:alg]) {
    self->hashAlg_ = new_OrgSpongycastleCryptoDigestsSHA512Digest_init();
  }
  else if ([@"SHA-256" isEqual:alg]) {
    self->hashAlg_ = new_OrgSpongycastleCryptoDigestsSHA256Digest_init();
  }
  self->polyType_ = [dis read];
  OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_init__(self);
}

OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *new_OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithJavaIoInputStream_(JavaIoInputStream *is) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters, initWithJavaIoInputStream_, is)
}

OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters *create_OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters_initWithJavaIoInputStream_(JavaIoInputStream *is) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters, initWithJavaIoInputStream_, is)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoNtruNTRUSigningKeyGenerationParameters)
