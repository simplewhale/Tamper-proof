//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/mceliece/Conversions.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/pqc/crypto/mceliece/Conversions.h"
#include "org/spongycastle/pqc/math/linearalgebra/BigIntUtils.h"
#include "org/spongycastle/pqc/math/linearalgebra/GF2Vector.h"
#include "org/spongycastle/pqc/math/linearalgebra/IntegerFunctions.h"

@interface OrgSpongycastlePqcCryptoMcelieceConversions ()

- (instancetype)init;

@end

inline JavaMathBigInteger *OrgSpongycastlePqcCryptoMcelieceConversions_get_ZERO(void);
static JavaMathBigInteger *OrgSpongycastlePqcCryptoMcelieceConversions_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcCryptoMcelieceConversions, ZERO, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastlePqcCryptoMcelieceConversions_get_ONE(void);
static JavaMathBigInteger *OrgSpongycastlePqcCryptoMcelieceConversions_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcCryptoMcelieceConversions, ONE, JavaMathBigInteger *)

__attribute__((unused)) static void OrgSpongycastlePqcCryptoMcelieceConversions_init(OrgSpongycastlePqcCryptoMcelieceConversions *self);

__attribute__((unused)) static OrgSpongycastlePqcCryptoMcelieceConversions *new_OrgSpongycastlePqcCryptoMcelieceConversions_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastlePqcCryptoMcelieceConversions *create_OrgSpongycastlePqcCryptoMcelieceConversions_init(void);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastlePqcCryptoMcelieceConversions)

@implementation OrgSpongycastlePqcCryptoMcelieceConversions

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcCryptoMcelieceConversions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (OrgSpongycastlePqcMathLinearalgebraGF2Vector *)encodeWithInt:(jint)n
                                                        withInt:(jint)t
                                                  withByteArray:(IOSByteArray *)m {
  return OrgSpongycastlePqcCryptoMcelieceConversions_encodeWithInt_withInt_withByteArray_(n, t, m);
}

+ (IOSByteArray *)decodeWithInt:(jint)n
                        withInt:(jint)t
withOrgSpongycastlePqcMathLinearalgebraGF2Vector:(OrgSpongycastlePqcMathLinearalgebraGF2Vector *)vec {
  return OrgSpongycastlePqcCryptoMcelieceConversions_decodeWithInt_withInt_withOrgSpongycastlePqcMathLinearalgebraGF2Vector_(n, t, vec);
}

+ (IOSByteArray *)signConversionWithInt:(jint)n
                                withInt:(jint)t
                          withByteArray:(IOSByteArray *)m {
  return OrgSpongycastlePqcCryptoMcelieceConversions_signConversionWithInt_withInt_withByteArray_(n, t, m);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Vector;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 4, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encodeWithInt:withInt:withByteArray:);
  methods[2].selector = @selector(decodeWithInt:withInt:withOrgSpongycastlePqcMathLinearalgebraGF2Vector:);
  methods[3].selector = @selector(signConversionWithInt:withInt:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "encode", "II[B", "decode", "IILOrgSpongycastlePqcMathLinearalgebraGF2Vector;", "signConversion", &OrgSpongycastlePqcCryptoMcelieceConversions_ZERO, &OrgSpongycastlePqcCryptoMcelieceConversions_ONE };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoMcelieceConversions = { "Conversions", "org.spongycastle.pqc.crypto.mceliece", ptrTable, methods, fields, 7, 0x10, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoMcelieceConversions;
}

+ (void)initialize {
  if (self == [OrgSpongycastlePqcCryptoMcelieceConversions class]) {
    OrgSpongycastlePqcCryptoMcelieceConversions_ZERO = JavaMathBigInteger_valueOfWithLong_(0);
    OrgSpongycastlePqcCryptoMcelieceConversions_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    J2OBJC_SET_INITIALIZED(OrgSpongycastlePqcCryptoMcelieceConversions)
  }
}

@end

void OrgSpongycastlePqcCryptoMcelieceConversions_init(OrgSpongycastlePqcCryptoMcelieceConversions *self) {
  NSObject_init(self);
}

OrgSpongycastlePqcCryptoMcelieceConversions *new_OrgSpongycastlePqcCryptoMcelieceConversions_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoMcelieceConversions, init)
}

OrgSpongycastlePqcCryptoMcelieceConversions *create_OrgSpongycastlePqcCryptoMcelieceConversions_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoMcelieceConversions, init)
}

OrgSpongycastlePqcMathLinearalgebraGF2Vector *OrgSpongycastlePqcCryptoMcelieceConversions_encodeWithInt_withInt_withByteArray_(jint n, jint t, IOSByteArray *m) {
  OrgSpongycastlePqcCryptoMcelieceConversions_initialize();
  if (n < t) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"n < t");
  }
  JavaMathBigInteger *c = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_binomialWithInt_withInt_(n, t);
  JavaMathBigInteger *i = new_JavaMathBigInteger_initWithInt_withByteArray_(1, m);
  if ([i compareToWithId:c] >= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Encoded number too large.");
  }
  OrgSpongycastlePqcMathLinearalgebraGF2Vector *result = new_OrgSpongycastlePqcMathLinearalgebraGF2Vector_initWithInt_(n);
  jint nn = n;
  jint tt = t;
  for (jint j = 0; j < n; j++) {
    c = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(c)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(nn - tt)])) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(nn)];
    nn--;
    if ([((JavaMathBigInteger *) nil_chk(c)) compareToWithId:i] <= 0) {
      [result setBitWithInt:j];
      i = [((JavaMathBigInteger *) nil_chk(i)) subtractWithJavaMathBigInteger:c];
      tt--;
      if (nn == tt) {
        c = OrgSpongycastlePqcCryptoMcelieceConversions_ONE;
      }
      else {
        c = [((JavaMathBigInteger *) nil_chk(([c multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(tt + 1)]))) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(nn - tt)];
      }
    }
  }
  return result;
}

IOSByteArray *OrgSpongycastlePqcCryptoMcelieceConversions_decodeWithInt_withInt_withOrgSpongycastlePqcMathLinearalgebraGF2Vector_(jint n, jint t, OrgSpongycastlePqcMathLinearalgebraGF2Vector *vec) {
  OrgSpongycastlePqcCryptoMcelieceConversions_initialize();
  if (([((OrgSpongycastlePqcMathLinearalgebraGF2Vector *) nil_chk(vec)) getLength] != n) || ([vec getHammingWeight] != t)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"vector has wrong length or hamming weight");
  }
  IOSIntArray *vecArray = [vec getVecArray];
  JavaMathBigInteger *bc = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_binomialWithInt_withInt_(n, t);
  JavaMathBigInteger *d = OrgSpongycastlePqcCryptoMcelieceConversions_ZERO;
  jint nn = n;
  jint tt = t;
  for (jint i = 0; i < n; i++) {
    bc = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(bc)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(nn - tt)])) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(nn)];
    nn--;
    jint q = JreRShift32(i, 5);
    jint e = IOSIntArray_Get(nil_chk(vecArray), q) & (JreLShift32(1, (i & (jint) 0x1f)));
    if (e != 0) {
      d = [((JavaMathBigInteger *) nil_chk(d)) addWithJavaMathBigInteger:bc];
      tt--;
      if (nn == tt) {
        bc = OrgSpongycastlePqcCryptoMcelieceConversions_ONE;
      }
      else {
        bc = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(bc)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(tt + 1)])) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(nn - tt)];
      }
    }
  }
  return OrgSpongycastlePqcMathLinearalgebraBigIntUtils_toMinimalByteArrayWithJavaMathBigInteger_(d);
}

IOSByteArray *OrgSpongycastlePqcCryptoMcelieceConversions_signConversionWithInt_withInt_withByteArray_(jint n, jint t, IOSByteArray *m) {
  OrgSpongycastlePqcCryptoMcelieceConversions_initialize();
  if (n < t) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"n < t");
  }
  JavaMathBigInteger *bc = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_binomialWithInt_withInt_(n, t);
  jint s = [((JavaMathBigInteger *) nil_chk(bc)) bitLength] - 1;
  jint sq = JreRShift32(s, 3);
  jint sr = s & 7;
  if (sr == 0) {
    sq--;
    sr = 8;
  }
  jint nq = JreRShift32(n, 3);
  jint nr = n & 7;
  if (nr == 0) {
    nq--;
    nr = 8;
  }
  IOSByteArray *data = [IOSByteArray newArrayWithLength:nq + 1];
  if (((IOSByteArray *) nil_chk(m))->size_ < data->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(m, 0, data, 0, m->size_);
    for (jint i = m->size_; i < data->size_; i++) {
      *IOSByteArray_GetRef(data, i) = 0;
    }
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(m, 0, data, 0, nq);
    jint h = (JreLShift32(1, nr)) - 1;
    *IOSByteArray_GetRef(data, nq) = (jbyte) (h & IOSByteArray_Get(m, nq));
  }
  JavaMathBigInteger *d = OrgSpongycastlePqcCryptoMcelieceConversions_ZERO;
  jint nn = n;
  jint tt = t;
  for (jint i = 0; i < n; i++) {
    bc = [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(bc)) multiplyWithJavaMathBigInteger:new_JavaMathBigInteger_initWithNSString_(JavaLangInteger_toStringWithInt_(nn - tt))]))) divideWithJavaMathBigInteger:new_JavaMathBigInteger_initWithNSString_(JavaLangInteger_toStringWithInt_(nn))];
    nn--;
    jint q = JreURShift32(i, 3);
    jint r = i & 7;
    r = JreLShift32(1, r);
    jbyte e = (jbyte) (r & IOSByteArray_Get(data, q));
    if (e != 0) {
      d = [((JavaMathBigInteger *) nil_chk(d)) addWithJavaMathBigInteger:bc];
      tt--;
      if (nn == tt) {
        bc = OrgSpongycastlePqcCryptoMcelieceConversions_ONE;
      }
      else {
        bc = [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(bc)) multiplyWithJavaMathBigInteger:new_JavaMathBigInteger_initWithNSString_(JavaLangInteger_toStringWithInt_(tt + 1))]))) divideWithJavaMathBigInteger:new_JavaMathBigInteger_initWithNSString_(JavaLangInteger_toStringWithInt_(nn - tt))];
      }
    }
  }
  IOSByteArray *result = [IOSByteArray newArrayWithLength:sq + 1];
  IOSByteArray *help = [((JavaMathBigInteger *) nil_chk(d)) toByteArray];
  if (((IOSByteArray *) nil_chk(help))->size_ < result->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(help, 0, result, 0, help->size_);
    for (jint i = help->size_; i < result->size_; i++) {
      *IOSByteArray_GetRef(result, i) = 0;
    }
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(help, 0, result, 0, sq);
    *IOSByteArray_GetRef(result, sq) = (jbyte) (((JreLShift32(1, sr)) - 1) & IOSByteArray_Get(help, sq));
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoMcelieceConversions)
