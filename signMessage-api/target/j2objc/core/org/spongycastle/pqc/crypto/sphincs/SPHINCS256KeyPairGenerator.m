//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/sphincs/SPHINCS256KeyPairGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/KeyGenerationParameters.h"
#include "org/spongycastle/pqc/crypto/sphincs/HashFunctions.h"
#include "org/spongycastle/pqc/crypto/sphincs/Horst.h"
#include "org/spongycastle/pqc/crypto/sphincs/SPHINCS256Config.h"
#include "org/spongycastle/pqc/crypto/sphincs/SPHINCS256KeyGenerationParameters.h"
#include "org/spongycastle/pqc/crypto/sphincs/SPHINCS256KeyPairGenerator.h"
#include "org/spongycastle/pqc/crypto/sphincs/SPHINCSPrivateKeyParameters.h"
#include "org/spongycastle/pqc/crypto/sphincs/SPHINCSPublicKeyParameters.h"
#include "org/spongycastle/pqc/crypto/sphincs/Tree.h"

@interface OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator () {
 @public
  JavaSecuritySecureRandom *random_;
  id<OrgSpongycastleCryptoDigest> treeDigest_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator, random_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator, treeDigest_, id<OrgSpongycastleCryptoDigest>)

@implementation OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithOrgSpongycastleCryptoKeyGenerationParameters:(OrgSpongycastleCryptoKeyGenerationParameters *)param {
  random_ = [((OrgSpongycastleCryptoKeyGenerationParameters *) nil_chk(param)) getRandom];
  treeDigest_ = [((OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters *) cast_chk(param, [OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyGenerationParameters class])) getTreeDigest];
}

- (OrgSpongycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  OrgSpongycastlePqcCryptoSphincsTree_leafaddr *a = new_OrgSpongycastlePqcCryptoSphincsTree_leafaddr_init();
  IOSByteArray *sk = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_SECRETKEYBYTES];
  [((JavaSecuritySecureRandom *) nil_chk(random_)) nextBytesWithByteArray:sk];
  IOSByteArray *pk = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_CRYPTO_PUBLICKEYBYTES];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sk, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES, pk, 0, OrgSpongycastlePqcCryptoSphincsHorst_N_MASKS * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES);
  a->level_ = OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_N_LEVELS - 1;
  a->subtree_ = 0;
  a->subleaf_ = 0;
  OrgSpongycastlePqcCryptoSphincsHashFunctions *hs = new_OrgSpongycastlePqcCryptoSphincsHashFunctions_initWithOrgSpongycastleCryptoDigest_(treeDigest_);
  OrgSpongycastlePqcCryptoSphincsTree_treehashWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withInt_withByteArray_withOrgSpongycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withInt_(hs, pk, (OrgSpongycastlePqcCryptoSphincsHorst_N_MASKS * OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_HASH_BYTES), OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SUBTREE_HEIGHT, sk, a, pk, 0);
  return new_OrgSpongycastleCryptoAsymmetricCipherKeyPair_initWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(new_OrgSpongycastlePqcCryptoSphincsSPHINCSPublicKeyParameters_initWithByteArray_(pk), new_OrgSpongycastlePqcCryptoSphincsSPHINCSPrivateKeyParameters_initWithByteArray_(sk));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "treeDigest_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LOrgSpongycastleCryptoKeyGenerationParameters;" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator = { "SPHINCS256KeyPairGenerator", "org.spongycastle.pqc.crypto.sphincs", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator;
}

@end

void OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator_init(OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator *self) {
  NSObject_init(self);
}

OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator *new_OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator, init)
}

OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator *create_OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoSphincsSPHINCS256KeyPairGenerator)
