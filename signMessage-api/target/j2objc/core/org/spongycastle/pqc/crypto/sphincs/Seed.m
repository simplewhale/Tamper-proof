//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/sphincs/Seed.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/StreamCipher.h"
#include "org/spongycastle/crypto/engines/ChaChaEngine.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"
#include "org/spongycastle/pqc/crypto/sphincs/HashFunctions.h"
#include "org/spongycastle/pqc/crypto/sphincs/SPHINCS256Config.h"
#include "org/spongycastle/pqc/crypto/sphincs/Seed.h"
#include "org/spongycastle/pqc/crypto/sphincs/Tree.h"
#include "org/spongycastle/util/Pack.h"

@implementation OrgSpongycastlePqcCryptoSphincsSeed

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcCryptoSphincsSeed_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)get_seedWithOrgSpongycastlePqcCryptoSphincsHashFunctions:(OrgSpongycastlePqcCryptoSphincsHashFunctions *)hs
                                                   withByteArray:(IOSByteArray *)seed
                                                         withInt:(jint)seedOff
                                                   withByteArray:(IOSByteArray *)sk
                withOrgSpongycastlePqcCryptoSphincsTree_leafaddr:(OrgSpongycastlePqcCryptoSphincsTree_leafaddr *)a {
  OrgSpongycastlePqcCryptoSphincsSeed_get_seedWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withOrgSpongycastlePqcCryptoSphincsTree_leafaddr_(hs, seed, seedOff, sk, a);
}

+ (void)prgWithByteArray:(IOSByteArray *)r
                 withInt:(jint)rOff
                withLong:(jlong)rlen
           withByteArray:(IOSByteArray *)key
                 withInt:(jint)keyOff {
  OrgSpongycastlePqcCryptoSphincsSeed_prgWithByteArray_withInt_withLong_withByteArray_withInt_(r, rOff, rlen, key, keyOff);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(get_seedWithOrgSpongycastlePqcCryptoSphincsHashFunctions:withByteArray:withInt:withByteArray:withOrgSpongycastlePqcCryptoSphincsTree_leafaddr:);
  methods[2].selector = @selector(prgWithByteArray:withInt:withLong:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "get_seed", "LOrgSpongycastlePqcCryptoSphincsHashFunctions;[BI[BLOrgSpongycastlePqcCryptoSphincsTree_leafaddr;", "prg", "[BIJ[BI" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoSphincsSeed = { "Seed", "org.spongycastle.pqc.crypto.sphincs", ptrTable, methods, NULL, 7, 0x0, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoSphincsSeed;
}

@end

void OrgSpongycastlePqcCryptoSphincsSeed_init(OrgSpongycastlePqcCryptoSphincsSeed *self) {
  NSObject_init(self);
}

OrgSpongycastlePqcCryptoSphincsSeed *new_OrgSpongycastlePqcCryptoSphincsSeed_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoSphincsSeed, init)
}

OrgSpongycastlePqcCryptoSphincsSeed *create_OrgSpongycastlePqcCryptoSphincsSeed_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoSphincsSeed, init)
}

void OrgSpongycastlePqcCryptoSphincsSeed_get_seedWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withOrgSpongycastlePqcCryptoSphincsTree_leafaddr_(OrgSpongycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *seed, jint seedOff, IOSByteArray *sk, OrgSpongycastlePqcCryptoSphincsTree_leafaddr *a) {
  OrgSpongycastlePqcCryptoSphincsSeed_initialize();
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES + 8];
  jlong t;
  jint i;
  for (i = 0; i < OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES; i++) {
    *IOSByteArray_GetRef(buffer, i) = IOSByteArray_Get(nil_chk(sk), i);
  }
  t = ((OrgSpongycastlePqcCryptoSphincsTree_leafaddr *) nil_chk(a))->level_;
  t |= JreLShift64(a->subtree_, 4);
  t |= JreLShift64(a->subleaf_, 59);
  OrgSpongycastleUtilPack_longToLittleEndianWithLong_withByteArray_withInt_(t, buffer, OrgSpongycastlePqcCryptoSphincsSPHINCS256Config_SEED_BYTES);
  [((OrgSpongycastlePqcCryptoSphincsHashFunctions *) nil_chk(hs)) varlen_hashWithByteArray:seed withInt:seedOff withByteArray:buffer withInt:buffer->size_];
}

void OrgSpongycastlePqcCryptoSphincsSeed_prgWithByteArray_withInt_withLong_withByteArray_withInt_(IOSByteArray *r, jint rOff, jlong rlen, IOSByteArray *key, jint keyOff) {
  OrgSpongycastlePqcCryptoSphincsSeed_initialize();
  IOSByteArray *nonce = [IOSByteArray newArrayWithLength:8];
  id<OrgSpongycastleCryptoStreamCipher> cipher = new_OrgSpongycastleCryptoEnginesChaChaEngine_initWithInt_(12);
  [cipher init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsParametersWithIV_initWithOrgSpongycastleCryptoCipherParameters_withByteArray_(new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(key, keyOff, 32), nonce)];
  [cipher processBytesWithByteArray:r withInt:rOff withInt:(jint) rlen withByteArray:r withInt:rOff];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoSphincsSeed)
