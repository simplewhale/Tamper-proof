//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/sphincs/Tree.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastlePqcCryptoSphincsTree")
#ifdef RESTRICT_OrgSpongycastlePqcCryptoSphincsTree
#define INCLUDE_ALL_OrgSpongycastlePqcCryptoSphincsTree 0
#else
#define INCLUDE_ALL_OrgSpongycastlePqcCryptoSphincsTree 1
#endif
#undef RESTRICT_OrgSpongycastlePqcCryptoSphincsTree

#if !defined (OrgSpongycastlePqcCryptoSphincsTree_) && (INCLUDE_ALL_OrgSpongycastlePqcCryptoSphincsTree || defined(INCLUDE_OrgSpongycastlePqcCryptoSphincsTree))
#define OrgSpongycastlePqcCryptoSphincsTree_

@class IOSByteArray;
@class OrgSpongycastlePqcCryptoSphincsHashFunctions;
@class OrgSpongycastlePqcCryptoSphincsTree_leafaddr;

@interface OrgSpongycastlePqcCryptoSphincsTree : NSObject

#pragma mark Package-Private

- (instancetype)init;

+ (void)gen_leaf_wotsWithOrgSpongycastlePqcCryptoSphincsHashFunctions:(OrgSpongycastlePqcCryptoSphincsHashFunctions *)hs
                                                        withByteArray:(IOSByteArray *)leaf
                                                              withInt:(jint)leafOff
                                                        withByteArray:(IOSByteArray *)masks
                                                              withInt:(jint)masksOff
                                                        withByteArray:(IOSByteArray *)sk
                     withOrgSpongycastlePqcCryptoSphincsTree_leafaddr:(OrgSpongycastlePqcCryptoSphincsTree_leafaddr *)a;

+ (void)l_treeWithOrgSpongycastlePqcCryptoSphincsHashFunctions:(OrgSpongycastlePqcCryptoSphincsHashFunctions *)hs
                                                 withByteArray:(IOSByteArray *)leaf
                                                       withInt:(jint)leafOff
                                                 withByteArray:(IOSByteArray *)wots_pk
                                                       withInt:(jint)pkOff
                                                 withByteArray:(IOSByteArray *)masks
                                                       withInt:(jint)masksOff;

+ (void)treehashWithOrgSpongycastlePqcCryptoSphincsHashFunctions:(OrgSpongycastlePqcCryptoSphincsHashFunctions *)hs
                                                   withByteArray:(IOSByteArray *)node
                                                         withInt:(jint)nodeOff
                                                         withInt:(jint)height
                                                   withByteArray:(IOSByteArray *)sk
                withOrgSpongycastlePqcCryptoSphincsTree_leafaddr:(OrgSpongycastlePqcCryptoSphincsTree_leafaddr *)leaf
                                                   withByteArray:(IOSByteArray *)masks
                                                         withInt:(jint)masksOff;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastlePqcCryptoSphincsTree)

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoSphincsTree_init(OrgSpongycastlePqcCryptoSphincsTree *self);

FOUNDATION_EXPORT OrgSpongycastlePqcCryptoSphincsTree *new_OrgSpongycastlePqcCryptoSphincsTree_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastlePqcCryptoSphincsTree *create_OrgSpongycastlePqcCryptoSphincsTree_init(void);

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoSphincsTree_l_treeWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withInt_(OrgSpongycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *leaf, jint leafOff, IOSByteArray *wots_pk, jint pkOff, IOSByteArray *masks, jint masksOff);

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoSphincsTree_treehashWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withInt_withByteArray_withOrgSpongycastlePqcCryptoSphincsTree_leafaddr_withByteArray_withInt_(OrgSpongycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *node, jint nodeOff, jint height, IOSByteArray *sk, OrgSpongycastlePqcCryptoSphincsTree_leafaddr *leaf, IOSByteArray *masks, jint masksOff);

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoSphincsTree_gen_leaf_wotsWithOrgSpongycastlePqcCryptoSphincsHashFunctions_withByteArray_withInt_withByteArray_withInt_withByteArray_withOrgSpongycastlePqcCryptoSphincsTree_leafaddr_(OrgSpongycastlePqcCryptoSphincsHashFunctions *hs, IOSByteArray *leaf, jint leafOff, IOSByteArray *masks, jint masksOff, IOSByteArray *sk, OrgSpongycastlePqcCryptoSphincsTree_leafaddr *a);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastlePqcCryptoSphincsTree)

#endif

#if !defined (OrgSpongycastlePqcCryptoSphincsTree_leafaddr_) && (INCLUDE_ALL_OrgSpongycastlePqcCryptoSphincsTree || defined(INCLUDE_OrgSpongycastlePqcCryptoSphincsTree_leafaddr))
#define OrgSpongycastlePqcCryptoSphincsTree_leafaddr_

@interface OrgSpongycastlePqcCryptoSphincsTree_leafaddr : NSObject {
 @public
  jint level_;
  jlong subtree_;
  jlong subleaf_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithOrgSpongycastlePqcCryptoSphincsTree_leafaddr:(OrgSpongycastlePqcCryptoSphincsTree_leafaddr *)leafaddr;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastlePqcCryptoSphincsTree_leafaddr)

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoSphincsTree_leafaddr_init(OrgSpongycastlePqcCryptoSphincsTree_leafaddr *self);

FOUNDATION_EXPORT OrgSpongycastlePqcCryptoSphincsTree_leafaddr *new_OrgSpongycastlePqcCryptoSphincsTree_leafaddr_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastlePqcCryptoSphincsTree_leafaddr *create_OrgSpongycastlePqcCryptoSphincsTree_leafaddr_init(void);

FOUNDATION_EXPORT void OrgSpongycastlePqcCryptoSphincsTree_leafaddr_initWithOrgSpongycastlePqcCryptoSphincsTree_leafaddr_(OrgSpongycastlePqcCryptoSphincsTree_leafaddr *self, OrgSpongycastlePqcCryptoSphincsTree_leafaddr *leafaddr);

FOUNDATION_EXPORT OrgSpongycastlePqcCryptoSphincsTree_leafaddr *new_OrgSpongycastlePqcCryptoSphincsTree_leafaddr_initWithOrgSpongycastlePqcCryptoSphincsTree_leafaddr_(OrgSpongycastlePqcCryptoSphincsTree_leafaddr *leafaddr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastlePqcCryptoSphincsTree_leafaddr *create_OrgSpongycastlePqcCryptoSphincsTree_leafaddr_initWithOrgSpongycastlePqcCryptoSphincsTree_leafaddr_(OrgSpongycastlePqcCryptoSphincsTree_leafaddr *leafaddr);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastlePqcCryptoSphincsTree_leafaddr)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastlePqcCryptoSphincsTree")
