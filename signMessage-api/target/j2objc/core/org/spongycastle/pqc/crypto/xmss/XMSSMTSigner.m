//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/xmss/XMSSMTSigner.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/List.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/pqc/crypto/xmss/BDS.h"
#include "org/spongycastle/pqc/crypto/xmss/BDSStateMap.h"
#include "org/spongycastle/pqc/crypto/xmss/KeyedHashFunctions.h"
#include "org/spongycastle/pqc/crypto/xmss/OTSHashAddress.h"
#include "org/spongycastle/pqc/crypto/xmss/WOTSPlus.h"
#include "org/spongycastle/pqc/crypto/xmss/WOTSPlusParameters.h"
#include "org/spongycastle/pqc/crypto/xmss/WOTSPlusSignature.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSAddress.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSMTParameters.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSMTPrivateKeyParameters.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSMTPublicKeyParameters.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSMTSignature.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSMTSigner.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSNode.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSParameters.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSReducedSignature.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSUtil.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSVerifierUtil.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastlePqcCryptoXmssXMSSMTSigner () {
 @public
  OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privateKey_;
  OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *nextKeyGenerator_;
  OrgSpongycastlePqcCryptoXmssXMSSMTPublicKeyParameters *publicKey_;
  OrgSpongycastlePqcCryptoXmssXMSSMTParameters *params_;
  OrgSpongycastlePqcCryptoXmssXMSSParameters *xmssParams_;
  OrgSpongycastlePqcCryptoXmssWOTSPlus *wotsPlus_;
  jboolean hasGenerated_;
  jboolean initSign_;
}

- (OrgSpongycastlePqcCryptoXmssWOTSPlusSignature *)wotsSignWithByteArray:(IOSByteArray *)messageDigest
                          withOrgSpongycastlePqcCryptoXmssOTSHashAddress:(OrgSpongycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoXmssXMSSMTSigner, privateKey_, OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoXmssXMSSMTSigner, nextKeyGenerator_, OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoXmssXMSSMTSigner, publicKey_, OrgSpongycastlePqcCryptoXmssXMSSMTPublicKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoXmssXMSSMTSigner, params_, OrgSpongycastlePqcCryptoXmssXMSSMTParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoXmssXMSSMTSigner, xmssParams_, OrgSpongycastlePqcCryptoXmssXMSSParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoXmssXMSSMTSigner, wotsPlus_, OrgSpongycastlePqcCryptoXmssWOTSPlus *)

__attribute__((unused)) static OrgSpongycastlePqcCryptoXmssWOTSPlusSignature *OrgSpongycastlePqcCryptoXmssXMSSMTSigner_wotsSignWithByteArray_withOrgSpongycastlePqcCryptoXmssOTSHashAddress_(OrgSpongycastlePqcCryptoXmssXMSSMTSigner *self, IOSByteArray *messageDigest, OrgSpongycastlePqcCryptoXmssOTSHashAddress *otsHashAddress);

@implementation OrgSpongycastlePqcCryptoXmssXMSSMTSigner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcCryptoXmssXMSSMTSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forSigning
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  if (forSigning) {
    initSign_ = true;
    hasGenerated_ = false;
    privateKey_ = (OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) cast_chk(param, [OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters class]);
    nextKeyGenerator_ = privateKey_;
    params_ = [((OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getParameters];
    xmssParams_ = [((OrgSpongycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getXMSSParameters];
  }
  else {
    initSign_ = false;
    publicKey_ = (OrgSpongycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) cast_chk(param, [OrgSpongycastlePqcCryptoXmssXMSSMTPublicKeyParameters class]);
    params_ = [((OrgSpongycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) nil_chk(publicKey_)) getParameters];
    xmssParams_ = [((OrgSpongycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getXMSSParameters];
  }
  wotsPlus_ = new_OrgSpongycastlePqcCryptoXmssWOTSPlus_initWithOrgSpongycastlePqcCryptoXmssWOTSPlusParameters_(new_OrgSpongycastlePqcCryptoXmssWOTSPlusParameters_initWithOrgSpongycastleCryptoDigest_([((OrgSpongycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getDigest]));
}

- (IOSByteArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  if (message == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  if (initSign_) {
    if (privateKey_ == nil) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"signing key no longer usable");
    }
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"signer not initialized for signature generation");
  }
  if ([((OrgSpongycastlePqcCryptoXmssBDSStateMap *) nil_chk([privateKey_ getBDSState])) isEmpty]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"not initialized");
  }
  OrgSpongycastlePqcCryptoXmssBDSStateMap *bdsState = [((OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState];
  jlong globalIndex = [((OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getIndex];
  jint totalHeight = [((OrgSpongycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getHeight];
  jint xmssHeight = [((OrgSpongycastlePqcCryptoXmssXMSSParameters *) nil_chk(xmssParams_)) getHeight];
  if (!OrgSpongycastlePqcCryptoXmssXMSSUtil_isIndexValidWithInt_withLong_(totalHeight, globalIndex)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"index out of bounds");
  }
  IOSByteArray *random = [((OrgSpongycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk([((OrgSpongycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) getKhf])) PRFWithByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeyPRF] withByteArray:OrgSpongycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(globalIndex, 32)];
  IOSByteArray *concatenated = OrgSpongycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_(random, [((OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getRoot], OrgSpongycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_(globalIndex, [((OrgSpongycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getDigestSize]));
  IOSByteArray *messageDigest = [((OrgSpongycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk([((OrgSpongycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) getKhf])) HMsgWithByteArray:concatenated withByteArray:message];
  OrgSpongycastlePqcCryptoXmssXMSSMTSignature *signature = [((OrgSpongycastlePqcCryptoXmssXMSSMTSignature_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSMTSignature_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssXMSSMTSignature_Builder_initWithOrgSpongycastlePqcCryptoXmssXMSSMTParameters_(params_) withIndexWithLong:globalIndex])) withRandomWithByteArray:random])) build];
  jlong indexTree = OrgSpongycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(globalIndex, xmssHeight);
  jint indexLeaf = OrgSpongycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(globalIndex, xmssHeight);
  [((OrgSpongycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgSpongycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getDigestSize]] withByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed]];
  OrgSpongycastlePqcCryptoXmssOTSHashAddress *otsHashAddress = (OrgSpongycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgSpongycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssOTSHashAddress_Builder_init() withTreeAddressWithLong:indexTree])) withOTSAddressWithInt:indexLeaf])) build], [OrgSpongycastlePqcCryptoXmssOTSHashAddress class]);
  if ([((OrgSpongycastlePqcCryptoXmssBDSStateMap *) nil_chk(bdsState)) getWithInt:0] == nil || indexLeaf == 0) {
    [bdsState putWithInt:0 withOrgSpongycastlePqcCryptoXmssBDS:new_OrgSpongycastlePqcCryptoXmssBDS_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withOrgSpongycastlePqcCryptoXmssOTSHashAddress_(xmssParams_, [((OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed], [((OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed], otsHashAddress)];
  }
  OrgSpongycastlePqcCryptoXmssWOTSPlusSignature *wotsPlusSignature = OrgSpongycastlePqcCryptoXmssXMSSMTSigner_wotsSignWithByteArray_withOrgSpongycastlePqcCryptoXmssOTSHashAddress_(self, messageDigest, otsHashAddress);
  OrgSpongycastlePqcCryptoXmssXMSSReducedSignature *reducedSignature = [((OrgSpongycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssXMSSReducedSignature_Builder_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_(xmssParams_) withWOTSPlusSignatureWithOrgSpongycastlePqcCryptoXmssWOTSPlusSignature:wotsPlusSignature])) withAuthPathWithJavaUtilList:[((OrgSpongycastlePqcCryptoXmssBDS *) nil_chk([bdsState getWithInt:0])) getAuthenticationPath]])) build];
  [((id<JavaUtilList>) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSMTSignature *) nil_chk(signature)) getReducedSignatures])) addWithId:reducedSignature];
  for (jint layer = 1; layer < [((OrgSpongycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getLayers]; layer++) {
    OrgSpongycastlePqcCryptoXmssXMSSNode *root = [((OrgSpongycastlePqcCryptoXmssBDS *) nil_chk([bdsState getWithInt:layer - 1])) getRoot];
    indexLeaf = OrgSpongycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(indexTree, xmssHeight);
    indexTree = OrgSpongycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(indexTree, xmssHeight);
    otsHashAddress = (OrgSpongycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgSpongycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:layer])) withTreeAddressWithLong:indexTree])) withOTSAddressWithInt:indexLeaf])) build], [OrgSpongycastlePqcCryptoXmssOTSHashAddress class]);
    wotsPlusSignature = OrgSpongycastlePqcCryptoXmssXMSSMTSigner_wotsSignWithByteArray_withOrgSpongycastlePqcCryptoXmssOTSHashAddress_(self, [((OrgSpongycastlePqcCryptoXmssXMSSNode *) nil_chk(root)) getValue], otsHashAddress);
    if ([bdsState getWithInt:layer] == nil || OrgSpongycastlePqcCryptoXmssXMSSUtil_isNewBDSInitNeededWithLong_withInt_withInt_(globalIndex, xmssHeight, layer)) {
      [bdsState putWithInt:layer withOrgSpongycastlePqcCryptoXmssBDS:new_OrgSpongycastlePqcCryptoXmssBDS_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_withByteArray_withByteArray_withOrgSpongycastlePqcCryptoXmssOTSHashAddress_(xmssParams_, [((OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed], [((OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed], otsHashAddress)];
    }
    reducedSignature = [((OrgSpongycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSReducedSignature_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssXMSSReducedSignature_Builder_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_(xmssParams_) withWOTSPlusSignatureWithOrgSpongycastlePqcCryptoXmssWOTSPlusSignature:wotsPlusSignature])) withAuthPathWithJavaUtilList:[((OrgSpongycastlePqcCryptoXmssBDS *) nil_chk([bdsState getWithInt:layer])) getAuthenticationPath]])) build];
    [((id<JavaUtilList>) nil_chk([signature getReducedSignatures])) addWithId:reducedSignature];
  }
  hasGenerated_ = true;
  if (nextKeyGenerator_ != nil) {
    privateKey_ = [nextKeyGenerator_ getNextKey];
    nextKeyGenerator_ = privateKey_;
  }
  else {
    privateKey_ = nil;
  }
  return [signature toByteArray];
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature {
  if (message == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  if (signature == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"signature == null");
  }
  if (publicKey_ == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"publicKey == null");
  }
  OrgSpongycastlePqcCryptoXmssXMSSMTSignature *sig = [((OrgSpongycastlePqcCryptoXmssXMSSMTSignature_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssXMSSMTSignature_Builder_initWithOrgSpongycastlePqcCryptoXmssXMSSMTParameters_(params_) withSignatureWithByteArray:signature])) build];
  IOSByteArray *concatenated = OrgSpongycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_([((OrgSpongycastlePqcCryptoXmssXMSSMTSignature *) nil_chk(sig)) getRandom], [((OrgSpongycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) nil_chk(publicKey_)) getRoot], OrgSpongycastlePqcCryptoXmssXMSSUtil_toBytesBigEndianWithLong_withInt_([sig getIndex], [((OrgSpongycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getDigestSize]));
  IOSByteArray *messageDigest = [((OrgSpongycastlePqcCryptoXmssKeyedHashFunctions *) nil_chk([((OrgSpongycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) getKhf])) HMsgWithByteArray:concatenated withByteArray:message];
  jlong globalIndex = [sig getIndex];
  jint xmssHeight = [((OrgSpongycastlePqcCryptoXmssXMSSParameters *) nil_chk(xmssParams_)) getHeight];
  jlong indexTree = OrgSpongycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(globalIndex, xmssHeight);
  jint indexLeaf = OrgSpongycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(globalIndex, xmssHeight);
  [((OrgSpongycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgSpongycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getDigestSize]] withByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) nil_chk(publicKey_)) getPublicSeed]];
  OrgSpongycastlePqcCryptoXmssOTSHashAddress *otsHashAddress = (OrgSpongycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgSpongycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssOTSHashAddress_Builder_init() withTreeAddressWithLong:indexTree])) withOTSAddressWithInt:indexLeaf])) build], [OrgSpongycastlePqcCryptoXmssOTSHashAddress class]);
  OrgSpongycastlePqcCryptoXmssXMSSReducedSignature *xmssMTSignature = [((id<JavaUtilList>) nil_chk([sig getReducedSignatures])) getWithInt:0];
  OrgSpongycastlePqcCryptoXmssXMSSNode *rootNode = OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil_getRootNodeFromSignatureWithOrgSpongycastlePqcCryptoXmssWOTSPlus_withInt_withByteArray_withOrgSpongycastlePqcCryptoXmssXMSSReducedSignature_withOrgSpongycastlePqcCryptoXmssOTSHashAddress_withInt_(wotsPlus_, xmssHeight, messageDigest, xmssMTSignature, otsHashAddress, indexLeaf);
  for (jint layer = 1; layer < [((OrgSpongycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(params_)) getLayers]; layer++) {
    xmssMTSignature = [((id<JavaUtilList>) nil_chk([sig getReducedSignatures])) getWithInt:layer];
    indexLeaf = OrgSpongycastlePqcCryptoXmssXMSSUtil_getLeafIndexWithLong_withInt_(indexTree, xmssHeight);
    indexTree = OrgSpongycastlePqcCryptoXmssXMSSUtil_getTreeIndexWithLong_withInt_(indexTree, xmssHeight);
    otsHashAddress = (OrgSpongycastlePqcCryptoXmssOTSHashAddress *) cast_chk([((OrgSpongycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssOTSHashAddress_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssOTSHashAddress_Builder_init() withLayerAddressWithInt:layer])) withTreeAddressWithLong:indexTree])) withOTSAddressWithInt:indexLeaf])) build], [OrgSpongycastlePqcCryptoXmssOTSHashAddress class]);
    rootNode = OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil_getRootNodeFromSignatureWithOrgSpongycastlePqcCryptoXmssWOTSPlus_withInt_withByteArray_withOrgSpongycastlePqcCryptoXmssXMSSReducedSignature_withOrgSpongycastlePqcCryptoXmssOTSHashAddress_withInt_(wotsPlus_, xmssHeight, [((OrgSpongycastlePqcCryptoXmssXMSSNode *) nil_chk(rootNode)) getValue], xmssMTSignature, otsHashAddress, indexLeaf);
  }
  return OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_([((OrgSpongycastlePqcCryptoXmssXMSSNode *) nil_chk(rootNode)) getValue], [((OrgSpongycastlePqcCryptoXmssXMSSMTPublicKeyParameters *) nil_chk(publicKey_)) getRoot]);
}

- (OrgSpongycastlePqcCryptoXmssWOTSPlusSignature *)wotsSignWithByteArray:(IOSByteArray *)messageDigest
                          withOrgSpongycastlePqcCryptoXmssOTSHashAddress:(OrgSpongycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  return OrgSpongycastlePqcCryptoXmssXMSSMTSigner_wotsSignWithByteArray_withOrgSpongycastlePqcCryptoXmssOTSHashAddress_(self, messageDigest, otsHashAddress);
}

- (OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)getUpdatedPrivateKey {
  if (hasGenerated_) {
    OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privKey = privateKey_;
    privateKey_ = nil;
    nextKeyGenerator_ = nil;
    return privKey;
  }
  else {
    OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *privKey = [((OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(nextKeyGenerator_)) getNextKey];
    nextKeyGenerator_ = nil;
    return privKey;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcCryptoXmssWOTSPlusSignature;", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(generateSignatureWithByteArray:);
  methods[3].selector = @selector(verifySignatureWithByteArray:withByteArray:);
  methods[4].selector = @selector(wotsSignWithByteArray:withOrgSpongycastlePqcCryptoXmssOTSHashAddress:);
  methods[5].selector = @selector(getUpdatedPrivateKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "privateKey_", "LOrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextKeyGenerator_", "LOrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicKey_", "LOrgSpongycastlePqcCryptoXmssXMSSMTPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "params_", "LOrgSpongycastlePqcCryptoXmssXMSSMTParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xmssParams_", "LOrgSpongycastlePqcCryptoXmssXMSSParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "wotsPlus_", "LOrgSpongycastlePqcCryptoXmssWOTSPlus;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasGenerated_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initSign_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[B[B", "wotsSign", "[BLOrgSpongycastlePqcCryptoXmssOTSHashAddress;" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoXmssXMSSMTSigner = { "XMSSMTSigner", "org.spongycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x1, 6, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoXmssXMSSMTSigner;
}

@end

void OrgSpongycastlePqcCryptoXmssXMSSMTSigner_init(OrgSpongycastlePqcCryptoXmssXMSSMTSigner *self) {
  NSObject_init(self);
}

OrgSpongycastlePqcCryptoXmssXMSSMTSigner *new_OrgSpongycastlePqcCryptoXmssXMSSMTSigner_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoXmssXMSSMTSigner, init)
}

OrgSpongycastlePqcCryptoXmssXMSSMTSigner *create_OrgSpongycastlePqcCryptoXmssXMSSMTSigner_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoXmssXMSSMTSigner, init)
}

OrgSpongycastlePqcCryptoXmssWOTSPlusSignature *OrgSpongycastlePqcCryptoXmssXMSSMTSigner_wotsSignWithByteArray_withOrgSpongycastlePqcCryptoXmssOTSHashAddress_(OrgSpongycastlePqcCryptoXmssXMSSMTSigner *self, IOSByteArray *messageDigest, OrgSpongycastlePqcCryptoXmssOTSHashAddress *otsHashAddress) {
  if (((IOSByteArray *) nil_chk(messageDigest))->size_ != [((OrgSpongycastlePqcCryptoXmssXMSSMTParameters *) nil_chk(self->params_)) getDigestSize]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (otsHashAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  [((OrgSpongycastlePqcCryptoXmssWOTSPlus *) nil_chk(self->wotsPlus_)) importKeysWithByteArray:[self->wotsPlus_ getWOTSPlusSecretKeyWithByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(self->privateKey_)) getSecretKeySeed] withOrgSpongycastlePqcCryptoXmssOTSHashAddress:otsHashAddress] withByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSMTPrivateKeyParameters *) nil_chk(self->privateKey_)) getPublicSeed]];
  return [((OrgSpongycastlePqcCryptoXmssWOTSPlus *) nil_chk(self->wotsPlus_)) signWithByteArray:messageDigest withOrgSpongycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoXmssXMSSMTSigner)
