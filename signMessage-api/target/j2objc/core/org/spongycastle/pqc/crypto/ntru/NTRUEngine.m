//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/ntru/NTRUEngine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/InvalidCipherTextException.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/pqc/crypto/ntru/IndexGenerator.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUEncryptionParameters.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUEncryptionPrivateKeyParameters.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUEncryptionPublicKeyParameters.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUEngine.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUParameters.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/Polynomial.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/TernaryPolynomial.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastlePqcCryptoNtruNTRUEngine () {
 @public
  jboolean forEncryption_;
  OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *params_;
  OrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters *pubKey_;
  OrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters *privKey_;
  JavaSecuritySecureRandom *random_;
}

- (IOSByteArray *)encryptWithByteArray:(IOSByteArray *)m
withOrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters:(OrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters *)pubKey;

- (IOSByteArray *)buildSDataWithByteArray:(IOSByteArray *)oid
                            withByteArray:(IOSByteArray *)m
                                  withInt:(jint)l
                            withByteArray:(IOSByteArray *)b
                            withByteArray:(IOSByteArray *)hTrunc;

- (id<OrgSpongycastlePqcMathNtruPolynomialPolynomial>)generateBlindingPolyWithByteArray:(IOSByteArray *)seed
                                                                          withByteArray:(IOSByteArray *)M;

- (IOSIntArray *)generateBlindingCoeffsWithOrgSpongycastlePqcCryptoNtruIndexGenerator:(OrgSpongycastlePqcCryptoNtruIndexGenerator *)ig
                                                                              withInt:(jint)dr;

- (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)MGFWithByteArray:(IOSByteArray *)seed
                                                                    withInt:(jint)N
                                                                    withInt:(jint)minCallsR
                                                                withBoolean:(jboolean)hashSeed;

- (void)putIntWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hashAlg
                                      withInt:(jint)counter;

- (IOSByteArray *)calcHashWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hashAlg;

- (IOSByteArray *)calcHashWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hashAlg
                                            withByteArray:(IOSByteArray *)input;

- (IOSByteArray *)decryptWithByteArray:(IOSByteArray *)data
withOrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters:(OrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters *)privKey;

- (IOSByteArray *)copyOfWithByteArray:(IOSByteArray *)src
                              withInt:(jint)len OBJC_METHOD_FAMILY_NONE;

- (jint)log2WithInt:(jint)value;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoNtruNTRUEngine, params_, OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoNtruNTRUEngine, pubKey_, OrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoNtruNTRUEngine, privKey_, OrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoNtruNTRUEngine, random_, JavaSecuritySecureRandom *)

__attribute__((unused)) static IOSByteArray *OrgSpongycastlePqcCryptoNtruNTRUEngine_encryptWithByteArray_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, IOSByteArray *m, OrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters *pubKey);

__attribute__((unused)) static IOSByteArray *OrgSpongycastlePqcCryptoNtruNTRUEngine_buildSDataWithByteArray_withByteArray_withInt_withByteArray_withByteArray_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, IOSByteArray *oid, IOSByteArray *m, jint l, IOSByteArray *b, IOSByteArray *hTrunc);

__attribute__((unused)) static id<OrgSpongycastlePqcMathNtruPolynomialPolynomial> OrgSpongycastlePqcCryptoNtruNTRUEngine_generateBlindingPolyWithByteArray_withByteArray_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, IOSByteArray *seed, IOSByteArray *M);

__attribute__((unused)) static IOSIntArray *OrgSpongycastlePqcCryptoNtruNTRUEngine_generateBlindingCoeffsWithOrgSpongycastlePqcCryptoNtruIndexGenerator_withInt_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, OrgSpongycastlePqcCryptoNtruIndexGenerator *ig, jint dr);

__attribute__((unused)) static OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *OrgSpongycastlePqcCryptoNtruNTRUEngine_MGFWithByteArray_withInt_withInt_withBoolean_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, IOSByteArray *seed, jint N, jint minCallsR, jboolean hashSeed);

__attribute__((unused)) static void OrgSpongycastlePqcCryptoNtruNTRUEngine_putIntWithOrgSpongycastleCryptoDigest_withInt_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, id<OrgSpongycastleCryptoDigest> hashAlg, jint counter);

__attribute__((unused)) static IOSByteArray *OrgSpongycastlePqcCryptoNtruNTRUEngine_calcHashWithOrgSpongycastleCryptoDigest_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, id<OrgSpongycastleCryptoDigest> hashAlg);

__attribute__((unused)) static IOSByteArray *OrgSpongycastlePqcCryptoNtruNTRUEngine_calcHashWithOrgSpongycastleCryptoDigest_withByteArray_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, id<OrgSpongycastleCryptoDigest> hashAlg, IOSByteArray *input);

__attribute__((unused)) static IOSByteArray *OrgSpongycastlePqcCryptoNtruNTRUEngine_decryptWithByteArray_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, IOSByteArray *data, OrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters *privKey);

__attribute__((unused)) static IOSByteArray *OrgSpongycastlePqcCryptoNtruNTRUEngine_copyOfWithByteArray_withInt_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, IOSByteArray *src, jint len);

__attribute__((unused)) static jint OrgSpongycastlePqcCryptoNtruNTRUEngine_log2WithInt_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, jint value);

@implementation OrgSpongycastlePqcCryptoNtruNTRUEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcCryptoNtruNTRUEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)parameters {
  self->forEncryption_ = forEncryption;
  if (forEncryption) {
    if ([parameters isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
      OrgSpongycastleCryptoParamsParametersWithRandom *p = (OrgSpongycastleCryptoParamsParametersWithRandom *) parameters;
      self->random_ = [((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(p)) getRandom];
      self->pubKey_ = (OrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters *) cast_chk([p getParameters], [OrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters class]);
    }
    else {
      self->random_ = new_JavaSecuritySecureRandom_init();
      self->pubKey_ = (OrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters *) cast_chk(parameters, [OrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters class]);
    }
    self->params_ = [((OrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters *) nil_chk(pubKey_)) getParameters];
  }
  else {
    self->privKey_ = (OrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters *) cast_chk(parameters, [OrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters class]);
    self->params_ = [((OrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters *) nil_chk(privKey_)) getParameters];
  }
}

- (jint)getInputBlockSize {
  return ((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(params_))->maxMsgLenBytes_;
}

- (jint)getOutputBlockSize {
  return ((((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(params_))->N_ * OrgSpongycastlePqcCryptoNtruNTRUEngine_log2WithInt_(self, params_->q_)) + 7) / 8;
}

- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)len {
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, tmp, 0, len);
  if (forEncryption_) {
    return OrgSpongycastlePqcCryptoNtruNTRUEngine_encryptWithByteArray_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters_(self, tmp, pubKey_);
  }
  else {
    return OrgSpongycastlePqcCryptoNtruNTRUEngine_decryptWithByteArray_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters_(self, tmp, privKey_);
  }
}

- (IOSByteArray *)encryptWithByteArray:(IOSByteArray *)m
withOrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters:(OrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters *)pubKey {
  return OrgSpongycastlePqcCryptoNtruNTRUEngine_encryptWithByteArray_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters_(self, m, pubKey);
}

- (IOSByteArray *)buildSDataWithByteArray:(IOSByteArray *)oid
                            withByteArray:(IOSByteArray *)m
                                  withInt:(jint)l
                            withByteArray:(IOSByteArray *)b
                            withByteArray:(IOSByteArray *)hTrunc {
  return OrgSpongycastlePqcCryptoNtruNTRUEngine_buildSDataWithByteArray_withByteArray_withInt_withByteArray_withByteArray_(self, oid, m, l, b, hTrunc);
}

- (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)encryptWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)m
                                                                  withOrgSpongycastlePqcMathNtruPolynomialTernaryPolynomial:(id<OrgSpongycastlePqcMathNtruPolynomialTernaryPolynomial>)r
                                                                  withOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)pubKey {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *e = [((id<OrgSpongycastlePqcMathNtruPolynomialTernaryPolynomial>) nil_chk(r)) multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:pubKey withInt:((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(params_))->q_];
  [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(e)) addWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:m withInt:((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(params_))->q_];
  [e ensurePositiveWithInt:((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(params_))->q_];
  return e;
}

- (id<OrgSpongycastlePqcMathNtruPolynomialPolynomial>)generateBlindingPolyWithByteArray:(IOSByteArray *)seed
                                                                          withByteArray:(IOSByteArray *)M {
  return OrgSpongycastlePqcCryptoNtruNTRUEngine_generateBlindingPolyWithByteArray_withByteArray_(self, seed, M);
}

- (IOSIntArray *)generateBlindingCoeffsWithOrgSpongycastlePqcCryptoNtruIndexGenerator:(OrgSpongycastlePqcCryptoNtruIndexGenerator *)ig
                                                                              withInt:(jint)dr {
  return OrgSpongycastlePqcCryptoNtruNTRUEngine_generateBlindingCoeffsWithOrgSpongycastlePqcCryptoNtruIndexGenerator_withInt_(self, ig, dr);
}

- (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)MGFWithByteArray:(IOSByteArray *)seed
                                                                    withInt:(jint)N
                                                                    withInt:(jint)minCallsR
                                                                withBoolean:(jboolean)hashSeed {
  return OrgSpongycastlePqcCryptoNtruNTRUEngine_MGFWithByteArray_withInt_withInt_withBoolean_(self, seed, N, minCallsR, hashSeed);
}

- (void)putIntWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hashAlg
                                      withInt:(jint)counter {
  OrgSpongycastlePqcCryptoNtruNTRUEngine_putIntWithOrgSpongycastleCryptoDigest_withInt_(self, hashAlg, counter);
}

- (IOSByteArray *)calcHashWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hashAlg {
  return OrgSpongycastlePqcCryptoNtruNTRUEngine_calcHashWithOrgSpongycastleCryptoDigest_(self, hashAlg);
}

- (IOSByteArray *)calcHashWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hashAlg
                                            withByteArray:(IOSByteArray *)input {
  return OrgSpongycastlePqcCryptoNtruNTRUEngine_calcHashWithOrgSpongycastleCryptoDigest_withByteArray_(self, hashAlg, input);
}

- (IOSByteArray *)decryptWithByteArray:(IOSByteArray *)data
withOrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters:(OrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters *)privKey {
  return OrgSpongycastlePqcCryptoNtruNTRUEngine_decryptWithByteArray_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters_(self, data, privKey);
}

- (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)decryptWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)e
                                                                         withOrgSpongycastlePqcMathNtruPolynomialPolynomial:(id<OrgSpongycastlePqcMathNtruPolynomialPolynomial>)priv_t
                                                                  withOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)priv_fp {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *a;
  if (((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(params_))->fastFp_) {
    a = [((id<OrgSpongycastlePqcMathNtruPolynomialPolynomial>) nil_chk(priv_t)) multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:e withInt:params_->q_];
    [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(a)) multWithInt:3];
    [a addWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:e];
  }
  else {
    a = [((id<OrgSpongycastlePqcMathNtruPolynomialPolynomial>) nil_chk(priv_t)) multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:e withInt:params_->q_];
  }
  [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(a)) center0WithInt:((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(params_))->q_];
  [a mod3];
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *c = ((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(params_))->fastFp_ ? a : [new_OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(a) multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:priv_fp withInt:3];
  [c center0WithInt:3];
  return c;
}

- (IOSByteArray *)copyOfWithByteArray:(IOSByteArray *)src
                              withInt:(jint)len {
  return OrgSpongycastlePqcCryptoNtruNTRUEngine_copyOfWithByteArray_withInt_(self, src, len);
}

- (jint)log2WithInt:(jint)value {
  return OrgSpongycastlePqcCryptoNtruNTRUEngine_log2WithInt_(self, value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "[B", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x4, 5, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialPolynomial;", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 18, 20, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 21, 22, 4, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x4, 21, 23, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 26, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getInputBlockSize);
  methods[3].selector = @selector(getOutputBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(encryptWithByteArray:withOrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters:);
  methods[6].selector = @selector(buildSDataWithByteArray:withByteArray:withInt:withByteArray:withByteArray:);
  methods[7].selector = @selector(encryptWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:withOrgSpongycastlePqcMathNtruPolynomialTernaryPolynomial:withOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[8].selector = @selector(generateBlindingPolyWithByteArray:withByteArray:);
  methods[9].selector = @selector(generateBlindingCoeffsWithOrgSpongycastlePqcCryptoNtruIndexGenerator:withInt:);
  methods[10].selector = @selector(MGFWithByteArray:withInt:withInt:withBoolean:);
  methods[11].selector = @selector(putIntWithOrgSpongycastleCryptoDigest:withInt:);
  methods[12].selector = @selector(calcHashWithOrgSpongycastleCryptoDigest:);
  methods[13].selector = @selector(calcHashWithOrgSpongycastleCryptoDigest:withByteArray:);
  methods[14].selector = @selector(decryptWithByteArray:withOrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters:);
  methods[15].selector = @selector(decryptWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:withOrgSpongycastlePqcMathNtruPolynomialPolynomial:withOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[16].selector = @selector(copyOfWithByteArray:withInt:);
  methods[17].selector = @selector(log2WithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "params_", "LOrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pubKey_", "LOrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privKey_", "LOrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;", "processBlock", "[BII", "LOrgSpongycastleCryptoInvalidCipherTextException;", "encrypt", "[BLOrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters;", "buildSData", "[B[BI[B[B", "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;LOrgSpongycastlePqcMathNtruPolynomialTernaryPolynomial;LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", "generateBlindingPoly", "[B[B", "generateBlindingCoeffs", "LOrgSpongycastlePqcCryptoNtruIndexGenerator;I", "MGF", "[BIIZ", "putInt", "LOrgSpongycastleCryptoDigest;I", "calcHash", "LOrgSpongycastleCryptoDigest;", "LOrgSpongycastleCryptoDigest;[B", "decrypt", "[BLOrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters;", "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;LOrgSpongycastlePqcMathNtruPolynomialPolynomial;LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", "copyOf", "[BI", "log2", "I" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoNtruNTRUEngine = { "NTRUEngine", "org.spongycastle.pqc.crypto.ntru", ptrTable, methods, fields, 7, 0x1, 18, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoNtruNTRUEngine;
}

@end

void OrgSpongycastlePqcCryptoNtruNTRUEngine_init(OrgSpongycastlePqcCryptoNtruNTRUEngine *self) {
  NSObject_init(self);
}

OrgSpongycastlePqcCryptoNtruNTRUEngine *new_OrgSpongycastlePqcCryptoNtruNTRUEngine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoNtruNTRUEngine, init)
}

OrgSpongycastlePqcCryptoNtruNTRUEngine *create_OrgSpongycastlePqcCryptoNtruNTRUEngine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoNtruNTRUEngine, init)
}

IOSByteArray *OrgSpongycastlePqcCryptoNtruNTRUEngine_encryptWithByteArray_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, IOSByteArray *m, OrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters *pubKey) {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *pub = ((OrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters *) nil_chk(pubKey))->h_;
  jint N = ((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(self->params_))->N_;
  jint q = self->params_->q_;
  jint maxLenBytes = self->params_->maxMsgLenBytes_;
  jint db = self->params_->db_;
  jint bufferLenBits = self->params_->bufferLenBits_;
  jint dm0 = self->params_->dm0_;
  jint pkLen = self->params_->pkLen_;
  jint minCallsMask = self->params_->minCallsMask_;
  jboolean hashSeed = self->params_->hashSeed_;
  IOSByteArray *oid = self->params_->oid_;
  jint l = ((IOSByteArray *) nil_chk(m))->size_;
  if (maxLenBytes > 255) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"llen values bigger than 1 are not supported");
  }
  if (l > maxLenBytes) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(JreStrcat("$ICI", @"Message too long: ", l, '>', maxLenBytes));
  }
  while (true) {
    IOSByteArray *b = [IOSByteArray newArrayWithLength:db / 8];
    [((JavaSecuritySecureRandom *) nil_chk(self->random_)) nextBytesWithByteArray:b];
    IOSByteArray *p0 = [IOSByteArray newArrayWithLength:maxLenBytes + 1 - l];
    IOSByteArray *M = [IOSByteArray newArrayWithLength:bufferLenBits / 8];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, M, 0, b->size_);
    *IOSByteArray_GetRef(M, b->size_) = (jbyte) l;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(m, 0, M, b->size_ + 1, m->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(p0, 0, M, b->size_ + 1 + m->size_, p0->size_);
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *mTrin = OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3SvesWithByteArray_withInt_(M, N);
    IOSByteArray *bh = [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(pub)) toBinaryWithInt:q];
    IOSByteArray *hTrunc = OrgSpongycastlePqcCryptoNtruNTRUEngine_copyOfWithByteArray_withInt_(self, bh, pkLen / 8);
    IOSByteArray *sData = OrgSpongycastlePqcCryptoNtruNTRUEngine_buildSDataWithByteArray_withByteArray_withInt_withByteArray_withByteArray_(self, oid, m, l, b, hTrunc);
    id<OrgSpongycastlePqcMathNtruPolynomialPolynomial> r = OrgSpongycastlePqcCryptoNtruNTRUEngine_generateBlindingPolyWithByteArray_withByteArray_(self, sData, M);
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *R = [((id<OrgSpongycastlePqcMathNtruPolynomialPolynomial>) nil_chk(r)) multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:pub withInt:q];
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *R4 = (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) cast_chk([((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(R)) java_clone], [OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial class]);
    [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(R4)) modPositiveWithInt:4];
    IOSByteArray *oR4 = [R4 toBinaryWithInt:4];
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *mask = OrgSpongycastlePqcCryptoNtruNTRUEngine_MGFWithByteArray_withInt_withInt_withBoolean_(self, oR4, N, minCallsMask, hashSeed);
    [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(mTrin)) addWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:mask];
    [mTrin mod3];
    if ([mTrin countWithInt:-1] < dm0) {
      continue;
    }
    if ([mTrin countWithInt:0] < dm0) {
      continue;
    }
    if ([mTrin countWithInt:1] < dm0) {
      continue;
    }
    [R addWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:mTrin withInt:q];
    [R ensurePositiveWithInt:q];
    return [R toBinaryWithInt:q];
  }
}

IOSByteArray *OrgSpongycastlePqcCryptoNtruNTRUEngine_buildSDataWithByteArray_withByteArray_withInt_withByteArray_withByteArray_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, IOSByteArray *oid, IOSByteArray *m, jint l, IOSByteArray *b, IOSByteArray *hTrunc) {
  IOSByteArray *sData = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(oid))->size_ + l + ((IOSByteArray *) nil_chk(b))->size_ + ((IOSByteArray *) nil_chk(hTrunc))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oid, 0, sData, 0, oid->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(m, 0, sData, oid->size_, ((IOSByteArray *) nil_chk(m))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, sData, oid->size_ + m->size_, b->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hTrunc, 0, sData, oid->size_ + m->size_ + b->size_, hTrunc->size_);
  return sData;
}

id<OrgSpongycastlePqcMathNtruPolynomialPolynomial> OrgSpongycastlePqcCryptoNtruNTRUEngine_generateBlindingPolyWithByteArray_withByteArray_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, IOSByteArray *seed, IOSByteArray *M) {
  OrgSpongycastlePqcCryptoNtruIndexGenerator *ig = new_OrgSpongycastlePqcCryptoNtruIndexGenerator_initWithByteArray_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_(seed, self->params_);
  if (((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(self->params_))->polyType_ == OrgSpongycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_PRODUCT) {
    OrgSpongycastlePqcMathNtruPolynomialSparseTernaryPolynomial *r1 = new_OrgSpongycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(OrgSpongycastlePqcCryptoNtruNTRUEngine_generateBlindingCoeffsWithOrgSpongycastlePqcCryptoNtruIndexGenerator_withInt_(self, ig, self->params_->dr1_));
    OrgSpongycastlePqcMathNtruPolynomialSparseTernaryPolynomial *r2 = new_OrgSpongycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(OrgSpongycastlePqcCryptoNtruNTRUEngine_generateBlindingCoeffsWithOrgSpongycastlePqcCryptoNtruIndexGenerator_withInt_(self, ig, ((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(self->params_))->dr2_));
    OrgSpongycastlePqcMathNtruPolynomialSparseTernaryPolynomial *r3 = new_OrgSpongycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(OrgSpongycastlePqcCryptoNtruNTRUEngine_generateBlindingCoeffsWithOrgSpongycastlePqcCryptoNtruIndexGenerator_withInt_(self, ig, ((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(self->params_))->dr3_));
    return new_OrgSpongycastlePqcMathNtruPolynomialProductFormPolynomial_initWithOrgSpongycastlePqcMathNtruPolynomialSparseTernaryPolynomial_withOrgSpongycastlePqcMathNtruPolynomialSparseTernaryPolynomial_withOrgSpongycastlePqcMathNtruPolynomialSparseTernaryPolynomial_(r1, r2, r3);
  }
  else {
    jint dr = self->params_->dr_;
    jboolean sparse = self->params_->sparse_;
    IOSIntArray *r = OrgSpongycastlePqcCryptoNtruNTRUEngine_generateBlindingCoeffsWithOrgSpongycastlePqcCryptoNtruIndexGenerator_withInt_(self, ig, dr);
    if (sparse) {
      return new_OrgSpongycastlePqcMathNtruPolynomialSparseTernaryPolynomial_initWithIntArray_(r);
    }
    else {
      return new_OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(r);
    }
  }
}

IOSIntArray *OrgSpongycastlePqcCryptoNtruNTRUEngine_generateBlindingCoeffsWithOrgSpongycastlePqcCryptoNtruIndexGenerator_withInt_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, OrgSpongycastlePqcCryptoNtruIndexGenerator *ig, jint dr) {
  jint N = ((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(self->params_))->N_;
  IOSIntArray *r = [IOSIntArray newArrayWithLength:N];
  for (jint coeff = -1; coeff <= 1; coeff += 2) {
    jint t = 0;
    while (t < dr) {
      jint i = [((OrgSpongycastlePqcCryptoNtruIndexGenerator *) nil_chk(ig)) nextIndex];
      if (IOSIntArray_Get(r, i) == 0) {
        *IOSIntArray_GetRef(r, i) = coeff;
        t++;
      }
    }
  }
  return r;
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *OrgSpongycastlePqcCryptoNtruNTRUEngine_MGFWithByteArray_withInt_withInt_withBoolean_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, IOSByteArray *seed, jint N, jint minCallsR, jboolean hashSeed) {
  id<OrgSpongycastleCryptoDigest> hashAlg = ((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(self->params_))->hashAlg_;
  jint hashLen = [((id<OrgSpongycastleCryptoDigest>) nil_chk(hashAlg)) getDigestSize];
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:minCallsR * hashLen];
  IOSByteArray *Z = hashSeed ? OrgSpongycastlePqcCryptoNtruNTRUEngine_calcHashWithOrgSpongycastleCryptoDigest_withByteArray_(self, hashAlg, seed) : seed;
  jint counter = 0;
  while (counter < minCallsR) {
    [hashAlg updateWithByteArray:Z withInt:0 withInt:Z->size_];
    OrgSpongycastlePqcCryptoNtruNTRUEngine_putIntWithOrgSpongycastleCryptoDigest_withInt_(self, hashAlg, counter);
    IOSByteArray *hash_ = OrgSpongycastlePqcCryptoNtruNTRUEngine_calcHashWithOrgSpongycastleCryptoDigest_(self, hashAlg);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hash_, 0, buf, counter * hashLen, hashLen);
    counter++;
  }
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *i = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N);
  while (true) {
    jint cur = 0;
    for (jint index = 0; index != ((IOSByteArray *) nil_chk(buf))->size_; index++) {
      jint O = (jint) IOSByteArray_Get(buf, index) & (jint) 0xFF;
      if (O >= 243) {
        continue;
      }
      for (jint terIdx = 0; terIdx < 4; terIdx++) {
        jint rem3 = O % 3;
        *IOSIntArray_GetRef(nil_chk(i->coeffs_), cur) = rem3 - 1;
        cur++;
        if (cur == N) {
          return i;
        }
        O = (O - rem3) / 3;
      }
      *IOSIntArray_GetRef(nil_chk(i->coeffs_), cur) = O - 1;
      cur++;
      if (cur == N) {
        return i;
      }
    }
    if (cur >= N) {
      return i;
    }
    [hashAlg updateWithByteArray:Z withInt:0 withInt:Z->size_];
    OrgSpongycastlePqcCryptoNtruNTRUEngine_putIntWithOrgSpongycastleCryptoDigest_withInt_(self, hashAlg, counter);
    IOSByteArray *hash_ = OrgSpongycastlePqcCryptoNtruNTRUEngine_calcHashWithOrgSpongycastleCryptoDigest_(self, hashAlg);
    buf = hash_;
    counter++;
  }
}

void OrgSpongycastlePqcCryptoNtruNTRUEngine_putIntWithOrgSpongycastleCryptoDigest_withInt_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, id<OrgSpongycastleCryptoDigest> hashAlg, jint counter) {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(hashAlg)) updateWithByte:(jbyte) (JreRShift32(counter, 24))];
  [hashAlg updateWithByte:(jbyte) (JreRShift32(counter, 16))];
  [hashAlg updateWithByte:(jbyte) (JreRShift32(counter, 8))];
  [hashAlg updateWithByte:(jbyte) counter];
}

IOSByteArray *OrgSpongycastlePqcCryptoNtruNTRUEngine_calcHashWithOrgSpongycastleCryptoDigest_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, id<OrgSpongycastleCryptoDigest> hashAlg) {
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(hashAlg)) getDigestSize]];
  [hashAlg doFinalWithByteArray:tmp withInt:0];
  return tmp;
}

IOSByteArray *OrgSpongycastlePqcCryptoNtruNTRUEngine_calcHashWithOrgSpongycastleCryptoDigest_withByteArray_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, id<OrgSpongycastleCryptoDigest> hashAlg, IOSByteArray *input) {
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(hashAlg)) getDigestSize]];
  [hashAlg updateWithByteArray:input withInt:0 withInt:((IOSByteArray *) nil_chk(input))->size_];
  [hashAlg doFinalWithByteArray:tmp withInt:0];
  return tmp;
}

IOSByteArray *OrgSpongycastlePqcCryptoNtruNTRUEngine_decryptWithByteArray_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, IOSByteArray *data, OrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters *privKey) {
  id<OrgSpongycastlePqcMathNtruPolynomialPolynomial> priv_t = ((OrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters *) nil_chk(privKey))->t_;
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *priv_fp = privKey->fp_;
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *pub = privKey->h_;
  jint N = ((OrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters *) nil_chk(self->params_))->N_;
  jint q = self->params_->q_;
  jint db = self->params_->db_;
  jint maxMsgLenBytes = self->params_->maxMsgLenBytes_;
  jint dm0 = self->params_->dm0_;
  jint pkLen = self->params_->pkLen_;
  jint minCallsMask = self->params_->minCallsMask_;
  jboolean hashSeed = self->params_->hashSeed_;
  IOSByteArray *oid = self->params_->oid_;
  if (maxMsgLenBytes > 255) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"maxMsgLenBytes values bigger than 255 are not supported");
  }
  jint bLen = db / 8;
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *e = OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinaryWithByteArray_withInt_withInt_(data, N, q);
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *ci = [self decryptWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:e withOrgSpongycastlePqcMathNtruPolynomialPolynomial:priv_t withOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:priv_fp];
  if ([((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(ci)) countWithInt:-1] < dm0) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"Less than dm0 coefficients equal -1");
  }
  if ([ci countWithInt:0] < dm0) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"Less than dm0 coefficients equal 0");
  }
  if ([ci countWithInt:1] < dm0) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"Less than dm0 coefficients equal 1");
  }
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *cR = (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) cast_chk([((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(e)) java_clone], [OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial class]);
  [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(cR)) subWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:ci];
  [cR modPositiveWithInt:q];
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *cR4 = (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) cast_chk([cR java_clone], [OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial class]);
  [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(cR4)) modPositiveWithInt:4];
  IOSByteArray *coR4 = [cR4 toBinaryWithInt:4];
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *mask = OrgSpongycastlePqcCryptoNtruNTRUEngine_MGFWithByteArray_withInt_withInt_withBoolean_(self, coR4, N, minCallsMask, hashSeed);
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *cMTrin = ci;
  [cMTrin subWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:mask];
  [cMTrin mod3];
  IOSByteArray *cM = [cMTrin toBinary3Sves];
  IOSByteArray *cb = [IOSByteArray newArrayWithLength:bLen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cM, 0, cb, 0, bLen);
  jint cl = IOSByteArray_Get(nil_chk(cM), bLen) & (jint) 0xFF;
  if (cl > maxMsgLenBytes) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(JreStrcat("$ICI", @"Message too long: ", cl, '>', maxMsgLenBytes));
  }
  IOSByteArray *cm = [IOSByteArray newArrayWithLength:cl];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cM, bLen + 1, cm, 0, cl);
  IOSByteArray *p0 = [IOSByteArray newArrayWithLength:cM->size_ - (bLen + 1 + cl)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cM, bLen + 1 + cl, p0, 0, p0->size_);
  if (!OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(p0, [IOSByteArray newArrayWithLength:p0->size_])) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"The message is not followed by zeroes");
  }
  IOSByteArray *bh = [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(pub)) toBinaryWithInt:q];
  IOSByteArray *hTrunc = OrgSpongycastlePqcCryptoNtruNTRUEngine_copyOfWithByteArray_withInt_(self, bh, pkLen / 8);
  IOSByteArray *sData = OrgSpongycastlePqcCryptoNtruNTRUEngine_buildSDataWithByteArray_withByteArray_withInt_withByteArray_withByteArray_(self, oid, cm, cl, cb, hTrunc);
  id<OrgSpongycastlePqcMathNtruPolynomialPolynomial> cr = OrgSpongycastlePqcCryptoNtruNTRUEngine_generateBlindingPolyWithByteArray_withByteArray_(self, sData, cm);
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *cRPrime = [((id<OrgSpongycastlePqcMathNtruPolynomialPolynomial>) nil_chk(cr)) multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:pub];
  [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(cRPrime)) modPositiveWithInt:q];
  if (![cRPrime isEqual:cR]) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"Invalid message encoding");
  }
  return cm;
}

IOSByteArray *OrgSpongycastlePqcCryptoNtruNTRUEngine_copyOfWithByteArray_withInt_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, IOSByteArray *src, jint len) {
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(src, 0, tmp, 0, len < ((IOSByteArray *) nil_chk(src))->size_ ? len : src->size_);
  return tmp;
}

jint OrgSpongycastlePqcCryptoNtruNTRUEngine_log2WithInt_(OrgSpongycastlePqcCryptoNtruNTRUEngine *self, jint value) {
  if (value == 2048) {
    return 11;
  }
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"log2 not fully implemented");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoNtruNTRUEngine)
