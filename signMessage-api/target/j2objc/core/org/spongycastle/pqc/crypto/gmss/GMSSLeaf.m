//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/gmss/GMSSLeaf.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/pqc/crypto/gmss/GMSSLeaf.h"
#include "org/spongycastle/pqc/crypto/gmss/util/GMSSRandom.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/encoders/Hex.h"

@interface OrgSpongycastlePqcCryptoGmssGMSSLeaf () {
 @public
  id<OrgSpongycastleCryptoDigest> messDigestOTS_;
  jint mdsize_;
  jint keysize_;
  OrgSpongycastlePqcCryptoGmssUtilGMSSRandom *gmssRandom_;
  IOSByteArray *leaf_;
  IOSByteArray *concHashs_;
  jint i_;
  jint j_;
  jint two_power_w_;
  jint w_;
  jint steps_;
  IOSByteArray *seed_;
}

- (instancetype)initWithOrgSpongycastlePqcCryptoGmssGMSSLeaf:(OrgSpongycastlePqcCryptoGmssGMSSLeaf *)original;

- (void)updateLeafCalc;

- (jint)getLogWithInt:(jint)intValue;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoGmssGMSSLeaf, messDigestOTS_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoGmssGMSSLeaf, gmssRandom_, OrgSpongycastlePqcCryptoGmssUtilGMSSRandom *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoGmssGMSSLeaf, leaf_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoGmssGMSSLeaf, concHashs_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoGmssGMSSLeaf, seed_, IOSByteArray *)

__attribute__((unused)) static void OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastlePqcCryptoGmssGMSSLeaf_(OrgSpongycastlePqcCryptoGmssGMSSLeaf *self, OrgSpongycastlePqcCryptoGmssGMSSLeaf *original);

__attribute__((unused)) static OrgSpongycastlePqcCryptoGmssGMSSLeaf *new_OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastlePqcCryptoGmssGMSSLeaf_(OrgSpongycastlePqcCryptoGmssGMSSLeaf *original) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastlePqcCryptoGmssGMSSLeaf *create_OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastlePqcCryptoGmssGMSSLeaf_(OrgSpongycastlePqcCryptoGmssGMSSLeaf *original);

__attribute__((unused)) static void OrgSpongycastlePqcCryptoGmssGMSSLeaf_updateLeafCalc(OrgSpongycastlePqcCryptoGmssGMSSLeaf *self);

__attribute__((unused)) static jint OrgSpongycastlePqcCryptoGmssGMSSLeaf_getLogWithInt_(OrgSpongycastlePqcCryptoGmssGMSSLeaf *self, jint intValue);

@implementation OrgSpongycastlePqcCryptoGmssGMSSLeaf

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                     withByteArray2:(IOSObjectArray *)otsIndex
                                       withIntArray:(IOSIntArray *)numLeafs {
  OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastleCryptoDigest_withByteArray2_withIntArray_(self, digest, otsIndex, numLeafs);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                            withInt:(jint)w
                                            withInt:(jint)numLeafs {
  OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastleCryptoDigest_withInt_withInt_(self, digest, w, numLeafs);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                            withInt:(jint)w
                                            withInt:(jint)numLeafs
                                      withByteArray:(IOSByteArray *)seed0 {
  OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastleCryptoDigest_withInt_withInt_withByteArray_(self, digest, w, numLeafs, seed0);
  return self;
}

- (instancetype)initWithOrgSpongycastlePqcCryptoGmssGMSSLeaf:(OrgSpongycastlePqcCryptoGmssGMSSLeaf *)original {
  OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastlePqcCryptoGmssGMSSLeaf_(self, original);
  return self;
}

- (void)initLeafCalcWithByteArray:(IOSByteArray *)seed0 {
  self->i_ = 0;
  self->j_ = 0;
  IOSByteArray *dummy = [IOSByteArray newArrayWithLength:mdsize_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(seed0, 0, dummy, 0, ((IOSByteArray *) nil_chk(seed_))->size_);
  self->seed_ = [((OrgSpongycastlePqcCryptoGmssUtilGMSSRandom *) nil_chk(gmssRandom_)) nextSeedWithByteArray:dummy];
}

- (OrgSpongycastlePqcCryptoGmssGMSSLeaf *)nextLeaf {
  OrgSpongycastlePqcCryptoGmssGMSSLeaf *nextLeaf = new_OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastlePqcCryptoGmssGMSSLeaf_(self);
  OrgSpongycastlePqcCryptoGmssGMSSLeaf_updateLeafCalc(nextLeaf);
  return nextLeaf;
}

- (void)updateLeafCalc {
  OrgSpongycastlePqcCryptoGmssGMSSLeaf_updateLeafCalc(self);
}

- (IOSByteArray *)getLeaf {
  return OrgSpongycastleUtilArrays_cloneWithByteArray_(leaf_);
}

- (jint)getLogWithInt:(jint)intValue {
  return OrgSpongycastlePqcCryptoGmssGMSSLeaf_getLogWithInt_(self, intValue);
}

- (IOSObjectArray *)getStatByte {
  IOSObjectArray *statByte = [IOSObjectArray newArrayWithLength:4 type:IOSClass_byteArray(1)];
  (void) IOSObjectArray_SetAndConsume(statByte, 0, [IOSByteArray newArrayWithLength:mdsize_]);
  (void) IOSObjectArray_SetAndConsume(statByte, 1, [IOSByteArray newArrayWithLength:mdsize_]);
  (void) IOSObjectArray_SetAndConsume(statByte, 2, [IOSByteArray newArrayWithLength:mdsize_ * keysize_]);
  (void) IOSObjectArray_SetAndConsume(statByte, 3, [IOSByteArray newArrayWithLength:mdsize_]);
  (void) IOSObjectArray_Set(statByte, 0, privateKeyOTS_);
  (void) IOSObjectArray_Set(statByte, 1, seed_);
  (void) IOSObjectArray_Set(statByte, 2, concHashs_);
  (void) IOSObjectArray_Set(statByte, 3, leaf_);
  return statByte;
}

- (IOSIntArray *)getStatInt {
  IOSIntArray *statInt = [IOSIntArray newArrayWithLength:4];
  *IOSIntArray_GetRef(statInt, 0) = i_;
  *IOSIntArray_GetRef(statInt, 1) = j_;
  *IOSIntArray_GetRef(statInt, 2) = steps_;
  *IOSIntArray_GetRef(statInt, 3) = w_;
  return statInt;
}

- (NSString *)description {
  NSString *out = @"";
  for (jint i = 0; i < 4; i++) {
    out = JreStrcat("$IC", out, IOSIntArray_Get(nil_chk([self getStatInt]), i), ' ');
  }
  out = JreStrcat("$CICICIC", out, ' ', self->mdsize_, ' ', self->keysize_, ' ', self->two_power_w_, ' ');
  IOSObjectArray *temp = [self getStatByte];
  for (jint i = 0; i < 4; i++) {
    if (IOSObjectArray_Get(nil_chk(temp), i) != nil) {
      out = JreStrcat("$$C", out, [NSString java_stringWithBytes:OrgSpongycastleUtilEncodersHex_encodeWithByteArray_(IOSObjectArray_Get(temp, i))], ' ');
    }
    else {
      out = JreStrcat("$$", out, @"null ");
    }
  }
  return out;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcCryptoGmssGMSSLeaf;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "[[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoDigest:withByteArray2:withIntArray:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoDigest:withInt:withInt:);
  methods[2].selector = @selector(initWithOrgSpongycastleCryptoDigest:withInt:withInt:withByteArray:);
  methods[3].selector = @selector(initWithOrgSpongycastlePqcCryptoGmssGMSSLeaf:);
  methods[4].selector = @selector(initLeafCalcWithByteArray:);
  methods[5].selector = @selector(nextLeaf);
  methods[6].selector = @selector(updateLeafCalc);
  methods[7].selector = @selector(getLeaf);
  methods[8].selector = @selector(getLogWithInt:);
  methods[9].selector = @selector(getStatByte);
  methods[10].selector = @selector(getStatInt);
  methods[11].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "messDigestOTS_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mdsize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keysize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "gmssRandom_", "LOrgSpongycastlePqcCryptoGmssUtilGMSSRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "leaf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "concHashs_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "i_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "j_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "two_power_w_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "w_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "steps_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privateKeyOTS_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDigest;[[B[I", "LOrgSpongycastleCryptoDigest;II", "LOrgSpongycastleCryptoDigest;II[B", "LOrgSpongycastlePqcCryptoGmssGMSSLeaf;", "initLeafCalc", "[B", "getLog", "I", "toString" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoGmssGMSSLeaf = { "GMSSLeaf", "org.spongycastle.pqc.crypto.gmss", ptrTable, methods, fields, 7, 0x1, 12, 13, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoGmssGMSSLeaf;
}

@end

void OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastleCryptoDigest_withByteArray2_withIntArray_(OrgSpongycastlePqcCryptoGmssGMSSLeaf *self, id<OrgSpongycastleCryptoDigest> digest, IOSObjectArray *otsIndex, IOSIntArray *numLeafs) {
  NSObject_init(self);
  self->i_ = IOSIntArray_Get(nil_chk(numLeafs), 0);
  self->j_ = IOSIntArray_Get(numLeafs, 1);
  self->steps_ = IOSIntArray_Get(numLeafs, 2);
  self->w_ = IOSIntArray_Get(numLeafs, 3);
  self->messDigestOTS_ = digest;
  self->gmssRandom_ = new_OrgSpongycastlePqcCryptoGmssUtilGMSSRandom_initWithOrgSpongycastleCryptoDigest_(self->messDigestOTS_);
  self->mdsize_ = [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) getDigestSize];
  jint mdsizeBit = JreLShift32(self->mdsize_, 3);
  jint messagesize = JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) (mdsizeBit) / (jdouble) self->w_));
  jint checksumsize = OrgSpongycastlePqcCryptoGmssGMSSLeaf_getLogWithInt_(self, (JreLShift32(messagesize, self->w_)) + 1);
  self->keysize_ = messagesize + JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) checksumsize / (jdouble) self->w_));
  self->two_power_w_ = JreLShift32(1, self->w_);
  self->privateKeyOTS_ = IOSObjectArray_Get(nil_chk(otsIndex), 0);
  self->seed_ = IOSObjectArray_Get(otsIndex, 1);
  self->concHashs_ = IOSObjectArray_Get(otsIndex, 2);
  self->leaf_ = IOSObjectArray_Get(otsIndex, 3);
}

OrgSpongycastlePqcCryptoGmssGMSSLeaf *new_OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastleCryptoDigest_withByteArray2_withIntArray_(id<OrgSpongycastleCryptoDigest> digest, IOSObjectArray *otsIndex, IOSIntArray *numLeafs) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoGmssGMSSLeaf, initWithOrgSpongycastleCryptoDigest_withByteArray2_withIntArray_, digest, otsIndex, numLeafs)
}

OrgSpongycastlePqcCryptoGmssGMSSLeaf *create_OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastleCryptoDigest_withByteArray2_withIntArray_(id<OrgSpongycastleCryptoDigest> digest, IOSObjectArray *otsIndex, IOSIntArray *numLeafs) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoGmssGMSSLeaf, initWithOrgSpongycastleCryptoDigest_withByteArray2_withIntArray_, digest, otsIndex, numLeafs)
}

void OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastleCryptoDigest_withInt_withInt_(OrgSpongycastlePqcCryptoGmssGMSSLeaf *self, id<OrgSpongycastleCryptoDigest> digest, jint w, jint numLeafs) {
  NSObject_init(self);
  self->w_ = w;
  self->messDigestOTS_ = digest;
  self->gmssRandom_ = new_OrgSpongycastlePqcCryptoGmssUtilGMSSRandom_initWithOrgSpongycastleCryptoDigest_(self->messDigestOTS_);
  self->mdsize_ = [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) getDigestSize];
  jint mdsizeBit = JreLShift32(self->mdsize_, 3);
  jint messagesize = JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) (mdsizeBit) / (jdouble) w));
  jint checksumsize = OrgSpongycastlePqcCryptoGmssGMSSLeaf_getLogWithInt_(self, (JreLShift32(messagesize, w)) + 1);
  self->keysize_ = messagesize + JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) checksumsize / (jdouble) w));
  self->two_power_w_ = JreLShift32(1, w);
  self->steps_ = JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) (((JreLShift32(1, w)) - 1) * self->keysize_ + 1 + self->keysize_) / (jdouble) (numLeafs)));
  self->seed_ = [IOSByteArray newArrayWithLength:self->mdsize_];
  self->leaf_ = [IOSByteArray newArrayWithLength:self->mdsize_];
  self->privateKeyOTS_ = [IOSByteArray newArrayWithLength:self->mdsize_];
  self->concHashs_ = [IOSByteArray newArrayWithLength:self->mdsize_ * self->keysize_];
}

OrgSpongycastlePqcCryptoGmssGMSSLeaf *new_OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastleCryptoDigest_withInt_withInt_(id<OrgSpongycastleCryptoDigest> digest, jint w, jint numLeafs) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoGmssGMSSLeaf, initWithOrgSpongycastleCryptoDigest_withInt_withInt_, digest, w, numLeafs)
}

OrgSpongycastlePqcCryptoGmssGMSSLeaf *create_OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastleCryptoDigest_withInt_withInt_(id<OrgSpongycastleCryptoDigest> digest, jint w, jint numLeafs) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoGmssGMSSLeaf, initWithOrgSpongycastleCryptoDigest_withInt_withInt_, digest, w, numLeafs)
}

void OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastleCryptoDigest_withInt_withInt_withByteArray_(OrgSpongycastlePqcCryptoGmssGMSSLeaf *self, id<OrgSpongycastleCryptoDigest> digest, jint w, jint numLeafs, IOSByteArray *seed0) {
  NSObject_init(self);
  self->w_ = w;
  self->messDigestOTS_ = digest;
  self->gmssRandom_ = new_OrgSpongycastlePqcCryptoGmssUtilGMSSRandom_initWithOrgSpongycastleCryptoDigest_(self->messDigestOTS_);
  self->mdsize_ = [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) getDigestSize];
  jint mdsizeBit = JreLShift32(self->mdsize_, 3);
  jint messagesize = JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) (mdsizeBit) / (jdouble) w));
  jint checksumsize = OrgSpongycastlePqcCryptoGmssGMSSLeaf_getLogWithInt_(self, (JreLShift32(messagesize, w)) + 1);
  self->keysize_ = messagesize + JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) checksumsize / (jdouble) w));
  self->two_power_w_ = JreLShift32(1, w);
  self->steps_ = JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) (((JreLShift32(1, w)) - 1) * self->keysize_ + 1 + self->keysize_) / (jdouble) (numLeafs)));
  self->seed_ = [IOSByteArray newArrayWithLength:self->mdsize_];
  self->leaf_ = [IOSByteArray newArrayWithLength:self->mdsize_];
  self->privateKeyOTS_ = [IOSByteArray newArrayWithLength:self->mdsize_];
  self->concHashs_ = [IOSByteArray newArrayWithLength:self->mdsize_ * self->keysize_];
  [self initLeafCalcWithByteArray:seed0];
}

OrgSpongycastlePqcCryptoGmssGMSSLeaf *new_OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastleCryptoDigest_withInt_withInt_withByteArray_(id<OrgSpongycastleCryptoDigest> digest, jint w, jint numLeafs, IOSByteArray *seed0) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoGmssGMSSLeaf, initWithOrgSpongycastleCryptoDigest_withInt_withInt_withByteArray_, digest, w, numLeafs, seed0)
}

OrgSpongycastlePqcCryptoGmssGMSSLeaf *create_OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastleCryptoDigest_withInt_withInt_withByteArray_(id<OrgSpongycastleCryptoDigest> digest, jint w, jint numLeafs, IOSByteArray *seed0) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoGmssGMSSLeaf, initWithOrgSpongycastleCryptoDigest_withInt_withInt_withByteArray_, digest, w, numLeafs, seed0)
}

void OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastlePqcCryptoGmssGMSSLeaf_(OrgSpongycastlePqcCryptoGmssGMSSLeaf *self, OrgSpongycastlePqcCryptoGmssGMSSLeaf *original) {
  NSObject_init(self);
  self->messDigestOTS_ = ((OrgSpongycastlePqcCryptoGmssGMSSLeaf *) nil_chk(original))->messDigestOTS_;
  self->mdsize_ = original->mdsize_;
  self->keysize_ = original->keysize_;
  self->gmssRandom_ = original->gmssRandom_;
  self->leaf_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(original->leaf_);
  self->concHashs_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(original->concHashs_);
  self->i_ = original->i_;
  self->j_ = original->j_;
  self->two_power_w_ = original->two_power_w_;
  self->w_ = original->w_;
  self->steps_ = original->steps_;
  self->seed_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(original->seed_);
  self->privateKeyOTS_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(original->privateKeyOTS_);
}

OrgSpongycastlePqcCryptoGmssGMSSLeaf *new_OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastlePqcCryptoGmssGMSSLeaf_(OrgSpongycastlePqcCryptoGmssGMSSLeaf *original) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoGmssGMSSLeaf, initWithOrgSpongycastlePqcCryptoGmssGMSSLeaf_, original)
}

OrgSpongycastlePqcCryptoGmssGMSSLeaf *create_OrgSpongycastlePqcCryptoGmssGMSSLeaf_initWithOrgSpongycastlePqcCryptoGmssGMSSLeaf_(OrgSpongycastlePqcCryptoGmssGMSSLeaf *original) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoGmssGMSSLeaf, initWithOrgSpongycastlePqcCryptoGmssGMSSLeaf_, original)
}

void OrgSpongycastlePqcCryptoGmssGMSSLeaf_updateLeafCalc(OrgSpongycastlePqcCryptoGmssGMSSLeaf *self) {
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) getDigestSize]];
  for (jint s = 0; s < self->steps_ + 10000; s++) {
    if (self->i_ == self->keysize_ && self->j_ == self->two_power_w_ - 1) {
      [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) updateWithByteArray:self->concHashs_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->concHashs_))->size_];
      self->leaf_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) getDigestSize]];
      [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) doFinalWithByteArray:self->leaf_ withInt:0];
      return;
    }
    else if (self->i_ == 0 || self->j_ == self->two_power_w_ - 1) {
      self->i_++;
      self->j_ = 0;
      self->privateKeyOTS_ = [((OrgSpongycastlePqcCryptoGmssUtilGMSSRandom *) nil_chk(self->gmssRandom_)) nextSeedWithByteArray:self->seed_];
    }
    else {
      [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) updateWithByteArray:self->privateKeyOTS_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->privateKeyOTS_))->size_];
      self->privateKeyOTS_ = buf;
      [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) doFinalWithByteArray:self->privateKeyOTS_ withInt:0];
      self->j_++;
      if (self->j_ == self->two_power_w_ - 1) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->privateKeyOTS_, 0, self->concHashs_, self->mdsize_ * (self->i_ - 1), self->mdsize_);
      }
    }
  }
  @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$ICICI", @"unable to updateLeaf in steps: ", self->steps_, ' ', self->i_, ' ', self->j_));
}

jint OrgSpongycastlePqcCryptoGmssGMSSLeaf_getLogWithInt_(OrgSpongycastlePqcCryptoGmssGMSSLeaf *self, jint intValue) {
  jint log = 1;
  jint i = 2;
  while (i < intValue) {
    JreLShiftAssignInt(&i, 1);
    log++;
  }
  return log;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoGmssGMSSLeaf)
