//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/xmss/XMSSVerifierUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/util/List.h"
#include "org/spongycastle/pqc/crypto/xmss/HashTreeAddress.h"
#include "org/spongycastle/pqc/crypto/xmss/LTreeAddress.h"
#include "org/spongycastle/pqc/crypto/xmss/OTSHashAddress.h"
#include "org/spongycastle/pqc/crypto/xmss/WOTSPlus.h"
#include "org/spongycastle/pqc/crypto/xmss/WOTSPlusParameters.h"
#include "org/spongycastle/pqc/crypto/xmss/WOTSPlusPublicKeyParameters.h"
#include "org/spongycastle/pqc/crypto/xmss/WOTSPlusSignature.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSAddress.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSNode.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSNodeUtil.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSReducedSignature.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSVerifierUtil.h"

@implementation OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (OrgSpongycastlePqcCryptoXmssXMSSNode *)getRootNodeFromSignatureWithOrgSpongycastlePqcCryptoXmssWOTSPlus:(OrgSpongycastlePqcCryptoXmssWOTSPlus *)wotsPlus
                                                                                                   withInt:(jint)height
                                                                                             withByteArray:(IOSByteArray *)messageDigest
                                                      withOrgSpongycastlePqcCryptoXmssXMSSReducedSignature:(OrgSpongycastlePqcCryptoXmssXMSSReducedSignature *)signature
                                                            withOrgSpongycastlePqcCryptoXmssOTSHashAddress:(OrgSpongycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress
                                                                                                   withInt:(jint)indexLeaf {
  return OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil_getRootNodeFromSignatureWithOrgSpongycastlePqcCryptoXmssWOTSPlus_withInt_withByteArray_withOrgSpongycastlePqcCryptoXmssXMSSReducedSignature_withOrgSpongycastlePqcCryptoXmssOTSHashAddress_withInt_(wotsPlus, height, messageDigest, signature, otsHashAddress, indexLeaf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcCryptoXmssXMSSNode;", 0x8, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getRootNodeFromSignatureWithOrgSpongycastlePqcCryptoXmssWOTSPlus:withInt:withByteArray:withOrgSpongycastlePqcCryptoXmssXMSSReducedSignature:withOrgSpongycastlePqcCryptoXmssOTSHashAddress:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getRootNodeFromSignature", "LOrgSpongycastlePqcCryptoXmssWOTSPlus;I[BLOrgSpongycastlePqcCryptoXmssXMSSReducedSignature;LOrgSpongycastlePqcCryptoXmssOTSHashAddress;I" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil = { "XMSSVerifierUtil", "org.spongycastle.pqc.crypto.xmss", ptrTable, methods, NULL, 7, 0x0, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil;
}

@end

void OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil_init(OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil *self) {
  NSObject_init(self);
}

OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil *new_OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil, init)
}

OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil *create_OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil, init)
}

OrgSpongycastlePqcCryptoXmssXMSSNode *OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil_getRootNodeFromSignatureWithOrgSpongycastlePqcCryptoXmssWOTSPlus_withInt_withByteArray_withOrgSpongycastlePqcCryptoXmssXMSSReducedSignature_withOrgSpongycastlePqcCryptoXmssOTSHashAddress_withInt_(OrgSpongycastlePqcCryptoXmssWOTSPlus *wotsPlus, jint height, IOSByteArray *messageDigest, OrgSpongycastlePqcCryptoXmssXMSSReducedSignature *signature, OrgSpongycastlePqcCryptoXmssOTSHashAddress *otsHashAddress, jint indexLeaf) {
  OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil_initialize();
  if (((IOSByteArray *) nil_chk(messageDigest))->size_ != [((OrgSpongycastlePqcCryptoXmssWOTSPlusParameters *) nil_chk([((OrgSpongycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus)) getParams])) getDigestSize]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (signature == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"signature == null");
  }
  if (otsHashAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  OrgSpongycastlePqcCryptoXmssLTreeAddress *lTreeAddress = (OrgSpongycastlePqcCryptoXmssLTreeAddress *) cast_chk([((OrgSpongycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssLTreeAddress_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssLTreeAddress_Builder_init() withLayerAddressWithInt:[otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withLTreeAddressWithInt:[otsHashAddress getOTSAddress]])) build], [OrgSpongycastlePqcCryptoXmssLTreeAddress class]);
  OrgSpongycastlePqcCryptoXmssHashTreeAddress *hashTreeAddress = (OrgSpongycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[otsHashAddress getLayerAddress]])) withTreeAddressWithLong:[otsHashAddress getTreeAddress]])) withTreeIndexWithInt:[otsHashAddress getOTSAddress]])) build], [OrgSpongycastlePqcCryptoXmssHashTreeAddress class]);
  OrgSpongycastlePqcCryptoXmssWOTSPlusPublicKeyParameters *wotsPlusPK = [wotsPlus getPublicKeyFromSignatureWithByteArray:messageDigest withOrgSpongycastlePqcCryptoXmssWOTSPlusSignature:[signature getWOTSPlusSignature] withOrgSpongycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
  IOSObjectArray *node = [IOSObjectArray newArrayWithLength:2 type:OrgSpongycastlePqcCryptoXmssXMSSNode_class_()];
  (void) IOSObjectArray_Set(node, 0, OrgSpongycastlePqcCryptoXmssXMSSNodeUtil_lTreeWithOrgSpongycastlePqcCryptoXmssWOTSPlus_withOrgSpongycastlePqcCryptoXmssWOTSPlusPublicKeyParameters_withOrgSpongycastlePqcCryptoXmssLTreeAddress_(wotsPlus, wotsPlusPK, lTreeAddress));
  for (jint k = 0; k < height; k++) {
    hashTreeAddress = (OrgSpongycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[((OrgSpongycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:k])) withTreeIndexWithInt:[hashTreeAddress getTreeIndex]])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [OrgSpongycastlePqcCryptoXmssHashTreeAddress class]);
    if (fmod(JavaLangMath_floorWithDouble_(indexLeaf / (JreLShift32(1, k))), 2) == 0) {
      hashTreeAddress = (OrgSpongycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[((OrgSpongycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:[hashTreeAddress getTreeHeight]])) withTreeIndexWithInt:[hashTreeAddress getTreeIndex] / 2])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [OrgSpongycastlePqcCryptoXmssHashTreeAddress class]);
      (void) IOSObjectArray_Set(node, 1, OrgSpongycastlePqcCryptoXmssXMSSNodeUtil_randomizeHashWithOrgSpongycastlePqcCryptoXmssWOTSPlus_withOrgSpongycastlePqcCryptoXmssXMSSNode_withOrgSpongycastlePqcCryptoXmssXMSSNode_withOrgSpongycastlePqcCryptoXmssXMSSAddress_(wotsPlus, IOSObjectArray_Get(node, 0), [((id<JavaUtilList>) nil_chk([signature getAuthPath])) getWithInt:k], hashTreeAddress));
      (void) IOSObjectArray_SetAndConsume(node, 1, new_OrgSpongycastlePqcCryptoXmssXMSSNode_initWithInt_withByteArray_([((OrgSpongycastlePqcCryptoXmssXMSSNode *) nil_chk(IOSObjectArray_Get(node, 1))) getHeight] + 1, [((OrgSpongycastlePqcCryptoXmssXMSSNode *) nil_chk(IOSObjectArray_Get(node, 1))) getValue]));
    }
    else {
      hashTreeAddress = (OrgSpongycastlePqcCryptoXmssHashTreeAddress *) cast_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssHashTreeAddress_Builder_init() withLayerAddressWithInt:[((OrgSpongycastlePqcCryptoXmssHashTreeAddress *) nil_chk(hashTreeAddress)) getLayerAddress]])) withTreeAddressWithLong:[hashTreeAddress getTreeAddress]])) withTreeHeightWithInt:[hashTreeAddress getTreeHeight]])) withTreeIndexWithInt:([hashTreeAddress getTreeIndex] - 1) / 2])) withKeyAndMaskWithInt:[hashTreeAddress getKeyAndMask]])) build], [OrgSpongycastlePqcCryptoXmssHashTreeAddress class]);
      (void) IOSObjectArray_Set(node, 1, OrgSpongycastlePqcCryptoXmssXMSSNodeUtil_randomizeHashWithOrgSpongycastlePqcCryptoXmssWOTSPlus_withOrgSpongycastlePqcCryptoXmssXMSSNode_withOrgSpongycastlePqcCryptoXmssXMSSNode_withOrgSpongycastlePqcCryptoXmssXMSSAddress_(wotsPlus, [((id<JavaUtilList>) nil_chk([signature getAuthPath])) getWithInt:k], IOSObjectArray_Get(node, 0), hashTreeAddress));
      (void) IOSObjectArray_SetAndConsume(node, 1, new_OrgSpongycastlePqcCryptoXmssXMSSNode_initWithInt_withByteArray_([((OrgSpongycastlePqcCryptoXmssXMSSNode *) nil_chk(IOSObjectArray_Get(node, 1))) getHeight] + 1, [((OrgSpongycastlePqcCryptoXmssXMSSNode *) nil_chk(IOSObjectArray_Get(node, 1))) getValue]));
    }
    (void) IOSObjectArray_Set(node, 0, IOSObjectArray_Get(node, 1));
  }
  return IOSObjectArray_Get(node, 0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoXmssXMSSVerifierUtil)
