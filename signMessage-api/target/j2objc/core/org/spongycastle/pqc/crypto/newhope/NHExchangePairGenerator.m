//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/newhope/NHExchangePairGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/pqc/crypto/ExchangePair.h"
#include "org/spongycastle/pqc/crypto/newhope/NHExchangePairGenerator.h"
#include "org/spongycastle/pqc/crypto/newhope/NHPublicKeyParameters.h"
#include "org/spongycastle/pqc/crypto/newhope/NewHope.h"

@interface OrgSpongycastlePqcCryptoNewhopeNHExchangePairGenerator () {
 @public
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoNewhopeNHExchangePairGenerator, random_, JavaSecuritySecureRandom *)

@implementation OrgSpongycastlePqcCryptoNewhopeNHExchangePairGenerator

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  OrgSpongycastlePqcCryptoNewhopeNHExchangePairGenerator_initWithJavaSecuritySecureRandom_(self, random);
  return self;
}

- (OrgSpongycastlePqcCryptoExchangePair *)GenerateExchangeWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter:(OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)senderPublicKey {
  return [self generateExchangeWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter:senderPublicKey];
}

- (OrgSpongycastlePqcCryptoExchangePair *)generateExchangeWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter:(OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)senderPublicKey {
  OrgSpongycastlePqcCryptoNewhopeNHPublicKeyParameters *pubKey = (OrgSpongycastlePqcCryptoNewhopeNHPublicKeyParameters *) cast_chk(senderPublicKey, [OrgSpongycastlePqcCryptoNewhopeNHPublicKeyParameters class]);
  IOSByteArray *sharedValue = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoNewhopeNewHope_AGREEMENT_SIZE];
  IOSByteArray *publicKeyValue = [IOSByteArray newArrayWithLength:OrgSpongycastlePqcCryptoNewhopeNewHope_SENDB_BYTES];
  OrgSpongycastlePqcCryptoNewhopeNewHope_sharedBWithJavaSecuritySecureRandom_withByteArray_withByteArray_withByteArray_(random_, sharedValue, publicKeyValue, ((OrgSpongycastlePqcCryptoNewhopeNHPublicKeyParameters *) nil_chk(pubKey))->pubData_);
  return new_OrgSpongycastlePqcCryptoExchangePair_initWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter_withByteArray_(new_OrgSpongycastlePqcCryptoNewhopeNHPublicKeyParameters_initWithByteArray_(publicKeyValue), sharedValue);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcCryptoExchangePair;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcCryptoExchangePair;", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecuritySecureRandom:);
  methods[1].selector = @selector(GenerateExchangeWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter:);
  methods[2].selector = @selector(generateExchangeWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecuritySecureRandom;", "GenerateExchange", "LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", "generateExchange" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoNewhopeNHExchangePairGenerator = { "NHExchangePairGenerator", "org.spongycastle.pqc.crypto.newhope", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoNewhopeNHExchangePairGenerator;
}

@end

void OrgSpongycastlePqcCryptoNewhopeNHExchangePairGenerator_initWithJavaSecuritySecureRandom_(OrgSpongycastlePqcCryptoNewhopeNHExchangePairGenerator *self, JavaSecuritySecureRandom *random) {
  NSObject_init(self);
  self->random_ = random;
}

OrgSpongycastlePqcCryptoNewhopeNHExchangePairGenerator *new_OrgSpongycastlePqcCryptoNewhopeNHExchangePairGenerator_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *random) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoNewhopeNHExchangePairGenerator, initWithJavaSecuritySecureRandom_, random)
}

OrgSpongycastlePqcCryptoNewhopeNHExchangePairGenerator *create_OrgSpongycastlePqcCryptoNewhopeNHExchangePairGenerator_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *random) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoNewhopeNHExchangePairGenerator, initWithJavaSecuritySecureRandom_, random)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoNewhopeNHExchangePairGenerator)
