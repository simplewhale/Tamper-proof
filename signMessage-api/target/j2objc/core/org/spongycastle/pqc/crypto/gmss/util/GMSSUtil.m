//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/gmss/util/GMSSUtil.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "org/spongycastle/pqc/crypto/gmss/util/GMSSUtil.h"

@implementation OrgSpongycastlePqcCryptoGmssUtilGMSSUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcCryptoGmssUtilGMSSUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)intToBytesLittleEndianWithInt:(jint)value {
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:4];
  *IOSByteArray_GetRef(bytes, 0) = (jbyte) ((value) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 1) = (jbyte) ((JreRShift32(value, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 2) = (jbyte) ((JreRShift32(value, 16)) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 3) = (jbyte) ((JreRShift32(value, 24)) & (jint) 0xff);
  return bytes;
}

- (jint)bytesToIntLittleEndianWithByteArray:(IOSByteArray *)bytes {
  return ((IOSByteArray_Get(nil_chk(bytes), 0) & (jint) 0xff)) | (JreLShift32((IOSByteArray_Get(bytes, 1) & (jint) 0xff), 8)) | (JreLShift32((IOSByteArray_Get(bytes, 2) & (jint) 0xff), 16)) | (JreLShift32(((IOSByteArray_Get(bytes, 3) & (jint) 0xff)), 24));
}

- (jint)bytesToIntLittleEndianWithByteArray:(IOSByteArray *)bytes
                                    withInt:(jint)offset {
  jint unseq$1 = offset++;
  jint unseq$2 = offset++;
  jint unseq$3 = offset++;
  return ((IOSByteArray_Get(nil_chk(bytes), unseq$1) & (jint) 0xff)) | (JreLShift32((IOSByteArray_Get(bytes, unseq$2) & (jint) 0xff), 8)) | (JreLShift32((IOSByteArray_Get(bytes, unseq$3) & (jint) 0xff), 16)) | (JreLShift32(((IOSByteArray_Get(bytes, offset) & (jint) 0xff)), 24));
}

- (IOSByteArray *)concatenateArrayWithByteArray2:(IOSObjectArray *)arraycp {
  IOSByteArray *dest = [IOSByteArray newArrayWithLength:((IOSObjectArray *) nil_chk(arraycp))->size_ * ((IOSByteArray *) nil_chk(IOSObjectArray_Get(arraycp, 0)))->size_];
  jint indx = 0;
  for (jint i = 0; i < arraycp->size_; i++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(arraycp, i), 0, dest, indx, ((IOSByteArray *) nil_chk(IOSObjectArray_Get(arraycp, i)))->size_);
    indx = indx + ((IOSByteArray *) nil_chk(IOSObjectArray_Get(arraycp, i)))->size_;
  }
  return dest;
}

- (void)printArrayWithNSString:(NSString *)text
                withByteArray2:(IOSObjectArray *)array {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:text];
  jint counter = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(array))->size_; i++) {
    for (jint j = 0; j < ((IOSByteArray *) nil_chk(IOSObjectArray_Get(array, 0)))->size_; j++) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("I$B", counter, @"; ", IOSByteArray_Get(nil_chk(IOSObjectArray_Get(array, i)), j))];
      counter++;
    }
  }
}

- (void)printArrayWithNSString:(NSString *)text
                 withByteArray:(IOSByteArray *)array {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:text];
  jint counter = 0;
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(array))->size_; i++) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("I$B", counter, @"; ", IOSByteArray_Get(array, i))];
    counter++;
  }
}

- (jboolean)testPowerOfTwoWithInt:(jint)testValue {
  jint a = 1;
  while (a < testValue) {
    JreLShiftAssignInt(&a, 1);
  }
  if (testValue == a) {
    return true;
  }
  return false;
}

- (jint)getLogWithInt:(jint)intValue {
  jint log = 1;
  jint i = 2;
  while (i < intValue) {
    JreLShiftAssignInt(&i, 1);
    log++;
  }
  return log;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(intToBytesLittleEndianWithInt:);
  methods[2].selector = @selector(bytesToIntLittleEndianWithByteArray:);
  methods[3].selector = @selector(bytesToIntLittleEndianWithByteArray:withInt:);
  methods[4].selector = @selector(concatenateArrayWithByteArray2:);
  methods[5].selector = @selector(printArrayWithNSString:withByteArray2:);
  methods[6].selector = @selector(printArrayWithNSString:withByteArray:);
  methods[7].selector = @selector(testPowerOfTwoWithInt:);
  methods[8].selector = @selector(getLogWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "intToBytesLittleEndian", "I", "bytesToIntLittleEndian", "[B", "[BI", "concatenateArray", "[[B", "printArray", "LNSString;[[B", "LNSString;[B", "testPowerOfTwo", "getLog" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoGmssUtilGMSSUtil = { "GMSSUtil", "org.spongycastle.pqc.crypto.gmss.util", ptrTable, methods, NULL, 7, 0x1, 9, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoGmssUtilGMSSUtil;
}

@end

void OrgSpongycastlePqcCryptoGmssUtilGMSSUtil_init(OrgSpongycastlePqcCryptoGmssUtilGMSSUtil *self) {
  NSObject_init(self);
}

OrgSpongycastlePqcCryptoGmssUtilGMSSUtil *new_OrgSpongycastlePqcCryptoGmssUtilGMSSUtil_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoGmssUtilGMSSUtil, init)
}

OrgSpongycastlePqcCryptoGmssUtilGMSSUtil *create_OrgSpongycastlePqcCryptoGmssUtilGMSSUtil_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoGmssUtilGMSSUtil, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoGmssUtilGMSSUtil)
