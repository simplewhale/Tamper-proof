//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/gmss/util/WinternitzOTSVerify.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/pqc/crypto/gmss/util/WinternitzOTSVerify.h"

@interface OrgSpongycastlePqcCryptoGmssUtilWinternitzOTSVerify () {
 @public
  id<OrgSpongycastleCryptoDigest> messDigestOTS_;
  jint w_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoGmssUtilWinternitzOTSVerify, messDigestOTS_, id<OrgSpongycastleCryptoDigest>)

@implementation OrgSpongycastlePqcCryptoGmssUtilWinternitzOTSVerify

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                            withInt:(jint)w {
  OrgSpongycastlePqcCryptoGmssUtilWinternitzOTSVerify_initWithOrgSpongycastleCryptoDigest_withInt_(self, digest, w);
  return self;
}

- (jint)getSignatureLength {
  jint mdsize = [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) getDigestSize];
  jint size = ((JreLShift32(mdsize, 3)) + (w_ - 1)) / w_;
  jint logs = [self getLogWithInt:(JreLShift32(size, w_)) + 1];
  size += (logs + w_ - 1) / w_;
  return mdsize * size;
}

- (IOSByteArray *)VerifyWithByteArray:(IOSByteArray *)message
                        withByteArray:(IOSByteArray *)signature {
  jint mdsize = [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) getDigestSize];
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:mdsize];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) updateWithByteArray:message withInt:0 withInt:((IOSByteArray *) nil_chk(message))->size_];
  hash_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) getDigestSize]];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) doFinalWithByteArray:hash_ withInt:0];
  jint size = ((JreLShift32(mdsize, 3)) + (w_ - 1)) / w_;
  jint logs = [self getLogWithInt:(JreLShift32(size, w_)) + 1];
  jint keysize = size + (logs + w_ - 1) / w_;
  jint testKeySize = mdsize * keysize;
  if (testKeySize != ((IOSByteArray *) nil_chk(signature))->size_) {
    return nil;
  }
  IOSByteArray *testKey = [IOSByteArray newArrayWithLength:testKeySize];
  jint c = 0;
  jint counter = 0;
  jint test;
  if (8 % w_ == 0) {
    jint d = 8 / w_;
    jint k = (JreLShift32(1, w_)) - 1;
    IOSByteArray *hlp = [IOSByteArray newArrayWithLength:mdsize];
    for (jint i = 0; i < hash_->size_; i++) {
      for (jint j = 0; j < d; j++) {
        test = IOSByteArray_Get(hash_, i) & k;
        c += test;
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(signature, counter * mdsize, hlp, 0, mdsize);
        while (test < k) {
          [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) updateWithByteArray:hlp withInt:0 withInt:hlp->size_];
          hlp = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) getDigestSize]];
          [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) doFinalWithByteArray:hlp withInt:0];
          test++;
        }
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hlp, 0, testKey, counter * mdsize, mdsize);
        *IOSByteArray_GetRef(hash_, i) = (jbyte) (JreURShift32(IOSByteArray_Get(hash_, i), w_));
        counter++;
      }
    }
    c = (JreLShift32(size, w_)) - c;
    for (jint i = 0; i < logs; i += w_) {
      test = c & k;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(signature, counter * mdsize, hlp, 0, mdsize);
      while (test < k) {
        [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) updateWithByteArray:hlp withInt:0 withInt:hlp->size_];
        hlp = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) getDigestSize]];
        [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) doFinalWithByteArray:hlp withInt:0];
        test++;
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hlp, 0, testKey, counter * mdsize, mdsize);
      JreURShiftAssignInt(&c, w_);
      counter++;
    }
  }
  else if (w_ < 8) {
    jint d = mdsize / w_;
    jint k = (JreLShift32(1, w_)) - 1;
    IOSByteArray *hlp = [IOSByteArray newArrayWithLength:mdsize];
    jlong big8;
    jint ii = 0;
    for (jint i = 0; i < d; i++) {
      big8 = 0;
      for (jint j = 0; j < w_; j++) {
        big8 ^= JreLShift32((IOSByteArray_Get(hash_, ii) & (jint) 0xff), (JreLShift32(j, 3)));
        ii++;
      }
      for (jint j = 0; j < 8; j++) {
        test = (jint) (big8 & k);
        c += test;
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(signature, counter * mdsize, hlp, 0, mdsize);
        while (test < k) {
          [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) updateWithByteArray:hlp withInt:0 withInt:hlp->size_];
          hlp = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) getDigestSize]];
          [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) doFinalWithByteArray:hlp withInt:0];
          test++;
        }
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hlp, 0, testKey, counter * mdsize, mdsize);
        JreURShiftAssignLong(&big8, w_);
        counter++;
      }
    }
    d = mdsize % w_;
    big8 = 0;
    for (jint j = 0; j < d; j++) {
      big8 ^= JreLShift32((IOSByteArray_Get(hash_, ii) & (jint) 0xff), (JreLShift32(j, 3)));
      ii++;
    }
    JreLShiftAssignInt(&d, 3);
    for (jint j = 0; j < d; j += w_) {
      test = (jint) (big8 & k);
      c += test;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(signature, counter * mdsize, hlp, 0, mdsize);
      while (test < k) {
        [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) updateWithByteArray:hlp withInt:0 withInt:hlp->size_];
        hlp = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) getDigestSize]];
        [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) doFinalWithByteArray:hlp withInt:0];
        test++;
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hlp, 0, testKey, counter * mdsize, mdsize);
      JreURShiftAssignLong(&big8, w_);
      counter++;
    }
    c = (JreLShift32(size, w_)) - c;
    for (jint i = 0; i < logs; i += w_) {
      test = c & k;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(signature, counter * mdsize, hlp, 0, mdsize);
      while (test < k) {
        [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) updateWithByteArray:hlp withInt:0 withInt:hlp->size_];
        hlp = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) getDigestSize]];
        [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) doFinalWithByteArray:hlp withInt:0];
        test++;
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hlp, 0, testKey, counter * mdsize, mdsize);
      JreURShiftAssignInt(&c, w_);
      counter++;
    }
  }
  else if (w_ < 57) {
    jint d = (JreLShift32(mdsize, 3)) - w_;
    jint k = (JreLShift32(1, w_)) - 1;
    IOSByteArray *hlp = [IOSByteArray newArrayWithLength:mdsize];
    jlong big8;
    jlong test8;
    jint r = 0;
    jint s;
    jint f;
    jint rest;
    jint ii;
    while (r <= d) {
      s = JreURShift32(r, 3);
      rest = r % 8;
      r += w_;
      f = JreURShift32((r + 7), 3);
      big8 = 0;
      ii = 0;
      for (jint j = s; j < f; j++) {
        big8 ^= JreLShift32((IOSByteArray_Get(hash_, j) & (jint) 0xff), (JreLShift32(ii, 3)));
        ii++;
      }
      JreURShiftAssignLong(&big8, rest);
      test8 = (big8 & k);
      c += test8;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(signature, counter * mdsize, hlp, 0, mdsize);
      while (test8 < k) {
        [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) updateWithByteArray:hlp withInt:0 withInt:hlp->size_];
        hlp = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) getDigestSize]];
        [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) doFinalWithByteArray:hlp withInt:0];
        test8++;
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hlp, 0, testKey, counter * mdsize, mdsize);
      counter++;
    }
    s = JreURShift32(r, 3);
    if (s < mdsize) {
      rest = r % 8;
      big8 = 0;
      ii = 0;
      for (jint j = s; j < mdsize; j++) {
        big8 ^= JreLShift32((IOSByteArray_Get(hash_, j) & (jint) 0xff), (JreLShift32(ii, 3)));
        ii++;
      }
      JreURShiftAssignLong(&big8, rest);
      test8 = (big8 & k);
      c += test8;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(signature, counter * mdsize, hlp, 0, mdsize);
      while (test8 < k) {
        [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) updateWithByteArray:hlp withInt:0 withInt:hlp->size_];
        hlp = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) getDigestSize]];
        [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) doFinalWithByteArray:hlp withInt:0];
        test8++;
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hlp, 0, testKey, counter * mdsize, mdsize);
      counter++;
    }
    c = (JreLShift32(size, w_)) - c;
    for (jint i = 0; i < logs; i += w_) {
      test8 = (c & k);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(signature, counter * mdsize, hlp, 0, mdsize);
      while (test8 < k) {
        [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) updateWithByteArray:hlp withInt:0 withInt:hlp->size_];
        hlp = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) getDigestSize]];
        [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) doFinalWithByteArray:hlp withInt:0];
        test8++;
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hlp, 0, testKey, counter * mdsize, mdsize);
      JreURShiftAssignInt(&c, w_);
      counter++;
    }
  }
  IOSByteArray *TKey = [IOSByteArray newArrayWithLength:mdsize];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) updateWithByteArray:testKey withInt:0 withInt:testKey->size_];
  TKey = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) getDigestSize]];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) doFinalWithByteArray:TKey withInt:0];
  return TKey;
}

- (jint)getLogWithInt:(jint)intValue {
  jint log = 1;
  jint i = 2;
  while (i < intValue) {
    JreLShiftAssignInt(&i, 1);
    log++;
  }
  return log;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoDigest:withInt:);
  methods[1].selector = @selector(getSignatureLength);
  methods[2].selector = @selector(VerifyWithByteArray:withByteArray:);
  methods[3].selector = @selector(getLogWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "messDigestOTS_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "w_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDigest;I", "Verify", "[B[B", "getLog", "I" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoGmssUtilWinternitzOTSVerify = { "WinternitzOTSVerify", "org.spongycastle.pqc.crypto.gmss.util", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoGmssUtilWinternitzOTSVerify;
}

@end

void OrgSpongycastlePqcCryptoGmssUtilWinternitzOTSVerify_initWithOrgSpongycastleCryptoDigest_withInt_(OrgSpongycastlePqcCryptoGmssUtilWinternitzOTSVerify *self, id<OrgSpongycastleCryptoDigest> digest, jint w) {
  NSObject_init(self);
  self->w_ = w;
  self->messDigestOTS_ = digest;
}

OrgSpongycastlePqcCryptoGmssUtilWinternitzOTSVerify *new_OrgSpongycastlePqcCryptoGmssUtilWinternitzOTSVerify_initWithOrgSpongycastleCryptoDigest_withInt_(id<OrgSpongycastleCryptoDigest> digest, jint w) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoGmssUtilWinternitzOTSVerify, initWithOrgSpongycastleCryptoDigest_withInt_, digest, w)
}

OrgSpongycastlePqcCryptoGmssUtilWinternitzOTSVerify *create_OrgSpongycastlePqcCryptoGmssUtilWinternitzOTSVerify_initWithOrgSpongycastleCryptoDigest_withInt_(id<OrgSpongycastleCryptoDigest> digest, jint w) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoGmssUtilWinternitzOTSVerify, initWithOrgSpongycastleCryptoDigest_withInt_, digest, w)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoGmssUtilWinternitzOTSVerify)
