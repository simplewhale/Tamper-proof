//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/mceliece/McEliecePointchevalCipher.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/InvalidCipherTextException.h"
#include "org/spongycastle/crypto/digests/SHA1Digest.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/crypto/prng/DigestRandomGenerator.h"
#include "org/spongycastle/pqc/crypto/mceliece/Conversions.h"
#include "org/spongycastle/pqc/crypto/mceliece/McElieceCCA2KeyParameters.h"
#include "org/spongycastle/pqc/crypto/mceliece/McElieceCCA2Primitives.h"
#include "org/spongycastle/pqc/crypto/mceliece/McElieceCCA2PrivateKeyParameters.h"
#include "org/spongycastle/pqc/crypto/mceliece/McElieceCCA2PublicKeyParameters.h"
#include "org/spongycastle/pqc/crypto/mceliece/McEliecePointchevalCipher.h"
#include "org/spongycastle/pqc/crypto/mceliece/Utils.h"
#include "org/spongycastle/pqc/math/linearalgebra/ByteUtils.h"
#include "org/spongycastle/pqc/math/linearalgebra/GF2Vector.h"

@interface OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher () {
 @public
  id<OrgSpongycastleCryptoDigest> messDigest_;
  JavaSecuritySecureRandom *sr_;
  jint n_;
  jint k_;
  jint t_;
  jboolean forEncryption_;
}

- (void)initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:(OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *)pubKey OBJC_METHOD_FAMILY_NONE;

- (void)initCipherDecryptWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:(OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *)privKey OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher, messDigest_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher, sr_, JavaSecuritySecureRandom *)

__attribute__((unused)) static void OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher *self, OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *pubKey);

__attribute__((unused)) static void OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherDecryptWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher *self, OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *privKey);

NSString *OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher_OID = @"1.3.6.1.4.1.8301.3.1.3.4.2.2";

@implementation OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  self->forEncryption_ = forEncryption;
  if (forEncryption) {
    if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
      OrgSpongycastleCryptoParamsParametersWithRandom *rParam = (OrgSpongycastleCryptoParamsParametersWithRandom *) param;
      self->sr_ = [((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      self->key_ = (OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk([rParam getParameters], [OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]);
      OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, (OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]));
    }
    else {
      self->sr_ = new_JavaSecuritySecureRandom_init();
      self->key_ = (OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(param, [OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]);
      OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, (OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]));
    }
  }
  else {
    self->key_ = (OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(param, [OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]);
    OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherDecryptWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(self, (OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(key_, [OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]));
  }
}

- (jint)getKeySizeWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters:(OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters *)key {
  if ([key isKindOfClass:[OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]]) {
    return [((OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) nil_chk(((OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) key))) getN];
  }
  if ([key isKindOfClass:[OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]]) {
    return [((OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) nil_chk(((OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) key))) getN];
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported type");
}

- (jint)decryptOutputSizeWithInt:(jint)inLen {
  return 0;
}

- (jint)encryptOutputSizeWithInt:(jint)inLen {
  return 0;
}

- (void)initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:(OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *)pubKey {
  OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(self, pubKey);
}

- (void)initCipherDecryptWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:(OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *)privKey {
  OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherDecryptWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(self, privKey);
}

- (IOSByteArray *)messageEncryptWithByteArray:(IOSByteArray *)input {
  if (!forEncryption_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  jint kDiv8 = JreRShift32(k_, 3);
  IOSByteArray *r = [IOSByteArray newArrayWithLength:kDiv8];
  [((JavaSecuritySecureRandom *) nil_chk(sr_)) nextBytesWithByteArray:r];
  OrgSpongycastlePqcMathLinearalgebraGF2Vector *rPrime = new_OrgSpongycastlePqcMathLinearalgebraGF2Vector_initWithInt_withJavaSecuritySecureRandom_(k_, sr_);
  IOSByteArray *rPrimeBytes = [rPrime getEncoded];
  IOSByteArray *mr = OrgSpongycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(input, r);
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigest_)) updateWithByteArray:mr withInt:0 withInt:((IOSByteArray *) nil_chk(mr))->size_];
  IOSByteArray *hmr = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize]];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigest_)) doFinalWithByteArray:hmr withInt:0];
  OrgSpongycastlePqcMathLinearalgebraGF2Vector *z = OrgSpongycastlePqcCryptoMcelieceConversions_encodeWithInt_withInt_withByteArray_(n_, t_, hmr);
  IOSByteArray *c1 = [((OrgSpongycastlePqcMathLinearalgebraGF2Vector *) nil_chk(OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2Primitives_encryptionPrimitiveWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_withOrgSpongycastlePqcMathLinearalgebraGF2Vector_withOrgSpongycastlePqcMathLinearalgebraGF2Vector_((OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) cast_chk(key_, [OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters class]), rPrime, z))) getEncoded];
  OrgSpongycastleCryptoPrngDigestRandomGenerator *sr0 = new_OrgSpongycastleCryptoPrngDigestRandomGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsSHA1Digest_init());
  [sr0 addSeedMaterialWithByteArray:rPrimeBytes];
  IOSByteArray *c2 = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(input))->size_ + kDiv8];
  [sr0 nextBytesWithByteArray:c2];
  for (jint i = 0; i < input->size_; i++) {
    *IOSByteArray_GetRef(c2, i) ^= IOSByteArray_Get(input, i);
  }
  for (jint i = 0; i < kDiv8; i++) {
    *IOSByteArray_GetRef(c2, input->size_ + i) ^= IOSByteArray_Get(r, i);
  }
  return OrgSpongycastlePqcMathLinearalgebraByteUtils_concatenateWithByteArray_withByteArray_(c1, c2);
}

- (IOSByteArray *)messageDecryptWithByteArray:(IOSByteArray *)input {
  if (forEncryption_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cipher initialised for decryption");
  }
  jint c1Len = JreRShift32((n_ + 7), 3);
  jint c2Len = ((IOSByteArray *) nil_chk(input))->size_ - c1Len;
  IOSObjectArray *c1c2 = OrgSpongycastlePqcMathLinearalgebraByteUtils_splitWithByteArray_withInt_(input, c1Len);
  IOSByteArray *c1 = IOSObjectArray_Get(nil_chk(c1c2), 0);
  IOSByteArray *c2 = IOSObjectArray_Get(c1c2, 1);
  OrgSpongycastlePqcMathLinearalgebraGF2Vector *c1Vec = OrgSpongycastlePqcMathLinearalgebraGF2Vector_OS2VPWithInt_withByteArray_(n_, c1);
  IOSObjectArray *c1Dec = OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2Primitives_decryptionPrimitiveWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_withOrgSpongycastlePqcMathLinearalgebraGF2Vector_((OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) cast_chk(key_, [OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters class]), c1Vec);
  IOSByteArray *rPrimeBytes = [((OrgSpongycastlePqcMathLinearalgebraGF2Vector *) nil_chk(IOSObjectArray_Get(nil_chk(c1Dec), 0))) getEncoded];
  OrgSpongycastlePqcMathLinearalgebraGF2Vector *z = IOSObjectArray_Get(c1Dec, 1);
  OrgSpongycastleCryptoPrngDigestRandomGenerator *sr0 = new_OrgSpongycastleCryptoPrngDigestRandomGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsSHA1Digest_init());
  [sr0 addSeedMaterialWithByteArray:rPrimeBytes];
  IOSByteArray *mrBytes = [IOSByteArray newArrayWithLength:c2Len];
  [sr0 nextBytesWithByteArray:mrBytes];
  for (jint i = 0; i < c2Len; i++) {
    *IOSByteArray_GetRef(mrBytes, i) ^= IOSByteArray_Get(nil_chk(c2), i);
  }
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigest_)) updateWithByteArray:mrBytes withInt:0 withInt:mrBytes->size_];
  IOSByteArray *hmr = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigest_)) getDigestSize]];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigest_)) doFinalWithByteArray:hmr withInt:0];
  c1Vec = OrgSpongycastlePqcCryptoMcelieceConversions_encodeWithInt_withInt_withByteArray_(n_, t_, hmr);
  if (![((OrgSpongycastlePqcMathLinearalgebraGF2Vector *) nil_chk(c1Vec)) isEqual:z]) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"Bad Padding: Invalid ciphertext.");
  }
  jint kDiv8 = JreRShift32(k_, 3);
  IOSObjectArray *mr = OrgSpongycastlePqcMathLinearalgebraByteUtils_splitWithByteArray_withInt_(mrBytes, c2Len - kDiv8);
  return IOSObjectArray_Get(nil_chk(mr), 0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "I", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 14, 13, 15, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getKeySizeWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters:);
  methods[3].selector = @selector(decryptOutputSizeWithInt:);
  methods[4].selector = @selector(encryptOutputSizeWithInt:);
  methods[5].selector = @selector(initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters:);
  methods[6].selector = @selector(initCipherDecryptWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters:);
  methods[7].selector = @selector(messageEncryptWithByteArray:);
  methods[8].selector = @selector(messageDecryptWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "messDigest_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sr_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "t_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "LOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;", "getKeySize", "LOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2KeyParameters;", "LJavaLangIllegalArgumentException;", "decryptOutputSize", "I", "encryptOutputSize", "initCipherEncrypt", "LOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters;", "initCipherDecrypt", "LOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters;", "messageEncrypt", "[B", "messageDecrypt", "LOrgSpongycastleCryptoInvalidCipherTextException;", &OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher_OID };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher = { "McEliecePointchevalCipher", "org.spongycastle.pqc.crypto.mceliece", ptrTable, methods, fields, 7, 0x1, 9, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher;
}

@end

void OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher_init(OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher *self) {
  NSObject_init(self);
}

OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher *new_OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher, init)
}

OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher *create_OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher, init)
}

void OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherEncryptWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters_(OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher *self, OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *pubKey) {
  self->sr_ = self->sr_ != nil ? self->sr_ : new_JavaSecuritySecureRandom_init();
  self->messDigest_ = OrgSpongycastlePqcCryptoMcelieceUtils_getDigestWithNSString_([((OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PublicKeyParameters *) nil_chk(pubKey)) getDigest]);
  self->n_ = [pubKey getN];
  self->k_ = [pubKey getK];
  self->t_ = [pubKey getT];
}

void OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher_initCipherDecryptWithOrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters_(OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher *self, OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *privKey) {
  self->messDigest_ = OrgSpongycastlePqcCryptoMcelieceUtils_getDigestWithNSString_([((OrgSpongycastlePqcCryptoMcelieceMcElieceCCA2PrivateKeyParameters *) nil_chk(privKey)) getDigest]);
  self->n_ = [privKey getN];
  self->k_ = [privKey getK];
  self->t_ = [privKey getT];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoMcelieceMcEliecePointchevalCipher)
