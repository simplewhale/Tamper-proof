//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/mceliece/Utils.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/digests/SHA1Digest.h"
#include "org/spongycastle/crypto/digests/SHA224Digest.h"
#include "org/spongycastle/crypto/digests/SHA256Digest.h"
#include "org/spongycastle/crypto/digests/SHA384Digest.h"
#include "org/spongycastle/crypto/digests/SHA512Digest.h"
#include "org/spongycastle/pqc/crypto/mceliece/Utils.h"

@implementation OrgSpongycastlePqcCryptoMcelieceUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcCryptoMcelieceUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<OrgSpongycastleCryptoDigest>)getDigestWithNSString:(NSString *)digestName {
  return OrgSpongycastlePqcCryptoMcelieceUtils_getDigestWithNSString_(digestName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoDigest;", 0x8, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDigestWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getDigest", "LNSString;" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoMcelieceUtils = { "Utils", "org.spongycastle.pqc.crypto.mceliece", ptrTable, methods, NULL, 7, 0x0, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoMcelieceUtils;
}

@end

void OrgSpongycastlePqcCryptoMcelieceUtils_init(OrgSpongycastlePqcCryptoMcelieceUtils *self) {
  NSObject_init(self);
}

OrgSpongycastlePqcCryptoMcelieceUtils *new_OrgSpongycastlePqcCryptoMcelieceUtils_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoMcelieceUtils, init)
}

OrgSpongycastlePqcCryptoMcelieceUtils *create_OrgSpongycastlePqcCryptoMcelieceUtils_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoMcelieceUtils, init)
}

id<OrgSpongycastleCryptoDigest> OrgSpongycastlePqcCryptoMcelieceUtils_getDigestWithNSString_(NSString *digestName) {
  OrgSpongycastlePqcCryptoMcelieceUtils_initialize();
  if ([((NSString *) nil_chk(digestName)) isEqual:@"SHA-1"]) {
    return new_OrgSpongycastleCryptoDigestsSHA1Digest_init();
  }
  if ([digestName isEqual:@"SHA-224"]) {
    return new_OrgSpongycastleCryptoDigestsSHA224Digest_init();
  }
  if ([digestName isEqual:@"SHA-256"]) {
    return new_OrgSpongycastleCryptoDigestsSHA256Digest_init();
  }
  if ([digestName isEqual:@"SHA-384"]) {
    return new_OrgSpongycastleCryptoDigestsSHA384Digest_init();
  }
  if ([digestName isEqual:@"SHA-512"]) {
    return new_OrgSpongycastleCryptoDigestsSHA512Digest_init();
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unrecognised digest algorithm: ", digestName));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoMcelieceUtils)
