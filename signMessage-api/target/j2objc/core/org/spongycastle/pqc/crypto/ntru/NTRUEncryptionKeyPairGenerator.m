//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/ntru/NTRUEncryptionKeyPairGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/spongycastle/crypto/KeyGenerationParameters.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUEncryptionKeyGenerationParameters.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUEncryptionKeyPairGenerator.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUEncryptionParameters.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUEncryptionPrivateKeyParameters.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUEncryptionPublicKeyParameters.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUParameters.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/Polynomial.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/ProductFormPolynomial.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/TernaryPolynomial.h"
#include "org/spongycastle/pqc/math/ntru/util/Util.h"

@interface OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator () {
 @public
  OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *params_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator, params_, OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *)

@implementation OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithOrgSpongycastleCryptoKeyGenerationParameters:(OrgSpongycastleCryptoKeyGenerationParameters *)param {
  self->params_ = (OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *) cast_chk(param, [OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters class]);
}

- (OrgSpongycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  jint N = ((OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *) nil_chk(params_))->N_;
  jint q = params_->q_;
  jint df = params_->df_;
  jint df1 = params_->df1_;
  jint df2 = params_->df2_;
  jint df3 = params_->df3_;
  jint dg = params_->dg_;
  jboolean fastFp = params_->fastFp_;
  jboolean sparse = params_->sparse_;
  id<OrgSpongycastlePqcMathNtruPolynomialPolynomial> t;
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *fq;
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *fp = nil;
  while (true) {
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *f;
    if (fastFp) {
      t = ((OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *) nil_chk(params_))->polyType_ == OrgSpongycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_SIMPLE ? OrgSpongycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withBoolean_withJavaSecuritySecureRandom_(N, df, df, sparse, [params_ getRandom]) : (id) OrgSpongycastlePqcMathNtruPolynomialProductFormPolynomial_generateRandomWithInt_withInt_withInt_withInt_withInt_withJavaSecuritySecureRandom_(N, df1, df2, df3, df3, [params_ getRandom]);
      f = [t toIntegerPolynomial];
      [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(f)) multWithInt:3];
      *IOSIntArray_GetRef(nil_chk(f->coeffs_), 0) += 1;
    }
    else {
      t = ((OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *) nil_chk(params_))->polyType_ == OrgSpongycastlePqcCryptoNtruNTRUParameters_TERNARY_POLYNOMIAL_TYPE_SIMPLE ? OrgSpongycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withBoolean_withJavaSecuritySecureRandom_(N, df, df - 1, sparse, [params_ getRandom]) : (id) OrgSpongycastlePqcMathNtruPolynomialProductFormPolynomial_generateRandomWithInt_withInt_withInt_withInt_withInt_withJavaSecuritySecureRandom_(N, df1, df2, df3, df3 - 1, [params_ getRandom]);
      f = [t toIntegerPolynomial];
      fp = [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(f)) invertF3];
      if (fp == nil) {
        continue;
      }
    }
    fq = [f invertFqWithInt:q];
    if (fq == nil) {
      continue;
    }
    break;
  }
  if (fastFp) {
    fp = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N);
    *IOSIntArray_GetRef(nil_chk(fp->coeffs_), 0) = 1;
  }
  OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *g;
  while (true) {
    g = OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(N, dg, dg - 1, [((OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *) nil_chk(params_)) getRandom]);
    if ([((OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *) nil_chk(g)) invertFqWithInt:q] != nil) {
      break;
    }
  }
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *h = [((OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *) nil_chk(g)) multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:fq withInt:q];
  [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(h)) mult3WithInt:q];
  [h ensurePositiveWithInt:q];
  [g clear];
  [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(fq)) clear];
  OrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters *priv = new_OrgSpongycastlePqcCryptoNtruNTRUEncryptionPrivateKeyParameters_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withOrgSpongycastlePqcMathNtruPolynomialPolynomial_withOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_(h, t, fp, [((OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *) nil_chk(params_)) getEncryptionParameters]);
  OrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters *pub = new_OrgSpongycastlePqcCryptoNtruNTRUEncryptionPublicKeyParameters_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withOrgSpongycastlePqcCryptoNtruNTRUEncryptionParameters_(h, [((OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters *) nil_chk(params_)) getEncryptionParameters]);
  return new_OrgSpongycastleCryptoAsymmetricCipherKeyPair_initWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(pub, priv);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LOrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyGenerationParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LOrgSpongycastleCryptoKeyGenerationParameters;" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator = { "NTRUEncryptionKeyPairGenerator", "org.spongycastle.pqc.crypto.ntru", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator;
}

@end

void OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator_init(OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator *self) {
  NSObject_init(self);
}

OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator *new_OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator, init)
}

OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator *create_OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoNtruNTRUEncryptionKeyPairGenerator)
