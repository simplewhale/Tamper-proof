//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/gmss/GMSSRootSig.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/pqc/crypto/gmss/GMSSRootSig.h"
#include "org/spongycastle/pqc/crypto/gmss/util/GMSSRandom.h"
#include "org/spongycastle/util/encoders/Hex.h"

@interface OrgSpongycastlePqcCryptoGmssGMSSRootSig () {
 @public
  id<OrgSpongycastleCryptoDigest> messDigestOTS_;
  jint mdsize_;
  jint keysize_;
  IOSByteArray *privateKeyOTS_;
  IOSByteArray *hash__;
  IOSByteArray *sign_;
  jint w_;
  OrgSpongycastlePqcCryptoGmssUtilGMSSRandom *gmssRandom_;
  jint messagesize_;
  jint k_;
  jint r_;
  jint test_;
  jint counter_;
  jint ii_;
  jlong test8_;
  jlong big8_;
  jint steps_;
  jint checksum_;
  jint height_;
  IOSByteArray *seed_;
}

- (void)oneStep;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoGmssGMSSRootSig, messDigestOTS_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoGmssGMSSRootSig, privateKeyOTS_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoGmssGMSSRootSig, hash__, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoGmssGMSSRootSig, sign_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoGmssGMSSRootSig, gmssRandom_, OrgSpongycastlePqcCryptoGmssUtilGMSSRandom *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoGmssGMSSRootSig, seed_, IOSByteArray *)

__attribute__((unused)) static void OrgSpongycastlePqcCryptoGmssGMSSRootSig_oneStep(OrgSpongycastlePqcCryptoGmssGMSSRootSig *self);

@implementation OrgSpongycastlePqcCryptoGmssGMSSRootSig

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                     withByteArray2:(IOSObjectArray *)statByte
                                       withIntArray:(IOSIntArray *)statInt {
  OrgSpongycastlePqcCryptoGmssGMSSRootSig_initWithOrgSpongycastleCryptoDigest_withByteArray2_withIntArray_(self, digest, statByte, statInt);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                            withInt:(jint)w
                                            withInt:(jint)height {
  OrgSpongycastlePqcCryptoGmssGMSSRootSig_initWithOrgSpongycastleCryptoDigest_withInt_withInt_(self, digest, w, height);
  return self;
}

- (void)initSignWithByteArray:(IOSByteArray *)seed0
                withByteArray:(IOSByteArray *)message {
  self->hash__ = [IOSByteArray newArrayWithLength:mdsize_];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) updateWithByteArray:message withInt:0 withInt:((IOSByteArray *) nil_chk(message))->size_];
  self->hash__ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) getDigestSize]];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(messDigestOTS_)) doFinalWithByteArray:self->hash__ withInt:0];
  IOSByteArray *messPart = [IOSByteArray newArrayWithLength:mdsize_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hash__, 0, messPart, 0, mdsize_);
  jint checkPart = 0;
  jint sumH = 0;
  jint checksumsize = [self getLogWithInt:(JreLShift32(messagesize_, w_)) + 1];
  if (8 % w_ == 0) {
    jint dt = 8 / w_;
    for (jint a = 0; a < mdsize_; a++) {
      for (jint b = 0; b < dt; b++) {
        sumH += IOSByteArray_Get(messPart, a) & k_;
        *IOSByteArray_GetRef(messPart, a) = (jbyte) (JreURShift32(IOSByteArray_Get(messPart, a), w_));
      }
    }
    self->checksum_ = (JreLShift32(messagesize_, w_)) - sumH;
    checkPart = checksum_;
    for (jint b = 0; b < checksumsize; b += w_) {
      sumH += checkPart & k_;
      JreURShiftAssignInt(&checkPart, w_);
    }
  }
  else if (w_ < 8) {
    jlong big8;
    jint ii = 0;
    jint dt = mdsize_ / w_;
    for (jint i = 0; i < dt; i++) {
      big8 = 0;
      for (jint j = 0; j < w_; j++) {
        big8 ^= JreLShift32((IOSByteArray_Get(messPart, ii) & (jint) 0xff), (JreLShift32(j, 3)));
        ii++;
      }
      for (jint j = 0; j < 8; j++) {
        sumH += (jint) (big8 & k_);
        JreURShiftAssignLong(&big8, w_);
      }
    }
    dt = mdsize_ % w_;
    big8 = 0;
    for (jint j = 0; j < dt; j++) {
      big8 ^= JreLShift32((IOSByteArray_Get(messPart, ii) & (jint) 0xff), (JreLShift32(j, 3)));
      ii++;
    }
    JreLShiftAssignInt(&dt, 3);
    for (jint j = 0; j < dt; j += w_) {
      sumH += (jint) (big8 & k_);
      JreURShiftAssignLong(&big8, w_);
    }
    self->checksum_ = (JreLShift32(messagesize_, w_)) - sumH;
    checkPart = checksum_;
    for (jint i = 0; i < checksumsize; i += w_) {
      sumH += checkPart & k_;
      JreURShiftAssignInt(&checkPart, w_);
    }
  }
  else if (w_ < 57) {
    jlong big8;
    jint r = 0;
    jint s;
    jint f;
    jint rest;
    jint ii;
    while (r <= ((JreLShift32(mdsize_, 3)) - w_)) {
      s = JreURShift32(r, 3);
      rest = r % 8;
      r += w_;
      f = JreURShift32((r + 7), 3);
      big8 = 0;
      ii = 0;
      for (jint j = s; j < f; j++) {
        big8 ^= JreLShift32((IOSByteArray_Get(messPart, j) & (jint) 0xff), (JreLShift32(ii, 3)));
        ii++;
      }
      JreURShiftAssignLong(&big8, rest);
      sumH += (big8 & k_);
    }
    s = JreURShift32(r, 3);
    if (s < mdsize_) {
      rest = r % 8;
      big8 = 0;
      ii = 0;
      for (jint j = s; j < mdsize_; j++) {
        big8 ^= JreLShift32((IOSByteArray_Get(messPart, j) & (jint) 0xff), (JreLShift32(ii, 3)));
        ii++;
      }
      JreURShiftAssignLong(&big8, rest);
      sumH += (big8 & k_);
    }
    self->checksum_ = (JreLShift32(messagesize_, w_)) - sumH;
    checkPart = checksum_;
    for (jint i = 0; i < checksumsize; i += w_) {
      sumH += (checkPart & k_);
      JreURShiftAssignInt(&checkPart, w_);
    }
  }
  self->keysize_ = messagesize_ + JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) checksumsize / (jdouble) w_));
  self->steps_ = JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) (keysize_ + sumH) / (jdouble) ((JreLShift32(1, height_)))));
  self->sign_ = [IOSByteArray newArrayWithLength:keysize_ * mdsize_];
  self->counter_ = 0;
  self->test_ = 0;
  self->ii_ = 0;
  self->test8_ = 0;
  self->r_ = 0;
  self->privateKeyOTS_ = [IOSByteArray newArrayWithLength:mdsize_];
  self->seed_ = [IOSByteArray newArrayWithLength:mdsize_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(seed0, 0, self->seed_, 0, mdsize_);
}

- (jboolean)updateSign {
  for (jint s = 0; s < steps_; s++) {
    if (counter_ < keysize_) {
      OrgSpongycastlePqcCryptoGmssGMSSRootSig_oneStep(self);
    }
    if (counter_ == keysize_) {
      return true;
    }
  }
  return false;
}

- (IOSByteArray *)getSig {
  return sign_;
}

- (void)oneStep {
  OrgSpongycastlePqcCryptoGmssGMSSRootSig_oneStep(self);
}

- (jint)getLogWithInt:(jint)intValue {
  jint log = 1;
  jint i = 2;
  while (i < intValue) {
    JreLShiftAssignInt(&i, 1);
    log++;
  }
  return log;
}

- (IOSObjectArray *)getStatByte {
  IOSObjectArray *statByte = [IOSByteArray newArrayWithDimensions:2 lengths:(jint[]){ 5, mdsize_ }];
  (void) IOSObjectArray_Set(statByte, 0, privateKeyOTS_);
  (void) IOSObjectArray_Set(statByte, 1, seed_);
  (void) IOSObjectArray_Set(statByte, 2, hash__);
  (void) IOSObjectArray_Set(statByte, 3, sign_);
  (void) IOSObjectArray_Set(statByte, 4, [self getStatLong]);
  return statByte;
}

- (IOSIntArray *)getStatInt {
  IOSIntArray *statInt = [IOSIntArray newArrayWithLength:9];
  *IOSIntArray_GetRef(statInt, 0) = counter_;
  *IOSIntArray_GetRef(statInt, 1) = test_;
  *IOSIntArray_GetRef(statInt, 2) = ii_;
  *IOSIntArray_GetRef(statInt, 3) = r_;
  *IOSIntArray_GetRef(statInt, 4) = steps_;
  *IOSIntArray_GetRef(statInt, 5) = keysize_;
  *IOSIntArray_GetRef(statInt, 6) = height_;
  *IOSIntArray_GetRef(statInt, 7) = w_;
  *IOSIntArray_GetRef(statInt, 8) = checksum_;
  return statInt;
}

- (IOSByteArray *)getStatLong {
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:16];
  *IOSByteArray_GetRef(bytes, 0) = (jbyte) ((test8_) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 1) = (jbyte) ((JreRShift64(test8_, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 2) = (jbyte) ((JreRShift64(test8_, 16)) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 3) = (jbyte) ((JreRShift64(test8_, 24)) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 4) = (jbyte) ((JreRShift64((test8_), 32)) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 5) = (jbyte) ((JreRShift64(test8_, 40)) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 6) = (jbyte) ((JreRShift64(test8_, 48)) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 7) = (jbyte) ((JreRShift64(test8_, 56)) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 8) = (jbyte) ((big8_) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 9) = (jbyte) ((JreRShift64(big8_, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 10) = (jbyte) ((JreRShift64(big8_, 16)) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 11) = (jbyte) ((JreRShift64(big8_, 24)) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 12) = (jbyte) ((JreRShift64((big8_), 32)) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 13) = (jbyte) ((JreRShift64(big8_, 40)) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 14) = (jbyte) ((JreRShift64(big8_, 48)) & (jint) 0xff);
  *IOSByteArray_GetRef(bytes, 15) = (jbyte) ((JreRShift64(big8_, 56)) & (jint) 0xff);
  return bytes;
}

- (NSString *)description {
  NSString *out = JreStrcat("J$", self->big8_, @"  ");
  IOSIntArray *statInt = [IOSIntArray newArrayWithLength:9];
  statInt = [self getStatInt];
  IOSObjectArray *statByte = [IOSByteArray newArrayWithDimensions:2 lengths:(jint[]){ 5, mdsize_ }];
  statByte = [self getStatByte];
  for (jint i = 0; i < 9; i++) {
    out = JreStrcat("$IC", out, IOSIntArray_Get(nil_chk(statInt), i), ' ');
  }
  for (jint i = 0; i < 5; i++) {
    out = JreStrcat("$$C", out, [NSString java_stringWithBytes:OrgSpongycastleUtilEncodersHex_encodeWithByteArray_(IOSObjectArray_Get(nil_chk(statByte), i))], ' ');
  }
  return out;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "[[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoDigest:withByteArray2:withIntArray:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoDigest:withInt:withInt:);
  methods[2].selector = @selector(initSignWithByteArray:withByteArray:);
  methods[3].selector = @selector(updateSign);
  methods[4].selector = @selector(getSig);
  methods[5].selector = @selector(oneStep);
  methods[6].selector = @selector(getLogWithInt:);
  methods[7].selector = @selector(getStatByte);
  methods[8].selector = @selector(getStatInt);
  methods[9].selector = @selector(getStatLong);
  methods[10].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "messDigestOTS_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mdsize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keysize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privateKeyOTS_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hash__", "[B", .constantValue.asLong = 0, 0x2, 7, -1, -1, -1 },
    { "sign_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "w_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "gmssRandom_", "LOrgSpongycastlePqcCryptoGmssUtilGMSSRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "messagesize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "r_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "test_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "counter_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ii_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "test8_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "big8_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "steps_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "checksum_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "height_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDigest;[[B[I", "LOrgSpongycastleCryptoDigest;II", "initSign", "[B[B", "getLog", "I", "toString", "hash" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoGmssGMSSRootSig = { "GMSSRootSig", "org.spongycastle.pqc.crypto.gmss", ptrTable, methods, fields, 7, 0x1, 11, 20, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoGmssGMSSRootSig;
}

@end

void OrgSpongycastlePqcCryptoGmssGMSSRootSig_initWithOrgSpongycastleCryptoDigest_withByteArray2_withIntArray_(OrgSpongycastlePqcCryptoGmssGMSSRootSig *self, id<OrgSpongycastleCryptoDigest> digest, IOSObjectArray *statByte, IOSIntArray *statInt) {
  NSObject_init(self);
  self->messDigestOTS_ = digest;
  self->gmssRandom_ = new_OrgSpongycastlePqcCryptoGmssUtilGMSSRandom_initWithOrgSpongycastleCryptoDigest_(self->messDigestOTS_);
  self->counter_ = IOSIntArray_Get(nil_chk(statInt), 0);
  self->test_ = IOSIntArray_Get(statInt, 1);
  self->ii_ = IOSIntArray_Get(statInt, 2);
  self->r_ = IOSIntArray_Get(statInt, 3);
  self->steps_ = IOSIntArray_Get(statInt, 4);
  self->keysize_ = IOSIntArray_Get(statInt, 5);
  self->height_ = IOSIntArray_Get(statInt, 6);
  self->w_ = IOSIntArray_Get(statInt, 7);
  self->checksum_ = IOSIntArray_Get(statInt, 8);
  self->mdsize_ = [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) getDigestSize];
  self->k_ = (JreLShift32(1, self->w_)) - 1;
  jint mdsizeBit = JreLShift32(self->mdsize_, 3);
  self->messagesize_ = JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) (mdsizeBit) / (jdouble) self->w_));
  self->privateKeyOTS_ = IOSObjectArray_Get(nil_chk(statByte), 0);
  self->seed_ = IOSObjectArray_Get(statByte, 1);
  self->hash__ = IOSObjectArray_Get(statByte, 2);
  self->sign_ = IOSObjectArray_Get(statByte, 3);
  self->test8_ = ((IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 0) & (jint) 0xff)) | (JreLShift64((jlong) (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 1) & (jint) 0xff), 8)) | (JreLShift64((jlong) (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 2) & (jint) 0xff), 16)) | (JreLShift64(((jlong) (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 3) & (jint) 0xff)), 24)) | (JreLShift64(((jlong) (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 4) & (jint) 0xff)), 32)) | (JreLShift64(((jlong) (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 5) & (jint) 0xff)), 40)) | (JreLShift64(((jlong) (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 6) & (jint) 0xff)), 48)) | (JreLShift64(((jlong) (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 7) & (jint) 0xff)), 56));
  self->big8_ = ((IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 8) & (jint) 0xff)) | (JreLShift64((jlong) (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 9) & (jint) 0xff), 8)) | (JreLShift64((jlong) (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 10) & (jint) 0xff), 16)) | (JreLShift64(((jlong) (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 11) & (jint) 0xff)), 24)) | (JreLShift64(((jlong) (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 12) & (jint) 0xff)), 32)) | (JreLShift64(((jlong) (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 13) & (jint) 0xff)), 40)) | (JreLShift64(((jlong) (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 14) & (jint) 0xff)), 48)) | (JreLShift64(((jlong) (IOSByteArray_Get(nil_chk(IOSObjectArray_Get(statByte, 4)), 15) & (jint) 0xff)), 56));
}

OrgSpongycastlePqcCryptoGmssGMSSRootSig *new_OrgSpongycastlePqcCryptoGmssGMSSRootSig_initWithOrgSpongycastleCryptoDigest_withByteArray2_withIntArray_(id<OrgSpongycastleCryptoDigest> digest, IOSObjectArray *statByte, IOSIntArray *statInt) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoGmssGMSSRootSig, initWithOrgSpongycastleCryptoDigest_withByteArray2_withIntArray_, digest, statByte, statInt)
}

OrgSpongycastlePqcCryptoGmssGMSSRootSig *create_OrgSpongycastlePqcCryptoGmssGMSSRootSig_initWithOrgSpongycastleCryptoDigest_withByteArray2_withIntArray_(id<OrgSpongycastleCryptoDigest> digest, IOSObjectArray *statByte, IOSIntArray *statInt) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoGmssGMSSRootSig, initWithOrgSpongycastleCryptoDigest_withByteArray2_withIntArray_, digest, statByte, statInt)
}

void OrgSpongycastlePqcCryptoGmssGMSSRootSig_initWithOrgSpongycastleCryptoDigest_withInt_withInt_(OrgSpongycastlePqcCryptoGmssGMSSRootSig *self, id<OrgSpongycastleCryptoDigest> digest, jint w, jint height) {
  NSObject_init(self);
  self->messDigestOTS_ = digest;
  self->gmssRandom_ = new_OrgSpongycastlePqcCryptoGmssUtilGMSSRandom_initWithOrgSpongycastleCryptoDigest_(self->messDigestOTS_);
  self->mdsize_ = [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) getDigestSize];
  self->w_ = w;
  self->height_ = height;
  self->k_ = (JreLShift32(1, w)) - 1;
  jint mdsizeBit = JreLShift32(self->mdsize_, 3);
  self->messagesize_ = JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) (mdsizeBit) / (jdouble) w));
}

OrgSpongycastlePqcCryptoGmssGMSSRootSig *new_OrgSpongycastlePqcCryptoGmssGMSSRootSig_initWithOrgSpongycastleCryptoDigest_withInt_withInt_(id<OrgSpongycastleCryptoDigest> digest, jint w, jint height) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoGmssGMSSRootSig, initWithOrgSpongycastleCryptoDigest_withInt_withInt_, digest, w, height)
}

OrgSpongycastlePqcCryptoGmssGMSSRootSig *create_OrgSpongycastlePqcCryptoGmssGMSSRootSig_initWithOrgSpongycastleCryptoDigest_withInt_withInt_(id<OrgSpongycastleCryptoDigest> digest, jint w, jint height) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoGmssGMSSRootSig, initWithOrgSpongycastleCryptoDigest_withInt_withInt_, digest, w, height)
}

void OrgSpongycastlePqcCryptoGmssGMSSRootSig_oneStep(OrgSpongycastlePqcCryptoGmssGMSSRootSig *self) {
  if (8 % self->w_ == 0) {
    if (self->test_ == 0) {
      self->privateKeyOTS_ = [((OrgSpongycastlePqcCryptoGmssUtilGMSSRandom *) nil_chk(self->gmssRandom_)) nextSeedWithByteArray:self->seed_];
      if (self->ii_ < self->mdsize_) {
        self->test_ = IOSByteArray_Get(nil_chk(self->hash__), self->ii_) & self->k_;
        *IOSByteArray_GetRef(self->hash__, self->ii_) = (jbyte) (JreURShift32(IOSByteArray_Get(self->hash__, self->ii_), self->w_));
      }
      else {
        self->test_ = self->checksum_ & self->k_;
        JreURShiftAssignInt(&self->checksum_, self->w_);
      }
    }
    else if (self->test_ > 0) {
      [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) updateWithByteArray:self->privateKeyOTS_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->privateKeyOTS_))->size_];
      self->privateKeyOTS_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) getDigestSize]];
      [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) doFinalWithByteArray:self->privateKeyOTS_ withInt:0];
      self->test_--;
    }
    if (self->test_ == 0) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->privateKeyOTS_, 0, self->sign_, self->counter_ * self->mdsize_, self->mdsize_);
      self->counter_++;
      if (self->counter_ % (8 / self->w_) == 0) {
        self->ii_++;
      }
    }
  }
  else if (self->w_ < 8) {
    if (self->test_ == 0) {
      if (self->counter_ % 8 == 0 && self->ii_ < self->mdsize_) {
        self->big8_ = 0;
        if (self->counter_ < (JreLShift32((self->mdsize_ / self->w_), 3))) {
          for (jint j = 0; j < self->w_; j++) {
            self->big8_ ^= JreLShift32((IOSByteArray_Get(nil_chk(self->hash__), self->ii_) & (jint) 0xff), (JreLShift32(j, 3)));
            self->ii_++;
          }
        }
        else {
          for (jint j = 0; j < self->mdsize_ % self->w_; j++) {
            self->big8_ ^= JreLShift32((IOSByteArray_Get(nil_chk(self->hash__), self->ii_) & (jint) 0xff), (JreLShift32(j, 3)));
            self->ii_++;
          }
        }
      }
      if (self->counter_ == self->messagesize_) {
        self->big8_ = self->checksum_;
      }
      self->test_ = (jint) (self->big8_ & self->k_);
      self->privateKeyOTS_ = [((OrgSpongycastlePqcCryptoGmssUtilGMSSRandom *) nil_chk(self->gmssRandom_)) nextSeedWithByteArray:self->seed_];
    }
    else if (self->test_ > 0) {
      [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) updateWithByteArray:self->privateKeyOTS_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->privateKeyOTS_))->size_];
      self->privateKeyOTS_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) getDigestSize]];
      [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) doFinalWithByteArray:self->privateKeyOTS_ withInt:0];
      self->test_--;
    }
    if (self->test_ == 0) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->privateKeyOTS_, 0, self->sign_, self->counter_ * self->mdsize_, self->mdsize_);
      JreURShiftAssignLong(&self->big8_, self->w_);
      self->counter_++;
    }
  }
  else if (self->w_ < 57) {
    if (self->test8_ == 0) {
      jint s;
      jint f;
      jint rest;
      self->big8_ = 0;
      self->ii_ = 0;
      rest = self->r_ % 8;
      s = JreURShift32(self->r_, 3);
      if (s < self->mdsize_) {
        if (self->r_ <= ((JreLShift32(self->mdsize_, 3)) - self->w_)) {
          self->r_ += self->w_;
          f = JreURShift32((self->r_ + 7), 3);
        }
        else {
          f = self->mdsize_;
          self->r_ += self->w_;
        }
        for (jint i = s; i < f; i++) {
          self->big8_ ^= JreLShift32((IOSByteArray_Get(nil_chk(self->hash__), i) & (jint) 0xff), (JreLShift32(self->ii_, 3)));
          self->ii_++;
        }
        JreURShiftAssignLong(&self->big8_, rest);
        self->test8_ = (self->big8_ & self->k_);
      }
      else {
        self->test8_ = (self->checksum_ & self->k_);
        JreURShiftAssignInt(&self->checksum_, self->w_);
      }
      self->privateKeyOTS_ = [((OrgSpongycastlePqcCryptoGmssUtilGMSSRandom *) nil_chk(self->gmssRandom_)) nextSeedWithByteArray:self->seed_];
    }
    else if (self->test8_ > 0) {
      [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) updateWithByteArray:self->privateKeyOTS_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->privateKeyOTS_))->size_];
      self->privateKeyOTS_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) getDigestSize]];
      [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->messDigestOTS_)) doFinalWithByteArray:self->privateKeyOTS_ withInt:0];
      self->test8_--;
    }
    if (self->test8_ == 0) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->privateKeyOTS_, 0, self->sign_, self->counter_ * self->mdsize_, self->mdsize_);
      self->counter_++;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoGmssGMSSRootSig)
