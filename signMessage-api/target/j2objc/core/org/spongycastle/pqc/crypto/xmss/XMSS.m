//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/xmss/XMSS.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/pqc/crypto/xmss/BDS.h"
#include "org/spongycastle/pqc/crypto/xmss/OTSHashAddress.h"
#include "org/spongycastle/pqc/crypto/xmss/WOTSPlus.h"
#include "org/spongycastle/pqc/crypto/xmss/WOTSPlusSignature.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSS.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSKeyGenerationParameters.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSKeyPairGenerator.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSParameters.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSPrivateKeyParameters.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSPublicKeyParameters.h"
#include "org/spongycastle/pqc/crypto/xmss/XMSSSigner.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastlePqcCryptoXmssXMSS () {
 @public
  OrgSpongycastlePqcCryptoXmssXMSSParameters *params_;
  OrgSpongycastlePqcCryptoXmssWOTSPlus *wotsPlus_;
  JavaSecuritySecureRandom *prng_;
  OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *privateKey_;
  OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters *publicKey_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoXmssXMSS, params_, OrgSpongycastlePqcCryptoXmssXMSSParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoXmssXMSS, wotsPlus_, OrgSpongycastlePqcCryptoXmssWOTSPlus *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoXmssXMSS, prng_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoXmssXMSS, privateKey_, OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcCryptoXmssXMSS, publicKey_, OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters *)

@implementation OrgSpongycastlePqcCryptoXmssXMSS

- (instancetype)initWithOrgSpongycastlePqcCryptoXmssXMSSParameters:(OrgSpongycastlePqcCryptoXmssXMSSParameters *)params
                                      withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)prng {
  OrgSpongycastlePqcCryptoXmssXMSS_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(self, params, prng);
  return self;
}

- (void)generateKeys {
  OrgSpongycastlePqcCryptoXmssXMSSKeyPairGenerator *kpGen = new_OrgSpongycastlePqcCryptoXmssXMSSKeyPairGenerator_init();
  [kpGen init__WithOrgSpongycastleCryptoKeyGenerationParameters:new_OrgSpongycastlePqcCryptoXmssXMSSKeyGenerationParameters_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_([self getParams], prng_)];
  OrgSpongycastleCryptoAsymmetricCipherKeyPair *kp = [kpGen generateKeyPair];
  privateKey_ = (OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) cast_chk([((OrgSpongycastleCryptoAsymmetricCipherKeyPair *) nil_chk(kp)) getPrivate], [OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters class]);
  publicKey_ = (OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters *) cast_chk([kp getPublic], [OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters class]);
  [((OrgSpongycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgSpongycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getDigestSize]] withByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(self->privateKey_)) getPublicSeed]];
}

- (void)importStateWithOrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters:(OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *)privateKey
                    withOrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters:(OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters *)publicKey {
  if (!OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_([((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey)) getRoot], [((OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(publicKey)) getRoot])) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"root of private key and public key do not match");
  }
  if (!OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_([privateKey getPublicSeed], [publicKey getPublicSeed])) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"public seed of private key and public key do not match");
  }
  self->privateKey_ = privateKey;
  self->publicKey_ = publicKey;
  [((OrgSpongycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgSpongycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getDigestSize]] withByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(self->privateKey_)) getPublicSeed]];
}

- (void)importStateWithByteArray:(IOSByteArray *)privateKey
                   withByteArray:(IOSByteArray *)publicKey {
  if (privateKey == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"privateKey == null");
  }
  if (publicKey == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"publicKey == null");
  }
  OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *tmpPrivateKey = [((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_(params_) withPrivateKeyWithByteArray:privateKey withOrgSpongycastlePqcCryptoXmssXMSSParameters:[self getParams]])) build];
  OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters *tmpPublicKey = [((OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_(params_) withPublicKeyWithByteArray:publicKey])) build];
  if (!OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_([((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(tmpPrivateKey)) getRoot], [((OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(tmpPublicKey)) getRoot])) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"root of private key and public key do not match");
  }
  if (!OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_([tmpPrivateKey getPublicSeed], [tmpPublicKey getPublicSeed])) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"public seed of private key and public key do not match");
  }
  self->privateKey_ = tmpPrivateKey;
  self->publicKey_ = tmpPublicKey;
  [((OrgSpongycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgSpongycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getDigestSize]] withByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(self->privateKey_)) getPublicSeed]];
}

- (IOSByteArray *)signWithByteArray:(IOSByteArray *)message {
  if (message == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  OrgSpongycastlePqcCryptoXmssXMSSSigner *signer = new_OrgSpongycastlePqcCryptoXmssXMSSSigner_init();
  [signer init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:privateKey_];
  IOSByteArray *signature = [signer generateSignatureWithByteArray:message];
  privateKey_ = (OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) cast_chk([signer getUpdatedPrivateKey], [OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters class]);
  [self importStateWithOrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters:privateKey_ withOrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters:publicKey_];
  return signature;
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                           withByteArray:(IOSByteArray *)signature
                           withByteArray:(IOSByteArray *)publicKey {
  if (message == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"message == null");
  }
  if (signature == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"signature == null");
  }
  if (publicKey == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"publicKey == null");
  }
  OrgSpongycastlePqcCryptoXmssXMSSSigner *signer = new_OrgSpongycastlePqcCryptoXmssXMSSSigner_init();
  [signer init__WithBoolean:false withOrgSpongycastleCryptoCipherParameters:[((OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_([self getParams]) withPublicKeyWithByteArray:publicKey])) build]];
  return [signer verifySignatureWithByteArray:message withByteArray:signature];
}

- (IOSByteArray *)exportPrivateKey {
  return [((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) toByteArray];
}

- (IOSByteArray *)exportPublicKey {
  return [((OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters *) nil_chk(publicKey_)) toByteArray];
}

- (OrgSpongycastlePqcCryptoXmssWOTSPlusSignature *)wotsSignWithByteArray:(IOSByteArray *)messageDigest
                          withOrgSpongycastlePqcCryptoXmssOTSHashAddress:(OrgSpongycastlePqcCryptoXmssOTSHashAddress *)otsHashAddress {
  if (((IOSByteArray *) nil_chk(messageDigest))->size_ != [((OrgSpongycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getDigestSize]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"size of messageDigest needs to be equal to size of digest");
  }
  if (otsHashAddress == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"otsHashAddress == null");
  }
  [((OrgSpongycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[wotsPlus_ getWOTSPlusSecretKeyWithByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed] withOrgSpongycastlePqcCryptoXmssOTSHashAddress:otsHashAddress] withByteArray:[self getPublicSeed]];
  return [((OrgSpongycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) signWithByteArray:messageDigest withOrgSpongycastlePqcCryptoXmssOTSHashAddress:otsHashAddress];
}

- (OrgSpongycastlePqcCryptoXmssXMSSParameters *)getParams {
  return params_;
}

- (OrgSpongycastlePqcCryptoXmssWOTSPlus *)getWOTSPlus {
  return wotsPlus_;
}

- (IOSByteArray *)getRoot {
  return [((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getRoot];
}

- (void)setRootWithByteArray:(IOSByteArray *)root {
  privateKey_ = [((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_(params_) withSecretKeySeedWithByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed]])) withSecretKeyPRFWithByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeyPRF]])) withPublicSeedWithByteArray:[self getPublicSeed]])) withRootWithByteArray:root])) withBDSStateWithOrgSpongycastlePqcCryptoXmssBDS:[((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState]])) build];
  publicKey_ = [((OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_(params_) withRootWithByteArray:root])) withPublicSeedWithByteArray:[self getPublicSeed]])) build];
}

- (jint)getIndex {
  return [((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getIndex];
}

- (void)setIndexWithInt:(jint)index {
  privateKey_ = [((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_(params_) withSecretKeySeedWithByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed]])) withSecretKeyPRFWithByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeyPRF]])) withPublicSeedWithByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed]])) withRootWithByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getRoot]])) withBDSStateWithOrgSpongycastlePqcCryptoXmssBDS:[((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState]])) build];
}

- (IOSByteArray *)getPublicSeed {
  return [((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getPublicSeed];
}

- (void)setPublicSeedWithByteArray:(IOSByteArray *)publicSeed {
  privateKey_ = [((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters_Builder_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_(params_) withSecretKeySeedWithByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeySeed]])) withSecretKeyPRFWithByteArray:[((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getSecretKeyPRF]])) withPublicSeedWithByteArray:publicSeed])) withRootWithByteArray:[self getRoot]])) withBDSStateWithOrgSpongycastlePqcCryptoXmssBDS:[((OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *) nil_chk(privateKey_)) getBDSState]])) build];
  publicKey_ = [((OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([((OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder *) nil_chk([new_OrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters_Builder_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_(params_) withRootWithByteArray:[self getRoot]])) withPublicSeedWithByteArray:publicSeed])) build];
  [((OrgSpongycastlePqcCryptoXmssWOTSPlus *) nil_chk(wotsPlus_)) importKeysWithByteArray:[IOSByteArray newArrayWithLength:[((OrgSpongycastlePqcCryptoXmssXMSSParameters *) nil_chk(params_)) getDigestSize]] withByteArray:publicSeed];
}

- (OrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters *)getPrivateKey {
  return privateKey_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcCryptoXmssWOTSPlusSignature;", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcCryptoXmssXMSSParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcCryptoXmssWOTSPlus;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastlePqcCryptoXmssXMSSParameters:withJavaSecuritySecureRandom:);
  methods[1].selector = @selector(generateKeys);
  methods[2].selector = @selector(importStateWithOrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters:withOrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters:);
  methods[3].selector = @selector(importStateWithByteArray:withByteArray:);
  methods[4].selector = @selector(signWithByteArray:);
  methods[5].selector = @selector(verifySignatureWithByteArray:withByteArray:withByteArray:);
  methods[6].selector = @selector(exportPrivateKey);
  methods[7].selector = @selector(exportPublicKey);
  methods[8].selector = @selector(wotsSignWithByteArray:withOrgSpongycastlePqcCryptoXmssOTSHashAddress:);
  methods[9].selector = @selector(getParams);
  methods[10].selector = @selector(getWOTSPlus);
  methods[11].selector = @selector(getRoot);
  methods[12].selector = @selector(setRootWithByteArray:);
  methods[13].selector = @selector(getIndex);
  methods[14].selector = @selector(setIndexWithInt:);
  methods[15].selector = @selector(getPublicSeed);
  methods[16].selector = @selector(setPublicSeedWithByteArray:);
  methods[17].selector = @selector(getPrivateKey);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LOrgSpongycastlePqcCryptoXmssXMSSParameters;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "wotsPlus_", "LOrgSpongycastlePqcCryptoXmssWOTSPlus;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prng_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privateKey_", "LOrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "publicKey_", "LOrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastlePqcCryptoXmssXMSSParameters;LJavaSecuritySecureRandom;", "importState", "LOrgSpongycastlePqcCryptoXmssXMSSPrivateKeyParameters;LOrgSpongycastlePqcCryptoXmssXMSSPublicKeyParameters;", "[B[B", "sign", "[B", "verifySignature", "[B[B[B", "LJavaTextParseException;", "wotsSign", "[BLOrgSpongycastlePqcCryptoXmssOTSHashAddress;", "setRoot", "setIndex", "I", "setPublicSeed" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoXmssXMSS = { "XMSS", "org.spongycastle.pqc.crypto.xmss", ptrTable, methods, fields, 7, 0x1, 18, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoXmssXMSS;
}

@end

void OrgSpongycastlePqcCryptoXmssXMSS_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(OrgSpongycastlePqcCryptoXmssXMSS *self, OrgSpongycastlePqcCryptoXmssXMSSParameters *params, JavaSecuritySecureRandom *prng) {
  NSObject_init(self);
  if (params == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"params == null");
  }
  self->params_ = params;
  self->wotsPlus_ = [params getWOTSPlus];
  self->prng_ = prng;
}

OrgSpongycastlePqcCryptoXmssXMSS *new_OrgSpongycastlePqcCryptoXmssXMSS_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(OrgSpongycastlePqcCryptoXmssXMSSParameters *params, JavaSecuritySecureRandom *prng) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoXmssXMSS, initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_, params, prng)
}

OrgSpongycastlePqcCryptoXmssXMSS *create_OrgSpongycastlePqcCryptoXmssXMSS_initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_(OrgSpongycastlePqcCryptoXmssXMSSParameters *params, JavaSecuritySecureRandom *prng) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoXmssXMSS, initWithOrgSpongycastlePqcCryptoXmssXMSSParameters_withJavaSecuritySecureRandom_, params, prng)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoXmssXMSS)
