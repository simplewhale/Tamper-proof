//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/crypto/ntru/NTRUSigningParameters.java
//

#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"
#include "java/text/DecimalFormat.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/digests/SHA256Digest.h"
#include "org/spongycastle/crypto/digests/SHA512Digest.h"
#include "org/spongycastle/pqc/crypto/ntru/NTRUSigningParameters.h"

@interface OrgSpongycastlePqcCryptoNtruNTRUSigningParameters ()

- (void)init__ OBJC_METHOD_FAMILY_NONE;

@end

__attribute__((unused)) static void OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_init__(OrgSpongycastlePqcCryptoNtruNTRUSigningParameters *self);

@implementation OrgSpongycastlePqcCryptoNtruNTRUSigningParameters

- (instancetype)initWithInt:(jint)N
                    withInt:(jint)q
                    withInt:(jint)d
                    withInt:(jint)B
                 withDouble:(jdouble)beta
                 withDouble:(jdouble)normBound
withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hashAlg {
  OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_initWithInt_withInt_withInt_withInt_withDouble_withDouble_withOrgSpongycastleCryptoDigest_(self, N, q, d, B, beta, normBound, hashAlg);
  return self;
}

- (instancetype)initWithInt:(jint)N
                    withInt:(jint)q
                    withInt:(jint)d1
                    withInt:(jint)d2
                    withInt:(jint)d3
                    withInt:(jint)B
                 withDouble:(jdouble)beta
                 withDouble:(jdouble)normBound
                 withDouble:(jdouble)keyNormBound
withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hashAlg {
  OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withOrgSpongycastleCryptoDigest_(self, N, q, d1, d2, d3, B, beta, normBound, keyNormBound, hashAlg);
  return self;
}

- (void)init__ {
  OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_init__(self);
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is {
  OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_initWithJavaIoInputStream_(self, is);
  return self;
}

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  JavaIoDataOutputStream *dos = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_(os);
  [dos writeIntWithInt:N_];
  [dos writeIntWithInt:q_];
  [dos writeIntWithInt:d_];
  [dos writeIntWithInt:d1_];
  [dos writeIntWithInt:d2_];
  [dos writeIntWithInt:d3_];
  [dos writeIntWithInt:B_];
  [dos writeDoubleWithDouble:beta_];
  [dos writeDoubleWithDouble:normBound_];
  [dos writeIntWithInt:signFailTolerance_];
  [dos writeIntWithInt:bitsF_];
  [dos writeUTFWithNSString:[((id<OrgSpongycastleCryptoDigest>) nil_chk(hashAlg_)) getAlgorithmName]];
}

- (OrgSpongycastlePqcCryptoNtruNTRUSigningParameters *)java_clone {
  return new_OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_initWithInt_withInt_withInt_withInt_withDouble_withDouble_withOrgSpongycastleCryptoDigest_(N_, q_, d_, B_, beta_, normBound_, hashAlg_);
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + B_;
  result = prime * result + N_;
  jlong temp;
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(beta_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(betaSq_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  result = prime * result + bitsF_;
  result = prime * result + d_;
  result = prime * result + d1_;
  result = prime * result + d2_;
  result = prime * result + d3_;
  result = prime * result + ((hashAlg_ == nil) ? 0 : ((jint) [((NSString *) nil_chk([((id<OrgSpongycastleCryptoDigest>) nil_chk(hashAlg_)) getAlgorithmName])) hash]));
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(normBound_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(normBoundSq_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  result = prime * result + q_;
  result = prime * result + signFailTolerance_;
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  if (obj == nil) {
    return false;
  }
  if (!([obj isKindOfClass:[OrgSpongycastlePqcCryptoNtruNTRUSigningParameters class]])) {
    return false;
  }
  OrgSpongycastlePqcCryptoNtruNTRUSigningParameters *other = (OrgSpongycastlePqcCryptoNtruNTRUSigningParameters *) cast_chk(obj, [OrgSpongycastlePqcCryptoNtruNTRUSigningParameters class]);
  if (B_ != other->B_) {
    return false;
  }
  if (N_ != other->N_) {
    return false;
  }
  if (JavaLangDouble_doubleToLongBitsWithDouble_(beta_) != JavaLangDouble_doubleToLongBitsWithDouble_(other->beta_)) {
    return false;
  }
  if (JavaLangDouble_doubleToLongBitsWithDouble_(betaSq_) != JavaLangDouble_doubleToLongBitsWithDouble_(other->betaSq_)) {
    return false;
  }
  if (bitsF_ != other->bitsF_) {
    return false;
  }
  if (d_ != other->d_) {
    return false;
  }
  if (d1_ != other->d1_) {
    return false;
  }
  if (d2_ != other->d2_) {
    return false;
  }
  if (d3_ != other->d3_) {
    return false;
  }
  if (hashAlg_ == nil) {
    if (other->hashAlg_ != nil) {
      return false;
    }
  }
  else if (![((NSString *) nil_chk([hashAlg_ getAlgorithmName])) isEqual:[((id<OrgSpongycastleCryptoDigest>) nil_chk(other->hashAlg_)) getAlgorithmName]]) {
    return false;
  }
  if (JavaLangDouble_doubleToLongBitsWithDouble_(normBound_) != JavaLangDouble_doubleToLongBitsWithDouble_(other->normBound_)) {
    return false;
  }
  if (JavaLangDouble_doubleToLongBitsWithDouble_(normBoundSq_) != JavaLangDouble_doubleToLongBitsWithDouble_(other->normBoundSq_)) {
    return false;
  }
  if (q_ != other->q_) {
    return false;
  }
  if (signFailTolerance_ != other->signFailTolerance_) {
    return false;
  }
  return true;
}

- (NSString *)description {
  JavaTextDecimalFormat *format = new_JavaTextDecimalFormat_initWithNSString_(@"0.00");
  JavaLangStringBuilder *output = new_JavaLangStringBuilder_initWithNSString_(JreStrcat("$I$I", @"SignatureParameters(N=", N_, @" q=", q_));
  (void) [output appendWithNSString:JreStrcat("$I$$$$$@C", @" B=", B_, @" beta=", [format formatWithDouble:beta_], @" normBound=", [format formatWithDouble:normBound_], @" hashAlg=", hashAlg_, ')')];
  return [output description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcCryptoNtruNTRUSigningParameters;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withInt:withDouble:withDouble:withOrgSpongycastleCryptoDigest:);
  methods[1].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:withDouble:withDouble:withDouble:withOrgSpongycastleCryptoDigest:);
  methods[2].selector = @selector(init__);
  methods[3].selector = @selector(initWithJavaIoInputStream:);
  methods[4].selector = @selector(writeToWithJavaIoOutputStream:);
  methods[5].selector = @selector(java_clone);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "N_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "q_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "d_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "d1_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "d2_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "d3_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "B_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "beta_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "betaSq_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "normBound_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "normBoundSq_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "signFailTolerance_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bitsF_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hashAlg_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIIIDDLOrgSpongycastleCryptoDigest;", "IIIIIIDDDLOrgSpongycastleCryptoDigest;", "init", "LJavaIoInputStream;", "LJavaIoIOException;", "writeTo", "LJavaIoOutputStream;", "clone", "hashCode", "equals", "LNSObject;", "toString" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcCryptoNtruNTRUSigningParameters = { "NTRUSigningParameters", "org.spongycastle.pqc.crypto.ntru", ptrTable, methods, fields, 7, 0x1, 9, 14, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcCryptoNtruNTRUSigningParameters;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end

void OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_initWithInt_withInt_withInt_withInt_withDouble_withDouble_withOrgSpongycastleCryptoDigest_(OrgSpongycastlePqcCryptoNtruNTRUSigningParameters *self, jint N, jint q, jint d, jint B, jdouble beta, jdouble normBound, id<OrgSpongycastleCryptoDigest> hashAlg) {
  NSObject_init(self);
  self->signFailTolerance_ = 100;
  self->bitsF_ = 6;
  self->N_ = N;
  self->q_ = q;
  self->d_ = d;
  self->B_ = B;
  self->beta_ = beta;
  self->normBound_ = normBound;
  self->hashAlg_ = hashAlg;
  OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_init__(self);
}

OrgSpongycastlePqcCryptoNtruNTRUSigningParameters *new_OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_initWithInt_withInt_withInt_withInt_withDouble_withDouble_withOrgSpongycastleCryptoDigest_(jint N, jint q, jint d, jint B, jdouble beta, jdouble normBound, id<OrgSpongycastleCryptoDigest> hashAlg) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoNtruNTRUSigningParameters, initWithInt_withInt_withInt_withInt_withDouble_withDouble_withOrgSpongycastleCryptoDigest_, N, q, d, B, beta, normBound, hashAlg)
}

OrgSpongycastlePqcCryptoNtruNTRUSigningParameters *create_OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_initWithInt_withInt_withInt_withInt_withDouble_withDouble_withOrgSpongycastleCryptoDigest_(jint N, jint q, jint d, jint B, jdouble beta, jdouble normBound, id<OrgSpongycastleCryptoDigest> hashAlg) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoNtruNTRUSigningParameters, initWithInt_withInt_withInt_withInt_withDouble_withDouble_withOrgSpongycastleCryptoDigest_, N, q, d, B, beta, normBound, hashAlg)
}

void OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withOrgSpongycastleCryptoDigest_(OrgSpongycastlePqcCryptoNtruNTRUSigningParameters *self, jint N, jint q, jint d1, jint d2, jint d3, jint B, jdouble beta, jdouble normBound, jdouble keyNormBound, id<OrgSpongycastleCryptoDigest> hashAlg) {
  NSObject_init(self);
  self->signFailTolerance_ = 100;
  self->bitsF_ = 6;
  self->N_ = N;
  self->q_ = q;
  self->d1_ = d1;
  self->d2_ = d2;
  self->d3_ = d3;
  self->B_ = B;
  self->beta_ = beta;
  self->normBound_ = normBound;
  self->hashAlg_ = hashAlg;
  OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_init__(self);
}

OrgSpongycastlePqcCryptoNtruNTRUSigningParameters *new_OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withOrgSpongycastleCryptoDigest_(jint N, jint q, jint d1, jint d2, jint d3, jint B, jdouble beta, jdouble normBound, jdouble keyNormBound, id<OrgSpongycastleCryptoDigest> hashAlg) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoNtruNTRUSigningParameters, initWithInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withOrgSpongycastleCryptoDigest_, N, q, d1, d2, d3, B, beta, normBound, keyNormBound, hashAlg)
}

OrgSpongycastlePqcCryptoNtruNTRUSigningParameters *create_OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_initWithInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withOrgSpongycastleCryptoDigest_(jint N, jint q, jint d1, jint d2, jint d3, jint B, jdouble beta, jdouble normBound, jdouble keyNormBound, id<OrgSpongycastleCryptoDigest> hashAlg) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoNtruNTRUSigningParameters, initWithInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withOrgSpongycastleCryptoDigest_, N, q, d1, d2, d3, B, beta, normBound, keyNormBound, hashAlg)
}

void OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_init__(OrgSpongycastlePqcCryptoNtruNTRUSigningParameters *self) {
  self->betaSq_ = self->beta_ * self->beta_;
  self->normBoundSq_ = self->normBound_ * self->normBound_;
}

void OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_initWithJavaIoInputStream_(OrgSpongycastlePqcCryptoNtruNTRUSigningParameters *self, JavaIoInputStream *is) {
  NSObject_init(self);
  self->signFailTolerance_ = 100;
  self->bitsF_ = 6;
  JavaIoDataInputStream *dis = new_JavaIoDataInputStream_initWithJavaIoInputStream_(is);
  self->N_ = [dis readInt];
  self->q_ = [dis readInt];
  self->d_ = [dis readInt];
  self->d1_ = [dis readInt];
  self->d2_ = [dis readInt];
  self->d3_ = [dis readInt];
  self->B_ = [dis readInt];
  self->beta_ = [dis readDouble];
  self->normBound_ = [dis readDouble];
  self->signFailTolerance_ = [dis readInt];
  self->bitsF_ = [dis readInt];
  NSString *alg = [dis readUTF];
  if ([@"SHA-512" isEqual:alg]) {
    self->hashAlg_ = new_OrgSpongycastleCryptoDigestsSHA512Digest_init();
  }
  else if ([@"SHA-256" isEqual:alg]) {
    self->hashAlg_ = new_OrgSpongycastleCryptoDigestsSHA256Digest_init();
  }
  OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_init__(self);
}

OrgSpongycastlePqcCryptoNtruNTRUSigningParameters *new_OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_initWithJavaIoInputStream_(JavaIoInputStream *is) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcCryptoNtruNTRUSigningParameters, initWithJavaIoInputStream_, is)
}

OrgSpongycastlePqcCryptoNtruNTRUSigningParameters *create_OrgSpongycastlePqcCryptoNtruNTRUSigningParameters_initWithJavaIoInputStream_(JavaIoInputStream *is) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcCryptoNtruNTRUSigningParameters, initWithJavaIoInputStream_, is)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcCryptoNtruNTRUSigningParameters)
