//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/math/linearalgebra/GF2Polynomial.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/util/Random.h"
#include "org/spongycastle/pqc/math/linearalgebra/GF2Polynomial.h"
#include "org/spongycastle/pqc/math/linearalgebra/IntUtils.h"
#include "org/spongycastle/pqc/math/linearalgebra/IntegerFunctions.h"

@interface OrgSpongycastlePqcMathLinearalgebraGF2Polynomial () {
 @public
  jint len_;
  jint blocks_;
  IOSIntArray *value_;
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)karaMultWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)b;

+ (IOSIntArray *)mult512WithIntArray:(IOSIntArray *)a
                        withIntArray:(IOSIntArray *)b;

+ (IOSIntArray *)mult256WithIntArray:(IOSIntArray *)a
                        withIntArray:(IOSIntArray *)b;

+ (IOSIntArray *)mult128WithIntArray:(IOSIntArray *)a
                        withIntArray:(IOSIntArray *)b;

+ (IOSIntArray *)mult64WithIntArray:(IOSIntArray *)a
                       withIntArray:(IOSIntArray *)b;

+ (IOSIntArray *)mult32WithInt:(jint)a
                       withInt:(jint)b;

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)upperWithInt:(jint)k;

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)lowerWithInt:(jint)k;

- (void)zeroUnusedBits;

- (void)doShiftBlocksLeftWithInt:(jint)b;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, value_, IOSIntArray *)

inline JavaUtilRandom *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_get_rand(void);
inline JavaUtilRandom *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_set_rand(JavaUtilRandom *value);
static JavaUtilRandom *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_rand;
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, rand, JavaUtilRandom *)

inline IOSBooleanArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_get_parity(void);
static IOSBooleanArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_parity;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, parity, IOSBooleanArray *)

inline IOSShortArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_get_squaringTable(void);
static IOSShortArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_squaringTable;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, squaringTable, IOSShortArray *)

inline IOSIntArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_get_bitMask(void);
static IOSIntArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_bitMask;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, bitMask, IOSIntArray *)

inline IOSIntArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_get_reverseRightMask(void);
static IOSIntArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_reverseRightMask;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, reverseRightMask, IOSIntArray *)

__attribute__((unused)) static OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_karaMultWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self, OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *b);

__attribute__((unused)) static IOSIntArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult512WithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b);

__attribute__((unused)) static IOSIntArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult256WithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b);

__attribute__((unused)) static IOSIntArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult128WithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b);

__attribute__((unused)) static IOSIntArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult64WithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b);

__attribute__((unused)) static IOSIntArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult32WithInt_withInt_(jint a, jint b);

__attribute__((unused)) static OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_upperWithInt_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self, jint k);

__attribute__((unused)) static OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_lowerWithInt_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self, jint k);

__attribute__((unused)) static void OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_zeroUnusedBits(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self);

__attribute__((unused)) static void OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_doShiftBlocksLeftWithInt_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self, jint b);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial)

@implementation OrgSpongycastlePqcMathLinearalgebraGF2Polynomial

- (instancetype)initWithInt:(jint)length {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(self, length);
  return self;
}

- (instancetype)initWithInt:(jint)length
         withJavaUtilRandom:(JavaUtilRandom *)rand {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withJavaUtilRandom_(self, length, rand);
  return self;
}

- (instancetype)initWithInt:(jint)length
               withNSString:(NSString *)value {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withNSString_(self, length, value);
  return self;
}

- (instancetype)initWithInt:(jint)length
               withIntArray:(IOSIntArray *)bs {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withIntArray_(self, length, bs);
  return self;
}

- (instancetype)initWithInt:(jint)length
              withByteArray:(IOSByteArray *)os {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withByteArray_(self, length, os);
  return self;
}

- (instancetype)initWithInt:(jint)length
     withJavaMathBigInteger:(JavaMathBigInteger *)bi {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withJavaMathBigInteger_(self, length, bi);
  return self;
}

- (instancetype)initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)b {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(self, b);
  return self;
}

- (id)java_clone {
  return new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(self);
}

- (jint)getLength {
  return len_;
}

- (IOSIntArray *)toIntegerArray {
  IOSIntArray *result;
  result = [IOSIntArray newArrayWithLength:blocks_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(value_, 0, result, 0, blocks_);
  return result;
}

- (NSString *)toStringWithInt:(jint)radix {
  IOSCharArray *HEX_CHARS = [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' } count:16];
  IOSObjectArray *BIN_CHARS = [IOSObjectArray newArrayWithObjects:(id[]){ @"0000", @"0001", @"0010", @"0011", @"0100", @"0101", @"0110", @"0111", @"1000", @"1001", @"1010", @"1011", @"1100", @"1101", @"1110", @"1111" } count:16 type:NSString_class_()];
  NSString *res;
  jint i;
  res = [NSString string];
  if (radix == 16) {
    for (i = blocks_ - 1; i >= 0; i--) {
      (void) JreStrAppendStrong(&res, "C", IOSCharArray_Get(HEX_CHARS, (JreURShift32(IOSIntArray_Get(nil_chk(value_), i), 28)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "C", IOSCharArray_Get(HEX_CHARS, (JreURShift32(IOSIntArray_Get(value_, i), 24)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "C", IOSCharArray_Get(HEX_CHARS, (JreURShift32(IOSIntArray_Get(value_, i), 20)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "C", IOSCharArray_Get(HEX_CHARS, (JreURShift32(IOSIntArray_Get(value_, i), 16)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "C", IOSCharArray_Get(HEX_CHARS, (JreURShift32(IOSIntArray_Get(value_, i), 12)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "C", IOSCharArray_Get(HEX_CHARS, (JreURShift32(IOSIntArray_Get(value_, i), 8)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "C", IOSCharArray_Get(HEX_CHARS, (JreURShift32(IOSIntArray_Get(value_, i), 4)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "C", IOSCharArray_Get(HEX_CHARS, (IOSIntArray_Get(value_, i)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "$", @" ");
    }
  }
  else {
    for (i = blocks_ - 1; i >= 0; i--) {
      (void) JreStrAppendStrong(&res, "$", IOSObjectArray_Get(BIN_CHARS, (JreURShift32(IOSIntArray_Get(nil_chk(value_), i), 28)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "$", IOSObjectArray_Get(BIN_CHARS, (JreURShift32(IOSIntArray_Get(value_, i), 24)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "$", IOSObjectArray_Get(BIN_CHARS, (JreURShift32(IOSIntArray_Get(value_, i), 20)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "$", IOSObjectArray_Get(BIN_CHARS, (JreURShift32(IOSIntArray_Get(value_, i), 16)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "$", IOSObjectArray_Get(BIN_CHARS, (JreURShift32(IOSIntArray_Get(value_, i), 12)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "$", IOSObjectArray_Get(BIN_CHARS, (JreURShift32(IOSIntArray_Get(value_, i), 8)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "$", IOSObjectArray_Get(BIN_CHARS, (JreURShift32(IOSIntArray_Get(value_, i), 4)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "$", IOSObjectArray_Get(BIN_CHARS, (IOSIntArray_Get(value_, i)) & (jint) 0x0f));
      (void) JreStrAppendStrong(&res, "$", @" ");
    }
  }
  return res;
}

- (IOSByteArray *)toByteArray {
  jint k = (JreRShift32((len_ - 1), 3)) + 1;
  jint ov = k & (jint) 0x03;
  jint m;
  IOSByteArray *res = [IOSByteArray newArrayWithLength:k];
  jint i;
  for (i = 0; i < (JreRShift32(k, 2)); i++) {
    m = k - (JreLShift32(i, 2)) - 1;
    *IOSByteArray_GetRef(res, m) = (jbyte) ((IOSIntArray_Get(nil_chk(value_), i) & (jint) 0x000000ff));
    *IOSByteArray_GetRef(res, m - 1) = (jbyte) (JreURShift32((IOSIntArray_Get(value_, i) & (jint) 0x0000ff00), 8));
    *IOSByteArray_GetRef(res, m - 2) = (jbyte) (JreURShift32((IOSIntArray_Get(value_, i) & (jint) 0x00ff0000), 16));
    *IOSByteArray_GetRef(res, m - 3) = (jbyte) (JreURShift32((IOSIntArray_Get(value_, i) & (jint) 0xff000000), 24));
  }
  for (i = 0; i < ov; i++) {
    m = JreLShift32((ov - i - 1), 3);
    *IOSByteArray_GetRef(res, i) = (jbyte) (JreURShift32((IOSIntArray_Get(nil_chk(value_), blocks_ - 1) & (JreLShift32((jint) 0x000000ff, m))), m));
  }
  return res;
}

- (JavaMathBigInteger *)toFlexiBigInt {
  if (len_ == 0 || [self isZero]) {
    return new_JavaMathBigInteger_initWithInt_withByteArray_(0, [IOSByteArray newArrayWithLength:0]);
  }
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, [self toByteArray]);
}

- (void)assignOne {
  jint i;
  for (i = 1; i < blocks_; i++) {
    *IOSIntArray_GetRef(nil_chk(value_), i) = (jint) 0x00;
  }
  *IOSIntArray_GetRef(nil_chk(value_), 0) = (jint) 0x01;
}

- (void)assignX {
  jint i;
  for (i = 1; i < blocks_; i++) {
    *IOSIntArray_GetRef(nil_chk(value_), i) = (jint) 0x00;
  }
  *IOSIntArray_GetRef(nil_chk(value_), 0) = (jint) 0x02;
}

- (void)assignAll {
  jint i;
  for (i = 0; i < blocks_; i++) {
    *IOSIntArray_GetRef(nil_chk(value_), i) = (jint) 0xffffffff;
  }
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_zeroUnusedBits(self);
}

- (void)assignZero {
  jint i;
  for (i = 0; i < blocks_; i++) {
    *IOSIntArray_GetRef(nil_chk(value_), i) = (jint) 0x00;
  }
}

- (void)randomize {
  jint i;
  for (i = 0; i < blocks_; i++) {
    *IOSIntArray_GetRef(nil_chk(value_), i) = [((JavaUtilRandom *) nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_rand)) nextInt];
  }
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_zeroUnusedBits(self);
}

- (void)randomizeWithJavaUtilRandom:(JavaUtilRandom *)rand {
  jint i;
  for (i = 0; i < blocks_; i++) {
    *IOSIntArray_GetRef(nil_chk(value_), i) = [((JavaUtilRandom *) nil_chk(rand)) nextInt];
  }
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_zeroUnusedBits(self);
}

- (jboolean)isEqual:(id)other {
  if (other == nil || !([other isKindOfClass:[OrgSpongycastlePqcMathLinearalgebraGF2Polynomial class]])) {
    return false;
  }
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *otherPol = (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) cast_chk(other, [OrgSpongycastlePqcMathLinearalgebraGF2Polynomial class]);
  if (len_ != otherPol->len_) {
    return false;
  }
  for (jint i = 0; i < blocks_; i++) {
    if (IOSIntArray_Get(nil_chk(value_), i) != IOSIntArray_Get(otherPol->value_, i)) {
      return false;
    }
  }
  return true;
}

- (NSUInteger)hash {
  return len_ + ((jint) [((IOSIntArray *) nil_chk(value_)) hash]);
}

- (jboolean)isZero {
  jint i;
  if (len_ == 0) {
    return true;
  }
  for (i = 0; i < blocks_; i++) {
    if (IOSIntArray_Get(nil_chk(value_), i) != 0) {
      return false;
    }
  }
  return true;
}

- (jboolean)isOne {
  jint i;
  for (i = 1; i < blocks_; i++) {
    if (IOSIntArray_Get(nil_chk(value_), i) != 0) {
      return false;
    }
  }
  if (IOSIntArray_Get(nil_chk(value_), 0) != (jint) 0x01) {
    return false;
  }
  return true;
}

- (void)addToThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)b {
  [self expandNWithInt:((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b))->len_];
  [self xorThisByWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:b];
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)addWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)b {
  return [self xor__WithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:b];
}

- (void)subtractFromThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)b {
  [self expandNWithInt:((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b))->len_];
  [self xorThisByWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:b];
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)subtractWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)b {
  return [self xor__WithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:b];
}

- (void)increaseThis {
  [self xorBitWithInt:0];
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)increase {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *result = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(self);
  [result increaseThis];
  return result;
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)multiplyClassicWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)b {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *result = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(JreLShift32(JavaLangMath_maxWithInt_withInt_(len_, ((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b))->len_), 1));
  IOSObjectArray *m = [IOSObjectArray newArrayWithLength:32 type:OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_class_()];
  jint i;
  jint j;
  (void) IOSObjectArray_SetAndConsume(m, 0, new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(self));
  for (i = 1; i <= 31; i++) {
    (void) IOSObjectArray_Set(m, i, [((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(IOSObjectArray_Get(m, i - 1))) shiftLeft]);
  }
  for (i = 0; i < b->blocks_; i++) {
    for (j = 0; j <= 31; j++) {
      if ((IOSIntArray_Get(nil_chk(b->value_), i) & IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_bitMask), j)) != 0) {
        [result xorThisByWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:IOSObjectArray_Get(m, j)];
      }
    }
    for (j = 0; j <= 31; j++) {
      [((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(IOSObjectArray_Get(m, j))) shiftBlocksLeft];
    }
  }
  return result;
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)multiplyWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)b {
  jint n = JavaLangMath_maxWithInt_withInt_(len_, ((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b))->len_);
  [self expandNWithInt:n];
  [b expandNWithInt:n];
  return OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_karaMultWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(self, b);
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)karaMultWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)b {
  return OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_karaMultWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(self, b);
}

+ (IOSIntArray *)mult512WithIntArray:(IOSIntArray *)a
                        withIntArray:(IOSIntArray *)b {
  return OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult512WithIntArray_withIntArray_(a, b);
}

+ (IOSIntArray *)mult256WithIntArray:(IOSIntArray *)a
                        withIntArray:(IOSIntArray *)b {
  return OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult256WithIntArray_withIntArray_(a, b);
}

+ (IOSIntArray *)mult128WithIntArray:(IOSIntArray *)a
                        withIntArray:(IOSIntArray *)b {
  return OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult128WithIntArray_withIntArray_(a, b);
}

+ (IOSIntArray *)mult64WithIntArray:(IOSIntArray *)a
                       withIntArray:(IOSIntArray *)b {
  return OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult64WithIntArray_withIntArray_(a, b);
}

+ (IOSIntArray *)mult32WithInt:(jint)a
                       withInt:(jint)b {
  return OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult32WithInt_withInt_(a, b);
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)upperWithInt:(jint)k {
  return OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_upperWithInt_(self, k);
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)lowerWithInt:(jint)k {
  return OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_lowerWithInt_(self, k);
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)remainderWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)g {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *a = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(self);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *b = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(g);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *j;
  jint i;
  if ([b isZero]) {
    @throw new_JavaLangRuntimeException_init();
  }
  [a reduceN];
  [b reduceN];
  if (a->len_ < b->len_) {
    return a;
  }
  i = a->len_ - b->len_;
  while (i >= 0) {
    j = [b shiftLeftWithInt:i];
    [a subtractFromThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:j];
    [a reduceN];
    i = a->len_ - b->len_;
  }
  return a;
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)quotientWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)g {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *q = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(len_);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *a = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(self);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *b = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(g);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *j;
  jint i;
  if ([b isZero]) {
    @throw new_JavaLangRuntimeException_init();
  }
  [a reduceN];
  [b reduceN];
  if (a->len_ < b->len_) {
    return new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(0);
  }
  i = a->len_ - b->len_;
  [q expandNWithInt:i + 1];
  while (i >= 0) {
    j = [b shiftLeftWithInt:i];
    [a subtractFromThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:j];
    [a reduceN];
    [q xorBitWithInt:i];
    i = a->len_ - b->len_;
  }
  return q;
}

- (IOSObjectArray *)divideWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)g {
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:2 type:OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_class_()];
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *q = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(len_);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *a = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(self);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *b = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(g);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *j;
  jint i;
  if ([b isZero]) {
    @throw new_JavaLangRuntimeException_init();
  }
  [a reduceN];
  [b reduceN];
  if (a->len_ < b->len_) {
    (void) IOSObjectArray_SetAndConsume(result, 0, new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(0));
    (void) IOSObjectArray_Set(result, 1, a);
    return result;
  }
  i = a->len_ - b->len_;
  [q expandNWithInt:i + 1];
  while (i >= 0) {
    j = [b shiftLeftWithInt:i];
    [a subtractFromThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:j];
    [a reduceN];
    [q xorBitWithInt:i];
    i = a->len_ - b->len_;
  }
  (void) IOSObjectArray_Set(result, 0, q);
  (void) IOSObjectArray_Set(result, 1, a);
  return result;
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)gcdWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)g {
  if ([self isZero] && [((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(g)) isZero]) {
    @throw new_JavaLangArithmeticException_initWithNSString_(@"Both operands of gcd equal zero.");
  }
  if ([self isZero]) {
    return new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(g);
  }
  if ([((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(g)) isZero]) {
    return new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(self);
  }
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *a = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(self);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *b = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(g);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *c;
  while (![((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b)) isZero]) {
    c = [a remainderWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:b];
    a = b;
    b = c;
  }
  return a;
}

- (jboolean)isIrreducible {
  if ([self isZero]) {
    return false;
  }
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *f = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(self);
  jint d;
  jint i;
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *u;
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *g;
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *dummy;
  [f reduceN];
  d = f->len_ - 1;
  u = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withNSString_(f->len_, @"X");
  for (i = 1; i <= (JreRShift32(d, 1)); i++) {
    [u squareThisPreCalc];
    u = [u remainderWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:f];
    dummy = [((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(u)) addWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withNSString_(32, @"X")];
    if (![((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(dummy)) isZero]) {
      g = [f gcdWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:dummy];
      if (![((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(g)) isOne]) {
        return false;
      }
    }
    else {
      return false;
    }
  }
  return true;
}

- (void)reduceTrinomialWithInt:(jint)m
                       withInt:(jint)tc {
  jint i;
  jint p0;
  jint p1;
  jint q0;
  jint q1;
  jlong t;
  p0 = JreURShift32(m, 5);
  q0 = 32 - (m & (jint) 0x1f);
  p1 = JreURShift32((m - tc), 5);
  q1 = 32 - ((m - tc) & (jint) 0x1f);
  jint max = JreURShift32(((JreLShift32(m, 1)) - 2), 5);
  jint min = p0;
  for (i = max; i > min; i--) {
    t = IOSIntArray_Get(nil_chk(value_), i) & (jlong) 0x00000000ffffffffLL;
    *IOSIntArray_GetRef(value_, i - p0 - 1) ^= (jint) (JreLShift64(t, q0));
    *IOSIntArray_GetRef(value_, i - p0) ^= JreURShift64(t, (32 - q0));
    *IOSIntArray_GetRef(value_, i - p1 - 1) ^= (jint) (JreLShift64(t, q1));
    *IOSIntArray_GetRef(value_, i - p1) ^= JreURShift64(t, (32 - q1));
    *IOSIntArray_GetRef(value_, i) = (jint) 0x00;
  }
  t = IOSIntArray_Get(nil_chk(value_), min) & (jlong) 0x00000000ffffffffLL & (JreLShift64((jlong) 0xffffffffLL, (m & (jint) 0x1f)));
  *IOSIntArray_GetRef(value_, 0) ^= JreURShift64(t, (32 - q0));
  if (min - p1 - 1 >= 0) {
    *IOSIntArray_GetRef(value_, min - p1 - 1) ^= (jint) (JreLShift64(t, q1));
  }
  *IOSIntArray_GetRef(value_, min - p1) ^= JreURShift64(t, (32 - q1));
  *IOSIntArray_GetRef(value_, min) &= IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_reverseRightMask), m & (jint) 0x1f);
  blocks_ = (JreURShift32((m - 1), 5)) + 1;
  len_ = m;
}

- (void)reducePentanomialWithInt:(jint)m
                    withIntArray:(IOSIntArray *)pc {
  jint i;
  jint p0;
  jint p1;
  jint p2;
  jint p3;
  jint q0;
  jint q1;
  jint q2;
  jint q3;
  jlong t;
  p0 = JreURShift32(m, 5);
  q0 = 32 - (m & (jint) 0x1f);
  p1 = JreURShift32((m - IOSIntArray_Get(nil_chk(pc), 0)), 5);
  q1 = 32 - ((m - IOSIntArray_Get(pc, 0)) & (jint) 0x1f);
  p2 = JreURShift32((m - IOSIntArray_Get(pc, 1)), 5);
  q2 = 32 - ((m - IOSIntArray_Get(pc, 1)) & (jint) 0x1f);
  p3 = JreURShift32((m - IOSIntArray_Get(pc, 2)), 5);
  q3 = 32 - ((m - IOSIntArray_Get(pc, 2)) & (jint) 0x1f);
  jint max = JreURShift32(((JreLShift32(m, 1)) - 2), 5);
  jint min = p0;
  for (i = max; i > min; i--) {
    t = IOSIntArray_Get(nil_chk(value_), i) & (jlong) 0x00000000ffffffffLL;
    *IOSIntArray_GetRef(value_, i - p0 - 1) ^= (jint) (JreLShift64(t, q0));
    *IOSIntArray_GetRef(value_, i - p0) ^= JreURShift64(t, (32 - q0));
    *IOSIntArray_GetRef(value_, i - p1 - 1) ^= (jint) (JreLShift64(t, q1));
    *IOSIntArray_GetRef(value_, i - p1) ^= JreURShift64(t, (32 - q1));
    *IOSIntArray_GetRef(value_, i - p2 - 1) ^= (jint) (JreLShift64(t, q2));
    *IOSIntArray_GetRef(value_, i - p2) ^= JreURShift64(t, (32 - q2));
    *IOSIntArray_GetRef(value_, i - p3 - 1) ^= (jint) (JreLShift64(t, q3));
    *IOSIntArray_GetRef(value_, i - p3) ^= JreURShift64(t, (32 - q3));
    *IOSIntArray_GetRef(value_, i) = 0;
  }
  t = IOSIntArray_Get(nil_chk(value_), min) & (jlong) 0x00000000ffffffffLL & (JreLShift64((jlong) 0xffffffffLL, (m & (jint) 0x1f)));
  *IOSIntArray_GetRef(value_, 0) ^= JreURShift64(t, (32 - q0));
  if (min - p1 - 1 >= 0) {
    *IOSIntArray_GetRef(value_, min - p1 - 1) ^= (jint) (JreLShift64(t, q1));
  }
  *IOSIntArray_GetRef(value_, min - p1) ^= JreURShift64(t, (32 - q1));
  if (min - p2 - 1 >= 0) {
    *IOSIntArray_GetRef(value_, min - p2 - 1) ^= (jint) (JreLShift64(t, q2));
  }
  *IOSIntArray_GetRef(value_, min - p2) ^= JreURShift64(t, (32 - q2));
  if (min - p3 - 1 >= 0) {
    *IOSIntArray_GetRef(value_, min - p3 - 1) ^= (jint) (JreLShift64(t, q3));
  }
  *IOSIntArray_GetRef(value_, min - p3) ^= JreURShift64(t, (32 - q3));
  *IOSIntArray_GetRef(value_, min) &= IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_reverseRightMask), m & (jint) 0x1f);
  blocks_ = (JreURShift32((m - 1), 5)) + 1;
  len_ = m;
}

- (void)reduceN {
  jint i;
  jint j;
  jint h;
  i = blocks_ - 1;
  while ((IOSIntArray_Get(nil_chk(value_), i) == 0) && (i > 0)) {
    i--;
  }
  h = IOSIntArray_Get(value_, i);
  j = 0;
  while (h != 0) {
    JreURShiftAssignInt(&h, 1);
    j++;
  }
  len_ = (JreLShift32(i, 5)) + j;
  blocks_ = i + 1;
}

- (void)expandNWithInt:(jint)i {
  jint k;
  IOSIntArray *bs;
  if (len_ >= i) {
    return;
  }
  len_ = i;
  k = (JreURShift32((i - 1), 5)) + 1;
  if (blocks_ >= k) {
    return;
  }
  if (((IOSIntArray *) nil_chk(value_))->size_ >= k) {
    jint j;
    for (j = blocks_; j < k; j++) {
      *IOSIntArray_GetRef(value_, j) = 0;
    }
    blocks_ = k;
    return;
  }
  bs = [IOSIntArray newArrayWithLength:k];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(value_, 0, bs, 0, blocks_);
  blocks_ = k;
  value_ = nil;
  value_ = bs;
}

- (void)squareThisBitwise {
  jint i;
  jint h;
  jint j;
  jint k;
  if ([self isZero]) {
    return;
  }
  IOSIntArray *result = [IOSIntArray newArrayWithLength:JreLShift32(blocks_, 1)];
  for (i = blocks_ - 1; i >= 0; i--) {
    h = IOSIntArray_Get(nil_chk(value_), i);
    j = (jint) 0x00000001;
    for (k = 0; k < 16; k++) {
      if ((h & (jint) 0x01) != 0) {
        *IOSIntArray_GetRef(result, JreLShift32(i, 1)) |= j;
      }
      if ((h & (jint) 0x00010000) != 0) {
        *IOSIntArray_GetRef(result, (JreLShift32(i, 1)) + 1) |= j;
      }
      JreLShiftAssignInt(&j, 2);
      JreURShiftAssignInt(&h, 1);
    }
  }
  value_ = nil;
  value_ = result;
  blocks_ = result->size_;
  len_ = (JreLShift32(len_, 1)) - 1;
}

- (void)squareThisPreCalc {
  jint i;
  if ([self isZero]) {
    return;
  }
  if (((IOSIntArray *) nil_chk(value_))->size_ >= (JreLShift32(blocks_, 1))) {
    for (i = blocks_ - 1; i >= 0; i--) {
      *IOSIntArray_GetRef(value_, (JreLShift32(i, 1)) + 1) = IOSShortArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_squaringTable), JreURShift32((IOSIntArray_Get(value_, i) & (jint) 0x00ff0000), 16)) | (JreLShift32(IOSShortArray_Get(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_squaringTable, JreURShift32((IOSIntArray_Get(value_, i) & (jint) 0xff000000), 24)), 16));
      *IOSIntArray_GetRef(value_, JreLShift32(i, 1)) = IOSShortArray_Get(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_squaringTable, IOSIntArray_Get(value_, i) & (jint) 0x000000ff) | (JreLShift32(IOSShortArray_Get(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_squaringTable, JreURShift32((IOSIntArray_Get(value_, i) & (jint) 0x0000ff00), 8)), 16));
    }
    JreLShiftAssignInt(&blocks_, 1);
    len_ = (JreLShift32(len_, 1)) - 1;
  }
  else {
    IOSIntArray *result = [IOSIntArray newArrayWithLength:JreLShift32(blocks_, 1)];
    for (i = 0; i < blocks_; i++) {
      *IOSIntArray_GetRef(result, JreLShift32(i, 1)) = IOSShortArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_squaringTable), IOSIntArray_Get(value_, i) & (jint) 0x000000ff) | (JreLShift32(IOSShortArray_Get(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_squaringTable, JreURShift32((IOSIntArray_Get(value_, i) & (jint) 0x0000ff00), 8)), 16));
      *IOSIntArray_GetRef(result, (JreLShift32(i, 1)) + 1) = IOSShortArray_Get(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_squaringTable, JreURShift32((IOSIntArray_Get(value_, i) & (jint) 0x00ff0000), 16)) | (JreLShift32(IOSShortArray_Get(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_squaringTable, JreURShift32((IOSIntArray_Get(value_, i) & (jint) 0xff000000), 24)), 16));
    }
    value_ = nil;
    value_ = result;
    JreLShiftAssignInt(&blocks_, 1);
    len_ = (JreLShift32(len_, 1)) - 1;
  }
}

- (jboolean)vectorMultWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)b {
  jint i;
  jint h;
  jboolean result = false;
  if (len_ != ((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b))->len_) {
    @throw new_JavaLangRuntimeException_init();
  }
  for (i = 0; i < blocks_; i++) {
    h = IOSIntArray_Get(nil_chk(value_), i) & IOSIntArray_Get(b->value_, i);
    result ^= IOSBooleanArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_parity), h & (jint) 0x000000ff);
    result ^= IOSBooleanArray_Get(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_parity, (JreURShift32(h, 8)) & (jint) 0x000000ff);
    result ^= IOSBooleanArray_Get(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_parity, (JreURShift32(h, 16)) & (jint) 0x000000ff);
    result ^= IOSBooleanArray_Get(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_parity, (JreURShift32(h, 24)) & (jint) 0x000000ff);
  }
  return result;
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)xor__WithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)b {
  jint i;
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *result;
  jint k = JavaLangMath_minWithInt_withInt_(blocks_, ((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b))->blocks_);
  if (len_ >= b->len_) {
    result = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(self);
    for (i = 0; i < k; i++) {
      *IOSIntArray_GetRef(nil_chk(result->value_), i) ^= IOSIntArray_Get(b->value_, i);
    }
  }
  else {
    result = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(b);
    for (i = 0; i < k; i++) {
      *IOSIntArray_GetRef(nil_chk(result->value_), i) ^= IOSIntArray_Get(value_, i);
    }
  }
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_zeroUnusedBits(result);
  return result;
}

- (void)xorThisByWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)b {
  jint i;
  for (i = 0; i < JavaLangMath_minWithInt_withInt_(blocks_, ((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b))->blocks_); i++) {
    *IOSIntArray_GetRef(nil_chk(value_), i) ^= IOSIntArray_Get(b->value_, i);
  }
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_zeroUnusedBits(self);
}

- (void)zeroUnusedBits {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_zeroUnusedBits(self);
}

- (void)setBitWithInt:(jint)i {
  if (i < 0 || i > (len_ - 1)) {
    @throw new_JavaLangRuntimeException_init();
  }
  *IOSIntArray_GetRef(nil_chk(value_), JreURShift32(i, 5)) |= IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_bitMask), i & (jint) 0x1f);
  return;
}

- (jint)getBitWithInt:(jint)i {
  if (i < 0) {
    @throw new_JavaLangRuntimeException_init();
  }
  if (i > (len_ - 1)) {
    return 0;
  }
  return ((IOSIntArray_Get(nil_chk(value_), JreURShift32(i, 5)) & IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_bitMask), i & (jint) 0x1f)) != 0) ? 1 : 0;
}

- (void)resetBitWithInt:(jint)i {
  if (i < 0) {
    @throw new_JavaLangRuntimeException_init();
  }
  if (i > (len_ - 1)) {
    return;
  }
  *IOSIntArray_GetRef(nil_chk(value_), JreURShift32(i, 5)) &= ~IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_bitMask), i & (jint) 0x1f);
}

- (void)xorBitWithInt:(jint)i {
  if (i < 0 || i > (len_ - 1)) {
    @throw new_JavaLangRuntimeException_init();
  }
  *IOSIntArray_GetRef(nil_chk(value_), JreURShift32(i, 5)) ^= IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_bitMask), i & (jint) 0x1f);
}

- (jboolean)testBitWithInt:(jint)i {
  if (i < 0) {
    @throw new_JavaLangRuntimeException_init();
  }
  if (i > (len_ - 1)) {
    return false;
  }
  return (IOSIntArray_Get(nil_chk(value_), JreURShift32(i, 5)) & IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_bitMask), i & (jint) 0x1f)) != 0;
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)shiftLeft {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *result = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withIntArray_(len_ + 1, value_);
  jint i;
  for (i = result->blocks_ - 1; i >= 1; i--) {
    JreLShiftAssignInt(IOSIntArray_GetRef(nil_chk(result->value_), i), 1);
    *IOSIntArray_GetRef(result->value_, i) |= JreURShift32(IOSIntArray_Get(result->value_, i - 1), 31);
  }
  JreLShiftAssignInt(IOSIntArray_GetRef(nil_chk(result->value_), 0), 1);
  return result;
}

- (void)shiftLeftThis {
  jint i;
  if ((len_ & (jint) 0x1f) == 0) {
    len_ += 1;
    blocks_ += 1;
    if (blocks_ > ((IOSIntArray *) nil_chk(value_))->size_) {
      IOSIntArray *bs = [IOSIntArray newArrayWithLength:blocks_];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(value_, 0, bs, 0, value_->size_);
      value_ = nil;
      value_ = bs;
    }
    for (i = blocks_ - 1; i >= 1; i--) {
      *IOSIntArray_GetRef(value_, i) |= JreURShift32(IOSIntArray_Get(value_, i - 1), 31);
      JreLShiftAssignInt(IOSIntArray_GetRef(value_, i - 1), 1);
    }
  }
  else {
    len_ += 1;
    for (i = blocks_ - 1; i >= 1; i--) {
      JreLShiftAssignInt(IOSIntArray_GetRef(nil_chk(value_), i), 1);
      *IOSIntArray_GetRef(value_, i) |= JreURShift32(IOSIntArray_Get(value_, i - 1), 31);
    }
    JreLShiftAssignInt(IOSIntArray_GetRef(nil_chk(value_), 0), 1);
  }
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)shiftLeftWithInt:(jint)k {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *result = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withIntArray_(len_ + k, value_);
  if (k >= 32) {
    OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_doShiftBlocksLeftWithInt_(result, JreURShift32(k, 5));
  }
  jint remaining = k & (jint) 0x1f;
  if (remaining != 0) {
    for (jint i = result->blocks_ - 1; i >= 1; i--) {
      JreLShiftAssignInt(IOSIntArray_GetRef(nil_chk(result->value_), i), remaining);
      *IOSIntArray_GetRef(result->value_, i) |= JreURShift32(IOSIntArray_Get(result->value_, i - 1), (32 - remaining));
    }
    JreLShiftAssignInt(IOSIntArray_GetRef(nil_chk(result->value_), 0), remaining);
  }
  return result;
}

- (void)shiftLeftAddThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)b
                                                                     withInt:(jint)k {
  if (k == 0) {
    [self addToThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:b];
    return;
  }
  jint i;
  [self expandNWithInt:((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b))->len_ + k];
  jint d = JreURShift32(k, 5);
  for (i = b->blocks_ - 1; i >= 0; i--) {
    if ((i + d + 1 < blocks_) && ((k & (jint) 0x1f) != 0)) {
      *IOSIntArray_GetRef(nil_chk(value_), i + d + 1) ^= JreURShift32(IOSIntArray_Get(b->value_, i), (32 - (k & (jint) 0x1f)));
    }
    *IOSIntArray_GetRef(nil_chk(value_), i + d) ^= JreLShift32(IOSIntArray_Get(b->value_, i), (k & (jint) 0x1f));
  }
}

- (void)shiftBlocksLeft {
  blocks_ += 1;
  len_ += 32;
  if (blocks_ <= ((IOSIntArray *) nil_chk(value_))->size_) {
    jint i;
    for (i = blocks_ - 1; i >= 1; i--) {
      *IOSIntArray_GetRef(value_, i) = IOSIntArray_Get(value_, i - 1);
    }
    *IOSIntArray_GetRef(value_, 0) = (jint) 0x00;
  }
  else {
    IOSIntArray *result = [IOSIntArray newArrayWithLength:blocks_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(value_, 0, result, 1, blocks_ - 1);
    value_ = nil;
    value_ = result;
  }
}

- (void)doShiftBlocksLeftWithInt:(jint)b {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_doShiftBlocksLeftWithInt_(self, b);
}

- (OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *)shiftRight {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *result = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(len_ - 1);
  jint i;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(value_, 0, result->value_, 0, result->blocks_);
  for (i = 0; i <= result->blocks_ - 2; i++) {
    JreURShiftAssignInt(IOSIntArray_GetRef(nil_chk(result->value_), i), 1);
    *IOSIntArray_GetRef(result->value_, i) |= JreLShift32(IOSIntArray_Get(result->value_, i + 1), 31);
  }
  JreURShiftAssignInt(IOSIntArray_GetRef(nil_chk(result->value_), result->blocks_ - 1), 1);
  if (result->blocks_ < blocks_) {
    *IOSIntArray_GetRef(result->value_, result->blocks_ - 1) |= JreLShift32(IOSIntArray_Get(value_, result->blocks_), 31);
  }
  return result;
}

- (void)shiftRightThis {
  jint i;
  len_ -= 1;
  blocks_ = (JreURShift32((len_ - 1), 5)) + 1;
  for (i = 0; i <= blocks_ - 2; i++) {
    JreURShiftAssignInt(IOSIntArray_GetRef(nil_chk(value_), i), 1);
    *IOSIntArray_GetRef(value_, i) |= JreLShift32(IOSIntArray_Get(value_, i + 1), 31);
  }
  JreURShiftAssignInt(IOSIntArray_GetRef(nil_chk(value_), blocks_ - 1), 1);
  if ((len_ & (jint) 0x1f) == 0) {
    *IOSIntArray_GetRef(value_, blocks_ - 1) |= JreLShift32(IOSIntArray_Get(value_, blocks_), 31);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x1, 15, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x1, 17, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x1, 18, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x1, 19, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x2, 20, 6, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, 21, 22, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, 23, 22, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, 24, 22, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, 25, 22, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, 26, 27, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x2, 28, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x2, 29, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x1, 30, 6, 31, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x1, 32, 6, 31, -1, -1, -1 },
    { NULL, "[LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x1, 33, 6, 31, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x1, 34, 6, 31, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 35, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 36, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 38, 6, 31, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x1, 39, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 0, 31, -1, -1, -1 },
    { NULL, "I", 0x1, 42, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 0, 31, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 0, 31, -1, -1, -1 },
    { NULL, "Z", 0x1, 45, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x1, 46, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithInt:withJavaUtilRandom:);
  methods[2].selector = @selector(initWithInt:withNSString:);
  methods[3].selector = @selector(initWithInt:withIntArray:);
  methods[4].selector = @selector(initWithInt:withByteArray:);
  methods[5].selector = @selector(initWithInt:withJavaMathBigInteger:);
  methods[6].selector = @selector(initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[7].selector = @selector(java_clone);
  methods[8].selector = @selector(getLength);
  methods[9].selector = @selector(toIntegerArray);
  methods[10].selector = @selector(toStringWithInt:);
  methods[11].selector = @selector(toByteArray);
  methods[12].selector = @selector(toFlexiBigInt);
  methods[13].selector = @selector(assignOne);
  methods[14].selector = @selector(assignX);
  methods[15].selector = @selector(assignAll);
  methods[16].selector = @selector(assignZero);
  methods[17].selector = @selector(randomize);
  methods[18].selector = @selector(randomizeWithJavaUtilRandom:);
  methods[19].selector = @selector(isEqual:);
  methods[20].selector = @selector(hash);
  methods[21].selector = @selector(isZero);
  methods[22].selector = @selector(isOne);
  methods[23].selector = @selector(addToThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[24].selector = @selector(addWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[25].selector = @selector(subtractFromThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[26].selector = @selector(subtractWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[27].selector = @selector(increaseThis);
  methods[28].selector = @selector(increase);
  methods[29].selector = @selector(multiplyClassicWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[30].selector = @selector(multiplyWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[31].selector = @selector(karaMultWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[32].selector = @selector(mult512WithIntArray:withIntArray:);
  methods[33].selector = @selector(mult256WithIntArray:withIntArray:);
  methods[34].selector = @selector(mult128WithIntArray:withIntArray:);
  methods[35].selector = @selector(mult64WithIntArray:withIntArray:);
  methods[36].selector = @selector(mult32WithInt:withInt:);
  methods[37].selector = @selector(upperWithInt:);
  methods[38].selector = @selector(lowerWithInt:);
  methods[39].selector = @selector(remainderWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[40].selector = @selector(quotientWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[41].selector = @selector(divideWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[42].selector = @selector(gcdWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[43].selector = @selector(isIrreducible);
  methods[44].selector = @selector(reduceTrinomialWithInt:withInt:);
  methods[45].selector = @selector(reducePentanomialWithInt:withIntArray:);
  methods[46].selector = @selector(reduceN);
  methods[47].selector = @selector(expandNWithInt:);
  methods[48].selector = @selector(squareThisBitwise);
  methods[49].selector = @selector(squareThisPreCalc);
  methods[50].selector = @selector(vectorMultWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[51].selector = @selector(xor__WithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[52].selector = @selector(xorThisByWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:);
  methods[53].selector = @selector(zeroUnusedBits);
  methods[54].selector = @selector(setBitWithInt:);
  methods[55].selector = @selector(getBitWithInt:);
  methods[56].selector = @selector(resetBitWithInt:);
  methods[57].selector = @selector(xorBitWithInt:);
  methods[58].selector = @selector(testBitWithInt:);
  methods[59].selector = @selector(shiftLeft);
  methods[60].selector = @selector(shiftLeftThis);
  methods[61].selector = @selector(shiftLeftWithInt:);
  methods[62].selector = @selector(shiftLeftAddThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:withInt:);
  methods[63].selector = @selector(shiftBlocksLeft);
  methods[64].selector = @selector(doShiftBlocksLeftWithInt:);
  methods[65].selector = @selector(shiftRight);
  methods[66].selector = @selector(shiftRightThis);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "len_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blocks_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "value_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rand", "LJavaUtilRandom;", .constantValue.asLong = 0, 0xa, -1, 50, -1, -1 },
    { "parity", "[Z", .constantValue.asLong = 0, 0x1a, -1, 51, -1, -1 },
    { "squaringTable", "[S", .constantValue.asLong = 0, 0x1a, -1, 52, -1, -1 },
    { "bitMask", "[I", .constantValue.asLong = 0, 0x1a, -1, 53, -1, -1 },
    { "reverseRightMask", "[I", .constantValue.asLong = 0, 0x1a, -1, 54, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "ILJavaUtilRandom;", "ILNSString;", "I[I", "I[B", "ILJavaMathBigInteger;", "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;", "clone", "toString", "randomize", "LJavaUtilRandom;", "equals", "LNSObject;", "hashCode", "addToThis", "add", "subtractFromThis", "subtract", "multiplyClassic", "multiply", "karaMult", "mult512", "[I[I", "mult256", "mult128", "mult64", "mult32", "II", "upper", "lower", "remainder", "LJavaLangRuntimeException;", "quotient", "divide", "gcd", "reduceTrinomial", "reducePentanomial", "expandN", "vectorMult", "xor", "xorThisBy", "setBit", "getBit", "resetBit", "xorBit", "testBit", "shiftLeft", "shiftLeftAddThis", "LOrgSpongycastlePqcMathLinearalgebraGF2Polynomial;I", "doShiftBlocksLeft", &OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_rand, &OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_parity, &OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_squaringTable, &OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_bitMask, &OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_reverseRightMask };
  static const J2ObjcClassInfo _OrgSpongycastlePqcMathLinearalgebraGF2Polynomial = { "GF2Polynomial", "org.spongycastle.pqc.math.linearalgebra", ptrTable, methods, fields, 7, 0x1, 67, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial;
}

+ (void)initialize {
  if (self == [OrgSpongycastlePqcMathLinearalgebraGF2Polynomial class]) {
    OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_rand = new_JavaUtilRandom_init();
    OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_parity = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false, false, true, true, false, true, false, false, true, false, true, true, false, true, false, false, true, true, false, false, true, false, true, true, false } count:256];
    OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_squaringTable = [IOSShortArray newArrayWithShorts:(jshort[]){ (jint) 0x0000, (jint) 0x0001, (jint) 0x0004, (jint) 0x0005, (jint) 0x0010, (jint) 0x0011, (jint) 0x0014, (jint) 0x0015, (jint) 0x0040, (jint) 0x0041, (jint) 0x0044, (jint) 0x0045, (jint) 0x0050, (jint) 0x0051, (jint) 0x0054, (jint) 0x0055, (jint) 0x0100, (jint) 0x0101, (jint) 0x0104, (jint) 0x0105, (jint) 0x0110, (jint) 0x0111, (jint) 0x0114, (jint) 0x0115, (jint) 0x0140, (jint) 0x0141, (jint) 0x0144, (jint) 0x0145, (jint) 0x0150, (jint) 0x0151, (jint) 0x0154, (jint) 0x0155, (jint) 0x0400, (jint) 0x0401, (jint) 0x0404, (jint) 0x0405, (jint) 0x0410, (jint) 0x0411, (jint) 0x0414, (jint) 0x0415, (jint) 0x0440, (jint) 0x0441, (jint) 0x0444, (jint) 0x0445, (jint) 0x0450, (jint) 0x0451, (jint) 0x0454, (jint) 0x0455, (jint) 0x0500, (jint) 0x0501, (jint) 0x0504, (jint) 0x0505, (jint) 0x0510, (jint) 0x0511, (jint) 0x0514, (jint) 0x0515, (jint) 0x0540, (jint) 0x0541, (jint) 0x0544, (jint) 0x0545, (jint) 0x0550, (jint) 0x0551, (jint) 0x0554, (jint) 0x0555, (jint) 0x1000, (jint) 0x1001, (jint) 0x1004, (jint) 0x1005, (jint) 0x1010, (jint) 0x1011, (jint) 0x1014, (jint) 0x1015, (jint) 0x1040, (jint) 0x1041, (jint) 0x1044, (jint) 0x1045, (jint) 0x1050, (jint) 0x1051, (jint) 0x1054, (jint) 0x1055, (jint) 0x1100, (jint) 0x1101, (jint) 0x1104, (jint) 0x1105, (jint) 0x1110, (jint) 0x1111, (jint) 0x1114, (jint) 0x1115, (jint) 0x1140, (jint) 0x1141, (jint) 0x1144, (jint) 0x1145, (jint) 0x1150, (jint) 0x1151, (jint) 0x1154, (jint) 0x1155, (jint) 0x1400, (jint) 0x1401, (jint) 0x1404, (jint) 0x1405, (jint) 0x1410, (jint) 0x1411, (jint) 0x1414, (jint) 0x1415, (jint) 0x1440, (jint) 0x1441, (jint) 0x1444, (jint) 0x1445, (jint) 0x1450, (jint) 0x1451, (jint) 0x1454, (jint) 0x1455, (jint) 0x1500, (jint) 0x1501, (jint) 0x1504, (jint) 0x1505, (jint) 0x1510, (jint) 0x1511, (jint) 0x1514, (jint) 0x1515, (jint) 0x1540, (jint) 0x1541, (jint) 0x1544, (jint) 0x1545, (jint) 0x1550, (jint) 0x1551, (jint) 0x1554, (jint) 0x1555, (jint) 0x4000, (jint) 0x4001, (jint) 0x4004, (jint) 0x4005, (jint) 0x4010, (jint) 0x4011, (jint) 0x4014, (jint) 0x4015, (jint) 0x4040, (jint) 0x4041, (jint) 0x4044, (jint) 0x4045, (jint) 0x4050, (jint) 0x4051, (jint) 0x4054, (jint) 0x4055, (jint) 0x4100, (jint) 0x4101, (jint) 0x4104, (jint) 0x4105, (jint) 0x4110, (jint) 0x4111, (jint) 0x4114, (jint) 0x4115, (jint) 0x4140, (jint) 0x4141, (jint) 0x4144, (jint) 0x4145, (jint) 0x4150, (jint) 0x4151, (jint) 0x4154, (jint) 0x4155, (jint) 0x4400, (jint) 0x4401, (jint) 0x4404, (jint) 0x4405, (jint) 0x4410, (jint) 0x4411, (jint) 0x4414, (jint) 0x4415, (jint) 0x4440, (jint) 0x4441, (jint) 0x4444, (jint) 0x4445, (jint) 0x4450, (jint) 0x4451, (jint) 0x4454, (jint) 0x4455, (jint) 0x4500, (jint) 0x4501, (jint) 0x4504, (jint) 0x4505, (jint) 0x4510, (jint) 0x4511, (jint) 0x4514, (jint) 0x4515, (jint) 0x4540, (jint) 0x4541, (jint) 0x4544, (jint) 0x4545, (jint) 0x4550, (jint) 0x4551, (jint) 0x4554, (jint) 0x4555, (jint) 0x5000, (jint) 0x5001, (jint) 0x5004, (jint) 0x5005, (jint) 0x5010, (jint) 0x5011, (jint) 0x5014, (jint) 0x5015, (jint) 0x5040, (jint) 0x5041, (jint) 0x5044, (jint) 0x5045, (jint) 0x5050, (jint) 0x5051, (jint) 0x5054, (jint) 0x5055, (jint) 0x5100, (jint) 0x5101, (jint) 0x5104, (jint) 0x5105, (jint) 0x5110, (jint) 0x5111, (jint) 0x5114, (jint) 0x5115, (jint) 0x5140, (jint) 0x5141, (jint) 0x5144, (jint) 0x5145, (jint) 0x5150, (jint) 0x5151, (jint) 0x5154, (jint) 0x5155, (jint) 0x5400, (jint) 0x5401, (jint) 0x5404, (jint) 0x5405, (jint) 0x5410, (jint) 0x5411, (jint) 0x5414, (jint) 0x5415, (jint) 0x5440, (jint) 0x5441, (jint) 0x5444, (jint) 0x5445, (jint) 0x5450, (jint) 0x5451, (jint) 0x5454, (jint) 0x5455, (jint) 0x5500, (jint) 0x5501, (jint) 0x5504, (jint) 0x5505, (jint) 0x5510, (jint) 0x5511, (jint) 0x5514, (jint) 0x5515, (jint) 0x5540, (jint) 0x5541, (jint) 0x5544, (jint) 0x5545, (jint) 0x5550, (jint) 0x5551, (jint) 0x5554, (jint) 0x5555 } count:256];
    OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_bitMask = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x00000001, (jint) 0x00000002, (jint) 0x00000004, (jint) 0x00000008, (jint) 0x00000010, (jint) 0x00000020, (jint) 0x00000040, (jint) 0x00000080, (jint) 0x00000100, (jint) 0x00000200, (jint) 0x00000400, (jint) 0x00000800, (jint) 0x00001000, (jint) 0x00002000, (jint) 0x00004000, (jint) 0x00008000, (jint) 0x00010000, (jint) 0x00020000, (jint) 0x00040000, (jint) 0x00080000, (jint) 0x00100000, (jint) 0x00200000, (jint) 0x00400000, (jint) 0x00800000, (jint) 0x01000000, (jint) 0x02000000, (jint) 0x04000000, (jint) 0x08000000, (jint) 0x10000000, (jint) 0x20000000, (jint) 0x40000000, -0x7fffffff - 1, (jint) 0x00000000 } count:33];
    OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_reverseRightMask = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x00000000, (jint) 0x00000001, (jint) 0x00000003, (jint) 0x00000007, (jint) 0x0000000f, (jint) 0x0000001f, (jint) 0x0000003f, (jint) 0x0000007f, (jint) 0x000000ff, (jint) 0x000001ff, (jint) 0x000003ff, (jint) 0x000007ff, (jint) 0x00000fff, (jint) 0x00001fff, (jint) 0x00003fff, (jint) 0x00007fff, (jint) 0x0000ffff, (jint) 0x0001ffff, (jint) 0x0003ffff, (jint) 0x0007ffff, (jint) 0x000fffff, (jint) 0x001fffff, (jint) 0x003fffff, (jint) 0x007fffff, (jint) 0x00ffffff, (jint) 0x01ffffff, (jint) 0x03ffffff, (jint) 0x07ffffff, (jint) 0x0fffffff, (jint) 0x1fffffff, (jint) 0x3fffffff, (jint) 0x7fffffff, (jint) 0xffffffff } count:33];
    J2OBJC_SET_INITIALIZED(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial)
  }
}

@end

void OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self, jint length) {
  NSObject_init(self);
  jint l = length;
  if (l < 1) {
    l = 1;
  }
  self->blocks_ = (JreRShift32((l - 1), 5)) + 1;
  self->value_ = [IOSIntArray newArrayWithLength:self->blocks_];
  self->len_ = l;
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(jint length) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, initWithInt_, length)
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *create_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(jint length) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, initWithInt_, length)
}

void OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withJavaUtilRandom_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self, jint length, JavaUtilRandom *rand) {
  NSObject_init(self);
  jint l = length;
  if (l < 1) {
    l = 1;
  }
  self->blocks_ = (JreRShift32((l - 1), 5)) + 1;
  self->value_ = [IOSIntArray newArrayWithLength:self->blocks_];
  self->len_ = l;
  [self randomizeWithJavaUtilRandom:rand];
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withJavaUtilRandom_(jint length, JavaUtilRandom *rand) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, initWithInt_withJavaUtilRandom_, length, rand)
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *create_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withJavaUtilRandom_(jint length, JavaUtilRandom *rand) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, initWithInt_withJavaUtilRandom_, length, rand)
}

void OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withNSString_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self, jint length, NSString *value) {
  NSObject_init(self);
  jint l = length;
  if (l < 1) {
    l = 1;
  }
  self->blocks_ = (JreRShift32((l - 1), 5)) + 1;
  self->value_ = [IOSIntArray newArrayWithLength:self->blocks_];
  self->len_ = l;
  if ([((NSString *) nil_chk(value)) java_equalsIgnoreCase:@"ZERO"]) {
    [self assignZero];
  }
  else if ([value java_equalsIgnoreCase:@"ONE"]) {
    [self assignOne];
  }
  else if ([value java_equalsIgnoreCase:@"RANDOM"]) {
    [self randomize];
  }
  else if ([value java_equalsIgnoreCase:@"X"]) {
    [self assignX];
  }
  else if ([value java_equalsIgnoreCase:@"ALL"]) {
    [self assignAll];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Error: GF2Polynomial was called using ", value, @" as value!"));
  }
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withNSString_(jint length, NSString *value) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, initWithInt_withNSString_, length, value)
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *create_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withNSString_(jint length, NSString *value) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, initWithInt_withNSString_, length, value)
}

void OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withIntArray_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self, jint length, IOSIntArray *bs) {
  NSObject_init(self);
  jint leng = length;
  if (leng < 1) {
    leng = 1;
  }
  self->blocks_ = (JreRShift32((leng - 1), 5)) + 1;
  self->value_ = [IOSIntArray newArrayWithLength:self->blocks_];
  self->len_ = leng;
  jint l = JavaLangMath_minWithInt_withInt_(self->blocks_, ((IOSIntArray *) nil_chk(bs))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bs, 0, self->value_, 0, l);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_zeroUnusedBits(self);
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withIntArray_(jint length, IOSIntArray *bs) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, initWithInt_withIntArray_, length, bs)
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *create_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withIntArray_(jint length, IOSIntArray *bs) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, initWithInt_withIntArray_, length, bs)
}

void OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withByteArray_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self, jint length, IOSByteArray *os) {
  NSObject_init(self);
  jint l = length;
  if (l < 1) {
    l = 1;
  }
  self->blocks_ = (JreRShift32((l - 1), 5)) + 1;
  self->value_ = [IOSIntArray newArrayWithLength:self->blocks_];
  self->len_ = l;
  jint i;
  jint m;
  jint k = JavaLangMath_minWithInt_withInt_((JreRShift32((((IOSByteArray *) nil_chk(os))->size_ - 1), 2)) + 1, self->blocks_);
  for (i = 0; i < k - 1; i++) {
    m = os->size_ - (JreLShift32(i, 2)) - 1;
    *IOSIntArray_GetRef(nil_chk(self->value_), i) = (IOSByteArray_Get(os, m)) & (jint) 0x000000ff;
    *IOSIntArray_GetRef(self->value_, i) |= (JreLShift32(IOSByteArray_Get(os, m - 1), 8)) & (jint) 0x0000ff00;
    *IOSIntArray_GetRef(self->value_, i) |= (JreLShift32(IOSByteArray_Get(os, m - 2), 16)) & (jint) 0x00ff0000;
    *IOSIntArray_GetRef(self->value_, i) |= (JreLShift32(IOSByteArray_Get(os, m - 3), 24)) & (jint) 0xff000000;
  }
  i = k - 1;
  m = os->size_ - (JreLShift32(i, 2)) - 1;
  *IOSIntArray_GetRef(nil_chk(self->value_), i) = IOSByteArray_Get(os, m) & (jint) 0x000000ff;
  if (m > 0) {
    *IOSIntArray_GetRef(self->value_, i) |= (JreLShift32(IOSByteArray_Get(os, m - 1), 8)) & (jint) 0x0000ff00;
  }
  if (m > 1) {
    *IOSIntArray_GetRef(self->value_, i) |= (JreLShift32(IOSByteArray_Get(os, m - 2), 16)) & (jint) 0x00ff0000;
  }
  if (m > 2) {
    *IOSIntArray_GetRef(self->value_, i) |= (JreLShift32(IOSByteArray_Get(os, m - 3), 24)) & (jint) 0xff000000;
  }
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_zeroUnusedBits(self);
  [self reduceN];
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withByteArray_(jint length, IOSByteArray *os) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, initWithInt_withByteArray_, length, os)
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *create_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withByteArray_(jint length, IOSByteArray *os) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, initWithInt_withByteArray_, length, os)
}

void OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withJavaMathBigInteger_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self, jint length, JavaMathBigInteger *bi) {
  NSObject_init(self);
  jint l = length;
  if (l < 1) {
    l = 1;
  }
  self->blocks_ = (JreRShift32((l - 1), 5)) + 1;
  self->value_ = [IOSIntArray newArrayWithLength:self->blocks_];
  self->len_ = l;
  jint i;
  IOSByteArray *val = [((JavaMathBigInteger *) nil_chk(bi)) toByteArray];
  if (IOSByteArray_Get(nil_chk(val), 0) == 0) {
    IOSByteArray *dummy = [IOSByteArray newArrayWithLength:val->size_ - 1];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(val, 1, dummy, 0, dummy->size_);
    val = dummy;
  }
  jint ov = val->size_ & (jint) 0x03;
  jint k = (JreRShift32((val->size_ - 1), 2)) + 1;
  for (i = 0; i < ov; i++) {
    *IOSIntArray_GetRef(nil_chk(self->value_), k - 1) |= JreLShift32((IOSByteArray_Get(val, i) & (jint) 0x000000ff), (JreLShift32((ov - 1 - i), 3)));
  }
  jint m = 0;
  for (i = 0; i <= JreRShift32((val->size_ - 4), 2); i++) {
    m = val->size_ - 1 - (JreLShift32(i, 2));
    *IOSIntArray_GetRef(nil_chk(self->value_), i) = (IOSByteArray_Get(val, m)) & (jint) 0x000000ff;
    *IOSIntArray_GetRef(self->value_, i) |= (JreLShift32((IOSByteArray_Get(val, m - 1)), 8)) & (jint) 0x0000ff00;
    *IOSIntArray_GetRef(self->value_, i) |= (JreLShift32((IOSByteArray_Get(val, m - 2)), 16)) & (jint) 0x00ff0000;
    *IOSIntArray_GetRef(self->value_, i) |= (JreLShift32((IOSByteArray_Get(val, m - 3)), 24)) & (jint) 0xff000000;
  }
  if ((self->len_ & (jint) 0x1f) != 0) {
    *IOSIntArray_GetRef(nil_chk(self->value_), self->blocks_ - 1) &= IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_reverseRightMask), self->len_ & (jint) 0x1f);
  }
  [self reduceN];
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withJavaMathBigInteger_(jint length, JavaMathBigInteger *bi) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, initWithInt_withJavaMathBigInteger_, length, bi)
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *create_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_withJavaMathBigInteger_(jint length, JavaMathBigInteger *bi) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, initWithInt_withJavaMathBigInteger_, length, bi)
}

void OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self, OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *b) {
  NSObject_init(self);
  self->len_ = ((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b))->len_;
  self->blocks_ = b->blocks_;
  self->value_ = OrgSpongycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(b->value_);
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *b) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_, b)
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *create_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *b) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial, initWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_, b)
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_karaMultWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self, OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *b) {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *result = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(JreLShift32(self->len_, 1));
  if (self->len_ <= 32) {
    result->value_ = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult32WithInt_withInt_(IOSIntArray_Get(nil_chk(self->value_), 0), IOSIntArray_Get(((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b))->value_, 0));
    return result;
  }
  if (self->len_ <= 64) {
    result->value_ = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult64WithIntArray_withIntArray_(self->value_, ((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b))->value_);
    return result;
  }
  if (self->len_ <= 128) {
    result->value_ = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult128WithIntArray_withIntArray_(self->value_, ((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b))->value_);
    return result;
  }
  if (self->len_ <= 256) {
    result->value_ = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult256WithIntArray_withIntArray_(self->value_, ((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b))->value_);
    return result;
  }
  if (self->len_ <= 512) {
    result->value_ = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult512WithIntArray_withIntArray_(self->value_, ((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b))->value_);
    return result;
  }
  jint n = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_floorLogWithInt_(self->len_ - 1);
  n = IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_bitMask), n);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *a0 = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_lowerWithInt_(self, (JreRShift32((n - 1), 5)) + 1);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *a1 = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_upperWithInt_(self, (JreRShift32((n - 1), 5)) + 1);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *b0 = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_lowerWithInt_(nil_chk(b), (JreRShift32((n - 1), 5)) + 1);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *b1 = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_upperWithInt_(b, (JreRShift32((n - 1), 5)) + 1);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *c = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_karaMultWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(nil_chk(a1), b1);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *e = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_karaMultWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(nil_chk(a0), b0);
  [a0 addToThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:a1];
  [((OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *) nil_chk(b0)) addToThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:b1];
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *d = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_karaMultWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial_(a0, b0);
  [result shiftLeftAddThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:c withInt:JreLShift32(n, 1)];
  [result shiftLeftAddThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:c withInt:n];
  [result shiftLeftAddThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:d withInt:n];
  [result shiftLeftAddThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:e withInt:n];
  [result addToThisWithOrgSpongycastlePqcMathLinearalgebraGF2Polynomial:e];
  return result;
}

IOSIntArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult512WithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b) {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:32];
  IOSIntArray *a0 = [IOSIntArray newArrayWithLength:8];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, a0, 0, JavaLangMath_minWithInt_withInt_(8, ((IOSIntArray *) nil_chk(a))->size_));
  IOSIntArray *a1 = [IOSIntArray newArrayWithLength:8];
  if (a->size_ > 8) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 8, a1, 0, JavaLangMath_minWithInt_withInt_(8, a->size_ - 8));
  }
  IOSIntArray *b0 = [IOSIntArray newArrayWithLength:8];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, b0, 0, JavaLangMath_minWithInt_withInt_(8, ((IOSIntArray *) nil_chk(b))->size_));
  IOSIntArray *b1 = [IOSIntArray newArrayWithLength:8];
  if (b->size_ > 8) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 8, b1, 0, JavaLangMath_minWithInt_withInt_(8, b->size_ - 8));
  }
  IOSIntArray *c = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult256WithIntArray_withIntArray_(a1, b1);
  *IOSIntArray_GetRef(result, 31) ^= IOSIntArray_Get(nil_chk(c), 15);
  *IOSIntArray_GetRef(result, 30) ^= IOSIntArray_Get(c, 14);
  *IOSIntArray_GetRef(result, 29) ^= IOSIntArray_Get(c, 13);
  *IOSIntArray_GetRef(result, 28) ^= IOSIntArray_Get(c, 12);
  *IOSIntArray_GetRef(result, 27) ^= IOSIntArray_Get(c, 11);
  *IOSIntArray_GetRef(result, 26) ^= IOSIntArray_Get(c, 10);
  *IOSIntArray_GetRef(result, 25) ^= IOSIntArray_Get(c, 9);
  *IOSIntArray_GetRef(result, 24) ^= IOSIntArray_Get(c, 8);
  *IOSIntArray_GetRef(result, 23) ^= IOSIntArray_Get(c, 7) ^ IOSIntArray_Get(c, 15);
  *IOSIntArray_GetRef(result, 22) ^= IOSIntArray_Get(c, 6) ^ IOSIntArray_Get(c, 14);
  *IOSIntArray_GetRef(result, 21) ^= IOSIntArray_Get(c, 5) ^ IOSIntArray_Get(c, 13);
  *IOSIntArray_GetRef(result, 20) ^= IOSIntArray_Get(c, 4) ^ IOSIntArray_Get(c, 12);
  *IOSIntArray_GetRef(result, 19) ^= IOSIntArray_Get(c, 3) ^ IOSIntArray_Get(c, 11);
  *IOSIntArray_GetRef(result, 18) ^= IOSIntArray_Get(c, 2) ^ IOSIntArray_Get(c, 10);
  *IOSIntArray_GetRef(result, 17) ^= IOSIntArray_Get(c, 1) ^ IOSIntArray_Get(c, 9);
  *IOSIntArray_GetRef(result, 16) ^= IOSIntArray_Get(c, 0) ^ IOSIntArray_Get(c, 8);
  *IOSIntArray_GetRef(result, 15) ^= IOSIntArray_Get(c, 7);
  *IOSIntArray_GetRef(result, 14) ^= IOSIntArray_Get(c, 6);
  *IOSIntArray_GetRef(result, 13) ^= IOSIntArray_Get(c, 5);
  *IOSIntArray_GetRef(result, 12) ^= IOSIntArray_Get(c, 4);
  *IOSIntArray_GetRef(result, 11) ^= IOSIntArray_Get(c, 3);
  *IOSIntArray_GetRef(result, 10) ^= IOSIntArray_Get(c, 2);
  *IOSIntArray_GetRef(result, 9) ^= IOSIntArray_Get(c, 1);
  *IOSIntArray_GetRef(result, 8) ^= IOSIntArray_Get(c, 0);
  *IOSIntArray_GetRef(a1, 0) ^= IOSIntArray_Get(a0, 0);
  *IOSIntArray_GetRef(a1, 1) ^= IOSIntArray_Get(a0, 1);
  *IOSIntArray_GetRef(a1, 2) ^= IOSIntArray_Get(a0, 2);
  *IOSIntArray_GetRef(a1, 3) ^= IOSIntArray_Get(a0, 3);
  *IOSIntArray_GetRef(a1, 4) ^= IOSIntArray_Get(a0, 4);
  *IOSIntArray_GetRef(a1, 5) ^= IOSIntArray_Get(a0, 5);
  *IOSIntArray_GetRef(a1, 6) ^= IOSIntArray_Get(a0, 6);
  *IOSIntArray_GetRef(a1, 7) ^= IOSIntArray_Get(a0, 7);
  *IOSIntArray_GetRef(b1, 0) ^= IOSIntArray_Get(b0, 0);
  *IOSIntArray_GetRef(b1, 1) ^= IOSIntArray_Get(b0, 1);
  *IOSIntArray_GetRef(b1, 2) ^= IOSIntArray_Get(b0, 2);
  *IOSIntArray_GetRef(b1, 3) ^= IOSIntArray_Get(b0, 3);
  *IOSIntArray_GetRef(b1, 4) ^= IOSIntArray_Get(b0, 4);
  *IOSIntArray_GetRef(b1, 5) ^= IOSIntArray_Get(b0, 5);
  *IOSIntArray_GetRef(b1, 6) ^= IOSIntArray_Get(b0, 6);
  *IOSIntArray_GetRef(b1, 7) ^= IOSIntArray_Get(b0, 7);
  IOSIntArray *d = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult256WithIntArray_withIntArray_(a1, b1);
  *IOSIntArray_GetRef(result, 23) ^= IOSIntArray_Get(nil_chk(d), 15);
  *IOSIntArray_GetRef(result, 22) ^= IOSIntArray_Get(d, 14);
  *IOSIntArray_GetRef(result, 21) ^= IOSIntArray_Get(d, 13);
  *IOSIntArray_GetRef(result, 20) ^= IOSIntArray_Get(d, 12);
  *IOSIntArray_GetRef(result, 19) ^= IOSIntArray_Get(d, 11);
  *IOSIntArray_GetRef(result, 18) ^= IOSIntArray_Get(d, 10);
  *IOSIntArray_GetRef(result, 17) ^= IOSIntArray_Get(d, 9);
  *IOSIntArray_GetRef(result, 16) ^= IOSIntArray_Get(d, 8);
  *IOSIntArray_GetRef(result, 15) ^= IOSIntArray_Get(d, 7);
  *IOSIntArray_GetRef(result, 14) ^= IOSIntArray_Get(d, 6);
  *IOSIntArray_GetRef(result, 13) ^= IOSIntArray_Get(d, 5);
  *IOSIntArray_GetRef(result, 12) ^= IOSIntArray_Get(d, 4);
  *IOSIntArray_GetRef(result, 11) ^= IOSIntArray_Get(d, 3);
  *IOSIntArray_GetRef(result, 10) ^= IOSIntArray_Get(d, 2);
  *IOSIntArray_GetRef(result, 9) ^= IOSIntArray_Get(d, 1);
  *IOSIntArray_GetRef(result, 8) ^= IOSIntArray_Get(d, 0);
  IOSIntArray *e = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult256WithIntArray_withIntArray_(a0, b0);
  *IOSIntArray_GetRef(result, 23) ^= IOSIntArray_Get(nil_chk(e), 15);
  *IOSIntArray_GetRef(result, 22) ^= IOSIntArray_Get(e, 14);
  *IOSIntArray_GetRef(result, 21) ^= IOSIntArray_Get(e, 13);
  *IOSIntArray_GetRef(result, 20) ^= IOSIntArray_Get(e, 12);
  *IOSIntArray_GetRef(result, 19) ^= IOSIntArray_Get(e, 11);
  *IOSIntArray_GetRef(result, 18) ^= IOSIntArray_Get(e, 10);
  *IOSIntArray_GetRef(result, 17) ^= IOSIntArray_Get(e, 9);
  *IOSIntArray_GetRef(result, 16) ^= IOSIntArray_Get(e, 8);
  *IOSIntArray_GetRef(result, 15) ^= IOSIntArray_Get(e, 7) ^ IOSIntArray_Get(e, 15);
  *IOSIntArray_GetRef(result, 14) ^= IOSIntArray_Get(e, 6) ^ IOSIntArray_Get(e, 14);
  *IOSIntArray_GetRef(result, 13) ^= IOSIntArray_Get(e, 5) ^ IOSIntArray_Get(e, 13);
  *IOSIntArray_GetRef(result, 12) ^= IOSIntArray_Get(e, 4) ^ IOSIntArray_Get(e, 12);
  *IOSIntArray_GetRef(result, 11) ^= IOSIntArray_Get(e, 3) ^ IOSIntArray_Get(e, 11);
  *IOSIntArray_GetRef(result, 10) ^= IOSIntArray_Get(e, 2) ^ IOSIntArray_Get(e, 10);
  *IOSIntArray_GetRef(result, 9) ^= IOSIntArray_Get(e, 1) ^ IOSIntArray_Get(e, 9);
  *IOSIntArray_GetRef(result, 8) ^= IOSIntArray_Get(e, 0) ^ IOSIntArray_Get(e, 8);
  *IOSIntArray_GetRef(result, 7) ^= IOSIntArray_Get(e, 7);
  *IOSIntArray_GetRef(result, 6) ^= IOSIntArray_Get(e, 6);
  *IOSIntArray_GetRef(result, 5) ^= IOSIntArray_Get(e, 5);
  *IOSIntArray_GetRef(result, 4) ^= IOSIntArray_Get(e, 4);
  *IOSIntArray_GetRef(result, 3) ^= IOSIntArray_Get(e, 3);
  *IOSIntArray_GetRef(result, 2) ^= IOSIntArray_Get(e, 2);
  *IOSIntArray_GetRef(result, 1) ^= IOSIntArray_Get(e, 1);
  *IOSIntArray_GetRef(result, 0) ^= IOSIntArray_Get(e, 0);
  return result;
}

IOSIntArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult256WithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b) {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:16];
  IOSIntArray *a0 = [IOSIntArray newArrayWithLength:4];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, a0, 0, JavaLangMath_minWithInt_withInt_(4, ((IOSIntArray *) nil_chk(a))->size_));
  IOSIntArray *a1 = [IOSIntArray newArrayWithLength:4];
  if (a->size_ > 4) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 4, a1, 0, JavaLangMath_minWithInt_withInt_(4, a->size_ - 4));
  }
  IOSIntArray *b0 = [IOSIntArray newArrayWithLength:4];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, b0, 0, JavaLangMath_minWithInt_withInt_(4, ((IOSIntArray *) nil_chk(b))->size_));
  IOSIntArray *b1 = [IOSIntArray newArrayWithLength:4];
  if (b->size_ > 4) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 4, b1, 0, JavaLangMath_minWithInt_withInt_(4, b->size_ - 4));
  }
  if (IOSIntArray_Get(a1, 3) == 0 && IOSIntArray_Get(a1, 2) == 0 && IOSIntArray_Get(b1, 3) == 0 && IOSIntArray_Get(b1, 2) == 0) {
    if (IOSIntArray_Get(a1, 1) == 0 && IOSIntArray_Get(b1, 1) == 0) {
      if (IOSIntArray_Get(a1, 0) != 0 || IOSIntArray_Get(b1, 0) != 0) {
        IOSIntArray *c = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult32WithInt_withInt_(IOSIntArray_Get(a1, 0), IOSIntArray_Get(b1, 0));
        *IOSIntArray_GetRef(result, 9) ^= IOSIntArray_Get(nil_chk(c), 1);
        *IOSIntArray_GetRef(result, 8) ^= IOSIntArray_Get(c, 0);
        *IOSIntArray_GetRef(result, 5) ^= IOSIntArray_Get(c, 1);
        *IOSIntArray_GetRef(result, 4) ^= IOSIntArray_Get(c, 0);
      }
    }
    else {
      IOSIntArray *c = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult64WithIntArray_withIntArray_(a1, b1);
      *IOSIntArray_GetRef(result, 11) ^= IOSIntArray_Get(nil_chk(c), 3);
      *IOSIntArray_GetRef(result, 10) ^= IOSIntArray_Get(c, 2);
      *IOSIntArray_GetRef(result, 9) ^= IOSIntArray_Get(c, 1);
      *IOSIntArray_GetRef(result, 8) ^= IOSIntArray_Get(c, 0);
      *IOSIntArray_GetRef(result, 7) ^= IOSIntArray_Get(c, 3);
      *IOSIntArray_GetRef(result, 6) ^= IOSIntArray_Get(c, 2);
      *IOSIntArray_GetRef(result, 5) ^= IOSIntArray_Get(c, 1);
      *IOSIntArray_GetRef(result, 4) ^= IOSIntArray_Get(c, 0);
    }
  }
  else {
    IOSIntArray *c = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult128WithIntArray_withIntArray_(a1, b1);
    *IOSIntArray_GetRef(result, 15) ^= IOSIntArray_Get(nil_chk(c), 7);
    *IOSIntArray_GetRef(result, 14) ^= IOSIntArray_Get(c, 6);
    *IOSIntArray_GetRef(result, 13) ^= IOSIntArray_Get(c, 5);
    *IOSIntArray_GetRef(result, 12) ^= IOSIntArray_Get(c, 4);
    *IOSIntArray_GetRef(result, 11) ^= IOSIntArray_Get(c, 3) ^ IOSIntArray_Get(c, 7);
    *IOSIntArray_GetRef(result, 10) ^= IOSIntArray_Get(c, 2) ^ IOSIntArray_Get(c, 6);
    *IOSIntArray_GetRef(result, 9) ^= IOSIntArray_Get(c, 1) ^ IOSIntArray_Get(c, 5);
    *IOSIntArray_GetRef(result, 8) ^= IOSIntArray_Get(c, 0) ^ IOSIntArray_Get(c, 4);
    *IOSIntArray_GetRef(result, 7) ^= IOSIntArray_Get(c, 3);
    *IOSIntArray_GetRef(result, 6) ^= IOSIntArray_Get(c, 2);
    *IOSIntArray_GetRef(result, 5) ^= IOSIntArray_Get(c, 1);
    *IOSIntArray_GetRef(result, 4) ^= IOSIntArray_Get(c, 0);
  }
  *IOSIntArray_GetRef(a1, 0) ^= IOSIntArray_Get(a0, 0);
  *IOSIntArray_GetRef(a1, 1) ^= IOSIntArray_Get(a0, 1);
  *IOSIntArray_GetRef(a1, 2) ^= IOSIntArray_Get(a0, 2);
  *IOSIntArray_GetRef(a1, 3) ^= IOSIntArray_Get(a0, 3);
  *IOSIntArray_GetRef(b1, 0) ^= IOSIntArray_Get(b0, 0);
  *IOSIntArray_GetRef(b1, 1) ^= IOSIntArray_Get(b0, 1);
  *IOSIntArray_GetRef(b1, 2) ^= IOSIntArray_Get(b0, 2);
  *IOSIntArray_GetRef(b1, 3) ^= IOSIntArray_Get(b0, 3);
  IOSIntArray *d = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult128WithIntArray_withIntArray_(a1, b1);
  *IOSIntArray_GetRef(result, 11) ^= IOSIntArray_Get(nil_chk(d), 7);
  *IOSIntArray_GetRef(result, 10) ^= IOSIntArray_Get(d, 6);
  *IOSIntArray_GetRef(result, 9) ^= IOSIntArray_Get(d, 5);
  *IOSIntArray_GetRef(result, 8) ^= IOSIntArray_Get(d, 4);
  *IOSIntArray_GetRef(result, 7) ^= IOSIntArray_Get(d, 3);
  *IOSIntArray_GetRef(result, 6) ^= IOSIntArray_Get(d, 2);
  *IOSIntArray_GetRef(result, 5) ^= IOSIntArray_Get(d, 1);
  *IOSIntArray_GetRef(result, 4) ^= IOSIntArray_Get(d, 0);
  IOSIntArray *e = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult128WithIntArray_withIntArray_(a0, b0);
  *IOSIntArray_GetRef(result, 11) ^= IOSIntArray_Get(nil_chk(e), 7);
  *IOSIntArray_GetRef(result, 10) ^= IOSIntArray_Get(e, 6);
  *IOSIntArray_GetRef(result, 9) ^= IOSIntArray_Get(e, 5);
  *IOSIntArray_GetRef(result, 8) ^= IOSIntArray_Get(e, 4);
  *IOSIntArray_GetRef(result, 7) ^= IOSIntArray_Get(e, 3) ^ IOSIntArray_Get(e, 7);
  *IOSIntArray_GetRef(result, 6) ^= IOSIntArray_Get(e, 2) ^ IOSIntArray_Get(e, 6);
  *IOSIntArray_GetRef(result, 5) ^= IOSIntArray_Get(e, 1) ^ IOSIntArray_Get(e, 5);
  *IOSIntArray_GetRef(result, 4) ^= IOSIntArray_Get(e, 0) ^ IOSIntArray_Get(e, 4);
  *IOSIntArray_GetRef(result, 3) ^= IOSIntArray_Get(e, 3);
  *IOSIntArray_GetRef(result, 2) ^= IOSIntArray_Get(e, 2);
  *IOSIntArray_GetRef(result, 1) ^= IOSIntArray_Get(e, 1);
  *IOSIntArray_GetRef(result, 0) ^= IOSIntArray_Get(e, 0);
  return result;
}

IOSIntArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult128WithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b) {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:8];
  IOSIntArray *a0 = [IOSIntArray newArrayWithLength:2];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, a0, 0, JavaLangMath_minWithInt_withInt_(2, ((IOSIntArray *) nil_chk(a))->size_));
  IOSIntArray *a1 = [IOSIntArray newArrayWithLength:2];
  if (a->size_ > 2) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 2, a1, 0, JavaLangMath_minWithInt_withInt_(2, a->size_ - 2));
  }
  IOSIntArray *b0 = [IOSIntArray newArrayWithLength:2];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, b0, 0, JavaLangMath_minWithInt_withInt_(2, ((IOSIntArray *) nil_chk(b))->size_));
  IOSIntArray *b1 = [IOSIntArray newArrayWithLength:2];
  if (b->size_ > 2) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 2, b1, 0, JavaLangMath_minWithInt_withInt_(2, b->size_ - 2));
  }
  if (IOSIntArray_Get(a1, 1) == 0 && IOSIntArray_Get(b1, 1) == 0) {
    if (IOSIntArray_Get(a1, 0) != 0 || IOSIntArray_Get(b1, 0) != 0) {
      IOSIntArray *c = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult32WithInt_withInt_(IOSIntArray_Get(a1, 0), IOSIntArray_Get(b1, 0));
      *IOSIntArray_GetRef(result, 5) ^= IOSIntArray_Get(nil_chk(c), 1);
      *IOSIntArray_GetRef(result, 4) ^= IOSIntArray_Get(c, 0);
      *IOSIntArray_GetRef(result, 3) ^= IOSIntArray_Get(c, 1);
      *IOSIntArray_GetRef(result, 2) ^= IOSIntArray_Get(c, 0);
    }
  }
  else {
    IOSIntArray *c = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult64WithIntArray_withIntArray_(a1, b1);
    *IOSIntArray_GetRef(result, 7) ^= IOSIntArray_Get(nil_chk(c), 3);
    *IOSIntArray_GetRef(result, 6) ^= IOSIntArray_Get(c, 2);
    *IOSIntArray_GetRef(result, 5) ^= IOSIntArray_Get(c, 1) ^ IOSIntArray_Get(c, 3);
    *IOSIntArray_GetRef(result, 4) ^= IOSIntArray_Get(c, 0) ^ IOSIntArray_Get(c, 2);
    *IOSIntArray_GetRef(result, 3) ^= IOSIntArray_Get(c, 1);
    *IOSIntArray_GetRef(result, 2) ^= IOSIntArray_Get(c, 0);
  }
  *IOSIntArray_GetRef(a1, 0) ^= IOSIntArray_Get(a0, 0);
  *IOSIntArray_GetRef(a1, 1) ^= IOSIntArray_Get(a0, 1);
  *IOSIntArray_GetRef(b1, 0) ^= IOSIntArray_Get(b0, 0);
  *IOSIntArray_GetRef(b1, 1) ^= IOSIntArray_Get(b0, 1);
  if (IOSIntArray_Get(a1, 1) == 0 && IOSIntArray_Get(b1, 1) == 0) {
    IOSIntArray *d = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult32WithInt_withInt_(IOSIntArray_Get(a1, 0), IOSIntArray_Get(b1, 0));
    *IOSIntArray_GetRef(result, 3) ^= IOSIntArray_Get(nil_chk(d), 1);
    *IOSIntArray_GetRef(result, 2) ^= IOSIntArray_Get(d, 0);
  }
  else {
    IOSIntArray *d = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult64WithIntArray_withIntArray_(a1, b1);
    *IOSIntArray_GetRef(result, 5) ^= IOSIntArray_Get(nil_chk(d), 3);
    *IOSIntArray_GetRef(result, 4) ^= IOSIntArray_Get(d, 2);
    *IOSIntArray_GetRef(result, 3) ^= IOSIntArray_Get(d, 1);
    *IOSIntArray_GetRef(result, 2) ^= IOSIntArray_Get(d, 0);
  }
  if (IOSIntArray_Get(a0, 1) == 0 && IOSIntArray_Get(b0, 1) == 0) {
    IOSIntArray *e = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult32WithInt_withInt_(IOSIntArray_Get(a0, 0), IOSIntArray_Get(b0, 0));
    *IOSIntArray_GetRef(result, 3) ^= IOSIntArray_Get(nil_chk(e), 1);
    *IOSIntArray_GetRef(result, 2) ^= IOSIntArray_Get(e, 0);
    *IOSIntArray_GetRef(result, 1) ^= IOSIntArray_Get(e, 1);
    *IOSIntArray_GetRef(result, 0) ^= IOSIntArray_Get(e, 0);
  }
  else {
    IOSIntArray *e = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult64WithIntArray_withIntArray_(a0, b0);
    *IOSIntArray_GetRef(result, 5) ^= IOSIntArray_Get(nil_chk(e), 3);
    *IOSIntArray_GetRef(result, 4) ^= IOSIntArray_Get(e, 2);
    *IOSIntArray_GetRef(result, 3) ^= IOSIntArray_Get(e, 1) ^ IOSIntArray_Get(e, 3);
    *IOSIntArray_GetRef(result, 2) ^= IOSIntArray_Get(e, 0) ^ IOSIntArray_Get(e, 2);
    *IOSIntArray_GetRef(result, 1) ^= IOSIntArray_Get(e, 1);
    *IOSIntArray_GetRef(result, 0) ^= IOSIntArray_Get(e, 0);
  }
  return result;
}

IOSIntArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult64WithIntArray_withIntArray_(IOSIntArray *a, IOSIntArray *b) {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:4];
  jint a0 = IOSIntArray_Get(nil_chk(a), 0);
  jint a1 = 0;
  if (a->size_ > 1) {
    a1 = IOSIntArray_Get(a, 1);
  }
  jint b0 = IOSIntArray_Get(nil_chk(b), 0);
  jint b1 = 0;
  if (b->size_ > 1) {
    b1 = IOSIntArray_Get(b, 1);
  }
  if (a1 != 0 || b1 != 0) {
    IOSIntArray *c = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult32WithInt_withInt_(a1, b1);
    *IOSIntArray_GetRef(result, 3) ^= IOSIntArray_Get(nil_chk(c), 1);
    *IOSIntArray_GetRef(result, 2) ^= IOSIntArray_Get(c, 0) ^ IOSIntArray_Get(c, 1);
    *IOSIntArray_GetRef(result, 1) ^= IOSIntArray_Get(c, 0);
  }
  IOSIntArray *d = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult32WithInt_withInt_(a0 ^ a1, b0 ^ b1);
  *IOSIntArray_GetRef(result, 2) ^= IOSIntArray_Get(nil_chk(d), 1);
  *IOSIntArray_GetRef(result, 1) ^= IOSIntArray_Get(d, 0);
  IOSIntArray *e = OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult32WithInt_withInt_(a0, b0);
  *IOSIntArray_GetRef(result, 2) ^= IOSIntArray_Get(nil_chk(e), 1);
  *IOSIntArray_GetRef(result, 1) ^= IOSIntArray_Get(e, 0) ^ IOSIntArray_Get(e, 1);
  *IOSIntArray_GetRef(result, 0) ^= IOSIntArray_Get(e, 0);
  return result;
}

IOSIntArray *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_mult32WithInt_withInt_(jint a, jint b) {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:2];
  if (a == 0 || b == 0) {
    return result;
  }
  jlong b2 = b;
  b2 &= (jlong) 0x00000000ffffffffLL;
  jint i;
  jlong h = 0;
  for (i = 1; i <= 32; i++) {
    if ((a & IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_bitMask), i - 1)) != 0) {
      h ^= b2;
    }
    JreLShiftAssignLong(&b2, 1);
  }
  *IOSIntArray_GetRef(result, 1) = (jint) (JreURShift64(h, 32));
  *IOSIntArray_GetRef(result, 0) = (jint) (h & (jlong) 0x00000000ffffffffLL);
  return result;
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_upperWithInt_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self, jint k) {
  jint j = JavaLangMath_minWithInt_withInt_(k, self->blocks_ - k);
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *result = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(JreLShift32(j, 5));
  if (self->blocks_ >= k) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->value_, k, result->value_, 0, j);
  }
  return result;
}

OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_lowerWithInt_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self, jint k) {
  OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *result = new_OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_initWithInt_(JreLShift32(k, 5));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->value_, 0, result->value_, 0, JavaLangMath_minWithInt_withInt_(k, self->blocks_));
  return result;
}

void OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_zeroUnusedBits(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self) {
  if ((self->len_ & (jint) 0x1f) != 0) {
    *IOSIntArray_GetRef(nil_chk(self->value_), self->blocks_ - 1) &= IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_reverseRightMask), self->len_ & (jint) 0x1f);
  }
}

void OrgSpongycastlePqcMathLinearalgebraGF2Polynomial_doShiftBlocksLeftWithInt_(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial *self, jint b) {
  if (self->blocks_ <= ((IOSIntArray *) nil_chk(self->value_))->size_) {
    jint i;
    for (i = self->blocks_ - 1; i >= b; i--) {
      *IOSIntArray_GetRef(self->value_, i) = IOSIntArray_Get(self->value_, i - b);
    }
    for (i = 0; i < b; i++) {
      *IOSIntArray_GetRef(self->value_, i) = (jint) 0x00;
    }
  }
  else {
    IOSIntArray *result = [IOSIntArray newArrayWithLength:self->blocks_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->value_, 0, result, b, self->blocks_ - b);
    self->value_ = nil;
    self->value_ = result;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcMathLinearalgebraGF2Polynomial)
