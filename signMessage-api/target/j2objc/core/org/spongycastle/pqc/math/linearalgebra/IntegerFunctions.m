//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/math/linearalgebra/IntegerFunctions.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/pqc/math/linearalgebra/IntegerFunctions.h"

@interface OrgSpongycastlePqcMathLinearalgebraIntegerFunctions ()

- (instancetype)init;

+ (jdouble)logBKMWithDouble:(jdouble)arg;

@end

inline JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_get_ZERO(void);
static JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions, ZERO, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_get_ONE(void);
static JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions, ONE, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_get_TWO(void);
static JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions, TWO, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_get_FOUR(void);
static JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_FOUR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions, FOUR, JavaMathBigInteger *)

inline IOSIntArray *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_get_SMALL_PRIMES(void);
static IOSIntArray *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_SMALL_PRIMES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions, SMALL_PRIMES, IOSIntArray *)

inline jlong OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_get_SMALL_PRIME_PRODUCT(void);
#define OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_SMALL_PRIME_PRODUCT 152125131763605LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions, SMALL_PRIME_PRODUCT, jlong)

inline JavaSecuritySecureRandom *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_get_sr(void);
inline JavaSecuritySecureRandom *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_set_sr(JavaSecuritySecureRandom *value);
static JavaSecuritySecureRandom *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_sr;
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions, sr, JavaSecuritySecureRandom *)

inline IOSIntArray *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_get_jacobiTable(void);
static IOSIntArray *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_jacobiTable;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions, jacobiTable, IOSIntArray *)

__attribute__((unused)) static void OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_init(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions *self);

__attribute__((unused)) static OrgSpongycastlePqcMathLinearalgebraIntegerFunctions *new_OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastlePqcMathLinearalgebraIntegerFunctions *create_OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_init(void);

__attribute__((unused)) static jdouble OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_logBKMWithDouble_(jdouble arg);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions)

@implementation OrgSpongycastlePqcMathLinearalgebraIntegerFunctions

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)jacobiWithJavaMathBigInteger:(JavaMathBigInteger *)A
              withJavaMathBigInteger:(JavaMathBigInteger *)B {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_jacobiWithJavaMathBigInteger_withJavaMathBigInteger_(A, B);
}

+ (JavaMathBigInteger *)ressolWithJavaMathBigInteger:(JavaMathBigInteger *)a
                              withJavaMathBigInteger:(JavaMathBigInteger *)p {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ressolWithJavaMathBigInteger_withJavaMathBigInteger_(a, p);
}

+ (jint)gcdWithInt:(jint)u
           withInt:(jint)v {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_gcdWithInt_withInt_(u, v);
}

+ (IOSIntArray *)extGCDWithInt:(jint)a
                       withInt:(jint)b {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_extGCDWithInt_withInt_(a, b);
}

+ (JavaMathBigInteger *)divideAndRoundWithJavaMathBigInteger:(JavaMathBigInteger *)a
                                      withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_divideAndRoundWithJavaMathBigInteger_withJavaMathBigInteger_(a, b);
}

+ (IOSObjectArray *)divideAndRoundWithJavaMathBigIntegerArray:(IOSObjectArray *)a
                                       withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_divideAndRoundWithJavaMathBigIntegerArray_withJavaMathBigInteger_(a, b);
}

+ (jint)ceilLogWithJavaMathBigInteger:(JavaMathBigInteger *)a {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ceilLogWithJavaMathBigInteger_(a);
}

+ (jint)ceilLogWithInt:(jint)a {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ceilLogWithInt_(a);
}

+ (jint)ceilLog256WithInt:(jint)n {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ceilLog256WithInt_(n);
}

+ (jint)ceilLog256WithLong:(jlong)n {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ceilLog256WithLong_(n);
}

+ (jint)floorLogWithJavaMathBigInteger:(JavaMathBigInteger *)a {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_floorLogWithJavaMathBigInteger_(a);
}

+ (jint)floorLogWithInt:(jint)a {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_floorLogWithInt_(a);
}

+ (jint)maxPowerWithInt:(jint)a {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_maxPowerWithInt_(a);
}

+ (jint)bitCountWithInt:(jint)a {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_bitCountWithInt_(a);
}

+ (jint)orderWithInt:(jint)g
             withInt:(jint)p {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_orderWithInt_withInt_(g, p);
}

+ (JavaMathBigInteger *)reduceIntoWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                  withJavaMathBigInteger:(JavaMathBigInteger *)begin
                                  withJavaMathBigInteger:(JavaMathBigInteger *)end {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_reduceIntoWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(n, begin, end);
}

+ (jint)powWithInt:(jint)a
           withInt:(jint)e {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_powWithInt_withInt_(a, e);
}

+ (jlong)powWithLong:(jlong)a
             withInt:(jint)e {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_powWithLong_withInt_(a, e);
}

+ (jint)modPowWithInt:(jint)a
              withInt:(jint)e
              withInt:(jint)n {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_modPowWithInt_withInt_withInt_(a, e, n);
}

+ (IOSObjectArray *)extgcdWithJavaMathBigInteger:(JavaMathBigInteger *)a
                          withJavaMathBigInteger:(JavaMathBigInteger *)b {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_extgcdWithJavaMathBigInteger_withJavaMathBigInteger_(a, b);
}

+ (JavaMathBigInteger *)leastCommonMultipleWithJavaMathBigIntegerArray:(IOSObjectArray *)numbers {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_leastCommonMultipleWithJavaMathBigIntegerArray_(numbers);
}

+ (jlong)modWithLong:(jlong)a
            withLong:(jlong)m {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_modWithLong_withLong_(a, m);
}

+ (jint)modInverseWithInt:(jint)a
                  withInt:(jint)mod {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_modInverseWithInt_withInt_(a, mod);
}

+ (jlong)modInverseWithLong:(jlong)a
                   withLong:(jlong)mod {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_modInverseWithLong_withLong_(a, mod);
}

+ (jint)isPowerWithInt:(jint)a
               withInt:(jint)p {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_isPowerWithInt_withInt_(a, p);
}

+ (jint)leastDivWithInt:(jint)a {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_leastDivWithInt_(a);
}

+ (jboolean)isPrimeWithInt:(jint)n {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_isPrimeWithInt_(n);
}

+ (jboolean)passesSmallPrimeTestWithJavaMathBigInteger:(JavaMathBigInteger *)candidate {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_passesSmallPrimeTestWithJavaMathBigInteger_(candidate);
}

+ (jint)nextSmallerPrimeWithInt:(jint)n {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_nextSmallerPrimeWithInt_(n);
}

+ (JavaMathBigInteger *)nextProbablePrimeWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                                        withInt:(jint)certainty {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_nextProbablePrimeWithJavaMathBigInteger_withInt_(n, certainty);
}

+ (JavaMathBigInteger *)nextProbablePrimeWithJavaMathBigInteger:(JavaMathBigInteger *)n {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_nextProbablePrimeWithJavaMathBigInteger_(n);
}

+ (JavaMathBigInteger *)nextPrimeWithLong:(jlong)n {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_nextPrimeWithLong_(n);
}

+ (JavaMathBigInteger *)binomialWithInt:(jint)n
                                withInt:(jint)t {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_binomialWithInt_withInt_(n, t);
}

+ (JavaMathBigInteger *)randomizeWithJavaMathBigInteger:(JavaMathBigInteger *)upperBound {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_randomizeWithJavaMathBigInteger_(upperBound);
}

+ (JavaMathBigInteger *)randomizeWithJavaMathBigInteger:(JavaMathBigInteger *)upperBound
                           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)prng {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_randomizeWithJavaMathBigInteger_withJavaSecuritySecureRandom_(upperBound, prng);
}

+ (JavaMathBigInteger *)squareRootWithJavaMathBigInteger:(JavaMathBigInteger *)a {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_squareRootWithJavaMathBigInteger_(a);
}

+ (jfloat)intRootWithInt:(jint)base
                 withInt:(jint)root {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_intRootWithInt_withInt_(base, root);
}

+ (jfloat)floatPowWithFloat:(jfloat)f
                    withInt:(jint)i {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_floatPowWithFloat_withInt_(f, i);
}

+ (jdouble)logWithDouble:(jdouble)x {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_logWithDouble_(x);
}

+ (jdouble)logWithLong:(jlong)x {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_logWithLong_(x);
}

+ (jdouble)logBKMWithDouble:(jdouble)arg {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_logBKMWithDouble_(arg);
}

+ (jboolean)isIncreasingWithIntArray:(IOSIntArray *)a {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_isIncreasingWithIntArray_(a);
}

+ (IOSByteArray *)integerToOctetsWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_integerToOctetsWithJavaMathBigInteger_(val);
}

+ (JavaMathBigInteger *)octetsToIntegerWithByteArray:(IOSByteArray *)data
                                             withInt:(jint)offset
                                             withInt:(jint)length {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_octetsToIntegerWithByteArray_withInt_withInt_(data, offset, length);
}

+ (JavaMathBigInteger *)octetsToIntegerWithByteArray:(IOSByteArray *)data {
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_octetsToIntegerWithByteArray_(data);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 2, 1, 3, -1, -1, -1 },
    { NULL, "I", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 6, 5, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 7, 1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 9, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 14, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 14, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 15, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 16, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 17, 5, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 20, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x9, 24, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 27, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 29, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 29, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 30, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 31, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 32, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 33, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 34, 11, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 35, 36, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 35, 10, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 37, 13, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 38, 5, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 39, 10, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 39, 40, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 41, 10, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 42, 5, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 43, 44, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 45, 46, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 45, 13, -1, -1, -1, -1 },
    { NULL, "D", 0xa, 47, 46, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 48, 49, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 50, 10, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 51, 52, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 51, 53, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(jacobiWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[2].selector = @selector(ressolWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[3].selector = @selector(gcdWithInt:withInt:);
  methods[4].selector = @selector(extGCDWithInt:withInt:);
  methods[5].selector = @selector(divideAndRoundWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[6].selector = @selector(divideAndRoundWithJavaMathBigIntegerArray:withJavaMathBigInteger:);
  methods[7].selector = @selector(ceilLogWithJavaMathBigInteger:);
  methods[8].selector = @selector(ceilLogWithInt:);
  methods[9].selector = @selector(ceilLog256WithInt:);
  methods[10].selector = @selector(ceilLog256WithLong:);
  methods[11].selector = @selector(floorLogWithJavaMathBigInteger:);
  methods[12].selector = @selector(floorLogWithInt:);
  methods[13].selector = @selector(maxPowerWithInt:);
  methods[14].selector = @selector(bitCountWithInt:);
  methods[15].selector = @selector(orderWithInt:withInt:);
  methods[16].selector = @selector(reduceIntoWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[17].selector = @selector(powWithInt:withInt:);
  methods[18].selector = @selector(powWithLong:withInt:);
  methods[19].selector = @selector(modPowWithInt:withInt:withInt:);
  methods[20].selector = @selector(extgcdWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[21].selector = @selector(leastCommonMultipleWithJavaMathBigIntegerArray:);
  methods[22].selector = @selector(modWithLong:withLong:);
  methods[23].selector = @selector(modInverseWithInt:withInt:);
  methods[24].selector = @selector(modInverseWithLong:withLong:);
  methods[25].selector = @selector(isPowerWithInt:withInt:);
  methods[26].selector = @selector(leastDivWithInt:);
  methods[27].selector = @selector(isPrimeWithInt:);
  methods[28].selector = @selector(passesSmallPrimeTestWithJavaMathBigInteger:);
  methods[29].selector = @selector(nextSmallerPrimeWithInt:);
  methods[30].selector = @selector(nextProbablePrimeWithJavaMathBigInteger:withInt:);
  methods[31].selector = @selector(nextProbablePrimeWithJavaMathBigInteger:);
  methods[32].selector = @selector(nextPrimeWithLong:);
  methods[33].selector = @selector(binomialWithInt:withInt:);
  methods[34].selector = @selector(randomizeWithJavaMathBigInteger:);
  methods[35].selector = @selector(randomizeWithJavaMathBigInteger:withJavaSecuritySecureRandom:);
  methods[36].selector = @selector(squareRootWithJavaMathBigInteger:);
  methods[37].selector = @selector(intRootWithInt:withInt:);
  methods[38].selector = @selector(floatPowWithFloat:withInt:);
  methods[39].selector = @selector(logWithDouble:);
  methods[40].selector = @selector(logWithLong:);
  methods[41].selector = @selector(logBKMWithDouble:);
  methods[42].selector = @selector(isIncreasingWithIntArray:);
  methods[43].selector = @selector(integerToOctetsWithJavaMathBigInteger:);
  methods[44].selector = @selector(octetsToIntegerWithByteArray:withInt:withInt:);
  methods[45].selector = @selector(octetsToIntegerWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 54, -1, -1 },
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 55, -1, -1 },
    { "TWO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 56, -1, -1 },
    { "FOUR", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 57, -1, -1 },
    { "SMALL_PRIMES", "[I", .constantValue.asLong = 0, 0x1a, -1, 58, -1, -1 },
    { "SMALL_PRIME_PRODUCT", "J", .constantValue.asLong = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_SMALL_PRIME_PRODUCT, 0x1a, -1, -1, -1, -1 },
    { "sr", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0xa, -1, 59, -1, -1 },
    { "jacobiTable", "[I", .constantValue.asLong = 0, 0x1a, -1, 60, -1, -1 },
  };
  static const void *ptrTable[] = { "jacobi", "LJavaMathBigInteger;LJavaMathBigInteger;", "ressol", "LJavaLangIllegalArgumentException;", "gcd", "II", "extGCD", "divideAndRound", "[LJavaMathBigInteger;LJavaMathBigInteger;", "ceilLog", "LJavaMathBigInteger;", "I", "ceilLog256", "J", "floorLog", "maxPower", "bitCount", "order", "reduceInto", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "pow", "JI", "modPow", "III", "extgcd", "leastCommonMultiple", "[LJavaMathBigInteger;", "mod", "JJ", "modInverse", "isPower", "leastDiv", "isPrime", "passesSmallPrimeTest", "nextSmallerPrime", "nextProbablePrime", "LJavaMathBigInteger;I", "nextPrime", "binomial", "randomize", "LJavaMathBigInteger;LJavaSecuritySecureRandom;", "squareRoot", "intRoot", "floatPow", "FI", "log", "D", "logBKM", "isIncreasing", "[I", "integerToOctets", "octetsToInteger", "[BII", "[B", &OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO, &OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE, &OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_TWO, &OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_FOUR, &OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_SMALL_PRIMES, &OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_sr, &OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_jacobiTable };
  static const J2ObjcClassInfo _OrgSpongycastlePqcMathLinearalgebraIntegerFunctions = { "IntegerFunctions", "org.spongycastle.pqc.math.linearalgebra", ptrTable, methods, fields, 7, 0x11, 46, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcMathLinearalgebraIntegerFunctions;
}

+ (void)initialize {
  if (self == [OrgSpongycastlePqcMathLinearalgebraIntegerFunctions class]) {
    OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO = JavaMathBigInteger_valueOfWithLong_(0);
    OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_TWO = JavaMathBigInteger_valueOfWithLong_(2);
    OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_FOUR = JavaMathBigInteger_valueOfWithLong_(4);
    OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_SMALL_PRIMES = [IOSIntArray newArrayWithInts:(jint[]){ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41 } count:12];
    OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_jacobiTable = [IOSIntArray newArrayWithInts:(jint[]){ 0, 1, 0, -1, 0, -1, 0, 1 } count:8];
    J2OBJC_SET_INITIALIZED(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions)
  }
}

@end

void OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_init(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions *self) {
  NSObject_init(self);
}

OrgSpongycastlePqcMathLinearalgebraIntegerFunctions *new_OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions, init)
}

OrgSpongycastlePqcMathLinearalgebraIntegerFunctions *create_OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions, init)
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_jacobiWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *A, JavaMathBigInteger *B) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  JavaMathBigInteger *a;
  JavaMathBigInteger *b;
  JavaMathBigInteger *v;
  jlong k = 1;
  k = 1;
  if ([((JavaMathBigInteger *) nil_chk(B)) isEqual:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO]) {
    a = [((JavaMathBigInteger *) nil_chk(A)) abs];
    return [((JavaMathBigInteger *) nil_chk(a)) isEqual:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE] ? 1 : 0;
  }
  if (![((JavaMathBigInteger *) nil_chk(A)) testBitWithInt:0] && ![B testBitWithInt:0]) {
    return 0;
  }
  a = A;
  b = B;
  if ([b signum] == -1) {
    b = [b negate];
    if ([a signum] == -1) {
      k = -1;
    }
  }
  v = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO;
  while (![((JavaMathBigInteger *) nil_chk(b)) testBitWithInt:0]) {
    v = [((JavaMathBigInteger *) nil_chk(v)) addWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE];
    b = [b divideWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_TWO];
  }
  if ([((JavaMathBigInteger *) nil_chk(v)) testBitWithInt:0]) {
    k = k * IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_jacobiTable), [a intValue] & 7);
  }
  if ([a signum] < 0) {
    if ([b testBitWithInt:1]) {
      k = -k;
    }
    a = [a negate];
  }
  while ([((JavaMathBigInteger *) nil_chk(a)) signum] != 0) {
    v = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO;
    while (![((JavaMathBigInteger *) nil_chk(a)) testBitWithInt:0]) {
      v = [((JavaMathBigInteger *) nil_chk(v)) addWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE];
      a = [a divideWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_TWO];
    }
    if ([((JavaMathBigInteger *) nil_chk(v)) testBitWithInt:0]) {
      k = k * IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_jacobiTable), [b intValue] & 7);
    }
    if ([a compareToWithId:b] < 0) {
      JavaMathBigInteger *x = a;
      a = b;
      b = x;
      if ([a testBitWithInt:1] && [b testBitWithInt:1]) {
        k = -k;
      }
    }
    a = [a subtractWithJavaMathBigInteger:b];
  }
  return [b isEqual:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE] ? (jint) k : 0;
}

JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ressolWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *p) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  JavaMathBigInteger *v = nil;
  if ([((JavaMathBigInteger *) nil_chk(a)) compareToWithId:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO] < 0) {
    a = [a addWithJavaMathBigInteger:p];
  }
  if ([((JavaMathBigInteger *) nil_chk(a)) isEqual:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO]) {
    return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO;
  }
  if ([((JavaMathBigInteger *) nil_chk(p)) isEqual:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_TWO]) {
    return a;
  }
  if ([p testBitWithInt:0] && [p testBitWithInt:1]) {
    if (OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_jacobiWithJavaMathBigInteger_withJavaMathBigInteger_(a, p) == 1) {
      v = [p addWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE];
      v = [((JavaMathBigInteger *) nil_chk(v)) shiftRightWithInt:2];
      return [a modPowWithJavaMathBigInteger:v withJavaMathBigInteger:p];
    }
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$@", @"No quadratic residue: ", a, @", ", p));
  }
  jlong t = 0;
  JavaMathBigInteger *k = [p subtractWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE];
  jlong s = 0;
  while (![((JavaMathBigInteger *) nil_chk(k)) testBitWithInt:0]) {
    s++;
    k = [k shiftRightWithInt:1];
  }
  k = [k subtractWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE];
  k = [((JavaMathBigInteger *) nil_chk(k)) shiftRightWithInt:1];
  JavaMathBigInteger *r = [a modPowWithJavaMathBigInteger:k withJavaMathBigInteger:p];
  JavaMathBigInteger *n = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(r)) multiplyWithJavaMathBigInteger:r])) remainderWithJavaMathBigInteger:p];
  n = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(n)) multiplyWithJavaMathBigInteger:a])) remainderWithJavaMathBigInteger:p];
  r = [((JavaMathBigInteger *) nil_chk([r multiplyWithJavaMathBigInteger:a])) remainderWithJavaMathBigInteger:p];
  if ([((JavaMathBigInteger *) nil_chk(n)) isEqual:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE]) {
    return r;
  }
  JavaMathBigInteger *z = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_TWO;
  while (OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_jacobiWithJavaMathBigInteger_withJavaMathBigInteger_(z, p) == 1) {
    z = [((JavaMathBigInteger *) nil_chk(z)) addWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE];
  }
  v = k;
  v = [((JavaMathBigInteger *) nil_chk(v)) multiplyWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_TWO];
  v = [((JavaMathBigInteger *) nil_chk(v)) addWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE];
  JavaMathBigInteger *c = [((JavaMathBigInteger *) nil_chk(z)) modPowWithJavaMathBigInteger:v withJavaMathBigInteger:p];
  while ([((JavaMathBigInteger *) nil_chk(n)) compareToWithId:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE] == 1) {
    k = n;
    t = s;
    s = 0;
    while (![((JavaMathBigInteger *) nil_chk(k)) isEqual:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE]) {
      k = [((JavaMathBigInteger *) nil_chk([k multiplyWithJavaMathBigInteger:k])) modWithJavaMathBigInteger:p];
      s++;
    }
    t -= s;
    if (t == 0) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$@", @"No quadratic residue: ", a, @", ", p));
    }
    v = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE;
    for (jlong i = 0; i < t - 1; i++) {
      v = [((JavaMathBigInteger *) nil_chk(v)) shiftLeftWithInt:1];
    }
    c = [((JavaMathBigInteger *) nil_chk(c)) modPowWithJavaMathBigInteger:v withJavaMathBigInteger:p];
    r = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(r)) multiplyWithJavaMathBigInteger:c])) remainderWithJavaMathBigInteger:p];
    c = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(c)) multiplyWithJavaMathBigInteger:c])) remainderWithJavaMathBigInteger:p];
    n = [((JavaMathBigInteger *) nil_chk([n multiplyWithJavaMathBigInteger:c])) modWithJavaMathBigInteger:p];
  }
  return r;
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_gcdWithInt_withInt_(jint u, jint v) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(u))) gcdWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(v)])) intValue];
}

IOSIntArray *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_extGCDWithInt_withInt_(jint a, jint b) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  JavaMathBigInteger *ba = JavaMathBigInteger_valueOfWithLong_(a);
  JavaMathBigInteger *bb = JavaMathBigInteger_valueOfWithLong_(b);
  IOSObjectArray *bresult = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_extgcdWithJavaMathBigInteger_withJavaMathBigInteger_(ba, bb);
  IOSIntArray *result = [IOSIntArray newArrayWithLength:3];
  *IOSIntArray_GetRef(result, 0) = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(bresult), 0))) intValue];
  *IOSIntArray_GetRef(result, 1) = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(bresult, 1))) intValue];
  *IOSIntArray_GetRef(result, 2) = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(bresult, 2))) intValue];
  return result;
}

JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_divideAndRoundWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  if ([((JavaMathBigInteger *) nil_chk(a)) signum] < 0) {
    return [((JavaMathBigInteger *) nil_chk(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_divideAndRoundWithJavaMathBigInteger_withJavaMathBigInteger_([a negate], b))) negate];
  }
  if ([((JavaMathBigInteger *) nil_chk(b)) signum] < 0) {
    return [((JavaMathBigInteger *) nil_chk(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_divideAndRoundWithJavaMathBigInteger_withJavaMathBigInteger_(a, [b negate]))) negate];
  }
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([a shiftLeftWithInt:1])) addWithJavaMathBigInteger:b])) divideWithJavaMathBigInteger:[b shiftLeftWithInt:1]];
}

IOSObjectArray *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_divideAndRoundWithJavaMathBigIntegerArray_withJavaMathBigInteger_(IOSObjectArray *a, JavaMathBigInteger *b) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  IOSObjectArray *out = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(a))->size_ type:JavaMathBigInteger_class_()];
  for (jint i = 0; i < a->size_; i++) {
    (void) IOSObjectArray_Set(out, i, OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_divideAndRoundWithJavaMathBigInteger_withJavaMathBigInteger_(IOSObjectArray_Get(a, i), b));
  }
  return out;
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ceilLogWithJavaMathBigInteger_(JavaMathBigInteger *a) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jint result = 0;
  JavaMathBigInteger *p = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE;
  while ([((JavaMathBigInteger *) nil_chk(p)) compareToWithId:a] < 0) {
    result++;
    p = [p shiftLeftWithInt:1];
  }
  return result;
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ceilLogWithInt_(jint a) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jint log = 0;
  jint i = 1;
  while (i < a) {
    JreLShiftAssignInt(&i, 1);
    log++;
  }
  return log;
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ceilLog256WithInt_(jint n) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  if (n == 0) {
    return 1;
  }
  jint m;
  if (n < 0) {
    m = -n;
  }
  else {
    m = n;
  }
  jint d = 0;
  while (m > 0) {
    d++;
    JreURShiftAssignInt(&m, 8);
  }
  return d;
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ceilLog256WithLong_(jlong n) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  if (n == 0) {
    return 1;
  }
  jlong m;
  if (n < 0) {
    m = -n;
  }
  else {
    m = n;
  }
  jint d = 0;
  while (m > 0) {
    d++;
    JreURShiftAssignLong(&m, 8);
  }
  return d;
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_floorLogWithJavaMathBigInteger_(JavaMathBigInteger *a) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jint result = -1;
  JavaMathBigInteger *p = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE;
  while ([((JavaMathBigInteger *) nil_chk(p)) compareToWithId:a] <= 0) {
    result++;
    p = [p shiftLeftWithInt:1];
  }
  return result;
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_floorLogWithInt_(jint a) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jint h = 0;
  if (a <= 0) {
    return -1;
  }
  jint p = JreURShift32(a, 1);
  while (p > 0) {
    h++;
    JreURShiftAssignInt(&p, 1);
  }
  return h;
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_maxPowerWithInt_(jint a) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jint h = 0;
  if (a != 0) {
    jint p = 1;
    while ((a & p) == 0) {
      h++;
      JreLShiftAssignInt(&p, 1);
    }
  }
  return h;
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_bitCountWithInt_(jint a) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jint h = 0;
  while (a != 0) {
    h += a & 1;
    JreURShiftAssignInt(&a, 1);
  }
  return h;
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_orderWithInt_withInt_(jint g, jint p) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jint b;
  jint j;
  b = g % p;
  j = 1;
  if (b == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("I$I$", g, @" is not an element of Z/(", p, @"Z)^*; it is not meaningful to compute its order."));
  }
  while (b != 1) {
    b *= g;
    b %= p;
    if (b < 0) {
      b += p;
    }
    j++;
  }
  return j;
}

JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_reduceIntoWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *n, JavaMathBigInteger *begin, JavaMathBigInteger *end) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(n)) subtractWithJavaMathBigInteger:begin])) modWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(end)) subtractWithJavaMathBigInteger:begin]])) addWithJavaMathBigInteger:begin];
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_powWithInt_withInt_(jint a, jint e) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jint result = 1;
  while (e > 0) {
    if ((e & 1) == 1) {
      result *= a;
    }
    a *= a;
    JreURShiftAssignInt(&e, 1);
  }
  return result;
}

jlong OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_powWithLong_withInt_(jlong a, jint e) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jlong result = 1;
  while (e > 0) {
    if ((e & 1) == 1) {
      result *= a;
    }
    a *= a;
    JreURShiftAssignInt(&e, 1);
  }
  return result;
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_modPowWithInt_withInt_withInt_(jint a, jint e, jint n) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  if (n <= 0 || (n * n) > JavaLangInteger_MAX_VALUE || e < 0) {
    return 0;
  }
  jint result = 1;
  a = (a % n + n) % n;
  while (e > 0) {
    if ((e & 1) == 1) {
      result = (result * a) % n;
    }
    a = (a * a) % n;
    JreURShiftAssignInt(&e, 1);
  }
  return result;
}

IOSObjectArray *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_extgcdWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *a, JavaMathBigInteger *b) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  JavaMathBigInteger *u = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE;
  JavaMathBigInteger *v = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO;
  JavaMathBigInteger *d = a;
  if ([((JavaMathBigInteger *) nil_chk(b)) signum] != 0) {
    JavaMathBigInteger *v1 = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO;
    JavaMathBigInteger *v3 = b;
    while ([((JavaMathBigInteger *) nil_chk(v3)) signum] != 0) {
      IOSObjectArray *tmp = [((JavaMathBigInteger *) nil_chk(d)) divideAndRemainderWithJavaMathBigInteger:v3];
      JavaMathBigInteger *q = IOSObjectArray_Get(nil_chk(tmp), 0);
      JavaMathBigInteger *t3 = IOSObjectArray_Get(tmp, 1);
      JavaMathBigInteger *t1 = [((JavaMathBigInteger *) nil_chk(u)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(q)) multiplyWithJavaMathBigInteger:v1]];
      u = v1;
      d = v3;
      v1 = t1;
      v3 = t3;
    }
    v = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(d)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(a)) multiplyWithJavaMathBigInteger:u]])) divideWithJavaMathBigInteger:b];
  }
  return [IOSObjectArray newArrayWithObjects:(id[]){ d, u, v } count:3 type:JavaMathBigInteger_class_()];
}

JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_leastCommonMultipleWithJavaMathBigIntegerArray_(IOSObjectArray *numbers) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jint n = ((IOSObjectArray *) nil_chk(numbers))->size_;
  JavaMathBigInteger *result = IOSObjectArray_Get(numbers, 0);
  for (jint i = 1; i < n; i++) {
    JavaMathBigInteger *gcd = [((JavaMathBigInteger *) nil_chk(result)) gcdWithJavaMathBigInteger:IOSObjectArray_Get(numbers, i)];
    result = [((JavaMathBigInteger *) nil_chk([result multiplyWithJavaMathBigInteger:IOSObjectArray_Get(numbers, i)])) divideWithJavaMathBigInteger:gcd];
  }
  return result;
}

jlong OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_modWithLong_withLong_(jlong a, jlong m) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jlong result = a % m;
  if (result < 0) {
    result += m;
  }
  return result;
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_modInverseWithInt_withInt_(jint a, jint mod) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(a))) modInverseWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(mod)])) intValue];
}

jlong OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_modInverseWithLong_withLong_(jlong a, jlong mod) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(a))) modInverseWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(mod)])) longLongValue];
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_isPowerWithInt_withInt_(jint a, jint p) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  if (a <= 0) {
    return -1;
  }
  jint n = 0;
  jint d = a;
  while (d > 1) {
    if (d % p != 0) {
      return -1;
    }
    d /= p;
    n++;
  }
  return n;
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_leastDivWithInt_(jint a) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  if (a < 0) {
    a = -a;
  }
  if (a == 0) {
    return 1;
  }
  if ((a & 1) == 0) {
    return 2;
  }
  jint p = 3;
  while (p <= (a / p)) {
    if ((a % p) == 0) {
      return p;
    }
    p += 2;
  }
  return a;
}

jboolean OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_isPrimeWithInt_(jint n) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  if (n < 2) {
    return false;
  }
  if (n == 2) {
    return true;
  }
  if ((n & 1) == 0) {
    return false;
  }
  if (n < 42) {
    for (jint i = 0; i < ((IOSIntArray *) nil_chk(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_SMALL_PRIMES))->size_; i++) {
      if (n == IOSIntArray_Get(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_SMALL_PRIMES, i)) {
        return true;
      }
    }
  }
  if ((n % 3 == 0) || (n % 5 == 0) || (n % 7 == 0) || (n % 11 == 0) || (n % 13 == 0) || (n % 17 == 0) || (n % 19 == 0) || (n % 23 == 0) || (n % 29 == 0) || (n % 31 == 0) || (n % 37 == 0) || (n % 41 == 0)) {
    return false;
  }
  return [((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(n))) isProbablePrimeWithInt:20];
}

jboolean OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_passesSmallPrimeTestWithJavaMathBigInteger_(JavaMathBigInteger *candidate) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  IOSIntArray *smallPrime = [IOSIntArray newArrayWithInts:(jint[]){ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499 } count:239];
  for (jint i = 0; i < smallPrime->size_; i++) {
    if ([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(candidate)) modWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(IOSIntArray_Get(smallPrime, i))])) isEqual:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO]) {
      return false;
    }
  }
  return true;
}

jint OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_nextSmallerPrimeWithInt_(jint n) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  if (n <= 2) {
    return 1;
  }
  if (n == 3) {
    return 2;
  }
  if ((n & 1) == 0) {
    n--;
  }
  else {
    n -= 2;
  }
  while ((n > 3) & !OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_isPrimeWithInt_(n)) {
    n -= 2;
  }
  return n;
}

JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_nextProbablePrimeWithJavaMathBigInteger_withInt_(JavaMathBigInteger *n, jint certainty) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  if ([((JavaMathBigInteger *) nil_chk(n)) signum] < 0 || [n signum] == 0 || [n isEqual:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE]) {
    return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_TWO;
  }
  JavaMathBigInteger *result = [n addWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE];
  if (![((JavaMathBigInteger *) nil_chk(result)) testBitWithInt:0]) {
    result = [result addWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE];
  }
  while (true) {
    if ([((JavaMathBigInteger *) nil_chk(result)) bitLength] > 6) {
      jlong r = [((JavaMathBigInteger *) nil_chk([result remainderWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_SMALL_PRIME_PRODUCT)])) longLongValue];
      if ((r % 3 == 0) || (r % 5 == 0) || (r % 7 == 0) || (r % 11 == 0) || (r % 13 == 0) || (r % 17 == 0) || (r % 19 == 0) || (r % 23 == 0) || (r % 29 == 0) || (r % 31 == 0) || (r % 37 == 0) || (r % 41 == 0)) {
        result = [result addWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_TWO];
        continue;
      }
    }
    if ([result bitLength] < 4) {
      return result;
    }
    if ([result isProbablePrimeWithInt:certainty]) {
      return result;
    }
    result = [result addWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_TWO];
  }
}

JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_nextProbablePrimeWithJavaMathBigInteger_(JavaMathBigInteger *n) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_nextProbablePrimeWithJavaMathBigInteger_withInt_(n, 20);
}

JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_nextPrimeWithLong_(jlong n) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jlong i;
  jboolean found = false;
  jlong result = 0;
  if (n <= 1) {
    return JavaMathBigInteger_valueOfWithLong_(2);
  }
  if (n == 2) {
    return JavaMathBigInteger_valueOfWithLong_(3);
  }
  for (i = n + 1 + (n & 1); (i <= JreLShift64(n, 1)) && !found; i += 2) {
    for (jlong j = 3; (j <= JreRShift64(i, 1)) && !found; j += 2) {
      if (i % j == 0) {
        found = true;
      }
    }
    if (found) {
      found = false;
    }
    else {
      result = i;
      found = true;
    }
  }
  return JavaMathBigInteger_valueOfWithLong_(result);
}

JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_binomialWithInt_withInt_(jint n, jint t) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  JavaMathBigInteger *result = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE;
  if (n == 0) {
    if (t == 0) {
      return result;
    }
    return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO;
  }
  if (t > (JreURShift32(n, 1))) {
    t = n - t;
  }
  for (jint i = 1; i <= t; i++) {
    result = [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(result)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(n - (i - 1))]))) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(i)];
  }
  return result;
}

JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_randomizeWithJavaMathBigInteger_(JavaMathBigInteger *upperBound) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  if (OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_sr == nil) {
    OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_sr = new_JavaSecuritySecureRandom_init();
  }
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_randomizeWithJavaMathBigInteger_withJavaSecuritySecureRandom_(upperBound, OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_sr);
}

JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_randomizeWithJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *upperBound, JavaSecuritySecureRandom *prng) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jint blen = [((JavaMathBigInteger *) nil_chk(upperBound)) bitLength];
  JavaMathBigInteger *randomNum = JavaMathBigInteger_valueOfWithLong_(0);
  if (prng == nil) {
    prng = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_sr != nil ? OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_sr : new_JavaSecuritySecureRandom_init();
  }
  for (jint i = 0; i < 20; i++) {
    randomNum = new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(blen, prng);
    if ([randomNum compareToWithId:upperBound] < 0) {
      return randomNum;
    }
  }
  return [((JavaMathBigInteger *) nil_chk(randomNum)) modWithJavaMathBigInteger:upperBound];
}

JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_squareRootWithJavaMathBigInteger_(JavaMathBigInteger *a) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jint bl;
  JavaMathBigInteger *result;
  JavaMathBigInteger *remainder;
  JavaMathBigInteger *b;
  if ([((JavaMathBigInteger *) nil_chk(a)) compareToWithId:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO] < 0) {
    @throw new_JavaLangArithmeticException_initWithNSString_(JreStrcat("$@C", @"cannot extract root of negative number", a, '.'));
  }
  bl = [a bitLength];
  result = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO;
  remainder = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ZERO;
  if ((bl & 1) != 0) {
    result = [((JavaMathBigInteger *) nil_chk(result)) addWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE];
    bl--;
  }
  while (bl > 0) {
    remainder = [((JavaMathBigInteger *) nil_chk(remainder)) multiplyWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_FOUR];
    jint unseq$1 = --bl;
    remainder = [((JavaMathBigInteger *) nil_chk(remainder)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(([a testBitWithInt:unseq$1] ? 2 : 0) + ([a testBitWithInt:--bl] ? 1 : 0))];
    b = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(result)) multiplyWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_FOUR])) addWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE];
    result = [result multiplyWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_TWO];
    if ([((JavaMathBigInteger *) nil_chk(remainder)) compareToWithId:b] != -1) {
      result = [((JavaMathBigInteger *) nil_chk(result)) addWithJavaMathBigInteger:OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ONE];
      remainder = [remainder subtractWithJavaMathBigInteger:b];
    }
  }
  return result;
}

jfloat OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_intRootWithInt_withInt_(jint base, jint root) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jfloat gNew = base / root;
  jfloat gOld = 0;
  jint counter = 0;
  while (JavaLangMath_absWithFloat_(gOld - gNew) > 0.0001) {
    jfloat gPow = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_floatPowWithFloat_withInt_(gNew, root);
    while (JavaLangFloat_isInfiniteWithFloat_(gPow)) {
      gNew = (gNew + gOld) / 2;
      gPow = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_floatPowWithFloat_withInt_(gNew, root);
    }
    counter += 1;
    gOld = gNew;
    gNew = gOld - (gPow - base) / (root * OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_floatPowWithFloat_withInt_(gOld, root - 1));
  }
  return gNew;
}

jfloat OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_floatPowWithFloat_withInt_(jfloat f, jint i) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jfloat g = 1;
  for (; i > 0; i--) {
    JreTimesAssignFloatF(&g, f);
  }
  return g;
}

jdouble OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_logWithDouble_(jdouble x) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  if (x > 0 && x < 1) {
    jdouble d = 1 / x;
    jdouble result = -OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_logWithDouble_(d);
    return result;
  }
  jint tmp = 0;
  jdouble tmp2 = 1;
  jdouble d = x;
  while (d > 2) {
    d = d / 2;
    tmp += 1;
    JreTimesAssignDoubleD(&tmp2, 2);
  }
  jdouble rem = x / tmp2;
  rem = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_logBKMWithDouble_(rem);
  return tmp + rem;
}

jdouble OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_logWithLong_(jlong x) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  jint tmp = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_floorLogWithJavaMathBigInteger_(JavaMathBigInteger_valueOfWithLong_(x));
  jlong tmp2 = JreLShift32(1, tmp);
  jdouble rem = (jdouble) x / (jdouble) tmp2;
  rem = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_logBKMWithDouble_(rem);
  return tmp + rem;
}

jdouble OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_logBKMWithDouble_(jdouble arg) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  IOSDoubleArray *ae = [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1.0000000000000000000000000000000000000000000000000000000000000000000000000000, 0.5849625007211561814537389439478165087598144076924810604557526545410982276485, 0.3219280948873623478703194294893901758648313930245806120547563958159347765589, 0.1699250014423123629074778878956330175196288153849621209115053090821964552970, 0.0874628412503394082540660108104043540112672823448206881266090643866965081686, 0.0443941193584534376531019906736094674630459333742491317685543002674288465967, 0.0223678130284545082671320837460849094932677948156179815932199216587899627785, 0.0112272554232541203378805844158839407281095943600297940811823651462712311786, 0.0056245491938781069198591026740666017211096815383520359072957784732489771013, 0.0028150156070540381547362547502839489729507927389771959487826944878598909400, 0.0014081943928083889066101665016890524233311715793462235597709051792834906001, 0.0007042690112466432585379340422201964456668872087249334581924550139514213168, 0.0003521774803010272377989609925281744988670304302127133979341729842842377649, 0.0001760994864425060348637509459678580940163670081839283659942864068257522373, 0.0000880524301221769086378699983597183301490534085738474534831071719854721939, 0.0000440268868273167176441087067175806394819146645511899503059774914593663365, 0.0000220136113603404964890728830697555571275493801909791504158295359319433723, 0.0000110068476674814423006223021573490183469930819844945565597452748333526464, 0.0000055034343306486037230640321058826431606183125807276574241540303833251704, 0.0000027517197895612831123023958331509538486493412831626219340570294203116559, 0.0000013758605508411382010566802834037147561973553922354232704569052932922954, 0.0000006879304394358496786728937442939160483304056131990916985043387874690617, 0.0000003439652607217645360118314743718005315334062644619363447395987584138324, 0.0000001719826406118446361936972479533123619972434705828085978955697643547921, 0.0000000859913228686632156462565208266682841603921494181830811515318381744650, 0.0000000429956620750168703982940244684787907148132725669106053076409624949917, 0.0000000214978311976797556164155504126645192380395989504741781512309853438587, 0.0000000107489156388827085092095702361647949603617203979413516082280717515504, 0.0000000053744578294520620044408178949217773318785601260677517784797554422804, 0.0000000026872289172287079490026152352638891824761667284401180026908031182361, 0.0000000013436144592400232123622589569799954658536700992739887706412976115422, 0.0000000006718072297764289157920422846078078155859484240808550018085324187007, 0.0000000003359036149273187853169587152657145221968468364663464125722491530858, 0.0000000001679518074734354745159899223037458278711244127245990591908996412262, 0.0000000000839759037391617577226571237484864917411614198675604731728132152582, 0.0000000000419879518701918839775296677020135040214077417929807824842667285938, 0.0000000000209939759352486932678195559552767641474249812845414125580747434389, 0.0000000000104969879676625344536740142096218372850561859495065136990936290929, 0.0000000000052484939838408141817781356260462777942148580518406975851213868092, 0.0000000000026242469919227938296243586262369156865545638305682553644113887909, 0.0000000000013121234959619935994960031017850191710121890821178731821983105443, 0.0000000000006560617479811459709189576337295395590603644549624717910616347038, 0.0000000000003280308739906102782522178545328259781415615142931952662153623493, 0.0000000000001640154369953144623242936888032768768777422997704541618141646683, 0.0000000000000820077184976595619616930350508356401599552034612281802599177300, 0.0000000000000410038592488303636807330652208397742314215159774270270147020117, 0.0000000000000205019296244153275153381695384157073687186580546938331088730952, 0.0000000000000102509648122077001764119940017243502120046885379813510430378661, 0.0000000000000051254824061038591928917243090559919209628584150482483994782302, 0.0000000000000025627412030519318726172939815845367496027046030028595094737777, 0.0000000000000012813706015259665053515049475574143952543145124550608158430592, 0.0000000000000006406853007629833949364669629701200556369782295210193569318434, 0.0000000000000003203426503814917330334121037829290364330169106716787999052925, 0.0000000000000001601713251907458754080007074659337446341494733882570243497196, 0.0000000000000000800856625953729399268240176265844257044861248416330071223615, 0.0000000000000000400428312976864705191179247866966320469710511619971334577509, 0.0000000000000000200214156488432353984854413866994246781519154793320684126179, 0.0000000000000000100107078244216177339743404416874899847406043033792202127070, 0.0000000000000000050053539122108088756700751579281894640362199287591340285355, 0.0000000000000000025026769561054044400057638132352058574658089256646014899499, 0.0000000000000000012513384780527022205455634651853807110362316427807660551208, 0.0000000000000000006256692390263511104084521222346348012116229213309001913762, 0.0000000000000000003128346195131755552381436585278035120438976487697544916191, 0.0000000000000000001564173097565877776275512286165232838833090480508502328437, 0.0000000000000000000782086548782938888158954641464170239072244145219054734086, 0.0000000000000000000391043274391469444084776945327473574450334092075712154016, 0.0000000000000000000195521637195734722043713378812583900953755962557525252782, 0.0000000000000000000097760818597867361022187915943503728909029699365320287407, 0.0000000000000000000048880409298933680511176764606054809062553340323879609794, 0.0000000000000000000024440204649466840255609083961603140683286362962192177597, 0.0000000000000000000012220102324733420127809717395445504379645613448652614939, 0.0000000000000000000006110051162366710063906152551383735699323415812152114058, 0.0000000000000000000003055025581183355031953399739107113727036860315024588989, 0.0000000000000000000001527512790591677515976780735407368332862218276873443537, 0.0000000000000000000000763756395295838757988410584167137033767056170417508383, 0.0000000000000000000000381878197647919378994210346199431733717514843471513618, 0.0000000000000000000000190939098823959689497106436628681671067254111334889005, 0.0000000000000000000000095469549411979844748553534196582286585751228071408728, 0.0000000000000000000000047734774705989922374276846068851506055906657137209047, 0.0000000000000000000000023867387352994961187138442777065843718711089344045782, 0.0000000000000000000000011933693676497480593569226324192944532044984865894525, 0.0000000000000000000000005966846838248740296784614396011477934194852481410926, 0.0000000000000000000000002983423419124370148392307506484490384140516252814304, 0.0000000000000000000000001491711709562185074196153830361933046331030629430117, 0.0000000000000000000000000745855854781092537098076934460888486730708440475045, 0.0000000000000000000000000372927927390546268549038472050424734256652501673274, 0.0000000000000000000000000186463963695273134274519237230207489851150821191330, 0.0000000000000000000000000093231981847636567137259618916352525606281553180093, 0.0000000000000000000000000046615990923818283568629809533488457973317312233323, 0.0000000000000000000000000023307995461909141784314904785572277779202790023236, 0.0000000000000000000000000011653997730954570892157452397493151087737428485431, 0.0000000000000000000000000005826998865477285446078726199923328593402722606924, 0.0000000000000000000000000002913499432738642723039363100255852559084863397344, 0.0000000000000000000000000001456749716369321361519681550201473345138307215067, 0.0000000000000000000000000000728374858184660680759840775119123438968122488047, 0.0000000000000000000000000000364187429092330340379920387564158411083803465567, 0.0000000000000000000000000000182093714546165170189960193783228378441837282509, 0.0000000000000000000000000000091046857273082585094980096891901482445902524441, 0.0000000000000000000000000000045523428636541292547490048446022564529197237262, 0.0000000000000000000000000000022761714318270646273745024223029238091160103901 } count:100];
  jint n = 53;
  jdouble x = 1;
  jdouble y = 0;
  jdouble z;
  jdouble s = 1;
  jint k;
  for (k = 0; k < n; k++) {
    z = x + x * s;
    if (z <= arg) {
      x = z;
      JrePlusAssignDoubleD(&y, IOSDoubleArray_Get(ae, k));
    }
    JreTimesAssignDoubleD(&s, 0.5);
  }
  return y;
}

jboolean OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_isIncreasingWithIntArray_(IOSIntArray *a) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  for (jint i = 1; i < ((IOSIntArray *) nil_chk(a))->size_; i++) {
    if (IOSIntArray_Get(a, i - 1) >= IOSIntArray_Get(a, i)) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I$I$IC", @"a[", (i - 1), @"] = ", IOSIntArray_Get(a, i - 1), @" >= ", IOSIntArray_Get(a, i), @" = a[", i, ']')];
      return false;
    }
  }
  return true;
}

IOSByteArray *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_integerToOctetsWithJavaMathBigInteger_(JavaMathBigInteger *val) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  IOSByteArray *valBytes = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(val)) abs])) toByteArray];
  if (([val bitLength] & 7) != 0) {
    return valBytes;
  }
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:JreRShift32([val bitLength], 3)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(valBytes, 1, tmp, 0, tmp->size_);
  return tmp;
}

JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_octetsToIntegerWithByteArray_withInt_withInt_(IOSByteArray *data, jint offset, jint length) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  IOSByteArray *val = [IOSByteArray newArrayWithLength:length + 1];
  *IOSByteArray_GetRef(val, 0) = 0;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, offset, val, 1, length);
  return new_JavaMathBigInteger_initWithByteArray_(val);
}

JavaMathBigInteger *OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_octetsToIntegerWithByteArray_(IOSByteArray *data) {
  OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_initialize();
  return OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_octetsToIntegerWithByteArray_withInt_withInt_(data, 0, ((IOSByteArray *) nil_chk(data))->size_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcMathLinearalgebraIntegerFunctions)
