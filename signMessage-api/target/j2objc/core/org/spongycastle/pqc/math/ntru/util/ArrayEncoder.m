//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/math/ntru/util/ArrayEncoder.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/pqc/math/ntru/util/ArrayEncoder.h"
#include "org/spongycastle/pqc/math/ntru/util/Util.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastlePqcMathNtruUtilArrayEncoder ()

+ (jint)getBitWithByteArray:(IOSByteArray *)arr
                    withInt:(jint)bitIndex;

@end

inline IOSIntArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_get_COEFF1_TABLE(void);
static IOSIntArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_COEFF1_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathNtruUtilArrayEncoder, COEFF1_TABLE, IOSIntArray *)

inline IOSIntArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_get_COEFF2_TABLE(void);
static IOSIntArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_COEFF2_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathNtruUtilArrayEncoder, COEFF2_TABLE, IOSIntArray *)

inline IOSIntArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_get_BIT1_TABLE(void);
static IOSIntArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_BIT1_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathNtruUtilArrayEncoder, BIT1_TABLE, IOSIntArray *)

inline IOSIntArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_get_BIT2_TABLE(void);
static IOSIntArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_BIT2_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathNtruUtilArrayEncoder, BIT2_TABLE, IOSIntArray *)

inline IOSIntArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_get_BIT3_TABLE(void);
static IOSIntArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_BIT3_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathNtruUtilArrayEncoder, BIT3_TABLE, IOSIntArray *)

__attribute__((unused)) static jint OrgSpongycastlePqcMathNtruUtilArrayEncoder_getBitWithByteArray_withInt_(IOSByteArray *arr, jint bitIndex);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastlePqcMathNtruUtilArrayEncoder)

@implementation OrgSpongycastlePqcMathNtruUtilArrayEncoder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcMathNtruUtilArrayEncoder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)encodeModQWithIntArray:(IOSIntArray *)a
                                 withInt:(jint)q {
  return OrgSpongycastlePqcMathNtruUtilArrayEncoder_encodeModQWithIntArray_withInt_(a, q);
}

+ (IOSIntArray *)decodeModQWithByteArray:(IOSByteArray *)data
                                 withInt:(jint)N
                                 withInt:(jint)q {
  return OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeModQWithByteArray_withInt_withInt_(data, N, q);
}

+ (IOSIntArray *)decodeModQWithJavaIoInputStream:(JavaIoInputStream *)is
                                         withInt:(jint)N
                                         withInt:(jint)q {
  return OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeModQWithJavaIoInputStream_withInt_withInt_(is, N, q);
}

+ (IOSIntArray *)decodeMod3SvesWithByteArray:(IOSByteArray *)data
                                     withInt:(jint)N {
  return OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeMod3SvesWithByteArray_withInt_(data, N);
}

+ (IOSByteArray *)encodeMod3SvesWithIntArray:(IOSIntArray *)arr {
  return OrgSpongycastlePqcMathNtruUtilArrayEncoder_encodeMod3SvesWithIntArray_(arr);
}

+ (IOSByteArray *)encodeMod3TightWithIntArray:(IOSIntArray *)intArray {
  return OrgSpongycastlePqcMathNtruUtilArrayEncoder_encodeMod3TightWithIntArray_(intArray);
}

+ (IOSIntArray *)decodeMod3TightWithByteArray:(IOSByteArray *)b
                                      withInt:(jint)N {
  return OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithByteArray_withInt_(b, N);
}

+ (IOSIntArray *)decodeMod3TightWithJavaIoInputStream:(JavaIoInputStream *)is
                                              withInt:(jint)N {
  return OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithJavaIoInputStream_withInt_(is, N);
}

+ (jint)getBitWithByteArray:(IOSByteArray *)arr
                    withInt:(jint)bitIndex {
  return OrgSpongycastlePqcMathNtruUtilArrayEncoder_getBitWithByteArray_withInt_(arr, bitIndex);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 2, 4, 5, -1, -1, -1 },
    { NULL, "[I", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 10, 9, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 11, 7, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 11, 12, 5, -1, -1, -1 },
    { NULL, "I", 0xa, 13, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encodeModQWithIntArray:withInt:);
  methods[2].selector = @selector(decodeModQWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(decodeModQWithJavaIoInputStream:withInt:withInt:);
  methods[4].selector = @selector(decodeMod3SvesWithByteArray:withInt:);
  methods[5].selector = @selector(encodeMod3SvesWithIntArray:);
  methods[6].selector = @selector(encodeMod3TightWithIntArray:);
  methods[7].selector = @selector(decodeMod3TightWithByteArray:withInt:);
  methods[8].selector = @selector(decodeMod3TightWithJavaIoInputStream:withInt:);
  methods[9].selector = @selector(getBitWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COEFF1_TABLE", "[I", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "COEFF2_TABLE", "[I", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "BIT1_TABLE", "[I", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "BIT2_TABLE", "[I", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "BIT3_TABLE", "[I", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
  };
  static const void *ptrTable[] = { "encodeModQ", "[II", "decodeModQ", "[BII", "LJavaIoInputStream;II", "LJavaIoIOException;", "decodeMod3Sves", "[BI", "encodeMod3Sves", "[I", "encodeMod3Tight", "decodeMod3Tight", "LJavaIoInputStream;I", "getBit", &OrgSpongycastlePqcMathNtruUtilArrayEncoder_COEFF1_TABLE, &OrgSpongycastlePqcMathNtruUtilArrayEncoder_COEFF2_TABLE, &OrgSpongycastlePqcMathNtruUtilArrayEncoder_BIT1_TABLE, &OrgSpongycastlePqcMathNtruUtilArrayEncoder_BIT2_TABLE, &OrgSpongycastlePqcMathNtruUtilArrayEncoder_BIT3_TABLE };
  static const J2ObjcClassInfo _OrgSpongycastlePqcMathNtruUtilArrayEncoder = { "ArrayEncoder", "org.spongycastle.pqc.math.ntru.util", ptrTable, methods, fields, 7, 0x1, 10, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcMathNtruUtilArrayEncoder;
}

+ (void)initialize {
  if (self == [OrgSpongycastlePqcMathNtruUtilArrayEncoder class]) {
    OrgSpongycastlePqcMathNtruUtilArrayEncoder_COEFF1_TABLE = [IOSIntArray newArrayWithInts:(jint[]){ 0, 0, 0, 1, 1, 1, -1, -1 } count:8];
    OrgSpongycastlePqcMathNtruUtilArrayEncoder_COEFF2_TABLE = [IOSIntArray newArrayWithInts:(jint[]){ 0, 1, -1, 0, 1, -1, 0, 1 } count:8];
    OrgSpongycastlePqcMathNtruUtilArrayEncoder_BIT1_TABLE = [IOSIntArray newArrayWithInts:(jint[]){ 1, 1, 1, 0, 0, 0, 1, 0, 1 } count:9];
    OrgSpongycastlePqcMathNtruUtilArrayEncoder_BIT2_TABLE = [IOSIntArray newArrayWithInts:(jint[]){ 1, 1, 1, 1, 0, 0, 0, 1, 0 } count:9];
    OrgSpongycastlePqcMathNtruUtilArrayEncoder_BIT3_TABLE = [IOSIntArray newArrayWithInts:(jint[]){ 1, 0, 1, 0, 0, 1, 1, 1, 0 } count:9];
    J2OBJC_SET_INITIALIZED(OrgSpongycastlePqcMathNtruUtilArrayEncoder)
  }
}

@end

void OrgSpongycastlePqcMathNtruUtilArrayEncoder_init(OrgSpongycastlePqcMathNtruUtilArrayEncoder *self) {
  NSObject_init(self);
}

OrgSpongycastlePqcMathNtruUtilArrayEncoder *new_OrgSpongycastlePqcMathNtruUtilArrayEncoder_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathNtruUtilArrayEncoder, init)
}

OrgSpongycastlePqcMathNtruUtilArrayEncoder *create_OrgSpongycastlePqcMathNtruUtilArrayEncoder_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathNtruUtilArrayEncoder, init)
}

IOSByteArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_encodeModQWithIntArray_withInt_(IOSIntArray *a, jint q) {
  OrgSpongycastlePqcMathNtruUtilArrayEncoder_initialize();
  jint bitsPerCoeff = 31 - JavaLangInteger_numberOfLeadingZerosWithInt_(q);
  jint numBits = ((IOSIntArray *) nil_chk(a))->size_ * bitsPerCoeff;
  jint numBytes = (numBits + 7) / 8;
  IOSByteArray *data = [IOSByteArray newArrayWithLength:numBytes];
  jint bitIndex = 0;
  jint byteIndex = 0;
  for (jint i = 0; i < a->size_; i++) {
    for (jint j = 0; j < bitsPerCoeff; j++) {
      jint currentBit = (JreRShift32(IOSIntArray_Get(a, i), j)) & 1;
      *IOSByteArray_GetRef(data, byteIndex) |= JreLShift32(currentBit, bitIndex);
      if (bitIndex == 7) {
        bitIndex = 0;
        byteIndex++;
      }
      else {
        bitIndex++;
      }
    }
  }
  return data;
}

IOSIntArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeModQWithByteArray_withInt_withInt_(IOSByteArray *data, jint N, jint q) {
  OrgSpongycastlePqcMathNtruUtilArrayEncoder_initialize();
  IOSIntArray *coeffs = [IOSIntArray newArrayWithLength:N];
  jint bitsPerCoeff = 31 - JavaLangInteger_numberOfLeadingZerosWithInt_(q);
  jint numBits = N * bitsPerCoeff;
  jint coeffIndex = 0;
  for (jint bitIndex = 0; bitIndex < numBits; bitIndex++) {
    if (bitIndex > 0 && bitIndex % bitsPerCoeff == 0) {
      coeffIndex++;
    }
    jint bit = OrgSpongycastlePqcMathNtruUtilArrayEncoder_getBitWithByteArray_withInt_(data, bitIndex);
    *IOSIntArray_GetRef(coeffs, coeffIndex) += JreLShift32(bit, (bitIndex % bitsPerCoeff));
  }
  return coeffs;
}

IOSIntArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeModQWithJavaIoInputStream_withInt_withInt_(JavaIoInputStream *is, jint N, jint q) {
  OrgSpongycastlePqcMathNtruUtilArrayEncoder_initialize();
  jint qBits = 31 - JavaLangInteger_numberOfLeadingZerosWithInt_(q);
  jint size = (N * qBits + 7) / 8;
  IOSByteArray *arr = OrgSpongycastlePqcMathNtruUtilUtil_readFullLengthWithJavaIoInputStream_withInt_(is, size);
  return OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeModQWithByteArray_withInt_withInt_(arr, N, q);
}

IOSIntArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeMod3SvesWithByteArray_withInt_(IOSByteArray *data, jint N) {
  OrgSpongycastlePqcMathNtruUtilArrayEncoder_initialize();
  IOSIntArray *coeffs = [IOSIntArray newArrayWithLength:N];
  jint coeffIndex = 0;
  for (jint bitIndex = 0; bitIndex < ((IOSByteArray *) nil_chk(data))->size_ * 8; ) {
    jint bit1 = OrgSpongycastlePqcMathNtruUtilArrayEncoder_getBitWithByteArray_withInt_(data, bitIndex++);
    jint bit2 = OrgSpongycastlePqcMathNtruUtilArrayEncoder_getBitWithByteArray_withInt_(data, bitIndex++);
    jint bit3 = OrgSpongycastlePqcMathNtruUtilArrayEncoder_getBitWithByteArray_withInt_(data, bitIndex++);
    jint coeffTableIndex = bit1 * 4 + bit2 * 2 + bit3;
    *IOSIntArray_GetRef(coeffs, coeffIndex++) = IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathNtruUtilArrayEncoder_COEFF1_TABLE), coeffTableIndex);
    *IOSIntArray_GetRef(coeffs, coeffIndex++) = IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathNtruUtilArrayEncoder_COEFF2_TABLE), coeffTableIndex);
    if (coeffIndex > N - 2) {
      break;
    }
  }
  return coeffs;
}

IOSByteArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_encodeMod3SvesWithIntArray_(IOSIntArray *arr) {
  OrgSpongycastlePqcMathNtruUtilArrayEncoder_initialize();
  jint numBits = (((IOSIntArray *) nil_chk(arr))->size_ * 3 + 1) / 2;
  jint numBytes = (numBits + 7) / 8;
  IOSByteArray *data = [IOSByteArray newArrayWithLength:numBytes];
  jint bitIndex = 0;
  jint byteIndex = 0;
  for (jint i = 0; i < arr->size_ / 2 * 2; ) {
    jint coeff1 = IOSIntArray_Get(arr, i++) + 1;
    jint coeff2 = IOSIntArray_Get(arr, i++) + 1;
    if (coeff1 == 0 && coeff2 == 0) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Illegal encoding!");
    }
    jint bitTableIndex = coeff1 * 3 + coeff2;
    IOSIntArray *bits = [IOSIntArray newArrayWithInts:(jint[]){ IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathNtruUtilArrayEncoder_BIT1_TABLE), bitTableIndex), IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathNtruUtilArrayEncoder_BIT2_TABLE), bitTableIndex), IOSIntArray_Get(nil_chk(OrgSpongycastlePqcMathNtruUtilArrayEncoder_BIT3_TABLE), bitTableIndex) } count:3];
    for (jint j = 0; j < 3; j++) {
      *IOSByteArray_GetRef(data, byteIndex) |= JreLShift32(IOSIntArray_Get(bits, j), bitIndex);
      if (bitIndex == 7) {
        bitIndex = 0;
        byteIndex++;
      }
      else {
        bitIndex++;
      }
    }
  }
  return data;
}

IOSByteArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_encodeMod3TightWithIntArray_(IOSIntArray *intArray) {
  OrgSpongycastlePqcMathNtruUtilArrayEncoder_initialize();
  JavaMathBigInteger *sum = JreLoadStatic(JavaMathBigInteger, ZERO);
  for (jint i = ((IOSIntArray *) nil_chk(intArray))->size_ - 1; i >= 0; i--) {
    sum = [((JavaMathBigInteger *) nil_chk(sum)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(3)];
    sum = [((JavaMathBigInteger *) nil_chk(sum)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(IOSIntArray_Get(intArray, i) + 1)];
  }
  jint size = ([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(3))) powWithInt:intArray->size_])) bitLength] + 7) / 8;
  IOSByteArray *arr = [((JavaMathBigInteger *) nil_chk(sum)) toByteArray];
  if (((IOSByteArray *) nil_chk(arr))->size_ < size) {
    IOSByteArray *arr2 = [IOSByteArray newArrayWithLength:size];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr, 0, arr2, size - arr->size_, arr->size_);
    return arr2;
  }
  if (arr->size_ > size) {
    arr = OrgSpongycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(arr, 1, arr->size_);
  }
  return arr;
}

IOSIntArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithByteArray_withInt_(IOSByteArray *b, jint N) {
  OrgSpongycastlePqcMathNtruUtilArrayEncoder_initialize();
  JavaMathBigInteger *sum = new_JavaMathBigInteger_initWithInt_withByteArray_(1, b);
  IOSIntArray *coeffs = [IOSIntArray newArrayWithLength:N];
  for (jint i = 0; i < N; i++) {
    *IOSIntArray_GetRef(coeffs, i) = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(sum)) modWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(3)])) intValue] - 1;
    if (IOSIntArray_Get(coeffs, i) > 1) {
      *IOSIntArray_GetRef(coeffs, i) -= 3;
    }
    sum = [sum divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(3)];
  }
  return coeffs;
}

IOSIntArray *OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithJavaIoInputStream_withInt_(JavaIoInputStream *is, jint N) {
  OrgSpongycastlePqcMathNtruUtilArrayEncoder_initialize();
  jint size = JreFpToInt(JavaLangMath_ceilWithDouble_(N * JavaLangMath_logWithDouble_(3) / JavaLangMath_logWithDouble_(2) / 8));
  IOSByteArray *arr = OrgSpongycastlePqcMathNtruUtilUtil_readFullLengthWithJavaIoInputStream_withInt_(is, size);
  return OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithByteArray_withInt_(arr, N);
}

jint OrgSpongycastlePqcMathNtruUtilArrayEncoder_getBitWithByteArray_withInt_(IOSByteArray *arr, jint bitIndex) {
  OrgSpongycastlePqcMathNtruUtilArrayEncoder_initialize();
  jint byteIndex = bitIndex / 8;
  jint arrElem = IOSByteArray_Get(nil_chk(arr), byteIndex) & (jint) 0xFF;
  return (JreRShift32(arrElem, (bitIndex % 8))) & 1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcMathNtruUtilArrayEncoder)
