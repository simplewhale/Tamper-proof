//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/LongPolynomial5.h"
#include "org/spongycastle/pqc/math/ntru/util/Util.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial ()

- (void)checkTernarity;

@end

__attribute__((unused)) static void OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_checkTernarity(OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *self);

@implementation OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial

- (instancetype)initWithInt:(jint)N {
  OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithInt_(self, N);
  return self;
}

- (instancetype)initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)intPoly {
  OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(self, intPoly);
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)coeffs {
  OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(self, coeffs);
  return self;
}

- (void)checkTernarity {
  OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_checkTernarity(self);
}

+ (OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *)generateRandomWithInt:(jint)N
                                                                              withInt:(jint)numOnes
                                                                              withInt:(jint)numNegOnes
                                                         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(N, numOnes, numNegOnes, random);
}

+ (OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *)generateRandomWithInt:(jint)N
                                                         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_generateRandomWithInt_withJavaSecuritySecureRandom_(N, random);
}

- (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2
                                                                                                                 withInt:(jint)modulus {
  if (modulus == 2048) {
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *poly2Pos = (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) cast_chk([((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(poly2)) java_clone], [OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial class]);
    [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(poly2Pos)) modPositiveWithInt:2048];
    OrgSpongycastlePqcMathNtruPolynomialLongPolynomial5 *poly5 = new_OrgSpongycastlePqcMathNtruPolynomialLongPolynomial5_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(poly2Pos);
    return [((OrgSpongycastlePqcMathNtruPolynomialLongPolynomial5 *) nil_chk([poly5 multWithOrgSpongycastlePqcMathNtruPolynomialTernaryPolynomial:self])) toIntegerPolynomial];
  }
  else {
    return [super multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:poly2 withInt:modulus];
  }
}

- (IOSIntArray *)getOnes {
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  IOSIntArray *ones = [IOSIntArray newArrayWithLength:N];
  jint onesIdx = 0;
  for (jint i = 0; i < N; i++) {
    jint c = IOSIntArray_Get(coeffs_, i);
    if (c == 1) {
      *IOSIntArray_GetRef(ones, onesIdx++) = i;
    }
  }
  return OrgSpongycastleUtilArrays_copyOfWithIntArray_withInt_(ones, onesIdx);
}

- (IOSIntArray *)getNegOnes {
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  IOSIntArray *negOnes = [IOSIntArray newArrayWithLength:N];
  jint negOnesIdx = 0;
  for (jint i = 0; i < N; i++) {
    jint c = IOSIntArray_Get(coeffs_, i);
    if (c == -1) {
      *IOSIntArray_GetRef(negOnes, negOnesIdx++) = i;
    }
  }
  return OrgSpongycastleUtilArrays_copyOfWithIntArray_withInt_(negOnes, negOnesIdx);
}

- (jint)size {
  return ((IOSIntArray *) nil_chk(coeffs_))->size_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial;", 0x9, 3, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[2].selector = @selector(initWithIntArray:);
  methods[3].selector = @selector(checkTernarity);
  methods[4].selector = @selector(generateRandomWithInt:withInt:withInt:withJavaSecuritySecureRandom:);
  methods[5].selector = @selector(generateRandomWithInt:withJavaSecuritySecureRandom:);
  methods[6].selector = @selector(multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:);
  methods[7].selector = @selector(getOnes);
  methods[8].selector = @selector(getNegOnes);
  methods[9].selector = @selector(size);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", "[I", "generateRandom", "IIILJavaSecuritySecureRandom;", "ILJavaSecuritySecureRandom;", "mult", "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;I" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial = { "DenseTernaryPolynomial", "org.spongycastle.pqc.math.ntru.polynomial", ptrTable, methods, NULL, 7, 0x1, 10, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial;
}

@end

void OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithInt_(OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *self, jint N) {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(self, N);
  OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_checkTernarity(self);
}

OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *new_OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithInt_(jint N) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial, initWithInt_, N)
}

OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *create_OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithInt_(jint N) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial, initWithInt_, N)
}

void OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *self, OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly) {
  OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(self, ((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(intPoly))->coeffs_);
}

OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *new_OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial, initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_, intPoly)
}

OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *create_OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *intPoly) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial, initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_, intPoly)
}

void OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *self, IOSIntArray *coeffs) {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(self, coeffs);
  OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_checkTernarity(self);
}

OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *new_OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(IOSIntArray *coeffs) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial, initWithIntArray_, coeffs)
}

OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *create_OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(IOSIntArray *coeffs) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial, initWithIntArray_, coeffs)
}

void OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_checkTernarity(OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *self) {
  for (jint i = 0; i != ((IOSIntArray *) nil_chk(self->coeffs_))->size_; i++) {
    jint c = IOSIntArray_Get(self->coeffs_, i);
    if (c < -1 || c > 1) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$", @"Illegal value: ", c, @", must be one of {-1, 0, 1}"));
    }
  }
}

OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(jint N, jint numOnes, jint numNegOnes, JavaSecuritySecureRandom *random) {
  OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initialize();
  IOSIntArray *coeffs = OrgSpongycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withJavaSecuritySecureRandom_(N, numOnes, numNegOnes, random);
  return new_OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithIntArray_(coeffs);
}

OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_generateRandomWithInt_withJavaSecuritySecureRandom_(jint N, JavaSecuritySecureRandom *random) {
  OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initialize();
  OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial *poly = new_OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_initWithInt_(N);
  for (jint i = 0; i < N; i++) {
    *IOSIntArray_GetRef(nil_chk(poly->coeffs_), i) = [((JavaSecuritySecureRandom *) nil_chk(random)) nextIntWithInt:3] - 1;
  }
  return poly;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial)
