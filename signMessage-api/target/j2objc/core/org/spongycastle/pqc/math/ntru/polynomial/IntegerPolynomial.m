//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/Runtime.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Executors.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "org/spongycastle/pqc/math/ntru/euclid/BigIntEuclidean.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/BigIntPolynomial.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/Constants.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/LongPolynomial2.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/ModularResultant.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/Resultant.h"
#include "org/spongycastle/pqc/math/ntru/util/ArrayEncoder.h"
#include "org/spongycastle/pqc/math/ntru/util/Util.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial ()

- (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)multRecursiveWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2;

- (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)mod2ToModqWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)Fq
                                                                                                                       withInt:(jint)q;

- (void)multShiftSubWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)b
                                                                      withInt:(jint)c
                                                                      withInt:(jint)k
                                                                      withInt:(jint)p;

- (JavaMathBigInteger *)squareSum;

- (void)mult2WithInt:(jint)modulus;

- (void)sortWithIntArray:(IOSIntArray *)ints;

- (jboolean)equalsZero;

- (jboolean)equalsAbsOne;

@end

inline jint OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_get_NUM_EQUAL_RESULTANTS(void);
#define OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_NUM_EQUAL_RESULTANTS 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial, NUM_EQUAL_RESULTANTS, jint)

inline IOSIntArray *OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_get_PRIMES(void);
static IOSIntArray *OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PRIMES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial, PRIMES, IOSIntArray *)

inline id<JavaUtilList> OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_get_BIGINT_PRIMES(void);
static id<JavaUtilList> OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_BIGINT_PRIMES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial, BIGINT_PRIMES, id<JavaUtilList>)

__attribute__((unused)) static OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_multRecursiveWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self, OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *poly2);

__attribute__((unused)) static OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_mod2ToModqWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self, OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *Fq, jint q);

__attribute__((unused)) static void OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_multShiftSubWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_withInt_withInt_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self, OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *b, jint c, jint k, jint p);

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_squareSum(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self);

__attribute__((unused)) static void OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_mult2WithInt_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self, jint modulus);

__attribute__((unused)) static void OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_sortWithIntArray_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self, IOSIntArray *ints);

__attribute__((unused)) static jboolean OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_equalsZero(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self);

__attribute__((unused)) static jboolean OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_equalsAbsOne(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self);

@interface OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask : NSObject < JavaUtilConcurrentCallable > {
 @public
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *this$0_;
  jint modulus_;
}

- (instancetype)initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)outer$
                                                                      withInt:(jint)modulus;

- (OrgSpongycastlePqcMathNtruPolynomialModularResultant *)call;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask)

__attribute__((unused)) static void OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask *self, OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, jint modulus);

__attribute__((unused)) static OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask *new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, jint modulus) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask *create_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, jint modulus);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask)

@interface OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask : NSObject < JavaUtilConcurrentCallable > {
 @public
  OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes1_;
  OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes2_;
}

- (instancetype)initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)outer$
                     withOrgSpongycastlePqcMathNtruPolynomialModularResultant:(OrgSpongycastlePqcMathNtruPolynomialModularResultant *)modRes1
                     withOrgSpongycastlePqcMathNtruPolynomialModularResultant:(OrgSpongycastlePqcMathNtruPolynomialModularResultant *)modRes2;

- (OrgSpongycastlePqcMathNtruPolynomialModularResultant *)call;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask)

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask, modRes1_, OrgSpongycastlePqcMathNtruPolynomialModularResultant *)
J2OBJC_FIELD_SETTER(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask, modRes2_, OrgSpongycastlePqcMathNtruPolynomialModularResultant *)

__attribute__((unused)) static void OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask *self, OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes1, OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes2);

__attribute__((unused)) static OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask *new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes1, OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes2) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask *create_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes1, OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes2);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask)

@interface OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator : NSObject {
 @public
  jint index_;
  JavaMathBigInteger *prime_;
}

- (instancetype)initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)outer$;

- (JavaMathBigInteger *)nextPrime;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator)

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator, prime_, JavaMathBigInteger *)

__attribute__((unused)) static void OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator *self, OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$);

__attribute__((unused)) static OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator *new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator *create_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator)

J2OBJC_INITIALIZED_DEFN(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial)

@implementation OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial

- (instancetype)initWithInt:(jint)N {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(self, N);
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)coeffs {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(self, coeffs);
  return self;
}

- (instancetype)initWithOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial:(OrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial *)p {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial_(self, p);
  return self;
}

+ (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)fromBinary3SvesWithByteArray:(IOSByteArray *)data
                                                                                withInt:(jint)N {
  return OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3SvesWithByteArray_withInt_(data, N);
}

+ (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)fromBinary3TightWithByteArray:(IOSByteArray *)b
                                                                                 withInt:(jint)N {
  return OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3TightWithByteArray_withInt_(b, N);
}

+ (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)fromBinary3TightWithJavaIoInputStream:(JavaIoInputStream *)is
                                                                                         withInt:(jint)N {
  return OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3TightWithJavaIoInputStream_withInt_(is, N);
}

+ (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)fromBinaryWithByteArray:(IOSByteArray *)data
                                                                           withInt:(jint)N
                                                                           withInt:(jint)q {
  return OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinaryWithByteArray_withInt_withInt_(data, N, q);
}

+ (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)fromBinaryWithJavaIoInputStream:(JavaIoInputStream *)is
                                                                                   withInt:(jint)N
                                                                                   withInt:(jint)q {
  return OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_(is, N, q);
}

- (IOSByteArray *)toBinary3Sves {
  return OrgSpongycastlePqcMathNtruUtilArrayEncoder_encodeMod3SvesWithIntArray_(coeffs_);
}

- (IOSByteArray *)toBinary3Tight {
  JavaMathBigInteger *sum = JreLoadStatic(OrgSpongycastlePqcMathNtruPolynomialConstants, BIGINT_ZERO);
  for (jint i = ((IOSIntArray *) nil_chk(coeffs_))->size_ - 1; i >= 0; i--) {
    sum = [((JavaMathBigInteger *) nil_chk(sum)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(3)];
    sum = [((JavaMathBigInteger *) nil_chk(sum)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(IOSIntArray_Get(nil_chk(coeffs_), i) + 1)];
  }
  jint size = ([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(3))) powWithInt:((IOSIntArray *) nil_chk(coeffs_))->size_])) bitLength] + 7) / 8;
  IOSByteArray *arr = [((JavaMathBigInteger *) nil_chk(sum)) toByteArray];
  if (((IOSByteArray *) nil_chk(arr))->size_ < size) {
    IOSByteArray *arr2 = [IOSByteArray newArrayWithLength:size];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr, 0, arr2, size - arr->size_, arr->size_);
    return arr2;
  }
  if (arr->size_ > size) {
    arr = OrgSpongycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(arr, 1, arr->size_);
  }
  return arr;
}

- (IOSByteArray *)toBinaryWithInt:(jint)q {
  return OrgSpongycastlePqcMathNtruUtilArrayEncoder_encodeModQWithIntArray_withInt_(coeffs_, q);
}

- (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2
                                                                                                                 withInt:(jint)modulus {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *c = [self multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:poly2];
  [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(c)) modWithInt:modulus];
  return c;
}

- (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2 {
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  if (((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(poly2))->coeffs_->size_ != N) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Number of coefficients must be the same");
  }
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *c = OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_multRecursiveWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(self, poly2);
  if (((IOSIntArray *) nil_chk(((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(c))->coeffs_))->size_ > N) {
    for (jint k = N; k < c->coeffs_->size_; k++) {
      *IOSIntArray_GetRef(c->coeffs_, k - N) += IOSIntArray_Get(c->coeffs_, k);
    }
    c->coeffs_ = OrgSpongycastleUtilArrays_copyOfWithIntArray_withInt_(c->coeffs_, N);
  }
  return c;
}

- (OrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial *)multWithOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial:(OrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial *)poly2 {
  return [new_OrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(self) multWithOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial:poly2];
}

- (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)multRecursiveWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)poly2 {
  return OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_multRecursiveWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(self, poly2);
}

- (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)invertFqWithInt:(jint)q {
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  jint k = 0;
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *b = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  *IOSIntArray_GetRef(nil_chk(b->coeffs_), 0) = 1;
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *c = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *f = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  f->coeffs_ = OrgSpongycastleUtilArrays_copyOfWithIntArray_withInt_(coeffs_, N + 1);
  [f modPositiveWithInt:2];
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *g = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  *IOSIntArray_GetRef(nil_chk(g->coeffs_), 0) = 1;
  *IOSIntArray_GetRef(g->coeffs_, N) = 1;
  while (true) {
    while (IOSIntArray_Get(nil_chk(f->coeffs_), 0) == 0) {
      for (jint i = 1; i <= N; i++) {
        *IOSIntArray_GetRef(f->coeffs_, i - 1) = IOSIntArray_Get(f->coeffs_, i);
        *IOSIntArray_GetRef(c->coeffs_, N + 1 - i) = IOSIntArray_Get(c->coeffs_, N - i);
      }
      *IOSIntArray_GetRef(f->coeffs_, N) = 0;
      *IOSIntArray_GetRef(c->coeffs_, 0) = 0;
      k++;
      if (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_equalsZero(f)) {
        return nil;
      }
    }
    if ([f equalsOne]) {
      break;
    }
    if ([f degree] < [g degree]) {
      OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *temp = f;
      f = g;
      g = temp;
      temp = b;
      b = c;
      c = temp;
    }
    [f addWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:g withInt:2];
    [b addWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:c withInt:2];
  }
  if (IOSIntArray_Get(nil_chk(b->coeffs_), N) != 0) {
    return nil;
  }
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *Fq = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N);
  jint j = 0;
  k %= N;
  for (jint i = N - 1; i >= 0; i--) {
    j = i - k;
    if (j < 0) {
      j += N;
    }
    *IOSIntArray_GetRef(nil_chk(Fq->coeffs_), j) = IOSIntArray_Get(b->coeffs_, i);
  }
  return OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_mod2ToModqWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(self, Fq, q);
}

- (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)mod2ToModqWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)Fq
                                                                                                                       withInt:(jint)q {
  return OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_mod2ToModqWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(self, Fq, q);
}

- (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)invertF3 {
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  jint k = 0;
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *b = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  *IOSIntArray_GetRef(nil_chk(b->coeffs_), 0) = 1;
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *c = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *f = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  f->coeffs_ = OrgSpongycastleUtilArrays_copyOfWithIntArray_withInt_(coeffs_, N + 1);
  [f modPositiveWithInt:3];
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *g = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N + 1);
  *IOSIntArray_GetRef(nil_chk(g->coeffs_), 0) = -1;
  *IOSIntArray_GetRef(g->coeffs_, N) = 1;
  while (true) {
    while (IOSIntArray_Get(nil_chk(f->coeffs_), 0) == 0) {
      for (jint i = 1; i <= N; i++) {
        *IOSIntArray_GetRef(f->coeffs_, i - 1) = IOSIntArray_Get(f->coeffs_, i);
        *IOSIntArray_GetRef(c->coeffs_, N + 1 - i) = IOSIntArray_Get(c->coeffs_, N - i);
      }
      *IOSIntArray_GetRef(f->coeffs_, N) = 0;
      *IOSIntArray_GetRef(c->coeffs_, 0) = 0;
      k++;
      if (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_equalsZero(f)) {
        return nil;
      }
    }
    if (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_equalsAbsOne(f)) {
      break;
    }
    if ([f degree] < [g degree]) {
      OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *temp = f;
      f = g;
      g = temp;
      temp = b;
      b = c;
      c = temp;
    }
    if (IOSIntArray_Get(nil_chk(f->coeffs_), 0) == IOSIntArray_Get(g->coeffs_, 0)) {
      [f subWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:g withInt:3];
      [b subWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:c withInt:3];
    }
    else {
      [f addWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:g withInt:3];
      [b addWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:c withInt:3];
    }
  }
  if (IOSIntArray_Get(nil_chk(b->coeffs_), N) != 0) {
    return nil;
  }
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *Fp = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N);
  jint j = 0;
  k %= N;
  for (jint i = N - 1; i >= 0; i--) {
    j = i - k;
    if (j < 0) {
      j += N;
    }
    *IOSIntArray_GetRef(nil_chk(Fp->coeffs_), j) = IOSIntArray_Get(f->coeffs_, 0) * IOSIntArray_Get(b->coeffs_, i);
  }
  [Fp ensurePositiveWithInt:3];
  return Fp;
}

- (OrgSpongycastlePqcMathNtruPolynomialResultant *)resultant {
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  JavaUtilLinkedList *modResultants = new_JavaUtilLinkedList_init();
  JavaMathBigInteger *pProd = JreLoadStatic(OrgSpongycastlePqcMathNtruPolynomialConstants, BIGINT_ONE);
  JavaMathBigInteger *res = JreLoadStatic(OrgSpongycastlePqcMathNtruPolynomialConstants, BIGINT_ONE);
  jint numEqual = 1;
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator *primes = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(self);
  while (true) {
    JavaMathBigInteger *prime = [primes nextPrime];
    OrgSpongycastlePqcMathNtruPolynomialModularResultant *crr = [self resultantWithInt:[((JavaMathBigInteger *) nil_chk(prime)) intValue]];
    [modResultants addWithId:crr];
    JavaMathBigInteger *temp = [((JavaMathBigInteger *) nil_chk(pProd)) multiplyWithJavaMathBigInteger:prime];
    OrgSpongycastlePqcMathNtruEuclidBigIntEuclidean *er = OrgSpongycastlePqcMathNtruEuclidBigIntEuclidean_calculateWithJavaMathBigInteger_withJavaMathBigInteger_(prime, pProd);
    JavaMathBigInteger *resPrev = res;
    res = [((JavaMathBigInteger *) nil_chk(res)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(((OrgSpongycastlePqcMathNtruEuclidBigIntEuclidean *) nil_chk(er))->x_)) multiplyWithJavaMathBigInteger:prime]];
    JavaMathBigInteger *res2 = [((JavaMathBigInteger *) nil_chk(((OrgSpongycastlePqcMathNtruPolynomialModularResultant *) nil_chk(crr))->res_)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(er->y_)) multiplyWithJavaMathBigInteger:pProd]];
    res = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(res)) addWithJavaMathBigInteger:res2])) modWithJavaMathBigInteger:temp];
    pProd = temp;
    JavaMathBigInteger *pProd2 = [((JavaMathBigInteger *) nil_chk(pProd)) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(2)];
    JavaMathBigInteger *pProd2n = [((JavaMathBigInteger *) nil_chk(pProd2)) negate];
    if ([((JavaMathBigInteger *) nil_chk(res)) compareToWithId:pProd2] > 0) {
      res = [res subtractWithJavaMathBigInteger:pProd];
    }
    else if ([res compareToWithId:pProd2n] < 0) {
      res = [res addWithJavaMathBigInteger:pProd];
    }
    if ([((JavaMathBigInteger *) nil_chk(res)) isEqual:resPrev]) {
      numEqual++;
      if (numEqual >= OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_NUM_EQUAL_RESULTANTS) {
        break;
      }
    }
    else {
      numEqual = 1;
    }
  }
  while ([modResultants size] > 1) {
    OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes1 = [modResultants removeFirst];
    OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes2 = [modResultants removeFirst];
    OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes3 = OrgSpongycastlePqcMathNtruPolynomialModularResultant_combineRhoWithOrgSpongycastlePqcMathNtruPolynomialModularResultant_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_(modRes1, modRes2);
    [modResultants addLastWithId:modRes3];
  }
  OrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial *rhoP = ((OrgSpongycastlePqcMathNtruPolynomialModularResultant *) nil_chk([modResultants getFirst]))->rho_;
  JavaMathBigInteger *pProd2 = [((JavaMathBigInteger *) nil_chk(pProd)) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(2)];
  JavaMathBigInteger *pProd2n = [((JavaMathBigInteger *) nil_chk(pProd2)) negate];
  if ([((JavaMathBigInteger *) nil_chk(res)) compareToWithId:pProd2] > 0) {
    res = [res subtractWithJavaMathBigInteger:pProd];
  }
  if ([((JavaMathBigInteger *) nil_chk(res)) compareToWithId:pProd2n] < 0) {
    res = [res addWithJavaMathBigInteger:pProd];
  }
  for (jint i = 0; i < N; i++) {
    JavaMathBigInteger *c = IOSObjectArray_Get(nil_chk(((OrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(rhoP))->coeffs_), i);
    if ([((JavaMathBigInteger *) nil_chk(c)) compareToWithId:pProd2] > 0) {
      (void) IOSObjectArray_Set(nil_chk(rhoP->coeffs_), i, [c subtractWithJavaMathBigInteger:pProd]);
    }
    if ([c compareToWithId:pProd2n] < 0) {
      (void) IOSObjectArray_Set(nil_chk(rhoP->coeffs_), i, [c addWithJavaMathBigInteger:pProd]);
    }
  }
  return new_OrgSpongycastlePqcMathNtruPolynomialResultant_initWithOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_(rhoP, res);
}

- (OrgSpongycastlePqcMathNtruPolynomialResultant *)resultantMultiThread {
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  JavaMathBigInteger *max = [((JavaMathBigInteger *) nil_chk(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_squareSum(self))) powWithInt:(N + 1) / 2];
  max = [((JavaMathBigInteger *) nil_chk(max)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(2))) powWithInt:([self degree] + 1) / 2]];
  JavaMathBigInteger *max2 = [((JavaMathBigInteger *) nil_chk(max)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(2)];
  JavaMathBigInteger *prime = JavaMathBigInteger_valueOfWithLong_(10000);
  JavaMathBigInteger *pProd = JreLoadStatic(OrgSpongycastlePqcMathNtruPolynomialConstants, BIGINT_ONE);
  JavaUtilConcurrentLinkedBlockingQueue *resultantTasks = new_JavaUtilConcurrentLinkedBlockingQueue_init();
  id<JavaUtilIterator> primes = [((id<JavaUtilList>) nil_chk(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_BIGINT_PRIMES)) iterator];
  id<JavaUtilConcurrentExecutorService> executor = JavaUtilConcurrentExecutors_newFixedThreadPoolWithInt_([((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) availableProcessors]);
  while ([((JavaMathBigInteger *) nil_chk(pProd)) compareToWithId:max2] < 0) {
    if ([((id<JavaUtilIterator>) nil_chk(primes)) hasNext]) {
      prime = [primes next];
    }
    else {
      prime = [((JavaMathBigInteger *) nil_chk(prime)) nextProbablePrime];
    }
    id<JavaUtilConcurrentFuture> task = [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) submitWithJavaUtilConcurrentCallable:new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(self, [((JavaMathBigInteger *) nil_chk(prime)) intValue])];
    [resultantTasks addWithId:task];
    pProd = [pProd multiplyWithJavaMathBigInteger:prime];
  }
  OrgSpongycastlePqcMathNtruPolynomialModularResultant *overallResultant = nil;
  while (![resultantTasks isEmpty]) {
    @try {
      id<JavaUtilConcurrentFuture> modRes1 = [resultantTasks take];
      id<JavaUtilConcurrentFuture> modRes2 = [resultantTasks poll];
      if (modRes2 == nil) {
        overallResultant = [((id<JavaUtilConcurrentFuture>) nil_chk(modRes1)) get];
        break;
      }
      id<JavaUtilConcurrentFuture> newTask = [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) submitWithJavaUtilConcurrentCallable:new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_(self, [((id<JavaUtilConcurrentFuture>) nil_chk(modRes1)) get], [modRes2 get])];
      [resultantTasks addWithId:newTask];
    }
    @catch (JavaLangException *e) {
      @throw new_JavaLangIllegalStateException_initWithNSString_([e description]);
    }
  }
  [((id<JavaUtilConcurrentExecutorService>) nil_chk(executor)) shutdown];
  JavaMathBigInteger *res = ((OrgSpongycastlePqcMathNtruPolynomialModularResultant *) nil_chk(overallResultant))->res_;
  OrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial *rhoP = overallResultant->rho_;
  JavaMathBigInteger *pProd2 = [pProd divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(2)];
  JavaMathBigInteger *pProd2n = [((JavaMathBigInteger *) nil_chk(pProd2)) negate];
  if ([((JavaMathBigInteger *) nil_chk(res)) compareToWithId:pProd2] > 0) {
    res = [res subtractWithJavaMathBigInteger:pProd];
  }
  if ([((JavaMathBigInteger *) nil_chk(res)) compareToWithId:pProd2n] < 0) {
    res = [res addWithJavaMathBigInteger:pProd];
  }
  for (jint i = 0; i < N; i++) {
    JavaMathBigInteger *c = IOSObjectArray_Get(nil_chk(((OrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(rhoP))->coeffs_), i);
    if ([((JavaMathBigInteger *) nil_chk(c)) compareToWithId:pProd2] > 0) {
      (void) IOSObjectArray_Set(nil_chk(rhoP->coeffs_), i, [c subtractWithJavaMathBigInteger:pProd]);
    }
    if ([c compareToWithId:pProd2n] < 0) {
      (void) IOSObjectArray_Set(nil_chk(rhoP->coeffs_), i, [c addWithJavaMathBigInteger:pProd]);
    }
  }
  return new_OrgSpongycastlePqcMathNtruPolynomialResultant_initWithOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_(rhoP, res);
}

- (OrgSpongycastlePqcMathNtruPolynomialModularResultant *)resultantWithInt:(jint)p {
  IOSIntArray *fcoeffs = OrgSpongycastleUtilArrays_copyOfWithIntArray_withInt_(coeffs_, ((IOSIntArray *) nil_chk(coeffs_))->size_ + 1);
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *f = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(fcoeffs);
  jint N = ((IOSIntArray *) nil_chk(fcoeffs))->size_;
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *a = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N);
  *IOSIntArray_GetRef(nil_chk(a->coeffs_), 0) = -1;
  *IOSIntArray_GetRef(a->coeffs_, N - 1) = 1;
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *b = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(f->coeffs_);
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *v1 = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N);
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *v2 = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(N);
  *IOSIntArray_GetRef(nil_chk(v2->coeffs_), 0) = 1;
  jint da = N - 1;
  jint db = [b degree];
  jint ta = da;
  jint c = 0;
  jint r = 1;
  while (db > 0) {
    c = OrgSpongycastlePqcMathNtruUtilUtil_invertWithInt_withInt_(IOSIntArray_Get(nil_chk(b->coeffs_), db), p);
    c = (c * IOSIntArray_Get(nil_chk(a->coeffs_), da)) % p;
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_multShiftSubWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_withInt_withInt_(a, b, c, da - db, p);
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_multShiftSubWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_withInt_withInt_(v1, v2, c, da - db, p);
    da = [a degree];
    if (da < db) {
      r *= OrgSpongycastlePqcMathNtruUtilUtil_powWithInt_withInt_withInt_(IOSIntArray_Get(nil_chk(b->coeffs_), db), ta - da, p);
      r %= p;
      if (ta % 2 == 1 && db % 2 == 1) {
        r = (-r) % p;
      }
      OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *temp = a;
      a = b;
      b = temp;
      jint tempdeg = da;
      da = db;
      temp = v1;
      v1 = v2;
      v2 = temp;
      ta = db;
      db = tempdeg;
    }
  }
  r *= OrgSpongycastlePqcMathNtruUtilUtil_powWithInt_withInt_withInt_(IOSIntArray_Get(nil_chk(b->coeffs_), 0), da, p);
  r %= p;
  c = OrgSpongycastlePqcMathNtruUtilUtil_invertWithInt_withInt_(IOSIntArray_Get(nil_chk(b->coeffs_), 0), p);
  [v2 multWithInt:c];
  [v2 modWithInt:p];
  [v2 multWithInt:r];
  [v2 modWithInt:p];
  v2->coeffs_ = OrgSpongycastleUtilArrays_copyOfWithIntArray_withInt_(v2->coeffs_, ((IOSIntArray *) nil_chk(v2->coeffs_))->size_ - 1);
  return new_OrgSpongycastlePqcMathNtruPolynomialModularResultant_initWithOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial_withJavaMathBigInteger_withJavaMathBigInteger_(new_OrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(v2), JavaMathBigInteger_valueOfWithLong_(r), JavaMathBigInteger_valueOfWithLong_(p));
}

- (void)multShiftSubWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)b
                                                                      withInt:(jint)c
                                                                      withInt:(jint)k
                                                                      withInt:(jint)p {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_multShiftSubWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_withInt_withInt_(self, b, c, k, p);
}

- (JavaMathBigInteger *)squareSum {
  return OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_squareSum(self);
}

- (jint)degree {
  jint degree = ((IOSIntArray *) nil_chk(coeffs_))->size_ - 1;
  while (degree > 0 && IOSIntArray_Get(coeffs_, degree) == 0) {
    degree--;
  }
  return degree;
}

- (void)addWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)b
                                                             withInt:(jint)modulus {
  [self addWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:b];
  [self modWithInt:modulus];
}

- (void)addWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)b {
  if (((IOSIntArray *) nil_chk(((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(b))->coeffs_))->size_ > coeffs_->size_) {
    coeffs_ = OrgSpongycastleUtilArrays_copyOfWithIntArray_withInt_(coeffs_, b->coeffs_->size_);
  }
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(b->coeffs_))->size_; i++) {
    *IOSIntArray_GetRef(coeffs_, i) += IOSIntArray_Get(b->coeffs_, i);
  }
}

- (void)subWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)b
                                                             withInt:(jint)modulus {
  [self subWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:b];
  [self modWithInt:modulus];
}

- (void)subWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)b {
  if (((IOSIntArray *) nil_chk(((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(b))->coeffs_))->size_ > coeffs_->size_) {
    coeffs_ = OrgSpongycastleUtilArrays_copyOfWithIntArray_withInt_(coeffs_, b->coeffs_->size_);
  }
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(b->coeffs_))->size_; i++) {
    *IOSIntArray_GetRef(coeffs_, i) -= IOSIntArray_Get(b->coeffs_, i);
  }
}

- (void)subWithInt:(jint)b {
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    *IOSIntArray_GetRef(coeffs_, i) -= b;
  }
}

- (void)multWithInt:(jint)factor {
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    *IOSIntArray_GetRef(coeffs_, i) *= factor;
  }
}

- (void)mult2WithInt:(jint)modulus {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_mult2WithInt_(self, modulus);
}

- (void)mult3WithInt:(jint)modulus {
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    *IOSIntArray_GetRef(coeffs_, i) *= 3;
    *IOSIntArray_GetRef(coeffs_, i) %= modulus;
  }
}

- (void)divWithInt:(jint)k {
  jint k2 = (k + 1) / 2;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    *IOSIntArray_GetRef(coeffs_, i) += IOSIntArray_Get(coeffs_, i) > 0 ? k2 : -k2;
    *IOSIntArray_GetRef(coeffs_, i) /= k;
  }
}

- (void)mod3 {
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    *IOSIntArray_GetRef(coeffs_, i) %= 3;
    if (IOSIntArray_Get(coeffs_, i) > 1) {
      *IOSIntArray_GetRef(coeffs_, i) -= 3;
    }
    if (IOSIntArray_Get(coeffs_, i) < -1) {
      *IOSIntArray_GetRef(coeffs_, i) += 3;
    }
  }
}

- (void)modPositiveWithInt:(jint)modulus {
  [self modWithInt:modulus];
  [self ensurePositiveWithInt:modulus];
}

- (void)modCenterWithInt:(jint)modulus {
  [self modWithInt:modulus];
  for (jint j = 0; j < ((IOSIntArray *) nil_chk(coeffs_))->size_; j++) {
    while (IOSIntArray_Get(coeffs_, j) < modulus / 2) {
      *IOSIntArray_GetRef(coeffs_, j) += modulus;
    }
    while (IOSIntArray_Get(coeffs_, j) >= modulus / 2) {
      *IOSIntArray_GetRef(coeffs_, j) -= modulus;
    }
  }
}

- (void)modWithInt:(jint)modulus {
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    *IOSIntArray_GetRef(coeffs_, i) %= modulus;
  }
}

- (void)ensurePositiveWithInt:(jint)modulus {
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    while (IOSIntArray_Get(coeffs_, i) < 0) {
      *IOSIntArray_GetRef(coeffs_, i) += modulus;
    }
  }
}

- (jlong)centeredNormSqWithInt:(jint)q {
  jint N = ((IOSIntArray *) nil_chk(coeffs_))->size_;
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *p = (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) cast_chk([self java_clone], [OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial class]);
  [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(p)) shiftGapWithInt:q];
  jlong sum = 0;
  jlong sqSum = 0;
  for (jint i = 0; i != ((IOSIntArray *) nil_chk(p->coeffs_))->size_; i++) {
    jint c = IOSIntArray_Get(p->coeffs_, i);
    sum += c;
    sqSum += c * c;
  }
  jlong centeredNormSq = sqSum - sum * sum / N;
  return centeredNormSq;
}

- (void)shiftGapWithInt:(jint)q {
  [self modCenterWithInt:q];
  IOSIntArray *sorted = OrgSpongycastleUtilArrays_cloneWithIntArray_(coeffs_);
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_sortWithIntArray_(self, sorted);
  jint maxrange = 0;
  jint maxrangeStart = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(sorted))->size_ - 1; i++) {
    jint range = IOSIntArray_Get(sorted, i + 1) - IOSIntArray_Get(sorted, i);
    if (range > maxrange) {
      maxrange = range;
      maxrangeStart = IOSIntArray_Get(sorted, i);
    }
  }
  jint pmin = IOSIntArray_Get(sorted, 0);
  jint pmax = IOSIntArray_Get(sorted, sorted->size_ - 1);
  jint j = q - pmax + pmin;
  jint shift;
  if (j > maxrange) {
    shift = (pmax + pmin) / 2;
  }
  else {
    shift = maxrangeStart + maxrange / 2 + q / 2;
  }
  [self subWithInt:shift];
}

- (void)sortWithIntArray:(IOSIntArray *)ints {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_sortWithIntArray_(self, ints);
}

- (void)center0WithInt:(jint)q {
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    while (IOSIntArray_Get(coeffs_, i) < -q / 2) {
      *IOSIntArray_GetRef(coeffs_, i) += q;
    }
    while (IOSIntArray_Get(coeffs_, i) > q / 2) {
      *IOSIntArray_GetRef(coeffs_, i) -= q;
    }
  }
}

- (jint)sumCoeffs {
  jint sum = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    sum += IOSIntArray_Get(coeffs_, i);
  }
  return sum;
}

- (jboolean)equalsZero {
  return OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_equalsZero(self);
}

- (jboolean)equalsOne {
  for (jint i = 1; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    if (IOSIntArray_Get(coeffs_, i) != 0) {
      return false;
    }
  }
  return IOSIntArray_Get(coeffs_, 0) == 1;
}

- (jboolean)equalsAbsOne {
  return OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_equalsAbsOne(self);
}

- (jint)countWithInt:(jint)value {
  jint count = 0;
  for (jint i = 0; i != ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    if (IOSIntArray_Get(coeffs_, i) == value) {
      count++;
    }
  }
  return count;
}

- (void)rotate1 {
  jint clast = IOSIntArray_Get(coeffs_, ((IOSIntArray *) nil_chk(coeffs_))->size_ - 1);
  for (jint i = coeffs_->size_ - 1; i > 0; i--) {
    *IOSIntArray_GetRef(coeffs_, i) = IOSIntArray_Get(coeffs_, i - 1);
  }
  *IOSIntArray_GetRef(coeffs_, 0) = clast;
}

- (void)clear {
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(coeffs_))->size_; i++) {
    *IOSIntArray_GetRef(coeffs_, i) = 0;
  }
}

- (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)toIntegerPolynomial {
  return (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) cast_chk([self java_clone], [OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial class]);
}

- (id)java_clone {
  return new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_([((IOSIntArray *) nil_chk(coeffs_)) java_clone]);
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial class]]) {
    return OrgSpongycastleUtilArrays_areEqualWithIntArray_withIntArray_(coeffs_, ((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) obj)))->coeffs_);
  }
  else {
    return false;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x9, 5, 4, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x9, 5, 6, 7, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x9, 8, 10, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 11, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial;", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x2, 15, 14, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, 16, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x2, 17, 13, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialResultant;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialResultant;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialModularResultant;", 0x1, 18, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 22, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 27, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 30, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 31, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 34, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 35, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 36, 37, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithIntArray:);
  methods[2].selector = @selector(initWithOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial:);
  methods[3].selector = @selector(fromBinary3SvesWithByteArray:withInt:);
  methods[4].selector = @selector(fromBinary3TightWithByteArray:withInt:);
  methods[5].selector = @selector(fromBinary3TightWithJavaIoInputStream:withInt:);
  methods[6].selector = @selector(fromBinaryWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(fromBinaryWithJavaIoInputStream:withInt:withInt:);
  methods[8].selector = @selector(toBinary3Sves);
  methods[9].selector = @selector(toBinary3Tight);
  methods[10].selector = @selector(toBinaryWithInt:);
  methods[11].selector = @selector(multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:);
  methods[12].selector = @selector(multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[13].selector = @selector(multWithOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial:);
  methods[14].selector = @selector(multRecursiveWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[15].selector = @selector(invertFqWithInt:);
  methods[16].selector = @selector(mod2ToModqWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:);
  methods[17].selector = @selector(invertF3);
  methods[18].selector = @selector(resultant);
  methods[19].selector = @selector(resultantMultiThread);
  methods[20].selector = @selector(resultantWithInt:);
  methods[21].selector = @selector(multShiftSubWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:withInt:withInt:);
  methods[22].selector = @selector(squareSum);
  methods[23].selector = @selector(degree);
  methods[24].selector = @selector(addWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:);
  methods[25].selector = @selector(addWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[26].selector = @selector(subWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:);
  methods[27].selector = @selector(subWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[28].selector = @selector(subWithInt:);
  methods[29].selector = @selector(multWithInt:);
  methods[30].selector = @selector(mult2WithInt:);
  methods[31].selector = @selector(mult3WithInt:);
  methods[32].selector = @selector(divWithInt:);
  methods[33].selector = @selector(mod3);
  methods[34].selector = @selector(modPositiveWithInt:);
  methods[35].selector = @selector(modCenterWithInt:);
  methods[36].selector = @selector(modWithInt:);
  methods[37].selector = @selector(ensurePositiveWithInt:);
  methods[38].selector = @selector(centeredNormSqWithInt:);
  methods[39].selector = @selector(shiftGapWithInt:);
  methods[40].selector = @selector(sortWithIntArray:);
  methods[41].selector = @selector(center0WithInt:);
  methods[42].selector = @selector(sumCoeffs);
  methods[43].selector = @selector(equalsZero);
  methods[44].selector = @selector(equalsOne);
  methods[45].selector = @selector(equalsAbsOne);
  methods[46].selector = @selector(countWithInt:);
  methods[47].selector = @selector(rotate1);
  methods[48].selector = @selector(clear);
  methods[49].selector = @selector(toIntegerPolynomial);
  methods[50].selector = @selector(java_clone);
  methods[51].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NUM_EQUAL_RESULTANTS", "I", .constantValue.asInt = OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_NUM_EQUAL_RESULTANTS, 0x1a, -1, -1, -1, -1 },
    { "PRIMES", "[I", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "BIGINT_PRIMES", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "coeffs_", "[I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "[I", "LOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial;", "fromBinary3Sves", "[BI", "fromBinary3Tight", "LJavaIoInputStream;I", "LJavaIoIOException;", "fromBinary", "[BII", "LJavaIoInputStream;II", "toBinary", "mult", "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;I", "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", "multRecursive", "invertFq", "mod2ToModq", "resultant", "multShiftSub", "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;III", "add", "sub", "mult2", "mult3", "div", "modPositive", "modCenter", "mod", "ensurePositive", "centeredNormSq", "shiftGap", "sort", "center0", "count", "clone", "equals", "LNSObject;", &OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PRIMES, &OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_BIGINT_PRIMES, "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask;LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask;LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator;" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial = { "IntegerPolynomial", "org.spongycastle.pqc.math.ntru.polynomial", ptrTable, methods, fields, 7, 0x1, 52, 4, -1, 40, -1, -1, -1 };
  return &_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;
}

+ (void)initialize {
  if (self == [OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial class]) {
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PRIMES = [IOSIntArray newArrayWithInts:(jint[]){ 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973 } count:619];
    {
      OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_BIGINT_PRIMES = new_JavaUtilArrayList_init();
      for (jint i = 0; i != OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PRIMES->size_; i++) {
        [OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_BIGINT_PRIMES addWithId:JavaMathBigInteger_valueOfWithLong_(IOSIntArray_Get(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PRIMES, i))];
      }
    }
    J2OBJC_SET_INITIALIZED(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial)
  }
}

@end

void OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self, jint N) {
  NSObject_init(self);
  self->coeffs_ = [IOSIntArray newArrayWithLength:N];
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(jint N) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial, initWithInt_, N)
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *create_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(jint N) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial, initWithInt_, N)
}

void OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self, IOSIntArray *coeffs) {
  NSObject_init(self);
  self->coeffs_ = coeffs;
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(IOSIntArray *coeffs) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial, initWithIntArray_, coeffs)
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *create_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(IOSIntArray *coeffs) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial, initWithIntArray_, coeffs)
}

void OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self, OrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial *p) {
  NSObject_init(self);
  self->coeffs_ = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(((OrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial *) nil_chk(p))->coeffs_))->size_];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(p->coeffs_))->size_; i++) {
    *IOSIntArray_GetRef(nil_chk(self->coeffs_), i) = [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(p->coeffs_, i))) intValue];
  }
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial_(OrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial *p) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial, initWithOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial_, p)
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *create_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial_(OrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial *p) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial, initWithOrgSpongycastlePqcMathNtruPolynomialBigIntPolynomial_, p)
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3SvesWithByteArray_withInt_(IOSByteArray *data, jint N) {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initialize();
  return new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeMod3SvesWithByteArray_withInt_(data, N));
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3TightWithByteArray_withInt_(IOSByteArray *b, jint N) {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initialize();
  return new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithByteArray_withInt_(b, N));
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinary3TightWithJavaIoInputStream_withInt_(JavaIoInputStream *is, jint N) {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initialize();
  return new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeMod3TightWithJavaIoInputStream_withInt_(is, N));
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinaryWithByteArray_withInt_withInt_(IOSByteArray *data, jint N, jint q) {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initialize();
  return new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeModQWithByteArray_withInt_withInt_(data, N, q));
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_fromBinaryWithJavaIoInputStream_withInt_withInt_(JavaIoInputStream *is, jint N, jint q) {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initialize();
  return new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgSpongycastlePqcMathNtruUtilArrayEncoder_decodeModQWithJavaIoInputStream_withInt_withInt_(is, N, q));
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_multRecursiveWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self, OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *poly2) {
  IOSIntArray *a = self->coeffs_;
  IOSIntArray *b = ((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(poly2))->coeffs_;
  jint n = ((IOSIntArray *) nil_chk(poly2->coeffs_))->size_;
  if (n <= 32) {
    jint cn = 2 * n - 1;
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *c = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_([IOSIntArray newArrayWithLength:cn]);
    for (jint k = 0; k < cn; k++) {
      for (jint i = JavaLangMath_maxWithInt_withInt_(0, k - n + 1); i <= JavaLangMath_minWithInt_withInt_(k, n - 1); i++) {
        *IOSIntArray_GetRef(nil_chk(c->coeffs_), k) += IOSIntArray_Get(nil_chk(b), i) * IOSIntArray_Get(nil_chk(a), k - i);
      }
    }
    return c;
  }
  else {
    jint n1 = n / 2;
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *a1 = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgSpongycastleUtilArrays_copyOfWithIntArray_withInt_(a, n1));
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *a2 = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgSpongycastleUtilArrays_copyOfRangeWithIntArray_withInt_withInt_(a, n1, n));
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *b1 = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgSpongycastleUtilArrays_copyOfWithIntArray_withInt_(b, n1));
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *b2 = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgSpongycastleUtilArrays_copyOfRangeWithIntArray_withInt_withInt_(b, n1, n));
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *A = (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) cast_chk([a1 java_clone], [OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial class]);
    [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(A)) addWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:a2];
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *B = (OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) cast_chk([b1 java_clone], [OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial class]);
    [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(B)) addWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:b2];
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *c1 = OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_multRecursiveWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(a1, b1);
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *c2 = OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_multRecursiveWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(a2, b2);
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *c3 = OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_multRecursiveWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(A, B);
    [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(c3)) subWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:c1];
    [c3 subWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:c2];
    OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *c = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithInt_(2 * n - 1);
    for (jint i = 0; i < ((IOSIntArray *) nil_chk(((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(c1))->coeffs_))->size_; i++) {
      *IOSIntArray_GetRef(c->coeffs_, i) = IOSIntArray_Get(c1->coeffs_, i);
    }
    for (jint i = 0; i < c3->coeffs_->size_; i++) {
      *IOSIntArray_GetRef(c->coeffs_, n1 + i) += IOSIntArray_Get(c3->coeffs_, i);
    }
    for (jint i = 0; i < ((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(c2))->coeffs_->size_; i++) {
      *IOSIntArray_GetRef(c->coeffs_, 2 * n1 + i) += IOSIntArray_Get(c2->coeffs_, i);
    }
    return c;
  }
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_mod2ToModqWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self, OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *Fq, jint q) {
  if (OrgSpongycastlePqcMathNtruUtilUtil_is64BitJVM() && q == 2048) {
    OrgSpongycastlePqcMathNtruPolynomialLongPolynomial2 *thisLong = new_OrgSpongycastlePqcMathNtruPolynomialLongPolynomial2_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(self);
    OrgSpongycastlePqcMathNtruPolynomialLongPolynomial2 *FqLong = new_OrgSpongycastlePqcMathNtruPolynomialLongPolynomial2_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(Fq);
    jint v = 2;
    while (v < q) {
      v *= 2;
      OrgSpongycastlePqcMathNtruPolynomialLongPolynomial2 *temp = (OrgSpongycastlePqcMathNtruPolynomialLongPolynomial2 *) cast_chk([FqLong java_clone], [OrgSpongycastlePqcMathNtruPolynomialLongPolynomial2 class]);
      [((OrgSpongycastlePqcMathNtruPolynomialLongPolynomial2 *) nil_chk(temp)) mult2AndWithInt:v - 1];
      FqLong = [((OrgSpongycastlePqcMathNtruPolynomialLongPolynomial2 *) nil_chk([thisLong multWithOrgSpongycastlePqcMathNtruPolynomialLongPolynomial2:FqLong])) multWithOrgSpongycastlePqcMathNtruPolynomialLongPolynomial2:FqLong];
      [temp subAndWithOrgSpongycastlePqcMathNtruPolynomialLongPolynomial2:FqLong withInt:v - 1];
      FqLong = temp;
    }
    return [FqLong toIntegerPolynomial];
  }
  else {
    jint v = 2;
    while (v < q) {
      v *= 2;
      OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *temp = new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_initWithIntArray_(OrgSpongycastleUtilArrays_copyOfWithIntArray_withInt_(((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(Fq))->coeffs_, ((IOSIntArray *) nil_chk(Fq->coeffs_))->size_));
      OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_mult2WithInt_(temp, v);
      Fq = [((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk([self multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:Fq withInt:v])) multWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:Fq withInt:v];
      [temp subWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:Fq withInt:v];
      Fq = temp;
    }
    return Fq;
  }
}

void OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_multShiftSubWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_withInt_withInt_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self, OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *b, jint c, jint k, jint p) {
  jint N = ((IOSIntArray *) nil_chk(self->coeffs_))->size_;
  for (jint i = k; i < N; i++) {
    *IOSIntArray_GetRef(self->coeffs_, i) = (IOSIntArray_Get(self->coeffs_, i) - IOSIntArray_Get(((OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *) nil_chk(b))->coeffs_, i - k) * c) % p;
  }
}

JavaMathBigInteger *OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_squareSum(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self) {
  JavaMathBigInteger *sum = JreLoadStatic(OrgSpongycastlePqcMathNtruPolynomialConstants, BIGINT_ZERO);
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(self->coeffs_))->size_; i++) {
    sum = [((JavaMathBigInteger *) nil_chk(sum)) addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(IOSIntArray_Get(self->coeffs_, i) * IOSIntArray_Get(self->coeffs_, i))];
  }
  return sum;
}

void OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_mult2WithInt_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self, jint modulus) {
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(self->coeffs_))->size_; i++) {
    *IOSIntArray_GetRef(self->coeffs_, i) *= 2;
    *IOSIntArray_GetRef(self->coeffs_, i) %= modulus;
  }
}

void OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_sortWithIntArray_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self, IOSIntArray *ints) {
  jboolean swap = true;
  while (swap) {
    swap = false;
    for (jint i = 0; i != ((IOSIntArray *) nil_chk(ints))->size_ - 1; i++) {
      if (IOSIntArray_Get(ints, i) > IOSIntArray_Get(ints, i + 1)) {
        jint tmp = IOSIntArray_Get(ints, i);
        *IOSIntArray_GetRef(ints, i) = IOSIntArray_Get(ints, i + 1);
        *IOSIntArray_GetRef(ints, i + 1) = tmp;
        swap = true;
      }
    }
  }
}

jboolean OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_equalsZero(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self) {
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(self->coeffs_))->size_; i++) {
    if (IOSIntArray_Get(self->coeffs_, i) != 0) {
      return false;
    }
  }
  return true;
}

jboolean OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_equalsAbsOne(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *self) {
  for (jint i = 1; i < ((IOSIntArray *) nil_chk(self->coeffs_))->size_; i++) {
    if (IOSIntArray_Get(self->coeffs_, i) != 0) {
      return false;
    }
  }
  return JavaLangMath_absWithInt_(IOSIntArray_Get(self->coeffs_, 0)) == 1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial)

@implementation OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask

- (instancetype)initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)outer$
                                                                      withInt:(jint)modulus {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(self, outer$, modulus);
  return self;
}

- (OrgSpongycastlePqcMathNtruPolynomialModularResultant *)call {
  return [this$0_ resultantWithInt:modulus_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialModularResultant;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:withInt:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "modulus_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Lorg/spongycastle/pqc/math/ntru/polynomial/ModularResultant;>;" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask = { "ModResultantTask", "org.spongycastle.pqc.math.ntru.polynomial", ptrTable, methods, fields, 7, 0x2, 2, 2, 1, -1, -1, 2, -1 };
  return &_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask;
}

@end

void OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask *self, OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, jint modulus) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->modulus_ = modulus;
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask *new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, jint modulus) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask, initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_, outer$, modulus)
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask *create_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, jint modulus) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask, initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withInt_, outer$, modulus)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_ModResultantTask)

@implementation OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask

- (instancetype)initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)outer$
                     withOrgSpongycastlePqcMathNtruPolynomialModularResultant:(OrgSpongycastlePqcMathNtruPolynomialModularResultant *)modRes1
                     withOrgSpongycastlePqcMathNtruPolynomialModularResultant:(OrgSpongycastlePqcMathNtruPolynomialModularResultant *)modRes2 {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_(self, outer$, modRes1, modRes2);
  return self;
}

- (OrgSpongycastlePqcMathNtruPolynomialModularResultant *)call {
  return OrgSpongycastlePqcMathNtruPolynomialModularResultant_combineRhoWithOrgSpongycastlePqcMathNtruPolynomialModularResultant_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_(modRes1_, modRes2_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialModularResultant;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:withOrgSpongycastlePqcMathNtruPolynomialModularResultant:withOrgSpongycastlePqcMathNtruPolynomialModularResultant:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "modRes1_", "LOrgSpongycastlePqcMathNtruPolynomialModularResultant;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "modRes2_", "LOrgSpongycastlePqcMathNtruPolynomialModularResultant;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastlePqcMathNtruPolynomialModularResultant;LOrgSpongycastlePqcMathNtruPolynomialModularResultant;", "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Lorg/spongycastle/pqc/math/ntru/polynomial/ModularResultant;>;" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask = { "CombineTask", "org.spongycastle.pqc.math.ntru.polynomial", ptrTable, methods, fields, 7, 0x2, 2, 2, 1, -1, -1, 2, -1 };
  return &_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask;
}

@end

void OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask *self, OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes1, OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes2) {
  NSObject_init(self);
  self->modRes1_ = modRes1;
  self->modRes2_ = modRes2;
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask *new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes1, OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes2) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask, initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_, outer$, modRes1, modRes2)
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask *create_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$, OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes1, OrgSpongycastlePqcMathNtruPolynomialModularResultant *modRes2) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask, initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_withOrgSpongycastlePqcMathNtruPolynomialModularResultant_, outer$, modRes1, modRes2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_CombineTask)

@implementation OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator

- (instancetype)initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *)outer$ {
  OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(self, outer$);
  return self;
}

- (JavaMathBigInteger *)nextPrime {
  if (index_ < [((id<JavaUtilList>) nil_chk(JreLoadStatic(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial, BIGINT_PRIMES))) size]) {
    prime_ = (JavaMathBigInteger *) cast_chk([JreLoadStatic(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial, BIGINT_PRIMES) getWithInt:index_++], [JavaMathBigInteger class]);
  }
  else {
    prime_ = [((JavaMathBigInteger *) nil_chk(prime_)) nextProbablePrime];
  }
  return prime_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial:);
  methods[1].selector = @selector(nextPrime);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prime_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial;" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator = { "PrimeGenerator", "org.spongycastle.pqc.math.ntru.polynomial", ptrTable, methods, fields, 7, 0x2, 2, 2, 0, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator;
}

@end

void OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator *self, OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$) {
  NSObject_init(self);
  self->index_ = 0;
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator *new_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator, initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_, outer$)
}

OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator *create_OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator_initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial *outer$) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator, initWithOrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcMathNtruPolynomialIntegerPolynomial_PrimeGenerator)
