//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/math/linearalgebra/IntUtils.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/spongycastle/pqc/math/linearalgebra/BigEndianConversions.h"
#include "org/spongycastle/pqc/math/linearalgebra/ByteUtils.h"
#include "org/spongycastle/pqc/math/linearalgebra/IntUtils.h"

@interface OrgSpongycastlePqcMathLinearalgebraIntUtils ()

- (instancetype)init;

+ (jint)partitionWithIntArray:(IOSIntArray *)source
                      withInt:(jint)left
                      withInt:(jint)right
                      withInt:(jint)pivotIndex;

@end

__attribute__((unused)) static void OrgSpongycastlePqcMathLinearalgebraIntUtils_init(OrgSpongycastlePqcMathLinearalgebraIntUtils *self);

__attribute__((unused)) static OrgSpongycastlePqcMathLinearalgebraIntUtils *new_OrgSpongycastlePqcMathLinearalgebraIntUtils_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastlePqcMathLinearalgebraIntUtils *create_OrgSpongycastlePqcMathLinearalgebraIntUtils_init(void);

__attribute__((unused)) static jint OrgSpongycastlePqcMathLinearalgebraIntUtils_partitionWithIntArray_withInt_withInt_withInt_(IOSIntArray *source, jint left, jint right, jint pivotIndex);

@implementation OrgSpongycastlePqcMathLinearalgebraIntUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcMathLinearalgebraIntUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)equalsWithIntArray:(IOSIntArray *)left
                  withIntArray:(IOSIntArray *)right {
  return OrgSpongycastlePqcMathLinearalgebraIntUtils_equalsWithIntArray_withIntArray_(left, right);
}

+ (IOSIntArray *)cloneWithIntArray:(IOSIntArray *)array {
  return OrgSpongycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(array);
}

+ (void)fillWithIntArray:(IOSIntArray *)array
                 withInt:(jint)value {
  OrgSpongycastlePqcMathLinearalgebraIntUtils_fillWithIntArray_withInt_(array, value);
}

+ (void)quicksortWithIntArray:(IOSIntArray *)source {
  OrgSpongycastlePqcMathLinearalgebraIntUtils_quicksortWithIntArray_(source);
}

+ (void)quicksortWithIntArray:(IOSIntArray *)source
                      withInt:(jint)left
                      withInt:(jint)right {
  OrgSpongycastlePqcMathLinearalgebraIntUtils_quicksortWithIntArray_withInt_withInt_(source, left, right);
}

+ (jint)partitionWithIntArray:(IOSIntArray *)source
                      withInt:(jint)left
                      withInt:(jint)right
                      withInt:(jint)pivotIndex {
  return OrgSpongycastlePqcMathLinearalgebraIntUtils_partitionWithIntArray_withInt_withInt_withInt_(source, left, right, pivotIndex);
}

+ (IOSIntArray *)subArrayWithIntArray:(IOSIntArray *)input
                              withInt:(jint)start
                              withInt:(jint)end {
  return OrgSpongycastlePqcMathLinearalgebraIntUtils_subArrayWithIntArray_withInt_withInt_(input, start, end);
}

+ (NSString *)toStringWithIntArray:(IOSIntArray *)input {
  return OrgSpongycastlePqcMathLinearalgebraIntUtils_toStringWithIntArray_(input);
}

+ (NSString *)toHexStringWithIntArray:(IOSIntArray *)input {
  return OrgSpongycastlePqcMathLinearalgebraIntUtils_toHexStringWithIntArray_(input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 10, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 11, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 12, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(equalsWithIntArray:withIntArray:);
  methods[2].selector = @selector(cloneWithIntArray:);
  methods[3].selector = @selector(fillWithIntArray:withInt:);
  methods[4].selector = @selector(quicksortWithIntArray:);
  methods[5].selector = @selector(quicksortWithIntArray:withInt:withInt:);
  methods[6].selector = @selector(partitionWithIntArray:withInt:withInt:withInt:);
  methods[7].selector = @selector(subArrayWithIntArray:withInt:withInt:);
  methods[8].selector = @selector(toStringWithIntArray:);
  methods[9].selector = @selector(toHexStringWithIntArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "equals", "[I[I", "clone", "[I", "fill", "[II", "quicksort", "[III", "partition", "[IIII", "subArray", "toString", "toHexString" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcMathLinearalgebraIntUtils = { "IntUtils", "org.spongycastle.pqc.math.linearalgebra", ptrTable, methods, NULL, 7, 0x11, 10, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcMathLinearalgebraIntUtils;
}

@end

void OrgSpongycastlePqcMathLinearalgebraIntUtils_init(OrgSpongycastlePqcMathLinearalgebraIntUtils *self) {
  NSObject_init(self);
}

OrgSpongycastlePqcMathLinearalgebraIntUtils *new_OrgSpongycastlePqcMathLinearalgebraIntUtils_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathLinearalgebraIntUtils, init)
}

OrgSpongycastlePqcMathLinearalgebraIntUtils *create_OrgSpongycastlePqcMathLinearalgebraIntUtils_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathLinearalgebraIntUtils, init)
}

jboolean OrgSpongycastlePqcMathLinearalgebraIntUtils_equalsWithIntArray_withIntArray_(IOSIntArray *left, IOSIntArray *right) {
  OrgSpongycastlePqcMathLinearalgebraIntUtils_initialize();
  if (((IOSIntArray *) nil_chk(left))->size_ != ((IOSIntArray *) nil_chk(right))->size_) {
    return false;
  }
  jboolean result = true;
  for (jint i = left->size_ - 1; i >= 0; i--) {
    result &= (IOSIntArray_Get(left, i) == IOSIntArray_Get(right, i));
  }
  return result;
}

IOSIntArray *OrgSpongycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(IOSIntArray *array) {
  OrgSpongycastlePqcMathLinearalgebraIntUtils_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:((IOSIntArray *) nil_chk(array))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, result, 0, array->size_);
  return result;
}

void OrgSpongycastlePqcMathLinearalgebraIntUtils_fillWithIntArray_withInt_(IOSIntArray *array, jint value) {
  OrgSpongycastlePqcMathLinearalgebraIntUtils_initialize();
  for (jint i = ((IOSIntArray *) nil_chk(array))->size_ - 1; i >= 0; i--) {
    *IOSIntArray_GetRef(array, i) = value;
  }
}

void OrgSpongycastlePqcMathLinearalgebraIntUtils_quicksortWithIntArray_(IOSIntArray *source) {
  OrgSpongycastlePqcMathLinearalgebraIntUtils_initialize();
  OrgSpongycastlePqcMathLinearalgebraIntUtils_quicksortWithIntArray_withInt_withInt_(source, 0, ((IOSIntArray *) nil_chk(source))->size_ - 1);
}

void OrgSpongycastlePqcMathLinearalgebraIntUtils_quicksortWithIntArray_withInt_withInt_(IOSIntArray *source, jint left, jint right) {
  OrgSpongycastlePqcMathLinearalgebraIntUtils_initialize();
  if (right > left) {
    jint index = OrgSpongycastlePqcMathLinearalgebraIntUtils_partitionWithIntArray_withInt_withInt_withInt_(source, left, right, right);
    OrgSpongycastlePqcMathLinearalgebraIntUtils_quicksortWithIntArray_withInt_withInt_(source, left, index - 1);
    OrgSpongycastlePqcMathLinearalgebraIntUtils_quicksortWithIntArray_withInt_withInt_(source, index + 1, right);
  }
}

jint OrgSpongycastlePqcMathLinearalgebraIntUtils_partitionWithIntArray_withInt_withInt_withInt_(IOSIntArray *source, jint left, jint right, jint pivotIndex) {
  OrgSpongycastlePqcMathLinearalgebraIntUtils_initialize();
  jint pivot = IOSIntArray_Get(nil_chk(source), pivotIndex);
  *IOSIntArray_GetRef(source, pivotIndex) = IOSIntArray_Get(source, right);
  *IOSIntArray_GetRef(source, right) = pivot;
  jint index = left;
  for (jint i = left; i < right; i++) {
    if (IOSIntArray_Get(source, i) <= pivot) {
      jint tmp = IOSIntArray_Get(source, index);
      *IOSIntArray_GetRef(source, index) = IOSIntArray_Get(source, i);
      *IOSIntArray_GetRef(source, i) = tmp;
      index++;
    }
  }
  jint tmp = IOSIntArray_Get(source, index);
  *IOSIntArray_GetRef(source, index) = IOSIntArray_Get(source, right);
  *IOSIntArray_GetRef(source, right) = tmp;
  return index;
}

IOSIntArray *OrgSpongycastlePqcMathLinearalgebraIntUtils_subArrayWithIntArray_withInt_withInt_(IOSIntArray *input, jint start, jint end) {
  OrgSpongycastlePqcMathLinearalgebraIntUtils_initialize();
  IOSIntArray *result = [IOSIntArray newArrayWithLength:end - start];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(input, start, result, 0, end - start);
  return result;
}

NSString *OrgSpongycastlePqcMathLinearalgebraIntUtils_toStringWithIntArray_(IOSIntArray *input) {
  OrgSpongycastlePqcMathLinearalgebraIntUtils_initialize();
  NSString *result = @"";
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(input))->size_; i++) {
    (void) JreStrAppendStrong(&result, "IC", IOSIntArray_Get(input, i), ' ');
  }
  return result;
}

NSString *OrgSpongycastlePqcMathLinearalgebraIntUtils_toHexStringWithIntArray_(IOSIntArray *input) {
  OrgSpongycastlePqcMathLinearalgebraIntUtils_initialize();
  return OrgSpongycastlePqcMathLinearalgebraByteUtils_toHexStringWithByteArray_(OrgSpongycastlePqcMathLinearalgebraBigEndianConversions_toByteArrayWithIntArray_(input));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcMathLinearalgebraIntUtils)
