//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/math/ntru/util/Util.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/spongycastle/pqc/math/ntru/euclid/IntEuclidean.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/SparseTernaryPolynomial.h"
#include "org/spongycastle/pqc/math/ntru/polynomial/TernaryPolynomial.h"
#include "org/spongycastle/pqc/math/ntru/util/Util.h"
#include "org/spongycastle/util/Integers.h"

inline jboolean OrgSpongycastlePqcMathNtruUtilUtil_get_IS_64_BITNESS_KNOWN(void);
inline jboolean OrgSpongycastlePqcMathNtruUtilUtil_set_IS_64_BITNESS_KNOWN(jboolean value);
static volatile_jboolean OrgSpongycastlePqcMathNtruUtilUtil_IS_64_BITNESS_KNOWN;
J2OBJC_STATIC_FIELD_PRIMITIVE_VOLATILE(OrgSpongycastlePqcMathNtruUtilUtil, IS_64_BITNESS_KNOWN, jboolean)

inline jboolean OrgSpongycastlePqcMathNtruUtilUtil_get_IS_64_BIT_JVM(void);
inline jboolean OrgSpongycastlePqcMathNtruUtilUtil_set_IS_64_BIT_JVM(jboolean value);
static volatile_jboolean OrgSpongycastlePqcMathNtruUtilUtil_IS_64_BIT_JVM;
J2OBJC_STATIC_FIELD_PRIMITIVE_VOLATILE(OrgSpongycastlePqcMathNtruUtilUtil, IS_64_BIT_JVM, jboolean)

@implementation OrgSpongycastlePqcMathNtruUtilUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastlePqcMathNtruUtilUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)invertWithInt:(jint)n
              withInt:(jint)modulus {
  return OrgSpongycastlePqcMathNtruUtilUtil_invertWithInt_withInt_(n, modulus);
}

+ (jint)powWithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)modulus {
  return OrgSpongycastlePqcMathNtruUtilUtil_powWithInt_withInt_withInt_(a, b, modulus);
}

+ (jlong)powWithLong:(jlong)a
             withInt:(jint)b
            withLong:(jlong)modulus {
  return OrgSpongycastlePqcMathNtruUtilUtil_powWithLong_withInt_withLong_(a, b, modulus);
}

+ (id<OrgSpongycastlePqcMathNtruPolynomialTernaryPolynomial>)generateRandomTernaryWithInt:(jint)N
                                                                                  withInt:(jint)numOnes
                                                                                  withInt:(jint)numNegOnes
                                                                              withBoolean:(jboolean)sparse
                                                             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return OrgSpongycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withBoolean_withJavaSecuritySecureRandom_(N, numOnes, numNegOnes, sparse, random);
}

+ (IOSIntArray *)generateRandomTernaryWithInt:(jint)N
                                      withInt:(jint)numOnes
                                      withInt:(jint)numNegOnes
                 withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return OrgSpongycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withJavaSecuritySecureRandom_(N, numOnes, numNegOnes, random);
}

+ (jboolean)is64BitJVM {
  return OrgSpongycastlePqcMathNtruUtilUtil_is64BitJVM();
}

+ (IOSByteArray *)readFullLengthWithJavaIoInputStream:(JavaIoInputStream *)is
                                              withInt:(jint)length {
  return OrgSpongycastlePqcMathNtruUtilUtil_readFullLengthWithJavaIoInputStream_withInt_(is, length);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathNtruPolynomialTernaryPolynomial;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 5, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 8, 9, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(invertWithInt:withInt:);
  methods[2].selector = @selector(powWithInt:withInt:withInt:);
  methods[3].selector = @selector(powWithLong:withInt:withLong:);
  methods[4].selector = @selector(generateRandomTernaryWithInt:withInt:withInt:withBoolean:withJavaSecuritySecureRandom:);
  methods[5].selector = @selector(generateRandomTernaryWithInt:withInt:withInt:withJavaSecuritySecureRandom:);
  methods[6].selector = @selector(is64BitJVM);
  methods[7].selector = @selector(readFullLengthWithJavaIoInputStream:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IS_64_BITNESS_KNOWN", "Z", .constantValue.asLong = 0, 0x4a, -1, 11, -1, -1 },
    { "IS_64_BIT_JVM", "Z", .constantValue.asLong = 0, 0x4a, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "invert", "II", "pow", "III", "JIJ", "generateRandomTernary", "IIIZLJavaSecuritySecureRandom;", "IIILJavaSecuritySecureRandom;", "readFullLength", "LJavaIoInputStream;I", "LJavaIoIOException;", &OrgSpongycastlePqcMathNtruUtilUtil_IS_64_BITNESS_KNOWN, &OrgSpongycastlePqcMathNtruUtilUtil_IS_64_BIT_JVM };
  static const J2ObjcClassInfo _OrgSpongycastlePqcMathNtruUtilUtil = { "Util", "org.spongycastle.pqc.math.ntru.util", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcMathNtruUtilUtil;
}

@end

void OrgSpongycastlePqcMathNtruUtilUtil_init(OrgSpongycastlePqcMathNtruUtilUtil *self) {
  NSObject_init(self);
}

OrgSpongycastlePqcMathNtruUtilUtil *new_OrgSpongycastlePqcMathNtruUtilUtil_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathNtruUtilUtil, init)
}

OrgSpongycastlePqcMathNtruUtilUtil *create_OrgSpongycastlePqcMathNtruUtilUtil_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathNtruUtilUtil, init)
}

jint OrgSpongycastlePqcMathNtruUtilUtil_invertWithInt_withInt_(jint n, jint modulus) {
  OrgSpongycastlePqcMathNtruUtilUtil_initialize();
  n %= modulus;
  if (n < 0) {
    n += modulus;
  }
  return ((OrgSpongycastlePqcMathNtruEuclidIntEuclidean *) nil_chk(OrgSpongycastlePqcMathNtruEuclidIntEuclidean_calculateWithInt_withInt_(n, modulus)))->x_;
}

jint OrgSpongycastlePqcMathNtruUtilUtil_powWithInt_withInt_withInt_(jint a, jint b, jint modulus) {
  OrgSpongycastlePqcMathNtruUtilUtil_initialize();
  jint p = 1;
  for (jint i = 0; i < b; i++) {
    p = (p * a) % modulus;
  }
  return p;
}

jlong OrgSpongycastlePqcMathNtruUtilUtil_powWithLong_withInt_withLong_(jlong a, jint b, jlong modulus) {
  OrgSpongycastlePqcMathNtruUtilUtil_initialize();
  jlong p = 1;
  for (jint i = 0; i < b; i++) {
    p = (p * a) % modulus;
  }
  return p;
}

id<OrgSpongycastlePqcMathNtruPolynomialTernaryPolynomial> OrgSpongycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withBoolean_withJavaSecuritySecureRandom_(jint N, jint numOnes, jint numNegOnes, jboolean sparse, JavaSecuritySecureRandom *random) {
  OrgSpongycastlePqcMathNtruUtilUtil_initialize();
  if (sparse) {
    return OrgSpongycastlePqcMathNtruPolynomialSparseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(N, numOnes, numNegOnes, random);
  }
  else {
    return OrgSpongycastlePqcMathNtruPolynomialDenseTernaryPolynomial_generateRandomWithInt_withInt_withInt_withJavaSecuritySecureRandom_(N, numOnes, numNegOnes, random);
  }
}

IOSIntArray *OrgSpongycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withJavaSecuritySecureRandom_(jint N, jint numOnes, jint numNegOnes, JavaSecuritySecureRandom *random) {
  OrgSpongycastlePqcMathNtruUtilUtil_initialize();
  JavaLangInteger *one = OrgSpongycastleUtilIntegers_valueOfWithInt_(1);
  JavaLangInteger *minusOne = OrgSpongycastleUtilIntegers_valueOfWithInt_(-1);
  JavaLangInteger *zero = OrgSpongycastleUtilIntegers_valueOfWithInt_(0);
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  for (jint i = 0; i < numOnes; i++) {
    [list addWithId:one];
  }
  for (jint i = 0; i < numNegOnes; i++) {
    [list addWithId:minusOne];
  }
  while ([list size] < N) {
    [list addWithId:zero];
  }
  JavaUtilCollections_shuffleWithJavaUtilList_withJavaUtilRandom_(list, random);
  IOSIntArray *arr = [IOSIntArray newArrayWithLength:N];
  for (jint i = 0; i < N; i++) {
    *IOSIntArray_GetRef(arr, i) = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([list getWithInt:i], [JavaLangInteger class])))) intValue];
  }
  return arr;
}

jboolean OrgSpongycastlePqcMathNtruUtilUtil_is64BitJVM() {
  OrgSpongycastlePqcMathNtruUtilUtil_initialize();
  if (!JreLoadVolatileBoolean(&OrgSpongycastlePqcMathNtruUtilUtil_IS_64_BITNESS_KNOWN)) {
    NSString *arch = JavaLangSystem_getPropertyWithNSString_(@"os.arch");
    NSString *sunModel = JavaLangSystem_getPropertyWithNSString_(@"sun.arch.data.model");
    JreAssignVolatileBoolean(&OrgSpongycastlePqcMathNtruUtilUtil_IS_64_BIT_JVM, [@"amd64" isEqual:arch] || [@"x86_64" isEqual:arch] || [@"ppc64" isEqual:arch] || [@"64" isEqual:sunModel]);
    JreAssignVolatileBoolean(&OrgSpongycastlePqcMathNtruUtilUtil_IS_64_BITNESS_KNOWN, true);
  }
  return JreLoadVolatileBoolean(&OrgSpongycastlePqcMathNtruUtilUtil_IS_64_BIT_JVM);
}

IOSByteArray *OrgSpongycastlePqcMathNtruUtilUtil_readFullLengthWithJavaIoInputStream_withInt_(JavaIoInputStream *is, jint length) {
  OrgSpongycastlePqcMathNtruUtilUtil_initialize();
  IOSByteArray *arr = [IOSByteArray newArrayWithLength:length];
  if ([((JavaIoInputStream *) nil_chk(is)) readWithByteArray:arr] != arr->size_) {
    @throw new_JavaIoIOException_initWithNSString_(@"Not enough bytes to read.");
  }
  return arr;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcMathNtruUtilUtil)
