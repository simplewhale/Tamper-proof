//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/math/linearalgebra/Permutation.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/pqc/math/linearalgebra/IntUtils.h"
#include "org/spongycastle/pqc/math/linearalgebra/IntegerFunctions.h"
#include "org/spongycastle/pqc/math/linearalgebra/LittleEndianConversions.h"
#include "org/spongycastle/pqc/math/linearalgebra/Permutation.h"
#include "org/spongycastle/pqc/math/linearalgebra/RandUtils.h"

@interface OrgSpongycastlePqcMathLinearalgebraPermutation () {
 @public
  IOSIntArray *perm_;
}

- (jboolean)isPermutationWithIntArray:(IOSIntArray *)perm;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastlePqcMathLinearalgebraPermutation, perm_, IOSIntArray *)

__attribute__((unused)) static jboolean OrgSpongycastlePqcMathLinearalgebraPermutation_isPermutationWithIntArray_(OrgSpongycastlePqcMathLinearalgebraPermutation *self, IOSIntArray *perm);

@implementation OrgSpongycastlePqcMathLinearalgebraPermutation

- (instancetype)initWithInt:(jint)n {
  OrgSpongycastlePqcMathLinearalgebraPermutation_initWithInt_(self, n);
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)perm {
  OrgSpongycastlePqcMathLinearalgebraPermutation_initWithIntArray_(self, perm);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)enc {
  OrgSpongycastlePqcMathLinearalgebraPermutation_initWithByteArray_(self, enc);
  return self;
}

- (instancetype)initWithInt:(jint)n
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)sr {
  OrgSpongycastlePqcMathLinearalgebraPermutation_initWithInt_withJavaSecuritySecureRandom_(self, n, sr);
  return self;
}

- (IOSByteArray *)getEncoded {
  jint n = ((IOSIntArray *) nil_chk(perm_))->size_;
  jint size = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ceilLog256WithInt_(n - 1);
  IOSByteArray *result = [IOSByteArray newArrayWithLength:4 + n * size];
  OrgSpongycastlePqcMathLinearalgebraLittleEndianConversions_I2OSPWithInt_withByteArray_withInt_(n, result, 0);
  for (jint i = 0; i < n; i++) {
    OrgSpongycastlePqcMathLinearalgebraLittleEndianConversions_I2OSPWithInt_withByteArray_withInt_withInt_(IOSIntArray_Get(nil_chk(perm_), i), result, 4 + i * size, size);
  }
  return result;
}

- (IOSIntArray *)getVector {
  return OrgSpongycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(perm_);
}

- (OrgSpongycastlePqcMathLinearalgebraPermutation *)computeInverse {
  OrgSpongycastlePqcMathLinearalgebraPermutation *result = new_OrgSpongycastlePqcMathLinearalgebraPermutation_initWithInt_(((IOSIntArray *) nil_chk(perm_))->size_);
  for (jint i = ((IOSIntArray *) nil_chk(perm_))->size_ - 1; i >= 0; i--) {
    *IOSIntArray_GetRef(result->perm_, IOSIntArray_Get(perm_, i)) = i;
  }
  return result;
}

- (OrgSpongycastlePqcMathLinearalgebraPermutation *)rightMultiplyWithOrgSpongycastlePqcMathLinearalgebraPermutation:(OrgSpongycastlePqcMathLinearalgebraPermutation *)p {
  if (((IOSIntArray *) nil_chk(((OrgSpongycastlePqcMathLinearalgebraPermutation *) nil_chk(p))->perm_))->size_ != perm_->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"length mismatch");
  }
  OrgSpongycastlePqcMathLinearalgebraPermutation *result = new_OrgSpongycastlePqcMathLinearalgebraPermutation_initWithInt_(perm_->size_);
  for (jint i = ((IOSIntArray *) nil_chk(perm_))->size_ - 1; i >= 0; i--) {
    *IOSIntArray_GetRef(result->perm_, i) = IOSIntArray_Get(perm_, IOSIntArray_Get(p->perm_, i));
  }
  return result;
}

- (jboolean)isEqual:(id)other {
  if (!([other isKindOfClass:[OrgSpongycastlePqcMathLinearalgebraPermutation class]])) {
    return false;
  }
  OrgSpongycastlePqcMathLinearalgebraPermutation *otherPerm = (OrgSpongycastlePqcMathLinearalgebraPermutation *) cast_chk(other, [OrgSpongycastlePqcMathLinearalgebraPermutation class]);
  return OrgSpongycastlePqcMathLinearalgebraIntUtils_equalsWithIntArray_withIntArray_(perm_, ((OrgSpongycastlePqcMathLinearalgebraPermutation *) nil_chk(otherPerm))->perm_);
}

- (NSString *)description {
  NSString *result = JreStrcat("CI", '[', IOSIntArray_Get(nil_chk(perm_), 0));
  for (jint i = 1; i < perm_->size_; i++) {
    (void) JreStrAppendStrong(&result, "$I", @", ", IOSIntArray_Get(perm_, i));
  }
  (void) JreStrAppendStrong(&result, "$", @"]");
  return result;
}

- (NSUInteger)hash {
  return ((jint) [((IOSIntArray *) nil_chk(perm_)) hash]);
}

- (jboolean)isPermutationWithIntArray:(IOSIntArray *)perm {
  return OrgSpongycastlePqcMathLinearalgebraPermutation_isPermutationWithIntArray_(self, perm);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraPermutation;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastlePqcMathLinearalgebraPermutation;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 10, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithIntArray:);
  methods[2].selector = @selector(initWithByteArray:);
  methods[3].selector = @selector(initWithInt:withJavaSecuritySecureRandom:);
  methods[4].selector = @selector(getEncoded);
  methods[5].selector = @selector(getVector);
  methods[6].selector = @selector(computeInverse);
  methods[7].selector = @selector(rightMultiplyWithOrgSpongycastlePqcMathLinearalgebraPermutation:);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(hash);
  methods[11].selector = @selector(isPermutationWithIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "perm_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "[I", "[B", "ILJavaSecuritySecureRandom;", "rightMultiply", "LOrgSpongycastlePqcMathLinearalgebraPermutation;", "equals", "LNSObject;", "toString", "hashCode", "isPermutation" };
  static const J2ObjcClassInfo _OrgSpongycastlePqcMathLinearalgebraPermutation = { "Permutation", "org.spongycastle.pqc.math.linearalgebra", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastlePqcMathLinearalgebraPermutation;
}

@end

void OrgSpongycastlePqcMathLinearalgebraPermutation_initWithInt_(OrgSpongycastlePqcMathLinearalgebraPermutation *self, jint n) {
  NSObject_init(self);
  if (n <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid length");
  }
  self->perm_ = [IOSIntArray newArrayWithLength:n];
  for (jint i = n - 1; i >= 0; i--) {
    *IOSIntArray_GetRef(self->perm_, i) = i;
  }
}

OrgSpongycastlePqcMathLinearalgebraPermutation *new_OrgSpongycastlePqcMathLinearalgebraPermutation_initWithInt_(jint n) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathLinearalgebraPermutation, initWithInt_, n)
}

OrgSpongycastlePqcMathLinearalgebraPermutation *create_OrgSpongycastlePqcMathLinearalgebraPermutation_initWithInt_(jint n) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathLinearalgebraPermutation, initWithInt_, n)
}

void OrgSpongycastlePqcMathLinearalgebraPermutation_initWithIntArray_(OrgSpongycastlePqcMathLinearalgebraPermutation *self, IOSIntArray *perm) {
  NSObject_init(self);
  if (!OrgSpongycastlePqcMathLinearalgebraPermutation_isPermutationWithIntArray_(self, perm)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"array is not a permutation vector");
  }
  self->perm_ = OrgSpongycastlePqcMathLinearalgebraIntUtils_cloneWithIntArray_(perm);
}

OrgSpongycastlePqcMathLinearalgebraPermutation *new_OrgSpongycastlePqcMathLinearalgebraPermutation_initWithIntArray_(IOSIntArray *perm) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathLinearalgebraPermutation, initWithIntArray_, perm)
}

OrgSpongycastlePqcMathLinearalgebraPermutation *create_OrgSpongycastlePqcMathLinearalgebraPermutation_initWithIntArray_(IOSIntArray *perm) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathLinearalgebraPermutation, initWithIntArray_, perm)
}

void OrgSpongycastlePqcMathLinearalgebraPermutation_initWithByteArray_(OrgSpongycastlePqcMathLinearalgebraPermutation *self, IOSByteArray *enc) {
  NSObject_init(self);
  if (((IOSByteArray *) nil_chk(enc))->size_ <= 4) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid encoding");
  }
  jint n = OrgSpongycastlePqcMathLinearalgebraLittleEndianConversions_OS2IPWithByteArray_withInt_(enc, 0);
  jint size = OrgSpongycastlePqcMathLinearalgebraIntegerFunctions_ceilLog256WithInt_(n - 1);
  if (enc->size_ != 4 + n * size) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid encoding");
  }
  self->perm_ = [IOSIntArray newArrayWithLength:n];
  for (jint i = 0; i < n; i++) {
    *IOSIntArray_GetRef(nil_chk(self->perm_), i) = OrgSpongycastlePqcMathLinearalgebraLittleEndianConversions_OS2IPWithByteArray_withInt_withInt_(enc, 4 + i * size, size);
  }
  if (!OrgSpongycastlePqcMathLinearalgebraPermutation_isPermutationWithIntArray_(self, self->perm_)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid encoding");
  }
}

OrgSpongycastlePqcMathLinearalgebraPermutation *new_OrgSpongycastlePqcMathLinearalgebraPermutation_initWithByteArray_(IOSByteArray *enc) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathLinearalgebraPermutation, initWithByteArray_, enc)
}

OrgSpongycastlePqcMathLinearalgebraPermutation *create_OrgSpongycastlePqcMathLinearalgebraPermutation_initWithByteArray_(IOSByteArray *enc) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathLinearalgebraPermutation, initWithByteArray_, enc)
}

void OrgSpongycastlePqcMathLinearalgebraPermutation_initWithInt_withJavaSecuritySecureRandom_(OrgSpongycastlePqcMathLinearalgebraPermutation *self, jint n, JavaSecuritySecureRandom *sr) {
  NSObject_init(self);
  if (n <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid length");
  }
  self->perm_ = [IOSIntArray newArrayWithLength:n];
  IOSIntArray *help = [IOSIntArray newArrayWithLength:n];
  for (jint i = 0; i < n; i++) {
    *IOSIntArray_GetRef(help, i) = i;
  }
  jint k = n;
  for (jint j = 0; j < n; j++) {
    jint i = OrgSpongycastlePqcMathLinearalgebraRandUtils_nextIntWithJavaSecuritySecureRandom_withInt_(sr, k);
    k--;
    *IOSIntArray_GetRef(nil_chk(self->perm_), j) = IOSIntArray_Get(help, i);
    *IOSIntArray_GetRef(help, i) = IOSIntArray_Get(help, k);
  }
}

OrgSpongycastlePqcMathLinearalgebraPermutation *new_OrgSpongycastlePqcMathLinearalgebraPermutation_initWithInt_withJavaSecuritySecureRandom_(jint n, JavaSecuritySecureRandom *sr) {
  J2OBJC_NEW_IMPL(OrgSpongycastlePqcMathLinearalgebraPermutation, initWithInt_withJavaSecuritySecureRandom_, n, sr)
}

OrgSpongycastlePqcMathLinearalgebraPermutation *create_OrgSpongycastlePqcMathLinearalgebraPermutation_initWithInt_withJavaSecuritySecureRandom_(jint n, JavaSecuritySecureRandom *sr) {
  J2OBJC_CREATE_IMPL(OrgSpongycastlePqcMathLinearalgebraPermutation, initWithInt_withJavaSecuritySecureRandom_, n, sr)
}

jboolean OrgSpongycastlePqcMathLinearalgebraPermutation_isPermutationWithIntArray_(OrgSpongycastlePqcMathLinearalgebraPermutation *self, IOSIntArray *perm) {
  jint n = ((IOSIntArray *) nil_chk(perm))->size_;
  IOSBooleanArray *onlyOnce = [IOSBooleanArray newArrayWithLength:n];
  for (jint i = 0; i < n; i++) {
    if ((IOSIntArray_Get(perm, i) < 0) || (IOSIntArray_Get(perm, i) >= n) || IOSBooleanArray_Get(onlyOnce, IOSIntArray_Get(perm, i))) {
      return false;
    }
    *IOSBooleanArray_GetRef(onlyOnce, IOSIntArray_Get(perm, i)) = true;
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastlePqcMathLinearalgebraPermutation)
