//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/pqc/math/ntru/util/Util.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastlePqcMathNtruUtilUtil")
#ifdef RESTRICT_OrgSpongycastlePqcMathNtruUtilUtil
#define INCLUDE_ALL_OrgSpongycastlePqcMathNtruUtilUtil 0
#else
#define INCLUDE_ALL_OrgSpongycastlePqcMathNtruUtilUtil 1
#endif
#undef RESTRICT_OrgSpongycastlePqcMathNtruUtilUtil

#if !defined (OrgSpongycastlePqcMathNtruUtilUtil_) && (INCLUDE_ALL_OrgSpongycastlePqcMathNtruUtilUtil || defined(INCLUDE_OrgSpongycastlePqcMathNtruUtilUtil))
#define OrgSpongycastlePqcMathNtruUtilUtil_

@class IOSByteArray;
@class IOSIntArray;
@class JavaIoInputStream;
@class JavaSecuritySecureRandom;
@protocol OrgSpongycastlePqcMathNtruPolynomialTernaryPolynomial;

@interface OrgSpongycastlePqcMathNtruUtilUtil : NSObject

#pragma mark Public

- (instancetype)init;

+ (id<OrgSpongycastlePqcMathNtruPolynomialTernaryPolynomial>)generateRandomTernaryWithInt:(jint)N
                                                                                  withInt:(jint)numOnes
                                                                                  withInt:(jint)numNegOnes
                                                                              withBoolean:(jboolean)sparse
                                                             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

+ (IOSIntArray *)generateRandomTernaryWithInt:(jint)N
                                      withInt:(jint)numOnes
                                      withInt:(jint)numNegOnes
                 withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

+ (jint)invertWithInt:(jint)n
              withInt:(jint)modulus;

+ (jboolean)is64BitJVM;

+ (jint)powWithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)modulus;

+ (jlong)powWithLong:(jlong)a
             withInt:(jint)b
            withLong:(jlong)modulus;

+ (IOSByteArray *)readFullLengthWithJavaIoInputStream:(JavaIoInputStream *)is
                                              withInt:(jint)length;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastlePqcMathNtruUtilUtil)

FOUNDATION_EXPORT void OrgSpongycastlePqcMathNtruUtilUtil_init(OrgSpongycastlePqcMathNtruUtilUtil *self);

FOUNDATION_EXPORT OrgSpongycastlePqcMathNtruUtilUtil *new_OrgSpongycastlePqcMathNtruUtilUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastlePqcMathNtruUtilUtil *create_OrgSpongycastlePqcMathNtruUtilUtil_init(void);

FOUNDATION_EXPORT jint OrgSpongycastlePqcMathNtruUtilUtil_invertWithInt_withInt_(jint n, jint modulus);

FOUNDATION_EXPORT jint OrgSpongycastlePqcMathNtruUtilUtil_powWithInt_withInt_withInt_(jint a, jint b, jint modulus);

FOUNDATION_EXPORT jlong OrgSpongycastlePqcMathNtruUtilUtil_powWithLong_withInt_withLong_(jlong a, jint b, jlong modulus);

FOUNDATION_EXPORT id<OrgSpongycastlePqcMathNtruPolynomialTernaryPolynomial> OrgSpongycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withBoolean_withJavaSecuritySecureRandom_(jint N, jint numOnes, jint numNegOnes, jboolean sparse, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT IOSIntArray *OrgSpongycastlePqcMathNtruUtilUtil_generateRandomTernaryWithInt_withInt_withInt_withJavaSecuritySecureRandom_(jint N, jint numOnes, jint numNegOnes, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT jboolean OrgSpongycastlePqcMathNtruUtilUtil_is64BitJVM(void);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastlePqcMathNtruUtilUtil_readFullLengthWithJavaIoInputStream_withInt_(JavaIoInputStream *is, jint length);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastlePqcMathNtruUtilUtil)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastlePqcMathNtruUtilUtil")
