//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/util/test/SimpleTest.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/test/SimpleTest.h"
#include "org/spongycastle/util/test/SimpleTestResult.h"
#include "org/spongycastle/util/test/Test.h"
#include "org/spongycastle/util/test/TestFailedException.h"
#include "org/spongycastle/util/test/TestResult.h"

@interface OrgSpongycastleUtilTestSimpleTest ()

- (id<OrgSpongycastleUtilTestTestResult>)success;

@end

__attribute__((unused)) static id<OrgSpongycastleUtilTestTestResult> OrgSpongycastleUtilTestSimpleTest_success(OrgSpongycastleUtilTestSimpleTest *self);

@implementation OrgSpongycastleUtilTestSimpleTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleUtilTestSimpleTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgSpongycastleUtilTestTestResult>)success {
  return OrgSpongycastleUtilTestSimpleTest_success(self);
}

- (void)failWithNSString:(NSString *)message {
  @throw new_OrgSpongycastleUtilTestTestFailedException_initWithOrgSpongycastleUtilTestTestResult_(OrgSpongycastleUtilTestSimpleTestResult_failedWithOrgSpongycastleUtilTestTest_withNSString_(self, message));
}

- (void)isTrueWithBoolean:(jboolean)value {
  if (!value) {
    @throw new_OrgSpongycastleUtilTestTestFailedException_initWithOrgSpongycastleUtilTestTestResult_(OrgSpongycastleUtilTestSimpleTestResult_failedWithOrgSpongycastleUtilTestTest_withNSString_(self, @"no message"));
  }
}

- (void)isTrueWithNSString:(NSString *)message
               withBoolean:(jboolean)value {
  if (!value) {
    @throw new_OrgSpongycastleUtilTestTestFailedException_initWithOrgSpongycastleUtilTestTestResult_(OrgSpongycastleUtilTestSimpleTestResult_failedWithOrgSpongycastleUtilTestTest_withNSString_(self, message));
  }
}

- (void)isEqualsWithId:(id)a
                withId:(id)b {
  if (![nil_chk(a) isEqual:b]) {
    @throw new_OrgSpongycastleUtilTestTestFailedException_initWithOrgSpongycastleUtilTestTestResult_(OrgSpongycastleUtilTestSimpleTestResult_failedWithOrgSpongycastleUtilTestTest_withNSString_(self, @"no message"));
  }
}

- (void)isEqualsWithInt:(jint)a
                withInt:(jint)b {
  if (a != b) {
    @throw new_OrgSpongycastleUtilTestTestFailedException_initWithOrgSpongycastleUtilTestTestResult_(OrgSpongycastleUtilTestSimpleTestResult_failedWithOrgSpongycastleUtilTestTest_withNSString_(self, @"no message"));
  }
}

- (void)isEqualsWithLong:(jlong)a
                withLong:(jlong)b {
  if (a != b) {
    @throw new_OrgSpongycastleUtilTestTestFailedException_initWithOrgSpongycastleUtilTestTestResult_(OrgSpongycastleUtilTestSimpleTestResult_failedWithOrgSpongycastleUtilTestTest_withNSString_(self, @"no message"));
  }
}

- (void)isEqualsWithNSString:(NSString *)message
                 withBoolean:(jboolean)a
                 withBoolean:(jboolean)b {
  if (a != b) {
    @throw new_OrgSpongycastleUtilTestTestFailedException_initWithOrgSpongycastleUtilTestTestResult_(OrgSpongycastleUtilTestSimpleTestResult_failedWithOrgSpongycastleUtilTestTest_withNSString_(self, message));
  }
}

- (void)isEqualsWithNSString:(NSString *)message
                    withLong:(jlong)a
                    withLong:(jlong)b {
  if (a != b) {
    @throw new_OrgSpongycastleUtilTestTestFailedException_initWithOrgSpongycastleUtilTestTestResult_(OrgSpongycastleUtilTestSimpleTestResult_failedWithOrgSpongycastleUtilTestTest_withNSString_(self, message));
  }
}

- (void)isEqualsWithNSString:(NSString *)message
                      withId:(id)a
                      withId:(id)b {
  if (a == nil && b == nil) {
    return;
  }
  else if (a == nil) {
    @throw new_OrgSpongycastleUtilTestTestFailedException_initWithOrgSpongycastleUtilTestTestResult_(OrgSpongycastleUtilTestSimpleTestResult_failedWithOrgSpongycastleUtilTestTest_withNSString_(self, message));
  }
  else if (b == nil) {
    @throw new_OrgSpongycastleUtilTestTestFailedException_initWithOrgSpongycastleUtilTestTestResult_(OrgSpongycastleUtilTestSimpleTestResult_failedWithOrgSpongycastleUtilTestTest_withNSString_(self, message));
  }
  if (![a isEqual:b]) {
    @throw new_OrgSpongycastleUtilTestTestFailedException_initWithOrgSpongycastleUtilTestTestResult_(OrgSpongycastleUtilTestSimpleTestResult_failedWithOrgSpongycastleUtilTestTest_withNSString_(self, message));
  }
}

- (jboolean)areEqualWithByteArray2:(IOSObjectArray *)left
                    withByteArray2:(IOSObjectArray *)right {
  if (left == nil && right == nil) {
    return true;
  }
  else if (left == nil || right == nil) {
    return false;
  }
  if (left->size_ != right->size_) {
    return false;
  }
  for (jint t = 0; t < left->size_; t++) {
    if ([self areEqualWithByteArray:IOSObjectArray_Get(left, t) withByteArray:IOSObjectArray_Get(right, t)]) {
      continue;
    }
    return false;
  }
  return true;
}

- (void)failWithNSString:(NSString *)message
   withJavaLangThrowable:(JavaLangThrowable *)throwable {
  @throw new_OrgSpongycastleUtilTestTestFailedException_initWithOrgSpongycastleUtilTestTestResult_(OrgSpongycastleUtilTestSimpleTestResult_failedWithOrgSpongycastleUtilTestTest_withNSString_withJavaLangThrowable_(self, message, throwable));
}

- (void)failWithNSString:(NSString *)message
                  withId:(id)expected
                  withId:(id)found {
  @throw new_OrgSpongycastleUtilTestTestFailedException_initWithOrgSpongycastleUtilTestTestResult_(OrgSpongycastleUtilTestSimpleTestResult_failedWithOrgSpongycastleUtilTestTest_withNSString_withId_withId_(self, message, expected, found));
}

- (jboolean)areEqualWithByteArray:(IOSByteArray *)a
                    withByteArray:(IOSByteArray *)b {
  return OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(a, b);
}

- (id<OrgSpongycastleUtilTestTestResult>)perform {
  @try {
    [self performTest];
    return OrgSpongycastleUtilTestSimpleTest_success(self);
  }
  @catch (OrgSpongycastleUtilTestTestFailedException *e) {
    return [e getResult];
  }
  @catch (JavaLangException *e) {
    return OrgSpongycastleUtilTestSimpleTestResult_failedWithOrgSpongycastleUtilTestTest_withNSString_withJavaLangThrowable_(self, JreStrcat("$@", @"Exception: ", e), e);
  }
}

+ (void)runTestWithOrgSpongycastleUtilTestTest:(id<OrgSpongycastleUtilTestTest>)test {
  OrgSpongycastleUtilTestSimpleTest_runTestWithOrgSpongycastleUtilTestTest_(test);
}

+ (void)runTestWithOrgSpongycastleUtilTestTest:(id<OrgSpongycastleUtilTestTest>)test
                         withJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  OrgSpongycastleUtilTestSimpleTest_runTestWithOrgSpongycastleUtilTestTest_withJavaIoPrintStream_(test, outArg);
}

- (void)performTest {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleUtilTestTestResult;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 12, 15, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleUtilTestTestResult;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 16, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, 19, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(success);
  methods[3].selector = @selector(failWithNSString:);
  methods[4].selector = @selector(isTrueWithBoolean:);
  methods[5].selector = @selector(isTrueWithNSString:withBoolean:);
  methods[6].selector = @selector(isEqualsWithId:withId:);
  methods[7].selector = @selector(isEqualsWithInt:withInt:);
  methods[8].selector = @selector(isEqualsWithLong:withLong:);
  methods[9].selector = @selector(isEqualsWithNSString:withBoolean:withBoolean:);
  methods[10].selector = @selector(isEqualsWithNSString:withLong:withLong:);
  methods[11].selector = @selector(isEqualsWithNSString:withId:withId:);
  methods[12].selector = @selector(areEqualWithByteArray2:withByteArray2:);
  methods[13].selector = @selector(failWithNSString:withJavaLangThrowable:);
  methods[14].selector = @selector(failWithNSString:withId:withId:);
  methods[15].selector = @selector(areEqualWithByteArray:withByteArray:);
  methods[16].selector = @selector(perform);
  methods[17].selector = @selector(runTestWithOrgSpongycastleUtilTestTest:);
  methods[18].selector = @selector(runTestWithOrgSpongycastleUtilTestTest:withJavaIoPrintStream:);
  methods[19].selector = @selector(performTest);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "fail", "LNSString;", "isTrue", "Z", "LNSString;Z", "isEquals", "LNSObject;LNSObject;", "II", "JJ", "LNSString;ZZ", "LNSString;JJ", "LNSString;LNSObject;LNSObject;", "areEqual", "[[B[[B", "LNSString;LJavaLangThrowable;", "[B[B", "runTest", "LOrgSpongycastleUtilTestTest;", "LOrgSpongycastleUtilTestTest;LJavaIoPrintStream;", "LJavaLangException;" };
  static const J2ObjcClassInfo _OrgSpongycastleUtilTestSimpleTest = { "SimpleTest", "org.spongycastle.util.test", ptrTable, methods, NULL, 7, 0x401, 20, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleUtilTestSimpleTest;
}

@end

void OrgSpongycastleUtilTestSimpleTest_init(OrgSpongycastleUtilTestSimpleTest *self) {
  NSObject_init(self);
}

id<OrgSpongycastleUtilTestTestResult> OrgSpongycastleUtilTestSimpleTest_success(OrgSpongycastleUtilTestSimpleTest *self) {
  return OrgSpongycastleUtilTestSimpleTestResult_successfulWithOrgSpongycastleUtilTestTest_withNSString_(self, @"Okay");
}

void OrgSpongycastleUtilTestSimpleTest_runTestWithOrgSpongycastleUtilTestTest_(id<OrgSpongycastleUtilTestTest> test) {
  OrgSpongycastleUtilTestSimpleTest_initialize();
  OrgSpongycastleUtilTestSimpleTest_runTestWithOrgSpongycastleUtilTestTest_withJavaIoPrintStream_(test, JreLoadStatic(JavaLangSystem, out));
}

void OrgSpongycastleUtilTestSimpleTest_runTestWithOrgSpongycastleUtilTestTest_withJavaIoPrintStream_(id<OrgSpongycastleUtilTestTest> test, JavaIoPrintStream *outArg) {
  OrgSpongycastleUtilTestSimpleTest_initialize();
  id<OrgSpongycastleUtilTestTestResult> result = [((id<OrgSpongycastleUtilTestTest>) nil_chk(test)) perform];
  [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:[((id<OrgSpongycastleUtilTestTestResult>) nil_chk(result)) description]];
  if ([result getException] != nil) {
    [((JavaLangThrowable *) nil_chk([result getException])) printStackTraceWithJavaIoPrintStream:outArg];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleUtilTestSimpleTest)
