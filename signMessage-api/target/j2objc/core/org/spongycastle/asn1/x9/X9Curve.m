//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/asn1/x9/X9Curve.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/asn1/ASN1Encodable.h"
#include "org/spongycastle/asn1/ASN1EncodableVector.h"
#include "org/spongycastle/asn1/ASN1Integer.h"
#include "org/spongycastle/asn1/ASN1Object.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/spongycastle/asn1/ASN1OctetString.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/ASN1Sequence.h"
#include "org/spongycastle/asn1/DERBitString.h"
#include "org/spongycastle/asn1/DERSequence.h"
#include "org/spongycastle/asn1/x9/X9Curve.h"
#include "org/spongycastle/asn1/x9/X9FieldElement.h"
#include "org/spongycastle/asn1/x9/X9FieldID.h"
#include "org/spongycastle/asn1/x9/X9ObjectIdentifiers.h"
#include "org/spongycastle/math/ec/ECAlgorithms.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECFieldElement.h"

@interface OrgSpongycastleAsn1X9X9Curve () {
 @public
  OrgSpongycastleMathEcECCurve *curve_;
  IOSByteArray *seed_;
  OrgSpongycastleAsn1ASN1ObjectIdentifier *fieldIdentifier_;
}

- (void)setFieldIdentifier;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleAsn1X9X9Curve, curve_, OrgSpongycastleMathEcECCurve *)
J2OBJC_FIELD_SETTER(OrgSpongycastleAsn1X9X9Curve, seed_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleAsn1X9X9Curve, fieldIdentifier_, OrgSpongycastleAsn1ASN1ObjectIdentifier *)

__attribute__((unused)) static void OrgSpongycastleAsn1X9X9Curve_setFieldIdentifier(OrgSpongycastleAsn1X9X9Curve *self);

@implementation OrgSpongycastleAsn1X9X9Curve

- (instancetype)initWithOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)curve {
  OrgSpongycastleAsn1X9X9Curve_initWithOrgSpongycastleMathEcECCurve_(self, curve);
  return self;
}

- (instancetype)initWithOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)curve
                                       withByteArray:(IOSByteArray *)seed {
  OrgSpongycastleAsn1X9X9Curve_initWithOrgSpongycastleMathEcECCurve_withByteArray_(self, curve, seed);
  return self;
}

- (instancetype)initWithOrgSpongycastleAsn1X9X9FieldID:(OrgSpongycastleAsn1X9X9FieldID *)fieldID
                   withOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)seq {
  OrgSpongycastleAsn1X9X9Curve_initWithOrgSpongycastleAsn1X9X9FieldID_withOrgSpongycastleAsn1ASN1Sequence_(self, fieldID, seq);
  return self;
}

- (void)setFieldIdentifier {
  OrgSpongycastleAsn1X9X9Curve_setFieldIdentifier(self);
}

- (OrgSpongycastleMathEcECCurve *)getCurve {
  return curve_;
}

- (IOSByteArray *)getSeed {
  return seed_;
}

- (OrgSpongycastleAsn1ASN1Primitive *)toASN1Primitive {
  OrgSpongycastleAsn1ASN1EncodableVector *v = new_OrgSpongycastleAsn1ASN1EncodableVector_init();
  if ([((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(fieldIdentifier_)) isEqual:JreLoadStatic(OrgSpongycastleAsn1X9X9ObjectIdentifiers, prime_field)]) {
    [v addWithOrgSpongycastleAsn1ASN1Encodable:[new_OrgSpongycastleAsn1X9X9FieldElement_initWithOrgSpongycastleMathEcECFieldElement_([((OrgSpongycastleMathEcECCurve *) nil_chk(curve_)) getA]) toASN1Primitive]];
    [v addWithOrgSpongycastleAsn1ASN1Encodable:[new_OrgSpongycastleAsn1X9X9FieldElement_initWithOrgSpongycastleMathEcECFieldElement_([((OrgSpongycastleMathEcECCurve *) nil_chk(curve_)) getB]) toASN1Primitive]];
  }
  else if ([((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(fieldIdentifier_)) isEqual:JreLoadStatic(OrgSpongycastleAsn1X9X9ObjectIdentifiers, characteristic_two_field)]) {
    [v addWithOrgSpongycastleAsn1ASN1Encodable:[new_OrgSpongycastleAsn1X9X9FieldElement_initWithOrgSpongycastleMathEcECFieldElement_([((OrgSpongycastleMathEcECCurve *) nil_chk(curve_)) getA]) toASN1Primitive]];
    [v addWithOrgSpongycastleAsn1ASN1Encodable:[new_OrgSpongycastleAsn1X9X9FieldElement_initWithOrgSpongycastleMathEcECFieldElement_([((OrgSpongycastleMathEcECCurve *) nil_chk(curve_)) getB]) toASN1Primitive]];
  }
  if (seed_ != nil) {
    [v addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1DERBitString_initWithByteArray_(seed_)];
  }
  return new_OrgSpongycastleAsn1DERSequence_initWithOrgSpongycastleAsn1ASN1EncodableVector_(v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECCurve;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleMathEcECCurve:);
  methods[1].selector = @selector(initWithOrgSpongycastleMathEcECCurve:withByteArray:);
  methods[2].selector = @selector(initWithOrgSpongycastleAsn1X9X9FieldID:withOrgSpongycastleAsn1ASN1Sequence:);
  methods[3].selector = @selector(setFieldIdentifier);
  methods[4].selector = @selector(getCurve);
  methods[5].selector = @selector(getSeed);
  methods[6].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "curve_", "LOrgSpongycastleMathEcECCurve;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seed_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldIdentifier_", "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleMathEcECCurve;", "LOrgSpongycastleMathEcECCurve;[B", "LOrgSpongycastleAsn1X9X9FieldID;LOrgSpongycastleAsn1ASN1Sequence;" };
  static const J2ObjcClassInfo _OrgSpongycastleAsn1X9X9Curve = { "X9Curve", "org.spongycastle.asn1.x9", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleAsn1X9X9Curve;
}

@end

void OrgSpongycastleAsn1X9X9Curve_initWithOrgSpongycastleMathEcECCurve_(OrgSpongycastleAsn1X9X9Curve *self, OrgSpongycastleMathEcECCurve *curve) {
  OrgSpongycastleAsn1ASN1Object_init(self);
  self->fieldIdentifier_ = nil;
  self->curve_ = curve;
  self->seed_ = nil;
  OrgSpongycastleAsn1X9X9Curve_setFieldIdentifier(self);
}

OrgSpongycastleAsn1X9X9Curve *new_OrgSpongycastleAsn1X9X9Curve_initWithOrgSpongycastleMathEcECCurve_(OrgSpongycastleMathEcECCurve *curve) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1X9X9Curve, initWithOrgSpongycastleMathEcECCurve_, curve)
}

OrgSpongycastleAsn1X9X9Curve *create_OrgSpongycastleAsn1X9X9Curve_initWithOrgSpongycastleMathEcECCurve_(OrgSpongycastleMathEcECCurve *curve) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1X9X9Curve, initWithOrgSpongycastleMathEcECCurve_, curve)
}

void OrgSpongycastleAsn1X9X9Curve_initWithOrgSpongycastleMathEcECCurve_withByteArray_(OrgSpongycastleAsn1X9X9Curve *self, OrgSpongycastleMathEcECCurve *curve, IOSByteArray *seed) {
  OrgSpongycastleAsn1ASN1Object_init(self);
  self->fieldIdentifier_ = nil;
  self->curve_ = curve;
  self->seed_ = seed;
  OrgSpongycastleAsn1X9X9Curve_setFieldIdentifier(self);
}

OrgSpongycastleAsn1X9X9Curve *new_OrgSpongycastleAsn1X9X9Curve_initWithOrgSpongycastleMathEcECCurve_withByteArray_(OrgSpongycastleMathEcECCurve *curve, IOSByteArray *seed) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1X9X9Curve, initWithOrgSpongycastleMathEcECCurve_withByteArray_, curve, seed)
}

OrgSpongycastleAsn1X9X9Curve *create_OrgSpongycastleAsn1X9X9Curve_initWithOrgSpongycastleMathEcECCurve_withByteArray_(OrgSpongycastleMathEcECCurve *curve, IOSByteArray *seed) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1X9X9Curve, initWithOrgSpongycastleMathEcECCurve_withByteArray_, curve, seed)
}

void OrgSpongycastleAsn1X9X9Curve_initWithOrgSpongycastleAsn1X9X9FieldID_withOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1X9X9Curve *self, OrgSpongycastleAsn1X9X9FieldID *fieldID, OrgSpongycastleAsn1ASN1Sequence *seq) {
  OrgSpongycastleAsn1ASN1Object_init(self);
  self->fieldIdentifier_ = nil;
  self->fieldIdentifier_ = [((OrgSpongycastleAsn1X9X9FieldID *) nil_chk(fieldID)) getIdentifier];
  if ([((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(self->fieldIdentifier_)) isEqual:JreLoadStatic(OrgSpongycastleAsn1X9X9ObjectIdentifiers, prime_field)]) {
    JavaMathBigInteger *p = [((OrgSpongycastleAsn1ASN1Integer *) nil_chk(((OrgSpongycastleAsn1ASN1Integer *) cast_chk([fieldID getParameters], [OrgSpongycastleAsn1ASN1Integer class])))) getValue];
    OrgSpongycastleAsn1X9X9FieldElement *x9A = new_OrgSpongycastleAsn1X9X9FieldElement_initWithJavaMathBigInteger_withOrgSpongycastleAsn1ASN1OctetString_(p, (OrgSpongycastleAsn1ASN1OctetString *) cast_chk([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjectAtWithInt:0], [OrgSpongycastleAsn1ASN1OctetString class]));
    OrgSpongycastleAsn1X9X9FieldElement *x9B = new_OrgSpongycastleAsn1X9X9FieldElement_initWithJavaMathBigInteger_withOrgSpongycastleAsn1ASN1OctetString_(p, (OrgSpongycastleAsn1ASN1OctetString *) cast_chk([seq getObjectAtWithInt:1], [OrgSpongycastleAsn1ASN1OctetString class]));
    self->curve_ = new_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, [((OrgSpongycastleMathEcECFieldElement *) nil_chk([x9A getValue])) toBigInteger], [((OrgSpongycastleMathEcECFieldElement *) nil_chk([x9B getValue])) toBigInteger]);
  }
  else if ([((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(self->fieldIdentifier_)) isEqual:JreLoadStatic(OrgSpongycastleAsn1X9X9ObjectIdentifiers, characteristic_two_field)]) {
    OrgSpongycastleAsn1ASN1Sequence *parameters = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_([fieldID getParameters]);
    jint m = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk(((OrgSpongycastleAsn1ASN1Integer *) cast_chk([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(parameters)) getObjectAtWithInt:0], [OrgSpongycastleAsn1ASN1Integer class])))) getValue])) intValue];
    OrgSpongycastleAsn1ASN1ObjectIdentifier *representation = (OrgSpongycastleAsn1ASN1ObjectIdentifier *) cast_chk([parameters getObjectAtWithInt:1], [OrgSpongycastleAsn1ASN1ObjectIdentifier class]);
    jint k1 = 0;
    jint k2 = 0;
    jint k3 = 0;
    if ([((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(representation)) isEqual:JreLoadStatic(OrgSpongycastleAsn1X9X9ObjectIdentifiers, tpBasis)]) {
      k1 = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk(OrgSpongycastleAsn1ASN1Integer_getInstanceWithId_([parameters getObjectAtWithInt:2]))) getValue])) intValue];
    }
    else if ([representation isEqual:JreLoadStatic(OrgSpongycastleAsn1X9X9ObjectIdentifiers, ppBasis)]) {
      OrgSpongycastleAsn1ASN1Sequence *pentanomial = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_([parameters getObjectAtWithInt:2]);
      k1 = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk(OrgSpongycastleAsn1ASN1Integer_getInstanceWithId_([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(pentanomial)) getObjectAtWithInt:0]))) getValue])) intValue];
      k2 = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk(OrgSpongycastleAsn1ASN1Integer_getInstanceWithId_([pentanomial getObjectAtWithInt:1]))) getValue])) intValue];
      k3 = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk(OrgSpongycastleAsn1ASN1Integer_getInstanceWithId_([pentanomial getObjectAtWithInt:2]))) getValue])) intValue];
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"This type of EC basis is not implemented");
    }
    OrgSpongycastleAsn1X9X9FieldElement *x9A = new_OrgSpongycastleAsn1X9X9FieldElement_initWithInt_withInt_withInt_withInt_withOrgSpongycastleAsn1ASN1OctetString_(m, k1, k2, k3, (OrgSpongycastleAsn1ASN1OctetString *) cast_chk([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjectAtWithInt:0], [OrgSpongycastleAsn1ASN1OctetString class]));
    OrgSpongycastleAsn1X9X9FieldElement *x9B = new_OrgSpongycastleAsn1X9X9FieldElement_initWithInt_withInt_withInt_withInt_withOrgSpongycastleAsn1ASN1OctetString_(m, k1, k2, k3, (OrgSpongycastleAsn1ASN1OctetString *) cast_chk([seq getObjectAtWithInt:1], [OrgSpongycastleAsn1ASN1OctetString class]));
    self->curve_ = new_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_(m, k1, k2, k3, [((OrgSpongycastleMathEcECFieldElement *) nil_chk([x9A getValue])) toBigInteger], [((OrgSpongycastleMathEcECFieldElement *) nil_chk([x9B getValue])) toBigInteger]);
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"This type of ECCurve is not implemented");
  }
  if ([seq size] == 3) {
    self->seed_ = [((OrgSpongycastleAsn1DERBitString *) nil_chk(((OrgSpongycastleAsn1DERBitString *) cast_chk([seq getObjectAtWithInt:2], [OrgSpongycastleAsn1DERBitString class])))) getBytes];
  }
}

OrgSpongycastleAsn1X9X9Curve *new_OrgSpongycastleAsn1X9X9Curve_initWithOrgSpongycastleAsn1X9X9FieldID_withOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1X9X9FieldID *fieldID, OrgSpongycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1X9X9Curve, initWithOrgSpongycastleAsn1X9X9FieldID_withOrgSpongycastleAsn1ASN1Sequence_, fieldID, seq)
}

OrgSpongycastleAsn1X9X9Curve *create_OrgSpongycastleAsn1X9X9Curve_initWithOrgSpongycastleAsn1X9X9FieldID_withOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1X9X9FieldID *fieldID, OrgSpongycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1X9X9Curve, initWithOrgSpongycastleAsn1X9X9FieldID_withOrgSpongycastleAsn1ASN1Sequence_, fieldID, seq)
}

void OrgSpongycastleAsn1X9X9Curve_setFieldIdentifier(OrgSpongycastleAsn1X9X9Curve *self) {
  if (OrgSpongycastleMathEcECAlgorithms_isFpCurveWithOrgSpongycastleMathEcECCurve_(self->curve_)) {
    self->fieldIdentifier_ = JreLoadStatic(OrgSpongycastleAsn1X9X9ObjectIdentifiers, prime_field);
  }
  else if (OrgSpongycastleMathEcECAlgorithms_isF2mCurveWithOrgSpongycastleMathEcECCurve_(self->curve_)) {
    self->fieldIdentifier_ = JreLoadStatic(OrgSpongycastleAsn1X9X9ObjectIdentifiers, characteristic_two_field);
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"This type of ECCurve is not implemented");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleAsn1X9X9Curve)
