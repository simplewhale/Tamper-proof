//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/asn1/eac/PackedDate.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"
#include "java/util/SimpleTimeZone.h"
#include "org/spongycastle/asn1/eac/PackedDate.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleAsn1EacPackedDate () {
 @public
  IOSByteArray *time_;
}

- (IOSByteArray *)convertWithNSString:(NSString *)sTime;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleAsn1EacPackedDate, time_, IOSByteArray *)

__attribute__((unused)) static IOSByteArray *OrgSpongycastleAsn1EacPackedDate_convertWithNSString_(OrgSpongycastleAsn1EacPackedDate *self, NSString *sTime);

@implementation OrgSpongycastleAsn1EacPackedDate

- (instancetype)initWithNSString:(NSString *)time {
  OrgSpongycastleAsn1EacPackedDate_initWithNSString_(self, time);
  return self;
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time {
  OrgSpongycastleAsn1EacPackedDate_initWithJavaUtilDate_(self, time);
  return self;
}

- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)time
                  withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgSpongycastleAsn1EacPackedDate_initWithJavaUtilDate_withJavaUtilLocale_(self, time, locale);
  return self;
}

- (IOSByteArray *)convertWithNSString:(NSString *)sTime {
  return OrgSpongycastleAsn1EacPackedDate_convertWithNSString_(self, sTime);
}

- (instancetype)initWithByteArray:(IOSByteArray *)bytes {
  OrgSpongycastleAsn1EacPackedDate_initWithByteArray_(self, bytes);
  return self;
}

- (JavaUtilDate *)getDate {
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyyMMdd");
  return [dateF parseWithNSString:JreStrcat("$$", @"20", [self description])];
}

- (NSUInteger)hash {
  return OrgSpongycastleUtilArrays_hashCodeWithByteArray_(time_);
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[OrgSpongycastleAsn1EacPackedDate class]])) {
    return false;
  }
  OrgSpongycastleAsn1EacPackedDate *other = (OrgSpongycastleAsn1EacPackedDate *) cast_chk(o, [OrgSpongycastleAsn1EacPackedDate class]);
  return OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(time_, ((OrgSpongycastleAsn1EacPackedDate *) nil_chk(other))->time_);
}

- (NSString *)description {
  IOSCharArray *dateC = [IOSCharArray newArrayWithLength:((IOSByteArray *) nil_chk(time_))->size_];
  for (jint i = 0; i != dateC->size_; i++) {
    *IOSCharArray_GetRef(dateC, i) = (jchar) ((IOSByteArray_Get(time_, i) & (jint) 0xff) + '0');
  }
  return [NSString java_stringWithCharacters:dateC];
}

- (IOSByteArray *)getEncoding {
  return OrgSpongycastleUtilArrays_cloneWithByteArray_(time_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 3, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithJavaUtilDate:);
  methods[2].selector = @selector(initWithJavaUtilDate:withJavaUtilLocale:);
  methods[3].selector = @selector(convertWithNSString:);
  methods[4].selector = @selector(initWithByteArray:);
  methods[5].selector = @selector(getDate);
  methods[6].selector = @selector(hash);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(getEncoding);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "time_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaUtilDate;", "LJavaUtilDate;LJavaUtilLocale;", "convert", "[B", "LJavaTextParseException;", "hashCode", "equals", "LNSObject;", "toString" };
  static const J2ObjcClassInfo _OrgSpongycastleAsn1EacPackedDate = { "PackedDate", "org.spongycastle.asn1.eac", ptrTable, methods, fields, 7, 0x1, 10, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleAsn1EacPackedDate;
}

@end

void OrgSpongycastleAsn1EacPackedDate_initWithNSString_(OrgSpongycastleAsn1EacPackedDate *self, NSString *time) {
  NSObject_init(self);
  self->time_ = OrgSpongycastleAsn1EacPackedDate_convertWithNSString_(self, time);
}

OrgSpongycastleAsn1EacPackedDate *new_OrgSpongycastleAsn1EacPackedDate_initWithNSString_(NSString *time) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1EacPackedDate, initWithNSString_, time)
}

OrgSpongycastleAsn1EacPackedDate *create_OrgSpongycastleAsn1EacPackedDate_initWithNSString_(NSString *time) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1EacPackedDate, initWithNSString_, time)
}

void OrgSpongycastleAsn1EacPackedDate_initWithJavaUtilDate_(OrgSpongycastleAsn1EacPackedDate *self, JavaUtilDate *time) {
  NSObject_init(self);
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyMMdd'Z'");
  [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  self->time_ = OrgSpongycastleAsn1EacPackedDate_convertWithNSString_(self, [dateF formatWithJavaUtilDate:time]);
}

OrgSpongycastleAsn1EacPackedDate *new_OrgSpongycastleAsn1EacPackedDate_initWithJavaUtilDate_(JavaUtilDate *time) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1EacPackedDate, initWithJavaUtilDate_, time)
}

OrgSpongycastleAsn1EacPackedDate *create_OrgSpongycastleAsn1EacPackedDate_initWithJavaUtilDate_(JavaUtilDate *time) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1EacPackedDate, initWithJavaUtilDate_, time)
}

void OrgSpongycastleAsn1EacPackedDate_initWithJavaUtilDate_withJavaUtilLocale_(OrgSpongycastleAsn1EacPackedDate *self, JavaUtilDate *time, JavaUtilLocale *locale) {
  NSObject_init(self);
  JavaTextSimpleDateFormat *dateF = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"yyMMdd'Z'", locale);
  [dateF setTimeZoneWithJavaUtilTimeZone:new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"Z")];
  self->time_ = OrgSpongycastleAsn1EacPackedDate_convertWithNSString_(self, [dateF formatWithJavaUtilDate:time]);
}

OrgSpongycastleAsn1EacPackedDate *new_OrgSpongycastleAsn1EacPackedDate_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1EacPackedDate, initWithJavaUtilDate_withJavaUtilLocale_, time, locale)
}

OrgSpongycastleAsn1EacPackedDate *create_OrgSpongycastleAsn1EacPackedDate_initWithJavaUtilDate_withJavaUtilLocale_(JavaUtilDate *time, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1EacPackedDate, initWithJavaUtilDate_withJavaUtilLocale_, time, locale)
}

IOSByteArray *OrgSpongycastleAsn1EacPackedDate_convertWithNSString_(OrgSpongycastleAsn1EacPackedDate *self, NSString *sTime) {
  IOSCharArray *digs = [((NSString *) nil_chk(sTime)) java_toCharArray];
  IOSByteArray *date = [IOSByteArray newArrayWithLength:6];
  for (jint i = 0; i != 6; i++) {
    *IOSByteArray_GetRef(date, i) = (jbyte) (IOSCharArray_Get(nil_chk(digs), i) - '0');
  }
  return date;
}

void OrgSpongycastleAsn1EacPackedDate_initWithByteArray_(OrgSpongycastleAsn1EacPackedDate *self, IOSByteArray *bytes) {
  NSObject_init(self);
  self->time_ = bytes;
}

OrgSpongycastleAsn1EacPackedDate *new_OrgSpongycastleAsn1EacPackedDate_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1EacPackedDate, initWithByteArray_, bytes)
}

OrgSpongycastleAsn1EacPackedDate *create_OrgSpongycastleAsn1EacPackedDate_initWithByteArray_(IOSByteArray *bytes) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1EacPackedDate, initWithByteArray_, bytes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleAsn1EacPackedDate)
