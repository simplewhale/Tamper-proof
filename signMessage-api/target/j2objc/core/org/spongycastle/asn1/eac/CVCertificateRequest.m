//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/asn1/eac/CVCertificateRequest.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Enumeration.h"
#include "org/spongycastle/asn1/ASN1ApplicationSpecific.h"
#include "org/spongycastle/asn1/ASN1Encodable.h"
#include "org/spongycastle/asn1/ASN1EncodableVector.h"
#include "org/spongycastle/asn1/ASN1Object.h"
#include "org/spongycastle/asn1/ASN1ParsingException.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/ASN1Sequence.h"
#include "org/spongycastle/asn1/BERTags.h"
#include "org/spongycastle/asn1/DERApplicationSpecific.h"
#include "org/spongycastle/asn1/DEROctetString.h"
#include "org/spongycastle/asn1/eac/CVCertificateRequest.h"
#include "org/spongycastle/asn1/eac/CertificateBody.h"
#include "org/spongycastle/asn1/eac/EACTags.h"
#include "org/spongycastle/asn1/eac/PublicKeyDataObject.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleAsn1EacCVCertificateRequest () {
 @public
  OrgSpongycastleAsn1ASN1ApplicationSpecific *original_;
  OrgSpongycastleAsn1EacCertificateBody *certificateBody_;
  IOSByteArray *innerSignature_;
  IOSByteArray *outerSignature_;
}

- (instancetype)initWithOrgSpongycastleAsn1ASN1ApplicationSpecific:(OrgSpongycastleAsn1ASN1ApplicationSpecific *)request;

- (void)initCertBodyWithOrgSpongycastleAsn1ASN1ApplicationSpecific:(OrgSpongycastleAsn1ASN1ApplicationSpecific *)request OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleAsn1EacCVCertificateRequest, original_, OrgSpongycastleAsn1ASN1ApplicationSpecific *)
J2OBJC_FIELD_SETTER(OrgSpongycastleAsn1EacCVCertificateRequest, certificateBody_, OrgSpongycastleAsn1EacCertificateBody *)
J2OBJC_FIELD_SETTER(OrgSpongycastleAsn1EacCVCertificateRequest, innerSignature_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleAsn1EacCVCertificateRequest, outerSignature_, IOSByteArray *)

inline jint OrgSpongycastleAsn1EacCVCertificateRequest_get_bodyValid(void);
#define OrgSpongycastleAsn1EacCVCertificateRequest_bodyValid 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleAsn1EacCVCertificateRequest, bodyValid, jint)

inline jint OrgSpongycastleAsn1EacCVCertificateRequest_get_signValid(void);
#define OrgSpongycastleAsn1EacCVCertificateRequest_signValid 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleAsn1EacCVCertificateRequest, signValid, jint)

__attribute__((unused)) static void OrgSpongycastleAsn1EacCVCertificateRequest_initWithOrgSpongycastleAsn1ASN1ApplicationSpecific_(OrgSpongycastleAsn1EacCVCertificateRequest *self, OrgSpongycastleAsn1ASN1ApplicationSpecific *request);

__attribute__((unused)) static OrgSpongycastleAsn1EacCVCertificateRequest *new_OrgSpongycastleAsn1EacCVCertificateRequest_initWithOrgSpongycastleAsn1ASN1ApplicationSpecific_(OrgSpongycastleAsn1ASN1ApplicationSpecific *request) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleAsn1EacCVCertificateRequest *create_OrgSpongycastleAsn1EacCVCertificateRequest_initWithOrgSpongycastleAsn1ASN1ApplicationSpecific_(OrgSpongycastleAsn1ASN1ApplicationSpecific *request);

__attribute__((unused)) static void OrgSpongycastleAsn1EacCVCertificateRequest_initCertBodyWithOrgSpongycastleAsn1ASN1ApplicationSpecific_(OrgSpongycastleAsn1EacCVCertificateRequest *self, OrgSpongycastleAsn1ASN1ApplicationSpecific *request);

@implementation OrgSpongycastleAsn1EacCVCertificateRequest

- (instancetype)initWithOrgSpongycastleAsn1ASN1ApplicationSpecific:(OrgSpongycastleAsn1ASN1ApplicationSpecific *)request {
  OrgSpongycastleAsn1EacCVCertificateRequest_initWithOrgSpongycastleAsn1ASN1ApplicationSpecific_(self, request);
  return self;
}

- (void)initCertBodyWithOrgSpongycastleAsn1ASN1ApplicationSpecific:(OrgSpongycastleAsn1ASN1ApplicationSpecific *)request {
  OrgSpongycastleAsn1EacCVCertificateRequest_initCertBodyWithOrgSpongycastleAsn1ASN1ApplicationSpecific_(self, request);
}

+ (OrgSpongycastleAsn1EacCVCertificateRequest *)getInstanceWithId:(id)obj {
  return OrgSpongycastleAsn1EacCVCertificateRequest_getInstanceWithId_(obj);
}

- (OrgSpongycastleAsn1EacCertificateBody *)getCertificateBody {
  return certificateBody_;
}

- (OrgSpongycastleAsn1EacPublicKeyDataObject *)getPublicKey {
  return [((OrgSpongycastleAsn1EacCertificateBody *) nil_chk(certificateBody_)) getPublicKey];
}

- (IOSByteArray *)getInnerSignature {
  return OrgSpongycastleUtilArrays_cloneWithByteArray_(innerSignature_);
}

- (IOSByteArray *)getOuterSignature {
  return OrgSpongycastleUtilArrays_cloneWithByteArray_(outerSignature_);
}

- (jboolean)hasOuterSignature {
  return outerSignature_ != nil;
}

- (OrgSpongycastleAsn1ASN1Primitive *)toASN1Primitive {
  if (original_ != nil) {
    return original_;
  }
  else {
    OrgSpongycastleAsn1ASN1EncodableVector *v = new_OrgSpongycastleAsn1ASN1EncodableVector_init();
    [v addWithOrgSpongycastleAsn1ASN1Encodable:certificateBody_];
    @try {
      [v addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1DERApplicationSpecific_initWithBoolean_withInt_withOrgSpongycastleAsn1ASN1Encodable_(false, OrgSpongycastleAsn1EacEACTags_STATIC_INTERNAL_AUTHENTIFICATION_ONE_STEP, new_OrgSpongycastleAsn1DEROctetString_initWithByteArray_(innerSignature_))];
    }
    @catch (JavaIoIOException *e) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"unable to convert signature!");
    }
    return new_OrgSpongycastleAsn1DERApplicationSpecific_initWithInt_withOrgSpongycastleAsn1ASN1EncodableVector_(OrgSpongycastleAsn1EacEACTags_CARDHOLDER_CERTIFICATE, v);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 0, 1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1EacCVCertificateRequest;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1EacCertificateBody;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1EacPublicKeyDataObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleAsn1ASN1ApplicationSpecific:);
  methods[1].selector = @selector(initCertBodyWithOrgSpongycastleAsn1ASN1ApplicationSpecific:);
  methods[2].selector = @selector(getInstanceWithId:);
  methods[3].selector = @selector(getCertificateBody);
  methods[4].selector = @selector(getPublicKey);
  methods[5].selector = @selector(getInnerSignature);
  methods[6].selector = @selector(getOuterSignature);
  methods[7].selector = @selector(hasOuterSignature);
  methods[8].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "original_", "LOrgSpongycastleAsn1ASN1ApplicationSpecific;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "certificateBody_", "LOrgSpongycastleAsn1EacCertificateBody;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "innerSignature_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "outerSignature_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bodyValid", "I", .constantValue.asInt = OrgSpongycastleAsn1EacCVCertificateRequest_bodyValid, 0x1a, -1, -1, -1, -1 },
    { "signValid", "I", .constantValue.asInt = OrgSpongycastleAsn1EacCVCertificateRequest_signValid, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleAsn1ASN1ApplicationSpecific;", "LJavaIoIOException;", "initCertBody", "getInstance", "LNSObject;" };
  static const J2ObjcClassInfo _OrgSpongycastleAsn1EacCVCertificateRequest = { "CVCertificateRequest", "org.spongycastle.asn1.eac", ptrTable, methods, fields, 7, 0x1, 9, 6, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleAsn1EacCVCertificateRequest;
}

@end

void OrgSpongycastleAsn1EacCVCertificateRequest_initWithOrgSpongycastleAsn1ASN1ApplicationSpecific_(OrgSpongycastleAsn1EacCVCertificateRequest *self, OrgSpongycastleAsn1ASN1ApplicationSpecific *request) {
  OrgSpongycastleAsn1ASN1Object_init(self);
  self->innerSignature_ = nil;
  self->outerSignature_ = nil;
  self->original_ = request;
  if ([((OrgSpongycastleAsn1ASN1ApplicationSpecific *) nil_chk(request)) isConstructed] && [request getApplicationTag] == OrgSpongycastleAsn1EacEACTags_AUTHENTIFICATION_DATA) {
    OrgSpongycastleAsn1ASN1Sequence *seq = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_([request getObjectWithInt:OrgSpongycastleAsn1BERTags_SEQUENCE]);
    OrgSpongycastleAsn1EacCVCertificateRequest_initCertBodyWithOrgSpongycastleAsn1ASN1ApplicationSpecific_(self, OrgSpongycastleAsn1ASN1ApplicationSpecific_getInstanceWithId_([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjectAtWithInt:0]));
    self->outerSignature_ = [((OrgSpongycastleAsn1ASN1ApplicationSpecific *) nil_chk(OrgSpongycastleAsn1ASN1ApplicationSpecific_getInstanceWithId_([seq getObjectAtWithInt:[seq size] - 1]))) getContents];
  }
  else {
    OrgSpongycastleAsn1EacCVCertificateRequest_initCertBodyWithOrgSpongycastleAsn1ASN1ApplicationSpecific_(self, request);
  }
}

OrgSpongycastleAsn1EacCVCertificateRequest *new_OrgSpongycastleAsn1EacCVCertificateRequest_initWithOrgSpongycastleAsn1ASN1ApplicationSpecific_(OrgSpongycastleAsn1ASN1ApplicationSpecific *request) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1EacCVCertificateRequest, initWithOrgSpongycastleAsn1ASN1ApplicationSpecific_, request)
}

OrgSpongycastleAsn1EacCVCertificateRequest *create_OrgSpongycastleAsn1EacCVCertificateRequest_initWithOrgSpongycastleAsn1ASN1ApplicationSpecific_(OrgSpongycastleAsn1ASN1ApplicationSpecific *request) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1EacCVCertificateRequest, initWithOrgSpongycastleAsn1ASN1ApplicationSpecific_, request)
}

void OrgSpongycastleAsn1EacCVCertificateRequest_initCertBodyWithOrgSpongycastleAsn1ASN1ApplicationSpecific_(OrgSpongycastleAsn1EacCVCertificateRequest *self, OrgSpongycastleAsn1ASN1ApplicationSpecific *request) {
  if ([((OrgSpongycastleAsn1ASN1ApplicationSpecific *) nil_chk(request)) getApplicationTag] == OrgSpongycastleAsn1EacEACTags_CARDHOLDER_CERTIFICATE) {
    jint valid = 0;
    OrgSpongycastleAsn1ASN1Sequence *seq = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_([request getObjectWithInt:OrgSpongycastleAsn1BERTags_SEQUENCE]);
    for (id<JavaUtilEnumeration> en = [((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjects]; [((id<JavaUtilEnumeration>) nil_chk(en)) hasMoreElements]; ) {
      OrgSpongycastleAsn1ASN1ApplicationSpecific *obj = OrgSpongycastleAsn1ASN1ApplicationSpecific_getInstanceWithId_([en nextElement]);
      switch ([((OrgSpongycastleAsn1ASN1ApplicationSpecific *) nil_chk(obj)) getApplicationTag]) {
        case OrgSpongycastleAsn1EacEACTags_CERTIFICATE_CONTENT_TEMPLATE:
        self->certificateBody_ = OrgSpongycastleAsn1EacCertificateBody_getInstanceWithId_(obj);
        valid |= OrgSpongycastleAsn1EacCVCertificateRequest_bodyValid;
        break;
        case OrgSpongycastleAsn1EacEACTags_STATIC_INTERNAL_AUTHENTIFICATION_ONE_STEP:
        self->innerSignature_ = [obj getContents];
        valid |= OrgSpongycastleAsn1EacCVCertificateRequest_signValid;
        break;
        default:
        @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Invalid tag, not an CV Certificate Request element:", [obj getApplicationTag]));
      }
    }
    if ((valid & (OrgSpongycastleAsn1EacCVCertificateRequest_bodyValid | OrgSpongycastleAsn1EacCVCertificateRequest_signValid)) == 0) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Invalid CARDHOLDER_CERTIFICATE in request:", [request getApplicationTag]));
    }
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"not a CARDHOLDER_CERTIFICATE in request:", [request getApplicationTag]));
  }
}

OrgSpongycastleAsn1EacCVCertificateRequest *OrgSpongycastleAsn1EacCVCertificateRequest_getInstanceWithId_(id obj) {
  OrgSpongycastleAsn1EacCVCertificateRequest_initialize();
  if ([obj isKindOfClass:[OrgSpongycastleAsn1EacCVCertificateRequest class]]) {
    return (OrgSpongycastleAsn1EacCVCertificateRequest *) obj;
  }
  else if (obj != nil) {
    @try {
      return new_OrgSpongycastleAsn1EacCVCertificateRequest_initWithOrgSpongycastleAsn1ASN1ApplicationSpecific_(OrgSpongycastleAsn1ASN1ApplicationSpecific_getInstanceWithId_(obj));
    }
    @catch (JavaIoIOException *e) {
      @throw new_OrgSpongycastleAsn1ASN1ParsingException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"unable to parse data: ", [e getMessage]), e);
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleAsn1EacCVCertificateRequest)
