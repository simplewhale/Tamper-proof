//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/generators/SCrypt.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/PBEParametersGenerator.h"
#include "org/spongycastle/crypto/digests/SHA256Digest.h"
#include "org/spongycastle/crypto/engines/Salsa20Engine.h"
#include "org/spongycastle/crypto/generators/PKCS5S2ParametersGenerator.h"
#include "org/spongycastle/crypto/generators/SCrypt.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/Pack.h"

@interface OrgSpongycastleCryptoGeneratorsSCrypt ()

+ (IOSByteArray *)MFcryptWithByteArray:(IOSByteArray *)P
                         withByteArray:(IOSByteArray *)S
                               withInt:(jint)N
                               withInt:(jint)r
                               withInt:(jint)p
                               withInt:(jint)dkLen;

+ (IOSByteArray *)SingleIterationPBKDF2WithByteArray:(IOSByteArray *)P
                                       withByteArray:(IOSByteArray *)S
                                             withInt:(jint)dkLen;

+ (void)SMixWithIntArray:(IOSIntArray *)B
                 withInt:(jint)BOff
                 withInt:(jint)N
                 withInt:(jint)r;

+ (void)BlockMixWithIntArray:(IOSIntArray *)B
                withIntArray:(IOSIntArray *)X1
                withIntArray:(IOSIntArray *)X2
                withIntArray:(IOSIntArray *)Y
                     withInt:(jint)r;

+ (void)XorWithIntArray:(IOSIntArray *)a
           withIntArray:(IOSIntArray *)b
                withInt:(jint)bOff
           withIntArray:(IOSIntArray *)output;

+ (void)ClearWithByteArray:(IOSByteArray *)array;

+ (void)ClearWithIntArray:(IOSIntArray *)array;

+ (void)ClearAllWithIntArray2:(IOSObjectArray *)arrays;

@end

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoGeneratorsSCrypt_MFcryptWithByteArray_withByteArray_withInt_withInt_withInt_withInt_(IOSByteArray *P, IOSByteArray *S, jint N, jint r, jint p, jint dkLen);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoGeneratorsSCrypt_SingleIterationPBKDF2WithByteArray_withByteArray_withInt_(IOSByteArray *P, IOSByteArray *S, jint dkLen);

__attribute__((unused)) static void OrgSpongycastleCryptoGeneratorsSCrypt_SMixWithIntArray_withInt_withInt_withInt_(IOSIntArray *B, jint BOff, jint N, jint r);

__attribute__((unused)) static void OrgSpongycastleCryptoGeneratorsSCrypt_BlockMixWithIntArray_withIntArray_withIntArray_withIntArray_withInt_(IOSIntArray *B, IOSIntArray *X1, IOSIntArray *X2, IOSIntArray *Y, jint r);

__attribute__((unused)) static void OrgSpongycastleCryptoGeneratorsSCrypt_XorWithIntArray_withIntArray_withInt_withIntArray_(IOSIntArray *a, IOSIntArray *b, jint bOff, IOSIntArray *output);

__attribute__((unused)) static void OrgSpongycastleCryptoGeneratorsSCrypt_ClearWithByteArray_(IOSByteArray *array);

__attribute__((unused)) static void OrgSpongycastleCryptoGeneratorsSCrypt_ClearWithIntArray_(IOSIntArray *array);

__attribute__((unused)) static void OrgSpongycastleCryptoGeneratorsSCrypt_ClearAllWithIntArray2_(IOSObjectArray *arrays);

@implementation OrgSpongycastleCryptoGeneratorsSCrypt

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoGeneratorsSCrypt_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)generateWithByteArray:(IOSByteArray *)P
                          withByteArray:(IOSByteArray *)S
                                withInt:(jint)N
                                withInt:(jint)r
                                withInt:(jint)p
                                withInt:(jint)dkLen {
  return OrgSpongycastleCryptoGeneratorsSCrypt_generateWithByteArray_withByteArray_withInt_withInt_withInt_withInt_(P, S, N, r, p, dkLen);
}

+ (IOSByteArray *)MFcryptWithByteArray:(IOSByteArray *)P
                         withByteArray:(IOSByteArray *)S
                               withInt:(jint)N
                               withInt:(jint)r
                               withInt:(jint)p
                               withInt:(jint)dkLen {
  return OrgSpongycastleCryptoGeneratorsSCrypt_MFcryptWithByteArray_withByteArray_withInt_withInt_withInt_withInt_(P, S, N, r, p, dkLen);
}

+ (IOSByteArray *)SingleIterationPBKDF2WithByteArray:(IOSByteArray *)P
                                       withByteArray:(IOSByteArray *)S
                                             withInt:(jint)dkLen {
  return OrgSpongycastleCryptoGeneratorsSCrypt_SingleIterationPBKDF2WithByteArray_withByteArray_withInt_(P, S, dkLen);
}

+ (void)SMixWithIntArray:(IOSIntArray *)B
                 withInt:(jint)BOff
                 withInt:(jint)N
                 withInt:(jint)r {
  OrgSpongycastleCryptoGeneratorsSCrypt_SMixWithIntArray_withInt_withInt_withInt_(B, BOff, N, r);
}

+ (void)BlockMixWithIntArray:(IOSIntArray *)B
                withIntArray:(IOSIntArray *)X1
                withIntArray:(IOSIntArray *)X2
                withIntArray:(IOSIntArray *)Y
                     withInt:(jint)r {
  OrgSpongycastleCryptoGeneratorsSCrypt_BlockMixWithIntArray_withIntArray_withIntArray_withIntArray_withInt_(B, X1, X2, Y, r);
}

+ (void)XorWithIntArray:(IOSIntArray *)a
           withIntArray:(IOSIntArray *)b
                withInt:(jint)bOff
           withIntArray:(IOSIntArray *)output {
  OrgSpongycastleCryptoGeneratorsSCrypt_XorWithIntArray_withIntArray_withInt_withIntArray_(a, b, bOff, output);
}

+ (void)ClearWithByteArray:(IOSByteArray *)array {
  OrgSpongycastleCryptoGeneratorsSCrypt_ClearWithByteArray_(array);
}

+ (void)ClearWithIntArray:(IOSIntArray *)array {
  OrgSpongycastleCryptoGeneratorsSCrypt_ClearWithIntArray_(array);
}

+ (void)ClearAllWithIntArray2:(IOSObjectArray *)arrays {
  OrgSpongycastleCryptoGeneratorsSCrypt_ClearAllWithIntArray2_(arrays);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 11, 13, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateWithByteArray:withByteArray:withInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(MFcryptWithByteArray:withByteArray:withInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(SingleIterationPBKDF2WithByteArray:withByteArray:withInt:);
  methods[4].selector = @selector(SMixWithIntArray:withInt:withInt:withInt:);
  methods[5].selector = @selector(BlockMixWithIntArray:withIntArray:withIntArray:withIntArray:withInt:);
  methods[6].selector = @selector(XorWithIntArray:withIntArray:withInt:withIntArray:);
  methods[7].selector = @selector(ClearWithByteArray:);
  methods[8].selector = @selector(ClearWithIntArray:);
  methods[9].selector = @selector(ClearAllWithIntArray2:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "generate", "[B[BIIII", "MFcrypt", "SingleIterationPBKDF2", "[B[BI", "SMix", "[IIII", "BlockMix", "[I[I[I[II", "Xor", "[I[II[I", "Clear", "[B", "[I", "ClearAll", "[[I" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoGeneratorsSCrypt = { "SCrypt", "org.spongycastle.crypto.generators", ptrTable, methods, NULL, 7, 0x1, 10, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoGeneratorsSCrypt;
}

@end

void OrgSpongycastleCryptoGeneratorsSCrypt_init(OrgSpongycastleCryptoGeneratorsSCrypt *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoGeneratorsSCrypt *new_OrgSpongycastleCryptoGeneratorsSCrypt_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoGeneratorsSCrypt, init)
}

OrgSpongycastleCryptoGeneratorsSCrypt *create_OrgSpongycastleCryptoGeneratorsSCrypt_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoGeneratorsSCrypt, init)
}

IOSByteArray *OrgSpongycastleCryptoGeneratorsSCrypt_generateWithByteArray_withByteArray_withInt_withInt_withInt_withInt_(IOSByteArray *P, IOSByteArray *S, jint N, jint r, jint p, jint dkLen) {
  OrgSpongycastleCryptoGeneratorsSCrypt_initialize();
  if (P == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Passphrase P must be provided.");
  }
  if (S == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Salt S must be provided.");
  }
  if (N <= 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cost parameter N must be > 1.");
  }
  if (r == 1 && N > 65536) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Cost parameter N must be > 1 and < 65536.");
  }
  if (r < 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Block size r must be >= 1.");
  }
  jint maxParallel = JavaLangInteger_MAX_VALUE / (128 * r * 8);
  if (p < 1 || p > maxParallel) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"Parallelisation parameter p must be >= 1 and <= ", maxParallel, @" (based on block size r of ", r, ')'));
  }
  if (dkLen < 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Generated key length dkLen must be >= 1.");
  }
  return OrgSpongycastleCryptoGeneratorsSCrypt_MFcryptWithByteArray_withByteArray_withInt_withInt_withInt_withInt_(P, S, N, r, p, dkLen);
}

IOSByteArray *OrgSpongycastleCryptoGeneratorsSCrypt_MFcryptWithByteArray_withByteArray_withInt_withInt_withInt_withInt_(IOSByteArray *P, IOSByteArray *S, jint N, jint r, jint p, jint dkLen) {
  OrgSpongycastleCryptoGeneratorsSCrypt_initialize();
  jint MFLenBytes = r * 128;
  IOSByteArray *bytes = OrgSpongycastleCryptoGeneratorsSCrypt_SingleIterationPBKDF2WithByteArray_withByteArray_withInt_(P, S, p * MFLenBytes);
  IOSIntArray *B = nil;
  @try {
    jint BLen = JreURShift32(((IOSByteArray *) nil_chk(bytes))->size_, 2);
    B = [IOSIntArray newArrayWithLength:BLen];
    OrgSpongycastleUtilPack_littleEndianToIntWithByteArray_withInt_withIntArray_(bytes, 0, B);
    jint MFLenWords = JreURShift32(MFLenBytes, 2);
    for (jint BOff = 0; BOff < BLen; BOff += MFLenWords) {
      OrgSpongycastleCryptoGeneratorsSCrypt_SMixWithIntArray_withInt_withInt_withInt_(B, BOff, N, r);
    }
    OrgSpongycastleUtilPack_intToLittleEndianWithIntArray_withByteArray_withInt_(B, bytes, 0);
    return OrgSpongycastleCryptoGeneratorsSCrypt_SingleIterationPBKDF2WithByteArray_withByteArray_withInt_(P, bytes, dkLen);
  }
  @finally {
    OrgSpongycastleCryptoGeneratorsSCrypt_ClearWithByteArray_(bytes);
    OrgSpongycastleCryptoGeneratorsSCrypt_ClearWithIntArray_(B);
  }
}

IOSByteArray *OrgSpongycastleCryptoGeneratorsSCrypt_SingleIterationPBKDF2WithByteArray_withByteArray_withInt_(IOSByteArray *P, IOSByteArray *S, jint dkLen) {
  OrgSpongycastleCryptoGeneratorsSCrypt_initialize();
  OrgSpongycastleCryptoPBEParametersGenerator *pGen = new_OrgSpongycastleCryptoGeneratorsPKCS5S2ParametersGenerator_initWithOrgSpongycastleCryptoDigest_(new_OrgSpongycastleCryptoDigestsSHA256Digest_init());
  [pGen init__WithByteArray:P withByteArray:S withInt:1];
  OrgSpongycastleCryptoParamsKeyParameter *key = (OrgSpongycastleCryptoParamsKeyParameter *) cast_chk([pGen generateDerivedMacParametersWithInt:dkLen * 8], [OrgSpongycastleCryptoParamsKeyParameter class]);
  return [((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(key)) getKey];
}

void OrgSpongycastleCryptoGeneratorsSCrypt_SMixWithIntArray_withInt_withInt_withInt_(IOSIntArray *B, jint BOff, jint N, jint r) {
  OrgSpongycastleCryptoGeneratorsSCrypt_initialize();
  jint BCount = r * 32;
  IOSIntArray *blockX1 = [IOSIntArray newArrayWithLength:16];
  IOSIntArray *blockX2 = [IOSIntArray newArrayWithLength:16];
  IOSIntArray *blockY = [IOSIntArray newArrayWithLength:BCount];
  IOSIntArray *X = [IOSIntArray newArrayWithLength:BCount];
  IOSObjectArray *V = [IOSObjectArray newArrayWithLength:N type:IOSClass_intArray(1)];
  @try {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(B, BOff, X, 0, BCount);
    for (jint i = 0; i < N; ++i) {
      (void) IOSObjectArray_Set(V, i, OrgSpongycastleUtilArrays_cloneWithIntArray_(X));
      OrgSpongycastleCryptoGeneratorsSCrypt_BlockMixWithIntArray_withIntArray_withIntArray_withIntArray_withInt_(X, blockX1, blockX2, blockY, r);
    }
    jint mask = N - 1;
    for (jint i = 0; i < N; ++i) {
      jint j = IOSIntArray_Get(X, BCount - 16) & mask;
      OrgSpongycastleCryptoGeneratorsSCrypt_XorWithIntArray_withIntArray_withInt_withIntArray_(X, IOSObjectArray_Get(V, j), 0, X);
      OrgSpongycastleCryptoGeneratorsSCrypt_BlockMixWithIntArray_withIntArray_withIntArray_withIntArray_withInt_(X, blockX1, blockX2, blockY, r);
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(X, 0, B, BOff, BCount);
  }
  @finally {
    OrgSpongycastleCryptoGeneratorsSCrypt_ClearAllWithIntArray2_(V);
    OrgSpongycastleCryptoGeneratorsSCrypt_ClearAllWithIntArray2_([IOSObjectArray newArrayWithObjects:(id[]){ X, blockX1, blockX2, blockY } count:4 type:IOSClass_intArray(1)]);
  }
}

void OrgSpongycastleCryptoGeneratorsSCrypt_BlockMixWithIntArray_withIntArray_withIntArray_withIntArray_withInt_(IOSIntArray *B, IOSIntArray *X1, IOSIntArray *X2, IOSIntArray *Y, jint r) {
  OrgSpongycastleCryptoGeneratorsSCrypt_initialize();
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(B, ((IOSIntArray *) nil_chk(B))->size_ - 16, X1, 0, 16);
  jint BOff = 0;
  jint YOff = 0;
  jint halfLen = JreURShift32(B->size_, 1);
  for (jint i = 2 * r; i > 0; --i) {
    OrgSpongycastleCryptoGeneratorsSCrypt_XorWithIntArray_withIntArray_withInt_withIntArray_(X1, B, BOff, X2);
    OrgSpongycastleCryptoEnginesSalsa20Engine_salsaCoreWithInt_withIntArray_withIntArray_(8, X2, X1);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(X1, 0, Y, YOff, 16);
    YOff = halfLen + BOff - YOff;
    BOff += 16;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(Y, 0, B, 0, ((IOSIntArray *) nil_chk(Y))->size_);
}

void OrgSpongycastleCryptoGeneratorsSCrypt_XorWithIntArray_withIntArray_withInt_withIntArray_(IOSIntArray *a, IOSIntArray *b, jint bOff, IOSIntArray *output) {
  OrgSpongycastleCryptoGeneratorsSCrypt_initialize();
  for (jint i = ((IOSIntArray *) nil_chk(output))->size_ - 1; i >= 0; --i) {
    *IOSIntArray_GetRef(output, i) = IOSIntArray_Get(nil_chk(a), i) ^ IOSIntArray_Get(nil_chk(b), bOff + i);
  }
}

void OrgSpongycastleCryptoGeneratorsSCrypt_ClearWithByteArray_(IOSByteArray *array) {
  OrgSpongycastleCryptoGeneratorsSCrypt_initialize();
  if (array != nil) {
    OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(array, (jbyte) 0);
  }
}

void OrgSpongycastleCryptoGeneratorsSCrypt_ClearWithIntArray_(IOSIntArray *array) {
  OrgSpongycastleCryptoGeneratorsSCrypt_initialize();
  if (array != nil) {
    OrgSpongycastleUtilArrays_fillWithIntArray_withInt_(array, 0);
  }
}

void OrgSpongycastleCryptoGeneratorsSCrypt_ClearAllWithIntArray2_(IOSObjectArray *arrays) {
  OrgSpongycastleCryptoGeneratorsSCrypt_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(arrays))->size_; ++i) {
    OrgSpongycastleCryptoGeneratorsSCrypt_ClearWithIntArray_(IOSObjectArray_Get(arrays, i));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoGeneratorsSCrypt)
