//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/generators/ECKeyPairGenerator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoGeneratorsECKeyPairGenerator")
#ifdef RESTRICT_OrgSpongycastleCryptoGeneratorsECKeyPairGenerator
#define INCLUDE_ALL_OrgSpongycastleCryptoGeneratorsECKeyPairGenerator 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoGeneratorsECKeyPairGenerator 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoGeneratorsECKeyPairGenerator

#if !defined (OrgSpongycastleCryptoGeneratorsECKeyPairGenerator_) && (INCLUDE_ALL_OrgSpongycastleCryptoGeneratorsECKeyPairGenerator || defined(INCLUDE_OrgSpongycastleCryptoGeneratorsECKeyPairGenerator))
#define OrgSpongycastleCryptoGeneratorsECKeyPairGenerator_

#define RESTRICT_OrgSpongycastleCryptoAsymmetricCipherKeyPairGenerator 1
#define INCLUDE_OrgSpongycastleCryptoAsymmetricCipherKeyPairGenerator 1
#include "org/spongycastle/crypto/AsymmetricCipherKeyPairGenerator.h"

#define RESTRICT_OrgSpongycastleMathEcECConstants 1
#define INCLUDE_OrgSpongycastleMathEcECConstants 1
#include "org/spongycastle/math/ec/ECConstants.h"

@class JavaSecuritySecureRandom;
@class OrgSpongycastleCryptoAsymmetricCipherKeyPair;
@class OrgSpongycastleCryptoKeyGenerationParameters;
@class OrgSpongycastleCryptoParamsECDomainParameters;
@protocol OrgSpongycastleMathEcECMultiplier;

@interface OrgSpongycastleCryptoGeneratorsECKeyPairGenerator : NSObject < OrgSpongycastleCryptoAsymmetricCipherKeyPairGenerator, OrgSpongycastleMathEcECConstants > {
 @public
  OrgSpongycastleCryptoParamsECDomainParameters *params_;
  JavaSecuritySecureRandom *random_;
}

#pragma mark Public

- (instancetype)init;

- (OrgSpongycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair;

- (void)init__WithOrgSpongycastleCryptoKeyGenerationParameters:(OrgSpongycastleCryptoKeyGenerationParameters *)param OBJC_METHOD_FAMILY_NONE;

#pragma mark Protected

- (id<OrgSpongycastleMathEcECMultiplier>)createBasePointMultiplier;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoGeneratorsECKeyPairGenerator)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoGeneratorsECKeyPairGenerator, params_, OrgSpongycastleCryptoParamsECDomainParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoGeneratorsECKeyPairGenerator, random_, JavaSecuritySecureRandom *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoGeneratorsECKeyPairGenerator_init(OrgSpongycastleCryptoGeneratorsECKeyPairGenerator *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoGeneratorsECKeyPairGenerator *new_OrgSpongycastleCryptoGeneratorsECKeyPairGenerator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoGeneratorsECKeyPairGenerator *create_OrgSpongycastleCryptoGeneratorsECKeyPairGenerator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoGeneratorsECKeyPairGenerator)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoGeneratorsECKeyPairGenerator")
