//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/generators/HKDFBytesGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/DerivationParameters.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/generators/HKDFBytesGenerator.h"
#include "org/spongycastle/crypto/macs/HMac.h"
#include "org/spongycastle/crypto/params/HKDFParameters.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"

@interface OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator () {
 @public
  OrgSpongycastleCryptoMacsHMac *hMacHash_;
  jint hashLen_;
  IOSByteArray *info_;
  IOSByteArray *currentT_;
  jint generatedBytes_;
}

- (OrgSpongycastleCryptoParamsKeyParameter *)extractWithByteArray:(IOSByteArray *)salt
                                                    withByteArray:(IOSByteArray *)ikm;

- (void)expandNext;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator, hMacHash_, OrgSpongycastleCryptoMacsHMac *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator, info_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator, currentT_, IOSByteArray *)

__attribute__((unused)) static OrgSpongycastleCryptoParamsKeyParameter *OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator_extractWithByteArray_withByteArray_(OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator *self, IOSByteArray *salt, IOSByteArray *ikm);

__attribute__((unused)) static void OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator_expandNext(OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator *self);

@implementation OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hash_ {
  OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator_initWithOrgSpongycastleCryptoDigest_(self, hash_);
  return self;
}

- (void)init__WithOrgSpongycastleCryptoDerivationParameters:(id<OrgSpongycastleCryptoDerivationParameters>)param {
  if (!([param isKindOfClass:[OrgSpongycastleCryptoParamsHKDFParameters class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"HKDF parameters required for HKDFBytesGenerator");
  }
  OrgSpongycastleCryptoParamsHKDFParameters *params = (OrgSpongycastleCryptoParamsHKDFParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsHKDFParameters class]);
  if ([((OrgSpongycastleCryptoParamsHKDFParameters *) nil_chk(params)) skipExtract]) {
    [((OrgSpongycastleCryptoMacsHMac *) nil_chk(hMacHash_)) init__WithOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_([params getIKM])];
  }
  else {
    [((OrgSpongycastleCryptoMacsHMac *) nil_chk(hMacHash_)) init__WithOrgSpongycastleCryptoCipherParameters:OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator_extractWithByteArray_withByteArray_(self, [params getSalt], [params getIKM])];
  }
  info_ = [params getInfo];
  generatedBytes_ = 0;
  currentT_ = [IOSByteArray newArrayWithLength:hashLen_];
}

- (OrgSpongycastleCryptoParamsKeyParameter *)extractWithByteArray:(IOSByteArray *)salt
                                                    withByteArray:(IOSByteArray *)ikm {
  return OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator_extractWithByteArray_withByteArray_(self, salt, ikm);
}

- (void)expandNext {
  OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator_expandNext(self);
}

- (id<OrgSpongycastleCryptoDigest>)getDigest {
  return [((OrgSpongycastleCryptoMacsHMac *) nil_chk(hMacHash_)) getUnderlyingDigest];
}

- (jint)generateBytesWithByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                           withInt:(jint)len {
  if (generatedBytes_ + len > 255 * hashLen_) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"HKDF may only be used for 255 * HashLen bytes of output");
  }
  if (generatedBytes_ % hashLen_ == 0) {
    OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator_expandNext(self);
  }
  jint toGenerate = len;
  jint posInT = generatedBytes_ % hashLen_;
  jint leftInT = hashLen_ - generatedBytes_ % hashLen_;
  jint toCopy = JavaLangMath_minWithInt_withInt_(leftInT, toGenerate);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(currentT_, posInT, outArg, outOff, toCopy);
  generatedBytes_ += toCopy;
  toGenerate -= toCopy;
  outOff += toCopy;
  while (toGenerate > 0) {
    OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator_expandNext(self);
    toCopy = JavaLangMath_minWithInt_withInt_(hashLen_, toGenerate);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(currentT_, 0, outArg, outOff, toCopy);
    generatedBytes_ += toCopy;
    toGenerate -= toCopy;
    outOff += toCopy;
  }
  return len;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsKeyParameter;", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 5, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, 8, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoDerivationParameters:);
  methods[2].selector = @selector(extractWithByteArray:withByteArray:);
  methods[3].selector = @selector(expandNext);
  methods[4].selector = @selector(getDigest);
  methods[5].selector = @selector(generateBytesWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hMacHash_", "LOrgSpongycastleCryptoMacsHMac;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashLen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "info_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentT_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "generatedBytes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDigest;", "init", "LOrgSpongycastleCryptoDerivationParameters;", "extract", "[B[B", "LOrgSpongycastleCryptoDataLengthException;", "generateBytes", "[BII", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalArgumentException;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator = { "HKDFBytesGenerator", "org.spongycastle.crypto.generators", ptrTable, methods, fields, 7, 0x1, 6, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator;
}

@end

void OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator_initWithOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator *self, id<OrgSpongycastleCryptoDigest> hash_) {
  NSObject_init(self);
  self->hMacHash_ = new_OrgSpongycastleCryptoMacsHMac_initWithOrgSpongycastleCryptoDigest_(hash_);
  self->hashLen_ = [((id<OrgSpongycastleCryptoDigest>) nil_chk(hash_)) getDigestSize];
}

OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator *new_OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> hash_) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator, initWithOrgSpongycastleCryptoDigest_, hash_)
}

OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator *create_OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> hash_) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator, initWithOrgSpongycastleCryptoDigest_, hash_)
}

OrgSpongycastleCryptoParamsKeyParameter *OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator_extractWithByteArray_withByteArray_(OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator *self, IOSByteArray *salt, IOSByteArray *ikm) {
  if (salt == nil) {
    [((OrgSpongycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) init__WithOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_([IOSByteArray newArrayWithLength:self->hashLen_])];
  }
  else {
    [((OrgSpongycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) init__WithOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_(salt)];
  }
  [((OrgSpongycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) updateWithByteArray:ikm withInt:0 withInt:((IOSByteArray *) nil_chk(ikm))->size_];
  IOSByteArray *prk = [IOSByteArray newArrayWithLength:self->hashLen_];
  [((OrgSpongycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) doFinalWithByteArray:prk withInt:0];
  return new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_(prk);
}

void OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator_expandNext(OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator *self) {
  jint n = self->generatedBytes_ / self->hashLen_ + 1;
  if (n >= 256) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"HKDF cannot generate more than 255 blocks of HashLen size");
  }
  if (self->generatedBytes_ != 0) {
    [((OrgSpongycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) updateWithByteArray:self->currentT_ withInt:0 withInt:self->hashLen_];
  }
  [((OrgSpongycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) updateWithByteArray:self->info_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->info_))->size_];
  [((OrgSpongycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) updateWithByte:(jbyte) n];
  [((OrgSpongycastleCryptoMacsHMac *) nil_chk(self->hMacHash_)) doFinalWithByteArray:self->currentT_ withInt:0];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoGeneratorsHKDFBytesGenerator)
