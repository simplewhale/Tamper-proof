//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/generators/KDFFeedbackBytesGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/DerivationParameters.h"
#include "org/spongycastle/crypto/Mac.h"
#include "org/spongycastle/crypto/generators/KDFFeedbackBytesGenerator.h"
#include "org/spongycastle/crypto/params/KDFFeedbackParameters.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"

@interface OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator () {
 @public
  id<OrgSpongycastleCryptoMac> prf_;
  jint h_;
  IOSByteArray *fixedInputData_;
  jint maxSizeExcl_;
  IOSByteArray *ios_;
  IOSByteArray *iv_;
  jboolean useCounter_;
  jint generatedBytes_;
  IOSByteArray *k_;
}

- (void)generateNext;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator, prf_, id<OrgSpongycastleCryptoMac>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator, fixedInputData_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator, ios_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator, iv_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator, k_, IOSByteArray *)

inline JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_get_INTEGER_MAX(void);
static JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_INTEGER_MAX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator, INTEGER_MAX, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_get_TWO(void);
static JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator, TWO, JavaMathBigInteger *)

__attribute__((unused)) static void OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_generateNext(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator *self);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator)

@implementation OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator

- (instancetype)initWithOrgSpongycastleCryptoMac:(id<OrgSpongycastleCryptoMac>)prf {
  OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_initWithOrgSpongycastleCryptoMac_(self, prf);
  return self;
}

- (void)init__WithOrgSpongycastleCryptoDerivationParameters:(id<OrgSpongycastleCryptoDerivationParameters>)params {
  if (!([params isKindOfClass:[OrgSpongycastleCryptoParamsKDFFeedbackParameters class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Wrong type of arguments given");
  }
  OrgSpongycastleCryptoParamsKDFFeedbackParameters *feedbackParams = (OrgSpongycastleCryptoParamsKDFFeedbackParameters *) cast_chk(params, [OrgSpongycastleCryptoParamsKDFFeedbackParameters class]);
  [((id<OrgSpongycastleCryptoMac>) nil_chk(self->prf_)) init__WithOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_([((OrgSpongycastleCryptoParamsKDFFeedbackParameters *) nil_chk(feedbackParams)) getKI])];
  self->fixedInputData_ = [feedbackParams getFixedInputData];
  jint r = [feedbackParams getR];
  self->ios_ = [IOSByteArray newArrayWithLength:r / 8];
  if ([feedbackParams useCounter]) {
    JavaMathBigInteger *maxSize = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_TWO)) powWithInt:r])) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(h_)];
    self->maxSizeExcl_ = [((JavaMathBigInteger *) nil_chk(maxSize)) compareToWithId:OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_INTEGER_MAX] == 1 ? JavaLangInteger_MAX_VALUE : [maxSize intValue];
  }
  else {
    self->maxSizeExcl_ = JavaLangInteger_MAX_VALUE;
  }
  self->iv_ = [feedbackParams getIV];
  self->useCounter_ = [feedbackParams useCounter];
  generatedBytes_ = 0;
}

- (id<OrgSpongycastleCryptoMac>)getMac {
  return prf_;
}

- (jint)generateBytesWithByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                           withInt:(jint)len {
  jint generatedBytesAfter = generatedBytes_ + len;
  if (generatedBytesAfter < 0 || generatedBytesAfter >= maxSizeExcl_) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(JreStrcat("$I$", @"Current KDFCTR may only be used for ", maxSizeExcl_, @" bytes"));
  }
  if (generatedBytes_ % h_ == 0) {
    OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_generateNext(self);
  }
  jint toGenerate = len;
  jint posInK = generatedBytes_ % h_;
  jint leftInK = h_ - generatedBytes_ % h_;
  jint toCopy = JavaLangMath_minWithInt_withInt_(leftInK, toGenerate);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(k_, posInK, outArg, outOff, toCopy);
  generatedBytes_ += toCopy;
  toGenerate -= toCopy;
  outOff += toCopy;
  while (toGenerate > 0) {
    OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_generateNext(self);
    toCopy = JavaLangMath_minWithInt_withInt_(h_, toGenerate);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(k_, 0, outArg, outOff, toCopy);
    generatedBytes_ += toCopy;
    toGenerate -= toCopy;
    outOff += toCopy;
  }
  return len;
}

- (void)generateNext {
  OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_generateNext(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoMac;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoMac:);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoDerivationParameters:);
  methods[2].selector = @selector(getMac);
  methods[3].selector = @selector(generateBytesWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(generateNext);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INTEGER_MAX", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "TWO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "prf_", "LOrgSpongycastleCryptoMac;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "h_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fixedInputData_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxSizeExcl_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ios_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iv_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useCounter_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "generatedBytes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoMac;", "init", "LOrgSpongycastleCryptoDerivationParameters;", "generateBytes", "[BII", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalArgumentException;", &OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_INTEGER_MAX, &OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_TWO };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator = { "KDFFeedbackBytesGenerator", "org.spongycastle.crypto.generators", ptrTable, methods, fields, 7, 0x1, 5, 11, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator class]) {
    OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_INTEGER_MAX = JavaMathBigInteger_valueOfWithLong_(JavaLangInteger_MAX_VALUE);
    OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_TWO = JavaMathBigInteger_valueOfWithLong_(2);
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator)
  }
}

@end

void OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_initWithOrgSpongycastleCryptoMac_(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator *self, id<OrgSpongycastleCryptoMac> prf) {
  NSObject_init(self);
  self->prf_ = prf;
  self->h_ = [((id<OrgSpongycastleCryptoMac>) nil_chk(prf)) getMacSize];
  self->k_ = [IOSByteArray newArrayWithLength:self->h_];
}

OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator *new_OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_initWithOrgSpongycastleCryptoMac_(id<OrgSpongycastleCryptoMac> prf) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator, initWithOrgSpongycastleCryptoMac_, prf)
}

OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator *create_OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_initWithOrgSpongycastleCryptoMac_(id<OrgSpongycastleCryptoMac> prf) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator, initWithOrgSpongycastleCryptoMac_, prf)
}

void OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator_generateNext(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator *self) {
  if (self->generatedBytes_ == 0) {
    [((id<OrgSpongycastleCryptoMac>) nil_chk(self->prf_)) updateWithByteArray:self->iv_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->iv_))->size_];
  }
  else {
    [((id<OrgSpongycastleCryptoMac>) nil_chk(self->prf_)) updateWithByteArray:self->k_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->k_))->size_];
  }
  if (self->useCounter_) {
    jint i = self->generatedBytes_ / self->h_ + 1;
    switch (((IOSByteArray *) nil_chk(self->ios_))->size_) {
      case 4:
      *IOSByteArray_GetRef(self->ios_, 0) = (jbyte) (JreURShift32(i, 24));
      case 3:
      *IOSByteArray_GetRef(self->ios_, self->ios_->size_ - 3) = (jbyte) (JreURShift32(i, 16));
      case 2:
      *IOSByteArray_GetRef(self->ios_, self->ios_->size_ - 2) = (jbyte) (JreURShift32(i, 8));
      case 1:
      *IOSByteArray_GetRef(self->ios_, self->ios_->size_ - 1) = (jbyte) i;
      break;
      default:
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Unsupported size of counter i");
    }
    [self->prf_ updateWithByteArray:self->ios_ withInt:0 withInt:self->ios_->size_];
  }
  [self->prf_ updateWithByteArray:self->fixedInputData_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->fixedInputData_))->size_];
  [self->prf_ doFinalWithByteArray:self->k_ withInt:0];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoGeneratorsKDFFeedbackBytesGenerator)
