//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/generators/DSAParametersGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/digests/SHA1Digest.h"
#include "org/spongycastle/crypto/generators/DSAParametersGenerator.h"
#include "org/spongycastle/crypto/params/DSAParameterGenerationParameters.h"
#include "org/spongycastle/crypto/params/DSAParameters.h"
#include "org/spongycastle/crypto/params/DSAValidationParameters.h"
#include "org/spongycastle/crypto/util/DigestFactory.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/BigIntegers.h"
#include "org/spongycastle/util/encoders/Hex.h"

@interface OrgSpongycastleCryptoGeneratorsDSAParametersGenerator () {
 @public
  id<OrgSpongycastleCryptoDigest> digest_;
  jint L_;
  jint N_;
  jint certainty_;
  jint iterations_;
  JavaSecuritySecureRandom *random_;
  jboolean use186_3_;
  jint usageIndex_;
}

- (OrgSpongycastleCryptoParamsDSAParameters *)generateParameters_FIPS186_2;

+ (JavaMathBigInteger *)calculateGenerator_FIPS186_2WithJavaMathBigInteger:(JavaMathBigInteger *)p
                                                    withJavaMathBigInteger:(JavaMathBigInteger *)q
                                              withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r;

- (OrgSpongycastleCryptoParamsDSAParameters *)generateParameters_FIPS186_3;

- (jboolean)isProbablePrimeWithJavaMathBigInteger:(JavaMathBigInteger *)x;

+ (JavaMathBigInteger *)calculateGenerator_FIPS186_3_UnverifiableWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                                                 withJavaMathBigInteger:(JavaMathBigInteger *)q
                                                           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r;

+ (JavaMathBigInteger *)calculateGenerator_FIPS186_3_VerifiableWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)d
                                                                        withJavaMathBigInteger:(JavaMathBigInteger *)p
                                                                        withJavaMathBigInteger:(JavaMathBigInteger *)q
                                                                                 withByteArray:(IOSByteArray *)seed
                                                                                       withInt:(jint)index;

+ (void)hash__WithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)d
                                withByteArray:(IOSByteArray *)input
                                withByteArray:(IOSByteArray *)output
                                      withInt:(jint)outputPos;

+ (jint)getDefaultNWithInt:(jint)L;

+ (jint)getMinimumIterationsWithInt:(jint)L;

+ (void)incWithByteArray:(IOSByteArray *)buf;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator, digest_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator, random_, JavaSecuritySecureRandom *)

inline JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_get_ZERO(void);
static JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator, ZERO, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_get_ONE(void);
static JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator, ONE, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_get_TWO(void);
static JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator, TWO, JavaMathBigInteger *)

__attribute__((unused)) static OrgSpongycastleCryptoParamsDSAParameters *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_generateParameters_FIPS186_2(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator *self);

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_calculateGenerator_FIPS186_2WithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaSecuritySecureRandom *r);

__attribute__((unused)) static OrgSpongycastleCryptoParamsDSAParameters *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_generateParameters_FIPS186_3(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator *self);

__attribute__((unused)) static jboolean OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_isProbablePrimeWithJavaMathBigInteger_(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator *self, JavaMathBigInteger *x);

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_calculateGenerator_FIPS186_3_UnverifiableWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaSecuritySecureRandom *r);

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_calculateGenerator_FIPS186_3_VerifiableWithOrgSpongycastleCryptoDigest_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_withInt_(id<OrgSpongycastleCryptoDigest> d, JavaMathBigInteger *p, JavaMathBigInteger *q, IOSByteArray *seed, jint index);

__attribute__((unused)) static void OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_hash__WithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withInt_(id<OrgSpongycastleCryptoDigest> d, IOSByteArray *input, IOSByteArray *output, jint outputPos);

__attribute__((unused)) static jint OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_getDefaultNWithInt_(jint L);

__attribute__((unused)) static jint OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_getMinimumIterationsWithInt_(jint L);

__attribute__((unused)) static void OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_incWithByteArray_(IOSByteArray *buf);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator)

@implementation OrgSpongycastleCryptoGeneratorsDSAParametersGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_initWithOrgSpongycastleCryptoDigest_(self, digest);
  return self;
}

- (void)init__WithInt:(jint)size
              withInt:(jint)certainty
withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->L_ = size;
  self->N_ = OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_getDefaultNWithInt_(size);
  self->certainty_ = certainty;
  self->iterations_ = JavaLangMath_maxWithInt_withInt_(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_getMinimumIterationsWithInt_(L_), (certainty + 1) / 2);
  self->random_ = random;
  self->use186_3_ = false;
  self->usageIndex_ = -1;
}

- (void)init__WithOrgSpongycastleCryptoParamsDSAParameterGenerationParameters:(OrgSpongycastleCryptoParamsDSAParameterGenerationParameters *)params {
  jint L = [((OrgSpongycastleCryptoParamsDSAParameterGenerationParameters *) nil_chk(params)) getL];
  jint N = [params getN];
  if ((L < 1024 || L > 3072) || L % 1024 != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"L values must be between 1024 and 3072 and a multiple of 1024");
  }
  else if (L == 1024 && N != 160) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"N must be 160 for L = 1024");
  }
  else if (L == 2048 && (N != 224 && N != 256)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"N must be 224 or 256 for L = 2048");
  }
  else if (L == 3072 && N != 256) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"N must be 256 for L = 3072");
  }
  if ([((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize] * 8 < N) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Digest output size too small for value of N");
  }
  self->L_ = L;
  self->N_ = N;
  self->certainty_ = [params getCertainty];
  self->iterations_ = JavaLangMath_maxWithInt_withInt_(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_getMinimumIterationsWithInt_(L), (certainty_ + 1) / 2);
  self->random_ = [params getRandom];
  self->use186_3_ = true;
  self->usageIndex_ = [params getUsageIndex];
}

- (OrgSpongycastleCryptoParamsDSAParameters *)generateParameters {
  return (use186_3_) ? OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_generateParameters_FIPS186_3(self) : OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_generateParameters_FIPS186_2(self);
}

- (OrgSpongycastleCryptoParamsDSAParameters *)generateParameters_FIPS186_2 {
  return OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_generateParameters_FIPS186_2(self);
}

+ (JavaMathBigInteger *)calculateGenerator_FIPS186_2WithJavaMathBigInteger:(JavaMathBigInteger *)p
                                                    withJavaMathBigInteger:(JavaMathBigInteger *)q
                                              withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r {
  return OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_calculateGenerator_FIPS186_2WithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(p, q, r);
}

- (OrgSpongycastleCryptoParamsDSAParameters *)generateParameters_FIPS186_3 {
  return OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_generateParameters_FIPS186_3(self);
}

- (jboolean)isProbablePrimeWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_isProbablePrimeWithJavaMathBigInteger_(self, x);
}

+ (JavaMathBigInteger *)calculateGenerator_FIPS186_3_UnverifiableWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                                                 withJavaMathBigInteger:(JavaMathBigInteger *)q
                                                           withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r {
  return OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_calculateGenerator_FIPS186_3_UnverifiableWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(p, q, r);
}

+ (JavaMathBigInteger *)calculateGenerator_FIPS186_3_VerifiableWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)d
                                                                        withJavaMathBigInteger:(JavaMathBigInteger *)p
                                                                        withJavaMathBigInteger:(JavaMathBigInteger *)q
                                                                                 withByteArray:(IOSByteArray *)seed
                                                                                       withInt:(jint)index {
  return OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_calculateGenerator_FIPS186_3_VerifiableWithOrgSpongycastleCryptoDigest_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_withInt_(d, p, q, seed, index);
}

+ (void)hash__WithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)d
                                withByteArray:(IOSByteArray *)input
                                withByteArray:(IOSByteArray *)output
                                      withInt:(jint)outputPos {
  OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_hash__WithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withInt_(d, input, output, outputPos);
}

+ (jint)getDefaultNWithInt:(jint)L {
  return OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_getDefaultNWithInt_(L);
}

+ (jint)getMinimumIterationsWithInt:(jint)L {
  return OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_getMinimumIterationsWithInt_(L);
}

+ (void)incWithByteArray:(IOSByteArray *)buf {
  OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_incWithByteArray_(buf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsDSAParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsDSAParameters;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsDSAParameters;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 8, 5, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoDigest:);
  methods[2].selector = @selector(init__WithInt:withInt:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(init__WithOrgSpongycastleCryptoParamsDSAParameterGenerationParameters:);
  methods[4].selector = @selector(generateParameters);
  methods[5].selector = @selector(generateParameters_FIPS186_2);
  methods[6].selector = @selector(calculateGenerator_FIPS186_2WithJavaMathBigInteger:withJavaMathBigInteger:withJavaSecuritySecureRandom:);
  methods[7].selector = @selector(generateParameters_FIPS186_3);
  methods[8].selector = @selector(isProbablePrimeWithJavaMathBigInteger:);
  methods[9].selector = @selector(calculateGenerator_FIPS186_3_UnverifiableWithJavaMathBigInteger:withJavaMathBigInteger:withJavaSecuritySecureRandom:);
  methods[10].selector = @selector(calculateGenerator_FIPS186_3_VerifiableWithOrgSpongycastleCryptoDigest:withJavaMathBigInteger:withJavaMathBigInteger:withByteArray:withInt:);
  methods[11].selector = @selector(hash__WithOrgSpongycastleCryptoDigest:withByteArray:withByteArray:withInt:);
  methods[12].selector = @selector(getDefaultNWithInt:);
  methods[13].selector = @selector(getMinimumIterationsWithInt:);
  methods[14].selector = @selector(incWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "TWO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "digest_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "L_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "N_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certainty_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iterations_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "use186_3_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "usageIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDigest;", "init", "IILJavaSecuritySecureRandom;", "LOrgSpongycastleCryptoParamsDSAParameterGenerationParameters;", "calculateGenerator_FIPS186_2", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaSecuritySecureRandom;", "isProbablePrime", "LJavaMathBigInteger;", "calculateGenerator_FIPS186_3_Unverifiable", "calculateGenerator_FIPS186_3_Verifiable", "LOrgSpongycastleCryptoDigest;LJavaMathBigInteger;LJavaMathBigInteger;[BI", "hash", "LOrgSpongycastleCryptoDigest;[B[BI", "getDefaultN", "I", "getMinimumIterations", "inc", "[B", &OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_ZERO, &OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_ONE, &OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_TWO };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoGeneratorsDSAParametersGenerator = { "DSAParametersGenerator", "org.spongycastle.crypto.generators", ptrTable, methods, fields, 7, 0x1, 15, 11, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoGeneratorsDSAParametersGenerator;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoGeneratorsDSAParametersGenerator class]) {
    OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_ZERO = JavaMathBigInteger_valueOfWithLong_(0);
    OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_TWO = JavaMathBigInteger_valueOfWithLong_(2);
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator)
  }
}

@end

void OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_init(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator *self) {
  OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_initWithOrgSpongycastleCryptoDigest_(self, OrgSpongycastleCryptoUtilDigestFactory_createSHA1());
}

OrgSpongycastleCryptoGeneratorsDSAParametersGenerator *new_OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator, init)
}

OrgSpongycastleCryptoGeneratorsDSAParametersGenerator *create_OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator, init)
}

void OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_initWithOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator *self, id<OrgSpongycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->digest_ = digest;
}

OrgSpongycastleCryptoGeneratorsDSAParametersGenerator *new_OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator, initWithOrgSpongycastleCryptoDigest_, digest)
}

OrgSpongycastleCryptoGeneratorsDSAParametersGenerator *create_OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator, initWithOrgSpongycastleCryptoDigest_, digest)
}

OrgSpongycastleCryptoParamsDSAParameters *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_generateParameters_FIPS186_2(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator *self) {
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:20];
  IOSByteArray *part1 = [IOSByteArray newArrayWithLength:20];
  IOSByteArray *part2 = [IOSByteArray newArrayWithLength:20];
  IOSByteArray *u = [IOSByteArray newArrayWithLength:20];
  jint n = (self->L_ - 1) / 160;
  IOSByteArray *w = [IOSByteArray newArrayWithLength:self->L_ / 8];
  if (!([self->digest_ isKindOfClass:[OrgSpongycastleCryptoDigestsSHA1Digest class]])) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"can only use SHA-1 for generating FIPS 186-2 parameters");
  }
  for (; ; ) {
    [((JavaSecuritySecureRandom *) nil_chk(self->random_)) nextBytesWithByteArray:seed];
    OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_hash__WithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withInt_(self->digest_, seed, part1, 0);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(seed, 0, part2, 0, seed->size_);
    OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_incWithByteArray_(part2);
    OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_hash__WithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withInt_(self->digest_, part2, part2, 0);
    for (jint i = 0; i != u->size_; i++) {
      *IOSByteArray_GetRef(u, i) = (jbyte) (IOSByteArray_Get(part1, i) ^ IOSByteArray_Get(part2, i));
    }
    *IOSByteArray_GetRef(u, 0) |= (jbyte) (jint) 0x80;
    *IOSByteArray_GetRef(u, 19) |= (jbyte) (jint) 0x01;
    JavaMathBigInteger *q = new_JavaMathBigInteger_initWithInt_withByteArray_(1, u);
    if (!OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_isProbablePrimeWithJavaMathBigInteger_(self, q)) {
      continue;
    }
    IOSByteArray *offset = OrgSpongycastleUtilArrays_cloneWithByteArray_(seed);
    OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_incWithByteArray_(offset);
    for (jint counter = 0; counter < 4096; ++counter) {
      {
        for (jint k = 1; k <= n; k++) {
          OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_incWithByteArray_(offset);
          OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_hash__WithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withInt_(self->digest_, offset, w, w->size_ - k * part1->size_);
        }
        jint remaining = w->size_ - (n * part1->size_);
        OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_incWithByteArray_(offset);
        OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_hash__WithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withInt_(self->digest_, offset, part1, 0);
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(part1, part1->size_ - remaining, w, 0, remaining);
        *IOSByteArray_GetRef(w, 0) |= (jbyte) (jint) 0x80;
      }
      JavaMathBigInteger *x = new_JavaMathBigInteger_initWithInt_withByteArray_(1, w);
      JavaMathBigInteger *c = [x modWithJavaMathBigInteger:[q shiftLeftWithInt:1]];
      JavaMathBigInteger *p = [x subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(c)) subtractWithJavaMathBigInteger:OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_ONE]];
      if ([((JavaMathBigInteger *) nil_chk(p)) bitLength] != self->L_) {
        continue;
      }
      if (OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_isProbablePrimeWithJavaMathBigInteger_(self, p)) {
        JavaMathBigInteger *g = OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_calculateGenerator_FIPS186_2WithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(p, q, self->random_);
        return new_OrgSpongycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoParamsDSAValidationParameters_(p, q, g, new_OrgSpongycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_(seed, counter));
      }
    }
  }
}

JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_calculateGenerator_FIPS186_2WithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaSecuritySecureRandom *r) {
  OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_initialize();
  JavaMathBigInteger *e = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(p)) subtractWithJavaMathBigInteger:OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_ONE])) divideWithJavaMathBigInteger:q];
  JavaMathBigInteger *pSub2 = [p subtractWithJavaMathBigInteger:OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_TWO];
  for (; ; ) {
    JavaMathBigInteger *h = OrgSpongycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_TWO, pSub2, r);
    JavaMathBigInteger *g = [((JavaMathBigInteger *) nil_chk(h)) modPowWithJavaMathBigInteger:e withJavaMathBigInteger:p];
    if ([((JavaMathBigInteger *) nil_chk(g)) bitLength] > 1) {
      return g;
    }
  }
}

OrgSpongycastleCryptoParamsDSAParameters *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_generateParameters_FIPS186_3(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator *self) {
  id<OrgSpongycastleCryptoDigest> d = self->digest_;
  jint outlen = [((id<OrgSpongycastleCryptoDigest>) nil_chk(d)) getDigestSize] * 8;
  jint seedlen = self->N_;
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:seedlen / 8];
  jint n = (self->L_ - 1) / outlen;
  jint b = (self->L_ - 1) % outlen;
  IOSByteArray *w = [IOSByteArray newArrayWithLength:self->L_ / 8];
  IOSByteArray *output = [IOSByteArray newArrayWithLength:[d getDigestSize]];
  for (; ; ) {
    [((JavaSecuritySecureRandom *) nil_chk(self->random_)) nextBytesWithByteArray:seed];
    OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_hash__WithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withInt_(d, seed, output, 0);
    JavaMathBigInteger *U = [new_JavaMathBigInteger_initWithInt_withByteArray_(1, output) modWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_ONE)) shiftLeftWithInt:self->N_ - 1]];
    JavaMathBigInteger *q = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(U)) setBitWithInt:0])) setBitWithInt:self->N_ - 1];
    if (!OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_isProbablePrimeWithJavaMathBigInteger_(self, q)) {
      continue;
    }
    IOSByteArray *offset = OrgSpongycastleUtilArrays_cloneWithByteArray_(seed);
    jint counterLimit = 4 * self->L_;
    for (jint counter = 0; counter < counterLimit; ++counter) {
      {
        for (jint j = 1; j <= n; ++j) {
          OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_incWithByteArray_(offset);
          OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_hash__WithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withInt_(d, offset, w, w->size_ - j * output->size_);
        }
        jint remaining = w->size_ - (n * output->size_);
        OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_incWithByteArray_(offset);
        OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_hash__WithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withInt_(d, offset, output, 0);
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(output, output->size_ - remaining, w, 0, remaining);
        *IOSByteArray_GetRef(w, 0) |= (jbyte) (jint) 0x80;
      }
      JavaMathBigInteger *X = new_JavaMathBigInteger_initWithInt_withByteArray_(1, w);
      JavaMathBigInteger *c = [X modWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(q)) shiftLeftWithInt:1]];
      JavaMathBigInteger *p = [X subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(c)) subtractWithJavaMathBigInteger:OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_ONE]];
      if ([((JavaMathBigInteger *) nil_chk(p)) bitLength] != self->L_) {
        continue;
      }
      if (OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_isProbablePrimeWithJavaMathBigInteger_(self, p)) {
        if (self->usageIndex_ >= 0) {
          JavaMathBigInteger *g = OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_calculateGenerator_FIPS186_3_VerifiableWithOrgSpongycastleCryptoDigest_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_withInt_(d, p, q, seed, self->usageIndex_);
          if (g != nil) {
            return new_OrgSpongycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoParamsDSAValidationParameters_(p, q, g, new_OrgSpongycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_withInt_(seed, counter, self->usageIndex_));
          }
        }
        JavaMathBigInteger *g = OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_calculateGenerator_FIPS186_3_UnverifiableWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(p, q, self->random_);
        return new_OrgSpongycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoParamsDSAValidationParameters_(p, q, g, new_OrgSpongycastleCryptoParamsDSAValidationParameters_initWithByteArray_withInt_(seed, counter));
      }
    }
  }
}

jboolean OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_isProbablePrimeWithJavaMathBigInteger_(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator *self, JavaMathBigInteger *x) {
  return [((JavaMathBigInteger *) nil_chk(x)) isProbablePrimeWithInt:self->certainty_];
}

JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_calculateGenerator_FIPS186_3_UnverifiableWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaSecuritySecureRandom *r) {
  OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_initialize();
  return OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_calculateGenerator_FIPS186_2WithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(p, q, r);
}

JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_calculateGenerator_FIPS186_3_VerifiableWithOrgSpongycastleCryptoDigest_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_withInt_(id<OrgSpongycastleCryptoDigest> d, JavaMathBigInteger *p, JavaMathBigInteger *q, IOSByteArray *seed, jint index) {
  OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_initialize();
  JavaMathBigInteger *e = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(p)) subtractWithJavaMathBigInteger:OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_ONE])) divideWithJavaMathBigInteger:q];
  IOSByteArray *ggen = OrgSpongycastleUtilEncodersHex_decodeWithNSString_(@"6767656E");
  IOSByteArray *U = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(seed))->size_ + ((IOSByteArray *) nil_chk(ggen))->size_ + 1 + 2];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(seed, 0, U, 0, seed->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ggen, 0, U, seed->size_, ggen->size_);
  *IOSByteArray_GetRef(U, U->size_ - 3) = (jbyte) index;
  IOSByteArray *w = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(d)) getDigestSize]];
  for (jint count = 1; count < (JreLShift32(1, 16)); ++count) {
    OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_incWithByteArray_(U);
    OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_hash__WithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withInt_(d, U, w, 0);
    JavaMathBigInteger *W = new_JavaMathBigInteger_initWithInt_withByteArray_(1, w);
    JavaMathBigInteger *g = [W modPowWithJavaMathBigInteger:e withJavaMathBigInteger:p];
    if ([((JavaMathBigInteger *) nil_chk(g)) compareToWithId:OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_TWO] >= 0) {
      return g;
    }
  }
  return nil;
}

void OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_hash__WithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withInt_(id<OrgSpongycastleCryptoDigest> d, IOSByteArray *input, IOSByteArray *output, jint outputPos) {
  OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_initialize();
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(d)) updateWithByteArray:input withInt:0 withInt:((IOSByteArray *) nil_chk(input))->size_];
  [d doFinalWithByteArray:output withInt:outputPos];
}

jint OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_getDefaultNWithInt_(jint L) {
  OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_initialize();
  return L > 1024 ? 256 : 160;
}

jint OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_getMinimumIterationsWithInt_(jint L) {
  OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_initialize();
  return L <= 1024 ? 40 : (48 + 8 * ((L - 1) / 1024));
}

void OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_incWithByteArray_(IOSByteArray *buf) {
  OrgSpongycastleCryptoGeneratorsDSAParametersGenerator_initialize();
  for (jint i = ((IOSByteArray *) nil_chk(buf))->size_ - 1; i >= 0; --i) {
    jbyte b = (jbyte) ((IOSByteArray_Get(buf, i) + 1) & (jint) 0xff);
    *IOSByteArray_GetRef(buf, i) = b;
    if (b != 0) {
      break;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoGeneratorsDSAParametersGenerator)
