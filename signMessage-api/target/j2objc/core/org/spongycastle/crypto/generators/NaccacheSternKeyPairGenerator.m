//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/generators/NaccacheSternKeyPairGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "java/util/Vector.h"
#include "org/spongycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/spongycastle/crypto/KeyGenerationParameters.h"
#include "org/spongycastle/crypto/generators/NaccacheSternKeyPairGenerator.h"
#include "org/spongycastle/crypto/params/NaccacheSternKeyGenerationParameters.h"
#include "org/spongycastle/crypto/params/NaccacheSternKeyParameters.h"
#include "org/spongycastle/crypto/params/NaccacheSternPrivateKeyParameters.h"

@interface OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator () {
 @public
  OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters *param_;
}

+ (JavaMathBigInteger *)generatePrimeWithInt:(jint)bitLength
                                     withInt:(jint)certainty
                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand;

+ (JavaUtilVector *)permuteListWithJavaUtilVector:(JavaUtilVector *)arr
                     withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand;

+ (jint)getIntWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand
                                   withInt:(jint)n;

+ (JavaUtilVector *)findFirstPrimesWithInt:(jint)count;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator, param_, OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters *)

inline IOSIntArray *OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_get_smallPrimes(void);
inline IOSIntArray *OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_set_smallPrimes(IOSIntArray *value);
static IOSIntArray *OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_smallPrimes;
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator, smallPrimes, IOSIntArray *)

inline JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_get_ONE(void);
static JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator, ONE, JavaMathBigInteger *)

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_generatePrimeWithInt_withInt_withJavaSecuritySecureRandom_(jint bitLength, jint certainty, JavaSecuritySecureRandom *rand);

__attribute__((unused)) static JavaUtilVector *OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_permuteListWithJavaUtilVector_withJavaSecuritySecureRandom_(JavaUtilVector *arr, JavaSecuritySecureRandom *rand);

__attribute__((unused)) static jint OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_getIntWithJavaSecuritySecureRandom_withInt_(JavaSecuritySecureRandom *rand, jint n);

__attribute__((unused)) static JavaUtilVector *OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_findFirstPrimesWithInt_(jint count);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator)

@implementation OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithOrgSpongycastleCryptoKeyGenerationParameters:(OrgSpongycastleCryptoKeyGenerationParameters *)param {
  self->param_ = (OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters class]);
}

- (OrgSpongycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  jint strength = [((OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters *) nil_chk(param_)) getStrength];
  JavaSecuritySecureRandom *rand = [((OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters *) nil_chk(param_)) getRandom];
  jint certainty = [((OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters *) nil_chk(param_)) getCertainty];
  jboolean debug = [((OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters *) nil_chk(param_)) isDebug];
  if (debug) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$", @"Fetching first ", [((OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters *) nil_chk(param_)) getCntSmallPrimes], @" primes.")];
  }
  JavaUtilVector *smallPrimes = OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_findFirstPrimesWithInt_([((OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters *) nil_chk(param_)) getCntSmallPrimes]);
  smallPrimes = OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_permuteListWithJavaUtilVector_withJavaSecuritySecureRandom_(smallPrimes, rand);
  JavaMathBigInteger *u = OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE;
  JavaMathBigInteger *v = OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE;
  for (jint i = 0; i < [((JavaUtilVector *) nil_chk(smallPrimes)) size] / 2; i++) {
    u = [((JavaMathBigInteger *) nil_chk(u)) multiplyWithJavaMathBigInteger:(JavaMathBigInteger *) cast_chk([smallPrimes elementAtWithInt:i], [JavaMathBigInteger class])];
  }
  for (jint i = [smallPrimes size] / 2; i < [smallPrimes size]; i++) {
    v = [((JavaMathBigInteger *) nil_chk(v)) multiplyWithJavaMathBigInteger:(JavaMathBigInteger *) cast_chk([smallPrimes elementAtWithInt:i], [JavaMathBigInteger class])];
  }
  JavaMathBigInteger *sigma = [((JavaMathBigInteger *) nil_chk(u)) multiplyWithJavaMathBigInteger:v];
  jint remainingStrength = strength - [((JavaMathBigInteger *) nil_chk(sigma)) bitLength] - 48;
  JavaMathBigInteger *a = OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_generatePrimeWithInt_withInt_withJavaSecuritySecureRandom_(remainingStrength / 2 + 1, certainty, rand);
  JavaMathBigInteger *b = OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_generatePrimeWithInt_withInt_withJavaSecuritySecureRandom_(remainingStrength / 2 + 1, certainty, rand);
  JavaMathBigInteger *p_;
  JavaMathBigInteger *q_;
  JavaMathBigInteger *p;
  JavaMathBigInteger *q;
  jlong tries = 0;
  if (debug) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"generating p and q"];
  }
  JavaMathBigInteger *_2au = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(a)) multiplyWithJavaMathBigInteger:u])) shiftLeftWithInt:1];
  JavaMathBigInteger *_2bv = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(b)) multiplyWithJavaMathBigInteger:v])) shiftLeftWithInt:1];
  for (; ; ) {
    tries++;
    p_ = OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_generatePrimeWithInt_withInt_withJavaSecuritySecureRandom_(24, certainty, rand);
    p = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(p_)) multiplyWithJavaMathBigInteger:_2au])) addWithJavaMathBigInteger:OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE];
    if (![((JavaMathBigInteger *) nil_chk(p)) isProbablePrimeWithInt:certainty]) {
      continue;
    }
    for (; ; ) {
      q_ = OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_generatePrimeWithInt_withInt_withJavaSecuritySecureRandom_(24, certainty, rand);
      if ([p_ isEqual:q_]) {
        continue;
      }
      q = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(q_)) multiplyWithJavaMathBigInteger:_2bv])) addWithJavaMathBigInteger:OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE];
      if ([((JavaMathBigInteger *) nil_chk(q)) isProbablePrimeWithInt:certainty]) {
        break;
      }
    }
    if (![((JavaMathBigInteger *) nil_chk([sigma gcdWithJavaMathBigInteger:[p_ multiplyWithJavaMathBigInteger:q_]])) isEqual:OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE]) {
      continue;
    }
    if ([((JavaMathBigInteger *) nil_chk([p multiplyWithJavaMathBigInteger:q])) bitLength] < strength) {
      if (debug) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I", @"key size too small. Should be ", strength, @" but is actually ", [((JavaMathBigInteger *) nil_chk([p multiplyWithJavaMathBigInteger:q])) bitLength])];
      }
      continue;
    }
    break;
  }
  if (debug) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$J$", @"needed ", tries, @" tries to generate p and q.")];
  }
  JavaMathBigInteger *n = [p multiplyWithJavaMathBigInteger:q];
  JavaMathBigInteger *phi_n = [((JavaMathBigInteger *) nil_chk([p subtractWithJavaMathBigInteger:OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE])) multiplyWithJavaMathBigInteger:[q subtractWithJavaMathBigInteger:OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE]];
  JavaMathBigInteger *g;
  tries = 0;
  if (debug) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"generating g"];
  }
  for (; ; ) {
    JavaUtilVector *gParts = new_JavaUtilVector_init();
    for (jint ind = 0; ind != [smallPrimes size]; ind++) {
      JavaMathBigInteger *i = (JavaMathBigInteger *) cast_chk([smallPrimes elementAtWithInt:ind], [JavaMathBigInteger class]);
      JavaMathBigInteger *e = [((JavaMathBigInteger *) nil_chk(phi_n)) divideWithJavaMathBigInteger:i];
      for (; ; ) {
        tries++;
        g = new_JavaMathBigInteger_initWithInt_withInt_withJavaUtilRandom_(strength, certainty, rand);
        if ([((JavaMathBigInteger *) nil_chk([g modPowWithJavaMathBigInteger:e withJavaMathBigInteger:n])) isEqual:OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE]) {
          continue;
        }
        [gParts addElementWithId:g];
        break;
      }
    }
    g = OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE;
    for (jint i = 0; i < [smallPrimes size]; i++) {
      g = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(g)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(((JavaMathBigInteger *) cast_chk([gParts elementAtWithInt:i], [JavaMathBigInteger class])))) modPowWithJavaMathBigInteger:[sigma divideWithJavaMathBigInteger:(JavaMathBigInteger *) cast_chk([smallPrimes elementAtWithInt:i], [JavaMathBigInteger class])] withJavaMathBigInteger:n]])) modWithJavaMathBigInteger:n];
    }
    jboolean divisible = false;
    for (jint i = 0; i < [smallPrimes size]; i++) {
      if ([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(g)) modPowWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(phi_n)) divideWithJavaMathBigInteger:(JavaMathBigInteger *) cast_chk([smallPrimes elementAtWithInt:i], [JavaMathBigInteger class])] withJavaMathBigInteger:n])) isEqual:OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE]) {
        if (debug) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@$@", @"g has order phi(n)/", [smallPrimes elementAtWithInt:i], @"\n g: ", g)];
        }
        divisible = true;
        break;
      }
    }
    if (divisible) {
      continue;
    }
    if ([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(g)) modPowWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(phi_n)) divideWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(4)] withJavaMathBigInteger:n])) isEqual:OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE]) {
      if (debug) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"g has order phi(n)/4\n g:", g)];
      }
      continue;
    }
    if ([((JavaMathBigInteger *) nil_chk([g modPowWithJavaMathBigInteger:[phi_n divideWithJavaMathBigInteger:p_] withJavaMathBigInteger:n])) isEqual:OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE]) {
      if (debug) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"g has order phi(n)/p'\n g: ", g)];
      }
      continue;
    }
    if ([((JavaMathBigInteger *) nil_chk([g modPowWithJavaMathBigInteger:[phi_n divideWithJavaMathBigInteger:q_] withJavaMathBigInteger:n])) isEqual:OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE]) {
      if (debug) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"g has order phi(n)/q'\n g: ", g)];
      }
      continue;
    }
    if ([((JavaMathBigInteger *) nil_chk([g modPowWithJavaMathBigInteger:[phi_n divideWithJavaMathBigInteger:a] withJavaMathBigInteger:n])) isEqual:OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE]) {
      if (debug) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"g has order phi(n)/a\n g: ", g)];
      }
      continue;
    }
    if ([((JavaMathBigInteger *) nil_chk([g modPowWithJavaMathBigInteger:[phi_n divideWithJavaMathBigInteger:b] withJavaMathBigInteger:n])) isEqual:OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE]) {
      if (debug) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"g has order phi(n)/b\n g: ", g)];
      }
      continue;
    }
    break;
  }
  if (debug) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$J$", @"needed ", tries, @" tries to generate g")];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) println];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"found new NaccacheStern cipher variables:"];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"smallPrimes: ", smallPrimes)];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@$I$", @"sigma:...... ", sigma, @" (", [sigma bitLength], @" bits)")];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"a:.......... ", a)];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"b:.......... ", b)];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"p':......... ", p_)];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"q':......... ", q_)];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"p:.......... ", p)];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"q:.......... ", q)];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"n:.......... ", n)];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"phi(n):..... ", phi_n)];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"g:.......... ", g)];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) println];
  }
  return new_OrgSpongycastleCryptoAsymmetricCipherKeyPair_initWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(new_OrgSpongycastleCryptoParamsNaccacheSternKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_withInt_(false, g, n, [sigma bitLength]), new_OrgSpongycastleCryptoParamsNaccacheSternPrivateKeyParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withInt_withJavaUtilVector_withJavaMathBigInteger_(g, n, [sigma bitLength], smallPrimes, phi_n));
}

+ (JavaMathBigInteger *)generatePrimeWithInt:(jint)bitLength
                                     withInt:(jint)certainty
                withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand {
  return OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_generatePrimeWithInt_withInt_withJavaSecuritySecureRandom_(bitLength, certainty, rand);
}

+ (JavaUtilVector *)permuteListWithJavaUtilVector:(JavaUtilVector *)arr
                     withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand {
  return OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_permuteListWithJavaUtilVector_withJavaSecuritySecureRandom_(arr, rand);
}

+ (jint)getIntWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)rand
                                   withInt:(jint)n {
  return OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_getIntWithJavaSecuritySecureRandom_withInt_(rand, n);
}

+ (JavaUtilVector *)findFirstPrimesWithInt:(jint)count {
  return OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_findFirstPrimesWithInt_(count);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0xa, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  methods[3].selector = @selector(generatePrimeWithInt:withInt:withJavaSecuritySecureRandom:);
  methods[4].selector = @selector(permuteListWithJavaUtilVector:withJavaSecuritySecureRandom:);
  methods[5].selector = @selector(getIntWithJavaSecuritySecureRandom:withInt:);
  methods[6].selector = @selector(findFirstPrimesWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "smallPrimes", "[I", .constantValue.asLong = 0, 0xa, -1, 10, -1, -1 },
    { "param_", "LOrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LOrgSpongycastleCryptoKeyGenerationParameters;", "generatePrime", "IILJavaSecuritySecureRandom;", "permuteList", "LJavaUtilVector;LJavaSecuritySecureRandom;", "getInt", "LJavaSecuritySecureRandom;I", "findFirstPrimes", "I", &OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_smallPrimes, &OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator = { "NaccacheSternKeyPairGenerator", "org.spongycastle.crypto.generators", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator class]) {
    OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_smallPrimes = [IOSIntArray newArrayWithInts:(jint[]){ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557 } count:101];
    OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator)
  }
}

@end

void OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_init(OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator *new_OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator, init)
}

OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator *create_OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator, init)
}

JavaMathBigInteger *OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_generatePrimeWithInt_withInt_withJavaSecuritySecureRandom_(jint bitLength, jint certainty, JavaSecuritySecureRandom *rand) {
  OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_initialize();
  JavaMathBigInteger *p_ = new_JavaMathBigInteger_initWithInt_withInt_withJavaUtilRandom_(bitLength, certainty, rand);
  while ([p_ bitLength] != bitLength) {
    p_ = new_JavaMathBigInteger_initWithInt_withInt_withJavaUtilRandom_(bitLength, certainty, rand);
  }
  return p_;
}

JavaUtilVector *OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_permuteListWithJavaUtilVector_withJavaSecuritySecureRandom_(JavaUtilVector *arr, JavaSecuritySecureRandom *rand) {
  OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_initialize();
  JavaUtilVector *retval = new_JavaUtilVector_init();
  JavaUtilVector *tmp = new_JavaUtilVector_init();
  for (jint i = 0; i < [((JavaUtilVector *) nil_chk(arr)) size]; i++) {
    [tmp addElementWithId:[arr elementAtWithInt:i]];
  }
  [retval addElementWithId:[tmp elementAtWithInt:0]];
  [tmp removeElementAtWithInt:0];
  while ([tmp size] != 0) {
    [retval insertElementAtWithId:[tmp elementAtWithInt:0] withInt:OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_getIntWithJavaSecuritySecureRandom_withInt_(rand, [retval size] + 1)];
    [tmp removeElementAtWithInt:0];
  }
  return retval;
}

jint OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_getIntWithJavaSecuritySecureRandom_withInt_(JavaSecuritySecureRandom *rand, jint n) {
  OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_initialize();
  if ((n & -n) == n) {
    return (jint) (JreRShift64((n * (jlong) ([((JavaSecuritySecureRandom *) nil_chk(rand)) nextInt] & (jint) 0x7fffffff)), 31));
  }
  jint bits;
  jint val;
  do {
    bits = [((JavaSecuritySecureRandom *) nil_chk(rand)) nextInt] & (jint) 0x7fffffff;
    val = bits % n;
  }
  while (bits - val + (n - 1) < 0);
  return val;
}

JavaUtilVector *OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_findFirstPrimesWithInt_(jint count) {
  OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_initialize();
  JavaUtilVector *primes = new_JavaUtilVector_initWithInt_(count);
  for (jint i = 0; i != count; i++) {
    [primes addElementWithId:JavaMathBigInteger_valueOfWithLong_(IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator_smallPrimes), i))];
  }
  return primes;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoGeneratorsNaccacheSternKeyPairGenerator)
