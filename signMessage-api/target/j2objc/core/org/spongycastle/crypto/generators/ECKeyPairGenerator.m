//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/generators/ECKeyPairGenerator.java
//

#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/spongycastle/crypto/KeyGenerationParameters.h"
#include "org/spongycastle/crypto/generators/ECKeyPairGenerator.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECKeyGenerationParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/math/ec/ECConstants.h"
#include "org/spongycastle/math/ec/ECMultiplier.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/math/ec/FixedPointCombMultiplier.h"
#include "org/spongycastle/math/ec/WNafUtil.h"

@implementation OrgSpongycastleCryptoGeneratorsECKeyPairGenerator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoGeneratorsECKeyPairGenerator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithOrgSpongycastleCryptoKeyGenerationParameters:(OrgSpongycastleCryptoKeyGenerationParameters *)param {
  OrgSpongycastleCryptoParamsECKeyGenerationParameters *ecP = (OrgSpongycastleCryptoParamsECKeyGenerationParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsECKeyGenerationParameters class]);
  self->random_ = [((OrgSpongycastleCryptoParamsECKeyGenerationParameters *) nil_chk(ecP)) getRandom];
  self->params_ = [ecP getDomainParameters];
  if (self->random_ == nil) {
    self->random_ = new_JavaSecuritySecureRandom_init();
  }
}

- (OrgSpongycastleCryptoAsymmetricCipherKeyPair *)generateKeyPair {
  JavaMathBigInteger *n = [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(params_)) getN];
  jint nBitLength = [((JavaMathBigInteger *) nil_chk(n)) bitLength];
  jint minWeight = JreURShift32(nBitLength, 2);
  JavaMathBigInteger *d;
  for (; ; ) {
    d = new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(nBitLength, random_);
    if ([d compareToWithId:JreLoadStatic(OrgSpongycastleMathEcECConstants, TWO)] < 0 || ([d compareToWithId:n] >= 0)) {
      continue;
    }
    if (OrgSpongycastleMathEcWNafUtil_getNafWeightWithJavaMathBigInteger_(d) < minWeight) {
      continue;
    }
    break;
  }
  OrgSpongycastleMathEcECPoint *Q = [((id<OrgSpongycastleMathEcECMultiplier>) nil_chk([self createBasePointMultiplier])) multiplyWithOrgSpongycastleMathEcECPoint:[((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(params_)) getG] withJavaMathBigInteger:d];
  return new_OrgSpongycastleCryptoAsymmetricCipherKeyPair_initWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(new_OrgSpongycastleCryptoParamsECPublicKeyParameters_initWithOrgSpongycastleMathEcECPoint_withOrgSpongycastleCryptoParamsECDomainParameters_(Q, params_), new_OrgSpongycastleCryptoParamsECPrivateKeyParameters_initWithJavaMathBigInteger_withOrgSpongycastleCryptoParamsECDomainParameters_(d, params_));
}

- (id<OrgSpongycastleMathEcECMultiplier>)createBasePointMultiplier {
  return new_OrgSpongycastleMathEcFixedPointCombMultiplier_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoAsymmetricCipherKeyPair;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoKeyGenerationParameters:);
  methods[2].selector = @selector(generateKeyPair);
  methods[3].selector = @selector(createBasePointMultiplier);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "params_", "LOrgSpongycastleCryptoParamsECDomainParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LOrgSpongycastleCryptoKeyGenerationParameters;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoGeneratorsECKeyPairGenerator = { "ECKeyPairGenerator", "org.spongycastle.crypto.generators", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoGeneratorsECKeyPairGenerator;
}

@end

void OrgSpongycastleCryptoGeneratorsECKeyPairGenerator_init(OrgSpongycastleCryptoGeneratorsECKeyPairGenerator *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoGeneratorsECKeyPairGenerator *new_OrgSpongycastleCryptoGeneratorsECKeyPairGenerator_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoGeneratorsECKeyPairGenerator, init)
}

OrgSpongycastleCryptoGeneratorsECKeyPairGenerator *create_OrgSpongycastleCryptoGeneratorsECKeyPairGenerator_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoGeneratorsECKeyPairGenerator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoGeneratorsECKeyPairGenerator)
