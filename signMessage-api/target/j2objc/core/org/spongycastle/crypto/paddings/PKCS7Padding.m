//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/paddings/PKCS7Padding.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/InvalidCipherTextException.h"
#include "org/spongycastle/crypto/paddings/PKCS7Padding.h"

@implementation OrgSpongycastleCryptoPaddingsPKCS7Padding

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoPaddingsPKCS7Padding_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
}

- (NSString *)getPaddingName {
  return @"PKCS7";
}

- (jint)addPaddingWithByteArray:(IOSByteArray *)inArg
                        withInt:(jint)inOff {
  jbyte code = (jbyte) (((IOSByteArray *) nil_chk(inArg))->size_ - inOff);
  while (inOff < inArg->size_) {
    *IOSByteArray_GetRef(inArg, inOff) = code;
    inOff++;
  }
  return code;
}

- (jint)padCountWithByteArray:(IOSByteArray *)inArg {
  jint count = IOSByteArray_Get(inArg, ((IOSByteArray *) nil_chk(inArg))->size_ - 1) & (jint) 0xff;
  jbyte countAsbyte = (jbyte) count;
  jboolean failed = ((count > inArg->size_) | (count == 0));
  for (jint i = 0; i < inArg->size_; i++) {
    failed |= ((inArg->size_ - i <= count) & (IOSByteArray_Get(inArg, i) != countAsbyte));
  }
  if (failed) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"pad block corrupted");
  }
  return count;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithJavaSecuritySecureRandom:);
  methods[2].selector = @selector(getPaddingName);
  methods[3].selector = @selector(addPaddingWithByteArray:withInt:);
  methods[4].selector = @selector(padCountWithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "init", "LJavaSecuritySecureRandom;", "LJavaLangIllegalArgumentException;", "addPadding", "[BI", "padCount", "[B", "LOrgSpongycastleCryptoInvalidCipherTextException;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoPaddingsPKCS7Padding = { "PKCS7Padding", "org.spongycastle.crypto.paddings", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoPaddingsPKCS7Padding;
}

@end

void OrgSpongycastleCryptoPaddingsPKCS7Padding_init(OrgSpongycastleCryptoPaddingsPKCS7Padding *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoPaddingsPKCS7Padding *new_OrgSpongycastleCryptoPaddingsPKCS7Padding_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoPaddingsPKCS7Padding, init)
}

OrgSpongycastleCryptoPaddingsPKCS7Padding *create_OrgSpongycastleCryptoPaddingsPKCS7Padding_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoPaddingsPKCS7Padding, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoPaddingsPKCS7Padding)
