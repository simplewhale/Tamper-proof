//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/commitments/HashCommitter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/Commitment.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/ExtendedDigest.h"
#include "org/spongycastle/crypto/commitments/HashCommitter.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleCryptoCommitmentsHashCommitter () {
 @public
  id<OrgSpongycastleCryptoDigest> digest_;
  jint byteLength_;
  JavaSecuritySecureRandom *random_;
}

- (IOSByteArray *)calculateCommitmentWithByteArray:(IOSByteArray *)w
                                     withByteArray:(IOSByteArray *)message;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoCommitmentsHashCommitter, digest_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoCommitmentsHashCommitter, random_, JavaSecuritySecureRandom *)

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoCommitmentsHashCommitter_calculateCommitmentWithByteArray_withByteArray_(OrgSpongycastleCryptoCommitmentsHashCommitter *self, IOSByteArray *w, IOSByteArray *message);

@implementation OrgSpongycastleCryptoCommitmentsHashCommitter

- (instancetype)initWithOrgSpongycastleCryptoExtendedDigest:(id<OrgSpongycastleCryptoExtendedDigest>)digest
                               withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  OrgSpongycastleCryptoCommitmentsHashCommitter_initWithOrgSpongycastleCryptoExtendedDigest_withJavaSecuritySecureRandom_(self, digest, random);
  return self;
}

- (OrgSpongycastleCryptoCommitment *)commitWithByteArray:(IOSByteArray *)message {
  if (((IOSByteArray *) nil_chk(message))->size_ > byteLength_ / 2) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"Message to be committed to too large for digest.");
  }
  IOSByteArray *w = [IOSByteArray newArrayWithLength:byteLength_ - message->size_];
  [((JavaSecuritySecureRandom *) nil_chk(random_)) nextBytesWithByteArray:w];
  return new_OrgSpongycastleCryptoCommitment_initWithByteArray_withByteArray_(w, OrgSpongycastleCryptoCommitmentsHashCommitter_calculateCommitmentWithByteArray_withByteArray_(self, w, message));
}

- (jboolean)isRevealedWithOrgSpongycastleCryptoCommitment:(OrgSpongycastleCryptoCommitment *)commitment
                                            withByteArray:(IOSByteArray *)message {
  if (((IOSByteArray *) nil_chk(message))->size_ + ((IOSByteArray *) nil_chk([((OrgSpongycastleCryptoCommitment *) nil_chk(commitment)) getSecret]))->size_ != byteLength_) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"Message and witness secret lengths do not match.");
  }
  IOSByteArray *calcCommitment = OrgSpongycastleCryptoCommitmentsHashCommitter_calculateCommitmentWithByteArray_withByteArray_(self, [commitment getSecret], message);
  return OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_([commitment getCommitment], calcCommitment);
}

- (IOSByteArray *)calculateCommitmentWithByteArray:(IOSByteArray *)w
                                     withByteArray:(IOSByteArray *)message {
  return OrgSpongycastleCryptoCommitmentsHashCommitter_calculateCommitmentWithByteArray_withByteArray_(self, w, message);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoCommitment;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoExtendedDigest:withJavaSecuritySecureRandom:);
  methods[1].selector = @selector(commitWithByteArray:);
  methods[2].selector = @selector(isRevealedWithOrgSpongycastleCryptoCommitment:withByteArray:);
  methods[3].selector = @selector(calculateCommitmentWithByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "byteLength_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoExtendedDigest;LJavaSecuritySecureRandom;", "commit", "[B", "isRevealed", "LOrgSpongycastleCryptoCommitment;[B", "calculateCommitment", "[B[B" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoCommitmentsHashCommitter = { "HashCommitter", "org.spongycastle.crypto.commitments", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoCommitmentsHashCommitter;
}

@end

void OrgSpongycastleCryptoCommitmentsHashCommitter_initWithOrgSpongycastleCryptoExtendedDigest_withJavaSecuritySecureRandom_(OrgSpongycastleCryptoCommitmentsHashCommitter *self, id<OrgSpongycastleCryptoExtendedDigest> digest, JavaSecuritySecureRandom *random) {
  NSObject_init(self);
  self->digest_ = digest;
  self->byteLength_ = [((id<OrgSpongycastleCryptoExtendedDigest>) nil_chk(digest)) getByteLength];
  self->random_ = random;
}

OrgSpongycastleCryptoCommitmentsHashCommitter *new_OrgSpongycastleCryptoCommitmentsHashCommitter_initWithOrgSpongycastleCryptoExtendedDigest_withJavaSecuritySecureRandom_(id<OrgSpongycastleCryptoExtendedDigest> digest, JavaSecuritySecureRandom *random) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoCommitmentsHashCommitter, initWithOrgSpongycastleCryptoExtendedDigest_withJavaSecuritySecureRandom_, digest, random)
}

OrgSpongycastleCryptoCommitmentsHashCommitter *create_OrgSpongycastleCryptoCommitmentsHashCommitter_initWithOrgSpongycastleCryptoExtendedDigest_withJavaSecuritySecureRandom_(id<OrgSpongycastleCryptoExtendedDigest> digest, JavaSecuritySecureRandom *random) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoCommitmentsHashCommitter, initWithOrgSpongycastleCryptoExtendedDigest_withJavaSecuritySecureRandom_, digest, random)
}

IOSByteArray *OrgSpongycastleCryptoCommitmentsHashCommitter_calculateCommitmentWithByteArray_withByteArray_(OrgSpongycastleCryptoCommitmentsHashCommitter *self, IOSByteArray *w, IOSByteArray *message) {
  IOSByteArray *commitment = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(self->digest_)) getDigestSize]];
  [self->digest_ updateWithByteArray:w withInt:0 withInt:((IOSByteArray *) nil_chk(w))->size_];
  [self->digest_ updateWithByteArray:message withInt:0 withInt:((IOSByteArray *) nil_chk(message))->size_];
  [self->digest_ doFinalWithByteArray:commitment withInt:0];
  return commitment;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoCommitmentsHashCommitter)
