//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/io/SignerInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/FilterInputStream.h"
#include "java/io/InputStream.h"
#include "org/spongycastle/crypto/Signer.h"
#include "org/spongycastle/crypto/io/SignerInputStream.h"

@implementation OrgSpongycastleCryptoIoSignerInputStream

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)stream
          withOrgSpongycastleCryptoSigner:(id<OrgSpongycastleCryptoSigner>)signer {
  OrgSpongycastleCryptoIoSignerInputStream_initWithJavaIoInputStream_withOrgSpongycastleCryptoSigner_(self, stream, signer);
  return self;
}

- (jint)read {
  jint b = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) read];
  if (b >= 0) {
    [((id<OrgSpongycastleCryptoSigner>) nil_chk(signer_)) updateWithByte:(jbyte) b];
  }
  return b;
}

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)off
                  withInt:(jint)len {
  jint n = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) readWithByteArray:b withInt:off withInt:len];
  if (n > 0) {
    [((id<OrgSpongycastleCryptoSigner>) nil_chk(signer_)) updateWithByteArray:b withInt:off withInt:n];
  }
  return n;
}

- (id<OrgSpongycastleCryptoSigner>)getSigner {
  return signer_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoSigner;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:withOrgSpongycastleCryptoSigner:);
  methods[1].selector = @selector(read);
  methods[2].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(getSigner);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "signer_", "LOrgSpongycastleCryptoSigner;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;LOrgSpongycastleCryptoSigner;", "LJavaIoIOException;", "read", "[BII" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoIoSignerInputStream = { "SignerInputStream", "org.spongycastle.crypto.io", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoIoSignerInputStream;
}

@end

void OrgSpongycastleCryptoIoSignerInputStream_initWithJavaIoInputStream_withOrgSpongycastleCryptoSigner_(OrgSpongycastleCryptoIoSignerInputStream *self, JavaIoInputStream *stream, id<OrgSpongycastleCryptoSigner> signer) {
  JavaIoFilterInputStream_initWithJavaIoInputStream_(self, stream);
  self->signer_ = signer;
}

OrgSpongycastleCryptoIoSignerInputStream *new_OrgSpongycastleCryptoIoSignerInputStream_initWithJavaIoInputStream_withOrgSpongycastleCryptoSigner_(JavaIoInputStream *stream, id<OrgSpongycastleCryptoSigner> signer) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoIoSignerInputStream, initWithJavaIoInputStream_withOrgSpongycastleCryptoSigner_, stream, signer)
}

OrgSpongycastleCryptoIoSignerInputStream *create_OrgSpongycastleCryptoIoSignerInputStream_initWithJavaIoInputStream_withOrgSpongycastleCryptoSigner_(JavaIoInputStream *stream, id<OrgSpongycastleCryptoSigner> signer) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoIoSignerInputStream, initWithJavaIoInputStream_withOrgSpongycastleCryptoSigner_, stream, signer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoIoSignerInputStream)
