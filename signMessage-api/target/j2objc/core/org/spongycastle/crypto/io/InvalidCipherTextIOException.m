//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/io/InvalidCipherTextIOException.java
//

#include "J2ObjC_source.h"
#include "java/lang/Throwable.h"
#include "org/spongycastle/crypto/io/CipherIOException.h"
#include "org/spongycastle/crypto/io/InvalidCipherTextIOException.h"

inline jlong OrgSpongycastleCryptoIoInvalidCipherTextIOException_get_serialVersionUID(void);
#define OrgSpongycastleCryptoIoInvalidCipherTextIOException_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoIoInvalidCipherTextIOException, serialVersionUID, jlong)

@implementation OrgSpongycastleCryptoIoInvalidCipherTextIOException

- (instancetype)initWithNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause {
  OrgSpongycastleCryptoIoInvalidCipherTextIOException_initWithNSString_withJavaLangThrowable_(self, message, cause);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgSpongycastleCryptoIoInvalidCipherTextIOException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaLangThrowable;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoIoInvalidCipherTextIOException = { "InvalidCipherTextIOException", "org.spongycastle.crypto.io", ptrTable, methods, fields, 7, 0x1, 1, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoIoInvalidCipherTextIOException;
}

@end

void OrgSpongycastleCryptoIoInvalidCipherTextIOException_initWithNSString_withJavaLangThrowable_(OrgSpongycastleCryptoIoInvalidCipherTextIOException *self, NSString *message, JavaLangThrowable *cause) {
  OrgSpongycastleCryptoIoCipherIOException_initWithNSString_withJavaLangThrowable_(self, message, cause);
}

OrgSpongycastleCryptoIoInvalidCipherTextIOException *new_OrgSpongycastleCryptoIoInvalidCipherTextIOException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoIoInvalidCipherTextIOException, initWithNSString_withJavaLangThrowable_, message, cause)
}

OrgSpongycastleCryptoIoInvalidCipherTextIOException *create_OrgSpongycastleCryptoIoInvalidCipherTextIOException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoIoInvalidCipherTextIOException, initWithNSString_withJavaLangThrowable_, message, cause)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoIoInvalidCipherTextIOException)
