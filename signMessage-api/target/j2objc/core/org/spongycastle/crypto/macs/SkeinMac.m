//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/macs/SkeinMac.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/digests/SkeinEngine.h"
#include "org/spongycastle/crypto/macs/SkeinMac.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/SkeinParameters.h"

@interface OrgSpongycastleCryptoMacsSkeinMac () {
 @public
  OrgSpongycastleCryptoDigestsSkeinEngine *engine_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsSkeinMac, engine_, OrgSpongycastleCryptoDigestsSkeinEngine *)

@implementation OrgSpongycastleCryptoMacsSkeinMac

- (instancetype)initWithInt:(jint)stateSizeBits
                    withInt:(jint)digestSizeBits {
  OrgSpongycastleCryptoMacsSkeinMac_initWithInt_withInt_(self, stateSizeBits, digestSizeBits);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoMacsSkeinMac:(OrgSpongycastleCryptoMacsSkeinMac *)mac {
  OrgSpongycastleCryptoMacsSkeinMac_initWithOrgSpongycastleCryptoMacsSkeinMac_(self, mac);
  return self;
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$ICI", @"Skein-MAC-", ([((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) getBlockSize] * 8), '-', ([((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) getOutputSize] * 8));
}

- (void)init__WithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  OrgSpongycastleCryptoParamsSkeinParameters *skeinParameters;
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsSkeinParameters class]]) {
    skeinParameters = (OrgSpongycastleCryptoParamsSkeinParameters *) params;
  }
  else if ([params isKindOfClass:[OrgSpongycastleCryptoParamsKeyParameter class]]) {
    skeinParameters = [((OrgSpongycastleCryptoParamsSkeinParameters_Builder *) nil_chk([new_OrgSpongycastleCryptoParamsSkeinParameters_Builder_init() setKeyWithByteArray:[((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(((OrgSpongycastleCryptoParamsKeyParameter *) params))) getKey]])) build];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid parameter passed to Skein MAC init - ", [[((id<OrgSpongycastleCryptoCipherParameters>) nil_chk(params)) java_getClass] getName]));
  }
  if ([((OrgSpongycastleCryptoParamsSkeinParameters *) nil_chk(skeinParameters)) getKey] == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Skein MAC requires a key parameter.");
  }
  [((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) init__WithOrgSpongycastleCryptoParamsSkeinParameters:skeinParameters];
}

- (jint)getMacSize {
  return [((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) getOutputSize];
}

- (void)reset {
  [((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) reset];
}

- (void)updateWithByte:(jbyte)inArg {
  [((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) updateWithByte:inArg];
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len {
  [((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) updateWithByteArray:inArg withInt:inOff withInt:len];
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  return [((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) doFinalWithByteArray:outArg withInt:outOff];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoMacsSkeinMac:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(init__WithOrgSpongycastleCryptoCipherParameters:);
  methods[4].selector = @selector(getMacSize);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(updateWithByte:);
  methods[7].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(doFinalWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SKEIN_256", "I", .constantValue.asInt = OrgSpongycastleCryptoMacsSkeinMac_SKEIN_256, 0x19, -1, -1, -1, -1 },
    { "SKEIN_512", "I", .constantValue.asInt = OrgSpongycastleCryptoMacsSkeinMac_SKEIN_512, 0x19, -1, -1, -1, -1 },
    { "SKEIN_1024", "I", .constantValue.asInt = OrgSpongycastleCryptoMacsSkeinMac_SKEIN_1024, 0x19, -1, -1, -1, -1 },
    { "engine_", "LOrgSpongycastleCryptoDigestsSkeinEngine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LOrgSpongycastleCryptoMacsSkeinMac;", "init", "LOrgSpongycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "update", "B", "[BII", "doFinal", "[BI" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoMacsSkeinMac = { "SkeinMac", "org.spongycastle.crypto.macs", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoMacsSkeinMac;
}

@end

void OrgSpongycastleCryptoMacsSkeinMac_initWithInt_withInt_(OrgSpongycastleCryptoMacsSkeinMac *self, jint stateSizeBits, jint digestSizeBits) {
  NSObject_init(self);
  self->engine_ = new_OrgSpongycastleCryptoDigestsSkeinEngine_initWithInt_withInt_(stateSizeBits, digestSizeBits);
}

OrgSpongycastleCryptoMacsSkeinMac *new_OrgSpongycastleCryptoMacsSkeinMac_initWithInt_withInt_(jint stateSizeBits, jint digestSizeBits) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoMacsSkeinMac, initWithInt_withInt_, stateSizeBits, digestSizeBits)
}

OrgSpongycastleCryptoMacsSkeinMac *create_OrgSpongycastleCryptoMacsSkeinMac_initWithInt_withInt_(jint stateSizeBits, jint digestSizeBits) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoMacsSkeinMac, initWithInt_withInt_, stateSizeBits, digestSizeBits)
}

void OrgSpongycastleCryptoMacsSkeinMac_initWithOrgSpongycastleCryptoMacsSkeinMac_(OrgSpongycastleCryptoMacsSkeinMac *self, OrgSpongycastleCryptoMacsSkeinMac *mac) {
  NSObject_init(self);
  self->engine_ = new_OrgSpongycastleCryptoDigestsSkeinEngine_initWithOrgSpongycastleCryptoDigestsSkeinEngine_(((OrgSpongycastleCryptoMacsSkeinMac *) nil_chk(mac))->engine_);
}

OrgSpongycastleCryptoMacsSkeinMac *new_OrgSpongycastleCryptoMacsSkeinMac_initWithOrgSpongycastleCryptoMacsSkeinMac_(OrgSpongycastleCryptoMacsSkeinMac *mac) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoMacsSkeinMac, initWithOrgSpongycastleCryptoMacsSkeinMac_, mac)
}

OrgSpongycastleCryptoMacsSkeinMac *create_OrgSpongycastleCryptoMacsSkeinMac_initWithOrgSpongycastleCryptoMacsSkeinMac_(OrgSpongycastleCryptoMacsSkeinMac *mac) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoMacsSkeinMac, initWithOrgSpongycastleCryptoMacsSkeinMac_, mac)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoMacsSkeinMac)
