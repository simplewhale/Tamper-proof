//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/macs/KGMac.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoMacsKGMac")
#ifdef RESTRICT_OrgSpongycastleCryptoMacsKGMac
#define INCLUDE_ALL_OrgSpongycastleCryptoMacsKGMac 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoMacsKGMac 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoMacsKGMac

#if !defined (OrgSpongycastleCryptoMacsKGMac_) && (INCLUDE_ALL_OrgSpongycastleCryptoMacsKGMac || defined(INCLUDE_OrgSpongycastleCryptoMacsKGMac))
#define OrgSpongycastleCryptoMacsKGMac_

#define RESTRICT_OrgSpongycastleCryptoMac 1
#define INCLUDE_OrgSpongycastleCryptoMac 1
#include "org/spongycastle/crypto/Mac.h"

@class IOSByteArray;
@class OrgSpongycastleCryptoModesKGCMBlockCipher;
@protocol OrgSpongycastleCryptoCipherParameters;

@interface OrgSpongycastleCryptoMacsKGMac : NSObject < OrgSpongycastleCryptoMac >

#pragma mark Public

- (instancetype)initWithOrgSpongycastleCryptoModesKGCMBlockCipher:(OrgSpongycastleCryptoModesKGCMBlockCipher *)cipher;

- (instancetype)initWithOrgSpongycastleCryptoModesKGCMBlockCipher:(OrgSpongycastleCryptoModesKGCMBlockCipher *)cipher
                                                          withInt:(jint)macSizeBits;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (jint)getMacSize;

- (void)init__WithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (void)reset;

- (void)updateWithByte:(jbyte)inArg;

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoMacsKGMac)

FOUNDATION_EXPORT void OrgSpongycastleCryptoMacsKGMac_initWithOrgSpongycastleCryptoModesKGCMBlockCipher_(OrgSpongycastleCryptoMacsKGMac *self, OrgSpongycastleCryptoModesKGCMBlockCipher *cipher);

FOUNDATION_EXPORT OrgSpongycastleCryptoMacsKGMac *new_OrgSpongycastleCryptoMacsKGMac_initWithOrgSpongycastleCryptoModesKGCMBlockCipher_(OrgSpongycastleCryptoModesKGCMBlockCipher *cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoMacsKGMac *create_OrgSpongycastleCryptoMacsKGMac_initWithOrgSpongycastleCryptoModesKGCMBlockCipher_(OrgSpongycastleCryptoModesKGCMBlockCipher *cipher);

FOUNDATION_EXPORT void OrgSpongycastleCryptoMacsKGMac_initWithOrgSpongycastleCryptoModesKGCMBlockCipher_withInt_(OrgSpongycastleCryptoMacsKGMac *self, OrgSpongycastleCryptoModesKGCMBlockCipher *cipher, jint macSizeBits);

FOUNDATION_EXPORT OrgSpongycastleCryptoMacsKGMac *new_OrgSpongycastleCryptoMacsKGMac_initWithOrgSpongycastleCryptoModesKGCMBlockCipher_withInt_(OrgSpongycastleCryptoModesKGCMBlockCipher *cipher, jint macSizeBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoMacsKGMac *create_OrgSpongycastleCryptoMacsKGMac_initWithOrgSpongycastleCryptoModesKGCMBlockCipher_withInt_(OrgSpongycastleCryptoModesKGCMBlockCipher *cipher, jint macSizeBits);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoMacsKGMac)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoMacsKGMac")
