//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/macs/CFBBlockCipherMac.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/OutputLengthException.h"
#include "org/spongycastle/crypto/macs/CFBBlockCipherMac.h"
#include "org/spongycastle/crypto/paddings/BlockCipherPadding.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"

@interface OrgSpongycastleCryptoMacsMacCFBBlockCipher () {
 @public
  IOSByteArray *IV_;
  IOSByteArray *cfbV_;
  IOSByteArray *cfbOutV_;
  jint blockSize_;
  id<OrgSpongycastleCryptoBlockCipher> cipher_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsMacCFBBlockCipher, IV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsMacCFBBlockCipher, cfbV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsMacCFBBlockCipher, cfbOutV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsMacCFBBlockCipher, cipher_, id<OrgSpongycastleCryptoBlockCipher>)

@interface OrgSpongycastleCryptoMacsCFBBlockCipherMac () {
 @public
  IOSByteArray *mac_;
  IOSByteArray *buf_;
  jint bufOff_;
  OrgSpongycastleCryptoMacsMacCFBBlockCipher *cipher_;
  id<OrgSpongycastleCryptoPaddingsBlockCipherPadding> padding_;
  jint macSize_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsCFBBlockCipherMac, mac_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsCFBBlockCipherMac, buf_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsCFBBlockCipherMac, cipher_, OrgSpongycastleCryptoMacsMacCFBBlockCipher *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsCFBBlockCipherMac, padding_, id<OrgSpongycastleCryptoPaddingsBlockCipherPadding>)

@implementation OrgSpongycastleCryptoMacsMacCFBBlockCipher

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher
                                                 withInt:(jint)bitBlockSize {
  OrgSpongycastleCryptoMacsMacCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withInt_(self, cipher, bitBlockSize);
  return self;
}

- (void)init__WithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithIV class]]) {
    OrgSpongycastleCryptoParamsParametersWithIV *ivParam = (OrgSpongycastleCryptoParamsParametersWithIV *) params;
    IOSByteArray *iv = [((OrgSpongycastleCryptoParamsParametersWithIV *) nil_chk(ivParam)) getIV];
    if (((IOSByteArray *) nil_chk(iv))->size_ < ((IOSByteArray *) nil_chk(IV_))->size_) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, IV_, IV_->size_ - iv->size_, iv->size_);
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, IV_, 0, IV_->size_);
    }
    [self reset];
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:[ivParam getParameters]];
  }
  else {
    [self reset];
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:params];
  }
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$I", [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) getAlgorithmName], @"/CFB", (blockSize_ * 8));
}

- (jint)getBlockSize {
  return blockSize_;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if ((inOff + blockSize_) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + blockSize_) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:cfbV_ withInt:0 withByteArray:cfbOutV_ withInt:0];
  for (jint i = 0; i < blockSize_; i++) {
    *IOSByteArray_GetRef(outArg, outOff + i) = (jbyte) (IOSByteArray_Get(nil_chk(cfbOutV_), i) ^ IOSByteArray_Get(inArg, inOff + i));
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cfbV_, blockSize_, cfbV_, 0, ((IOSByteArray *) nil_chk(cfbV_))->size_ - blockSize_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(outArg, outOff, cfbV_, ((IOSByteArray *) nil_chk(cfbV_))->size_ - blockSize_, blockSize_);
  return blockSize_;
}

- (void)reset {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IV_, 0, cfbV_, 0, ((IOSByteArray *) nil_chk(IV_))->size_);
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) reset];
}

- (void)getMacBlockWithByteArray:(IOSByteArray *)mac {
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:cfbV_ withInt:0 withByteArray:mac withInt:0];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:withInt:);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(getBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(getMacBlockWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cfbV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cfbOutV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LOrgSpongycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoBlockCipher;I", "init", "LOrgSpongycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "processBlock", "[BI[BI", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "getMacBlock", "[B" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoMacsMacCFBBlockCipher = { "MacCFBBlockCipher", "org.spongycastle.crypto.macs", ptrTable, methods, fields, 7, 0x0, 7, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoMacsMacCFBBlockCipher;
}

@end

void OrgSpongycastleCryptoMacsMacCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withInt_(OrgSpongycastleCryptoMacsMacCFBBlockCipher *self, id<OrgSpongycastleCryptoBlockCipher> cipher, jint bitBlockSize) {
  NSObject_init(self);
  self->cipher_ = nil;
  self->cipher_ = cipher;
  self->blockSize_ = bitBlockSize / 8;
  self->IV_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize]];
  self->cfbV_ = [IOSByteArray newArrayWithLength:[cipher getBlockSize]];
  self->cfbOutV_ = [IOSByteArray newArrayWithLength:[cipher getBlockSize]];
}

OrgSpongycastleCryptoMacsMacCFBBlockCipher *new_OrgSpongycastleCryptoMacsMacCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withInt_(id<OrgSpongycastleCryptoBlockCipher> cipher, jint bitBlockSize) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoMacsMacCFBBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_withInt_, cipher, bitBlockSize)
}

OrgSpongycastleCryptoMacsMacCFBBlockCipher *create_OrgSpongycastleCryptoMacsMacCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withInt_(id<OrgSpongycastleCryptoBlockCipher> cipher, jint bitBlockSize) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoMacsMacCFBBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_withInt_, cipher, bitBlockSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoMacsMacCFBBlockCipher)

@implementation OrgSpongycastleCryptoMacsCFBBlockCipherMac

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher {
  OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_(self, cipher);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher
     withOrgSpongycastleCryptoPaddingsBlockCipherPadding:(id<OrgSpongycastleCryptoPaddingsBlockCipherPadding>)padding {
  OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(self, cipher, padding);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher
                                                 withInt:(jint)cfbBitSize
                                                 withInt:(jint)macSizeInBits {
  OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_(self, cipher, cfbBitSize, macSizeInBits);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher
                                                 withInt:(jint)cfbBitSize
                                                 withInt:(jint)macSizeInBits
     withOrgSpongycastleCryptoPaddingsBlockCipherPadding:(id<OrgSpongycastleCryptoPaddingsBlockCipherPadding>)padding {
  OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(self, cipher, cfbBitSize, macSizeInBits, padding);
  return self;
}

- (NSString *)getAlgorithmName {
  return [((OrgSpongycastleCryptoMacsMacCFBBlockCipher *) nil_chk(cipher_)) getAlgorithmName];
}

- (void)init__WithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  [self reset];
  [((OrgSpongycastleCryptoMacsMacCFBBlockCipher *) nil_chk(cipher_)) init__WithOrgSpongycastleCryptoCipherParameters:params];
}

- (jint)getMacSize {
  return macSize_;
}

- (void)updateWithByte:(jbyte)inArg {
  if (bufOff_ == ((IOSByteArray *) nil_chk(buf_))->size_) {
    [((OrgSpongycastleCryptoMacsMacCFBBlockCipher *) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:mac_ withInt:0];
    bufOff_ = 0;
  }
  *IOSByteArray_GetRef(nil_chk(buf_), bufOff_++) = inArg;
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len {
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't have a negative input length!");
  }
  jint blockSize = [((OrgSpongycastleCryptoMacsMacCFBBlockCipher *) nil_chk(cipher_)) getBlockSize];
  jint resultLen = 0;
  jint gapLen = blockSize - bufOff_;
  if (len > gapLen) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, gapLen);
    resultLen += [((OrgSpongycastleCryptoMacsMacCFBBlockCipher *) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:mac_ withInt:0];
    bufOff_ = 0;
    len -= gapLen;
    inOff += gapLen;
    while (len > blockSize) {
      resultLen += [((OrgSpongycastleCryptoMacsMacCFBBlockCipher *) nil_chk(cipher_)) processBlockWithByteArray:inArg withInt:inOff withByteArray:mac_ withInt:0];
      len -= blockSize;
      inOff += blockSize;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, len);
  bufOff_ += len;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  jint blockSize = [((OrgSpongycastleCryptoMacsMacCFBBlockCipher *) nil_chk(cipher_)) getBlockSize];
  if (self->padding_ == nil) {
    while (bufOff_ < blockSize) {
      *IOSByteArray_GetRef(nil_chk(buf_), bufOff_) = 0;
      bufOff_++;
    }
  }
  else {
    [padding_ addPaddingWithByteArray:buf_ withInt:bufOff_];
  }
  [((OrgSpongycastleCryptoMacsMacCFBBlockCipher *) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:mac_ withInt:0];
  [((OrgSpongycastleCryptoMacsMacCFBBlockCipher *) nil_chk(cipher_)) getMacBlockWithByteArray:mac_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mac_, 0, outArg, outOff, macSize_);
  [self reset];
  return macSize_;
}

- (void)reset {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(buf_))->size_; i++) {
    *IOSByteArray_GetRef(buf_, i) = 0;
  }
  bufOff_ = 0;
  [((OrgSpongycastleCryptoMacsMacCFBBlockCipher *) nil_chk(cipher_)) reset];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:withOrgSpongycastleCryptoPaddingsBlockCipherPadding:);
  methods[2].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:withInt:withInt:);
  methods[3].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:withInt:withInt:withOrgSpongycastleCryptoPaddingsBlockCipherPadding:);
  methods[4].selector = @selector(getAlgorithmName);
  methods[5].selector = @selector(init__WithOrgSpongycastleCryptoCipherParameters:);
  methods[6].selector = @selector(getMacSize);
  methods[7].selector = @selector(updateWithByte:);
  methods[8].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(doFinalWithByteArray:withInt:);
  methods[10].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mac_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufOff_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LOrgSpongycastleCryptoMacsMacCFBBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "padding_", "LOrgSpongycastleCryptoPaddingsBlockCipherPadding;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "macSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoBlockCipher;", "LOrgSpongycastleCryptoBlockCipher;LOrgSpongycastleCryptoPaddingsBlockCipherPadding;", "LOrgSpongycastleCryptoBlockCipher;II", "LOrgSpongycastleCryptoBlockCipher;IILOrgSpongycastleCryptoPaddingsBlockCipherPadding;", "init", "LOrgSpongycastleCryptoCipherParameters;", "update", "B", "[BII", "doFinal", "[BI" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoMacsCFBBlockCipherMac = { "CFBBlockCipherMac", "org.spongycastle.crypto.macs", ptrTable, methods, fields, 7, 0x1, 11, 6, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoMacsCFBBlockCipherMac;
}

@end

void OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_(OrgSpongycastleCryptoMacsCFBBlockCipherMac *self, id<OrgSpongycastleCryptoBlockCipher> cipher) {
  OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(self, cipher, 8, ([((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize] * 8) / 2, nil);
}

OrgSpongycastleCryptoMacsCFBBlockCipherMac *new_OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoMacsCFBBlockCipherMac, initWithOrgSpongycastleCryptoBlockCipher_, cipher)
}

OrgSpongycastleCryptoMacsCFBBlockCipherMac *create_OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoMacsCFBBlockCipherMac, initWithOrgSpongycastleCryptoBlockCipher_, cipher)
}

void OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(OrgSpongycastleCryptoMacsCFBBlockCipherMac *self, id<OrgSpongycastleCryptoBlockCipher> cipher, id<OrgSpongycastleCryptoPaddingsBlockCipherPadding> padding) {
  OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(self, cipher, 8, ([((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize] * 8) / 2, padding);
}

OrgSpongycastleCryptoMacsCFBBlockCipherMac *new_OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(id<OrgSpongycastleCryptoBlockCipher> cipher, id<OrgSpongycastleCryptoPaddingsBlockCipherPadding> padding) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoMacsCFBBlockCipherMac, initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_, cipher, padding)
}

OrgSpongycastleCryptoMacsCFBBlockCipherMac *create_OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(id<OrgSpongycastleCryptoBlockCipher> cipher, id<OrgSpongycastleCryptoPaddingsBlockCipherPadding> padding) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoMacsCFBBlockCipherMac, initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_, cipher, padding)
}

void OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_(OrgSpongycastleCryptoMacsCFBBlockCipherMac *self, id<OrgSpongycastleCryptoBlockCipher> cipher, jint cfbBitSize, jint macSizeInBits) {
  OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(self, cipher, cfbBitSize, macSizeInBits, nil);
}

OrgSpongycastleCryptoMacsCFBBlockCipherMac *new_OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_(id<OrgSpongycastleCryptoBlockCipher> cipher, jint cfbBitSize, jint macSizeInBits) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoMacsCFBBlockCipherMac, initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_, cipher, cfbBitSize, macSizeInBits)
}

OrgSpongycastleCryptoMacsCFBBlockCipherMac *create_OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_(id<OrgSpongycastleCryptoBlockCipher> cipher, jint cfbBitSize, jint macSizeInBits) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoMacsCFBBlockCipherMac, initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_, cipher, cfbBitSize, macSizeInBits)
}

void OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(OrgSpongycastleCryptoMacsCFBBlockCipherMac *self, id<OrgSpongycastleCryptoBlockCipher> cipher, jint cfbBitSize, jint macSizeInBits, id<OrgSpongycastleCryptoPaddingsBlockCipherPadding> padding) {
  NSObject_init(self);
  self->padding_ = nil;
  if ((macSizeInBits % 8) != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"MAC size must be multiple of 8");
  }
  self->mac_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize]];
  self->cipher_ = new_OrgSpongycastleCryptoMacsMacCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withInt_(cipher, cfbBitSize);
  self->padding_ = padding;
  self->macSize_ = macSizeInBits / 8;
  self->buf_ = [IOSByteArray newArrayWithLength:[self->cipher_ getBlockSize]];
  self->bufOff_ = 0;
}

OrgSpongycastleCryptoMacsCFBBlockCipherMac *new_OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(id<OrgSpongycastleCryptoBlockCipher> cipher, jint cfbBitSize, jint macSizeInBits, id<OrgSpongycastleCryptoPaddingsBlockCipherPadding> padding) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoMacsCFBBlockCipherMac, initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_, cipher, cfbBitSize, macSizeInBits, padding)
}

OrgSpongycastleCryptoMacsCFBBlockCipherMac *create_OrgSpongycastleCryptoMacsCFBBlockCipherMac_initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_(id<OrgSpongycastleCryptoBlockCipher> cipher, jint cfbBitSize, jint macSizeInBits, id<OrgSpongycastleCryptoPaddingsBlockCipherPadding> padding) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoMacsCFBBlockCipherMac, initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_withOrgSpongycastleCryptoPaddingsBlockCipherPadding_, cipher, cfbBitSize, macSizeInBits, padding)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoMacsCFBBlockCipherMac)
