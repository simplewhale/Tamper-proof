//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/macs/DSTU7564Mac.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/OutputLengthException.h"
#include "org/spongycastle/crypto/digests/DSTU7564Digest.h"
#include "org/spongycastle/crypto/macs/DSTU7564Mac.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/util/Pack.h"

@interface OrgSpongycastleCryptoMacsDSTU7564Mac () {
 @public
  OrgSpongycastleCryptoDigestsDSTU7564Digest *engine_;
  jint macSize_;
  IOSByteArray *paddedKey_;
  IOSByteArray *invertedKey_;
  jlong inputLength_;
}

- (void)pad;

- (IOSByteArray *)padKeyWithByteArray:(IOSByteArray *)inArg;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsDSTU7564Mac, engine_, OrgSpongycastleCryptoDigestsDSTU7564Digest *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsDSTU7564Mac, paddedKey_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsDSTU7564Mac, invertedKey_, IOSByteArray *)

inline jint OrgSpongycastleCryptoMacsDSTU7564Mac_get_BITS_IN_BYTE(void);
#define OrgSpongycastleCryptoMacsDSTU7564Mac_BITS_IN_BYTE 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoMacsDSTU7564Mac, BITS_IN_BYTE, jint)

__attribute__((unused)) static void OrgSpongycastleCryptoMacsDSTU7564Mac_pad(OrgSpongycastleCryptoMacsDSTU7564Mac *self);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoMacsDSTU7564Mac_padKeyWithByteArray_(OrgSpongycastleCryptoMacsDSTU7564Mac *self, IOSByteArray *inArg);

@implementation OrgSpongycastleCryptoMacsDSTU7564Mac

- (instancetype)initWithInt:(jint)macBitSize {
  OrgSpongycastleCryptoMacsDSTU7564Mac_initWithInt_(self, macBitSize);
  return self;
}

- (void)init__WithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsKeyParameter class]]) {
    IOSByteArray *key = [((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(((OrgSpongycastleCryptoParamsKeyParameter *) params))) getKey];
    invertedKey_ = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(key))->size_];
    paddedKey_ = OrgSpongycastleCryptoMacsDSTU7564Mac_padKeyWithByteArray_(self, key);
    for (jint byteIndex = 0; byteIndex < ((IOSByteArray *) nil_chk(invertedKey_))->size_; byteIndex++) {
      *IOSByteArray_GetRef(invertedKey_, byteIndex) = (jbyte) (IOSByteArray_Get(key, byteIndex) ^ (jbyte) (jint) 0xFF);
    }
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Bad parameter passed");
  }
  [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(engine_)) updateWithByteArray:paddedKey_ withInt:0 withInt:((IOSByteArray *) nil_chk(paddedKey_))->size_];
}

- (NSString *)getAlgorithmName {
  return @"DSTU7564Mac";
}

- (jint)getMacSize {
  return macSize_;
}

- (void)updateWithByte:(jbyte)inArg {
  [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(engine_)) updateWithByte:inArg];
  inputLength_++;
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len {
  if (((IOSByteArray *) nil_chk(inArg))->size_ - inOff < len) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"Input buffer too short");
  }
  if (paddedKey_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", [self getAlgorithmName], @" not initialised"));
  }
  [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(engine_)) updateWithByteArray:inArg withInt:inOff withInt:len];
  inputLength_ += len;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  if (paddedKey_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", [self getAlgorithmName], @" not initialised"));
  }
  if (((IOSByteArray *) nil_chk(outArg))->size_ - outOff < macSize_) {
    @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"Output buffer too short");
  }
  OrgSpongycastleCryptoMacsDSTU7564Mac_pad(self);
  [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(engine_)) updateWithByteArray:invertedKey_ withInt:0 withInt:((IOSByteArray *) nil_chk(invertedKey_))->size_];
  inputLength_ = 0;
  return [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(engine_)) doFinalWithByteArray:outArg withInt:outOff];
}

- (void)reset {
  inputLength_ = 0;
  [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(engine_)) reset];
  if (paddedKey_ != nil) {
    [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(engine_)) updateWithByteArray:paddedKey_ withInt:0 withInt:paddedKey_->size_];
  }
}

- (void)pad {
  OrgSpongycastleCryptoMacsDSTU7564Mac_pad(self);
}

- (IOSByteArray *)padKeyWithByteArray:(IOSByteArray *)inArg {
  return OrgSpongycastleCryptoMacsDSTU7564Mac_padKeyWithByteArray_(self, inArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 7, 8, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, 8, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(getMacSize);
  methods[4].selector = @selector(updateWithByte:);
  methods[5].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(doFinalWithByteArray:withInt:);
  methods[7].selector = @selector(reset);
  methods[8].selector = @selector(pad);
  methods[9].selector = @selector(padKeyWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BITS_IN_BYTE", "I", .constantValue.asInt = OrgSpongycastleCryptoMacsDSTU7564Mac_BITS_IN_BYTE, 0x1a, -1, -1, -1, -1 },
    { "engine_", "LOrgSpongycastleCryptoDigestsDSTU7564Digest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "macSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paddedKey_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "invertedKey_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inputLength_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "init", "LOrgSpongycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "update", "B", "LJavaLangIllegalStateException;", "[BII", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "doFinal", "[BI", "padKey", "[B" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoMacsDSTU7564Mac = { "DSTU7564Mac", "org.spongycastle.crypto.macs", ptrTable, methods, fields, 7, 0x1, 10, 6, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoMacsDSTU7564Mac;
}

@end

void OrgSpongycastleCryptoMacsDSTU7564Mac_initWithInt_(OrgSpongycastleCryptoMacsDSTU7564Mac *self, jint macBitSize) {
  NSObject_init(self);
  self->engine_ = new_OrgSpongycastleCryptoDigestsDSTU7564Digest_initWithInt_(macBitSize);
  self->macSize_ = macBitSize / OrgSpongycastleCryptoMacsDSTU7564Mac_BITS_IN_BYTE;
  self->paddedKey_ = nil;
  self->invertedKey_ = nil;
}

OrgSpongycastleCryptoMacsDSTU7564Mac *new_OrgSpongycastleCryptoMacsDSTU7564Mac_initWithInt_(jint macBitSize) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoMacsDSTU7564Mac, initWithInt_, macBitSize)
}

OrgSpongycastleCryptoMacsDSTU7564Mac *create_OrgSpongycastleCryptoMacsDSTU7564Mac_initWithInt_(jint macBitSize) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoMacsDSTU7564Mac, initWithInt_, macBitSize)
}

void OrgSpongycastleCryptoMacsDSTU7564Mac_pad(OrgSpongycastleCryptoMacsDSTU7564Mac *self) {
  jint extra = [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(self->engine_)) getByteLength] - (jint) (self->inputLength_ % [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(self->engine_)) getByteLength]);
  if (extra < 13) {
    extra += [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(self->engine_)) getByteLength];
  }
  IOSByteArray *padded = [IOSByteArray newArrayWithLength:extra];
  *IOSByteArray_GetRef(padded, 0) = (jbyte) (jint) 0x80;
  OrgSpongycastleUtilPack_longToLittleEndianWithLong_withByteArray_withInt_(self->inputLength_ * OrgSpongycastleCryptoMacsDSTU7564Mac_BITS_IN_BYTE, padded, padded->size_ - 12);
  [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(self->engine_)) updateWithByteArray:padded withInt:0 withInt:padded->size_];
}

IOSByteArray *OrgSpongycastleCryptoMacsDSTU7564Mac_padKeyWithByteArray_(OrgSpongycastleCryptoMacsDSTU7564Mac *self, IOSByteArray *inArg) {
  jint paddedLen = ((((IOSByteArray *) nil_chk(inArg))->size_ + [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(self->engine_)) getByteLength] - 1) / [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(self->engine_)) getByteLength]) * [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(self->engine_)) getByteLength];
  jint extra = [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(self->engine_)) getByteLength] - (jint) (inArg->size_ % [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(self->engine_)) getByteLength]);
  if (extra < 13) {
    paddedLen += [((OrgSpongycastleCryptoDigestsDSTU7564Digest *) nil_chk(self->engine_)) getByteLength];
  }
  IOSByteArray *padded = [IOSByteArray newArrayWithLength:paddedLen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, 0, padded, 0, inArg->size_);
  *IOSByteArray_GetRef(padded, inArg->size_) = (jbyte) (jint) 0x80;
  OrgSpongycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(inArg->size_ * OrgSpongycastleCryptoMacsDSTU7564Mac_BITS_IN_BYTE, padded, padded->size_ - 12);
  return padded;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoMacsDSTU7564Mac)
