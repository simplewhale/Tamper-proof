//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/macs/GOST28147Mac.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/macs/GOST28147Mac.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"
#include "org/spongycastle/crypto/params/ParametersWithSBox.h"

@interface OrgSpongycastleCryptoMacsGOST28147Mac () {
 @public
  jint blockSize_;
  jint macSize_;
  jint bufOff_;
  IOSByteArray *buf_;
  IOSByteArray *mac_;
  jboolean firstStep_;
  IOSIntArray *workingKey_;
  IOSByteArray *macIV_;
  IOSByteArray *S_;
}

- (IOSIntArray *)generateWorkingKeyWithByteArray:(IOSByteArray *)userKey;

- (jint)gost28147_mainStepWithInt:(jint)n1
                          withInt:(jint)key;

- (void)gost28147MacFuncWithIntArray:(IOSIntArray *)workingKey
                       withByteArray:(IOSByteArray *)inArg
                             withInt:(jint)inOff
                       withByteArray:(IOSByteArray *)outArg
                             withInt:(jint)outOff;

- (jint)bytesTointWithByteArray:(IOSByteArray *)inArg
                        withInt:(jint)inOff;

- (void)intTobytesWithInt:(jint)num
            withByteArray:(IOSByteArray *)outArg
                  withInt:(jint)outOff;

- (IOSByteArray *)CM5funcWithByteArray:(IOSByteArray *)buf
                               withInt:(jint)bufOff
                         withByteArray:(IOSByteArray *)mac;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsGOST28147Mac, buf_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsGOST28147Mac, mac_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsGOST28147Mac, workingKey_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsGOST28147Mac, macIV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsGOST28147Mac, S_, IOSByteArray *)

__attribute__((unused)) static IOSIntArray *OrgSpongycastleCryptoMacsGOST28147Mac_generateWorkingKeyWithByteArray_(OrgSpongycastleCryptoMacsGOST28147Mac *self, IOSByteArray *userKey);

__attribute__((unused)) static jint OrgSpongycastleCryptoMacsGOST28147Mac_gost28147_mainStepWithInt_withInt_(OrgSpongycastleCryptoMacsGOST28147Mac *self, jint n1, jint key);

__attribute__((unused)) static void OrgSpongycastleCryptoMacsGOST28147Mac_gost28147MacFuncWithIntArray_withByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoMacsGOST28147Mac *self, IOSIntArray *workingKey, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jint OrgSpongycastleCryptoMacsGOST28147Mac_bytesTointWithByteArray_withInt_(OrgSpongycastleCryptoMacsGOST28147Mac *self, IOSByteArray *inArg, jint inOff);

__attribute__((unused)) static void OrgSpongycastleCryptoMacsGOST28147Mac_intTobytesWithInt_withByteArray_withInt_(OrgSpongycastleCryptoMacsGOST28147Mac *self, jint num, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoMacsGOST28147Mac_CM5funcWithByteArray_withInt_withByteArray_(OrgSpongycastleCryptoMacsGOST28147Mac *self, IOSByteArray *buf, jint bufOff, IOSByteArray *mac);

@implementation OrgSpongycastleCryptoMacsGOST28147Mac

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoMacsGOST28147Mac_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSIntArray *)generateWorkingKeyWithByteArray:(IOSByteArray *)userKey {
  return OrgSpongycastleCryptoMacsGOST28147Mac_generateWorkingKeyWithByteArray_(self, userKey);
}

- (void)init__WithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  [self reset];
  buf_ = [IOSByteArray newArrayWithLength:blockSize_];
  macIV_ = nil;
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithSBox class]]) {
    OrgSpongycastleCryptoParamsParametersWithSBox *param = (OrgSpongycastleCryptoParamsParametersWithSBox *) params;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((OrgSpongycastleCryptoParamsParametersWithSBox *) nil_chk(param)) getSBox], 0, self->S_, 0, ((IOSByteArray *) nil_chk([param getSBox]))->size_);
    if ([param getParameters] != nil) {
      workingKey_ = OrgSpongycastleCryptoMacsGOST28147Mac_generateWorkingKeyWithByteArray_(self, [((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(((OrgSpongycastleCryptoParamsKeyParameter *) cast_chk([param getParameters], [OrgSpongycastleCryptoParamsKeyParameter class])))) getKey]);
    }
  }
  else if ([params isKindOfClass:[OrgSpongycastleCryptoParamsKeyParameter class]]) {
    workingKey_ = OrgSpongycastleCryptoMacsGOST28147Mac_generateWorkingKeyWithByteArray_(self, [((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(((OrgSpongycastleCryptoParamsKeyParameter *) params))) getKey]);
  }
  else if ([params isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithIV class]]) {
    OrgSpongycastleCryptoParamsParametersWithIV *p = (OrgSpongycastleCryptoParamsParametersWithIV *) params;
    workingKey_ = OrgSpongycastleCryptoMacsGOST28147Mac_generateWorkingKeyWithByteArray_(self, [((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(((OrgSpongycastleCryptoParamsKeyParameter *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithIV *) nil_chk(p)) getParameters], [OrgSpongycastleCryptoParamsKeyParameter class])))) getKey]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([p getIV], 0, mac_, 0, ((IOSByteArray *) nil_chk(mac_))->size_);
    macIV_ = [p getIV];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid parameter passed to GOST28147 init - ", [[((id<OrgSpongycastleCryptoCipherParameters>) nil_chk(params)) java_getClass] getName]));
  }
}

- (NSString *)getAlgorithmName {
  return @"GOST28147Mac";
}

- (jint)getMacSize {
  return macSize_;
}

- (jint)gost28147_mainStepWithInt:(jint)n1
                          withInt:(jint)key {
  return OrgSpongycastleCryptoMacsGOST28147Mac_gost28147_mainStepWithInt_withInt_(self, n1, key);
}

- (void)gost28147MacFuncWithIntArray:(IOSIntArray *)workingKey
                       withByteArray:(IOSByteArray *)inArg
                             withInt:(jint)inOff
                       withByteArray:(IOSByteArray *)outArg
                             withInt:(jint)outOff {
  OrgSpongycastleCryptoMacsGOST28147Mac_gost28147MacFuncWithIntArray_withByteArray_withInt_withByteArray_withInt_(self, workingKey, inArg, inOff, outArg, outOff);
}

- (jint)bytesTointWithByteArray:(IOSByteArray *)inArg
                        withInt:(jint)inOff {
  return OrgSpongycastleCryptoMacsGOST28147Mac_bytesTointWithByteArray_withInt_(self, inArg, inOff);
}

- (void)intTobytesWithInt:(jint)num
            withByteArray:(IOSByteArray *)outArg
                  withInt:(jint)outOff {
  OrgSpongycastleCryptoMacsGOST28147Mac_intTobytesWithInt_withByteArray_withInt_(self, num, outArg, outOff);
}

- (IOSByteArray *)CM5funcWithByteArray:(IOSByteArray *)buf
                               withInt:(jint)bufOff
                         withByteArray:(IOSByteArray *)mac {
  return OrgSpongycastleCryptoMacsGOST28147Mac_CM5funcWithByteArray_withInt_withByteArray_(self, buf, bufOff, mac);
}

- (void)updateWithByte:(jbyte)inArg {
  if (bufOff_ == ((IOSByteArray *) nil_chk(buf_))->size_) {
    IOSByteArray *sumbuf = [IOSByteArray newArrayWithLength:buf_->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, 0, sumbuf, 0, ((IOSByteArray *) nil_chk(mac_))->size_);
    if (firstStep_) {
      firstStep_ = false;
      if (macIV_ != nil) {
        sumbuf = OrgSpongycastleCryptoMacsGOST28147Mac_CM5funcWithByteArray_withInt_withByteArray_(self, buf_, 0, macIV_);
      }
    }
    else {
      sumbuf = OrgSpongycastleCryptoMacsGOST28147Mac_CM5funcWithByteArray_withInt_withByteArray_(self, buf_, 0, mac_);
    }
    OrgSpongycastleCryptoMacsGOST28147Mac_gost28147MacFuncWithIntArray_withByteArray_withInt_withByteArray_withInt_(self, workingKey_, sumbuf, 0, mac_, 0);
    bufOff_ = 0;
  }
  *IOSByteArray_GetRef(nil_chk(buf_), bufOff_++) = inArg;
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len {
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't have a negative input length!");
  }
  jint gapLen = blockSize_ - bufOff_;
  if (len > gapLen) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, gapLen);
    IOSByteArray *sumbuf = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(buf_))->size_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, 0, sumbuf, 0, ((IOSByteArray *) nil_chk(mac_))->size_);
    if (firstStep_) {
      firstStep_ = false;
      if (macIV_ != nil) {
        sumbuf = OrgSpongycastleCryptoMacsGOST28147Mac_CM5funcWithByteArray_withInt_withByteArray_(self, buf_, 0, macIV_);
      }
    }
    else {
      sumbuf = OrgSpongycastleCryptoMacsGOST28147Mac_CM5funcWithByteArray_withInt_withByteArray_(self, buf_, 0, mac_);
    }
    OrgSpongycastleCryptoMacsGOST28147Mac_gost28147MacFuncWithIntArray_withByteArray_withInt_withByteArray_withInt_(self, workingKey_, sumbuf, 0, mac_, 0);
    bufOff_ = 0;
    len -= gapLen;
    inOff += gapLen;
    while (len > blockSize_) {
      sumbuf = OrgSpongycastleCryptoMacsGOST28147Mac_CM5funcWithByteArray_withInt_withByteArray_(self, inArg, inOff, mac_);
      OrgSpongycastleCryptoMacsGOST28147Mac_gost28147MacFuncWithIntArray_withByteArray_withInt_withByteArray_withInt_(self, workingKey_, sumbuf, 0, mac_, 0);
      len -= blockSize_;
      inOff += blockSize_;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, len);
  bufOff_ += len;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  while (bufOff_ < blockSize_) {
    *IOSByteArray_GetRef(nil_chk(buf_), bufOff_) = 0;
    bufOff_++;
  }
  IOSByteArray *sumbuf = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(buf_))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, 0, sumbuf, 0, ((IOSByteArray *) nil_chk(mac_))->size_);
  if (firstStep_) {
    firstStep_ = false;
  }
  else {
    sumbuf = OrgSpongycastleCryptoMacsGOST28147Mac_CM5funcWithByteArray_withInt_withByteArray_(self, buf_, 0, mac_);
  }
  OrgSpongycastleCryptoMacsGOST28147Mac_gost28147MacFuncWithIntArray_withByteArray_withInt_withByteArray_withInt_(self, workingKey_, sumbuf, 0, mac_, 0);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mac_, (((IOSByteArray *) nil_chk(mac_))->size_ / 2) - macSize_, outArg, outOff, macSize_);
  [self reset];
  return macSize_;
}

- (void)reset {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(buf_))->size_; i++) {
    *IOSByteArray_GetRef(buf_, i) = 0;
  }
  bufOff_ = 0;
  firstStep_ = true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, 17, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 18, 19, -1, -1, -1 },
    { NULL, "I", 0x1, 20, 10, 19, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateWorkingKeyWithByteArray:);
  methods[2].selector = @selector(init__WithOrgSpongycastleCryptoCipherParameters:);
  methods[3].selector = @selector(getAlgorithmName);
  methods[4].selector = @selector(getMacSize);
  methods[5].selector = @selector(gost28147_mainStepWithInt:withInt:);
  methods[6].selector = @selector(gost28147MacFuncWithIntArray:withByteArray:withInt:withByteArray:withInt:);
  methods[7].selector = @selector(bytesTointWithByteArray:withInt:);
  methods[8].selector = @selector(intTobytesWithInt:withByteArray:withInt:);
  methods[9].selector = @selector(CM5funcWithByteArray:withInt:withByteArray:);
  methods[10].selector = @selector(updateWithByte:);
  methods[11].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[12].selector = @selector(doFinalWithByteArray:withInt:);
  methods[13].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "blockSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "macSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufOff_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mac_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "firstStep_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "workingKey_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "macIV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "S_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "generateWorkingKey", "[B", "init", "LOrgSpongycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "gost28147_mainStep", "II", "gost28147MacFunc", "[I[BI[BI", "bytesToint", "[BI", "intTobytes", "I[BI", "CM5func", "[BI[B", "update", "B", "LJavaLangIllegalStateException;", "[BII", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "doFinal" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoMacsGOST28147Mac = { "GOST28147Mac", "org.spongycastle.crypto.macs", ptrTable, methods, fields, 7, 0x1, 14, 9, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoMacsGOST28147Mac;
}

@end

void OrgSpongycastleCryptoMacsGOST28147Mac_init(OrgSpongycastleCryptoMacsGOST28147Mac *self) {
  NSObject_init(self);
  self->blockSize_ = 8;
  self->macSize_ = 4;
  self->firstStep_ = true;
  self->workingKey_ = nil;
  self->macIV_ = nil;
  self->S_ = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0x9, (jint) 0x6, (jint) 0x3, (jint) 0x2, (jint) 0x8, (jint) 0xB, (jint) 0x1, (jint) 0x7, (jint) 0xA, (jint) 0x4, (jint) 0xE, (jint) 0xF, (jint) 0xC, (jint) 0x0, (jint) 0xD, (jint) 0x5, (jint) 0x3, (jint) 0x7, (jint) 0xE, (jint) 0x9, (jint) 0x8, (jint) 0xA, (jint) 0xF, (jint) 0x0, (jint) 0x5, (jint) 0x2, (jint) 0x6, (jint) 0xC, (jint) 0xB, (jint) 0x4, (jint) 0xD, (jint) 0x1, (jint) 0xE, (jint) 0x4, (jint) 0x6, (jint) 0x2, (jint) 0xB, (jint) 0x3, (jint) 0xD, (jint) 0x8, (jint) 0xC, (jint) 0xF, (jint) 0x5, (jint) 0xA, (jint) 0x0, (jint) 0x7, (jint) 0x1, (jint) 0x9, (jint) 0xE, (jint) 0x7, (jint) 0xA, (jint) 0xC, (jint) 0xD, (jint) 0x1, (jint) 0x3, (jint) 0x9, (jint) 0x0, (jint) 0x2, (jint) 0xB, (jint) 0x4, (jint) 0xF, (jint) 0x8, (jint) 0x5, (jint) 0x6, (jint) 0xB, (jint) 0x5, (jint) 0x1, (jint) 0x9, (jint) 0x8, (jint) 0xD, (jint) 0xF, (jint) 0x0, (jint) 0xE, (jint) 0x4, (jint) 0x2, (jint) 0x3, (jint) 0xC, (jint) 0x7, (jint) 0xA, (jint) 0x6, (jint) 0x3, (jint) 0xA, (jint) 0xD, (jint) 0xC, (jint) 0x1, (jint) 0x2, (jint) 0x0, (jint) 0xB, (jint) 0x7, (jint) 0x5, (jint) 0x9, (jint) 0x4, (jint) 0x8, (jint) 0xF, (jint) 0xE, (jint) 0x6, (jint) 0x1, (jint) 0xD, (jint) 0x2, (jint) 0x9, (jint) 0x7, (jint) 0xA, (jint) 0x6, (jint) 0x0, (jint) 0x8, (jint) 0xC, (jint) 0x4, (jint) 0x5, (jint) 0xF, (jint) 0x3, (jint) 0xB, (jint) 0xE, (jint) 0xB, (jint) 0xA, (jint) 0xF, (jint) 0x5, (jint) 0x0, (jint) 0xC, (jint) 0xE, (jint) 0x8, (jint) 0x6, (jint) 0x2, (jint) 0x3, (jint) 0x9, (jint) 0x1, (jint) 0x7, (jint) 0xD, (jint) 0x4 } count:128];
  self->mac_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->buf_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->bufOff_ = 0;
}

OrgSpongycastleCryptoMacsGOST28147Mac *new_OrgSpongycastleCryptoMacsGOST28147Mac_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoMacsGOST28147Mac, init)
}

OrgSpongycastleCryptoMacsGOST28147Mac *create_OrgSpongycastleCryptoMacsGOST28147Mac_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoMacsGOST28147Mac, init)
}

IOSIntArray *OrgSpongycastleCryptoMacsGOST28147Mac_generateWorkingKeyWithByteArray_(OrgSpongycastleCryptoMacsGOST28147Mac *self, IOSByteArray *userKey) {
  if (((IOSByteArray *) nil_chk(userKey))->size_ != 32) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Key length invalid. Key needs to be 32 byte - 256 bit!!!");
  }
  IOSIntArray *key = [IOSIntArray newArrayWithLength:8];
  for (jint i = 0; i != 8; i++) {
    *IOSIntArray_GetRef(key, i) = OrgSpongycastleCryptoMacsGOST28147Mac_bytesTointWithByteArray_withInt_(self, userKey, i * 4);
  }
  return key;
}

jint OrgSpongycastleCryptoMacsGOST28147Mac_gost28147_mainStepWithInt_withInt_(OrgSpongycastleCryptoMacsGOST28147Mac *self, jint n1, jint key) {
  jint cm = (key + n1);
  jint om = JreLShift32(IOSByteArray_Get(nil_chk(self->S_), 0 + ((JreRShift32(cm, (0 * 4))) & (jint) 0xF)), (0 * 4));
  om += JreLShift32(IOSByteArray_Get(self->S_, 16 + ((JreRShift32(cm, (1 * 4))) & (jint) 0xF)), (1 * 4));
  om += JreLShift32(IOSByteArray_Get(self->S_, 32 + ((JreRShift32(cm, (2 * 4))) & (jint) 0xF)), (2 * 4));
  om += JreLShift32(IOSByteArray_Get(self->S_, 48 + ((JreRShift32(cm, (3 * 4))) & (jint) 0xF)), (3 * 4));
  om += JreLShift32(IOSByteArray_Get(self->S_, 64 + ((JreRShift32(cm, (4 * 4))) & (jint) 0xF)), (4 * 4));
  om += JreLShift32(IOSByteArray_Get(self->S_, 80 + ((JreRShift32(cm, (5 * 4))) & (jint) 0xF)), (5 * 4));
  om += JreLShift32(IOSByteArray_Get(self->S_, 96 + ((JreRShift32(cm, (6 * 4))) & (jint) 0xF)), (6 * 4));
  om += JreLShift32(IOSByteArray_Get(self->S_, 112 + ((JreRShift32(cm, (7 * 4))) & (jint) 0xF)), (7 * 4));
  return (JreLShift32(om, 11)) | (JreURShift32(om, (32 - 11)));
}

void OrgSpongycastleCryptoMacsGOST28147Mac_gost28147MacFuncWithIntArray_withByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoMacsGOST28147Mac *self, IOSIntArray *workingKey, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  jint N1;
  jint N2;
  jint tmp;
  N1 = OrgSpongycastleCryptoMacsGOST28147Mac_bytesTointWithByteArray_withInt_(self, inArg, inOff);
  N2 = OrgSpongycastleCryptoMacsGOST28147Mac_bytesTointWithByteArray_withInt_(self, inArg, inOff + 4);
  for (jint k = 0; k < 2; k++) {
    for (jint j = 0; j < 8; j++) {
      tmp = N1;
      N1 = N2 ^ OrgSpongycastleCryptoMacsGOST28147Mac_gost28147_mainStepWithInt_withInt_(self, N1, IOSIntArray_Get(nil_chk(workingKey), j));
      N2 = tmp;
    }
  }
  OrgSpongycastleCryptoMacsGOST28147Mac_intTobytesWithInt_withByteArray_withInt_(self, N1, outArg, outOff);
  OrgSpongycastleCryptoMacsGOST28147Mac_intTobytesWithInt_withByteArray_withInt_(self, N2, outArg, outOff + 4);
}

jint OrgSpongycastleCryptoMacsGOST28147Mac_bytesTointWithByteArray_withInt_(OrgSpongycastleCryptoMacsGOST28147Mac *self, IOSByteArray *inArg, jint inOff) {
  return ((JreLShift32(IOSByteArray_Get(nil_chk(inArg), inOff + 3), 24)) & (jint) 0xff000000) + ((JreLShift32(IOSByteArray_Get(inArg, inOff + 2), 16)) & (jint) 0xff0000) + ((JreLShift32(IOSByteArray_Get(inArg, inOff + 1), 8)) & (jint) 0xff00) + (IOSByteArray_Get(inArg, inOff) & (jint) 0xff);
}

void OrgSpongycastleCryptoMacsGOST28147Mac_intTobytesWithInt_withByteArray_withInt_(OrgSpongycastleCryptoMacsGOST28147Mac *self, jint num, IOSByteArray *outArg, jint outOff) {
  *IOSByteArray_GetRef(nil_chk(outArg), outOff + 3) = (jbyte) (JreURShift32(num, 24));
  *IOSByteArray_GetRef(outArg, outOff + 2) = (jbyte) (JreURShift32(num, 16));
  *IOSByteArray_GetRef(outArg, outOff + 1) = (jbyte) (JreURShift32(num, 8));
  *IOSByteArray_GetRef(outArg, outOff) = (jbyte) num;
}

IOSByteArray *OrgSpongycastleCryptoMacsGOST28147Mac_CM5funcWithByteArray_withInt_withByteArray_(OrgSpongycastleCryptoMacsGOST28147Mac *self, IOSByteArray *buf, jint bufOff, IOSByteArray *mac) {
  IOSByteArray *sum = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(buf))->size_ - bufOff];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, bufOff, sum, 0, ((IOSByteArray *) nil_chk(mac))->size_);
  for (jint i = 0; i != mac->size_; i++) {
    *IOSByteArray_GetRef(sum, i) = (jbyte) (IOSByteArray_Get(sum, i) ^ IOSByteArray_Get(mac, i));
  }
  return sum;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoMacsGOST28147Mac)
