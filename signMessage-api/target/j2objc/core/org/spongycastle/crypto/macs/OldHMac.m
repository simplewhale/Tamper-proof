//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/macs/OldHMac.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/macs/OldHMac.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"

@interface OrgSpongycastleCryptoMacsOldHMac () {
 @public
  id<OrgSpongycastleCryptoDigest> digest_;
  jint digestSize_;
  IOSByteArray *inputPad_;
  IOSByteArray *outputPad_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsOldHMac, digest_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsOldHMac, inputPad_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoMacsOldHMac, outputPad_, IOSByteArray *)

inline jint OrgSpongycastleCryptoMacsOldHMac_get_BLOCK_LENGTH(void);
#define OrgSpongycastleCryptoMacsOldHMac_BLOCK_LENGTH 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoMacsOldHMac, BLOCK_LENGTH, jint)

inline jbyte OrgSpongycastleCryptoMacsOldHMac_get_IPAD(void);
#define OrgSpongycastleCryptoMacsOldHMac_IPAD 54
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoMacsOldHMac, IPAD, jbyte)

inline jbyte OrgSpongycastleCryptoMacsOldHMac_get_OPAD(void);
#define OrgSpongycastleCryptoMacsOldHMac_OPAD 92
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoMacsOldHMac, OPAD, jbyte)

@implementation OrgSpongycastleCryptoMacsOldHMac

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  OrgSpongycastleCryptoMacsOldHMac_initWithOrgSpongycastleCryptoDigest_(self, digest);
  return self;
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$", [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getAlgorithmName], @"/HMAC");
}

- (id<OrgSpongycastleCryptoDigest>)getUnderlyingDigest {
  return digest_;
}

- (void)init__WithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) reset];
  IOSByteArray *key = [((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(((OrgSpongycastleCryptoParamsKeyParameter *) cast_chk(params, [OrgSpongycastleCryptoParamsKeyParameter class])))) getKey];
  if (((IOSByteArray *) nil_chk(key))->size_ > OrgSpongycastleCryptoMacsOldHMac_BLOCK_LENGTH) {
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:key withInt:0 withInt:key->size_];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:inputPad_ withInt:0];
    for (jint i = digestSize_; i < ((IOSByteArray *) nil_chk(inputPad_))->size_; i++) {
      *IOSByteArray_GetRef(inputPad_, i) = 0;
    }
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, inputPad_, 0, key->size_);
    for (jint i = key->size_; i < ((IOSByteArray *) nil_chk(inputPad_))->size_; i++) {
      *IOSByteArray_GetRef(inputPad_, i) = 0;
    }
  }
  outputPad_ = [IOSByteArray newArrayWithLength:inputPad_->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inputPad_, 0, outputPad_, 0, inputPad_->size_);
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(inputPad_))->size_; i++) {
    *IOSByteArray_GetRef(inputPad_, i) ^= OrgSpongycastleCryptoMacsOldHMac_IPAD;
  }
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(outputPad_))->size_; i++) {
    *IOSByteArray_GetRef(outputPad_, i) ^= OrgSpongycastleCryptoMacsOldHMac_OPAD;
  }
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:inputPad_ withInt:0 withInt:inputPad_->size_];
}

- (jint)getMacSize {
  return digestSize_;
}

- (void)updateWithByte:(jbyte)inArg {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByte:inArg];
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:inArg withInt:inOff withInt:len];
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:digestSize_];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:tmp withInt:0];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:outputPad_ withInt:0 withInt:((IOSByteArray *) nil_chk(outputPad_))->size_];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:tmp withInt:0 withInt:tmp->size_];
  jint len = [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:outArg withInt:outOff];
  [self reset];
  return len;
}

- (void)reset {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) reset];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:inputPad_ withInt:0 withInt:((IOSByteArray *) nil_chk(inputPad_))->size_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoDigest:);
  methods[1].selector = @selector(getAlgorithmName);
  methods[2].selector = @selector(getUnderlyingDigest);
  methods[3].selector = @selector(init__WithOrgSpongycastleCryptoCipherParameters:);
  methods[4].selector = @selector(getMacSize);
  methods[5].selector = @selector(updateWithByte:);
  methods[6].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(doFinalWithByteArray:withInt:);
  methods[8].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BLOCK_LENGTH", "I", .constantValue.asInt = OrgSpongycastleCryptoMacsOldHMac_BLOCK_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "IPAD", "B", .constantValue.asChar = OrgSpongycastleCryptoMacsOldHMac_IPAD, 0x1a, -1, -1, -1, -1 },
    { "OPAD", "B", .constantValue.asChar = OrgSpongycastleCryptoMacsOldHMac_OPAD, 0x1a, -1, -1, -1, -1 },
    { "digest_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "digestSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inputPad_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "outputPad_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDigest;", "init", "LOrgSpongycastleCryptoCipherParameters;", "update", "B", "[BII", "doFinal", "[BI" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoMacsOldHMac = { "OldHMac", "org.spongycastle.crypto.macs", ptrTable, methods, fields, 7, 0x1, 9, 7, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoMacsOldHMac;
}

@end

void OrgSpongycastleCryptoMacsOldHMac_initWithOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoMacsOldHMac *self, id<OrgSpongycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->inputPad_ = [IOSByteArray newArrayWithLength:OrgSpongycastleCryptoMacsOldHMac_BLOCK_LENGTH];
  self->outputPad_ = [IOSByteArray newArrayWithLength:OrgSpongycastleCryptoMacsOldHMac_BLOCK_LENGTH];
  self->digest_ = digest;
  self->digestSize_ = [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) getDigestSize];
}

OrgSpongycastleCryptoMacsOldHMac *new_OrgSpongycastleCryptoMacsOldHMac_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoMacsOldHMac, initWithOrgSpongycastleCryptoDigest_, digest)
}

OrgSpongycastleCryptoMacsOldHMac *create_OrgSpongycastleCryptoMacsOldHMac_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoMacsOldHMac, initWithOrgSpongycastleCryptoDigest_, digest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoMacsOldHMac)
