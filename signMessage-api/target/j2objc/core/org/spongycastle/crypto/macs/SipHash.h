//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/macs/SipHash.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoMacsSipHash")
#ifdef RESTRICT_OrgSpongycastleCryptoMacsSipHash
#define INCLUDE_ALL_OrgSpongycastleCryptoMacsSipHash 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoMacsSipHash 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoMacsSipHash

#if !defined (OrgSpongycastleCryptoMacsSipHash_) && (INCLUDE_ALL_OrgSpongycastleCryptoMacsSipHash || defined(INCLUDE_OrgSpongycastleCryptoMacsSipHash))
#define OrgSpongycastleCryptoMacsSipHash_

#define RESTRICT_OrgSpongycastleCryptoMac 1
#define INCLUDE_OrgSpongycastleCryptoMac 1
#include "org/spongycastle/crypto/Mac.h"

@class IOSByteArray;
@protocol OrgSpongycastleCryptoCipherParameters;

@interface OrgSpongycastleCryptoMacsSipHash : NSObject < OrgSpongycastleCryptoMac > {
 @public
  jint c_;
  jint d_;
  jlong k0_;
  jlong k1_;
  jlong v0_;
  jlong v1_;
  jlong v2_;
  jlong v3_;
  jlong m_;
  jint wordPos_;
  jint wordCount_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(jint)c
                    withInt:(jint)d;

- (jlong)doFinal;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (jint)getMacSize;

- (void)init__WithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (void)reset;

- (void)updateWithByte:(jbyte)input;

- (void)updateWithByteArray:(IOSByteArray *)input
                    withInt:(jint)offset
                    withInt:(jint)length;

#pragma mark Protected

- (void)applySipRoundsWithInt:(jint)n;

- (void)processMessageWord;

+ (jlong)rotateLeftWithLong:(jlong)x
                    withInt:(jint)n;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoMacsSipHash)

FOUNDATION_EXPORT void OrgSpongycastleCryptoMacsSipHash_init(OrgSpongycastleCryptoMacsSipHash *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoMacsSipHash *new_OrgSpongycastleCryptoMacsSipHash_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoMacsSipHash *create_OrgSpongycastleCryptoMacsSipHash_init(void);

FOUNDATION_EXPORT void OrgSpongycastleCryptoMacsSipHash_initWithInt_withInt_(OrgSpongycastleCryptoMacsSipHash *self, jint c, jint d);

FOUNDATION_EXPORT OrgSpongycastleCryptoMacsSipHash *new_OrgSpongycastleCryptoMacsSipHash_initWithInt_withInt_(jint c, jint d) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoMacsSipHash *create_OrgSpongycastleCryptoMacsSipHash_initWithInt_withInt_(jint c, jint d);

FOUNDATION_EXPORT jlong OrgSpongycastleCryptoMacsSipHash_rotateLeftWithLong_withInt_(jlong x, jint n);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoMacsSipHash)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoMacsSipHash")
