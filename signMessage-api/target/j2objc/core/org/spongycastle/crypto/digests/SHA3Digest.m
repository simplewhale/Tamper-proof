//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/digests/SHA3Digest.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/crypto/digests/KeccakDigest.h"
#include "org/spongycastle/crypto/digests/SHA3Digest.h"

@interface OrgSpongycastleCryptoDigestsSHA3Digest ()

+ (jint)checkBitLengthWithInt:(jint)bitLength;

@end

__attribute__((unused)) static jint OrgSpongycastleCryptoDigestsSHA3Digest_checkBitLengthWithInt_(jint bitLength);

@implementation OrgSpongycastleCryptoDigestsSHA3Digest

+ (jint)checkBitLengthWithInt:(jint)bitLength {
  return OrgSpongycastleCryptoDigestsSHA3Digest_checkBitLengthWithInt_(bitLength);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoDigestsSHA3Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)bitLength {
  OrgSpongycastleCryptoDigestsSHA3Digest_initWithInt_(self, bitLength);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoDigestsSHA3Digest:(OrgSpongycastleCryptoDigestsSHA3Digest *)source {
  OrgSpongycastleCryptoDigestsSHA3Digest_initWithOrgSpongycastleCryptoDigestsSHA3Digest_(self, source);
  return self;
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$I", @"SHA3-", fixedOutputLength_);
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  [self absorbBitsWithInt:(jint) 0x02 withInt:2];
  return [super doFinalWithByteArray:outArg withInt:outOff];
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff
                    withByte:(jbyte)partialByte
                     withInt:(jint)partialBits {
  if (partialBits < 0 || partialBits > 7) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'partialBits' must be in the range [0,7]");
  }
  jint finalInput = (partialByte & ((JreLShift32(1, partialBits)) - 1)) | (JreLShift32((jint) 0x02, partialBits));
  jint finalBits = partialBits + 2;
  if (finalBits >= 8) {
    [self absorbWithByteArray:[IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) finalInput } count:1] withInt:0 withInt:1];
    finalBits -= 8;
    JreURShiftAssignInt(&finalInput, 8);
  }
  return [super doFinalWithByteArray:outArg withInt:outOff withByte:(jbyte) finalInput withInt:finalBits];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 3, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(checkBitLengthWithInt:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(initWithOrgSpongycastleCryptoDigestsSHA3Digest:);
  methods[4].selector = @selector(getAlgorithmName);
  methods[5].selector = @selector(doFinalWithByteArray:withInt:);
  methods[6].selector = @selector(doFinalWithByteArray:withInt:withByte:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkBitLength", "I", "LOrgSpongycastleCryptoDigestsSHA3Digest;", "doFinal", "[BI", "[BIBI" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoDigestsSHA3Digest = { "SHA3Digest", "org.spongycastle.crypto.digests", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoDigestsSHA3Digest;
}

@end

jint OrgSpongycastleCryptoDigestsSHA3Digest_checkBitLengthWithInt_(jint bitLength) {
  OrgSpongycastleCryptoDigestsSHA3Digest_initialize();
  switch (bitLength) {
    case 224:
    case 256:
    case 384:
    case 512:
    return bitLength;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"'bitLength' ", bitLength, @" not supported for SHA-3"));
  }
}

void OrgSpongycastleCryptoDigestsSHA3Digest_init(OrgSpongycastleCryptoDigestsSHA3Digest *self) {
  OrgSpongycastleCryptoDigestsSHA3Digest_initWithInt_(self, 256);
}

OrgSpongycastleCryptoDigestsSHA3Digest *new_OrgSpongycastleCryptoDigestsSHA3Digest_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoDigestsSHA3Digest, init)
}

OrgSpongycastleCryptoDigestsSHA3Digest *create_OrgSpongycastleCryptoDigestsSHA3Digest_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoDigestsSHA3Digest, init)
}

void OrgSpongycastleCryptoDigestsSHA3Digest_initWithInt_(OrgSpongycastleCryptoDigestsSHA3Digest *self, jint bitLength) {
  OrgSpongycastleCryptoDigestsKeccakDigest_initWithInt_(self, OrgSpongycastleCryptoDigestsSHA3Digest_checkBitLengthWithInt_(bitLength));
}

OrgSpongycastleCryptoDigestsSHA3Digest *new_OrgSpongycastleCryptoDigestsSHA3Digest_initWithInt_(jint bitLength) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoDigestsSHA3Digest, initWithInt_, bitLength)
}

OrgSpongycastleCryptoDigestsSHA3Digest *create_OrgSpongycastleCryptoDigestsSHA3Digest_initWithInt_(jint bitLength) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoDigestsSHA3Digest, initWithInt_, bitLength)
}

void OrgSpongycastleCryptoDigestsSHA3Digest_initWithOrgSpongycastleCryptoDigestsSHA3Digest_(OrgSpongycastleCryptoDigestsSHA3Digest *self, OrgSpongycastleCryptoDigestsSHA3Digest *source) {
  OrgSpongycastleCryptoDigestsKeccakDigest_initWithOrgSpongycastleCryptoDigestsKeccakDigest_(self, source);
}

OrgSpongycastleCryptoDigestsSHA3Digest *new_OrgSpongycastleCryptoDigestsSHA3Digest_initWithOrgSpongycastleCryptoDigestsSHA3Digest_(OrgSpongycastleCryptoDigestsSHA3Digest *source) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoDigestsSHA3Digest, initWithOrgSpongycastleCryptoDigestsSHA3Digest_, source)
}

OrgSpongycastleCryptoDigestsSHA3Digest *create_OrgSpongycastleCryptoDigestsSHA3Digest_initWithOrgSpongycastleCryptoDigestsSHA3Digest_(OrgSpongycastleCryptoDigestsSHA3Digest *source) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoDigestsSHA3Digest, initWithOrgSpongycastleCryptoDigestsSHA3Digest_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoDigestsSHA3Digest)
