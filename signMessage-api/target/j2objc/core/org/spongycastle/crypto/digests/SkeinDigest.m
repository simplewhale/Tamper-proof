//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/digests/SkeinDigest.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/digests/SkeinDigest.h"
#include "org/spongycastle/crypto/digests/SkeinEngine.h"
#include "org/spongycastle/crypto/params/SkeinParameters.h"
#include "org/spongycastle/util/Memoable.h"

@interface OrgSpongycastleCryptoDigestsSkeinDigest () {
 @public
  OrgSpongycastleCryptoDigestsSkeinEngine *engine_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoDigestsSkeinDigest, engine_, OrgSpongycastleCryptoDigestsSkeinEngine *)

@implementation OrgSpongycastleCryptoDigestsSkeinDigest

- (instancetype)initWithInt:(jint)stateSizeBits
                    withInt:(jint)digestSizeBits {
  OrgSpongycastleCryptoDigestsSkeinDigest_initWithInt_withInt_(self, stateSizeBits, digestSizeBits);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoDigestsSkeinDigest:(OrgSpongycastleCryptoDigestsSkeinDigest *)digest {
  OrgSpongycastleCryptoDigestsSkeinDigest_initWithOrgSpongycastleCryptoDigestsSkeinDigest_(self, digest);
  return self;
}

- (void)resetWithOrgSpongycastleUtilMemoable:(id<OrgSpongycastleUtilMemoable>)other {
  OrgSpongycastleCryptoDigestsSkeinDigest *d = (OrgSpongycastleCryptoDigestsSkeinDigest *) cast_chk(other, [OrgSpongycastleCryptoDigestsSkeinDigest class]);
  [((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) resetWithOrgSpongycastleUtilMemoable:((OrgSpongycastleCryptoDigestsSkeinDigest *) nil_chk(d))->engine_];
}

- (id<OrgSpongycastleUtilMemoable>)copy__ {
  return new_OrgSpongycastleCryptoDigestsSkeinDigest_initWithOrgSpongycastleCryptoDigestsSkeinDigest_(self);
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$ICI", @"Skein-", ([((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) getBlockSize] * 8), '-', ([((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) getOutputSize] * 8));
}

- (jint)getDigestSize {
  return [((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) getOutputSize];
}

- (jint)getByteLength {
  return [((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) getBlockSize];
}

- (void)init__WithOrgSpongycastleCryptoParamsSkeinParameters:(OrgSpongycastleCryptoParamsSkeinParameters *)params {
  [((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) init__WithOrgSpongycastleCryptoParamsSkeinParameters:params];
}

- (void)reset {
  [((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) reset];
}

- (void)updateWithByte:(jbyte)inArg {
  [((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) updateWithByte:inArg];
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len {
  [((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) updateWithByteArray:inArg withInt:inOff withInt:len];
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  return [((OrgSpongycastleCryptoDigestsSkeinEngine *) nil_chk(engine_)) doFinalWithByteArray:outArg withInt:outOff];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleUtilMemoable;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoDigestsSkeinDigest:);
  methods[2].selector = @selector(resetWithOrgSpongycastleUtilMemoable:);
  methods[3].selector = @selector(copy__);
  methods[4].selector = @selector(getAlgorithmName);
  methods[5].selector = @selector(getDigestSize);
  methods[6].selector = @selector(getByteLength);
  methods[7].selector = @selector(init__WithOrgSpongycastleCryptoParamsSkeinParameters:);
  methods[8].selector = @selector(reset);
  methods[9].selector = @selector(updateWithByte:);
  methods[10].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[11].selector = @selector(doFinalWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SKEIN_256", "I", .constantValue.asInt = OrgSpongycastleCryptoDigestsSkeinDigest_SKEIN_256, 0x19, -1, -1, -1, -1 },
    { "SKEIN_512", "I", .constantValue.asInt = OrgSpongycastleCryptoDigestsSkeinDigest_SKEIN_512, 0x19, -1, -1, -1, -1 },
    { "SKEIN_1024", "I", .constantValue.asInt = OrgSpongycastleCryptoDigestsSkeinDigest_SKEIN_1024, 0x19, -1, -1, -1, -1 },
    { "engine_", "LOrgSpongycastleCryptoDigestsSkeinEngine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LOrgSpongycastleCryptoDigestsSkeinDigest;", "reset", "LOrgSpongycastleUtilMemoable;", "copy", "init", "LOrgSpongycastleCryptoParamsSkeinParameters;", "update", "B", "[BII", "doFinal", "[BI" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoDigestsSkeinDigest = { "SkeinDigest", "org.spongycastle.crypto.digests", ptrTable, methods, fields, 7, 0x1, 12, 4, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoDigestsSkeinDigest;
}

@end

void OrgSpongycastleCryptoDigestsSkeinDigest_initWithInt_withInt_(OrgSpongycastleCryptoDigestsSkeinDigest *self, jint stateSizeBits, jint digestSizeBits) {
  NSObject_init(self);
  self->engine_ = new_OrgSpongycastleCryptoDigestsSkeinEngine_initWithInt_withInt_(stateSizeBits, digestSizeBits);
  [self init__WithOrgSpongycastleCryptoParamsSkeinParameters:nil];
}

OrgSpongycastleCryptoDigestsSkeinDigest *new_OrgSpongycastleCryptoDigestsSkeinDigest_initWithInt_withInt_(jint stateSizeBits, jint digestSizeBits) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoDigestsSkeinDigest, initWithInt_withInt_, stateSizeBits, digestSizeBits)
}

OrgSpongycastleCryptoDigestsSkeinDigest *create_OrgSpongycastleCryptoDigestsSkeinDigest_initWithInt_withInt_(jint stateSizeBits, jint digestSizeBits) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoDigestsSkeinDigest, initWithInt_withInt_, stateSizeBits, digestSizeBits)
}

void OrgSpongycastleCryptoDigestsSkeinDigest_initWithOrgSpongycastleCryptoDigestsSkeinDigest_(OrgSpongycastleCryptoDigestsSkeinDigest *self, OrgSpongycastleCryptoDigestsSkeinDigest *digest) {
  NSObject_init(self);
  self->engine_ = new_OrgSpongycastleCryptoDigestsSkeinEngine_initWithOrgSpongycastleCryptoDigestsSkeinEngine_(((OrgSpongycastleCryptoDigestsSkeinDigest *) nil_chk(digest))->engine_);
}

OrgSpongycastleCryptoDigestsSkeinDigest *new_OrgSpongycastleCryptoDigestsSkeinDigest_initWithOrgSpongycastleCryptoDigestsSkeinDigest_(OrgSpongycastleCryptoDigestsSkeinDigest *digest) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoDigestsSkeinDigest, initWithOrgSpongycastleCryptoDigestsSkeinDigest_, digest)
}

OrgSpongycastleCryptoDigestsSkeinDigest *create_OrgSpongycastleCryptoDigestsSkeinDigest_initWithOrgSpongycastleCryptoDigestsSkeinDigest_(OrgSpongycastleCryptoDigestsSkeinDigest *digest) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoDigestsSkeinDigest, initWithOrgSpongycastleCryptoDigestsSkeinDigest_, digest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoDigestsSkeinDigest)
