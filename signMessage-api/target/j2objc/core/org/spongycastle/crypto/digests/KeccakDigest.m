//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/digests/KeccakDigest.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/digests/KeccakDigest.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/Pack.h"

@interface OrgSpongycastleCryptoDigestsKeccakDigest ()

+ (IOSLongArray *)keccakInitializeRoundConstants;

+ (jboolean)LFSR86540WithByteArray:(IOSByteArray *)LFSR;

+ (IOSIntArray *)keccakInitializeRhoOffsets;

- (void)init__WithInt:(jint)bitLength OBJC_METHOD_FAMILY_NONE;

- (void)initSpongeWithInt:(jint)rate OBJC_METHOD_FAMILY_NONE;

- (void)padAndSwitchToSqueezingPhase;

- (void)KeccakAbsorbWithByteArray:(IOSByteArray *)data
                          withInt:(jint)off;

- (void)KeccakExtract;

- (void)KeccakPermutation;

+ (jlong)leftRotateWithLong:(jlong)v
                    withInt:(jint)r;

+ (void)thetaWithLongArray:(IOSLongArray *)A;

+ (void)rhoWithLongArray:(IOSLongArray *)A;

+ (void)piWithLongArray:(IOSLongArray *)A;

+ (void)chiWithLongArray:(IOSLongArray *)A;

+ (void)iotaWithLongArray:(IOSLongArray *)A
                  withInt:(jint)indexRound;

@end

inline IOSLongArray *OrgSpongycastleCryptoDigestsKeccakDigest_get_KeccakRoundConstants(void);
inline IOSLongArray *OrgSpongycastleCryptoDigestsKeccakDigest_set_KeccakRoundConstants(IOSLongArray *value);
static IOSLongArray *OrgSpongycastleCryptoDigestsKeccakDigest_KeccakRoundConstants;
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastleCryptoDigestsKeccakDigest, KeccakRoundConstants, IOSLongArray *)

inline IOSIntArray *OrgSpongycastleCryptoDigestsKeccakDigest_get_KeccakRhoOffsets(void);
inline IOSIntArray *OrgSpongycastleCryptoDigestsKeccakDigest_set_KeccakRhoOffsets(IOSIntArray *value);
static IOSIntArray *OrgSpongycastleCryptoDigestsKeccakDigest_KeccakRhoOffsets;
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastleCryptoDigestsKeccakDigest, KeccakRhoOffsets, IOSIntArray *)

__attribute__((unused)) static IOSLongArray *OrgSpongycastleCryptoDigestsKeccakDigest_keccakInitializeRoundConstants(void);

__attribute__((unused)) static jboolean OrgSpongycastleCryptoDigestsKeccakDigest_LFSR86540WithByteArray_(IOSByteArray *LFSR);

__attribute__((unused)) static IOSIntArray *OrgSpongycastleCryptoDigestsKeccakDigest_keccakInitializeRhoOffsets(void);

__attribute__((unused)) static void OrgSpongycastleCryptoDigestsKeccakDigest_init__WithInt_(OrgSpongycastleCryptoDigestsKeccakDigest *self, jint bitLength);

__attribute__((unused)) static void OrgSpongycastleCryptoDigestsKeccakDigest_initSpongeWithInt_(OrgSpongycastleCryptoDigestsKeccakDigest *self, jint rate);

__attribute__((unused)) static void OrgSpongycastleCryptoDigestsKeccakDigest_padAndSwitchToSqueezingPhase(OrgSpongycastleCryptoDigestsKeccakDigest *self);

__attribute__((unused)) static void OrgSpongycastleCryptoDigestsKeccakDigest_KeccakAbsorbWithByteArray_withInt_(OrgSpongycastleCryptoDigestsKeccakDigest *self, IOSByteArray *data, jint off);

__attribute__((unused)) static void OrgSpongycastleCryptoDigestsKeccakDigest_KeccakExtract(OrgSpongycastleCryptoDigestsKeccakDigest *self);

__attribute__((unused)) static void OrgSpongycastleCryptoDigestsKeccakDigest_KeccakPermutation(OrgSpongycastleCryptoDigestsKeccakDigest *self);

__attribute__((unused)) static jlong OrgSpongycastleCryptoDigestsKeccakDigest_leftRotateWithLong_withInt_(jlong v, jint r);

__attribute__((unused)) static void OrgSpongycastleCryptoDigestsKeccakDigest_thetaWithLongArray_(IOSLongArray *A);

__attribute__((unused)) static void OrgSpongycastleCryptoDigestsKeccakDigest_rhoWithLongArray_(IOSLongArray *A);

__attribute__((unused)) static void OrgSpongycastleCryptoDigestsKeccakDigest_piWithLongArray_(IOSLongArray *A);

__attribute__((unused)) static void OrgSpongycastleCryptoDigestsKeccakDigest_chiWithLongArray_(IOSLongArray *A);

__attribute__((unused)) static void OrgSpongycastleCryptoDigestsKeccakDigest_iotaWithLongArray_withInt_(IOSLongArray *A, jint indexRound);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoDigestsKeccakDigest)

@implementation OrgSpongycastleCryptoDigestsKeccakDigest

+ (IOSLongArray *)keccakInitializeRoundConstants {
  return OrgSpongycastleCryptoDigestsKeccakDigest_keccakInitializeRoundConstants();
}

+ (jboolean)LFSR86540WithByteArray:(IOSByteArray *)LFSR {
  return OrgSpongycastleCryptoDigestsKeccakDigest_LFSR86540WithByteArray_(LFSR);
}

+ (IOSIntArray *)keccakInitializeRhoOffsets {
  return OrgSpongycastleCryptoDigestsKeccakDigest_keccakInitializeRhoOffsets();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoDigestsKeccakDigest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)bitLength {
  OrgSpongycastleCryptoDigestsKeccakDigest_initWithInt_(self, bitLength);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoDigestsKeccakDigest:(OrgSpongycastleCryptoDigestsKeccakDigest *)source {
  OrgSpongycastleCryptoDigestsKeccakDigest_initWithOrgSpongycastleCryptoDigestsKeccakDigest_(self, source);
  return self;
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$I", @"Keccak-", fixedOutputLength_);
}

- (jint)getDigestSize {
  return fixedOutputLength_ / 8;
}

- (void)updateWithByte:(jbyte)inArg {
  [self absorbWithByteArray:[IOSByteArray newArrayWithBytes:(jbyte[]){ inArg } count:1] withInt:0 withInt:1];
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len {
  [self absorbWithByteArray:inArg withInt:inOff withInt:len];
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  [self squeezeWithByteArray:outArg withInt:outOff withLong:fixedOutputLength_];
  [self reset];
  return [self getDigestSize];
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff
                    withByte:(jbyte)partialByte
                     withInt:(jint)partialBits {
  if (partialBits > 0) {
    [self absorbBitsWithInt:partialByte withInt:partialBits];
  }
  [self squeezeWithByteArray:outArg withInt:outOff withLong:fixedOutputLength_];
  [self reset];
  return [self getDigestSize];
}

- (void)reset {
  OrgSpongycastleCryptoDigestsKeccakDigest_init__WithInt_(self, fixedOutputLength_);
}

- (jint)getByteLength {
  return rate_ / 8;
}

- (void)init__WithInt:(jint)bitLength {
  OrgSpongycastleCryptoDigestsKeccakDigest_init__WithInt_(self, bitLength);
}

- (void)initSpongeWithInt:(jint)rate {
  OrgSpongycastleCryptoDigestsKeccakDigest_initSpongeWithInt_(self, rate);
}

- (void)absorbWithByteArray:(IOSByteArray *)data
                    withInt:(jint)off
                    withInt:(jint)len {
  if ((bitsInQueue_ % 8) != 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"attempt to absorb with odd length queue");
  }
  if (squeezing_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"attempt to absorb while squeezing");
  }
  jint bytesInQueue = JreRShift32(bitsInQueue_, 3);
  jint rateBytes = JreRShift32(rate_, 3);
  jint count = 0;
  while (count < len) {
    if (bytesInQueue == 0 && count <= (len - rateBytes)) {
      do {
        OrgSpongycastleCryptoDigestsKeccakDigest_KeccakAbsorbWithByteArray_withInt_(self, data, off + count);
        count += rateBytes;
      }
      while (count <= (len - rateBytes));
    }
    else {
      jint partialBlock = JavaLangMath_minWithInt_withInt_(rateBytes - bytesInQueue, len - count);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, off + count, dataQueue_, bytesInQueue, partialBlock);
      bytesInQueue += partialBlock;
      count += partialBlock;
      if (bytesInQueue == rateBytes) {
        OrgSpongycastleCryptoDigestsKeccakDigest_KeccakAbsorbWithByteArray_withInt_(self, dataQueue_, 0);
        bytesInQueue = 0;
      }
    }
  }
  bitsInQueue_ = JreLShift32(bytesInQueue, 3);
}

- (void)absorbBitsWithInt:(jint)data
                  withInt:(jint)bits {
  if (bits < 1 || bits > 7) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'bits' must be in the range 1 to 7");
  }
  if ((bitsInQueue_ % 8) != 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"attempt to absorb with odd length queue");
  }
  if (squeezing_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"attempt to absorb while squeezing");
  }
  jint mask = (JreLShift32(1, bits)) - 1;
  *IOSByteArray_GetRef(nil_chk(dataQueue_), JreRShift32(bitsInQueue_, 3)) = (jbyte) (data & mask);
  bitsInQueue_ += bits;
}

- (void)padAndSwitchToSqueezingPhase {
  OrgSpongycastleCryptoDigestsKeccakDigest_padAndSwitchToSqueezingPhase(self);
}

- (void)squeezeWithByteArray:(IOSByteArray *)output
                     withInt:(jint)offset
                    withLong:(jlong)outputLength {
  if (!squeezing_) {
    OrgSpongycastleCryptoDigestsKeccakDigest_padAndSwitchToSqueezingPhase(self);
  }
  if ((outputLength % 8) != 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"outputLength not a multiple of 8");
  }
  jlong i = 0;
  while (i < outputLength) {
    if (bitsInQueue_ == 0) {
      OrgSpongycastleCryptoDigestsKeccakDigest_KeccakPermutation(self);
      OrgSpongycastleCryptoDigestsKeccakDigest_KeccakExtract(self);
      bitsInQueue_ = rate_;
    }
    jint partialBlock = (jint) JavaLangMath_minWithLong_withLong_((jlong) bitsInQueue_, outputLength - i);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(dataQueue_, (rate_ - bitsInQueue_) / 8, output, offset + (jint) (i / 8), partialBlock / 8);
    bitsInQueue_ -= partialBlock;
    i += partialBlock;
  }
}

- (void)KeccakAbsorbWithByteArray:(IOSByteArray *)data
                          withInt:(jint)off {
  OrgSpongycastleCryptoDigestsKeccakDigest_KeccakAbsorbWithByteArray_withInt_(self, data, off);
}

- (void)KeccakExtract {
  OrgSpongycastleCryptoDigestsKeccakDigest_KeccakExtract(self);
}

- (void)KeccakPermutation {
  OrgSpongycastleCryptoDigestsKeccakDigest_KeccakPermutation(self);
}

+ (jlong)leftRotateWithLong:(jlong)v
                    withInt:(jint)r {
  return OrgSpongycastleCryptoDigestsKeccakDigest_leftRotateWithLong_withInt_(v, r);
}

+ (void)thetaWithLongArray:(IOSLongArray *)A {
  OrgSpongycastleCryptoDigestsKeccakDigest_thetaWithLongArray_(A);
}

+ (void)rhoWithLongArray:(IOSLongArray *)A {
  OrgSpongycastleCryptoDigestsKeccakDigest_rhoWithLongArray_(A);
}

+ (void)piWithLongArray:(IOSLongArray *)A {
  OrgSpongycastleCryptoDigestsKeccakDigest_piWithLongArray_(A);
}

+ (void)chiWithLongArray:(IOSLongArray *)A {
  OrgSpongycastleCryptoDigestsKeccakDigest_chiWithLongArray_(A);
}

+ (void)iotaWithLongArray:(IOSLongArray *)A
                  withInt:(jint)indexRound {
  OrgSpongycastleCryptoDigestsKeccakDigest_iotaWithLongArray_withInt_(A, indexRound);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[J", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 7, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 22, 21, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 23, 21, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 24, 21, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 25, 26, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(keccakInitializeRoundConstants);
  methods[1].selector = @selector(LFSR86540WithByteArray:);
  methods[2].selector = @selector(keccakInitializeRhoOffsets);
  methods[3].selector = @selector(init);
  methods[4].selector = @selector(initWithInt:);
  methods[5].selector = @selector(initWithOrgSpongycastleCryptoDigestsKeccakDigest:);
  methods[6].selector = @selector(getAlgorithmName);
  methods[7].selector = @selector(getDigestSize);
  methods[8].selector = @selector(updateWithByte:);
  methods[9].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[10].selector = @selector(doFinalWithByteArray:withInt:);
  methods[11].selector = @selector(doFinalWithByteArray:withInt:withByte:withInt:);
  methods[12].selector = @selector(reset);
  methods[13].selector = @selector(getByteLength);
  methods[14].selector = @selector(init__WithInt:);
  methods[15].selector = @selector(initSpongeWithInt:);
  methods[16].selector = @selector(absorbWithByteArray:withInt:withInt:);
  methods[17].selector = @selector(absorbBitsWithInt:withInt:);
  methods[18].selector = @selector(padAndSwitchToSqueezingPhase);
  methods[19].selector = @selector(squeezeWithByteArray:withInt:withLong:);
  methods[20].selector = @selector(KeccakAbsorbWithByteArray:withInt:);
  methods[21].selector = @selector(KeccakExtract);
  methods[22].selector = @selector(KeccakPermutation);
  methods[23].selector = @selector(leftRotateWithLong:withInt:);
  methods[24].selector = @selector(thetaWithLongArray:);
  methods[25].selector = @selector(rhoWithLongArray:);
  methods[26].selector = @selector(piWithLongArray:);
  methods[27].selector = @selector(chiWithLongArray:);
  methods[28].selector = @selector(iotaWithLongArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "KeccakRoundConstants", "[J", .constantValue.asLong = 0, 0xa, -1, 27, -1, -1 },
    { "KeccakRhoOffsets", "[I", .constantValue.asLong = 0, 0xa, -1, 28, -1, -1 },
    { "state_", "[J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "dataQueue_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "rate_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "bitsInQueue_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "fixedOutputLength_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "squeezing_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LFSR86540", "[B", "I", "LOrgSpongycastleCryptoDigestsKeccakDigest;", "update", "B", "[BII", "doFinal", "[BI", "[BIBI", "init", "initSponge", "absorb", "absorbBits", "II", "squeeze", "[BIJ", "KeccakAbsorb", "leftRotate", "JI", "theta", "[J", "rho", "pi", "chi", "iota", "[JI", &OrgSpongycastleCryptoDigestsKeccakDigest_KeccakRoundConstants, &OrgSpongycastleCryptoDigestsKeccakDigest_KeccakRhoOffsets };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoDigestsKeccakDigest = { "KeccakDigest", "org.spongycastle.crypto.digests", ptrTable, methods, fields, 7, 0x1, 29, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoDigestsKeccakDigest;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoDigestsKeccakDigest class]) {
    OrgSpongycastleCryptoDigestsKeccakDigest_KeccakRoundConstants = OrgSpongycastleCryptoDigestsKeccakDigest_keccakInitializeRoundConstants();
    OrgSpongycastleCryptoDigestsKeccakDigest_KeccakRhoOffsets = OrgSpongycastleCryptoDigestsKeccakDigest_keccakInitializeRhoOffsets();
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoDigestsKeccakDigest)
  }
}

@end

IOSLongArray *OrgSpongycastleCryptoDigestsKeccakDigest_keccakInitializeRoundConstants() {
  OrgSpongycastleCryptoDigestsKeccakDigest_initialize();
  IOSLongArray *keccakRoundConstants = [IOSLongArray newArrayWithLength:24];
  IOSByteArray *LFSRstate = [IOSByteArray newArrayWithLength:1];
  *IOSByteArray_GetRef(LFSRstate, 0) = (jint) 0x01;
  jint i;
  jint j;
  jint bitPosition;
  for (i = 0; i < 24; i++) {
    *IOSLongArray_GetRef(keccakRoundConstants, i) = 0;
    for (j = 0; j < 7; j++) {
      bitPosition = (JreLShift32(1, j)) - 1;
      if (OrgSpongycastleCryptoDigestsKeccakDigest_LFSR86540WithByteArray_(LFSRstate)) {
        *IOSLongArray_GetRef(keccakRoundConstants, i) ^= JreLShift64(1LL, bitPosition);
      }
    }
  }
  return keccakRoundConstants;
}

jboolean OrgSpongycastleCryptoDigestsKeccakDigest_LFSR86540WithByteArray_(IOSByteArray *LFSR) {
  OrgSpongycastleCryptoDigestsKeccakDigest_initialize();
  jboolean result = (((IOSByteArray_Get(nil_chk(LFSR), 0)) & (jint) 0x01) != 0);
  if (((IOSByteArray_Get(LFSR, 0)) & (jint) 0x80) != 0) {
    *IOSByteArray_GetRef(LFSR, 0) = (jbyte) ((JreLShift32((IOSByteArray_Get(LFSR, 0)), 1)) ^ (jint) 0x71);
  }
  else {
    JreLShiftAssignByte(IOSByteArray_GetRef(LFSR, 0), 1);
  }
  return result;
}

IOSIntArray *OrgSpongycastleCryptoDigestsKeccakDigest_keccakInitializeRhoOffsets() {
  OrgSpongycastleCryptoDigestsKeccakDigest_initialize();
  IOSIntArray *keccakRhoOffsets = [IOSIntArray newArrayWithLength:25];
  jint x;
  jint y;
  jint t;
  jint newX;
  jint newY;
  *IOSIntArray_GetRef(keccakRhoOffsets, (((0) % 5) + 5 * ((0) % 5))) = 0;
  x = 1;
  y = 0;
  for (t = 0; t < 24; t++) {
    *IOSIntArray_GetRef(keccakRhoOffsets, (((x) % 5) + 5 * ((y) % 5))) = ((t + 1) * (t + 2) / 2) % 64;
    newX = (0 * x + 1 * y) % 5;
    newY = (2 * x + 3 * y) % 5;
    x = newX;
    y = newY;
  }
  return keccakRhoOffsets;
}

void OrgSpongycastleCryptoDigestsKeccakDigest_init(OrgSpongycastleCryptoDigestsKeccakDigest *self) {
  OrgSpongycastleCryptoDigestsKeccakDigest_initWithInt_(self, 288);
}

OrgSpongycastleCryptoDigestsKeccakDigest *new_OrgSpongycastleCryptoDigestsKeccakDigest_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoDigestsKeccakDigest, init)
}

OrgSpongycastleCryptoDigestsKeccakDigest *create_OrgSpongycastleCryptoDigestsKeccakDigest_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoDigestsKeccakDigest, init)
}

void OrgSpongycastleCryptoDigestsKeccakDigest_initWithInt_(OrgSpongycastleCryptoDigestsKeccakDigest *self, jint bitLength) {
  NSObject_init(self);
  self->state_ = [IOSLongArray newArrayWithLength:(1600 / 64)];
  self->dataQueue_ = [IOSByteArray newArrayWithLength:(1536 / 8)];
  OrgSpongycastleCryptoDigestsKeccakDigest_init__WithInt_(self, bitLength);
}

OrgSpongycastleCryptoDigestsKeccakDigest *new_OrgSpongycastleCryptoDigestsKeccakDigest_initWithInt_(jint bitLength) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoDigestsKeccakDigest, initWithInt_, bitLength)
}

OrgSpongycastleCryptoDigestsKeccakDigest *create_OrgSpongycastleCryptoDigestsKeccakDigest_initWithInt_(jint bitLength) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoDigestsKeccakDigest, initWithInt_, bitLength)
}

void OrgSpongycastleCryptoDigestsKeccakDigest_initWithOrgSpongycastleCryptoDigestsKeccakDigest_(OrgSpongycastleCryptoDigestsKeccakDigest *self, OrgSpongycastleCryptoDigestsKeccakDigest *source) {
  NSObject_init(self);
  self->state_ = [IOSLongArray newArrayWithLength:(1600 / 64)];
  self->dataQueue_ = [IOSByteArray newArrayWithLength:(1536 / 8)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(((OrgSpongycastleCryptoDigestsKeccakDigest *) nil_chk(source))->state_, 0, self->state_, 0, source->state_->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(source->dataQueue_, 0, self->dataQueue_, 0, ((IOSByteArray *) nil_chk(source->dataQueue_))->size_);
  self->rate_ = source->rate_;
  self->bitsInQueue_ = source->bitsInQueue_;
  self->fixedOutputLength_ = source->fixedOutputLength_;
  self->squeezing_ = source->squeezing_;
}

OrgSpongycastleCryptoDigestsKeccakDigest *new_OrgSpongycastleCryptoDigestsKeccakDigest_initWithOrgSpongycastleCryptoDigestsKeccakDigest_(OrgSpongycastleCryptoDigestsKeccakDigest *source) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoDigestsKeccakDigest, initWithOrgSpongycastleCryptoDigestsKeccakDigest_, source)
}

OrgSpongycastleCryptoDigestsKeccakDigest *create_OrgSpongycastleCryptoDigestsKeccakDigest_initWithOrgSpongycastleCryptoDigestsKeccakDigest_(OrgSpongycastleCryptoDigestsKeccakDigest *source) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoDigestsKeccakDigest, initWithOrgSpongycastleCryptoDigestsKeccakDigest_, source)
}

void OrgSpongycastleCryptoDigestsKeccakDigest_init__WithInt_(OrgSpongycastleCryptoDigestsKeccakDigest *self, jint bitLength) {
  switch (bitLength) {
    case 128:
    case 224:
    case 256:
    case 288:
    case 384:
    case 512:
    OrgSpongycastleCryptoDigestsKeccakDigest_initSpongeWithInt_(self, 1600 - (JreLShift32(bitLength, 1)));
    break;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"bitLength must be one of 128, 224, 256, 288, 384, or 512.");
  }
}

void OrgSpongycastleCryptoDigestsKeccakDigest_initSpongeWithInt_(OrgSpongycastleCryptoDigestsKeccakDigest *self, jint rate) {
  if ((rate <= 0) || (rate >= 1600) || ((rate % 64) != 0)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"invalid rate value");
  }
  self->rate_ = rate;
  for (jint i = 0; i < ((IOSLongArray *) nil_chk(self->state_))->size_; ++i) {
    *IOSLongArray_GetRef(self->state_, i) = 0LL;
  }
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(self->dataQueue_, (jbyte) 0);
  self->bitsInQueue_ = 0;
  self->squeezing_ = false;
  self->fixedOutputLength_ = (1600 - rate) / 2;
}

void OrgSpongycastleCryptoDigestsKeccakDigest_padAndSwitchToSqueezingPhase(OrgSpongycastleCryptoDigestsKeccakDigest *self) {
  *IOSByteArray_GetRef(nil_chk(self->dataQueue_), JreRShift32(self->bitsInQueue_, 3)) |= (jbyte) (JreLShift64(1LL, (self->bitsInQueue_ & 7)));
  if (++self->bitsInQueue_ == self->rate_) {
    OrgSpongycastleCryptoDigestsKeccakDigest_KeccakAbsorbWithByteArray_withInt_(self, self->dataQueue_, 0);
    self->bitsInQueue_ = 0;
  }
  {
    jint full = JreRShift32(self->bitsInQueue_, 6);
    jint partial = self->bitsInQueue_ & 63;
    jint off = 0;
    for (jint i = 0; i < full; ++i) {
      *IOSLongArray_GetRef(nil_chk(self->state_), i) ^= OrgSpongycastleUtilPack_littleEndianToLongWithByteArray_withInt_(self->dataQueue_, off);
      off += 8;
    }
    if (partial > 0) {
      jlong mask = (JreLShift64(1LL, partial)) - 1LL;
      *IOSLongArray_GetRef(nil_chk(self->state_), full) ^= OrgSpongycastleUtilPack_littleEndianToLongWithByteArray_withInt_(self->dataQueue_, off) & mask;
    }
    *IOSLongArray_GetRef(nil_chk(self->state_), JreRShift32((self->rate_ - 1), 6)) ^= (JreLShift64(1LL, 63));
  }
  OrgSpongycastleCryptoDigestsKeccakDigest_KeccakPermutation(self);
  OrgSpongycastleCryptoDigestsKeccakDigest_KeccakExtract(self);
  self->bitsInQueue_ = self->rate_;
  self->squeezing_ = true;
}

void OrgSpongycastleCryptoDigestsKeccakDigest_KeccakAbsorbWithByteArray_withInt_(OrgSpongycastleCryptoDigestsKeccakDigest *self, IOSByteArray *data, jint off) {
  jint count = JreRShift32(self->rate_, 6);
  for (jint i = 0; i < count; ++i) {
    *IOSLongArray_GetRef(nil_chk(self->state_), i) ^= OrgSpongycastleUtilPack_littleEndianToLongWithByteArray_withInt_(data, off);
    off += 8;
  }
  OrgSpongycastleCryptoDigestsKeccakDigest_KeccakPermutation(self);
}

void OrgSpongycastleCryptoDigestsKeccakDigest_KeccakExtract(OrgSpongycastleCryptoDigestsKeccakDigest *self) {
  OrgSpongycastleUtilPack_longToLittleEndianWithLongArray_withInt_withInt_withByteArray_withInt_(self->state_, 0, JreRShift32(self->rate_, 6), self->dataQueue_, 0);
}

void OrgSpongycastleCryptoDigestsKeccakDigest_KeccakPermutation(OrgSpongycastleCryptoDigestsKeccakDigest *self) {
  for (jint i = 0; i < 24; i++) {
    OrgSpongycastleCryptoDigestsKeccakDigest_thetaWithLongArray_(self->state_);
    OrgSpongycastleCryptoDigestsKeccakDigest_rhoWithLongArray_(self->state_);
    OrgSpongycastleCryptoDigestsKeccakDigest_piWithLongArray_(self->state_);
    OrgSpongycastleCryptoDigestsKeccakDigest_chiWithLongArray_(self->state_);
    OrgSpongycastleCryptoDigestsKeccakDigest_iotaWithLongArray_withInt_(self->state_, i);
  }
}

jlong OrgSpongycastleCryptoDigestsKeccakDigest_leftRotateWithLong_withInt_(jlong v, jint r) {
  OrgSpongycastleCryptoDigestsKeccakDigest_initialize();
  return (JreLShift64(v, r)) | (JreURShift64(v, -r));
}

void OrgSpongycastleCryptoDigestsKeccakDigest_thetaWithLongArray_(IOSLongArray *A) {
  OrgSpongycastleCryptoDigestsKeccakDigest_initialize();
  jlong C0 = IOSLongArray_Get(nil_chk(A), 0 + 0) ^ IOSLongArray_Get(A, 0 + 5) ^ IOSLongArray_Get(A, 0 + 10) ^ IOSLongArray_Get(A, 0 + 15) ^ IOSLongArray_Get(A, 0 + 20);
  jlong C1 = IOSLongArray_Get(A, 1 + 0) ^ IOSLongArray_Get(A, 1 + 5) ^ IOSLongArray_Get(A, 1 + 10) ^ IOSLongArray_Get(A, 1 + 15) ^ IOSLongArray_Get(A, 1 + 20);
  jlong C2 = IOSLongArray_Get(A, 2 + 0) ^ IOSLongArray_Get(A, 2 + 5) ^ IOSLongArray_Get(A, 2 + 10) ^ IOSLongArray_Get(A, 2 + 15) ^ IOSLongArray_Get(A, 2 + 20);
  jlong C3 = IOSLongArray_Get(A, 3 + 0) ^ IOSLongArray_Get(A, 3 + 5) ^ IOSLongArray_Get(A, 3 + 10) ^ IOSLongArray_Get(A, 3 + 15) ^ IOSLongArray_Get(A, 3 + 20);
  jlong C4 = IOSLongArray_Get(A, 4 + 0) ^ IOSLongArray_Get(A, 4 + 5) ^ IOSLongArray_Get(A, 4 + 10) ^ IOSLongArray_Get(A, 4 + 15) ^ IOSLongArray_Get(A, 4 + 20);
  jlong dX = OrgSpongycastleCryptoDigestsKeccakDigest_leftRotateWithLong_withInt_(C1, 1) ^ C4;
  *IOSLongArray_GetRef(A, 0) ^= dX;
  *IOSLongArray_GetRef(A, 5) ^= dX;
  *IOSLongArray_GetRef(A, 10) ^= dX;
  *IOSLongArray_GetRef(A, 15) ^= dX;
  *IOSLongArray_GetRef(A, 20) ^= dX;
  dX = OrgSpongycastleCryptoDigestsKeccakDigest_leftRotateWithLong_withInt_(C2, 1) ^ C0;
  *IOSLongArray_GetRef(A, 1) ^= dX;
  *IOSLongArray_GetRef(A, 6) ^= dX;
  *IOSLongArray_GetRef(A, 11) ^= dX;
  *IOSLongArray_GetRef(A, 16) ^= dX;
  *IOSLongArray_GetRef(A, 21) ^= dX;
  dX = OrgSpongycastleCryptoDigestsKeccakDigest_leftRotateWithLong_withInt_(C3, 1) ^ C1;
  *IOSLongArray_GetRef(A, 2) ^= dX;
  *IOSLongArray_GetRef(A, 7) ^= dX;
  *IOSLongArray_GetRef(A, 12) ^= dX;
  *IOSLongArray_GetRef(A, 17) ^= dX;
  *IOSLongArray_GetRef(A, 22) ^= dX;
  dX = OrgSpongycastleCryptoDigestsKeccakDigest_leftRotateWithLong_withInt_(C4, 1) ^ C2;
  *IOSLongArray_GetRef(A, 3) ^= dX;
  *IOSLongArray_GetRef(A, 8) ^= dX;
  *IOSLongArray_GetRef(A, 13) ^= dX;
  *IOSLongArray_GetRef(A, 18) ^= dX;
  *IOSLongArray_GetRef(A, 23) ^= dX;
  dX = OrgSpongycastleCryptoDigestsKeccakDigest_leftRotateWithLong_withInt_(C0, 1) ^ C3;
  *IOSLongArray_GetRef(A, 4) ^= dX;
  *IOSLongArray_GetRef(A, 9) ^= dX;
  *IOSLongArray_GetRef(A, 14) ^= dX;
  *IOSLongArray_GetRef(A, 19) ^= dX;
  *IOSLongArray_GetRef(A, 24) ^= dX;
}

void OrgSpongycastleCryptoDigestsKeccakDigest_rhoWithLongArray_(IOSLongArray *A) {
  OrgSpongycastleCryptoDigestsKeccakDigest_initialize();
  for (jint x = 1; x < 25; x++) {
    *IOSLongArray_GetRef(nil_chk(A), x) = OrgSpongycastleCryptoDigestsKeccakDigest_leftRotateWithLong_withInt_(IOSLongArray_Get(A, x), IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoDigestsKeccakDigest_KeccakRhoOffsets), x));
  }
}

void OrgSpongycastleCryptoDigestsKeccakDigest_piWithLongArray_(IOSLongArray *A) {
  OrgSpongycastleCryptoDigestsKeccakDigest_initialize();
  jlong a1 = IOSLongArray_Get(nil_chk(A), 1);
  *IOSLongArray_GetRef(A, 1) = IOSLongArray_Get(A, 6);
  *IOSLongArray_GetRef(A, 6) = IOSLongArray_Get(A, 9);
  *IOSLongArray_GetRef(A, 9) = IOSLongArray_Get(A, 22);
  *IOSLongArray_GetRef(A, 22) = IOSLongArray_Get(A, 14);
  *IOSLongArray_GetRef(A, 14) = IOSLongArray_Get(A, 20);
  *IOSLongArray_GetRef(A, 20) = IOSLongArray_Get(A, 2);
  *IOSLongArray_GetRef(A, 2) = IOSLongArray_Get(A, 12);
  *IOSLongArray_GetRef(A, 12) = IOSLongArray_Get(A, 13);
  *IOSLongArray_GetRef(A, 13) = IOSLongArray_Get(A, 19);
  *IOSLongArray_GetRef(A, 19) = IOSLongArray_Get(A, 23);
  *IOSLongArray_GetRef(A, 23) = IOSLongArray_Get(A, 15);
  *IOSLongArray_GetRef(A, 15) = IOSLongArray_Get(A, 4);
  *IOSLongArray_GetRef(A, 4) = IOSLongArray_Get(A, 24);
  *IOSLongArray_GetRef(A, 24) = IOSLongArray_Get(A, 21);
  *IOSLongArray_GetRef(A, 21) = IOSLongArray_Get(A, 8);
  *IOSLongArray_GetRef(A, 8) = IOSLongArray_Get(A, 16);
  *IOSLongArray_GetRef(A, 16) = IOSLongArray_Get(A, 5);
  *IOSLongArray_GetRef(A, 5) = IOSLongArray_Get(A, 3);
  *IOSLongArray_GetRef(A, 3) = IOSLongArray_Get(A, 18);
  *IOSLongArray_GetRef(A, 18) = IOSLongArray_Get(A, 17);
  *IOSLongArray_GetRef(A, 17) = IOSLongArray_Get(A, 11);
  *IOSLongArray_GetRef(A, 11) = IOSLongArray_Get(A, 7);
  *IOSLongArray_GetRef(A, 7) = IOSLongArray_Get(A, 10);
  *IOSLongArray_GetRef(A, 10) = a1;
}

void OrgSpongycastleCryptoDigestsKeccakDigest_chiWithLongArray_(IOSLongArray *A) {
  OrgSpongycastleCryptoDigestsKeccakDigest_initialize();
  jlong chiC0;
  jlong chiC1;
  jlong chiC2;
  jlong chiC3;
  jlong chiC4;
  for (jint yBy5 = 0; yBy5 < 25; yBy5 += 5) {
    chiC0 = IOSLongArray_Get(nil_chk(A), 0 + yBy5) ^ ((~IOSLongArray_Get(A, (((0 + 1) % 5) + yBy5))) & IOSLongArray_Get(A, (((0 + 2) % 5) + yBy5)));
    chiC1 = IOSLongArray_Get(A, 1 + yBy5) ^ ((~IOSLongArray_Get(A, (((1 + 1) % 5) + yBy5))) & IOSLongArray_Get(A, (((1 + 2) % 5) + yBy5)));
    chiC2 = IOSLongArray_Get(A, 2 + yBy5) ^ ((~IOSLongArray_Get(A, (((2 + 1) % 5) + yBy5))) & IOSLongArray_Get(A, (((2 + 2) % 5) + yBy5)));
    chiC3 = IOSLongArray_Get(A, 3 + yBy5) ^ ((~IOSLongArray_Get(A, (((3 + 1) % 5) + yBy5))) & IOSLongArray_Get(A, (((3 + 2) % 5) + yBy5)));
    chiC4 = IOSLongArray_Get(A, 4 + yBy5) ^ ((~IOSLongArray_Get(A, (((4 + 1) % 5) + yBy5))) & IOSLongArray_Get(A, (((4 + 2) % 5) + yBy5)));
    *IOSLongArray_GetRef(A, 0 + yBy5) = chiC0;
    *IOSLongArray_GetRef(A, 1 + yBy5) = chiC1;
    *IOSLongArray_GetRef(A, 2 + yBy5) = chiC2;
    *IOSLongArray_GetRef(A, 3 + yBy5) = chiC3;
    *IOSLongArray_GetRef(A, 4 + yBy5) = chiC4;
  }
}

void OrgSpongycastleCryptoDigestsKeccakDigest_iotaWithLongArray_withInt_(IOSLongArray *A, jint indexRound) {
  OrgSpongycastleCryptoDigestsKeccakDigest_initialize();
  *IOSLongArray_GetRef(nil_chk(A), 0) ^= IOSLongArray_Get(nil_chk(OrgSpongycastleCryptoDigestsKeccakDigest_KeccakRoundConstants), indexRound);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoDigestsKeccakDigest)
