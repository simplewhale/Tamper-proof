//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/encodings/OAEPEncoding.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/AsymmetricBlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/InvalidCipherTextException.h"
#include "org/spongycastle/crypto/encodings/OAEPEncoding.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/crypto/util/DigestFactory.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleCryptoEncodingsOAEPEncoding () {
 @public
  IOSByteArray *defHash_;
  id<OrgSpongycastleCryptoDigest> mgf1Hash_;
  id<OrgSpongycastleCryptoAsymmetricBlockCipher> engine_;
  JavaSecuritySecureRandom *random_;
  jboolean forEncryption_;
}

- (void)ItoOSPWithInt:(jint)i
        withByteArray:(IOSByteArray *)sp;

- (IOSByteArray *)maskGeneratorFunction1WithByteArray:(IOSByteArray *)Z
                                              withInt:(jint)zOff
                                              withInt:(jint)zLen
                                              withInt:(jint)length;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEncodingsOAEPEncoding, defHash_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEncodingsOAEPEncoding, mgf1Hash_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEncodingsOAEPEncoding, engine_, id<OrgSpongycastleCryptoAsymmetricBlockCipher>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEncodingsOAEPEncoding, random_, JavaSecuritySecureRandom *)

__attribute__((unused)) static void OrgSpongycastleCryptoEncodingsOAEPEncoding_ItoOSPWithInt_withByteArray_(OrgSpongycastleCryptoEncodingsOAEPEncoding *self, jint i, IOSByteArray *sp);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoEncodingsOAEPEncoding_maskGeneratorFunction1WithByteArray_withInt_withInt_withInt_(OrgSpongycastleCryptoEncodingsOAEPEncoding *self, IOSByteArray *Z, jint zOff, jint zLen, jint length);

@implementation OrgSpongycastleCryptoEncodingsOAEPEncoding

- (instancetype)initWithOrgSpongycastleCryptoAsymmetricBlockCipher:(id<OrgSpongycastleCryptoAsymmetricBlockCipher>)cipher {
  OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_(self, cipher);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoAsymmetricBlockCipher:(id<OrgSpongycastleCryptoAsymmetricBlockCipher>)cipher
                                   withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hash_ {
  OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_(self, cipher, hash_);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoAsymmetricBlockCipher:(id<OrgSpongycastleCryptoAsymmetricBlockCipher>)cipher
                                   withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hash_
                                                     withByteArray:(IOSByteArray *)encodingParams {
  OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withByteArray_(self, cipher, hash_, encodingParams);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoAsymmetricBlockCipher:(id<OrgSpongycastleCryptoAsymmetricBlockCipher>)cipher
                                   withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hash_
                                   withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)mgf1Hash
                                                     withByteArray:(IOSByteArray *)encodingParams {
  OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withByteArray_(self, cipher, hash_, mgf1Hash, encodingParams);
  return self;
}

- (id<OrgSpongycastleCryptoAsymmetricBlockCipher>)getUnderlyingCipher {
  return engine_;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
    OrgSpongycastleCryptoParamsParametersWithRandom *rParam = (OrgSpongycastleCryptoParamsParametersWithRandom *) param;
    self->random_ = [((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
  }
  else {
    self->random_ = new_JavaSecuritySecureRandom_init();
  }
  [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(engine_)) init__WithBoolean:forEncryption withOrgSpongycastleCryptoCipherParameters:param];
  self->forEncryption_ = forEncryption;
}

- (jint)getInputBlockSize {
  jint baseBlockSize = [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(engine_)) getInputBlockSize];
  if (forEncryption_) {
    return baseBlockSize - 1 - 2 * ((IOSByteArray *) nil_chk(defHash_))->size_;
  }
  else {
    return baseBlockSize;
  }
}

- (jint)getOutputBlockSize {
  jint baseBlockSize = [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(engine_)) getOutputBlockSize];
  if (forEncryption_) {
    return baseBlockSize;
  }
  else {
    return baseBlockSize - 1 - 2 * ((IOSByteArray *) nil_chk(defHash_))->size_;
  }
}

- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen {
  if (forEncryption_) {
    return [self encodeBlockWithByteArray:inArg withInt:inOff withInt:inLen];
  }
  else {
    return [self decodeBlockWithByteArray:inArg withInt:inOff withInt:inLen];
  }
}

- (IOSByteArray *)encodeBlockWithByteArray:(IOSByteArray *)inArg
                                   withInt:(jint)inOff
                                   withInt:(jint)inLen {
  if (inLen > [self getInputBlockSize]) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input data too long");
  }
  IOSByteArray *block = [IOSByteArray newArrayWithLength:[self getInputBlockSize] + 1 + 2 * ((IOSByteArray *) nil_chk(defHash_))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, block, block->size_ - inLen, inLen);
  *IOSByteArray_GetRef(block, block->size_ - inLen - 1) = (jint) 0x01;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(defHash_, 0, block, ((IOSByteArray *) nil_chk(defHash_))->size_, defHash_->size_);
  IOSByteArray *seed = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(defHash_))->size_];
  [((JavaSecuritySecureRandom *) nil_chk(random_)) nextBytesWithByteArray:seed];
  IOSByteArray *mask = OrgSpongycastleCryptoEncodingsOAEPEncoding_maskGeneratorFunction1WithByteArray_withInt_withInt_withInt_(self, seed, 0, seed->size_, block->size_ - ((IOSByteArray *) nil_chk(defHash_))->size_);
  for (jint i = ((IOSByteArray *) nil_chk(defHash_))->size_; i != block->size_; i++) {
    *IOSByteArray_GetRef(block, i) ^= IOSByteArray_Get(nil_chk(mask), i - defHash_->size_);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(seed, 0, block, 0, defHash_->size_);
  mask = OrgSpongycastleCryptoEncodingsOAEPEncoding_maskGeneratorFunction1WithByteArray_withInt_withInt_withInt_(self, block, ((IOSByteArray *) nil_chk(defHash_))->size_, block->size_ - defHash_->size_, defHash_->size_);
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(defHash_))->size_; i++) {
    *IOSByteArray_GetRef(block, i) ^= IOSByteArray_Get(nil_chk(mask), i);
  }
  return [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(engine_)) processBlockWithByteArray:block withInt:0 withInt:block->size_];
}

- (IOSByteArray *)decodeBlockWithByteArray:(IOSByteArray *)inArg
                                   withInt:(jint)inOff
                                   withInt:(jint)inLen {
  IOSByteArray *data = [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(engine_)) processBlockWithByteArray:inArg withInt:inOff withInt:inLen];
  IOSByteArray *block = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(engine_)) getOutputBlockSize]];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data, 0, block, block->size_ - ((IOSByteArray *) nil_chk(data))->size_, data->size_);
  jboolean shortData = (block->size_ < (2 * ((IOSByteArray *) nil_chk(defHash_))->size_) + 1);
  IOSByteArray *mask = OrgSpongycastleCryptoEncodingsOAEPEncoding_maskGeneratorFunction1WithByteArray_withInt_withInt_withInt_(self, block, defHash_->size_, block->size_ - defHash_->size_, defHash_->size_);
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(defHash_))->size_; i++) {
    *IOSByteArray_GetRef(block, i) ^= IOSByteArray_Get(nil_chk(mask), i);
  }
  mask = OrgSpongycastleCryptoEncodingsOAEPEncoding_maskGeneratorFunction1WithByteArray_withInt_withInt_withInt_(self, block, 0, defHash_->size_, block->size_ - defHash_->size_);
  for (jint i = ((IOSByteArray *) nil_chk(defHash_))->size_; i != block->size_; i++) {
    *IOSByteArray_GetRef(block, i) ^= IOSByteArray_Get(nil_chk(mask), i - defHash_->size_);
  }
  jboolean defHashWrong = false;
  for (jint i = 0; i != defHash_->size_; i++) {
    if (IOSByteArray_Get(defHash_, i) != IOSByteArray_Get(block, defHash_->size_ + i)) {
      defHashWrong = true;
    }
  }
  jint start = block->size_;
  for (jint index = 2 * defHash_->size_; index != block->size_; index++) {
    if ((IOSByteArray_Get(block, index) != 0) & (start == block->size_)) {
      start = index;
    }
  }
  jboolean dataStartWrong = ((start > (block->size_ - 1)) | (IOSByteArray_Get(block, start) != 1));
  start++;
  if (defHashWrong | shortData | dataStartWrong) {
    OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(block, (jbyte) 0);
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"data wrong");
  }
  IOSByteArray *output = [IOSByteArray newArrayWithLength:block->size_ - start];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, start, output, 0, output->size_);
  return output;
}

- (void)ItoOSPWithInt:(jint)i
        withByteArray:(IOSByteArray *)sp {
  OrgSpongycastleCryptoEncodingsOAEPEncoding_ItoOSPWithInt_withByteArray_(self, i, sp);
}

- (IOSByteArray *)maskGeneratorFunction1WithByteArray:(IOSByteArray *)Z
                                              withInt:(jint)zOff
                                              withInt:(jint)zLen
                                              withInt:(jint)length {
  return OrgSpongycastleCryptoEncodingsOAEPEncoding_maskGeneratorFunction1WithByteArray_withInt_withInt_withInt_(self, Z, zOff, zLen, length);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoAsymmetricBlockCipher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "[B", 0x1, 9, 7, 8, -1, -1, -1 },
    { NULL, "[B", 0x1, 10, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoAsymmetricBlockCipher:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoAsymmetricBlockCipher:withOrgSpongycastleCryptoDigest:);
  methods[2].selector = @selector(initWithOrgSpongycastleCryptoAsymmetricBlockCipher:withOrgSpongycastleCryptoDigest:withByteArray:);
  methods[3].selector = @selector(initWithOrgSpongycastleCryptoAsymmetricBlockCipher:withOrgSpongycastleCryptoDigest:withOrgSpongycastleCryptoDigest:withByteArray:);
  methods[4].selector = @selector(getUnderlyingCipher);
  methods[5].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[6].selector = @selector(getInputBlockSize);
  methods[7].selector = @selector(getOutputBlockSize);
  methods[8].selector = @selector(processBlockWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(encodeBlockWithByteArray:withInt:withInt:);
  methods[10].selector = @selector(decodeBlockWithByteArray:withInt:withInt:);
  methods[11].selector = @selector(ItoOSPWithInt:withByteArray:);
  methods[12].selector = @selector(maskGeneratorFunction1WithByteArray:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "defHash_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mgf1Hash_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "engine_", "LOrgSpongycastleCryptoAsymmetricBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoAsymmetricBlockCipher;", "LOrgSpongycastleCryptoAsymmetricBlockCipher;LOrgSpongycastleCryptoDigest;", "LOrgSpongycastleCryptoAsymmetricBlockCipher;LOrgSpongycastleCryptoDigest;[B", "LOrgSpongycastleCryptoAsymmetricBlockCipher;LOrgSpongycastleCryptoDigest;LOrgSpongycastleCryptoDigest;[B", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "processBlock", "[BII", "LOrgSpongycastleCryptoInvalidCipherTextException;", "encodeBlock", "decodeBlock", "ItoOSP", "I[B", "maskGeneratorFunction1", "[BIII" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEncodingsOAEPEncoding = { "OAEPEncoding", "org.spongycastle.crypto.encodings", ptrTable, methods, fields, 7, 0x1, 13, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEncodingsOAEPEncoding;
}

@end

void OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_(OrgSpongycastleCryptoEncodingsOAEPEncoding *self, id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher) {
  OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withByteArray_(self, cipher, OrgSpongycastleCryptoUtilDigestFactory_createSHA1(), nil);
}

OrgSpongycastleCryptoEncodingsOAEPEncoding *new_OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEncodingsOAEPEncoding, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_, cipher)
}

OrgSpongycastleCryptoEncodingsOAEPEncoding *create_OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEncodingsOAEPEncoding, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_, cipher)
}

void OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoEncodingsOAEPEncoding *self, id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> hash_) {
  OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withByteArray_(self, cipher, hash_, nil);
}

OrgSpongycastleCryptoEncodingsOAEPEncoding *new_OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> hash_) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEncodingsOAEPEncoding, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_, cipher, hash_)
}

OrgSpongycastleCryptoEncodingsOAEPEncoding *create_OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> hash_) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEncodingsOAEPEncoding, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_, cipher, hash_)
}

void OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withByteArray_(OrgSpongycastleCryptoEncodingsOAEPEncoding *self, id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> hash_, IOSByteArray *encodingParams) {
  OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withByteArray_(self, cipher, hash_, hash_, encodingParams);
}

OrgSpongycastleCryptoEncodingsOAEPEncoding *new_OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withByteArray_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> hash_, IOSByteArray *encodingParams) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEncodingsOAEPEncoding, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withByteArray_, cipher, hash_, encodingParams)
}

OrgSpongycastleCryptoEncodingsOAEPEncoding *create_OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withByteArray_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> hash_, IOSByteArray *encodingParams) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEncodingsOAEPEncoding, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withByteArray_, cipher, hash_, encodingParams)
}

void OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withByteArray_(OrgSpongycastleCryptoEncodingsOAEPEncoding *self, id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> hash_, id<OrgSpongycastleCryptoDigest> mgf1Hash, IOSByteArray *encodingParams) {
  NSObject_init(self);
  self->engine_ = cipher;
  self->mgf1Hash_ = mgf1Hash;
  self->defHash_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(hash_)) getDigestSize]];
  [hash_ reset];
  if (encodingParams != nil) {
    [hash_ updateWithByteArray:encodingParams withInt:0 withInt:encodingParams->size_];
  }
  [hash_ doFinalWithByteArray:self->defHash_ withInt:0];
}

OrgSpongycastleCryptoEncodingsOAEPEncoding *new_OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withByteArray_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> hash_, id<OrgSpongycastleCryptoDigest> mgf1Hash, IOSByteArray *encodingParams) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEncodingsOAEPEncoding, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withByteArray_, cipher, hash_, mgf1Hash, encodingParams)
}

OrgSpongycastleCryptoEncodingsOAEPEncoding *create_OrgSpongycastleCryptoEncodingsOAEPEncoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withByteArray_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> hash_, id<OrgSpongycastleCryptoDigest> mgf1Hash, IOSByteArray *encodingParams) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEncodingsOAEPEncoding, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withByteArray_, cipher, hash_, mgf1Hash, encodingParams)
}

void OrgSpongycastleCryptoEncodingsOAEPEncoding_ItoOSPWithInt_withByteArray_(OrgSpongycastleCryptoEncodingsOAEPEncoding *self, jint i, IOSByteArray *sp) {
  *IOSByteArray_GetRef(nil_chk(sp), 0) = (jbyte) (JreURShift32(i, 24));
  *IOSByteArray_GetRef(sp, 1) = (jbyte) (JreURShift32(i, 16));
  *IOSByteArray_GetRef(sp, 2) = (jbyte) (JreURShift32(i, 8));
  *IOSByteArray_GetRef(sp, 3) = (jbyte) (JreURShift32(i, 0));
}

IOSByteArray *OrgSpongycastleCryptoEncodingsOAEPEncoding_maskGeneratorFunction1WithByteArray_withInt_withInt_withInt_(OrgSpongycastleCryptoEncodingsOAEPEncoding *self, IOSByteArray *Z, jint zOff, jint zLen, jint length) {
  IOSByteArray *mask = [IOSByteArray newArrayWithLength:length];
  IOSByteArray *hashBuf = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(self->mgf1Hash_)) getDigestSize]];
  IOSByteArray *C = [IOSByteArray newArrayWithLength:4];
  jint counter = 0;
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->mgf1Hash_)) reset];
  while (counter < (length / hashBuf->size_)) {
    OrgSpongycastleCryptoEncodingsOAEPEncoding_ItoOSPWithInt_withByteArray_(self, counter, C);
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->mgf1Hash_)) updateWithByteArray:Z withInt:zOff withInt:zLen];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->mgf1Hash_)) updateWithByteArray:C withInt:0 withInt:C->size_];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->mgf1Hash_)) doFinalWithByteArray:hashBuf withInt:0];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hashBuf, 0, mask, counter * hashBuf->size_, hashBuf->size_);
    counter++;
  }
  if ((counter * hashBuf->size_) < length) {
    OrgSpongycastleCryptoEncodingsOAEPEncoding_ItoOSPWithInt_withByteArray_(self, counter, C);
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->mgf1Hash_)) updateWithByteArray:Z withInt:zOff withInt:zLen];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->mgf1Hash_)) updateWithByteArray:C withInt:0 withInt:C->size_];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->mgf1Hash_)) doFinalWithByteArray:hashBuf withInt:0];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hashBuf, 0, mask, counter * hashBuf->size_, mask->size_ - (counter * hashBuf->size_));
  }
  return mask;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEncodingsOAEPEncoding)
