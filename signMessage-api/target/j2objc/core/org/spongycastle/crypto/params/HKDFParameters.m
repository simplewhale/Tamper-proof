//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/params/HKDFParameters.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/crypto/params/HKDFParameters.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleCryptoParamsHKDFParameters () {
 @public
  IOSByteArray *ikm_;
  jboolean skipExpand_;
  IOSByteArray *salt_;
  IOSByteArray *info_;
}

- (instancetype)initWithByteArray:(IOSByteArray *)ikm
                      withBoolean:(jboolean)skip
                    withByteArray:(IOSByteArray *)salt
                    withByteArray:(IOSByteArray *)info;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoParamsHKDFParameters, ikm_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoParamsHKDFParameters, salt_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoParamsHKDFParameters, info_, IOSByteArray *)

__attribute__((unused)) static void OrgSpongycastleCryptoParamsHKDFParameters_initWithByteArray_withBoolean_withByteArray_withByteArray_(OrgSpongycastleCryptoParamsHKDFParameters *self, IOSByteArray *ikm, jboolean skip, IOSByteArray *salt, IOSByteArray *info);

__attribute__((unused)) static OrgSpongycastleCryptoParamsHKDFParameters *new_OrgSpongycastleCryptoParamsHKDFParameters_initWithByteArray_withBoolean_withByteArray_withByteArray_(IOSByteArray *ikm, jboolean skip, IOSByteArray *salt, IOSByteArray *info) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleCryptoParamsHKDFParameters *create_OrgSpongycastleCryptoParamsHKDFParameters_initWithByteArray_withBoolean_withByteArray_withByteArray_(IOSByteArray *ikm, jboolean skip, IOSByteArray *salt, IOSByteArray *info);

@implementation OrgSpongycastleCryptoParamsHKDFParameters

- (instancetype)initWithByteArray:(IOSByteArray *)ikm
                      withBoolean:(jboolean)skip
                    withByteArray:(IOSByteArray *)salt
                    withByteArray:(IOSByteArray *)info {
  OrgSpongycastleCryptoParamsHKDFParameters_initWithByteArray_withBoolean_withByteArray_withByteArray_(self, ikm, skip, salt, info);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)ikm
                    withByteArray:(IOSByteArray *)salt
                    withByteArray:(IOSByteArray *)info {
  OrgSpongycastleCryptoParamsHKDFParameters_initWithByteArray_withByteArray_withByteArray_(self, ikm, salt, info);
  return self;
}

+ (OrgSpongycastleCryptoParamsHKDFParameters *)skipExtractParametersWithByteArray:(IOSByteArray *)ikm
                                                                    withByteArray:(IOSByteArray *)info {
  return OrgSpongycastleCryptoParamsHKDFParameters_skipExtractParametersWithByteArray_withByteArray_(ikm, info);
}

+ (OrgSpongycastleCryptoParamsHKDFParameters *)defaultParametersWithByteArray:(IOSByteArray *)ikm {
  return OrgSpongycastleCryptoParamsHKDFParameters_defaultParametersWithByteArray_(ikm);
}

- (IOSByteArray *)getIKM {
  return OrgSpongycastleUtilArrays_cloneWithByteArray_(ikm_);
}

- (jboolean)skipExtract {
  return skipExpand_;
}

- (IOSByteArray *)getSalt {
  return OrgSpongycastleUtilArrays_cloneWithByteArray_(salt_);
}

- (IOSByteArray *)getInfo {
  return OrgSpongycastleUtilArrays_cloneWithByteArray_(info_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsHKDFParameters;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsHKDFParameters;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withBoolean:withByteArray:withByteArray:);
  methods[1].selector = @selector(initWithByteArray:withByteArray:withByteArray:);
  methods[2].selector = @selector(skipExtractParametersWithByteArray:withByteArray:);
  methods[3].selector = @selector(defaultParametersWithByteArray:);
  methods[4].selector = @selector(getIKM);
  methods[5].selector = @selector(skipExtract);
  methods[6].selector = @selector(getSalt);
  methods[7].selector = @selector(getInfo);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ikm_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "skipExpand_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "salt_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "info_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BZ[B[B", "[B[B[B", "skipExtractParameters", "[B[B", "defaultParameters", "[B" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoParamsHKDFParameters = { "HKDFParameters", "org.spongycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoParamsHKDFParameters;
}

@end

void OrgSpongycastleCryptoParamsHKDFParameters_initWithByteArray_withBoolean_withByteArray_withByteArray_(OrgSpongycastleCryptoParamsHKDFParameters *self, IOSByteArray *ikm, jboolean skip, IOSByteArray *salt, IOSByteArray *info) {
  NSObject_init(self);
  if (ikm == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"IKM (input keying material) should not be null");
  }
  self->ikm_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(ikm);
  self->skipExpand_ = skip;
  if (salt == nil || salt->size_ == 0) {
    self->salt_ = nil;
  }
  else {
    self->salt_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(salt);
  }
  if (info == nil) {
    self->info_ = [IOSByteArray newArrayWithLength:0];
  }
  else {
    self->info_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(info);
  }
}

OrgSpongycastleCryptoParamsHKDFParameters *new_OrgSpongycastleCryptoParamsHKDFParameters_initWithByteArray_withBoolean_withByteArray_withByteArray_(IOSByteArray *ikm, jboolean skip, IOSByteArray *salt, IOSByteArray *info) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoParamsHKDFParameters, initWithByteArray_withBoolean_withByteArray_withByteArray_, ikm, skip, salt, info)
}

OrgSpongycastleCryptoParamsHKDFParameters *create_OrgSpongycastleCryptoParamsHKDFParameters_initWithByteArray_withBoolean_withByteArray_withByteArray_(IOSByteArray *ikm, jboolean skip, IOSByteArray *salt, IOSByteArray *info) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoParamsHKDFParameters, initWithByteArray_withBoolean_withByteArray_withByteArray_, ikm, skip, salt, info)
}

void OrgSpongycastleCryptoParamsHKDFParameters_initWithByteArray_withByteArray_withByteArray_(OrgSpongycastleCryptoParamsHKDFParameters *self, IOSByteArray *ikm, IOSByteArray *salt, IOSByteArray *info) {
  OrgSpongycastleCryptoParamsHKDFParameters_initWithByteArray_withBoolean_withByteArray_withByteArray_(self, ikm, false, salt, info);
}

OrgSpongycastleCryptoParamsHKDFParameters *new_OrgSpongycastleCryptoParamsHKDFParameters_initWithByteArray_withByteArray_withByteArray_(IOSByteArray *ikm, IOSByteArray *salt, IOSByteArray *info) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoParamsHKDFParameters, initWithByteArray_withByteArray_withByteArray_, ikm, salt, info)
}

OrgSpongycastleCryptoParamsHKDFParameters *create_OrgSpongycastleCryptoParamsHKDFParameters_initWithByteArray_withByteArray_withByteArray_(IOSByteArray *ikm, IOSByteArray *salt, IOSByteArray *info) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoParamsHKDFParameters, initWithByteArray_withByteArray_withByteArray_, ikm, salt, info)
}

OrgSpongycastleCryptoParamsHKDFParameters *OrgSpongycastleCryptoParamsHKDFParameters_skipExtractParametersWithByteArray_withByteArray_(IOSByteArray *ikm, IOSByteArray *info) {
  OrgSpongycastleCryptoParamsHKDFParameters_initialize();
  return new_OrgSpongycastleCryptoParamsHKDFParameters_initWithByteArray_withBoolean_withByteArray_withByteArray_(ikm, true, nil, info);
}

OrgSpongycastleCryptoParamsHKDFParameters *OrgSpongycastleCryptoParamsHKDFParameters_defaultParametersWithByteArray_(IOSByteArray *ikm) {
  OrgSpongycastleCryptoParamsHKDFParameters_initialize();
  return new_OrgSpongycastleCryptoParamsHKDFParameters_initWithByteArray_withBoolean_withByteArray_withByteArray_(ikm, false, nil, nil);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoParamsHKDFParameters)
