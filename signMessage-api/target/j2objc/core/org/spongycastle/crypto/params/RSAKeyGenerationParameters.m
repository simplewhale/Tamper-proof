//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/params/RSAKeyGenerationParameters.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/KeyGenerationParameters.h"
#include "org/spongycastle/crypto/params/RSAKeyGenerationParameters.h"

@interface OrgSpongycastleCryptoParamsRSAKeyGenerationParameters () {
 @public
  JavaMathBigInteger *publicExponent_;
  jint certainty_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoParamsRSAKeyGenerationParameters, publicExponent_, JavaMathBigInteger *)

@implementation OrgSpongycastleCryptoParamsRSAKeyGenerationParameters

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)publicExponent
              withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                   withInt:(jint)strength
                                   withInt:(jint)certainty {
  OrgSpongycastleCryptoParamsRSAKeyGenerationParameters_initWithJavaMathBigInteger_withJavaSecuritySecureRandom_withInt_withInt_(self, publicExponent, random, strength, certainty);
  return self;
}

- (JavaMathBigInteger *)getPublicExponent {
  return publicExponent_;
}

- (jint)getCertainty {
  return certainty_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:withJavaSecuritySecureRandom:withInt:withInt:);
  methods[1].selector = @selector(getPublicExponent);
  methods[2].selector = @selector(getCertainty);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "publicExponent_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "certainty_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;LJavaSecuritySecureRandom;II" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoParamsRSAKeyGenerationParameters = { "RSAKeyGenerationParameters", "org.spongycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoParamsRSAKeyGenerationParameters;
}

@end

void OrgSpongycastleCryptoParamsRSAKeyGenerationParameters_initWithJavaMathBigInteger_withJavaSecuritySecureRandom_withInt_withInt_(OrgSpongycastleCryptoParamsRSAKeyGenerationParameters *self, JavaMathBigInteger *publicExponent, JavaSecuritySecureRandom *random, jint strength, jint certainty) {
  OrgSpongycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(self, random, strength);
  if (strength < 12) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"key strength too small");
  }
  if (![((JavaMathBigInteger *) nil_chk(publicExponent)) testBitWithInt:0]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"public exponent cannot be even");
  }
  self->publicExponent_ = publicExponent;
  self->certainty_ = certainty;
}

OrgSpongycastleCryptoParamsRSAKeyGenerationParameters *new_OrgSpongycastleCryptoParamsRSAKeyGenerationParameters_initWithJavaMathBigInteger_withJavaSecuritySecureRandom_withInt_withInt_(JavaMathBigInteger *publicExponent, JavaSecuritySecureRandom *random, jint strength, jint certainty) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoParamsRSAKeyGenerationParameters, initWithJavaMathBigInteger_withJavaSecuritySecureRandom_withInt_withInt_, publicExponent, random, strength, certainty)
}

OrgSpongycastleCryptoParamsRSAKeyGenerationParameters *create_OrgSpongycastleCryptoParamsRSAKeyGenerationParameters_initWithJavaMathBigInteger_withJavaSecuritySecureRandom_withInt_withInt_(JavaMathBigInteger *publicExponent, JavaSecuritySecureRandom *random, jint strength, jint certainty) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoParamsRSAKeyGenerationParameters, initWithJavaMathBigInteger_withJavaSecuritySecureRandom_withInt_withInt_, publicExponent, random, strength, certainty)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoParamsRSAKeyGenerationParameters)
