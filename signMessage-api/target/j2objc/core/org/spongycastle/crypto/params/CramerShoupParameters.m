//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/params/CramerShoupParameters.java
//

#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/params/CramerShoupParameters.h"
#include "org/spongycastle/crypto/params/DSAParameters.h"

@interface OrgSpongycastleCryptoParamsCramerShoupParameters () {
 @public
  JavaMathBigInteger *p_;
  JavaMathBigInteger *g1_;
  JavaMathBigInteger *g2_;
  id<OrgSpongycastleCryptoDigest> H_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoParamsCramerShoupParameters, p_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoParamsCramerShoupParameters, g1_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoParamsCramerShoupParameters, g2_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoParamsCramerShoupParameters, H_, id<OrgSpongycastleCryptoDigest>)

@implementation OrgSpongycastleCryptoParamsCramerShoupParameters

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)p
                    withJavaMathBigInteger:(JavaMathBigInteger *)g1
                    withJavaMathBigInteger:(JavaMathBigInteger *)g2
           withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)H {
  OrgSpongycastleCryptoParamsCramerShoupParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoDigest_(self, p, g1, g2, H);
  return self;
}

- (jboolean)isEqual:(id)obj {
  if (!([obj isKindOfClass:[OrgSpongycastleCryptoParamsDSAParameters class]])) {
    return false;
  }
  OrgSpongycastleCryptoParamsCramerShoupParameters *pm = (OrgSpongycastleCryptoParamsCramerShoupParameters *) cast_chk(obj, [OrgSpongycastleCryptoParamsCramerShoupParameters class]);
  return ([((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsCramerShoupParameters *) nil_chk(pm)) getP])) isEqual:p_] && [((JavaMathBigInteger *) nil_chk([pm getG1])) isEqual:g1_] && [((JavaMathBigInteger *) nil_chk([pm getG2])) isEqual:g2_]);
}

- (NSUInteger)hash {
  return ((jint) [((JavaMathBigInteger *) nil_chk([self getP])) hash]) ^ ((jint) [((JavaMathBigInteger *) nil_chk([self getG1])) hash]) ^ ((jint) [((JavaMathBigInteger *) nil_chk([self getG2])) hash]);
}

- (JavaMathBigInteger *)getG1 {
  return g1_;
}

- (JavaMathBigInteger *)getG2 {
  return g2_;
}

- (JavaMathBigInteger *)getP {
  return p_;
}

- (id<OrgSpongycastleCryptoDigest>)getH {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(H_)) reset];
  return H_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withOrgSpongycastleCryptoDigest:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(hash);
  methods[3].selector = @selector(getG1);
  methods[4].selector = @selector(getG2);
  methods[5].selector = @selector(getP);
  methods[6].selector = @selector(getH);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "p_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "g1_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "g2_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LOrgSpongycastleCryptoDigest;", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoParamsCramerShoupParameters = { "CramerShoupParameters", "org.spongycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 7, 4, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoParamsCramerShoupParameters;
}

@end

void OrgSpongycastleCryptoParamsCramerShoupParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoParamsCramerShoupParameters *self, JavaMathBigInteger *p, JavaMathBigInteger *g1, JavaMathBigInteger *g2, id<OrgSpongycastleCryptoDigest> H) {
  NSObject_init(self);
  self->p_ = p;
  self->g1_ = g1;
  self->g2_ = g2;
  self->H_ = H;
}

OrgSpongycastleCryptoParamsCramerShoupParameters *new_OrgSpongycastleCryptoParamsCramerShoupParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoDigest_(JavaMathBigInteger *p, JavaMathBigInteger *g1, JavaMathBigInteger *g2, id<OrgSpongycastleCryptoDigest> H) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoParamsCramerShoupParameters, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoDigest_, p, g1, g2, H)
}

OrgSpongycastleCryptoParamsCramerShoupParameters *create_OrgSpongycastleCryptoParamsCramerShoupParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoDigest_(JavaMathBigInteger *p, JavaMathBigInteger *g1, JavaMathBigInteger *g2, id<OrgSpongycastleCryptoDigest> H) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoParamsCramerShoupParameters, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoDigest_, p, g1, g2, H)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoParamsCramerShoupParameters)
