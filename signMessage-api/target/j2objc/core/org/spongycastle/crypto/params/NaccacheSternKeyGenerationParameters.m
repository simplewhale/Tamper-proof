//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/params/NaccacheSternKeyGenerationParameters.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/KeyGenerationParameters.h"
#include "org/spongycastle/crypto/params/NaccacheSternKeyGenerationParameters.h"

@interface OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters () {
 @public
  jint certainty_;
  jint cntSmallPrimes_;
  jboolean debug_;
}

@end

@implementation OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                         withInt:(jint)strength
                                         withInt:(jint)certainty
                                         withInt:(jint)cntSmallPrimes {
  OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_withInt_withInt_(self, random, strength, certainty, cntSmallPrimes);
  return self;
}

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                         withInt:(jint)strength
                                         withInt:(jint)certainty
                                         withInt:(jint)cntSmallPrimes
                                     withBoolean:(jboolean)debug {
  OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_withInt_withInt_withBoolean_(self, random, strength, certainty, cntSmallPrimes, debug);
  return self;
}

- (jint)getCertainty {
  return certainty_;
}

- (jint)getCntSmallPrimes {
  return cntSmallPrimes_;
}

- (jboolean)isDebug {
  return debug_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecuritySecureRandom:withInt:withInt:withInt:);
  methods[1].selector = @selector(initWithJavaSecuritySecureRandom:withInt:withInt:withInt:withBoolean:);
  methods[2].selector = @selector(getCertainty);
  methods[3].selector = @selector(getCntSmallPrimes);
  methods[4].selector = @selector(isDebug);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "certainty_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cntSmallPrimes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "debug_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecuritySecureRandom;III", "LJavaSecuritySecureRandom;IIIZ" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters = { "NaccacheSternKeyGenerationParameters", "org.spongycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters;
}

@end

void OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_withInt_withInt_(OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters *self, JavaSecuritySecureRandom *random, jint strength, jint certainty, jint cntSmallPrimes) {
  OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_withInt_withInt_withBoolean_(self, random, strength, certainty, cntSmallPrimes, false);
}

OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters *new_OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_withInt_withInt_(JavaSecuritySecureRandom *random, jint strength, jint certainty, jint cntSmallPrimes) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters, initWithJavaSecuritySecureRandom_withInt_withInt_withInt_, random, strength, certainty, cntSmallPrimes)
}

OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters *create_OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_withInt_withInt_(JavaSecuritySecureRandom *random, jint strength, jint certainty, jint cntSmallPrimes) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters, initWithJavaSecuritySecureRandom_withInt_withInt_withInt_, random, strength, certainty, cntSmallPrimes)
}

void OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_withInt_withInt_withBoolean_(OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters *self, JavaSecuritySecureRandom *random, jint strength, jint certainty, jint cntSmallPrimes, jboolean debug) {
  OrgSpongycastleCryptoKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_(self, random, strength);
  self->debug_ = false;
  self->certainty_ = certainty;
  if (cntSmallPrimes % 2 == 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cntSmallPrimes must be a multiple of 2");
  }
  if (cntSmallPrimes < 30) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"cntSmallPrimes must be >= 30 for security reasons");
  }
  self->cntSmallPrimes_ = cntSmallPrimes;
  self->debug_ = debug;
}

OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters *new_OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_withInt_withInt_withBoolean_(JavaSecuritySecureRandom *random, jint strength, jint certainty, jint cntSmallPrimes, jboolean debug) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters, initWithJavaSecuritySecureRandom_withInt_withInt_withInt_withBoolean_, random, strength, certainty, cntSmallPrimes, debug)
}

OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters *create_OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters_initWithJavaSecuritySecureRandom_withInt_withInt_withInt_withBoolean_(JavaSecuritySecureRandom *random, jint strength, jint certainty, jint cntSmallPrimes, jboolean debug) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters, initWithJavaSecuritySecureRandom_withInt_withInt_withInt_withBoolean_, random, strength, certainty, cntSmallPrimes, debug)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoParamsNaccacheSternKeyGenerationParameters)
