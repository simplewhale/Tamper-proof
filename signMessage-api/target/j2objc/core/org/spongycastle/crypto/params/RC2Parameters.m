//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/params/RC2Parameters.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/RC2Parameters.h"

@interface OrgSpongycastleCryptoParamsRC2Parameters () {
 @public
  jint bits_;
}

@end

@implementation OrgSpongycastleCryptoParamsRC2Parameters

- (instancetype)initWithByteArray:(IOSByteArray *)key {
  OrgSpongycastleCryptoParamsRC2Parameters_initWithByteArray_(self, key);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)key
                          withInt:(jint)bits {
  OrgSpongycastleCryptoParamsRC2Parameters_initWithByteArray_withInt_(self, key, bits);
  return self;
}

- (jint)getEffectiveKeyBits {
  return bits_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(initWithByteArray:withInt:);
  methods[2].selector = @selector(getEffectiveKeyBits);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bits_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "[BI" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoParamsRC2Parameters = { "RC2Parameters", "org.spongycastle.crypto.params", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoParamsRC2Parameters;
}

@end

void OrgSpongycastleCryptoParamsRC2Parameters_initWithByteArray_(OrgSpongycastleCryptoParamsRC2Parameters *self, IOSByteArray *key) {
  OrgSpongycastleCryptoParamsRC2Parameters_initWithByteArray_withInt_(self, key, (((IOSByteArray *) nil_chk(key))->size_ > 128) ? 1024 : (key->size_ * 8));
}

OrgSpongycastleCryptoParamsRC2Parameters *new_OrgSpongycastleCryptoParamsRC2Parameters_initWithByteArray_(IOSByteArray *key) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoParamsRC2Parameters, initWithByteArray_, key)
}

OrgSpongycastleCryptoParamsRC2Parameters *create_OrgSpongycastleCryptoParamsRC2Parameters_initWithByteArray_(IOSByteArray *key) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoParamsRC2Parameters, initWithByteArray_, key)
}

void OrgSpongycastleCryptoParamsRC2Parameters_initWithByteArray_withInt_(OrgSpongycastleCryptoParamsRC2Parameters *self, IOSByteArray *key, jint bits) {
  OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_(self, key);
  self->bits_ = bits;
}

OrgSpongycastleCryptoParamsRC2Parameters *new_OrgSpongycastleCryptoParamsRC2Parameters_initWithByteArray_withInt_(IOSByteArray *key, jint bits) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoParamsRC2Parameters, initWithByteArray_withInt_, key, bits)
}

OrgSpongycastleCryptoParamsRC2Parameters *create_OrgSpongycastleCryptoParamsRC2Parameters_initWithByteArray_withInt_(IOSByteArray *key, jint bits) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoParamsRC2Parameters, initWithByteArray_withInt_, key, bits)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoParamsRC2Parameters)
