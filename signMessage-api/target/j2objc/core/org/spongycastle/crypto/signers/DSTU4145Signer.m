//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/signers/DSTU4145Signer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/crypto/signers/DSTU4145Signer.h"
#include "org/spongycastle/math/ec/ECAlgorithms.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECFieldElement.h"
#include "org/spongycastle/math/ec/ECMultiplier.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/math/ec/FixedPointCombMultiplier.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleCryptoSignersDSTU4145Signer () {
 @public
  OrgSpongycastleCryptoParamsECKeyParameters *key_;
  JavaSecuritySecureRandom *random_;
}

+ (JavaMathBigInteger *)generateRandomIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                       withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

+ (OrgSpongycastleMathEcECFieldElement *)hash2FieldElementWithOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)curve
                                                                             withByteArray:(IOSByteArray *)hash_;

+ (JavaMathBigInteger *)fieldElement2IntegerWithJavaMathBigInteger:(JavaMathBigInteger *)n
                           withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)fe;

+ (JavaMathBigInteger *)truncateWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                               withInt:(jint)bitLength;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersDSTU4145Signer, key_, OrgSpongycastleCryptoParamsECKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersDSTU4145Signer, random_, JavaSecuritySecureRandom *)

inline JavaMathBigInteger *OrgSpongycastleCryptoSignersDSTU4145Signer_get_ONE(void);
static JavaMathBigInteger *OrgSpongycastleCryptoSignersDSTU4145Signer_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoSignersDSTU4145Signer, ONE, JavaMathBigInteger *)

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleCryptoSignersDSTU4145Signer_generateRandomIntegerWithJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *n, JavaSecuritySecureRandom *random);

__attribute__((unused)) static OrgSpongycastleMathEcECFieldElement *OrgSpongycastleCryptoSignersDSTU4145Signer_hash2FieldElementWithOrgSpongycastleMathEcECCurve_withByteArray_(OrgSpongycastleMathEcECCurve *curve, IOSByteArray *hash_);

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleCryptoSignersDSTU4145Signer_fieldElement2IntegerWithJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_(JavaMathBigInteger *n, OrgSpongycastleMathEcECFieldElement *fe);

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleCryptoSignersDSTU4145Signer_truncateWithJavaMathBigInteger_withInt_(JavaMathBigInteger *x, jint bitLength);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoSignersDSTU4145Signer)

@implementation OrgSpongycastleCryptoSignersDSTU4145Signer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoSignersDSTU4145Signer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forSigning
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  if (forSigning) {
    if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
      OrgSpongycastleCryptoParamsParametersWithRandom *rParam = (OrgSpongycastleCryptoParamsParametersWithRandom *) param;
      self->random_ = [((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      param = [rParam getParameters];
    }
    else {
      self->random_ = new_JavaSecuritySecureRandom_init();
    }
    self->key_ = (OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsECPrivateKeyParameters class]);
  }
  else {
    self->key_ = (OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsECPublicKeyParameters class]);
  }
}

- (IOSObjectArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  OrgSpongycastleCryptoParamsECDomainParameters *ec = [((OrgSpongycastleCryptoParamsECKeyParameters *) nil_chk(key_)) getParameters];
  OrgSpongycastleMathEcECCurve *curve = [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(ec)) getCurve];
  OrgSpongycastleMathEcECFieldElement *h = OrgSpongycastleCryptoSignersDSTU4145Signer_hash2FieldElementWithOrgSpongycastleMathEcECCurve_withByteArray_(curve, message);
  if ([((OrgSpongycastleMathEcECFieldElement *) nil_chk(h)) isZero]) {
    h = [((OrgSpongycastleMathEcECCurve *) nil_chk(curve)) fromBigIntegerWithJavaMathBigInteger:OrgSpongycastleCryptoSignersDSTU4145Signer_ONE];
  }
  JavaMathBigInteger *n = [ec getN];
  JavaMathBigInteger *e;
  JavaMathBigInteger *r;
  JavaMathBigInteger *s;
  OrgSpongycastleMathEcECFieldElement *Fe;
  OrgSpongycastleMathEcECFieldElement *y;
  JavaMathBigInteger *d = [((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk(key_, [OrgSpongycastleCryptoParamsECPrivateKeyParameters class])))) getD];
  id<OrgSpongycastleMathEcECMultiplier> basePointMultiplier = [self createBasePointMultiplier];
  do {
    do {
      do {
        e = OrgSpongycastleCryptoSignersDSTU4145Signer_generateRandomIntegerWithJavaMathBigInteger_withJavaSecuritySecureRandom_(n, random_);
        Fe = [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([((id<OrgSpongycastleMathEcECMultiplier>) nil_chk(basePointMultiplier)) multiplyWithOrgSpongycastleMathEcECPoint:[ec getG] withJavaMathBigInteger:e])) normalize])) getAffineXCoord];
      }
      while ([((OrgSpongycastleMathEcECFieldElement *) nil_chk(Fe)) isZero]);
      y = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(h)) multiplyWithOrgSpongycastleMathEcECFieldElement:Fe];
      r = OrgSpongycastleCryptoSignersDSTU4145Signer_fieldElement2IntegerWithJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_(n, y);
    }
    while ([((JavaMathBigInteger *) nil_chk(r)) signum] == 0);
    s = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([r multiplyWithJavaMathBigInteger:d])) addWithJavaMathBigInteger:e])) modWithJavaMathBigInteger:n];
  }
  while ([((JavaMathBigInteger *) nil_chk(s)) signum] == 0);
  return [IOSObjectArray newArrayWithObjects:(id[]){ r, s } count:2 type:JavaMathBigInteger_class_()];
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                  withJavaMathBigInteger:(JavaMathBigInteger *)r
                  withJavaMathBigInteger:(JavaMathBigInteger *)s {
  if ([((JavaMathBigInteger *) nil_chk(r)) signum] <= 0 || [((JavaMathBigInteger *) nil_chk(s)) signum] <= 0) {
    return false;
  }
  OrgSpongycastleCryptoParamsECDomainParameters *parameters = [((OrgSpongycastleCryptoParamsECKeyParameters *) nil_chk(key_)) getParameters];
  JavaMathBigInteger *n = [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(parameters)) getN];
  if ([r compareToWithId:n] >= 0 || [((JavaMathBigInteger *) nil_chk(s)) compareToWithId:n] >= 0) {
    return false;
  }
  OrgSpongycastleMathEcECCurve *curve = [parameters getCurve];
  OrgSpongycastleMathEcECFieldElement *h = OrgSpongycastleCryptoSignersDSTU4145Signer_hash2FieldElementWithOrgSpongycastleMathEcECCurve_withByteArray_(curve, message);
  if ([((OrgSpongycastleMathEcECFieldElement *) nil_chk(h)) isZero]) {
    h = [((OrgSpongycastleMathEcECCurve *) nil_chk(curve)) fromBigIntegerWithJavaMathBigInteger:OrgSpongycastleCryptoSignersDSTU4145Signer_ONE];
  }
  OrgSpongycastleMathEcECPoint *R = [((OrgSpongycastleMathEcECPoint *) nil_chk(OrgSpongycastleMathEcECAlgorithms_sumOfTwoMultipliesWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_([parameters getG], s, [((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(((OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk(key_, [OrgSpongycastleCryptoParamsECPublicKeyParameters class])))) getQ], r))) normalize];
  if ([((OrgSpongycastleMathEcECPoint *) nil_chk(R)) isInfinity]) {
    return false;
  }
  OrgSpongycastleMathEcECFieldElement *y = [((OrgSpongycastleMathEcECFieldElement *) nil_chk(h)) multiplyWithOrgSpongycastleMathEcECFieldElement:[R getAffineXCoord]];
  return [((JavaMathBigInteger *) nil_chk(OrgSpongycastleCryptoSignersDSTU4145Signer_fieldElement2IntegerWithJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_(n, y))) compareToWithId:r] == 0;
}

- (id<OrgSpongycastleMathEcECMultiplier>)createBasePointMultiplier {
  return new_OrgSpongycastleMathEcFixedPointCombMultiplier_init();
}

+ (JavaMathBigInteger *)generateRandomIntegerWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                       withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return OrgSpongycastleCryptoSignersDSTU4145Signer_generateRandomIntegerWithJavaMathBigInteger_withJavaSecuritySecureRandom_(n, random);
}

+ (OrgSpongycastleMathEcECFieldElement *)hash2FieldElementWithOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)curve
                                                                             withByteArray:(IOSByteArray *)hash_ {
  return OrgSpongycastleCryptoSignersDSTU4145Signer_hash2FieldElementWithOrgSpongycastleMathEcECCurve_withByteArray_(curve, hash_);
}

+ (JavaMathBigInteger *)fieldElement2IntegerWithJavaMathBigInteger:(JavaMathBigInteger *)n
                           withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)fe {
  return OrgSpongycastleCryptoSignersDSTU4145Signer_fieldElement2IntegerWithJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_(n, fe);
}

+ (JavaMathBigInteger *)truncateWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                               withInt:(jint)bitLength {
  return OrgSpongycastleCryptoSignersDSTU4145Signer_truncateWithJavaMathBigInteger_withInt_(x, bitLength);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(generateSignatureWithByteArray:);
  methods[3].selector = @selector(verifySignatureWithByteArray:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[4].selector = @selector(createBasePointMultiplier);
  methods[5].selector = @selector(generateRandomIntegerWithJavaMathBigInteger:withJavaSecuritySecureRandom:);
  methods[6].selector = @selector(hash2FieldElementWithOrgSpongycastleMathEcECCurve:withByteArray:);
  methods[7].selector = @selector(fieldElement2IntegerWithJavaMathBigInteger:withOrgSpongycastleMathEcECFieldElement:);
  methods[8].selector = @selector(truncateWithJavaMathBigInteger:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "key_", "LOrgSpongycastleCryptoParamsECKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[BLJavaMathBigInteger;LJavaMathBigInteger;", "generateRandomInteger", "LJavaMathBigInteger;LJavaSecuritySecureRandom;", "hash2FieldElement", "LOrgSpongycastleMathEcECCurve;[B", "fieldElement2Integer", "LJavaMathBigInteger;LOrgSpongycastleMathEcECFieldElement;", "truncate", "LJavaMathBigInteger;I", &OrgSpongycastleCryptoSignersDSTU4145Signer_ONE };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoSignersDSTU4145Signer = { "DSTU4145Signer", "org.spongycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoSignersDSTU4145Signer;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoSignersDSTU4145Signer class]) {
    OrgSpongycastleCryptoSignersDSTU4145Signer_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoSignersDSTU4145Signer)
  }
}

@end

void OrgSpongycastleCryptoSignersDSTU4145Signer_init(OrgSpongycastleCryptoSignersDSTU4145Signer *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoSignersDSTU4145Signer *new_OrgSpongycastleCryptoSignersDSTU4145Signer_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersDSTU4145Signer, init)
}

OrgSpongycastleCryptoSignersDSTU4145Signer *create_OrgSpongycastleCryptoSignersDSTU4145Signer_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersDSTU4145Signer, init)
}

JavaMathBigInteger *OrgSpongycastleCryptoSignersDSTU4145Signer_generateRandomIntegerWithJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *n, JavaSecuritySecureRandom *random) {
  OrgSpongycastleCryptoSignersDSTU4145Signer_initialize();
  return new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_([((JavaMathBigInteger *) nil_chk(n)) bitLength] - 1, random);
}

OrgSpongycastleMathEcECFieldElement *OrgSpongycastleCryptoSignersDSTU4145Signer_hash2FieldElementWithOrgSpongycastleMathEcECCurve_withByteArray_(OrgSpongycastleMathEcECCurve *curve, IOSByteArray *hash_) {
  OrgSpongycastleCryptoSignersDSTU4145Signer_initialize();
  IOSByteArray *data = OrgSpongycastleUtilArrays_reverseWithByteArray_(hash_);
  return [((OrgSpongycastleMathEcECCurve *) nil_chk(curve)) fromBigIntegerWithJavaMathBigInteger:OrgSpongycastleCryptoSignersDSTU4145Signer_truncateWithJavaMathBigInteger_withInt_(new_JavaMathBigInteger_initWithInt_withByteArray_(1, data), [curve getFieldSize])];
}

JavaMathBigInteger *OrgSpongycastleCryptoSignersDSTU4145Signer_fieldElement2IntegerWithJavaMathBigInteger_withOrgSpongycastleMathEcECFieldElement_(JavaMathBigInteger *n, OrgSpongycastleMathEcECFieldElement *fe) {
  OrgSpongycastleCryptoSignersDSTU4145Signer_initialize();
  return OrgSpongycastleCryptoSignersDSTU4145Signer_truncateWithJavaMathBigInteger_withInt_([((OrgSpongycastleMathEcECFieldElement *) nil_chk(fe)) toBigInteger], [((JavaMathBigInteger *) nil_chk(n)) bitLength] - 1);
}

JavaMathBigInteger *OrgSpongycastleCryptoSignersDSTU4145Signer_truncateWithJavaMathBigInteger_withInt_(JavaMathBigInteger *x, jint bitLength) {
  OrgSpongycastleCryptoSignersDSTU4145Signer_initialize();
  if ([((JavaMathBigInteger *) nil_chk(x)) bitLength] > bitLength) {
    x = [x modWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(OrgSpongycastleCryptoSignersDSTU4145Signer_ONE)) shiftLeftWithInt:bitLength]];
  }
  return x;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoSignersDSTU4145Signer)
