//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/signers/HMacDSAKCalculator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/macs/HMac.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/signers/HMacDSAKCalculator.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/BigIntegers.h"

@interface OrgSpongycastleCryptoSignersHMacDSAKCalculator () {
 @public
  OrgSpongycastleCryptoMacsHMac *hMac_;
  IOSByteArray *K_;
  IOSByteArray *V_;
  JavaMathBigInteger *n_;
}

- (JavaMathBigInteger *)bitsToIntWithByteArray:(IOSByteArray *)t;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersHMacDSAKCalculator, hMac_, OrgSpongycastleCryptoMacsHMac *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersHMacDSAKCalculator, K_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersHMacDSAKCalculator, V_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersHMacDSAKCalculator, n_, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoSignersHMacDSAKCalculator_get_ZERO(void);
static JavaMathBigInteger *OrgSpongycastleCryptoSignersHMacDSAKCalculator_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoSignersHMacDSAKCalculator, ZERO, JavaMathBigInteger *)

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleCryptoSignersHMacDSAKCalculator_bitsToIntWithByteArray_(OrgSpongycastleCryptoSignersHMacDSAKCalculator *self, IOSByteArray *t);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoSignersHMacDSAKCalculator)

@implementation OrgSpongycastleCryptoSignersHMacDSAKCalculator

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  OrgSpongycastleCryptoSignersHMacDSAKCalculator_initWithOrgSpongycastleCryptoDigest_(self, digest);
  return self;
}

- (jboolean)isDeterministic {
  return true;
}

- (void)init__WithJavaMathBigInteger:(JavaMathBigInteger *)n
        withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"Operation not supported");
}

- (void)init__WithJavaMathBigInteger:(JavaMathBigInteger *)n
              withJavaMathBigInteger:(JavaMathBigInteger *)d
                       withByteArray:(IOSByteArray *)message {
  self->n_ = n;
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(V_, (jbyte) (jint) 0x01);
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(K_, (jbyte) 0);
  IOSByteArray *x = [IOSByteArray newArrayWithLength:([((JavaMathBigInteger *) nil_chk(n)) bitLength] + 7) / 8];
  IOSByteArray *dVal = OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(d);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(dVal, 0, x, x->size_ - ((IOSByteArray *) nil_chk(dVal))->size_, dVal->size_);
  IOSByteArray *m = [IOSByteArray newArrayWithLength:([n bitLength] + 7) / 8];
  JavaMathBigInteger *mInt = OrgSpongycastleCryptoSignersHMacDSAKCalculator_bitsToIntWithByteArray_(self, message);
  if ([((JavaMathBigInteger *) nil_chk(mInt)) compareToWithId:n] >= 0) {
    mInt = [mInt subtractWithJavaMathBigInteger:n];
  }
  IOSByteArray *mVal = OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(mInt);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mVal, 0, m, m->size_ - ((IOSByteArray *) nil_chk(mVal))->size_, mVal->size_);
  [((OrgSpongycastleCryptoMacsHMac *) nil_chk(hMac_)) init__WithOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_(K_)];
  [hMac_ updateWithByteArray:V_ withInt:0 withInt:((IOSByteArray *) nil_chk(V_))->size_];
  [hMac_ updateWithByte:(jbyte) (jint) 0x00];
  [hMac_ updateWithByteArray:x withInt:0 withInt:x->size_];
  [hMac_ updateWithByteArray:m withInt:0 withInt:m->size_];
  [hMac_ doFinalWithByteArray:K_ withInt:0];
  [hMac_ init__WithOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_(K_)];
  [hMac_ updateWithByteArray:V_ withInt:0 withInt:V_->size_];
  [hMac_ doFinalWithByteArray:V_ withInt:0];
  [hMac_ updateWithByteArray:V_ withInt:0 withInt:V_->size_];
  [hMac_ updateWithByte:(jbyte) (jint) 0x01];
  [hMac_ updateWithByteArray:x withInt:0 withInt:x->size_];
  [hMac_ updateWithByteArray:m withInt:0 withInt:m->size_];
  [hMac_ doFinalWithByteArray:K_ withInt:0];
  [hMac_ init__WithOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_(K_)];
  [hMac_ updateWithByteArray:V_ withInt:0 withInt:V_->size_];
  [hMac_ doFinalWithByteArray:V_ withInt:0];
}

- (JavaMathBigInteger *)nextK {
  IOSByteArray *t = [IOSByteArray newArrayWithLength:(([((JavaMathBigInteger *) nil_chk(n_)) bitLength] + 7) / 8)];
  for (; ; ) {
    jint tOff = 0;
    while (tOff < t->size_) {
      [((OrgSpongycastleCryptoMacsHMac *) nil_chk(hMac_)) updateWithByteArray:V_ withInt:0 withInt:((IOSByteArray *) nil_chk(V_))->size_];
      [hMac_ doFinalWithByteArray:V_ withInt:0];
      jint len = JavaLangMath_minWithInt_withInt_(t->size_ - tOff, V_->size_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(V_, 0, t, tOff, len);
      tOff += len;
    }
    JavaMathBigInteger *k = OrgSpongycastleCryptoSignersHMacDSAKCalculator_bitsToIntWithByteArray_(self, t);
    if ([((JavaMathBigInteger *) nil_chk(k)) compareToWithId:OrgSpongycastleCryptoSignersHMacDSAKCalculator_ZERO] > 0 && [k compareToWithId:n_] < 0) {
      return k;
    }
    [((OrgSpongycastleCryptoMacsHMac *) nil_chk(hMac_)) updateWithByteArray:V_ withInt:0 withInt:((IOSByteArray *) nil_chk(V_))->size_];
    [hMac_ updateWithByte:(jbyte) (jint) 0x00];
    [hMac_ doFinalWithByteArray:K_ withInt:0];
    [hMac_ init__WithOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_(K_)];
    [hMac_ updateWithByteArray:V_ withInt:0 withInt:V_->size_];
    [hMac_ doFinalWithByteArray:V_ withInt:0];
  }
}

- (JavaMathBigInteger *)bitsToIntWithByteArray:(IOSByteArray *)t {
  return OrgSpongycastleCryptoSignersHMacDSAKCalculator_bitsToIntWithByteArray_(self, t);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoDigest:);
  methods[1].selector = @selector(isDeterministic);
  methods[2].selector = @selector(init__WithJavaMathBigInteger:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(init__WithJavaMathBigInteger:withJavaMathBigInteger:withByteArray:);
  methods[4].selector = @selector(nextK);
  methods[5].selector = @selector(bitsToIntWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "hMac_", "LOrgSpongycastleCryptoMacsHMac;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "K_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "V_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "n_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDigest;", "init", "LJavaMathBigInteger;LJavaSecuritySecureRandom;", "LJavaMathBigInteger;LJavaMathBigInteger;[B", "bitsToInt", "[B", &OrgSpongycastleCryptoSignersHMacDSAKCalculator_ZERO };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoSignersHMacDSAKCalculator = { "HMacDSAKCalculator", "org.spongycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 6, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoSignersHMacDSAKCalculator;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoSignersHMacDSAKCalculator class]) {
    OrgSpongycastleCryptoSignersHMacDSAKCalculator_ZERO = JavaMathBigInteger_valueOfWithLong_(0);
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoSignersHMacDSAKCalculator)
  }
}

@end

void OrgSpongycastleCryptoSignersHMacDSAKCalculator_initWithOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoSignersHMacDSAKCalculator *self, id<OrgSpongycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->hMac_ = new_OrgSpongycastleCryptoMacsHMac_initWithOrgSpongycastleCryptoDigest_(digest);
  self->V_ = [IOSByteArray newArrayWithLength:[self->hMac_ getMacSize]];
  self->K_ = [IOSByteArray newArrayWithLength:[self->hMac_ getMacSize]];
}

OrgSpongycastleCryptoSignersHMacDSAKCalculator *new_OrgSpongycastleCryptoSignersHMacDSAKCalculator_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersHMacDSAKCalculator, initWithOrgSpongycastleCryptoDigest_, digest)
}

OrgSpongycastleCryptoSignersHMacDSAKCalculator *create_OrgSpongycastleCryptoSignersHMacDSAKCalculator_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersHMacDSAKCalculator, initWithOrgSpongycastleCryptoDigest_, digest)
}

JavaMathBigInteger *OrgSpongycastleCryptoSignersHMacDSAKCalculator_bitsToIntWithByteArray_(OrgSpongycastleCryptoSignersHMacDSAKCalculator *self, IOSByteArray *t) {
  JavaMathBigInteger *v = new_JavaMathBigInteger_initWithInt_withByteArray_(1, t);
  if (((IOSByteArray *) nil_chk(t))->size_ * 8 > [((JavaMathBigInteger *) nil_chk(self->n_)) bitLength]) {
    v = [v shiftRightWithInt:t->size_ * 8 - [((JavaMathBigInteger *) nil_chk(self->n_)) bitLength]];
  }
  return v;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoSignersHMacDSAKCalculator)
