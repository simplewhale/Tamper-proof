//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/signers/ECNRSigner.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/generators/ECKeyPairGenerator.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECKeyGenerationParameters.h"
#include "org/spongycastle/crypto/params/ECKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/crypto/signers/ECNRSigner.h"
#include "org/spongycastle/math/ec/ECAlgorithms.h"
#include "org/spongycastle/math/ec/ECConstants.h"
#include "org/spongycastle/math/ec/ECFieldElement.h"
#include "org/spongycastle/math/ec/ECPoint.h"

@interface OrgSpongycastleCryptoSignersECNRSigner () {
 @public
  jboolean forSigning_;
  OrgSpongycastleCryptoParamsECKeyParameters *key_;
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersECNRSigner, key_, OrgSpongycastleCryptoParamsECKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersECNRSigner, random_, JavaSecuritySecureRandom *)

@implementation OrgSpongycastleCryptoSignersECNRSigner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoSignersECNRSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forSigning
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  self->forSigning_ = forSigning;
  if (forSigning) {
    if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
      OrgSpongycastleCryptoParamsParametersWithRandom *rParam = (OrgSpongycastleCryptoParamsParametersWithRandom *) param;
      self->random_ = [((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      self->key_ = (OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk([rParam getParameters], [OrgSpongycastleCryptoParamsECPrivateKeyParameters class]);
    }
    else {
      self->random_ = new_JavaSecuritySecureRandom_init();
      self->key_ = (OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsECPrivateKeyParameters class]);
    }
  }
  else {
    self->key_ = (OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsECPublicKeyParameters class]);
  }
}

- (IOSObjectArray *)generateSignatureWithByteArray:(IOSByteArray *)digest {
  if (!self->forSigning_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"not initialised for signing");
  }
  JavaMathBigInteger *n = [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk([((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk(self->key_, [OrgSpongycastleCryptoParamsECPrivateKeyParameters class])))) getParameters])) getN];
  jint nBitLength = [((JavaMathBigInteger *) nil_chk(n)) bitLength];
  JavaMathBigInteger *e = new_JavaMathBigInteger_initWithInt_withByteArray_(1, digest);
  jint eBitLength = [e bitLength];
  OrgSpongycastleCryptoParamsECPrivateKeyParameters *privKey = (OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk(key_, [OrgSpongycastleCryptoParamsECPrivateKeyParameters class]);
  if (eBitLength > nBitLength) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input too large for ECNR key.");
  }
  JavaMathBigInteger *r = nil;
  JavaMathBigInteger *s = nil;
  OrgSpongycastleCryptoAsymmetricCipherKeyPair *tempPair;
  do {
    OrgSpongycastleCryptoGeneratorsECKeyPairGenerator *keyGen = new_OrgSpongycastleCryptoGeneratorsECKeyPairGenerator_init();
    [keyGen init__WithOrgSpongycastleCryptoKeyGenerationParameters:new_OrgSpongycastleCryptoParamsECKeyGenerationParameters_initWithOrgSpongycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_([((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(privKey)) getParameters], self->random_)];
    tempPair = [keyGen generateKeyPair];
    OrgSpongycastleCryptoParamsECPublicKeyParameters *V = (OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk([((OrgSpongycastleCryptoAsymmetricCipherKeyPair *) nil_chk(tempPair)) getPublic], [OrgSpongycastleCryptoParamsECPublicKeyParameters class]);
    JavaMathBigInteger *Vx = [((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(V)) getQ])) getAffineXCoord])) toBigInteger];
    r = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(Vx)) addWithJavaMathBigInteger:e])) modWithJavaMathBigInteger:n];
  }
  while ([((JavaMathBigInteger *) nil_chk(r)) isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)]);
  JavaMathBigInteger *x = [privKey getD];
  JavaMathBigInteger *u = [((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk([tempPair getPrivate], [OrgSpongycastleCryptoParamsECPrivateKeyParameters class])))) getD];
  s = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(u)) subtractWithJavaMathBigInteger:[r multiplyWithJavaMathBigInteger:x]])) modWithJavaMathBigInteger:n];
  IOSObjectArray *res = [IOSObjectArray newArrayWithLength:2 type:JavaMathBigInteger_class_()];
  (void) IOSObjectArray_Set(res, 0, r);
  (void) IOSObjectArray_Set(res, 1, s);
  return res;
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)digest
                  withJavaMathBigInteger:(JavaMathBigInteger *)r
                  withJavaMathBigInteger:(JavaMathBigInteger *)s {
  if (self->forSigning_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"not initialised for verifying");
  }
  OrgSpongycastleCryptoParamsECPublicKeyParameters *pubKey = (OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk(key_, [OrgSpongycastleCryptoParamsECPublicKeyParameters class]);
  JavaMathBigInteger *n = [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk([((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(pubKey)) getParameters])) getN];
  jint nBitLength = [((JavaMathBigInteger *) nil_chk(n)) bitLength];
  JavaMathBigInteger *e = new_JavaMathBigInteger_initWithInt_withByteArray_(1, digest);
  jint eBitLength = [e bitLength];
  if (eBitLength > nBitLength) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input too large for ECNR key.");
  }
  if ([((JavaMathBigInteger *) nil_chk(r)) compareToWithId:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)] < 0 || [r compareToWithId:n] >= 0) {
    return false;
  }
  if ([((JavaMathBigInteger *) nil_chk(s)) compareToWithId:JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)] < 0 || [s compareToWithId:n] >= 0) {
    return false;
  }
  OrgSpongycastleMathEcECPoint *G = [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk([pubKey getParameters])) getG];
  OrgSpongycastleMathEcECPoint *W = [pubKey getQ];
  OrgSpongycastleMathEcECPoint *P = [((OrgSpongycastleMathEcECPoint *) nil_chk(OrgSpongycastleMathEcECAlgorithms_sumOfTwoMultipliesWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(G, s, W, r))) normalize];
  if ([((OrgSpongycastleMathEcECPoint *) nil_chk(P)) isInfinity]) {
    return false;
  }
  JavaMathBigInteger *x = [((OrgSpongycastleMathEcECFieldElement *) nil_chk([P getAffineXCoord])) toBigInteger];
  JavaMathBigInteger *t = [((JavaMathBigInteger *) nil_chk([r subtractWithJavaMathBigInteger:x])) modWithJavaMathBigInteger:n];
  return [((JavaMathBigInteger *) nil_chk(t)) isEqual:e];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(generateSignatureWithByteArray:);
  methods[3].selector = @selector(verifySignatureWithByteArray:withJavaMathBigInteger:withJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "forSigning_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "LOrgSpongycastleCryptoParamsECKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[BLJavaMathBigInteger;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoSignersECNRSigner = { "ECNRSigner", "org.spongycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoSignersECNRSigner;
}

@end

void OrgSpongycastleCryptoSignersECNRSigner_init(OrgSpongycastleCryptoSignersECNRSigner *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoSignersECNRSigner *new_OrgSpongycastleCryptoSignersECNRSigner_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersECNRSigner, init)
}

OrgSpongycastleCryptoSignersECNRSigner *create_OrgSpongycastleCryptoSignersECNRSigner_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersECNRSigner, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoSignersECNRSigner)
