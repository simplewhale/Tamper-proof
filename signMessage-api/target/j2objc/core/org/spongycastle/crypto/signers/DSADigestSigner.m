//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/signers/DSADigestSigner.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/asn1/ASN1Encodable.h"
#include "org/spongycastle/asn1/ASN1EncodableVector.h"
#include "org/spongycastle/asn1/ASN1Encoding.h"
#include "org/spongycastle/asn1/ASN1Integer.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/ASN1Sequence.h"
#include "org/spongycastle/asn1/DERSequence.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DSA.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/crypto/signers/DSADigestSigner.h"

@interface OrgSpongycastleCryptoSignersDSADigestSigner () {
 @public
  id<OrgSpongycastleCryptoDigest> digest_;
  id<OrgSpongycastleCryptoDSA> dsaSigner_;
  jboolean forSigning_;
}

- (IOSByteArray *)derEncodeWithJavaMathBigInteger:(JavaMathBigInteger *)r
                           withJavaMathBigInteger:(JavaMathBigInteger *)s;

- (IOSObjectArray *)derDecodeWithByteArray:(IOSByteArray *)encoding;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersDSADigestSigner, digest_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersDSADigestSigner, dsaSigner_, id<OrgSpongycastleCryptoDSA>)

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoSignersDSADigestSigner_derEncodeWithJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleCryptoSignersDSADigestSigner *self, JavaMathBigInteger *r, JavaMathBigInteger *s);

__attribute__((unused)) static IOSObjectArray *OrgSpongycastleCryptoSignersDSADigestSigner_derDecodeWithByteArray_(OrgSpongycastleCryptoSignersDSADigestSigner *self, IOSByteArray *encoding);

@implementation OrgSpongycastleCryptoSignersDSADigestSigner

- (instancetype)initWithOrgSpongycastleCryptoDSA:(id<OrgSpongycastleCryptoDSA>)signer
                 withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  OrgSpongycastleCryptoSignersDSADigestSigner_initWithOrgSpongycastleCryptoDSA_withOrgSpongycastleCryptoDigest_(self, signer, digest);
  return self;
}

- (void)init__WithBoolean:(jboolean)forSigning
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)parameters {
  self->forSigning_ = forSigning;
  OrgSpongycastleCryptoParamsAsymmetricKeyParameter *k;
  if ([parameters isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
    k = (OrgSpongycastleCryptoParamsAsymmetricKeyParameter *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithRandom *) parameters))) getParameters], [OrgSpongycastleCryptoParamsAsymmetricKeyParameter class]);
  }
  else {
    k = (OrgSpongycastleCryptoParamsAsymmetricKeyParameter *) cast_chk(parameters, [OrgSpongycastleCryptoParamsAsymmetricKeyParameter class]);
  }
  if (forSigning && ![((OrgSpongycastleCryptoParamsAsymmetricKeyParameter *) nil_chk(k)) isPrivate]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Signing Requires Private Key.");
  }
  if (!forSigning && [((OrgSpongycastleCryptoParamsAsymmetricKeyParameter *) nil_chk(k)) isPrivate]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Verification Requires Public Key.");
  }
  [self reset];
  [((id<OrgSpongycastleCryptoDSA>) nil_chk(dsaSigner_)) init__WithBoolean:forSigning withOrgSpongycastleCryptoCipherParameters:parameters];
}

- (void)updateWithByte:(jbyte)input {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByte:input];
}

- (void)updateWithByteArray:(IOSByteArray *)input
                    withInt:(jint)inOff
                    withInt:(jint)length {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:input withInt:inOff withInt:length];
}

- (IOSByteArray *)generateSignature {
  if (!forSigning_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"DSADigestSigner not initialised for signature generation.");
  }
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [digest_ doFinalWithByteArray:hash_ withInt:0];
  IOSObjectArray *sig = [((id<OrgSpongycastleCryptoDSA>) nil_chk(dsaSigner_)) generateSignatureWithByteArray:hash_];
  @try {
    return OrgSpongycastleCryptoSignersDSADigestSigner_derEncodeWithJavaMathBigInteger_withJavaMathBigInteger_(self, IOSObjectArray_Get(nil_chk(sig), 0), IOSObjectArray_Get(sig, 1));
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"unable to encode signature");
  }
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)signature {
  if (forSigning_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"DSADigestSigner not initialised for verification");
  }
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [digest_ doFinalWithByteArray:hash_ withInt:0];
  @try {
    IOSObjectArray *sig = OrgSpongycastleCryptoSignersDSADigestSigner_derDecodeWithByteArray_(self, signature);
    return [((id<OrgSpongycastleCryptoDSA>) nil_chk(dsaSigner_)) verifySignatureWithByteArray:hash_ withJavaMathBigInteger:IOSObjectArray_Get(nil_chk(sig), 0) withJavaMathBigInteger:IOSObjectArray_Get(sig, 1)];
  }
  @catch (JavaIoIOException *e) {
    return false;
  }
}

- (void)reset {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) reset];
}

- (IOSByteArray *)derEncodeWithJavaMathBigInteger:(JavaMathBigInteger *)r
                           withJavaMathBigInteger:(JavaMathBigInteger *)s {
  return OrgSpongycastleCryptoSignersDSADigestSigner_derEncodeWithJavaMathBigInteger_withJavaMathBigInteger_(self, r, s);
}

- (IOSObjectArray *)derDecodeWithByteArray:(IOSByteArray *)encoding {
  return OrgSpongycastleCryptoSignersDSADigestSigner_derDecodeWithByteArray_(self, encoding);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 8, 9, 10, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x2, 11, 7, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoDSA:withOrgSpongycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(updateWithByte:);
  methods[3].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(generateSignature);
  methods[5].selector = @selector(verifySignatureWithByteArray:);
  methods[6].selector = @selector(reset);
  methods[7].selector = @selector(derEncodeWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[8].selector = @selector(derDecodeWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "dsaSigner_", "LOrgSpongycastleCryptoDSA;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "forSigning_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDSA;LOrgSpongycastleCryptoDigest;", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "update", "B", "[BII", "verifySignature", "[B", "derEncode", "LJavaMathBigInteger;LJavaMathBigInteger;", "LJavaIoIOException;", "derDecode" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoSignersDSADigestSigner = { "DSADigestSigner", "org.spongycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoSignersDSADigestSigner;
}

@end

void OrgSpongycastleCryptoSignersDSADigestSigner_initWithOrgSpongycastleCryptoDSA_withOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoSignersDSADigestSigner *self, id<OrgSpongycastleCryptoDSA> signer, id<OrgSpongycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->digest_ = digest;
  self->dsaSigner_ = signer;
}

OrgSpongycastleCryptoSignersDSADigestSigner *new_OrgSpongycastleCryptoSignersDSADigestSigner_initWithOrgSpongycastleCryptoDSA_withOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDSA> signer, id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersDSADigestSigner, initWithOrgSpongycastleCryptoDSA_withOrgSpongycastleCryptoDigest_, signer, digest)
}

OrgSpongycastleCryptoSignersDSADigestSigner *create_OrgSpongycastleCryptoSignersDSADigestSigner_initWithOrgSpongycastleCryptoDSA_withOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDSA> signer, id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersDSADigestSigner, initWithOrgSpongycastleCryptoDSA_withOrgSpongycastleCryptoDigest_, signer, digest)
}

IOSByteArray *OrgSpongycastleCryptoSignersDSADigestSigner_derEncodeWithJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleCryptoSignersDSADigestSigner *self, JavaMathBigInteger *r, JavaMathBigInteger *s) {
  OrgSpongycastleAsn1ASN1EncodableVector *v = new_OrgSpongycastleAsn1ASN1EncodableVector_init();
  [v addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(r)];
  [v addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1ASN1Integer_initWithJavaMathBigInteger_(s)];
  return [new_OrgSpongycastleAsn1DERSequence_initWithOrgSpongycastleAsn1ASN1EncodableVector_(v) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
}

IOSObjectArray *OrgSpongycastleCryptoSignersDSADigestSigner_derDecodeWithByteArray_(OrgSpongycastleCryptoSignersDSADigestSigner *self, IOSByteArray *encoding) {
  OrgSpongycastleAsn1ASN1Sequence *s = (OrgSpongycastleAsn1ASN1Sequence *) cast_chk(OrgSpongycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(encoding), [OrgSpongycastleAsn1ASN1Sequence class]);
  return [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgSpongycastleAsn1ASN1Integer *) nil_chk(((OrgSpongycastleAsn1ASN1Integer *) cast_chk([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(s)) getObjectAtWithInt:0], [OrgSpongycastleAsn1ASN1Integer class])))) getValue], [((OrgSpongycastleAsn1ASN1Integer *) nil_chk(((OrgSpongycastleAsn1ASN1Integer *) cast_chk([s getObjectAtWithInt:1], [OrgSpongycastleAsn1ASN1Integer class])))) getValue] } count:2 type:JavaMathBigInteger_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoSignersDSADigestSigner)
