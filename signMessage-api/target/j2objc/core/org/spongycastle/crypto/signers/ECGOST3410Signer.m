//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/signers/ECGOST3410Signer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/crypto/signers/ECGOST3410Signer.h"
#include "org/spongycastle/math/ec/ECAlgorithms.h"
#include "org/spongycastle/math/ec/ECConstants.h"
#include "org/spongycastle/math/ec/ECFieldElement.h"
#include "org/spongycastle/math/ec/ECMultiplier.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/math/ec/FixedPointCombMultiplier.h"

@implementation OrgSpongycastleCryptoSignersECGOST3410Signer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoSignersECGOST3410Signer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forSigning
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  if (forSigning) {
    if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
      OrgSpongycastleCryptoParamsParametersWithRandom *rParam = (OrgSpongycastleCryptoParamsParametersWithRandom *) param;
      self->random_ = [((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getRandom];
      self->key_ = (OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk([rParam getParameters], [OrgSpongycastleCryptoParamsECPrivateKeyParameters class]);
    }
    else {
      self->random_ = new_JavaSecuritySecureRandom_init();
      self->key_ = (OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsECPrivateKeyParameters class]);
    }
  }
  else {
    self->key_ = (OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsECPublicKeyParameters class]);
  }
}

- (IOSObjectArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  IOSByteArray *mRev = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(message))->size_];
  for (jint i = 0; i != mRev->size_; i++) {
    *IOSByteArray_GetRef(mRev, i) = IOSByteArray_Get(message, mRev->size_ - 1 - i);
  }
  JavaMathBigInteger *e = new_JavaMathBigInteger_initWithInt_withByteArray_(1, mRev);
  OrgSpongycastleCryptoParamsECDomainParameters *ec = [((OrgSpongycastleCryptoParamsECKeyParameters *) nil_chk(key_)) getParameters];
  JavaMathBigInteger *n = [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(ec)) getN];
  JavaMathBigInteger *d = [((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk(key_, [OrgSpongycastleCryptoParamsECPrivateKeyParameters class])))) getD];
  JavaMathBigInteger *r;
  JavaMathBigInteger *s;
  id<OrgSpongycastleMathEcECMultiplier> basePointMultiplier = [self createBasePointMultiplier];
  do {
    JavaMathBigInteger *k;
    do {
      do {
        k = new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_([((JavaMathBigInteger *) nil_chk(n)) bitLength], random_);
      }
      while ([k isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)]);
      OrgSpongycastleMathEcECPoint *p = [((OrgSpongycastleMathEcECPoint *) nil_chk([((id<OrgSpongycastleMathEcECMultiplier>) nil_chk(basePointMultiplier)) multiplyWithOrgSpongycastleMathEcECPoint:[ec getG] withJavaMathBigInteger:k])) normalize];
      r = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getAffineXCoord])) toBigInteger])) modWithJavaMathBigInteger:n];
    }
    while ([((JavaMathBigInteger *) nil_chk(r)) isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)]);
    s = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(([k multiplyWithJavaMathBigInteger:e]))) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(d)) multiplyWithJavaMathBigInteger:r]])) modWithJavaMathBigInteger:n];
  }
  while ([((JavaMathBigInteger *) nil_chk(s)) isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)]);
  return [IOSObjectArray newArrayWithObjects:(id[]){ r, s } count:2 type:JavaMathBigInteger_class_()];
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                  withJavaMathBigInteger:(JavaMathBigInteger *)r
                  withJavaMathBigInteger:(JavaMathBigInteger *)s {
  IOSByteArray *mRev = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(message))->size_];
  for (jint i = 0; i != mRev->size_; i++) {
    *IOSByteArray_GetRef(mRev, i) = IOSByteArray_Get(message, mRev->size_ - 1 - i);
  }
  JavaMathBigInteger *e = new_JavaMathBigInteger_initWithInt_withByteArray_(1, mRev);
  JavaMathBigInteger *n = [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk([((OrgSpongycastleCryptoParamsECKeyParameters *) nil_chk(key_)) getParameters])) getN];
  if ([((JavaMathBigInteger *) nil_chk(r)) compareToWithId:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)] < 0 || [r compareToWithId:n] >= 0) {
    return false;
  }
  if ([((JavaMathBigInteger *) nil_chk(s)) compareToWithId:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)] < 0 || [s compareToWithId:n] >= 0) {
    return false;
  }
  JavaMathBigInteger *v = [e modInverseWithJavaMathBigInteger:n];
  JavaMathBigInteger *z1 = [((JavaMathBigInteger *) nil_chk([s multiplyWithJavaMathBigInteger:v])) modWithJavaMathBigInteger:n];
  JavaMathBigInteger *z2 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(n)) subtractWithJavaMathBigInteger:r]))) multiplyWithJavaMathBigInteger:v])) modWithJavaMathBigInteger:n];
  OrgSpongycastleMathEcECPoint *G = [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk([((OrgSpongycastleCryptoParamsECKeyParameters *) nil_chk(key_)) getParameters])) getG];
  OrgSpongycastleMathEcECPoint *Q = [((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(((OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk(key_, [OrgSpongycastleCryptoParamsECPublicKeyParameters class])))) getQ];
  OrgSpongycastleMathEcECPoint *point = [((OrgSpongycastleMathEcECPoint *) nil_chk(OrgSpongycastleMathEcECAlgorithms_sumOfTwoMultipliesWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(G, z1, Q, z2))) normalize];
  if ([((OrgSpongycastleMathEcECPoint *) nil_chk(point)) isInfinity]) {
    return false;
  }
  JavaMathBigInteger *R = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([point getAffineXCoord])) toBigInteger])) modWithJavaMathBigInteger:n];
  return [((JavaMathBigInteger *) nil_chk(R)) isEqual:r];
}

- (id<OrgSpongycastleMathEcECMultiplier>)createBasePointMultiplier {
  return new_OrgSpongycastleMathEcFixedPointCombMultiplier_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(generateSignatureWithByteArray:);
  methods[3].selector = @selector(verifySignatureWithByteArray:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[4].selector = @selector(createBasePointMultiplier);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LOrgSpongycastleCryptoParamsECKeyParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[BLJavaMathBigInteger;LJavaMathBigInteger;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoSignersECGOST3410Signer = { "ECGOST3410Signer", "org.spongycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoSignersECGOST3410Signer;
}

@end

void OrgSpongycastleCryptoSignersECGOST3410Signer_init(OrgSpongycastleCryptoSignersECGOST3410Signer *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoSignersECGOST3410Signer *new_OrgSpongycastleCryptoSignersECGOST3410Signer_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersECGOST3410Signer, init)
}

OrgSpongycastleCryptoSignersECGOST3410Signer *create_OrgSpongycastleCryptoSignersECGOST3410Signer_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersECGOST3410Signer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoSignersECGOST3410Signer)
