//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/signers/ISO9796d2Signer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/AsymmetricBlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/InvalidCipherTextException.h"
#include "org/spongycastle/crypto/params/RSAKeyParameters.h"
#include "org/spongycastle/crypto/signers/ISO9796d2Signer.h"
#include "org/spongycastle/crypto/signers/ISOTrailers.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleCryptoSignersISO9796d2Signer () {
 @public
  id<OrgSpongycastleCryptoDigest> digest_;
  id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher_;
  jint trailer_;
  jint keyBits_;
  IOSByteArray *block_;
  IOSByteArray *mBuf_;
  jint messageLength_;
  jboolean fullMessage_;
  IOSByteArray *recoveredMessage_;
  IOSByteArray *preSig_;
  IOSByteArray *preBlock_;
}

- (jboolean)isSameAsWithByteArray:(IOSByteArray *)a
                    withByteArray:(IOSByteArray *)b;

- (void)clearBlockWithByteArray:(IOSByteArray *)block;

- (jboolean)returnFalseWithByteArray:(IOSByteArray *)block;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2Signer, digest_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2Signer, cipher_, id<OrgSpongycastleCryptoAsymmetricBlockCipher>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2Signer, block_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2Signer, mBuf_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2Signer, recoveredMessage_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2Signer, preSig_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2Signer, preBlock_, IOSByteArray *)

__attribute__((unused)) static jboolean OrgSpongycastleCryptoSignersISO9796d2Signer_isSameAsWithByteArray_withByteArray_(OrgSpongycastleCryptoSignersISO9796d2Signer *self, IOSByteArray *a, IOSByteArray *b);

__attribute__((unused)) static void OrgSpongycastleCryptoSignersISO9796d2Signer_clearBlockWithByteArray_(OrgSpongycastleCryptoSignersISO9796d2Signer *self, IOSByteArray *block);

__attribute__((unused)) static jboolean OrgSpongycastleCryptoSignersISO9796d2Signer_returnFalseWithByteArray_(OrgSpongycastleCryptoSignersISO9796d2Signer *self, IOSByteArray *block);

@implementation OrgSpongycastleCryptoSignersISO9796d2Signer

- (instancetype)initWithOrgSpongycastleCryptoAsymmetricBlockCipher:(id<OrgSpongycastleCryptoAsymmetricBlockCipher>)cipher
                                   withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                                       withBoolean:(jboolean)implicit {
  OrgSpongycastleCryptoSignersISO9796d2Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withBoolean_(self, cipher, digest, implicit);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoAsymmetricBlockCipher:(id<OrgSpongycastleCryptoAsymmetricBlockCipher>)cipher
                                   withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  OrgSpongycastleCryptoSignersISO9796d2Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_(self, cipher, digest);
  return self;
}

- (void)init__WithBoolean:(jboolean)forSigning
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  OrgSpongycastleCryptoParamsRSAKeyParameters *kParam = (OrgSpongycastleCryptoParamsRSAKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsRSAKeyParameters class]);
  [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_)) init__WithBoolean:forSigning withOrgSpongycastleCryptoCipherParameters:kParam];
  keyBits_ = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsRSAKeyParameters *) nil_chk(kParam)) getModulus])) bitLength];
  block_ = [IOSByteArray newArrayWithLength:(keyBits_ + 7) / 8];
  if (trailer_ == OrgSpongycastleCryptoSignersISOTrailers_TRAILER_IMPLICIT) {
    mBuf_ = [IOSByteArray newArrayWithLength:block_->size_ - [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize] - 2];
  }
  else {
    mBuf_ = [IOSByteArray newArrayWithLength:block_->size_ - [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize] - 3];
  }
  [self reset];
}

- (jboolean)isSameAsWithByteArray:(IOSByteArray *)a
                    withByteArray:(IOSByteArray *)b {
  return OrgSpongycastleCryptoSignersISO9796d2Signer_isSameAsWithByteArray_withByteArray_(self, a, b);
}

- (void)clearBlockWithByteArray:(IOSByteArray *)block {
  OrgSpongycastleCryptoSignersISO9796d2Signer_clearBlockWithByteArray_(self, block);
}

- (void)updateWithRecoveredMessageWithByteArray:(IOSByteArray *)signature {
  IOSByteArray *block = [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:signature withInt:0 withInt:((IOSByteArray *) nil_chk(signature))->size_];
  if (((IOSByteArray_Get(nil_chk(block), 0) & (jint) 0xC0) ^ (jint) 0x40) != 0) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"malformed signature");
  }
  if (((IOSByteArray_Get(block, block->size_ - 1) & (jint) 0xF) ^ (jint) 0xC) != 0) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"malformed signature");
  }
  jint delta = 0;
  if (((IOSByteArray_Get(block, block->size_ - 1) & (jint) 0xFF) ^ (jint) 0xBC) == 0) {
    delta = 1;
  }
  else {
    jint sigTrail = (JreLShift32((IOSByteArray_Get(block, block->size_ - 2) & (jint) 0xFF), 8)) | (IOSByteArray_Get(block, block->size_ - 1) & (jint) 0xFF);
    JavaLangInteger *trailerObj = OrgSpongycastleCryptoSignersISOTrailers_getTrailerWithOrgSpongycastleCryptoDigest_(digest_);
    if (trailerObj != nil) {
      if (sigTrail != [trailerObj intValue]) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"signer initialised with wrong digest for trailer ", sigTrail));
      }
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unrecognised hash in signature");
    }
    delta = 2;
  }
  jint mStart = 0;
  for (mStart = 0; mStart != block->size_; mStart++) {
    if (((IOSByteArray_Get(block, mStart) & (jint) 0x0f) ^ (jint) 0x0a) == 0) {
      break;
    }
  }
  mStart++;
  jint off = block->size_ - delta - [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize];
  if ((off - mStart) <= 0) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"malformed block");
  }
  if ((IOSByteArray_Get(block, 0) & (jint) 0x20) == 0) {
    fullMessage_ = true;
    recoveredMessage_ = [IOSByteArray newArrayWithLength:off - mStart];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, mStart, recoveredMessage_, 0, recoveredMessage_->size_);
  }
  else {
    fullMessage_ = false;
    recoveredMessage_ = [IOSByteArray newArrayWithLength:off - mStart];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, mStart, recoveredMessage_, 0, recoveredMessage_->size_);
  }
  preSig_ = signature;
  preBlock_ = block;
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:recoveredMessage_ withInt:0 withInt:((IOSByteArray *) nil_chk(recoveredMessage_))->size_];
  messageLength_ = ((IOSByteArray *) nil_chk(recoveredMessage_))->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(recoveredMessage_, 0, mBuf_, 0, recoveredMessage_->size_);
}

- (void)updateWithByte:(jbyte)b {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByte:b];
  if (messageLength_ < ((IOSByteArray *) nil_chk(mBuf_))->size_) {
    *IOSByteArray_GetRef(mBuf_, messageLength_) = b;
  }
  messageLength_++;
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)off
                    withInt:(jint)len {
  while (len > 0 && messageLength_ < ((IOSByteArray *) nil_chk(mBuf_))->size_) {
    [self updateWithByte:IOSByteArray_Get(nil_chk(inArg), off)];
    off++;
    len--;
  }
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:inArg withInt:off withInt:len];
  messageLength_ += len;
}

- (void)reset {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) reset];
  messageLength_ = 0;
  OrgSpongycastleCryptoSignersISO9796d2Signer_clearBlockWithByteArray_(self, mBuf_);
  if (recoveredMessage_ != nil) {
    OrgSpongycastleCryptoSignersISO9796d2Signer_clearBlockWithByteArray_(self, recoveredMessage_);
  }
  recoveredMessage_ = nil;
  fullMessage_ = false;
  if (preSig_ != nil) {
    preSig_ = nil;
    OrgSpongycastleCryptoSignersISO9796d2Signer_clearBlockWithByteArray_(self, preBlock_);
    preBlock_ = nil;
  }
}

- (IOSByteArray *)generateSignature {
  jint digSize = [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize];
  jint t = 0;
  jint delta = 0;
  if (trailer_ == OrgSpongycastleCryptoSignersISOTrailers_TRAILER_IMPLICIT) {
    t = 8;
    delta = ((IOSByteArray *) nil_chk(block_))->size_ - digSize - 1;
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:block_ withInt:delta];
    *IOSByteArray_GetRef(block_, ((IOSByteArray *) nil_chk(block_))->size_ - 1) = (jbyte) OrgSpongycastleCryptoSignersISOTrailers_TRAILER_IMPLICIT;
  }
  else {
    t = 16;
    delta = ((IOSByteArray *) nil_chk(block_))->size_ - digSize - 2;
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:block_ withInt:delta];
    *IOSByteArray_GetRef(block_, ((IOSByteArray *) nil_chk(block_))->size_ - 2) = (jbyte) (JreURShift32(trailer_, 8));
    *IOSByteArray_GetRef(block_, block_->size_ - 1) = (jbyte) trailer_;
  }
  jbyte header = 0;
  jint x = (digSize + messageLength_) * 8 + t + 4 - keyBits_;
  if (x > 0) {
    jint mR = messageLength_ - ((x + 7) / 8);
    header = (jint) 0x60;
    delta -= mR;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mBuf_, 0, block_, delta, mR);
    recoveredMessage_ = [IOSByteArray newArrayWithLength:mR];
  }
  else {
    header = (jint) 0x40;
    delta -= messageLength_;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mBuf_, 0, block_, delta, messageLength_);
    recoveredMessage_ = [IOSByteArray newArrayWithLength:messageLength_];
  }
  if ((delta - 1) > 0) {
    for (jint i = delta - 1; i != 0; i--) {
      *IOSByteArray_GetRef(nil_chk(block_), i) = (jbyte) (jint) 0xbb;
    }
    *IOSByteArray_GetRef(nil_chk(block_), delta - 1) ^= (jbyte) (jint) 0x01;
    *IOSByteArray_GetRef(block_, 0) = (jbyte) (jint) 0x0b;
    *IOSByteArray_GetRef(block_, 0) |= header;
  }
  else {
    *IOSByteArray_GetRef(nil_chk(block_), 0) = (jbyte) (jint) 0x0a;
    *IOSByteArray_GetRef(block_, 0) |= header;
  }
  IOSByteArray *b = [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:block_ withInt:0 withInt:block_->size_];
  fullMessage_ = ((header & (jint) 0x20) == 0);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mBuf_, 0, recoveredMessage_, 0, ((IOSByteArray *) nil_chk(recoveredMessage_))->size_);
  messageLength_ = 0;
  OrgSpongycastleCryptoSignersISO9796d2Signer_clearBlockWithByteArray_(self, mBuf_);
  OrgSpongycastleCryptoSignersISO9796d2Signer_clearBlockWithByteArray_(self, block_);
  return b;
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)signature {
  IOSByteArray *block = nil;
  if (preSig_ == nil) {
    @try {
      block = [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:signature withInt:0 withInt:((IOSByteArray *) nil_chk(signature))->size_];
    }
    @catch (JavaLangException *e) {
      return false;
    }
  }
  else {
    if (!OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(preSig_, signature)) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"updateWithRecoveredMessage called on different signature");
    }
    block = preBlock_;
    preSig_ = nil;
    preBlock_ = nil;
  }
  if (((IOSByteArray_Get(nil_chk(block), 0) & (jint) 0xC0) ^ (jint) 0x40) != 0) {
    return OrgSpongycastleCryptoSignersISO9796d2Signer_returnFalseWithByteArray_(self, block);
  }
  if (((IOSByteArray_Get(block, block->size_ - 1) & (jint) 0xF) ^ (jint) 0xC) != 0) {
    return OrgSpongycastleCryptoSignersISO9796d2Signer_returnFalseWithByteArray_(self, block);
  }
  jint delta = 0;
  if (((IOSByteArray_Get(block, block->size_ - 1) & (jint) 0xFF) ^ (jint) 0xBC) == 0) {
    delta = 1;
  }
  else {
    jint sigTrail = (JreLShift32((IOSByteArray_Get(block, block->size_ - 2) & (jint) 0xFF), 8)) | (IOSByteArray_Get(block, block->size_ - 1) & (jint) 0xFF);
    JavaLangInteger *trailerObj = OrgSpongycastleCryptoSignersISOTrailers_getTrailerWithOrgSpongycastleCryptoDigest_(digest_);
    if (trailerObj != nil) {
      if (sigTrail != [trailerObj intValue]) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"signer initialised with wrong digest for trailer ", sigTrail));
      }
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unrecognised hash in signature");
    }
    delta = 2;
  }
  jint mStart = 0;
  for (mStart = 0; mStart != block->size_; mStart++) {
    if (((IOSByteArray_Get(block, mStart) & (jint) 0x0f) ^ (jint) 0x0a) == 0) {
      break;
    }
  }
  mStart++;
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  jint off = block->size_ - delta - hash_->size_;
  if ((off - mStart) <= 0) {
    return OrgSpongycastleCryptoSignersISO9796d2Signer_returnFalseWithByteArray_(self, block);
  }
  if ((IOSByteArray_Get(block, 0) & (jint) 0x20) == 0) {
    fullMessage_ = true;
    if (messageLength_ > off - mStart) {
      return OrgSpongycastleCryptoSignersISO9796d2Signer_returnFalseWithByteArray_(self, block);
    }
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) reset];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:block withInt:mStart withInt:off - mStart];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hash_ withInt:0];
    jboolean isOkay = true;
    for (jint i = 0; i != hash_->size_; i++) {
      *IOSByteArray_GetRef(block, off + i) ^= IOSByteArray_Get(hash_, i);
      if (IOSByteArray_Get(block, off + i) != 0) {
        isOkay = false;
      }
    }
    if (!isOkay) {
      return OrgSpongycastleCryptoSignersISO9796d2Signer_returnFalseWithByteArray_(self, block);
    }
    recoveredMessage_ = [IOSByteArray newArrayWithLength:off - mStart];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, mStart, recoveredMessage_, 0, recoveredMessage_->size_);
  }
  else {
    fullMessage_ = false;
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hash_ withInt:0];
    jboolean isOkay = true;
    for (jint i = 0; i != hash_->size_; i++) {
      *IOSByteArray_GetRef(block, off + i) ^= IOSByteArray_Get(hash_, i);
      if (IOSByteArray_Get(block, off + i) != 0) {
        isOkay = false;
      }
    }
    if (!isOkay) {
      return OrgSpongycastleCryptoSignersISO9796d2Signer_returnFalseWithByteArray_(self, block);
    }
    recoveredMessage_ = [IOSByteArray newArrayWithLength:off - mStart];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, mStart, recoveredMessage_, 0, recoveredMessage_->size_);
  }
  if (messageLength_ != 0) {
    if (!OrgSpongycastleCryptoSignersISO9796d2Signer_isSameAsWithByteArray_withByteArray_(self, mBuf_, recoveredMessage_)) {
      return OrgSpongycastleCryptoSignersISO9796d2Signer_returnFalseWithByteArray_(self, block);
    }
  }
  OrgSpongycastleCryptoSignersISO9796d2Signer_clearBlockWithByteArray_(self, mBuf_);
  OrgSpongycastleCryptoSignersISO9796d2Signer_clearBlockWithByteArray_(self, block);
  messageLength_ = 0;
  return true;
}

- (jboolean)returnFalseWithByteArray:(IOSByteArray *)block {
  return OrgSpongycastleCryptoSignersISO9796d2Signer_returnFalseWithByteArray_(self, block);
}

- (jboolean)hasFullMessage {
  return fullMessage_;
}

- (IOSByteArray *)getRecoveredMessage {
  return recoveredMessage_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, 9, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 15, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoAsymmetricBlockCipher:withOrgSpongycastleCryptoDigest:withBoolean:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoAsymmetricBlockCipher:withOrgSpongycastleCryptoDigest:);
  methods[2].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[3].selector = @selector(isSameAsWithByteArray:withByteArray:);
  methods[4].selector = @selector(clearBlockWithByteArray:);
  methods[5].selector = @selector(updateWithRecoveredMessageWithByteArray:);
  methods[6].selector = @selector(updateWithByte:);
  methods[7].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(reset);
  methods[9].selector = @selector(generateSignature);
  methods[10].selector = @selector(verifySignatureWithByteArray:);
  methods[11].selector = @selector(returnFalseWithByteArray:);
  methods[12].selector = @selector(hasFullMessage);
  methods[13].selector = @selector(getRecoveredMessage);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRAILER_IMPLICIT", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2Signer_TRAILER_IMPLICIT, 0x19, -1, -1, -1, -1 },
    { "TRAILER_RIPEMD160", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2Signer_TRAILER_RIPEMD160, 0x19, -1, -1, -1, -1 },
    { "TRAILER_RIPEMD128", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2Signer_TRAILER_RIPEMD128, 0x19, -1, -1, -1, -1 },
    { "TRAILER_SHA1", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2Signer_TRAILER_SHA1, 0x19, -1, -1, -1, -1 },
    { "TRAILER_SHA256", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2Signer_TRAILER_SHA256, 0x19, -1, -1, -1, -1 },
    { "TRAILER_SHA512", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2Signer_TRAILER_SHA512, 0x19, -1, -1, -1, -1 },
    { "TRAILER_SHA384", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2Signer_TRAILER_SHA384, 0x19, -1, -1, -1, -1 },
    { "TRAILER_WHIRLPOOL", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2Signer_TRAILER_WHIRLPOOL, 0x19, -1, -1, -1, -1 },
    { "digest_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LOrgSpongycastleCryptoAsymmetricBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "trailer_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyBits_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "block_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBuf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "messageLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fullMessage_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "recoveredMessage_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "preSig_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "preBlock_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoAsymmetricBlockCipher;LOrgSpongycastleCryptoDigest;Z", "LOrgSpongycastleCryptoAsymmetricBlockCipher;LOrgSpongycastleCryptoDigest;", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "isSameAs", "[B[B", "clearBlock", "[B", "updateWithRecoveredMessage", "LOrgSpongycastleCryptoInvalidCipherTextException;", "update", "B", "[BII", "LOrgSpongycastleCryptoCryptoException;", "verifySignature", "returnFalse" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoSignersISO9796d2Signer = { "ISO9796d2Signer", "org.spongycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 14, 19, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoSignersISO9796d2Signer;
}

@end

void OrgSpongycastleCryptoSignersISO9796d2Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withBoolean_(OrgSpongycastleCryptoSignersISO9796d2Signer *self, id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest, jboolean implicit) {
  NSObject_init(self);
  self->cipher_ = cipher;
  self->digest_ = digest;
  if (implicit) {
    self->trailer_ = OrgSpongycastleCryptoSignersISOTrailers_TRAILER_IMPLICIT;
  }
  else {
    JavaLangInteger *trailerObj = OrgSpongycastleCryptoSignersISOTrailers_getTrailerWithOrgSpongycastleCryptoDigest_(digest);
    if (trailerObj != nil) {
      self->trailer_ = [trailerObj intValue];
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"no valid trailer for digest: ", [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) getAlgorithmName]));
    }
  }
}

OrgSpongycastleCryptoSignersISO9796d2Signer *new_OrgSpongycastleCryptoSignersISO9796d2Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withBoolean_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest, jboolean implicit) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersISO9796d2Signer, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withBoolean_, cipher, digest, implicit)
}

OrgSpongycastleCryptoSignersISO9796d2Signer *create_OrgSpongycastleCryptoSignersISO9796d2Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withBoolean_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest, jboolean implicit) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersISO9796d2Signer, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withBoolean_, cipher, digest, implicit)
}

void OrgSpongycastleCryptoSignersISO9796d2Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoSignersISO9796d2Signer *self, id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest) {
  OrgSpongycastleCryptoSignersISO9796d2Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withBoolean_(self, cipher, digest, false);
}

OrgSpongycastleCryptoSignersISO9796d2Signer *new_OrgSpongycastleCryptoSignersISO9796d2Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersISO9796d2Signer, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_, cipher, digest)
}

OrgSpongycastleCryptoSignersISO9796d2Signer *create_OrgSpongycastleCryptoSignersISO9796d2Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersISO9796d2Signer, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_, cipher, digest)
}

jboolean OrgSpongycastleCryptoSignersISO9796d2Signer_isSameAsWithByteArray_withByteArray_(OrgSpongycastleCryptoSignersISO9796d2Signer *self, IOSByteArray *a, IOSByteArray *b) {
  jboolean isOkay = true;
  if (self->messageLength_ > ((IOSByteArray *) nil_chk(self->mBuf_))->size_) {
    if (self->mBuf_->size_ > ((IOSByteArray *) nil_chk(b))->size_) {
      isOkay = false;
    }
    for (jint i = 0; i != self->mBuf_->size_; i++) {
      if (IOSByteArray_Get(nil_chk(a), i) != IOSByteArray_Get(b, i)) {
        isOkay = false;
      }
    }
  }
  else {
    if (self->messageLength_ != ((IOSByteArray *) nil_chk(b))->size_) {
      isOkay = false;
    }
    for (jint i = 0; i != b->size_; i++) {
      if (IOSByteArray_Get(nil_chk(a), i) != IOSByteArray_Get(b, i)) {
        isOkay = false;
      }
    }
  }
  return isOkay;
}

void OrgSpongycastleCryptoSignersISO9796d2Signer_clearBlockWithByteArray_(OrgSpongycastleCryptoSignersISO9796d2Signer *self, IOSByteArray *block) {
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(block))->size_; i++) {
    *IOSByteArray_GetRef(block, i) = 0;
  }
}

jboolean OrgSpongycastleCryptoSignersISO9796d2Signer_returnFalseWithByteArray_(OrgSpongycastleCryptoSignersISO9796d2Signer *self, IOSByteArray *block) {
  self->messageLength_ = 0;
  OrgSpongycastleCryptoSignersISO9796d2Signer_clearBlockWithByteArray_(self, self->mBuf_);
  OrgSpongycastleCryptoSignersISO9796d2Signer_clearBlockWithByteArray_(self, block);
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoSignersISO9796d2Signer)
