//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/signers/RSADigestSigner.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Hashtable.h"
#include "org/spongycastle/asn1/ASN1Encoding.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/spongycastle/asn1/DERNull.h"
#include "org/spongycastle/asn1/nist/NISTObjectIdentifiers.h"
#include "org/spongycastle/asn1/pkcs/PKCSObjectIdentifiers.h"
#include "org/spongycastle/asn1/teletrust/TeleTrusTObjectIdentifiers.h"
#include "org/spongycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/spongycastle/asn1/x509/DigestInfo.h"
#include "org/spongycastle/asn1/x509/X509ObjectIdentifiers.h"
#include "org/spongycastle/crypto/AsymmetricBlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/CryptoException.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/encodings/PKCS1Encoding.h"
#include "org/spongycastle/crypto/engines/RSABlindedEngine.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/crypto/signers/RSADigestSigner.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleCryptoSignersRSADigestSigner () {
 @public
  id<OrgSpongycastleCryptoAsymmetricBlockCipher> rsaEngine_;
  OrgSpongycastleAsn1X509AlgorithmIdentifier *algId_;
  id<OrgSpongycastleCryptoDigest> digest_;
  jboolean forSigning_;
}

- (IOSByteArray *)derEncodeWithByteArray:(IOSByteArray *)hash_;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersRSADigestSigner, rsaEngine_, id<OrgSpongycastleCryptoAsymmetricBlockCipher>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersRSADigestSigner, algId_, OrgSpongycastleAsn1X509AlgorithmIdentifier *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersRSADigestSigner, digest_, id<OrgSpongycastleCryptoDigest>)

inline JavaUtilHashtable *OrgSpongycastleCryptoSignersRSADigestSigner_get_oidMap(void);
static JavaUtilHashtable *OrgSpongycastleCryptoSignersRSADigestSigner_oidMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoSignersRSADigestSigner, oidMap, JavaUtilHashtable *)

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoSignersRSADigestSigner_derEncodeWithByteArray_(OrgSpongycastleCryptoSignersRSADigestSigner *self, IOSByteArray *hash_);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoSignersRSADigestSigner)

@implementation OrgSpongycastleCryptoSignersRSADigestSigner

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  OrgSpongycastleCryptoSignersRSADigestSigner_initWithOrgSpongycastleCryptoDigest_(self, digest);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
        withOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)digestOid {
  OrgSpongycastleCryptoSignersRSADigestSigner_initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleAsn1ASN1ObjectIdentifier_(self, digest, digestOid);
  return self;
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$", [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getAlgorithmName], @"withRSA");
}

- (void)init__WithBoolean:(jboolean)forSigning
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)parameters {
  self->forSigning_ = forSigning;
  OrgSpongycastleCryptoParamsAsymmetricKeyParameter *k;
  if ([parameters isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
    k = (OrgSpongycastleCryptoParamsAsymmetricKeyParameter *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithRandom *) parameters))) getParameters], [OrgSpongycastleCryptoParamsAsymmetricKeyParameter class]);
  }
  else {
    k = (OrgSpongycastleCryptoParamsAsymmetricKeyParameter *) cast_chk(parameters, [OrgSpongycastleCryptoParamsAsymmetricKeyParameter class]);
  }
  if (forSigning && ![((OrgSpongycastleCryptoParamsAsymmetricKeyParameter *) nil_chk(k)) isPrivate]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"signing requires private key");
  }
  if (!forSigning && [((OrgSpongycastleCryptoParamsAsymmetricKeyParameter *) nil_chk(k)) isPrivate]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"verification requires public key");
  }
  [self reset];
  [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(rsaEngine_)) init__WithBoolean:forSigning withOrgSpongycastleCryptoCipherParameters:parameters];
}

- (void)updateWithByte:(jbyte)input {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByte:input];
}

- (void)updateWithByteArray:(IOSByteArray *)input
                    withInt:(jint)inOff
                    withInt:(jint)length {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:input withInt:inOff withInt:length];
}

- (IOSByteArray *)generateSignature {
  if (!forSigning_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"RSADigestSigner not initialised for signature generation.");
  }
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [digest_ doFinalWithByteArray:hash_ withInt:0];
  @try {
    IOSByteArray *data = OrgSpongycastleCryptoSignersRSADigestSigner_derEncodeWithByteArray_(self, hash_);
    return [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(rsaEngine_)) processBlockWithByteArray:data withInt:0 withInt:((IOSByteArray *) nil_chk(data))->size_];
  }
  @catch (JavaIoIOException *e) {
    @throw new_OrgSpongycastleCryptoCryptoException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"unable to encode signature: ", [e getMessage]), e);
  }
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)signature {
  if (forSigning_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"RSADigestSigner not initialised for verification");
  }
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [digest_ doFinalWithByteArray:hash_ withInt:0];
  IOSByteArray *sig;
  IOSByteArray *expected;
  @try {
    sig = [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(rsaEngine_)) processBlockWithByteArray:signature withInt:0 withInt:((IOSByteArray *) nil_chk(signature))->size_];
    expected = OrgSpongycastleCryptoSignersRSADigestSigner_derEncodeWithByteArray_(self, hash_);
  }
  @catch (JavaLangException *e) {
    return false;
  }
  if (((IOSByteArray *) nil_chk(sig))->size_ == ((IOSByteArray *) nil_chk(expected))->size_) {
    return OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(sig, expected);
  }
  else if (sig->size_ == expected->size_ - 2) {
    jint sigOffset = sig->size_ - hash_->size_ - 2;
    jint expectedOffset = expected->size_ - hash_->size_ - 2;
    *IOSByteArray_GetRef(expected, 1) -= 2;
    *IOSByteArray_GetRef(expected, 3) -= 2;
    jint nonEqual = 0;
    for (jint i = 0; i < hash_->size_; i++) {
      nonEqual |= (IOSByteArray_Get(sig, sigOffset + i) ^ IOSByteArray_Get(expected, expectedOffset + i));
    }
    for (jint i = 0; i < sigOffset; i++) {
      nonEqual |= (IOSByteArray_Get(sig, i) ^ IOSByteArray_Get(expected, i));
    }
    return nonEqual == 0;
  }
  else {
    OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(expected, expected);
    return false;
  }
}

- (void)reset {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) reset];
}

- (IOSByteArray *)derEncodeWithByteArray:(IOSByteArray *)hash_ {
  return OrgSpongycastleCryptoSignersRSADigestSigner_derEncodeWithByteArray_(self, hash_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 10, 9, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoDigest:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoDigest:withOrgSpongycastleAsn1ASN1ObjectIdentifier:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[4].selector = @selector(updateWithByte:);
  methods[5].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(generateSignature);
  methods[7].selector = @selector(verifySignatureWithByteArray:);
  methods[8].selector = @selector(reset);
  methods[9].selector = @selector(derEncodeWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rsaEngine_", "LOrgSpongycastleCryptoAsymmetricBlockCipher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "algId_", "LOrgSpongycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "digest_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "forSigning_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "oidMap", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDigest;", "LOrgSpongycastleCryptoDigest;LOrgSpongycastleAsn1ASN1ObjectIdentifier;", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "update", "B", "[BII", "LOrgSpongycastleCryptoCryptoException;LOrgSpongycastleCryptoDataLengthException;", "verifySignature", "[B", "derEncode", "LJavaIoIOException;", &OrgSpongycastleCryptoSignersRSADigestSigner_oidMap };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoSignersRSADigestSigner = { "RSADigestSigner", "org.spongycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 10, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoSignersRSADigestSigner;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoSignersRSADigestSigner class]) {
    OrgSpongycastleCryptoSignersRSADigestSigner_oidMap = new_JavaUtilHashtable_init();
    {
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"RIPEMD128" withId:JreLoadStatic(OrgSpongycastleAsn1TeletrustTeleTrusTObjectIdentifiers, ripemd128)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"RIPEMD160" withId:JreLoadStatic(OrgSpongycastleAsn1TeletrustTeleTrusTObjectIdentifiers, ripemd160)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"RIPEMD256" withId:JreLoadStatic(OrgSpongycastleAsn1TeletrustTeleTrusTObjectIdentifiers, ripemd256)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"SHA-1" withId:JreLoadStatic(OrgSpongycastleAsn1X509X509ObjectIdentifiers, id_SHA1)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"SHA-224" withId:JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha224)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"SHA-256" withId:JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha256)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"SHA-384" withId:JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha384)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"SHA-512" withId:JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha512)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"SHA-512/224" withId:JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha512_224)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"SHA-512/256" withId:JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha512_256)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"SHA3-224" withId:JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha3_224)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"SHA3-256" withId:JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha3_256)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"SHA3-384" withId:JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha3_384)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"SHA3-512" withId:JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha3_512)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"MD2" withId:JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, md2)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"MD4" withId:JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, md4)];
      (void) [OrgSpongycastleCryptoSignersRSADigestSigner_oidMap putWithId:@"MD5" withId:JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, md5)];
    }
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoSignersRSADigestSigner)
  }
}

@end

void OrgSpongycastleCryptoSignersRSADigestSigner_initWithOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoSignersRSADigestSigner *self, id<OrgSpongycastleCryptoDigest> digest) {
  OrgSpongycastleCryptoSignersRSADigestSigner_initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleAsn1ASN1ObjectIdentifier_(self, digest, (OrgSpongycastleAsn1ASN1ObjectIdentifier *) cast_chk([((JavaUtilHashtable *) nil_chk(OrgSpongycastleCryptoSignersRSADigestSigner_oidMap)) getWithId:[((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) getAlgorithmName]], [OrgSpongycastleAsn1ASN1ObjectIdentifier class]));
}

OrgSpongycastleCryptoSignersRSADigestSigner *new_OrgSpongycastleCryptoSignersRSADigestSigner_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersRSADigestSigner, initWithOrgSpongycastleCryptoDigest_, digest)
}

OrgSpongycastleCryptoSignersRSADigestSigner *create_OrgSpongycastleCryptoSignersRSADigestSigner_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersRSADigestSigner, initWithOrgSpongycastleCryptoDigest_, digest)
}

void OrgSpongycastleCryptoSignersRSADigestSigner_initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleAsn1ASN1ObjectIdentifier_(OrgSpongycastleCryptoSignersRSADigestSigner *self, id<OrgSpongycastleCryptoDigest> digest, OrgSpongycastleAsn1ASN1ObjectIdentifier *digestOid) {
  NSObject_init(self);
  self->rsaEngine_ = new_OrgSpongycastleCryptoEncodingsPKCS1Encoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_(new_OrgSpongycastleCryptoEnginesRSABlindedEngine_init());
  self->digest_ = digest;
  self->algId_ = new_OrgSpongycastleAsn1X509AlgorithmIdentifier_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Encodable_(digestOid, JreLoadStatic(OrgSpongycastleAsn1DERNull, INSTANCE));
}

OrgSpongycastleCryptoSignersRSADigestSigner *new_OrgSpongycastleCryptoSignersRSADigestSigner_initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleAsn1ASN1ObjectIdentifier_(id<OrgSpongycastleCryptoDigest> digest, OrgSpongycastleAsn1ASN1ObjectIdentifier *digestOid) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersRSADigestSigner, initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleAsn1ASN1ObjectIdentifier_, digest, digestOid)
}

OrgSpongycastleCryptoSignersRSADigestSigner *create_OrgSpongycastleCryptoSignersRSADigestSigner_initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleAsn1ASN1ObjectIdentifier_(id<OrgSpongycastleCryptoDigest> digest, OrgSpongycastleAsn1ASN1ObjectIdentifier *digestOid) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersRSADigestSigner, initWithOrgSpongycastleCryptoDigest_withOrgSpongycastleAsn1ASN1ObjectIdentifier_, digest, digestOid)
}

IOSByteArray *OrgSpongycastleCryptoSignersRSADigestSigner_derEncodeWithByteArray_(OrgSpongycastleCryptoSignersRSADigestSigner *self, IOSByteArray *hash_) {
  OrgSpongycastleAsn1X509DigestInfo *dInfo = new_OrgSpongycastleAsn1X509DigestInfo_initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withByteArray_(self->algId_, hash_);
  return [dInfo getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoSignersRSADigestSigner)
