//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/signers/RandomDSAKCalculator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/signers/RandomDSAKCalculator.h"

@interface OrgSpongycastleCryptoSignersRandomDSAKCalculator () {
 @public
  JavaMathBigInteger *q_;
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersRandomDSAKCalculator, q_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersRandomDSAKCalculator, random_, JavaSecuritySecureRandom *)

inline JavaMathBigInteger *OrgSpongycastleCryptoSignersRandomDSAKCalculator_get_ZERO(void);
static JavaMathBigInteger *OrgSpongycastleCryptoSignersRandomDSAKCalculator_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoSignersRandomDSAKCalculator, ZERO, JavaMathBigInteger *)

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoSignersRandomDSAKCalculator)

@implementation OrgSpongycastleCryptoSignersRandomDSAKCalculator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoSignersRandomDSAKCalculator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isDeterministic {
  return false;
}

- (void)init__WithJavaMathBigInteger:(JavaMathBigInteger *)n
        withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  self->q_ = n;
  self->random_ = random;
}

- (void)init__WithJavaMathBigInteger:(JavaMathBigInteger *)n
              withJavaMathBigInteger:(JavaMathBigInteger *)d
                       withByteArray:(IOSByteArray *)message {
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"Operation not supported");
}

- (JavaMathBigInteger *)nextK {
  jint qBitLength = [((JavaMathBigInteger *) nil_chk(q_)) bitLength];
  JavaMathBigInteger *k;
  do {
    k = new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(qBitLength, random_);
  }
  while ([k isEqual:OrgSpongycastleCryptoSignersRandomDSAKCalculator_ZERO] || [k compareToWithId:q_] >= 0);
  return k;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isDeterministic);
  methods[2].selector = @selector(init__WithJavaMathBigInteger:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(init__WithJavaMathBigInteger:withJavaMathBigInteger:withByteArray:);
  methods[4].selector = @selector(nextK);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "q_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LJavaMathBigInteger;LJavaSecuritySecureRandom;", "LJavaMathBigInteger;LJavaMathBigInteger;[B", &OrgSpongycastleCryptoSignersRandomDSAKCalculator_ZERO };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoSignersRandomDSAKCalculator = { "RandomDSAKCalculator", "org.spongycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoSignersRandomDSAKCalculator;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoSignersRandomDSAKCalculator class]) {
    OrgSpongycastleCryptoSignersRandomDSAKCalculator_ZERO = JavaMathBigInteger_valueOfWithLong_(0);
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoSignersRandomDSAKCalculator)
  }
}

@end

void OrgSpongycastleCryptoSignersRandomDSAKCalculator_init(OrgSpongycastleCryptoSignersRandomDSAKCalculator *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoSignersRandomDSAKCalculator *new_OrgSpongycastleCryptoSignersRandomDSAKCalculator_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersRandomDSAKCalculator, init)
}

OrgSpongycastleCryptoSignersRandomDSAKCalculator *create_OrgSpongycastleCryptoSignersRandomDSAKCalculator_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersRandomDSAKCalculator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoSignersRandomDSAKCalculator)
