//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/signers/DSASigner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoSignersDSASigner")
#ifdef RESTRICT_OrgSpongycastleCryptoSignersDSASigner
#define INCLUDE_ALL_OrgSpongycastleCryptoSignersDSASigner 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoSignersDSASigner 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoSignersDSASigner

#if !defined (OrgSpongycastleCryptoSignersDSASigner_) && (INCLUDE_ALL_OrgSpongycastleCryptoSignersDSASigner || defined(INCLUDE_OrgSpongycastleCryptoSignersDSASigner))
#define OrgSpongycastleCryptoSignersDSASigner_

#define RESTRICT_OrgSpongycastleCryptoDSA 1
#define INCLUDE_OrgSpongycastleCryptoDSA 1
#include "org/spongycastle/crypto/DSA.h"

@class IOSByteArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class JavaSecuritySecureRandom;
@protocol OrgSpongycastleCryptoCipherParameters;
@protocol OrgSpongycastleCryptoSignersDSAKCalculator;

@interface OrgSpongycastleCryptoSignersDSASigner : NSObject < OrgSpongycastleCryptoDSA >

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithOrgSpongycastleCryptoSignersDSAKCalculator:(id<OrgSpongycastleCryptoSignersDSAKCalculator>)kCalculator;

- (IOSObjectArray *)generateSignatureWithByteArray:(IOSByteArray *)message;

- (void)init__WithBoolean:(jboolean)forSigning
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param OBJC_METHOD_FAMILY_NONE;

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                  withJavaMathBigInteger:(JavaMathBigInteger *)r
                  withJavaMathBigInteger:(JavaMathBigInteger *)s;

#pragma mark Protected

- (JavaSecuritySecureRandom *)initSecureRandomWithBoolean:(jboolean)needed
                             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)provided OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoSignersDSASigner)

FOUNDATION_EXPORT void OrgSpongycastleCryptoSignersDSASigner_init(OrgSpongycastleCryptoSignersDSASigner *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoSignersDSASigner *new_OrgSpongycastleCryptoSignersDSASigner_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoSignersDSASigner *create_OrgSpongycastleCryptoSignersDSASigner_init(void);

FOUNDATION_EXPORT void OrgSpongycastleCryptoSignersDSASigner_initWithOrgSpongycastleCryptoSignersDSAKCalculator_(OrgSpongycastleCryptoSignersDSASigner *self, id<OrgSpongycastleCryptoSignersDSAKCalculator> kCalculator);

FOUNDATION_EXPORT OrgSpongycastleCryptoSignersDSASigner *new_OrgSpongycastleCryptoSignersDSASigner_initWithOrgSpongycastleCryptoSignersDSAKCalculator_(id<OrgSpongycastleCryptoSignersDSAKCalculator> kCalculator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoSignersDSASigner *create_OrgSpongycastleCryptoSignersDSASigner_initWithOrgSpongycastleCryptoSignersDSAKCalculator_(id<OrgSpongycastleCryptoSignersDSAKCalculator> kCalculator);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoSignersDSASigner)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoSignersDSASigner")
