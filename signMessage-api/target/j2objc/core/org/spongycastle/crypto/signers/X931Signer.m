//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/signers/X931Signer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/AsymmetricBlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/params/RSAKeyParameters.h"
#include "org/spongycastle/crypto/signers/ISOTrailers.h"
#include "org/spongycastle/crypto/signers/X931Signer.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/BigIntegers.h"

@interface OrgSpongycastleCryptoSignersX931Signer () {
 @public
  id<OrgSpongycastleCryptoDigest> digest_;
  id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher_;
  OrgSpongycastleCryptoParamsRSAKeyParameters *kParam_;
  jint trailer_;
  jint keyBits_;
  IOSByteArray *block_;
}

- (void)clearBlockWithByteArray:(IOSByteArray *)block;

- (void)createSignatureBlock;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersX931Signer, digest_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersX931Signer, cipher_, id<OrgSpongycastleCryptoAsymmetricBlockCipher>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersX931Signer, kParam_, OrgSpongycastleCryptoParamsRSAKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersX931Signer, block_, IOSByteArray *)

__attribute__((unused)) static void OrgSpongycastleCryptoSignersX931Signer_clearBlockWithByteArray_(OrgSpongycastleCryptoSignersX931Signer *self, IOSByteArray *block);

__attribute__((unused)) static void OrgSpongycastleCryptoSignersX931Signer_createSignatureBlock(OrgSpongycastleCryptoSignersX931Signer *self);

@implementation OrgSpongycastleCryptoSignersX931Signer

- (instancetype)initWithOrgSpongycastleCryptoAsymmetricBlockCipher:(id<OrgSpongycastleCryptoAsymmetricBlockCipher>)cipher
                                   withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                                       withBoolean:(jboolean)implicit {
  OrgSpongycastleCryptoSignersX931Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withBoolean_(self, cipher, digest, implicit);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoAsymmetricBlockCipher:(id<OrgSpongycastleCryptoAsymmetricBlockCipher>)cipher
                                   withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  OrgSpongycastleCryptoSignersX931Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_(self, cipher, digest);
  return self;
}

- (void)init__WithBoolean:(jboolean)forSigning
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  kParam_ = (OrgSpongycastleCryptoParamsRSAKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsRSAKeyParameters class]);
  [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_)) init__WithBoolean:forSigning withOrgSpongycastleCryptoCipherParameters:kParam_];
  keyBits_ = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsRSAKeyParameters *) nil_chk(kParam_)) getModulus])) bitLength];
  block_ = [IOSByteArray newArrayWithLength:(keyBits_ + 7) / 8];
  [self reset];
}

- (void)clearBlockWithByteArray:(IOSByteArray *)block {
  OrgSpongycastleCryptoSignersX931Signer_clearBlockWithByteArray_(self, block);
}

- (void)updateWithByte:(jbyte)b {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByte:b];
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)off
                    withInt:(jint)len {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:inArg withInt:off withInt:len];
}

- (void)reset {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) reset];
}

- (IOSByteArray *)generateSignature {
  OrgSpongycastleCryptoSignersX931Signer_createSignatureBlock(self);
  JavaMathBigInteger *t = new_JavaMathBigInteger_initWithInt_withByteArray_(1, [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:block_ withInt:0 withInt:((IOSByteArray *) nil_chk(block_))->size_]);
  OrgSpongycastleCryptoSignersX931Signer_clearBlockWithByteArray_(self, block_);
  t = [t minWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsRSAKeyParameters *) nil_chk(kParam_)) getModulus])) subtractWithJavaMathBigInteger:t]];
  return OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(([((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsRSAKeyParameters *) nil_chk(kParam_)) getModulus])) bitLength] + 7) / 8, t);
}

- (void)createSignatureBlock {
  OrgSpongycastleCryptoSignersX931Signer_createSignatureBlock(self);
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)signature {
  @try {
    block_ = [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:signature withInt:0 withInt:((IOSByteArray *) nil_chk(signature))->size_];
  }
  @catch (JavaLangException *e) {
    return false;
  }
  JavaMathBigInteger *t = new_JavaMathBigInteger_initWithInt_withByteArray_(1, block_);
  JavaMathBigInteger *f;
  if (([t intValue] & 15) == 12) {
    f = t;
  }
  else {
    t = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsRSAKeyParameters *) nil_chk(kParam_)) getModulus])) subtractWithJavaMathBigInteger:t];
    if (([((JavaMathBigInteger *) nil_chk(t)) intValue] & 15) == 12) {
      f = t;
    }
    else {
      return false;
    }
  }
  OrgSpongycastleCryptoSignersX931Signer_createSignatureBlock(self);
  IOSByteArray *fBlock = OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(((IOSByteArray *) nil_chk(block_))->size_, f);
  jboolean rv = OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(block_, fBlock);
  OrgSpongycastleCryptoSignersX931Signer_clearBlockWithByteArray_(self, block_);
  OrgSpongycastleCryptoSignersX931Signer_clearBlockWithByteArray_(self, fBlock);
  return rv;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 9, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoAsymmetricBlockCipher:withOrgSpongycastleCryptoDigest:withBoolean:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoAsymmetricBlockCipher:withOrgSpongycastleCryptoDigest:);
  methods[2].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[3].selector = @selector(clearBlockWithByteArray:);
  methods[4].selector = @selector(updateWithByte:);
  methods[5].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(reset);
  methods[7].selector = @selector(generateSignature);
  methods[8].selector = @selector(createSignatureBlock);
  methods[9].selector = @selector(verifySignatureWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRAILER_IMPLICIT", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersX931Signer_TRAILER_IMPLICIT, 0x19, -1, -1, -1, -1 },
    { "TRAILER_RIPEMD160", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersX931Signer_TRAILER_RIPEMD160, 0x19, -1, -1, -1, -1 },
    { "TRAILER_RIPEMD128", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersX931Signer_TRAILER_RIPEMD128, 0x19, -1, -1, -1, -1 },
    { "TRAILER_SHA1", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersX931Signer_TRAILER_SHA1, 0x19, -1, -1, -1, -1 },
    { "TRAILER_SHA256", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersX931Signer_TRAILER_SHA256, 0x19, -1, -1, -1, -1 },
    { "TRAILER_SHA512", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersX931Signer_TRAILER_SHA512, 0x19, -1, -1, -1, -1 },
    { "TRAILER_SHA384", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersX931Signer_TRAILER_SHA384, 0x19, -1, -1, -1, -1 },
    { "TRAILER_WHIRLPOOL", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersX931Signer_TRAILER_WHIRLPOOL, 0x19, -1, -1, -1, -1 },
    { "TRAILER_SHA224", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersX931Signer_TRAILER_SHA224, 0x19, -1, -1, -1, -1 },
    { "digest_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LOrgSpongycastleCryptoAsymmetricBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "kParam_", "LOrgSpongycastleCryptoParamsRSAKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "trailer_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyBits_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "block_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoAsymmetricBlockCipher;LOrgSpongycastleCryptoDigest;Z", "LOrgSpongycastleCryptoAsymmetricBlockCipher;LOrgSpongycastleCryptoDigest;", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "clearBlock", "[B", "update", "B", "[BII", "LOrgSpongycastleCryptoCryptoException;", "verifySignature" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoSignersX931Signer = { "X931Signer", "org.spongycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 10, 15, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoSignersX931Signer;
}

@end

void OrgSpongycastleCryptoSignersX931Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withBoolean_(OrgSpongycastleCryptoSignersX931Signer *self, id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest, jboolean implicit) {
  NSObject_init(self);
  self->cipher_ = cipher;
  self->digest_ = digest;
  if (implicit) {
    self->trailer_ = OrgSpongycastleCryptoSignersISOTrailers_TRAILER_IMPLICIT;
  }
  else {
    JavaLangInteger *trailerObj = OrgSpongycastleCryptoSignersISOTrailers_getTrailerWithOrgSpongycastleCryptoDigest_(digest);
    if (trailerObj != nil) {
      self->trailer_ = [trailerObj intValue];
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"no valid trailer for digest: ", [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) getAlgorithmName]));
    }
  }
}

OrgSpongycastleCryptoSignersX931Signer *new_OrgSpongycastleCryptoSignersX931Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withBoolean_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest, jboolean implicit) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersX931Signer, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withBoolean_, cipher, digest, implicit)
}

OrgSpongycastleCryptoSignersX931Signer *create_OrgSpongycastleCryptoSignersX931Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withBoolean_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest, jboolean implicit) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersX931Signer, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withBoolean_, cipher, digest, implicit)
}

void OrgSpongycastleCryptoSignersX931Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoSignersX931Signer *self, id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest) {
  OrgSpongycastleCryptoSignersX931Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withBoolean_(self, cipher, digest, false);
}

OrgSpongycastleCryptoSignersX931Signer *new_OrgSpongycastleCryptoSignersX931Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersX931Signer, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_, cipher, digest)
}

OrgSpongycastleCryptoSignersX931Signer *create_OrgSpongycastleCryptoSignersX931Signer_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersX931Signer, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_, cipher, digest)
}

void OrgSpongycastleCryptoSignersX931Signer_clearBlockWithByteArray_(OrgSpongycastleCryptoSignersX931Signer *self, IOSByteArray *block) {
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(block))->size_; i++) {
    *IOSByteArray_GetRef(block, i) = 0;
  }
}

void OrgSpongycastleCryptoSignersX931Signer_createSignatureBlock(OrgSpongycastleCryptoSignersX931Signer *self) {
  jint digSize = [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->digest_)) getDigestSize];
  jint delta;
  if (self->trailer_ == OrgSpongycastleCryptoSignersISOTrailers_TRAILER_IMPLICIT) {
    delta = ((IOSByteArray *) nil_chk(self->block_))->size_ - digSize - 1;
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->digest_)) doFinalWithByteArray:self->block_ withInt:delta];
    *IOSByteArray_GetRef(self->block_, ((IOSByteArray *) nil_chk(self->block_))->size_ - 1) = (jbyte) OrgSpongycastleCryptoSignersISOTrailers_TRAILER_IMPLICIT;
  }
  else {
    delta = ((IOSByteArray *) nil_chk(self->block_))->size_ - digSize - 2;
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->digest_)) doFinalWithByteArray:self->block_ withInt:delta];
    *IOSByteArray_GetRef(self->block_, ((IOSByteArray *) nil_chk(self->block_))->size_ - 2) = (jbyte) (JreURShift32(self->trailer_, 8));
    *IOSByteArray_GetRef(self->block_, self->block_->size_ - 1) = (jbyte) self->trailer_;
  }
  *IOSByteArray_GetRef(self->block_, 0) = (jint) 0x6b;
  for (jint i = delta - 2; i != 0; i--) {
    *IOSByteArray_GetRef(self->block_, i) = (jbyte) (jint) 0xbb;
  }
  *IOSByteArray_GetRef(self->block_, delta - 1) = (jbyte) (jint) 0xba;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoSignersX931Signer)
