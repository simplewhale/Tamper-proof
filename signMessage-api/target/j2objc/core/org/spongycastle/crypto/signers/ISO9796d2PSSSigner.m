//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/signers/ISO9796d2PSSSigner.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/AsymmetricBlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/crypto/params/ParametersWithSalt.h"
#include "org/spongycastle/crypto/params/RSAKeyParameters.h"
#include "org/spongycastle/crypto/signers/ISO9796d2PSSSigner.h"
#include "org/spongycastle/crypto/signers/ISOTrailers.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleCryptoSignersISO9796d2PSSSigner () {
 @public
  id<OrgSpongycastleCryptoDigest> digest_;
  id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher_;
  JavaSecuritySecureRandom *random_;
  IOSByteArray *standardSalt_;
  jint hLen_;
  jint trailer_;
  jint keyBits_;
  IOSByteArray *block_;
  IOSByteArray *mBuf_;
  jint messageLength_;
  jint saltLength_;
  jboolean fullMessage_;
  IOSByteArray *recoveredMessage_;
  IOSByteArray *preSig_;
  IOSByteArray *preBlock_;
  jint preMStart_;
  jint preTLength_;
}

- (jboolean)isSameAsWithByteArray:(IOSByteArray *)a
                    withByteArray:(IOSByteArray *)b;

- (void)clearBlockWithByteArray:(IOSByteArray *)block;

- (void)ItoOSPWithInt:(jint)i
        withByteArray:(IOSByteArray *)sp;

- (void)LtoOSPWithLong:(jlong)l
         withByteArray:(IOSByteArray *)sp;

- (IOSByteArray *)maskGeneratorFunction1WithByteArray:(IOSByteArray *)Z
                                              withInt:(jint)zOff
                                              withInt:(jint)zLen
                                              withInt:(jint)length;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2PSSSigner, digest_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2PSSSigner, cipher_, id<OrgSpongycastleCryptoAsymmetricBlockCipher>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2PSSSigner, random_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2PSSSigner, standardSalt_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2PSSSigner, block_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2PSSSigner, mBuf_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2PSSSigner, recoveredMessage_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2PSSSigner, preSig_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersISO9796d2PSSSigner, preBlock_, IOSByteArray *)

__attribute__((unused)) static jboolean OrgSpongycastleCryptoSignersISO9796d2PSSSigner_isSameAsWithByteArray_withByteArray_(OrgSpongycastleCryptoSignersISO9796d2PSSSigner *self, IOSByteArray *a, IOSByteArray *b);

__attribute__((unused)) static void OrgSpongycastleCryptoSignersISO9796d2PSSSigner_clearBlockWithByteArray_(OrgSpongycastleCryptoSignersISO9796d2PSSSigner *self, IOSByteArray *block);

__attribute__((unused)) static void OrgSpongycastleCryptoSignersISO9796d2PSSSigner_ItoOSPWithInt_withByteArray_(OrgSpongycastleCryptoSignersISO9796d2PSSSigner *self, jint i, IOSByteArray *sp);

__attribute__((unused)) static void OrgSpongycastleCryptoSignersISO9796d2PSSSigner_LtoOSPWithLong_withByteArray_(OrgSpongycastleCryptoSignersISO9796d2PSSSigner *self, jlong l, IOSByteArray *sp);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoSignersISO9796d2PSSSigner_maskGeneratorFunction1WithByteArray_withInt_withInt_withInt_(OrgSpongycastleCryptoSignersISO9796d2PSSSigner *self, IOSByteArray *Z, jint zOff, jint zLen, jint length);

@implementation OrgSpongycastleCryptoSignersISO9796d2PSSSigner

- (instancetype)initWithOrgSpongycastleCryptoAsymmetricBlockCipher:(id<OrgSpongycastleCryptoAsymmetricBlockCipher>)cipher
                                   withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                                           withInt:(jint)saltLength
                                                       withBoolean:(jboolean)implicit {
  OrgSpongycastleCryptoSignersISO9796d2PSSSigner_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withInt_withBoolean_(self, cipher, digest, saltLength, implicit);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoAsymmetricBlockCipher:(id<OrgSpongycastleCryptoAsymmetricBlockCipher>)cipher
                                   withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                                           withInt:(jint)saltLength {
  OrgSpongycastleCryptoSignersISO9796d2PSSSigner_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withInt_(self, cipher, digest, saltLength);
  return self;
}

- (void)init__WithBoolean:(jboolean)forSigning
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  OrgSpongycastleCryptoParamsRSAKeyParameters *kParam;
  jint lengthOfSalt = saltLength_;
  if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
    OrgSpongycastleCryptoParamsParametersWithRandom *p = (OrgSpongycastleCryptoParamsParametersWithRandom *) param;
    kParam = (OrgSpongycastleCryptoParamsRSAKeyParameters *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(p)) getParameters], [OrgSpongycastleCryptoParamsRSAKeyParameters class]);
    if (forSigning) {
      random_ = [p getRandom];
    }
  }
  else if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithSalt class]]) {
    OrgSpongycastleCryptoParamsParametersWithSalt *p = (OrgSpongycastleCryptoParamsParametersWithSalt *) param;
    kParam = (OrgSpongycastleCryptoParamsRSAKeyParameters *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithSalt *) nil_chk(p)) getParameters], [OrgSpongycastleCryptoParamsRSAKeyParameters class]);
    standardSalt_ = [p getSalt];
    lengthOfSalt = ((IOSByteArray *) nil_chk(standardSalt_))->size_;
    if (standardSalt_->size_ != saltLength_) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Fixed salt is of wrong length");
    }
  }
  else {
    kParam = (OrgSpongycastleCryptoParamsRSAKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsRSAKeyParameters class]);
    if (forSigning) {
      random_ = new_JavaSecuritySecureRandom_init();
    }
  }
  [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_)) init__WithBoolean:forSigning withOrgSpongycastleCryptoCipherParameters:kParam];
  keyBits_ = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsRSAKeyParameters *) nil_chk(kParam)) getModulus])) bitLength];
  block_ = [IOSByteArray newArrayWithLength:(keyBits_ + 7) / 8];
  if (trailer_ == OrgSpongycastleCryptoSignersISOTrailers_TRAILER_IMPLICIT) {
    mBuf_ = [IOSByteArray newArrayWithLength:block_->size_ - [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize] - lengthOfSalt - 1 - 1];
  }
  else {
    mBuf_ = [IOSByteArray newArrayWithLength:block_->size_ - [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize] - lengthOfSalt - 1 - 2];
  }
  [self reset];
}

- (jboolean)isSameAsWithByteArray:(IOSByteArray *)a
                    withByteArray:(IOSByteArray *)b {
  return OrgSpongycastleCryptoSignersISO9796d2PSSSigner_isSameAsWithByteArray_withByteArray_(self, a, b);
}

- (void)clearBlockWithByteArray:(IOSByteArray *)block {
  OrgSpongycastleCryptoSignersISO9796d2PSSSigner_clearBlockWithByteArray_(self, block);
}

- (void)updateWithRecoveredMessageWithByteArray:(IOSByteArray *)signature {
  IOSByteArray *block = [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:signature withInt:0 withInt:((IOSByteArray *) nil_chk(signature))->size_];
  if (((IOSByteArray *) nil_chk(block))->size_ < (keyBits_ + 7) / 8) {
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:(keyBits_ + 7) / 8];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, 0, tmp, tmp->size_ - block->size_, block->size_);
    OrgSpongycastleCryptoSignersISO9796d2PSSSigner_clearBlockWithByteArray_(self, block);
    block = tmp;
  }
  jint tLength;
  if (((IOSByteArray_Get(block, block->size_ - 1) & (jint) 0xFF) ^ (jint) 0xBC) == 0) {
    tLength = 1;
  }
  else {
    jint sigTrail = (JreLShift32((IOSByteArray_Get(block, block->size_ - 2) & (jint) 0xFF), 8)) | (IOSByteArray_Get(block, block->size_ - 1) & (jint) 0xFF);
    JavaLangInteger *trailerObj = OrgSpongycastleCryptoSignersISOTrailers_getTrailerWithOrgSpongycastleCryptoDigest_(digest_);
    if (trailerObj != nil) {
      if (sigTrail != [trailerObj intValue]) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"signer initialised with wrong digest for trailer ", sigTrail));
      }
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unrecognised hash in signature");
    }
    tLength = 2;
  }
  IOSByteArray *m2Hash = [IOSByteArray newArrayWithLength:hLen_];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:m2Hash withInt:0];
  IOSByteArray *dbMask = OrgSpongycastleCryptoSignersISO9796d2PSSSigner_maskGeneratorFunction1WithByteArray_withInt_withInt_withInt_(self, block, block->size_ - hLen_ - tLength, hLen_, block->size_ - hLen_ - tLength);
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(dbMask))->size_; i++) {
    *IOSByteArray_GetRef(block, i) ^= IOSByteArray_Get(dbMask, i);
  }
  *IOSByteArray_GetRef(block, 0) &= (jint) 0x7f;
  jint mStart = 0;
  for (; mStart != block->size_; mStart++) {
    if (IOSByteArray_Get(block, mStart) == (jint) 0x01) {
      break;
    }
  }
  mStart++;
  if (mStart >= block->size_) {
    OrgSpongycastleCryptoSignersISO9796d2PSSSigner_clearBlockWithByteArray_(self, block);
  }
  fullMessage_ = (mStart > 1);
  recoveredMessage_ = [IOSByteArray newArrayWithLength:dbMask->size_ - mStart - saltLength_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, mStart, recoveredMessage_, 0, recoveredMessage_->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(recoveredMessage_, 0, mBuf_, 0, ((IOSByteArray *) nil_chk(recoveredMessage_))->size_);
  preSig_ = signature;
  preBlock_ = block;
  preMStart_ = mStart;
  preTLength_ = tLength;
}

- (void)updateWithByte:(jbyte)b {
  if (preSig_ == nil && messageLength_ < ((IOSByteArray *) nil_chk(mBuf_))->size_) {
    *IOSByteArray_GetRef(nil_chk(mBuf_), messageLength_++) = b;
  }
  else {
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByte:b];
  }
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)off
                    withInt:(jint)len {
  if (preSig_ == nil) {
    while (len > 0 && messageLength_ < ((IOSByteArray *) nil_chk(mBuf_))->size_) {
      [self updateWithByte:IOSByteArray_Get(nil_chk(inArg), off)];
      off++;
      len--;
    }
  }
  if (len > 0) {
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:inArg withInt:off withInt:len];
  }
}

- (void)reset {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) reset];
  messageLength_ = 0;
  if (mBuf_ != nil) {
    OrgSpongycastleCryptoSignersISO9796d2PSSSigner_clearBlockWithByteArray_(self, mBuf_);
  }
  if (recoveredMessage_ != nil) {
    OrgSpongycastleCryptoSignersISO9796d2PSSSigner_clearBlockWithByteArray_(self, recoveredMessage_);
    recoveredMessage_ = nil;
  }
  fullMessage_ = false;
  if (preSig_ != nil) {
    preSig_ = nil;
    OrgSpongycastleCryptoSignersISO9796d2PSSSigner_clearBlockWithByteArray_(self, preBlock_);
    preBlock_ = nil;
  }
}

- (IOSByteArray *)generateSignature {
  jint digSize = [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize];
  IOSByteArray *m2Hash = [IOSByteArray newArrayWithLength:digSize];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:m2Hash withInt:0];
  IOSByteArray *C = [IOSByteArray newArrayWithLength:8];
  OrgSpongycastleCryptoSignersISO9796d2PSSSigner_LtoOSPWithLong_withByteArray_(self, messageLength_ * 8, C);
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:C withInt:0 withInt:C->size_];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:mBuf_ withInt:0 withInt:messageLength_];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:m2Hash withInt:0 withInt:m2Hash->size_];
  IOSByteArray *salt;
  if (standardSalt_ != nil) {
    salt = standardSalt_;
  }
  else {
    salt = [IOSByteArray newArrayWithLength:saltLength_];
    [((JavaSecuritySecureRandom *) nil_chk(random_)) nextBytesWithByteArray:salt];
  }
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:salt withInt:0 withInt:salt->size_];
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hash_ withInt:0];
  jint tLength = 2;
  if (trailer_ == OrgSpongycastleCryptoSignersISOTrailers_TRAILER_IMPLICIT) {
    tLength = 1;
  }
  jint off = ((IOSByteArray *) nil_chk(block_))->size_ - messageLength_ - salt->size_ - hLen_ - tLength - 1;
  *IOSByteArray_GetRef(block_, off) = (jint) 0x01;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mBuf_, 0, block_, off + 1, messageLength_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(salt, 0, block_, off + 1 + messageLength_, salt->size_);
  IOSByteArray *dbMask = OrgSpongycastleCryptoSignersISO9796d2PSSSigner_maskGeneratorFunction1WithByteArray_withInt_withInt_withInt_(self, hash_, 0, hash_->size_, ((IOSByteArray *) nil_chk(block_))->size_ - hLen_ - tLength);
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(dbMask))->size_; i++) {
    *IOSByteArray_GetRef(nil_chk(block_), i) ^= IOSByteArray_Get(dbMask, i);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hash_, 0, block_, ((IOSByteArray *) nil_chk(block_))->size_ - hLen_ - tLength, hLen_);
  if (trailer_ == OrgSpongycastleCryptoSignersISOTrailers_TRAILER_IMPLICIT) {
    *IOSByteArray_GetRef(block_, ((IOSByteArray *) nil_chk(block_))->size_ - 1) = (jbyte) OrgSpongycastleCryptoSignersISOTrailers_TRAILER_IMPLICIT;
  }
  else {
    *IOSByteArray_GetRef(block_, ((IOSByteArray *) nil_chk(block_))->size_ - 2) = (jbyte) (JreURShift32(trailer_, 8));
    *IOSByteArray_GetRef(block_, block_->size_ - 1) = (jbyte) trailer_;
  }
  *IOSByteArray_GetRef(block_, 0) &= (jint) 0x7f;
  IOSByteArray *b = [((id<OrgSpongycastleCryptoAsymmetricBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:block_ withInt:0 withInt:block_->size_];
  recoveredMessage_ = [IOSByteArray newArrayWithLength:messageLength_];
  fullMessage_ = (messageLength_ <= ((IOSByteArray *) nil_chk(mBuf_))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mBuf_, 0, recoveredMessage_, 0, recoveredMessage_->size_);
  OrgSpongycastleCryptoSignersISO9796d2PSSSigner_clearBlockWithByteArray_(self, mBuf_);
  OrgSpongycastleCryptoSignersISO9796d2PSSSigner_clearBlockWithByteArray_(self, block_);
  messageLength_ = 0;
  return b;
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)signature {
  IOSByteArray *m2Hash = [IOSByteArray newArrayWithLength:hLen_];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:m2Hash withInt:0];
  IOSByteArray *block;
  jint tLength;
  jint mStart = 0;
  if (preSig_ == nil) {
    @try {
      [self updateWithRecoveredMessageWithByteArray:signature];
    }
    @catch (JavaLangException *e) {
      return false;
    }
  }
  else {
    if (!OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(preSig_, signature)) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"updateWithRecoveredMessage called on different signature");
    }
  }
  block = preBlock_;
  mStart = preMStart_;
  tLength = preTLength_;
  preSig_ = nil;
  preBlock_ = nil;
  IOSByteArray *C = [IOSByteArray newArrayWithLength:8];
  OrgSpongycastleCryptoSignersISO9796d2PSSSigner_LtoOSPWithLong_withByteArray_(self, ((IOSByteArray *) nil_chk(recoveredMessage_))->size_ * 8, C);
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:C withInt:0 withInt:C->size_];
  if (((IOSByteArray *) nil_chk(recoveredMessage_))->size_ != 0) {
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:recoveredMessage_ withInt:0 withInt:recoveredMessage_->size_];
  }
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:m2Hash withInt:0 withInt:m2Hash->size_];
  if (standardSalt_ != nil) {
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:standardSalt_ withInt:0 withInt:standardSalt_->size_];
  }
  else {
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:block withInt:mStart + ((IOSByteArray *) nil_chk(recoveredMessage_))->size_ withInt:saltLength_];
  }
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:hash_ withInt:0];
  jint off = ((IOSByteArray *) nil_chk(block))->size_ - tLength - hash_->size_;
  jboolean isOkay = true;
  for (jint i = 0; i != hash_->size_; i++) {
    if (IOSByteArray_Get(hash_, i) != IOSByteArray_Get(block, off + i)) {
      isOkay = false;
    }
  }
  OrgSpongycastleCryptoSignersISO9796d2PSSSigner_clearBlockWithByteArray_(self, block);
  OrgSpongycastleCryptoSignersISO9796d2PSSSigner_clearBlockWithByteArray_(self, hash_);
  if (!isOkay) {
    fullMessage_ = false;
    messageLength_ = 0;
    OrgSpongycastleCryptoSignersISO9796d2PSSSigner_clearBlockWithByteArray_(self, recoveredMessage_);
    return false;
  }
  if (messageLength_ != 0) {
    if (!OrgSpongycastleCryptoSignersISO9796d2PSSSigner_isSameAsWithByteArray_withByteArray_(self, mBuf_, recoveredMessage_)) {
      messageLength_ = 0;
      OrgSpongycastleCryptoSignersISO9796d2PSSSigner_clearBlockWithByteArray_(self, mBuf_);
      return false;
    }
  }
  messageLength_ = 0;
  OrgSpongycastleCryptoSignersISO9796d2PSSSigner_clearBlockWithByteArray_(self, mBuf_);
  return true;
}

- (jboolean)hasFullMessage {
  return fullMessage_;
}

- (IOSByteArray *)getRecoveredMessage {
  return recoveredMessage_;
}

- (void)ItoOSPWithInt:(jint)i
        withByteArray:(IOSByteArray *)sp {
  OrgSpongycastleCryptoSignersISO9796d2PSSSigner_ItoOSPWithInt_withByteArray_(self, i, sp);
}

- (void)LtoOSPWithLong:(jlong)l
         withByteArray:(IOSByteArray *)sp {
  OrgSpongycastleCryptoSignersISO9796d2PSSSigner_LtoOSPWithLong_withByteArray_(self, l, sp);
}

- (IOSByteArray *)maskGeneratorFunction1WithByteArray:(IOSByteArray *)Z
                                              withInt:(jint)zOff
                                              withInt:(jint)zLen
                                              withInt:(jint)length {
  return OrgSpongycastleCryptoSignersISO9796d2PSSSigner_maskGeneratorFunction1WithByteArray_withInt_withInt_withInt_(self, Z, zOff, zLen, length);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, 9, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 19, 20, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoAsymmetricBlockCipher:withOrgSpongycastleCryptoDigest:withInt:withBoolean:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoAsymmetricBlockCipher:withOrgSpongycastleCryptoDigest:withInt:);
  methods[2].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[3].selector = @selector(isSameAsWithByteArray:withByteArray:);
  methods[4].selector = @selector(clearBlockWithByteArray:);
  methods[5].selector = @selector(updateWithRecoveredMessageWithByteArray:);
  methods[6].selector = @selector(updateWithByte:);
  methods[7].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[8].selector = @selector(reset);
  methods[9].selector = @selector(generateSignature);
  methods[10].selector = @selector(verifySignatureWithByteArray:);
  methods[11].selector = @selector(hasFullMessage);
  methods[12].selector = @selector(getRecoveredMessage);
  methods[13].selector = @selector(ItoOSPWithInt:withByteArray:);
  methods[14].selector = @selector(LtoOSPWithLong:withByteArray:);
  methods[15].selector = @selector(maskGeneratorFunction1WithByteArray:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRAILER_IMPLICIT", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2PSSSigner_TRAILER_IMPLICIT, 0x19, -1, -1, -1, -1 },
    { "TRAILER_RIPEMD160", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2PSSSigner_TRAILER_RIPEMD160, 0x19, -1, -1, -1, -1 },
    { "TRAILER_RIPEMD128", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2PSSSigner_TRAILER_RIPEMD128, 0x19, -1, -1, -1, -1 },
    { "TRAILER_SHA1", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2PSSSigner_TRAILER_SHA1, 0x19, -1, -1, -1, -1 },
    { "TRAILER_SHA256", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2PSSSigner_TRAILER_SHA256, 0x19, -1, -1, -1, -1 },
    { "TRAILER_SHA512", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2PSSSigner_TRAILER_SHA512, 0x19, -1, -1, -1, -1 },
    { "TRAILER_SHA384", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2PSSSigner_TRAILER_SHA384, 0x19, -1, -1, -1, -1 },
    { "TRAILER_WHIRLPOOL", "I", .constantValue.asInt = OrgSpongycastleCryptoSignersISO9796d2PSSSigner_TRAILER_WHIRLPOOL, 0x19, -1, -1, -1, -1 },
    { "digest_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LOrgSpongycastleCryptoAsymmetricBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "standardSalt_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hLen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "trailer_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyBits_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "block_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBuf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "messageLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "saltLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fullMessage_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "recoveredMessage_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "preSig_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "preBlock_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "preMStart_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "preTLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoAsymmetricBlockCipher;LOrgSpongycastleCryptoDigest;IZ", "LOrgSpongycastleCryptoAsymmetricBlockCipher;LOrgSpongycastleCryptoDigest;I", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "isSameAs", "[B[B", "clearBlock", "[B", "updateWithRecoveredMessage", "LOrgSpongycastleCryptoInvalidCipherTextException;", "update", "B", "[BII", "LOrgSpongycastleCryptoCryptoException;", "verifySignature", "ItoOSP", "I[B", "LtoOSP", "J[B", "maskGeneratorFunction1", "[BIII" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoSignersISO9796d2PSSSigner = { "ISO9796d2PSSSigner", "org.spongycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 16, 25, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoSignersISO9796d2PSSSigner;
}

@end

void OrgSpongycastleCryptoSignersISO9796d2PSSSigner_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withInt_withBoolean_(OrgSpongycastleCryptoSignersISO9796d2PSSSigner *self, id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest, jint saltLength, jboolean implicit) {
  NSObject_init(self);
  self->cipher_ = cipher;
  self->digest_ = digest;
  self->hLen_ = [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) getDigestSize];
  self->saltLength_ = saltLength;
  if (implicit) {
    self->trailer_ = OrgSpongycastleCryptoSignersISOTrailers_TRAILER_IMPLICIT;
  }
  else {
    JavaLangInteger *trailerObj = OrgSpongycastleCryptoSignersISOTrailers_getTrailerWithOrgSpongycastleCryptoDigest_(digest);
    if (trailerObj != nil) {
      self->trailer_ = [trailerObj intValue];
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"no valid trailer for digest: ", [digest getAlgorithmName]));
    }
  }
}

OrgSpongycastleCryptoSignersISO9796d2PSSSigner *new_OrgSpongycastleCryptoSignersISO9796d2PSSSigner_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withInt_withBoolean_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest, jint saltLength, jboolean implicit) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersISO9796d2PSSSigner, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withInt_withBoolean_, cipher, digest, saltLength, implicit)
}

OrgSpongycastleCryptoSignersISO9796d2PSSSigner *create_OrgSpongycastleCryptoSignersISO9796d2PSSSigner_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withInt_withBoolean_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest, jint saltLength, jboolean implicit) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersISO9796d2PSSSigner, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withInt_withBoolean_, cipher, digest, saltLength, implicit)
}

void OrgSpongycastleCryptoSignersISO9796d2PSSSigner_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withInt_(OrgSpongycastleCryptoSignersISO9796d2PSSSigner *self, id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest, jint saltLength) {
  OrgSpongycastleCryptoSignersISO9796d2PSSSigner_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withInt_withBoolean_(self, cipher, digest, saltLength, false);
}

OrgSpongycastleCryptoSignersISO9796d2PSSSigner *new_OrgSpongycastleCryptoSignersISO9796d2PSSSigner_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withInt_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest, jint saltLength) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersISO9796d2PSSSigner, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withInt_, cipher, digest, saltLength)
}

OrgSpongycastleCryptoSignersISO9796d2PSSSigner *create_OrgSpongycastleCryptoSignersISO9796d2PSSSigner_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withInt_(id<OrgSpongycastleCryptoAsymmetricBlockCipher> cipher, id<OrgSpongycastleCryptoDigest> digest, jint saltLength) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersISO9796d2PSSSigner, initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withOrgSpongycastleCryptoDigest_withInt_, cipher, digest, saltLength)
}

jboolean OrgSpongycastleCryptoSignersISO9796d2PSSSigner_isSameAsWithByteArray_withByteArray_(OrgSpongycastleCryptoSignersISO9796d2PSSSigner *self, IOSByteArray *a, IOSByteArray *b) {
  jboolean isOkay = true;
  if (self->messageLength_ != ((IOSByteArray *) nil_chk(b))->size_) {
    isOkay = false;
  }
  for (jint i = 0; i != b->size_; i++) {
    if (IOSByteArray_Get(nil_chk(a), i) != IOSByteArray_Get(b, i)) {
      isOkay = false;
    }
  }
  return isOkay;
}

void OrgSpongycastleCryptoSignersISO9796d2PSSSigner_clearBlockWithByteArray_(OrgSpongycastleCryptoSignersISO9796d2PSSSigner *self, IOSByteArray *block) {
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(block))->size_; i++) {
    *IOSByteArray_GetRef(block, i) = 0;
  }
}

void OrgSpongycastleCryptoSignersISO9796d2PSSSigner_ItoOSPWithInt_withByteArray_(OrgSpongycastleCryptoSignersISO9796d2PSSSigner *self, jint i, IOSByteArray *sp) {
  *IOSByteArray_GetRef(nil_chk(sp), 0) = (jbyte) (JreURShift32(i, 24));
  *IOSByteArray_GetRef(sp, 1) = (jbyte) (JreURShift32(i, 16));
  *IOSByteArray_GetRef(sp, 2) = (jbyte) (JreURShift32(i, 8));
  *IOSByteArray_GetRef(sp, 3) = (jbyte) (JreURShift32(i, 0));
}

void OrgSpongycastleCryptoSignersISO9796d2PSSSigner_LtoOSPWithLong_withByteArray_(OrgSpongycastleCryptoSignersISO9796d2PSSSigner *self, jlong l, IOSByteArray *sp) {
  *IOSByteArray_GetRef(nil_chk(sp), 0) = (jbyte) (JreURShift64(l, 56));
  *IOSByteArray_GetRef(sp, 1) = (jbyte) (JreURShift64(l, 48));
  *IOSByteArray_GetRef(sp, 2) = (jbyte) (JreURShift64(l, 40));
  *IOSByteArray_GetRef(sp, 3) = (jbyte) (JreURShift64(l, 32));
  *IOSByteArray_GetRef(sp, 4) = (jbyte) (JreURShift64(l, 24));
  *IOSByteArray_GetRef(sp, 5) = (jbyte) (JreURShift64(l, 16));
  *IOSByteArray_GetRef(sp, 6) = (jbyte) (JreURShift64(l, 8));
  *IOSByteArray_GetRef(sp, 7) = (jbyte) (JreURShift64(l, 0));
}

IOSByteArray *OrgSpongycastleCryptoSignersISO9796d2PSSSigner_maskGeneratorFunction1WithByteArray_withInt_withInt_withInt_(OrgSpongycastleCryptoSignersISO9796d2PSSSigner *self, IOSByteArray *Z, jint zOff, jint zLen, jint length) {
  IOSByteArray *mask = [IOSByteArray newArrayWithLength:length];
  IOSByteArray *hashBuf = [IOSByteArray newArrayWithLength:self->hLen_];
  IOSByteArray *C = [IOSByteArray newArrayWithLength:4];
  jint counter = 0;
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->digest_)) reset];
  while (counter < (length / self->hLen_)) {
    OrgSpongycastleCryptoSignersISO9796d2PSSSigner_ItoOSPWithInt_withByteArray_(self, counter, C);
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:Z withInt:zOff withInt:zLen];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:C withInt:0 withInt:C->size_];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->digest_)) doFinalWithByteArray:hashBuf withInt:0];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hashBuf, 0, mask, counter * self->hLen_, self->hLen_);
    counter++;
  }
  if ((counter * self->hLen_) < length) {
    OrgSpongycastleCryptoSignersISO9796d2PSSSigner_ItoOSPWithInt_withByteArray_(self, counter, C);
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:Z withInt:zOff withInt:zLen];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:C withInt:0 withInt:C->size_];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->digest_)) doFinalWithByteArray:hashBuf withInt:0];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(hashBuf, 0, mask, counter * self->hLen_, mask->size_ - (counter * self->hLen_));
  }
  return mask;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoSignersISO9796d2PSSSigner)
