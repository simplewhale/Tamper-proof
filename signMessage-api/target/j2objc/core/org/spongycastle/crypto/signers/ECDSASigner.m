//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/signers/ECDSASigner.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/crypto/signers/DSAKCalculator.h"
#include "org/spongycastle/crypto/signers/ECDSASigner.h"
#include "org/spongycastle/crypto/signers/RandomDSAKCalculator.h"
#include "org/spongycastle/math/ec/ECAlgorithms.h"
#include "org/spongycastle/math/ec/ECConstants.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECFieldElement.h"
#include "org/spongycastle/math/ec/ECMultiplier.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/math/ec/FixedPointCombMultiplier.h"

@interface OrgSpongycastleCryptoSignersECDSASigner () {
 @public
  id<OrgSpongycastleCryptoSignersDSAKCalculator> kCalculator_;
  OrgSpongycastleCryptoParamsECKeyParameters *key_;
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersECDSASigner, kCalculator_, id<OrgSpongycastleCryptoSignersDSAKCalculator>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersECDSASigner, key_, OrgSpongycastleCryptoParamsECKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoSignersECDSASigner, random_, JavaSecuritySecureRandom *)

@implementation OrgSpongycastleCryptoSignersECDSASigner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoSignersECDSASigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgSpongycastleCryptoSignersDSAKCalculator:(id<OrgSpongycastleCryptoSignersDSAKCalculator>)kCalculator {
  OrgSpongycastleCryptoSignersECDSASigner_initWithOrgSpongycastleCryptoSignersDSAKCalculator_(self, kCalculator);
  return self;
}

- (void)init__WithBoolean:(jboolean)forSigning
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  JavaSecuritySecureRandom *providedRandom = nil;
  if (forSigning) {
    if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
      OrgSpongycastleCryptoParamsParametersWithRandom *rParam = (OrgSpongycastleCryptoParamsParametersWithRandom *) param;
      self->key_ = (OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getParameters], [OrgSpongycastleCryptoParamsECPrivateKeyParameters class]);
      providedRandom = [rParam getRandom];
    }
    else {
      self->key_ = (OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsECPrivateKeyParameters class]);
    }
  }
  else {
    self->key_ = (OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsECPublicKeyParameters class]);
  }
  self->random_ = [self initSecureRandomWithBoolean:forSigning && ![((id<OrgSpongycastleCryptoSignersDSAKCalculator>) nil_chk(kCalculator_)) isDeterministic] withJavaSecuritySecureRandom:providedRandom];
}

- (IOSObjectArray *)generateSignatureWithByteArray:(IOSByteArray *)message {
  OrgSpongycastleCryptoParamsECDomainParameters *ec = [((OrgSpongycastleCryptoParamsECKeyParameters *) nil_chk(key_)) getParameters];
  JavaMathBigInteger *n = [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(ec)) getN];
  JavaMathBigInteger *e = [self calculateEWithJavaMathBigInteger:n withByteArray:message];
  JavaMathBigInteger *d = [((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk(key_, [OrgSpongycastleCryptoParamsECPrivateKeyParameters class])))) getD];
  if ([((id<OrgSpongycastleCryptoSignersDSAKCalculator>) nil_chk(kCalculator_)) isDeterministic]) {
    [kCalculator_ init__WithJavaMathBigInteger:n withJavaMathBigInteger:d withByteArray:message];
  }
  else {
    [kCalculator_ init__WithJavaMathBigInteger:n withJavaSecuritySecureRandom:random_];
  }
  JavaMathBigInteger *r;
  JavaMathBigInteger *s;
  id<OrgSpongycastleMathEcECMultiplier> basePointMultiplier = [self createBasePointMultiplier];
  do {
    JavaMathBigInteger *k;
    do {
      k = [kCalculator_ nextK];
      OrgSpongycastleMathEcECPoint *p = [((OrgSpongycastleMathEcECPoint *) nil_chk([((id<OrgSpongycastleMathEcECMultiplier>) nil_chk(basePointMultiplier)) multiplyWithOrgSpongycastleMathEcECPoint:[ec getG] withJavaMathBigInteger:k])) normalize];
      r = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getAffineXCoord])) toBigInteger])) modWithJavaMathBigInteger:n];
    }
    while ([((JavaMathBigInteger *) nil_chk(r)) isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)]);
    s = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(k)) modInverseWithJavaMathBigInteger:n])) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(e)) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(d)) multiplyWithJavaMathBigInteger:r]]])) modWithJavaMathBigInteger:n];
  }
  while ([((JavaMathBigInteger *) nil_chk(s)) isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)]);
  return [IOSObjectArray newArrayWithObjects:(id[]){ r, s } count:2 type:JavaMathBigInteger_class_()];
}

- (jboolean)verifySignatureWithByteArray:(IOSByteArray *)message
                  withJavaMathBigInteger:(JavaMathBigInteger *)r
                  withJavaMathBigInteger:(JavaMathBigInteger *)s {
  OrgSpongycastleCryptoParamsECDomainParameters *ec = [((OrgSpongycastleCryptoParamsECKeyParameters *) nil_chk(key_)) getParameters];
  JavaMathBigInteger *n = [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(ec)) getN];
  JavaMathBigInteger *e = [self calculateEWithJavaMathBigInteger:n withByteArray:message];
  if ([((JavaMathBigInteger *) nil_chk(r)) compareToWithId:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)] < 0 || [r compareToWithId:n] >= 0) {
    return false;
  }
  if ([((JavaMathBigInteger *) nil_chk(s)) compareToWithId:JreLoadStatic(OrgSpongycastleMathEcECConstants, ONE)] < 0 || [s compareToWithId:n] >= 0) {
    return false;
  }
  JavaMathBigInteger *c = [s modInverseWithJavaMathBigInteger:n];
  JavaMathBigInteger *u1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(e)) multiplyWithJavaMathBigInteger:c])) modWithJavaMathBigInteger:n];
  JavaMathBigInteger *u2 = [((JavaMathBigInteger *) nil_chk([r multiplyWithJavaMathBigInteger:c])) modWithJavaMathBigInteger:n];
  OrgSpongycastleMathEcECPoint *G = [ec getG];
  OrgSpongycastleMathEcECPoint *Q = [((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(((OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk(key_, [OrgSpongycastleCryptoParamsECPublicKeyParameters class])))) getQ];
  OrgSpongycastleMathEcECPoint *point = OrgSpongycastleMathEcECAlgorithms_sumOfTwoMultipliesWithOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_(G, u1, Q, u2);
  if ([((OrgSpongycastleMathEcECPoint *) nil_chk(point)) isInfinity]) {
    return false;
  }
  OrgSpongycastleMathEcECCurve *curve = [point getCurve];
  if (curve != nil) {
    JavaMathBigInteger *cofactor = [curve getCofactor];
    if (cofactor != nil && [cofactor compareToWithId:JreLoadStatic(OrgSpongycastleMathEcECConstants, EIGHT)] <= 0) {
      OrgSpongycastleMathEcECFieldElement *D = [self getDenominatorWithInt:[curve getCoordinateSystem] withOrgSpongycastleMathEcECPoint:point];
      if (D != nil && ![D isZero]) {
        OrgSpongycastleMathEcECFieldElement *X = [point getXCoord];
        while ([curve isValidFieldElementWithJavaMathBigInteger:r]) {
          OrgSpongycastleMathEcECFieldElement *R = [((OrgSpongycastleMathEcECFieldElement *) nil_chk([curve fromBigIntegerWithJavaMathBigInteger:r])) multiplyWithOrgSpongycastleMathEcECFieldElement:D];
          if ([((OrgSpongycastleMathEcECFieldElement *) nil_chk(R)) isEqual:X]) {
            return true;
          }
          r = [((JavaMathBigInteger *) nil_chk(r)) addWithJavaMathBigInteger:n];
        }
        return false;
      }
    }
  }
  JavaMathBigInteger *v = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([point normalize])) getAffineXCoord])) toBigInteger])) modWithJavaMathBigInteger:n];
  return [((JavaMathBigInteger *) nil_chk(v)) isEqual:r];
}

- (JavaMathBigInteger *)calculateEWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                           withByteArray:(IOSByteArray *)message {
  jint log2n = [((JavaMathBigInteger *) nil_chk(n)) bitLength];
  jint messageBitLength = ((IOSByteArray *) nil_chk(message))->size_ * 8;
  JavaMathBigInteger *e = new_JavaMathBigInteger_initWithInt_withByteArray_(1, message);
  if (log2n < messageBitLength) {
    e = [e shiftRightWithInt:messageBitLength - log2n];
  }
  return e;
}

- (id<OrgSpongycastleMathEcECMultiplier>)createBasePointMultiplier {
  return new_OrgSpongycastleMathEcFixedPointCombMultiplier_init();
}

- (OrgSpongycastleMathEcECFieldElement *)getDenominatorWithInt:(jint)coordinateSystem
                              withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p {
  switch (coordinateSystem) {
    case OrgSpongycastleMathEcECCurve_COORD_HOMOGENEOUS:
    case OrgSpongycastleMathEcECCurve_COORD_LAMBDA_PROJECTIVE:
    case OrgSpongycastleMathEcECCurve_COORD_SKEWED:
    return [((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getZCoordWithInt:0];
    case OrgSpongycastleMathEcECCurve_COORD_JACOBIAN:
    case OrgSpongycastleMathEcECCurve_COORD_JACOBIAN_CHUDNOVSKY:
    case OrgSpongycastleMathEcECCurve_COORD_JACOBIAN_MODIFIED:
    return [((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getZCoordWithInt:0])) square];
    default:
    return nil;
  }
}

- (JavaSecuritySecureRandom *)initSecureRandomWithBoolean:(jboolean)needed
                             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)provided {
  return !needed ? nil : (provided != nil) ? provided : new_JavaSecuritySecureRandom_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECFieldElement;", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySecureRandom;", 0x4, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoSignersDSAKCalculator:);
  methods[2].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[3].selector = @selector(generateSignatureWithByteArray:);
  methods[4].selector = @selector(verifySignatureWithByteArray:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[5].selector = @selector(calculateEWithJavaMathBigInteger:withByteArray:);
  methods[6].selector = @selector(createBasePointMultiplier);
  methods[7].selector = @selector(getDenominatorWithInt:withOrgSpongycastleMathEcECPoint:);
  methods[8].selector = @selector(initSecureRandomWithBoolean:withJavaSecuritySecureRandom:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "kCalculator_", "LOrgSpongycastleCryptoSignersDSAKCalculator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "key_", "LOrgSpongycastleCryptoParamsECKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoSignersDSAKCalculator;", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "generateSignature", "[B", "verifySignature", "[BLJavaMathBigInteger;LJavaMathBigInteger;", "calculateE", "LJavaMathBigInteger;[B", "getDenominator", "ILOrgSpongycastleMathEcECPoint;", "initSecureRandom", "ZLJavaSecuritySecureRandom;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoSignersECDSASigner = { "ECDSASigner", "org.spongycastle.crypto.signers", ptrTable, methods, fields, 7, 0x1, 9, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoSignersECDSASigner;
}

@end

void OrgSpongycastleCryptoSignersECDSASigner_init(OrgSpongycastleCryptoSignersECDSASigner *self) {
  NSObject_init(self);
  self->kCalculator_ = new_OrgSpongycastleCryptoSignersRandomDSAKCalculator_init();
}

OrgSpongycastleCryptoSignersECDSASigner *new_OrgSpongycastleCryptoSignersECDSASigner_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersECDSASigner, init)
}

OrgSpongycastleCryptoSignersECDSASigner *create_OrgSpongycastleCryptoSignersECDSASigner_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersECDSASigner, init)
}

void OrgSpongycastleCryptoSignersECDSASigner_initWithOrgSpongycastleCryptoSignersDSAKCalculator_(OrgSpongycastleCryptoSignersECDSASigner *self, id<OrgSpongycastleCryptoSignersDSAKCalculator> kCalculator) {
  NSObject_init(self);
  self->kCalculator_ = kCalculator;
}

OrgSpongycastleCryptoSignersECDSASigner *new_OrgSpongycastleCryptoSignersECDSASigner_initWithOrgSpongycastleCryptoSignersDSAKCalculator_(id<OrgSpongycastleCryptoSignersDSAKCalculator> kCalculator) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoSignersECDSASigner, initWithOrgSpongycastleCryptoSignersDSAKCalculator_, kCalculator)
}

OrgSpongycastleCryptoSignersECDSASigner *create_OrgSpongycastleCryptoSignersECDSASigner_initWithOrgSpongycastleCryptoSignersDSAKCalculator_(id<OrgSpongycastleCryptoSignersDSAKCalculator> kCalculator) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoSignersECDSASigner, initWithOrgSpongycastleCryptoSignersDSAKCalculator_, kCalculator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoSignersECDSASigner)
