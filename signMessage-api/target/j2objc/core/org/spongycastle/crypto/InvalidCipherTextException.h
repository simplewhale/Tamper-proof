//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/InvalidCipherTextException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoInvalidCipherTextException")
#ifdef RESTRICT_OrgSpongycastleCryptoInvalidCipherTextException
#define INCLUDE_ALL_OrgSpongycastleCryptoInvalidCipherTextException 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoInvalidCipherTextException 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoInvalidCipherTextException

#if !defined (OrgSpongycastleCryptoInvalidCipherTextException_) && (INCLUDE_ALL_OrgSpongycastleCryptoInvalidCipherTextException || defined(INCLUDE_OrgSpongycastleCryptoInvalidCipherTextException))
#define OrgSpongycastleCryptoInvalidCipherTextException_

#define RESTRICT_OrgSpongycastleCryptoCryptoException 1
#define INCLUDE_OrgSpongycastleCryptoCryptoException 1
#include "org/spongycastle/crypto/CryptoException.h"

@class JavaLangThrowable;

@interface OrgSpongycastleCryptoInvalidCipherTextException : OrgSpongycastleCryptoCryptoException

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithNSString:(NSString *)message;

- (instancetype)initWithNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoInvalidCipherTextException)

FOUNDATION_EXPORT void OrgSpongycastleCryptoInvalidCipherTextException_init(OrgSpongycastleCryptoInvalidCipherTextException *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoInvalidCipherTextException *new_OrgSpongycastleCryptoInvalidCipherTextException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoInvalidCipherTextException *create_OrgSpongycastleCryptoInvalidCipherTextException_init(void);

FOUNDATION_EXPORT void OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(OrgSpongycastleCryptoInvalidCipherTextException *self, NSString *message);

FOUNDATION_EXPORT OrgSpongycastleCryptoInvalidCipherTextException *new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoInvalidCipherTextException *create_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_withJavaLangThrowable_(OrgSpongycastleCryptoInvalidCipherTextException *self, NSString *message, JavaLangThrowable *cause);

FOUNDATION_EXPORT OrgSpongycastleCryptoInvalidCipherTextException *new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoInvalidCipherTextException *create_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoInvalidCipherTextException)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoInvalidCipherTextException")
