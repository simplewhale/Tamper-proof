//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/ec/ECFixedTransform.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/ec/ECFixedTransform.h"
#include "org/spongycastle/crypto/ec/ECPair.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECMultiplier.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/math/ec/FixedPointCombMultiplier.h"

@interface OrgSpongycastleCryptoEcECFixedTransform () {
 @public
  OrgSpongycastleCryptoParamsECPublicKeyParameters *key_;
  JavaMathBigInteger *k_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEcECFixedTransform, key_, OrgSpongycastleCryptoParamsECPublicKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEcECFixedTransform, k_, JavaMathBigInteger *)

@implementation OrgSpongycastleCryptoEcECFixedTransform

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)k {
  OrgSpongycastleCryptoEcECFixedTransform_initWithJavaMathBigInteger_(self, k);
  return self;
}

- (void)init__WithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  if (!([param isKindOfClass:[OrgSpongycastleCryptoParamsECPublicKeyParameters class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"ECPublicKeyParameters are required for fixed transform.");
  }
  self->key_ = (OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsECPublicKeyParameters class]);
}

- (OrgSpongycastleCryptoEcECPair *)transformWithOrgSpongycastleCryptoEcECPair:(OrgSpongycastleCryptoEcECPair *)cipherText {
  if (key_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"ECFixedTransform not initialised");
  }
  OrgSpongycastleCryptoParamsECDomainParameters *ec = [key_ getParameters];
  JavaMathBigInteger *n = [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(ec)) getN];
  id<OrgSpongycastleMathEcECMultiplier> basePointMultiplier = [self createBasePointMultiplier];
  JavaMathBigInteger *k = [((JavaMathBigInteger *) nil_chk(self->k_)) modWithJavaMathBigInteger:n];
  IOSObjectArray *gamma_phi = [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgSpongycastleMathEcECPoint *) nil_chk([((id<OrgSpongycastleMathEcECMultiplier>) nil_chk(basePointMultiplier)) multiplyWithOrgSpongycastleMathEcECPoint:[ec getG] withJavaMathBigInteger:k])) addWithOrgSpongycastleMathEcECPoint:[((OrgSpongycastleCryptoEcECPair *) nil_chk(cipherText)) getX]], [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(key_)) getQ])) multiplyWithJavaMathBigInteger:k])) addWithOrgSpongycastleMathEcECPoint:[cipherText getY]] } count:2 type:OrgSpongycastleMathEcECPoint_class_()];
  [((OrgSpongycastleMathEcECCurve *) nil_chk([ec getCurve])) normalizeAllWithOrgSpongycastleMathEcECPointArray:gamma_phi];
  return new_OrgSpongycastleCryptoEcECPair_initWithOrgSpongycastleMathEcECPoint_withOrgSpongycastleMathEcECPoint_(IOSObjectArray_Get(gamma_phi, 0), IOSObjectArray_Get(gamma_phi, 1));
}

- (JavaMathBigInteger *)getTransformValue {
  return k_;
}

- (id<OrgSpongycastleMathEcECMultiplier>)createBasePointMultiplier {
  return new_OrgSpongycastleMathEcFixedPointCombMultiplier_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoEcECPair;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(transformWithOrgSpongycastleCryptoEcECPair:);
  methods[3].selector = @selector(getTransformValue);
  methods[4].selector = @selector(createBasePointMultiplier);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LOrgSpongycastleCryptoParamsECPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "k_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;", "init", "LOrgSpongycastleCryptoCipherParameters;", "transform", "LOrgSpongycastleCryptoEcECPair;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEcECFixedTransform = { "ECFixedTransform", "org.spongycastle.crypto.ec", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEcECFixedTransform;
}

@end

void OrgSpongycastleCryptoEcECFixedTransform_initWithJavaMathBigInteger_(OrgSpongycastleCryptoEcECFixedTransform *self, JavaMathBigInteger *k) {
  NSObject_init(self);
  self->k_ = k;
}

OrgSpongycastleCryptoEcECFixedTransform *new_OrgSpongycastleCryptoEcECFixedTransform_initWithJavaMathBigInteger_(JavaMathBigInteger *k) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEcECFixedTransform, initWithJavaMathBigInteger_, k)
}

OrgSpongycastleCryptoEcECFixedTransform *create_OrgSpongycastleCryptoEcECFixedTransform_initWithJavaMathBigInteger_(JavaMathBigInteger *k) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEcECFixedTransform, initWithJavaMathBigInteger_, k)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEcECFixedTransform)
