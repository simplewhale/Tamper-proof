//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/ec/ECElGamalDecryptor.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/ec/ECElGamalDecryptor.h"
#include "org/spongycastle/crypto/ec/ECPair.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/math/ec/ECPoint.h"

@interface OrgSpongycastleCryptoEcECElGamalDecryptor () {
 @public
  OrgSpongycastleCryptoParamsECPrivateKeyParameters *key_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEcECElGamalDecryptor, key_, OrgSpongycastleCryptoParamsECPrivateKeyParameters *)

@implementation OrgSpongycastleCryptoEcECElGamalDecryptor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEcECElGamalDecryptor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  if (!([param isKindOfClass:[OrgSpongycastleCryptoParamsECPrivateKeyParameters class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"ECPrivateKeyParameters are required for decryption.");
  }
  self->key_ = (OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsECPrivateKeyParameters class]);
}

- (OrgSpongycastleMathEcECPoint *)decryptWithOrgSpongycastleCryptoEcECPair:(OrgSpongycastleCryptoEcECPair *)pair {
  if (key_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"ECElGamalDecryptor not initialised");
  }
  OrgSpongycastleMathEcECPoint *tmp = [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleCryptoEcECPair *) nil_chk(pair)) getX])) multiplyWithJavaMathBigInteger:[((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(key_)) getD]];
  return [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([pair getY])) subtractWithOrgSpongycastleMathEcECPoint:tmp])) normalize];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(decryptWithOrgSpongycastleCryptoEcECPair:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LOrgSpongycastleCryptoParamsECPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LOrgSpongycastleCryptoCipherParameters;", "decrypt", "LOrgSpongycastleCryptoEcECPair;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEcECElGamalDecryptor = { "ECElGamalDecryptor", "org.spongycastle.crypto.ec", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEcECElGamalDecryptor;
}

@end

void OrgSpongycastleCryptoEcECElGamalDecryptor_init(OrgSpongycastleCryptoEcECElGamalDecryptor *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoEcECElGamalDecryptor *new_OrgSpongycastleCryptoEcECElGamalDecryptor_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEcECElGamalDecryptor, init)
}

OrgSpongycastleCryptoEcECElGamalDecryptor *create_OrgSpongycastleCryptoEcECElGamalDecryptor_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEcECElGamalDecryptor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEcECElGamalDecryptor)
