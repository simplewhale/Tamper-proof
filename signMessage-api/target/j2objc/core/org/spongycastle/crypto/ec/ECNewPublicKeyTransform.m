//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/ec/ECNewPublicKeyTransform.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/ec/ECNewPublicKeyTransform.h"
#include "org/spongycastle/crypto/ec/ECPair.h"
#include "org/spongycastle/crypto/ec/ECUtil.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECMultiplier.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/math/ec/FixedPointCombMultiplier.h"

@interface OrgSpongycastleCryptoEcECNewPublicKeyTransform () {
 @public
  OrgSpongycastleCryptoParamsECPublicKeyParameters *key_;
  JavaSecuritySecureRandom *random_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEcECNewPublicKeyTransform, key_, OrgSpongycastleCryptoParamsECPublicKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEcECNewPublicKeyTransform, random_, JavaSecuritySecureRandom *)

@implementation OrgSpongycastleCryptoEcECNewPublicKeyTransform

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEcECNewPublicKeyTransform_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
    OrgSpongycastleCryptoParamsParametersWithRandom *p = (OrgSpongycastleCryptoParamsParametersWithRandom *) param;
    if (!([[((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(p)) getParameters] isKindOfClass:[OrgSpongycastleCryptoParamsECPublicKeyParameters class]])) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"ECPublicKeyParameters are required for new public key transform.");
    }
    self->key_ = (OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk([p getParameters], [OrgSpongycastleCryptoParamsECPublicKeyParameters class]);
    self->random_ = [p getRandom];
  }
  else {
    if (!([param isKindOfClass:[OrgSpongycastleCryptoParamsECPublicKeyParameters class]])) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"ECPublicKeyParameters are required for new public key transform.");
    }
    self->key_ = (OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsECPublicKeyParameters class]);
    self->random_ = new_JavaSecuritySecureRandom_init();
  }
}

- (OrgSpongycastleCryptoEcECPair *)transformWithOrgSpongycastleCryptoEcECPair:(OrgSpongycastleCryptoEcECPair *)cipherText {
  if (key_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"ECNewPublicKeyTransform not initialised");
  }
  OrgSpongycastleCryptoParamsECDomainParameters *ec = [key_ getParameters];
  JavaMathBigInteger *n = [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(ec)) getN];
  id<OrgSpongycastleMathEcECMultiplier> basePointMultiplier = [self createBasePointMultiplier];
  JavaMathBigInteger *k = OrgSpongycastleCryptoEcECUtil_generateKWithJavaMathBigInteger_withJavaSecuritySecureRandom_(n, random_);
  IOSObjectArray *gamma_phi = [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgSpongycastleMathEcECMultiplier>) nil_chk(basePointMultiplier)) multiplyWithOrgSpongycastleMathEcECPoint:[ec getG] withJavaMathBigInteger:k], [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(key_)) getQ])) multiplyWithJavaMathBigInteger:k])) addWithOrgSpongycastleMathEcECPoint:[((OrgSpongycastleCryptoEcECPair *) nil_chk(cipherText)) getY]] } count:2 type:OrgSpongycastleMathEcECPoint_class_()];
  [((OrgSpongycastleMathEcECCurve *) nil_chk([ec getCurve])) normalizeAllWithOrgSpongycastleMathEcECPointArray:gamma_phi];
  return new_OrgSpongycastleCryptoEcECPair_initWithOrgSpongycastleMathEcECPoint_withOrgSpongycastleMathEcECPoint_(IOSObjectArray_Get(gamma_phi, 0), IOSObjectArray_Get(gamma_phi, 1));
}

- (id<OrgSpongycastleMathEcECMultiplier>)createBasePointMultiplier {
  return new_OrgSpongycastleMathEcFixedPointCombMultiplier_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoEcECPair;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECMultiplier;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(transformWithOrgSpongycastleCryptoEcECPair:);
  methods[3].selector = @selector(createBasePointMultiplier);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LOrgSpongycastleCryptoParamsECPublicKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LOrgSpongycastleCryptoCipherParameters;", "transform", "LOrgSpongycastleCryptoEcECPair;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEcECNewPublicKeyTransform = { "ECNewPublicKeyTransform", "org.spongycastle.crypto.ec", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEcECNewPublicKeyTransform;
}

@end

void OrgSpongycastleCryptoEcECNewPublicKeyTransform_init(OrgSpongycastleCryptoEcECNewPublicKeyTransform *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoEcECNewPublicKeyTransform *new_OrgSpongycastleCryptoEcECNewPublicKeyTransform_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEcECNewPublicKeyTransform, init)
}

OrgSpongycastleCryptoEcECNewPublicKeyTransform *create_OrgSpongycastleCryptoEcECNewPublicKeyTransform_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEcECNewPublicKeyTransform, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEcECNewPublicKeyTransform)
