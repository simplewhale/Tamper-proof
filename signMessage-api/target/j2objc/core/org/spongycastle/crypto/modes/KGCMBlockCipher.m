//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/modes/KGCMBlockCipher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/BufferedBlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/InvalidCipherTextException.h"
#include "org/spongycastle/crypto/OutputLengthException.h"
#include "org/spongycastle/crypto/modes/KCTRBlockCipher.h"
#include "org/spongycastle/crypto/modes/KGCMBlockCipher.h"
#include "org/spongycastle/crypto/params/AEADParameters.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/BigIntegers.h"

@class OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream;

@interface OrgSpongycastleCryptoModesKGCMBlockCipher () {
 @public
  id<OrgSpongycastleCryptoBlockCipher> engine_;
  OrgSpongycastleCryptoBufferedBlockCipher *ctrEngine_;
  jint macSize_;
  jboolean forEncryption_;
  IOSByteArray *initialAssociatedText_;
  IOSByteArray *macBlock_;
  IOSByteArray *iv_;
  IOSByteArray *H_;
  IOSByteArray *b_;
  IOSByteArray *temp_;
  jint lambda_o_;
  jint lambda_c_;
  OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *associatedText_;
  OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *data_;
}

- (void)processAADWithByteArray:(IOSByteArray *)authText
                        withInt:(jint)authOff
                        withInt:(jint)len;

- (void)calculateMacWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inOff
                          withInt:(jint)len;

- (void)intToBytesWithInt:(jint)num
            withByteArray:(IOSByteArray *)outBytes
                  withInt:(jint)outOff;

- (void)multiplyOverFieldWithInt:(jint)blockBitLength
                   withByteArray:(IOSByteArray *)x
                   withByteArray:(IOSByteArray *)y
                   withByteArray:(IOSByteArray *)x_mult_y;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesKGCMBlockCipher, engine_, id<OrgSpongycastleCryptoBlockCipher>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesKGCMBlockCipher, ctrEngine_, OrgSpongycastleCryptoBufferedBlockCipher *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesKGCMBlockCipher, initialAssociatedText_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesKGCMBlockCipher, macBlock_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesKGCMBlockCipher, iv_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesKGCMBlockCipher, H_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesKGCMBlockCipher, b_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesKGCMBlockCipher, temp_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesKGCMBlockCipher, associatedText_, OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesKGCMBlockCipher, data_, OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *)

inline JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_get_ZERO(void);
static JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoModesKGCMBlockCipher, ZERO, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_get_ONE(void);
static JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoModesKGCMBlockCipher, ONE, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_get_MASK_1_128(void);
static JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_1_128;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoModesKGCMBlockCipher, MASK_1_128, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_get_MASK_2_128(void);
static JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_2_128;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoModesKGCMBlockCipher, MASK_2_128, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_get_POLYRED_128(void);
static JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_POLYRED_128;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoModesKGCMBlockCipher, POLYRED_128, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_get_MASK_1_256(void);
static JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_1_256;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoModesKGCMBlockCipher, MASK_1_256, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_get_MASK_2_256(void);
static JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_2_256;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoModesKGCMBlockCipher, MASK_2_256, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_get_POLYRED_256(void);
static JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_POLYRED_256;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoModesKGCMBlockCipher, POLYRED_256, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_get_MASK_1_512(void);
static JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_1_512;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoModesKGCMBlockCipher, MASK_1_512, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_get_MASK_2_512(void);
static JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_2_512;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoModesKGCMBlockCipher, MASK_2_512, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_get_POLYRED_512(void);
static JavaMathBigInteger *OrgSpongycastleCryptoModesKGCMBlockCipher_POLYRED_512;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoModesKGCMBlockCipher, POLYRED_512, JavaMathBigInteger *)

inline jint OrgSpongycastleCryptoModesKGCMBlockCipher_get_MIN_MAC_BITS(void);
#define OrgSpongycastleCryptoModesKGCMBlockCipher_MIN_MAC_BITS 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoModesKGCMBlockCipher, MIN_MAC_BITS, jint)

inline jint OrgSpongycastleCryptoModesKGCMBlockCipher_get_BITS_IN_BYTE(void);
#define OrgSpongycastleCryptoModesKGCMBlockCipher_BITS_IN_BYTE 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoModesKGCMBlockCipher, BITS_IN_BYTE, jint)

__attribute__((unused)) static void OrgSpongycastleCryptoModesKGCMBlockCipher_processAADWithByteArray_withInt_withInt_(OrgSpongycastleCryptoModesKGCMBlockCipher *self, IOSByteArray *authText, jint authOff, jint len);

__attribute__((unused)) static void OrgSpongycastleCryptoModesKGCMBlockCipher_calculateMacWithByteArray_withInt_withInt_(OrgSpongycastleCryptoModesKGCMBlockCipher *self, IOSByteArray *input, jint inOff, jint len);

__attribute__((unused)) static void OrgSpongycastleCryptoModesKGCMBlockCipher_intToBytesWithInt_withByteArray_withInt_(OrgSpongycastleCryptoModesKGCMBlockCipher *self, jint num, IOSByteArray *outBytes, jint outOff);

__attribute__((unused)) static void OrgSpongycastleCryptoModesKGCMBlockCipher_multiplyOverFieldWithInt_withByteArray_withByteArray_withByteArray_(OrgSpongycastleCryptoModesKGCMBlockCipher *self, jint blockBitLength, IOSByteArray *x, IOSByteArray *y, IOSByteArray *x_mult_y);

@interface OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream : JavaIoByteArrayOutputStream

- (instancetype)initWithOrgSpongycastleCryptoModesKGCMBlockCipher:(OrgSpongycastleCryptoModesKGCMBlockCipher *)outer$;

- (IOSByteArray *)getBuffer;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream)

__attribute__((unused)) static void OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream_initWithOrgSpongycastleCryptoModesKGCMBlockCipher_(OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *self, OrgSpongycastleCryptoModesKGCMBlockCipher *outer$);

__attribute__((unused)) static OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *new_OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream_initWithOrgSpongycastleCryptoModesKGCMBlockCipher_(OrgSpongycastleCryptoModesKGCMBlockCipher *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *create_OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream_initWithOrgSpongycastleCryptoModesKGCMBlockCipher_(OrgSpongycastleCryptoModesKGCMBlockCipher *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream)

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoModesKGCMBlockCipher)

@implementation OrgSpongycastleCryptoModesKGCMBlockCipher

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)dstu7624Engine {
  OrgSpongycastleCryptoModesKGCMBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(self, dstu7624Engine);
  return self;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  self->forEncryption_ = forEncryption;
  OrgSpongycastleCryptoParamsKeyParameter *engineParam;
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsAEADParameters class]]) {
    OrgSpongycastleCryptoParamsAEADParameters *param = (OrgSpongycastleCryptoParamsAEADParameters *) params;
    IOSByteArray *iv = [((OrgSpongycastleCryptoParamsAEADParameters *) nil_chk(param)) getNonce];
    jint diff = ((IOSByteArray *) nil_chk(self->iv_))->size_ - ((IOSByteArray *) nil_chk(iv))->size_;
    OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(self->iv_, (jbyte) 0);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, self->iv_, diff, iv->size_);
    initialAssociatedText_ = [param getAssociatedText];
    jint macSizeBits = [param getMacSize];
    if (macSizeBits < OrgSpongycastleCryptoModesKGCMBlockCipher_MIN_MAC_BITS || macSizeBits > [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) getBlockSize] * OrgSpongycastleCryptoModesKGCMBlockCipher_BITS_IN_BYTE || macSizeBits % OrgSpongycastleCryptoModesKGCMBlockCipher_BITS_IN_BYTE != 0) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Invalid value for MAC size: ", macSizeBits));
    }
    macSize_ = macSizeBits / OrgSpongycastleCryptoModesKGCMBlockCipher_BITS_IN_BYTE;
    engineParam = [param getKey];
    if (initialAssociatedText_ != nil) {
      [self processAADBytesWithByteArray:initialAssociatedText_ withInt:0 withInt:initialAssociatedText_->size_];
    }
  }
  else if ([params isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithIV class]]) {
    OrgSpongycastleCryptoParamsParametersWithIV *param = (OrgSpongycastleCryptoParamsParametersWithIV *) params;
    IOSByteArray *iv = [((OrgSpongycastleCryptoParamsParametersWithIV *) nil_chk(param)) getIV];
    jint diff = ((IOSByteArray *) nil_chk(self->iv_))->size_ - ((IOSByteArray *) nil_chk(iv))->size_;
    OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(self->iv_, (jbyte) 0);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, self->iv_, diff, iv->size_);
    initialAssociatedText_ = nil;
    macSize_ = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) getBlockSize];
    engineParam = (OrgSpongycastleCryptoParamsKeyParameter *) cast_chk([param getParameters], [OrgSpongycastleCryptoParamsKeyParameter class]);
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid parameter passed");
  }
  self->macBlock_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) getBlockSize]];
  [((OrgSpongycastleCryptoBufferedBlockCipher *) nil_chk(ctrEngine_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsParametersWithIV_initWithOrgSpongycastleCryptoCipherParameters_withByteArray_(engineParam, self->iv_)];
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:engineParam];
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$", [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) getAlgorithmName], @"/KGCM");
}

- (id<OrgSpongycastleCryptoBlockCipher>)getUnderlyingCipher {
  return engine_;
}

- (void)processAADByteWithByte:(jbyte)inArg {
  [((OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *) nil_chk(associatedText_)) writeWithInt:inArg];
}

- (void)processAADBytesWithByteArray:(IOSByteArray *)inArg
                             withInt:(jint)inOff
                             withInt:(jint)len {
  [((OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *) nil_chk(associatedText_)) writeWithByteArray:inArg withInt:inOff withInt:len];
}

- (void)processAADWithByteArray:(IOSByteArray *)authText
                        withInt:(jint)authOff
                        withInt:(jint)len {
  OrgSpongycastleCryptoModesKGCMBlockCipher_processAADWithByteArray_withInt_withInt_(self, authText, authOff, len);
}

- (jint)processByteWithByte:(jbyte)inArg
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff {
  [((OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *) nil_chk(data_)) writeWithInt:inArg];
  return 0;
}

- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)inLen
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (((IOSByteArray *) nil_chk(inArg))->size_ < (inOff + inLen)) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  [((OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *) nil_chk(data_)) writeWithByteArray:inArg withInt:inOff withInt:inLen];
  return 0;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  jint len = [((OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *) nil_chk(data_)) size];
  if ([((OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *) nil_chk(associatedText_)) size] > 0) {
    OrgSpongycastleCryptoModesKGCMBlockCipher_processAADWithByteArray_withInt_withInt_(self, [((OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *) nil_chk(associatedText_)) getBuffer], 0, [((OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *) nil_chk(associatedText_)) size]);
  }
  jint resultLen;
  if (forEncryption_) {
    if (((IOSByteArray *) nil_chk(outArg))->size_ - outOff < len + macSize_) {
      @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"Output buffer too short");
    }
    lambda_c_ = len * OrgSpongycastleCryptoModesKGCMBlockCipher_BITS_IN_BYTE;
    resultLen = [((OrgSpongycastleCryptoBufferedBlockCipher *) nil_chk(ctrEngine_)) processBytesWithByteArray:[((OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *) nil_chk(data_)) getBuffer] withInt:0 withInt:len withByteArray:outArg withInt:outOff];
    resultLen += [((OrgSpongycastleCryptoBufferedBlockCipher *) nil_chk(ctrEngine_)) doFinalWithByteArray:outArg withInt:outOff + resultLen];
    OrgSpongycastleCryptoModesKGCMBlockCipher_calculateMacWithByteArray_withInt_withInt_(self, outArg, outOff, len);
  }
  else {
    lambda_c_ = (len - macSize_) * OrgSpongycastleCryptoModesKGCMBlockCipher_BITS_IN_BYTE;
    OrgSpongycastleCryptoModesKGCMBlockCipher_calculateMacWithByteArray_withInt_withInt_(self, [((OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *) nil_chk(data_)) getBuffer], 0, len - macSize_);
    resultLen = [((OrgSpongycastleCryptoBufferedBlockCipher *) nil_chk(ctrEngine_)) processBytesWithByteArray:[((OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *) nil_chk(data_)) getBuffer] withInt:0 withInt:len - macSize_ withByteArray:outArg withInt:outOff];
    resultLen += [((OrgSpongycastleCryptoBufferedBlockCipher *) nil_chk(ctrEngine_)) doFinalWithByteArray:outArg withInt:outOff + resultLen];
  }
  outOff += resultLen;
  if (macBlock_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"mac is not calculated");
  }
  if (forEncryption_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(macBlock_, 0, outArg, outOff, macSize_);
    [self reset];
    return resultLen + macSize_;
  }
  else {
    IOSByteArray *mac = [IOSByteArray newArrayWithLength:macSize_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *) nil_chk(data_)) getBuffer], resultLen, mac, 0, macSize_);
    IOSByteArray *calculatedMac = [IOSByteArray newArrayWithLength:macSize_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(macBlock_, 0, calculatedMac, 0, macSize_);
    if (!OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(mac, calculatedMac)) {
      @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"mac verification failed");
    }
    [self reset];
    return resultLen;
  }
}

- (IOSByteArray *)getMac {
  IOSByteArray *mac = [IOSByteArray newArrayWithLength:macSize_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(macBlock_, 0, mac, 0, macSize_);
  return mac;
}

- (jint)getUpdateOutputSizeWithInt:(jint)len {
  return len;
}

- (jint)getOutputSizeWithInt:(jint)len {
  if (forEncryption_) {
    return len;
  }
  else {
    return len + macSize_;
  }
}

- (void)reset {
  self->H_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) getBlockSize]];
  self->b_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) getBlockSize]];
  self->temp_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) getBlockSize]];
  self->lambda_c_ = 0;
  self->lambda_o_ = 0;
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) reset];
  [((OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *) nil_chk(data_)) reset];
  [((OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *) nil_chk(associatedText_)) reset];
  if (initialAssociatedText_ != nil) {
    [self processAADBytesWithByteArray:initialAssociatedText_ withInt:0 withInt:initialAssociatedText_->size_];
  }
}

- (void)calculateMacWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inOff
                          withInt:(jint)len {
  OrgSpongycastleCryptoModesKGCMBlockCipher_calculateMacWithByteArray_withInt_withInt_(self, input, inOff, len);
}

- (void)intToBytesWithInt:(jint)num
            withByteArray:(IOSByteArray *)outBytes
                  withInt:(jint)outOff {
  OrgSpongycastleCryptoModesKGCMBlockCipher_intToBytesWithInt_withByteArray_withInt_(self, num, outBytes, outOff);
}

- (void)multiplyOverFieldWithInt:(jint)blockBitLength
                   withByteArray:(IOSByteArray *)x
                   withByteArray:(IOSByteArray *)y
                   withByteArray:(IOSByteArray *)x_mult_y {
  OrgSpongycastleCryptoModesKGCMBlockCipher_multiplyOverFieldWithInt_withByteArray_withByteArray_withByteArray_(self, blockBitLength, x, y, x_mult_y);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoBlockCipher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 13, 11, -1, -1, -1 },
    { NULL, "I", 0x1, 14, 15, 16, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 24, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(getUnderlyingCipher);
  methods[4].selector = @selector(processAADByteWithByte:);
  methods[5].selector = @selector(processAADBytesWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(processAADWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(processByteWithByte:withByteArray:withInt:);
  methods[8].selector = @selector(processBytesWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[9].selector = @selector(doFinalWithByteArray:withInt:);
  methods[10].selector = @selector(getMac);
  methods[11].selector = @selector(getUpdateOutputSizeWithInt:);
  methods[12].selector = @selector(getOutputSizeWithInt:);
  methods[13].selector = @selector(reset);
  methods[14].selector = @selector(calculateMacWithByteArray:withInt:withInt:);
  methods[15].selector = @selector(intToBytesWithInt:withByteArray:withInt:);
  methods[16].selector = @selector(multiplyOverFieldWithInt:withByteArray:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "MASK_1_128", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "MASK_2_128", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "POLYRED_128", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "MASK_1_256", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "MASK_2_256", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "POLYRED_256", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "MASK_1_512", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "MASK_2_512", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "POLYRED_512", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "MIN_MAC_BITS", "I", .constantValue.asInt = OrgSpongycastleCryptoModesKGCMBlockCipher_MIN_MAC_BITS, 0x1a, -1, -1, -1, -1 },
    { "BITS_IN_BYTE", "I", .constantValue.asInt = OrgSpongycastleCryptoModesKGCMBlockCipher_BITS_IN_BYTE, 0x1a, -1, -1, -1, -1 },
    { "engine_", "LOrgSpongycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ctrEngine_", "LOrgSpongycastleCryptoBufferedBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "macSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialAssociatedText_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "macBlock_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iv_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "b_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "temp_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lambda_o_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lambda_c_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "associatedText_", "LOrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "data_", "LOrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoBlockCipher;", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "processAADByte", "B", "processAADBytes", "[BII", "processAAD", "processByte", "B[BI", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "processBytes", "[BII[BI", "doFinal", "[BI", "LJavaLangIllegalStateException;LOrgSpongycastleCryptoInvalidCipherTextException;", "getUpdateOutputSize", "I", "getOutputSize", "calculateMac", "intToBytes", "I[BI", "multiplyOverField", "I[B[B[B", &OrgSpongycastleCryptoModesKGCMBlockCipher_ZERO, &OrgSpongycastleCryptoModesKGCMBlockCipher_ONE, &OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_1_128, &OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_2_128, &OrgSpongycastleCryptoModesKGCMBlockCipher_POLYRED_128, &OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_1_256, &OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_2_256, &OrgSpongycastleCryptoModesKGCMBlockCipher_POLYRED_256, &OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_1_512, &OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_2_512, &OrgSpongycastleCryptoModesKGCMBlockCipher_POLYRED_512, "LOrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoModesKGCMBlockCipher = { "KGCMBlockCipher", "org.spongycastle.crypto.modes", ptrTable, methods, fields, 7, 0x1, 17, 27, -1, 36, -1, -1, -1 };
  return &_OrgSpongycastleCryptoModesKGCMBlockCipher;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoModesKGCMBlockCipher class]) {
    OrgSpongycastleCryptoModesKGCMBlockCipher_ZERO = JavaMathBigInteger_valueOfWithLong_(0);
    OrgSpongycastleCryptoModesKGCMBlockCipher_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_1_128 = new_JavaMathBigInteger_initWithNSString_withInt_(@"340282366920938463463374607431768211456", 10);
    OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_2_128 = new_JavaMathBigInteger_initWithNSString_withInt_(@"340282366920938463463374607431768211455", 10);
    OrgSpongycastleCryptoModesKGCMBlockCipher_POLYRED_128 = new_JavaMathBigInteger_initWithNSString_withInt_(@"135", 10);
    OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_1_256 = new_JavaMathBigInteger_initWithNSString_withInt_(@"115792089237316195423570985008687907853269984665640564039457584007913129639936", 10);
    OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_2_256 = new_JavaMathBigInteger_initWithNSString_withInt_(@"115792089237316195423570985008687907853269984665640564039457584007913129639935", 10);
    OrgSpongycastleCryptoModesKGCMBlockCipher_POLYRED_256 = new_JavaMathBigInteger_initWithNSString_withInt_(@"1061", 10);
    OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_1_512 = new_JavaMathBigInteger_initWithNSString_withInt_(@"13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096", 10);
    OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_2_512 = new_JavaMathBigInteger_initWithNSString_withInt_(@"13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095", 10);
    OrgSpongycastleCryptoModesKGCMBlockCipher_POLYRED_512 = new_JavaMathBigInteger_initWithNSString_withInt_(@"293", 10);
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoModesKGCMBlockCipher)
  }
}

@end

void OrgSpongycastleCryptoModesKGCMBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(OrgSpongycastleCryptoModesKGCMBlockCipher *self, id<OrgSpongycastleCryptoBlockCipher> dstu7624Engine) {
  NSObject_init(self);
  self->associatedText_ = new_OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream_initWithOrgSpongycastleCryptoModesKGCMBlockCipher_(self);
  self->data_ = new_OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream_initWithOrgSpongycastleCryptoModesKGCMBlockCipher_(self);
  self->engine_ = dstu7624Engine;
  self->ctrEngine_ = new_OrgSpongycastleCryptoBufferedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(new_OrgSpongycastleCryptoModesKCTRBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(self->engine_));
  self->macSize_ = 0;
  self->initialAssociatedText_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize]];
  self->iv_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize]];
  self->H_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize]];
  self->b_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize]];
  self->temp_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize]];
  self->lambda_c_ = 0;
  self->lambda_o_ = 0;
  self->macBlock_ = nil;
}

OrgSpongycastleCryptoModesKGCMBlockCipher *new_OrgSpongycastleCryptoModesKGCMBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> dstu7624Engine) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoModesKGCMBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_, dstu7624Engine)
}

OrgSpongycastleCryptoModesKGCMBlockCipher *create_OrgSpongycastleCryptoModesKGCMBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> dstu7624Engine) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoModesKGCMBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_, dstu7624Engine)
}

void OrgSpongycastleCryptoModesKGCMBlockCipher_processAADWithByteArray_withInt_withInt_(OrgSpongycastleCryptoModesKGCMBlockCipher *self, IOSByteArray *authText, jint authOff, jint len) {
  self->lambda_o_ = len * OrgSpongycastleCryptoModesKGCMBlockCipher_BITS_IN_BYTE;
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) processBlockWithByteArray:self->H_ withInt:0 withByteArray:self->H_ withInt:0];
  jint totalLength = len;
  jint inOff_ = authOff;
  while (totalLength > 0) {
    for (jint byteIndex = 0; byteIndex < [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize]; byteIndex++) {
      *IOSByteArray_GetRef(nil_chk(self->b_), byteIndex) ^= IOSByteArray_Get(nil_chk(authText), inOff_ + byteIndex);
    }
    OrgSpongycastleCryptoModesKGCMBlockCipher_multiplyOverFieldWithInt_withByteArray_withByteArray_withByteArray_(self, [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize] * OrgSpongycastleCryptoModesKGCMBlockCipher_BITS_IN_BYTE, self->b_, self->H_, self->temp_);
    self->temp_ = OrgSpongycastleUtilArrays_reverseWithByteArray_(self->temp_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->temp_, 0, self->b_, 0, [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize]);
    totalLength -= [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize];
    inOff_ += [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize];
  }
}

void OrgSpongycastleCryptoModesKGCMBlockCipher_calculateMacWithByteArray_withInt_withInt_(OrgSpongycastleCryptoModesKGCMBlockCipher *self, IOSByteArray *input, jint inOff, jint len) {
  self->macBlock_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize]];
  jint totalLength = len;
  jint inOff_ = inOff;
  while (totalLength > 0) {
    for (jint byteIndex = 0; byteIndex < [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize]; byteIndex++) {
      *IOSByteArray_GetRef(nil_chk(self->b_), byteIndex) ^= IOSByteArray_Get(nil_chk(input), byteIndex + inOff_);
    }
    OrgSpongycastleCryptoModesKGCMBlockCipher_multiplyOverFieldWithInt_withByteArray_withByteArray_withByteArray_(self, [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize] * OrgSpongycastleCryptoModesKGCMBlockCipher_BITS_IN_BYTE, self->b_, self->H_, self->temp_);
    self->temp_ = OrgSpongycastleUtilArrays_reverseWithByteArray_(self->temp_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->temp_, 0, self->b_, 0, [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize]);
    totalLength -= [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize];
    inOff_ += [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize];
  }
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(self->temp_, (jbyte) 0);
  OrgSpongycastleCryptoModesKGCMBlockCipher_intToBytesWithInt_withByteArray_withInt_(self, self->lambda_o_, self->temp_, 0);
  OrgSpongycastleCryptoModesKGCMBlockCipher_intToBytesWithInt_withByteArray_withInt_(self, self->lambda_c_, self->temp_, [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize] / 2);
  for (jint byteIndex = 0; byteIndex < [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize]; byteIndex++) {
    *IOSByteArray_GetRef(nil_chk(self->b_), byteIndex) ^= IOSByteArray_Get(nil_chk(self->temp_), byteIndex);
  }
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) processBlockWithByteArray:self->b_ withInt:0 withByteArray:self->macBlock_ withInt:0];
}

void OrgSpongycastleCryptoModesKGCMBlockCipher_intToBytesWithInt_withByteArray_withInt_(OrgSpongycastleCryptoModesKGCMBlockCipher *self, jint num, IOSByteArray *outBytes, jint outOff) {
  *IOSByteArray_GetRef(nil_chk(outBytes), outOff + 3) = (jbyte) (JreRShift32(num, 24));
  *IOSByteArray_GetRef(outBytes, outOff + 2) = (jbyte) (JreRShift32(num, 16));
  *IOSByteArray_GetRef(outBytes, outOff + 1) = (jbyte) (JreRShift32(num, 8));
  *IOSByteArray_GetRef(outBytes, outOff) = (jbyte) num;
}

void OrgSpongycastleCryptoModesKGCMBlockCipher_multiplyOverFieldWithInt_withByteArray_withByteArray_withByteArray_(OrgSpongycastleCryptoModesKGCMBlockCipher *self, jint blockBitLength, IOSByteArray *x, IOSByteArray *y, IOSByteArray *x_mult_y) {
  IOSByteArray *fieldOperationBuffer1 = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize]];
  IOSByteArray *fieldOperationBuffer2 = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize]];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(x, 0, fieldOperationBuffer1, 0, [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(y, 0, fieldOperationBuffer2, 0, [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) getBlockSize]);
  fieldOperationBuffer1 = OrgSpongycastleUtilArrays_reverseWithByteArray_(fieldOperationBuffer1);
  fieldOperationBuffer2 = OrgSpongycastleUtilArrays_reverseWithByteArray_(fieldOperationBuffer2);
  JavaMathBigInteger *mask1;
  JavaMathBigInteger *mask2;
  JavaMathBigInteger *polyred;
  switch (blockBitLength) {
    case 128:
    mask1 = OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_1_128;
    mask2 = OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_2_128;
    polyred = OrgSpongycastleCryptoModesKGCMBlockCipher_POLYRED_128;
    break;
    case 256:
    mask1 = OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_1_256;
    mask2 = OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_2_256;
    polyred = OrgSpongycastleCryptoModesKGCMBlockCipher_POLYRED_256;
    break;
    case 512:
    mask1 = OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_1_512;
    mask2 = OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_2_512;
    polyred = OrgSpongycastleCryptoModesKGCMBlockCipher_POLYRED_512;
    break;
    default:
    mask1 = OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_1_128;
    mask2 = OrgSpongycastleCryptoModesKGCMBlockCipher_MASK_2_128;
    polyred = OrgSpongycastleCryptoModesKGCMBlockCipher_POLYRED_128;
    break;
  }
  JavaMathBigInteger *p = OrgSpongycastleCryptoModesKGCMBlockCipher_ZERO;
  JavaMathBigInteger *p1 = new_JavaMathBigInteger_initWithInt_withByteArray_(1, fieldOperationBuffer1);
  JavaMathBigInteger *p2 = new_JavaMathBigInteger_initWithInt_withByteArray_(1, fieldOperationBuffer2);
  while (![((JavaMathBigInteger *) nil_chk(p2)) isEqual:OrgSpongycastleCryptoModesKGCMBlockCipher_ZERO]) {
    if ([((JavaMathBigInteger *) nil_chk([p2 and__WithJavaMathBigInteger:OrgSpongycastleCryptoModesKGCMBlockCipher_ONE])) isEqual:OrgSpongycastleCryptoModesKGCMBlockCipher_ONE]) {
      p = [((JavaMathBigInteger *) nil_chk(p)) xor__WithJavaMathBigInteger:p1];
    }
    p1 = [((JavaMathBigInteger *) nil_chk(p1)) shiftLeftWithInt:1];
    if (![((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(p1)) and__WithJavaMathBigInteger:mask1])) isEqual:OrgSpongycastleCryptoModesKGCMBlockCipher_ZERO]) {
      p1 = [p1 xor__WithJavaMathBigInteger:polyred];
    }
    p2 = [p2 shiftRightWithInt:1];
  }
  IOSByteArray *got = OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(p)) and__WithJavaMathBigInteger:mask2]);
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(x_mult_y, (jbyte) 0);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(got, 0, x_mult_y, 0, ((IOSByteArray *) nil_chk(got))->size_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoModesKGCMBlockCipher)

@implementation OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream

- (instancetype)initWithOrgSpongycastleCryptoModesKGCMBlockCipher:(OrgSpongycastleCryptoModesKGCMBlockCipher *)outer$ {
  OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream_initWithOrgSpongycastleCryptoModesKGCMBlockCipher_(self, outer$);
  return self;
}

- (IOSByteArray *)getBuffer {
  return self->buf_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoModesKGCMBlockCipher:);
  methods[1].selector = @selector(getBuffer);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoModesKGCMBlockCipher;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream = { "ExposedByteArrayOutputStream", "org.spongycastle.crypto.modes", ptrTable, methods, NULL, 7, 0x2, 2, 0, 0, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream;
}

@end

void OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream_initWithOrgSpongycastleCryptoModesKGCMBlockCipher_(OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *self, OrgSpongycastleCryptoModesKGCMBlockCipher *outer$) {
  JavaIoByteArrayOutputStream_init(self);
}

OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *new_OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream_initWithOrgSpongycastleCryptoModesKGCMBlockCipher_(OrgSpongycastleCryptoModesKGCMBlockCipher *outer$) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream, initWithOrgSpongycastleCryptoModesKGCMBlockCipher_, outer$)
}

OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream *create_OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream_initWithOrgSpongycastleCryptoModesKGCMBlockCipher_(OrgSpongycastleCryptoModesKGCMBlockCipher *outer$) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream, initWithOrgSpongycastleCryptoModesKGCMBlockCipher_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoModesKGCMBlockCipher_ExposedByteArrayOutputStream)
