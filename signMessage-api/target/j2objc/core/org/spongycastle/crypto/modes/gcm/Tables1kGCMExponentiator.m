//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/modes/gcm/Tables1kGCMExponentiator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Vector.h"
#include "org/spongycastle/crypto/modes/gcm/GCMUtil.h"
#include "org/spongycastle/crypto/modes/gcm/Tables1kGCMExponentiator.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator () {
 @public
  JavaUtilVector *lookupPowX2_;
}

- (void)ensureAvailableWithInt:(jint)bit;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator, lookupPowX2_, JavaUtilVector *)

__attribute__((unused)) static void OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator_ensureAvailableWithInt_(OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator *self, jint bit);

@implementation OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithByteArray:(IOSByteArray *)x {
  IOSIntArray *y = OrgSpongycastleCryptoModesGcmGCMUtil_asIntsWithByteArray_(x);
  if (lookupPowX2_ != nil && OrgSpongycastleUtilArrays_areEqualWithIntArray_withIntArray_(y, (IOSIntArray *) cast_chk([lookupPowX2_ elementAtWithInt:0], [IOSIntArray class]))) {
    return;
  }
  lookupPowX2_ = new_JavaUtilVector_initWithInt_(8);
  [lookupPowX2_ addElementWithId:y];
}

- (void)exponentiateXWithLong:(jlong)pow
                withByteArray:(IOSByteArray *)output {
  IOSIntArray *y = OrgSpongycastleCryptoModesGcmGCMUtil_oneAsInts();
  jint bit = 0;
  while (pow > 0) {
    if ((pow & 1LL) != 0) {
      OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator_ensureAvailableWithInt_(self, bit);
      OrgSpongycastleCryptoModesGcmGCMUtil_multiplyWithIntArray_withIntArray_(y, (IOSIntArray *) cast_chk([((JavaUtilVector *) nil_chk(lookupPowX2_)) elementAtWithInt:bit], [IOSIntArray class]));
    }
    ++bit;
    JreURShiftAssignLong(&pow, 1);
  }
  OrgSpongycastleCryptoModesGcmGCMUtil_asBytesWithIntArray_withByteArray_(y, output);
}

- (void)ensureAvailableWithInt:(jint)bit {
  OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator_ensureAvailableWithInt_(self, bit);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithByteArray:);
  methods[2].selector = @selector(exponentiateXWithLong:withByteArray:);
  methods[3].selector = @selector(ensureAvailableWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lookupPowX2_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "[B", "exponentiateX", "J[B", "ensureAvailable", "I" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator = { "Tables1kGCMExponentiator", "org.spongycastle.crypto.modes.gcm", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator;
}

@end

void OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator_init(OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator *new_OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator, init)
}

OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator *create_OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator, init)
}

void OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator_ensureAvailableWithInt_(OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator *self, jint bit) {
  jint count = [((JavaUtilVector *) nil_chk(self->lookupPowX2_)) size];
  if (count <= bit) {
    IOSIntArray *tmp = (IOSIntArray *) cast_chk([((JavaUtilVector *) nil_chk(self->lookupPowX2_)) elementAtWithInt:count - 1], [IOSIntArray class]);
    do {
      tmp = OrgSpongycastleUtilArrays_cloneWithIntArray_(tmp);
      OrgSpongycastleCryptoModesGcmGCMUtil_multiplyWithIntArray_withIntArray_(tmp, tmp);
      [((JavaUtilVector *) nil_chk(self->lookupPowX2_)) addElementWithId:tmp];
    }
    while (++count <= bit);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoModesGcmTables1kGCMExponentiator)
