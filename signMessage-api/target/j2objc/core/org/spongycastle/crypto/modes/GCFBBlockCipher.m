//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/modes/GCFBBlockCipher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/StreamBlockCipher.h"
#include "org/spongycastle/crypto/modes/CFBBlockCipher.h"
#include "org/spongycastle/crypto/modes/GCFBBlockCipher.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/crypto/params/ParametersWithSBox.h"

@interface OrgSpongycastleCryptoModesGCFBBlockCipher () {
 @public
  OrgSpongycastleCryptoModesCFBBlockCipher *cfbEngine_;
  OrgSpongycastleCryptoParamsKeyParameter *key_;
  jlong counter_;
  jboolean forEncryption_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesGCFBBlockCipher, cfbEngine_, OrgSpongycastleCryptoModesCFBBlockCipher *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesGCFBBlockCipher, key_, OrgSpongycastleCryptoParamsKeyParameter *)

inline IOSByteArray *OrgSpongycastleCryptoModesGCFBBlockCipher_get_C(void);
static IOSByteArray *OrgSpongycastleCryptoModesGCFBBlockCipher_C;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoModesGCFBBlockCipher, C, IOSByteArray *)

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoModesGCFBBlockCipher)

@implementation OrgSpongycastleCryptoModesGCFBBlockCipher

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)engine {
  OrgSpongycastleCryptoModesGCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(self, engine);
  return self;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  counter_ = 0;
  [((OrgSpongycastleCryptoModesCFBBlockCipher *) nil_chk(cfbEngine_)) init__WithBoolean:forEncryption withOrgSpongycastleCryptoCipherParameters:params];
  self->forEncryption_ = forEncryption;
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithIV class]]) {
    params = [((OrgSpongycastleCryptoParamsParametersWithIV *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithIV *) params))) getParameters];
  }
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
    params = [((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithRandom *) params))) getParameters];
  }
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithSBox class]]) {
    params = [((OrgSpongycastleCryptoParamsParametersWithSBox *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithSBox *) params))) getParameters];
  }
  key_ = (OrgSpongycastleCryptoParamsKeyParameter *) cast_chk(params, [OrgSpongycastleCryptoParamsKeyParameter class]);
}

- (NSString *)getAlgorithmName {
  NSString *name = [((OrgSpongycastleCryptoModesCFBBlockCipher *) nil_chk(cfbEngine_)) getAlgorithmName];
  return JreStrcat("$$$", [((NSString *) nil_chk(name)) java_substring:0 endIndex:[name java_indexOf:'/']], @"/G", [name java_substring:[name java_indexOf:'/'] + 1]);
}

- (jint)getBlockSize {
  return [((OrgSpongycastleCryptoModesCFBBlockCipher *) nil_chk(cfbEngine_)) getBlockSize];
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  [self processBytesWithByteArray:inArg withInt:inOff withInt:[((OrgSpongycastleCryptoModesCFBBlockCipher *) nil_chk(cfbEngine_)) getBlockSize] withByteArray:outArg withInt:outOff];
  return [cfbEngine_ getBlockSize];
}

- (jbyte)calculateByteWithByte:(jbyte)b {
  if (counter_ > 0 && counter_ % 1024 == 0) {
    id<OrgSpongycastleCryptoBlockCipher> base = [((OrgSpongycastleCryptoModesCFBBlockCipher *) nil_chk(cfbEngine_)) getUnderlyingCipher];
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(base)) init__WithBoolean:false withOrgSpongycastleCryptoCipherParameters:key_];
    IOSByteArray *nextKey = [IOSByteArray newArrayWithLength:32];
    [base processBlockWithByteArray:OrgSpongycastleCryptoModesGCFBBlockCipher_C withInt:0 withByteArray:nextKey withInt:0];
    [base processBlockWithByteArray:OrgSpongycastleCryptoModesGCFBBlockCipher_C withInt:8 withByteArray:nextKey withInt:8];
    [base processBlockWithByteArray:OrgSpongycastleCryptoModesGCFBBlockCipher_C withInt:16 withByteArray:nextKey withInt:16];
    [base processBlockWithByteArray:OrgSpongycastleCryptoModesGCFBBlockCipher_C withInt:24 withByteArray:nextKey withInt:24];
    key_ = new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_(nextKey);
    [base init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:key_];
    IOSByteArray *iv = [cfbEngine_ getCurrentIV];
    [base processBlockWithByteArray:iv withInt:0 withByteArray:iv withInt:0];
    [cfbEngine_ init__WithBoolean:forEncryption_ withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsParametersWithIV_initWithOrgSpongycastleCryptoCipherParameters_withByteArray_(key_, iv)];
  }
  counter_++;
  return [((OrgSpongycastleCryptoModesCFBBlockCipher *) nil_chk(cfbEngine_)) calculateByteWithByte:b];
}

- (void)reset {
  counter_ = 0;
  [((OrgSpongycastleCryptoModesCFBBlockCipher *) nil_chk(cfbEngine_)) reset];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "B", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(getBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(calculateByteWithByte:);
  methods[6].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "C", "[B", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "cfbEngine_", "LOrgSpongycastleCryptoModesCFBBlockCipher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "key_", "LOrgSpongycastleCryptoParamsKeyParameter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "counter_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoBlockCipher;", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "processBlock", "[BI[BI", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "calculateByte", "B", &OrgSpongycastleCryptoModesGCFBBlockCipher_C };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoModesGCFBBlockCipher = { "GCFBBlockCipher", "org.spongycastle.crypto.modes", ptrTable, methods, fields, 7, 0x1, 7, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoModesGCFBBlockCipher;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoModesGCFBBlockCipher class]) {
    OrgSpongycastleCryptoModesGCFBBlockCipher_C = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0x69, (jint) 0x00, (jint) 0x72, (jint) 0x22, (jint) 0x64, (jbyte) (jint) 0xC9, (jint) 0x04, (jint) 0x23, (jbyte) (jint) 0x8D, (jint) 0x3A, (jbyte) (jint) 0xDB, (jbyte) (jint) 0x96, (jint) 0x46, (jbyte) (jint) 0xE9, (jint) 0x2A, (jbyte) (jint) 0xC4, (jint) 0x18, (jbyte) (jint) 0xFE, (jbyte) (jint) 0xAC, (jbyte) (jint) 0x94, (jint) 0x00, (jbyte) (jint) 0xED, (jint) 0x07, (jint) 0x12, (jbyte) (jint) 0xC0, (jbyte) (jint) 0x86, (jbyte) (jint) 0xDC, (jbyte) (jint) 0xC2, (jbyte) (jint) 0xEF, (jint) 0x4C, (jbyte) (jint) 0xA9, (jint) 0x2B } count:32];
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoModesGCFBBlockCipher)
  }
}

@end

void OrgSpongycastleCryptoModesGCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(OrgSpongycastleCryptoModesGCFBBlockCipher *self, id<OrgSpongycastleCryptoBlockCipher> engine) {
  OrgSpongycastleCryptoStreamBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(self, engine);
  self->counter_ = 0;
  self->cfbEngine_ = new_OrgSpongycastleCryptoModesCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withInt_(engine, [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine)) getBlockSize] * 8);
}

OrgSpongycastleCryptoModesGCFBBlockCipher *new_OrgSpongycastleCryptoModesGCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> engine) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoModesGCFBBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_, engine)
}

OrgSpongycastleCryptoModesGCFBBlockCipher *create_OrgSpongycastleCryptoModesGCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> engine) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoModesGCFBBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_, engine)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoModesGCFBBlockCipher)
