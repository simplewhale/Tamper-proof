//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/modes/gcm/Tables64kGCMMultiplier.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/modes/gcm/GCMUtil.h"
#include "org/spongycastle/crypto/modes/gcm/Tables64kGCMMultiplier.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/Pack.h"

@interface OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier () {
 @public
  IOSByteArray *H_;
  IOSObjectArray *M_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier, H_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier, M_, IOSObjectArray *)

@implementation OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithByteArray:(IOSByteArray *)H {
  if (M_ == nil) {
    M_ = [IOSIntArray newArrayWithDimensions:3 lengths:(jint[]){ 16, 256, 4 }];
  }
  else if (OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(self->H_, H)) {
    return;
  }
  self->H_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(H);
  OrgSpongycastleCryptoModesGcmGCMUtil_asIntsWithByteArray_withIntArray_(H, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(M_), 0)), 128));
  for (jint j = 64; j >= 1; JreRShiftAssignInt(&j, 1)) {
    OrgSpongycastleCryptoModesGcmGCMUtil_multiplyPWithIntArray_withIntArray_(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(M_), 0)), j + j), IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(M_, 0)), j));
  }
  jint i = 0;
  for (; ; ) {
    for (jint j = 2; j < 256; j += j) {
      for (jint k = 1; k < j; ++k) {
        OrgSpongycastleCryptoModesGcmGCMUtil_xor__WithIntArray_withIntArray_withIntArray_(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(M_), i)), j), IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(M_, i)), k), IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(M_, i)), j + k));
      }
    }
    if (++i == 16) {
      return;
    }
    for (jint j = 128; j > 0; JreRShiftAssignInt(&j, 1)) {
      OrgSpongycastleCryptoModesGcmGCMUtil_multiplyP8WithIntArray_withIntArray_(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(M_), i - 1)), j), IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(M_, i)), j));
    }
  }
}

- (void)multiplyHWithByteArray:(IOSByteArray *)x {
  IOSIntArray *z = [IOSIntArray newArrayWithLength:4];
  for (jint i = 15; i >= 0; --i) {
    IOSIntArray *m = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(M_), i)), IOSByteArray_Get(nil_chk(x), i) & (jint) 0xff);
    *IOSIntArray_GetRef(z, 0) ^= IOSIntArray_Get(nil_chk(m), 0);
    *IOSIntArray_GetRef(z, 1) ^= IOSIntArray_Get(m, 1);
    *IOSIntArray_GetRef(z, 2) ^= IOSIntArray_Get(m, 2);
    *IOSIntArray_GetRef(z, 3) ^= IOSIntArray_Get(m, 3);
  }
  OrgSpongycastleUtilPack_intToBigEndianWithIntArray_withByteArray_withInt_(z, x, 0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithByteArray:);
  methods[2].selector = @selector(multiplyHWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "H_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "M_", "[[[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "[B", "multiplyH" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier = { "Tables64kGCMMultiplier", "org.spongycastle.crypto.modes.gcm", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier;
}

@end

void OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier_init(OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier *new_OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier, init)
}

OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier *create_OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoModesGcmTables64kGCMMultiplier)
