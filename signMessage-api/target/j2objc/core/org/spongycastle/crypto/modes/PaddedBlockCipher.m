//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/modes/PaddedBlockCipher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/BufferedBlockCipher.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/InvalidCipherTextException.h"
#include "org/spongycastle/crypto/OutputLengthException.h"
#include "org/spongycastle/crypto/modes/PaddedBlockCipher.h"

@implementation OrgSpongycastleCryptoModesPaddedBlockCipher

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher {
  OrgSpongycastleCryptoModesPaddedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(self, cipher);
  return self;
}

- (jint)getOutputSizeWithInt:(jint)len {
  jint total = len + bufOff_;
  jint leftOver = total % ((IOSByteArray *) nil_chk(buf_))->size_;
  if (leftOver == 0) {
    if (forEncryption_) {
      return total + buf_->size_;
    }
    return total;
  }
  return total - leftOver + buf_->size_;
}

- (jint)getUpdateOutputSizeWithInt:(jint)len {
  jint total = len + bufOff_;
  jint leftOver = total % ((IOSByteArray *) nil_chk(buf_))->size_;
  if (leftOver == 0) {
    return total - buf_->size_;
  }
  return total - leftOver;
}

- (jint)processByteWithByte:(jbyte)inArg
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff {
  jint resultLen = 0;
  if (bufOff_ == ((IOSByteArray *) nil_chk(buf_))->size_) {
    resultLen = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    bufOff_ = 0;
  }
  *IOSByteArray_GetRef(nil_chk(buf_), bufOff_++) = inArg;
  return resultLen;
}

- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't have a negative input length!");
  }
  jint blockSize = [self getBlockSize];
  jint length = [self getUpdateOutputSizeWithInt:len];
  if (length > 0) {
    if ((outOff + length) > ((IOSByteArray *) nil_chk(outArg))->size_) {
      @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
    }
  }
  jint resultLen = 0;
  jint gapLen = ((IOSByteArray *) nil_chk(buf_))->size_ - bufOff_;
  if (len > gapLen) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, gapLen);
    resultLen += [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    bufOff_ = 0;
    len -= gapLen;
    inOff += gapLen;
    while (len > ((IOSByteArray *) nil_chk(buf_))->size_) {
      resultLen += [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff + resultLen];
      len -= blockSize;
      inOff += blockSize;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, len);
  bufOff_ += len;
  return resultLen;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  jint blockSize = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
  jint resultLen = 0;
  if (forEncryption_) {
    if (bufOff_ == blockSize) {
      if ((outOff + 2 * blockSize) > ((IOSByteArray *) nil_chk(outArg))->size_) {
        @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
      }
      resultLen = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
      bufOff_ = 0;
    }
    jbyte code = (jbyte) (blockSize - bufOff_);
    while (bufOff_ < blockSize) {
      *IOSByteArray_GetRef(nil_chk(buf_), bufOff_) = code;
      bufOff_++;
    }
    resultLen += [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff + resultLen];
  }
  else {
    if (bufOff_ == blockSize) {
      resultLen = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:buf_ withInt:0];
      bufOff_ = 0;
    }
    else {
      @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"last block incomplete in decryption");
    }
    jint count = IOSByteArray_Get(nil_chk(buf_), blockSize - 1) & (jint) 0xff;
    if ((count < 0) || (count > blockSize)) {
      @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"pad block corrupted");
    }
    resultLen -= count;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, 0, outArg, outOff, resultLen);
  }
  [self reset];
  return resultLen;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, 6, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:);
  methods[1].selector = @selector(getOutputSizeWithInt:);
  methods[2].selector = @selector(getUpdateOutputSizeWithInt:);
  methods[3].selector = @selector(processByteWithByte:withByteArray:withInt:);
  methods[4].selector = @selector(processBytesWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(doFinalWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoBlockCipher;", "getOutputSize", "I", "getUpdateOutputSize", "processByte", "B[BI", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "processBytes", "[BII[BI", "doFinal", "[BI", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalStateException;LOrgSpongycastleCryptoInvalidCipherTextException;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoModesPaddedBlockCipher = { "PaddedBlockCipher", "org.spongycastle.crypto.modes", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoModesPaddedBlockCipher;
}

@end

void OrgSpongycastleCryptoModesPaddedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(OrgSpongycastleCryptoModesPaddedBlockCipher *self, id<OrgSpongycastleCryptoBlockCipher> cipher) {
  OrgSpongycastleCryptoBufferedBlockCipher_init(self);
  self->cipher_ = cipher;
  self->buf_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize]];
  self->bufOff_ = 0;
}

OrgSpongycastleCryptoModesPaddedBlockCipher *new_OrgSpongycastleCryptoModesPaddedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoModesPaddedBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_, cipher)
}

OrgSpongycastleCryptoModesPaddedBlockCipher *create_OrgSpongycastleCryptoModesPaddedBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoModesPaddedBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_, cipher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoModesPaddedBlockCipher)
