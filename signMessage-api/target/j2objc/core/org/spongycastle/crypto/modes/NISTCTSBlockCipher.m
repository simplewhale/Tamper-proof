//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/modes/NISTCTSBlockCipher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/BufferedBlockCipher.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/OutputLengthException.h"
#include "org/spongycastle/crypto/modes/CBCBlockCipher.h"
#include "org/spongycastle/crypto/modes/NISTCTSBlockCipher.h"

@interface OrgSpongycastleCryptoModesNISTCTSBlockCipher () {
 @public
  jint type_;
  jint blockSize_;
}

@end

@implementation OrgSpongycastleCryptoModesNISTCTSBlockCipher

- (instancetype)initWithInt:(jint)type
withOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher {
  OrgSpongycastleCryptoModesNISTCTSBlockCipher_initWithInt_withOrgSpongycastleCryptoBlockCipher_(self, type, cipher);
  return self;
}

- (jint)getUpdateOutputSizeWithInt:(jint)len {
  jint total = len + bufOff_;
  jint leftOver = total % ((IOSByteArray *) nil_chk(buf_))->size_;
  if (leftOver == 0) {
    return total - buf_->size_;
  }
  return total - leftOver;
}

- (jint)getOutputSizeWithInt:(jint)len {
  return len + bufOff_;
}

- (jint)processByteWithByte:(jbyte)inArg
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff {
  jint resultLen = 0;
  if (bufOff_ == ((IOSByteArray *) nil_chk(buf_))->size_) {
    resultLen = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, blockSize_, buf_, 0, blockSize_);
    bufOff_ = blockSize_;
  }
  *IOSByteArray_GetRef(nil_chk(buf_), bufOff_++) = inArg;
  return resultLen;
}

- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (len < 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Can't have a negative input length!");
  }
  jint blockSize = [self getBlockSize];
  jint length = [self getUpdateOutputSizeWithInt:len];
  if (length > 0) {
    if ((outOff + length) > ((IOSByteArray *) nil_chk(outArg))->size_) {
      @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
    }
  }
  jint resultLen = 0;
  jint gapLen = ((IOSByteArray *) nil_chk(buf_))->size_ - bufOff_;
  if (len > gapLen) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, gapLen);
    resultLen += [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, blockSize, buf_, 0, blockSize);
    bufOff_ = blockSize;
    len -= gapLen;
    inOff += gapLen;
    while (len > blockSize) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, blockSize);
      resultLen += [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:outArg withInt:outOff + resultLen];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, blockSize, buf_, 0, blockSize);
      len -= blockSize;
      inOff += blockSize;
    }
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buf_, bufOff_, len);
  bufOff_ += len;
  return resultLen;
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  if (bufOff_ + outOff > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer to small in doFinal");
  }
  jint blockSize = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
  jint len = bufOff_ - blockSize;
  IOSByteArray *block = [IOSByteArray newArrayWithLength:blockSize];
  if (forEncryption_) {
    if (bufOff_ < blockSize) {
      @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"need at least one block of input for NISTCTS");
    }
    if (bufOff_ > blockSize) {
      IOSByteArray *lastBlock = [IOSByteArray newArrayWithLength:blockSize];
      if (self->type_ == OrgSpongycastleCryptoModesNISTCTSBlockCipher_CS2 || self->type_ == OrgSpongycastleCryptoModesNISTCTSBlockCipher_CS3) {
        [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:block withInt:0];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, blockSize, lastBlock, 0, len);
        [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:lastBlock withInt:0 withByteArray:lastBlock withInt:0];
        if (self->type_ == OrgSpongycastleCryptoModesNISTCTSBlockCipher_CS2 && len == blockSize) {
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, 0, outArg, outOff, blockSize);
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lastBlock, 0, outArg, outOff + blockSize, len);
        }
        else {
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lastBlock, 0, outArg, outOff, blockSize);
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, 0, outArg, outOff + blockSize, len);
        }
      }
      else {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, 0, block, 0, blockSize);
        [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:block withInt:0 withByteArray:block withInt:0];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, 0, outArg, outOff, len);
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, bufOff_ - len, lastBlock, 0, len);
        [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:lastBlock withInt:0 withByteArray:lastBlock withInt:0];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lastBlock, 0, outArg, outOff + len, blockSize);
      }
    }
    else {
      [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:block withInt:0];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, 0, outArg, outOff, blockSize);
    }
  }
  else {
    if (bufOff_ < blockSize) {
      @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"need at least one block of input for CTS");
    }
    IOSByteArray *lastBlock = [IOSByteArray newArrayWithLength:blockSize];
    if (bufOff_ > blockSize) {
      if (self->type_ == OrgSpongycastleCryptoModesNISTCTSBlockCipher_CS3 || (self->type_ == OrgSpongycastleCryptoModesNISTCTSBlockCipher_CS2 && ((((IOSByteArray *) nil_chk(buf_))->size_ - bufOff_) % blockSize) != 0)) {
        if ([cipher_ isKindOfClass:[OrgSpongycastleCryptoModesCBCBlockCipher class]]) {
          id<OrgSpongycastleCryptoBlockCipher> c = [((OrgSpongycastleCryptoModesCBCBlockCipher *) nil_chk(((OrgSpongycastleCryptoModesCBCBlockCipher *) cipher_))) getUnderlyingCipher];
          [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(c)) processBlockWithByteArray:buf_ withInt:0 withByteArray:block withInt:0];
        }
        else {
          [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:block withInt:0];
        }
        for (jint i = blockSize; i != bufOff_; i++) {
          *IOSByteArray_GetRef(lastBlock, i - blockSize) = (jbyte) (IOSByteArray_Get(block, i - blockSize) ^ IOSByteArray_Get(nil_chk(buf_), i));
        }
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, blockSize, block, 0, len);
        [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:block withInt:0 withByteArray:outArg withInt:outOff];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lastBlock, 0, outArg, outOff + blockSize, len);
      }
      else {
        id<OrgSpongycastleCryptoBlockCipher> c = [((OrgSpongycastleCryptoModesCBCBlockCipher *) nil_chk(((OrgSpongycastleCryptoModesCBCBlockCipher *) cast_chk(cipher_, [OrgSpongycastleCryptoModesCBCBlockCipher class])))) getUnderlyingCipher];
        [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(c)) processBlockWithByteArray:buf_ withInt:bufOff_ - blockSize withByteArray:lastBlock withInt:0];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf_, 0, block, 0, blockSize);
        if (len != blockSize) {
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lastBlock, len, block, len, blockSize - len);
        }
        [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:block withInt:0 withByteArray:block withInt:0];
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, 0, outArg, outOff, blockSize);
        for (jint i = 0; i != len; i++) {
          *IOSByteArray_GetRef(lastBlock, i) ^= IOSByteArray_Get(nil_chk(buf_), i);
        }
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lastBlock, 0, outArg, outOff + blockSize, len);
      }
    }
    else {
      [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:buf_ withInt:0 withByteArray:block withInt:0];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, 0, outArg, outOff, blockSize);
    }
  }
  jint offset = bufOff_;
  [self reset];
  return offset;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, 6, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withOrgSpongycastleCryptoBlockCipher:);
  methods[1].selector = @selector(getUpdateOutputSizeWithInt:);
  methods[2].selector = @selector(getOutputSizeWithInt:);
  methods[3].selector = @selector(processByteWithByte:withByteArray:withInt:);
  methods[4].selector = @selector(processBytesWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(doFinalWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CS1", "I", .constantValue.asInt = OrgSpongycastleCryptoModesNISTCTSBlockCipher_CS1, 0x19, -1, -1, -1, -1 },
    { "CS2", "I", .constantValue.asInt = OrgSpongycastleCryptoModesNISTCTSBlockCipher_CS2, 0x19, -1, -1, -1, -1 },
    { "CS3", "I", .constantValue.asInt = OrgSpongycastleCryptoModesNISTCTSBlockCipher_CS3, 0x19, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILOrgSpongycastleCryptoBlockCipher;", "getUpdateOutputSize", "I", "getOutputSize", "processByte", "B[BI", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "processBytes", "[BII[BI", "doFinal", "[BI", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalStateException;LOrgSpongycastleCryptoInvalidCipherTextException;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoModesNISTCTSBlockCipher = { "NISTCTSBlockCipher", "org.spongycastle.crypto.modes", ptrTable, methods, fields, 7, 0x1, 6, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoModesNISTCTSBlockCipher;
}

@end

void OrgSpongycastleCryptoModesNISTCTSBlockCipher_initWithInt_withOrgSpongycastleCryptoBlockCipher_(OrgSpongycastleCryptoModesNISTCTSBlockCipher *self, jint type, id<OrgSpongycastleCryptoBlockCipher> cipher) {
  OrgSpongycastleCryptoBufferedBlockCipher_init(self);
  self->type_ = type;
  self->cipher_ = new_OrgSpongycastleCryptoModesCBCBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(cipher);
  self->blockSize_ = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize];
  self->buf_ = [IOSByteArray newArrayWithLength:self->blockSize_ * 2];
  self->bufOff_ = 0;
}

OrgSpongycastleCryptoModesNISTCTSBlockCipher *new_OrgSpongycastleCryptoModesNISTCTSBlockCipher_initWithInt_withOrgSpongycastleCryptoBlockCipher_(jint type, id<OrgSpongycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoModesNISTCTSBlockCipher, initWithInt_withOrgSpongycastleCryptoBlockCipher_, type, cipher)
}

OrgSpongycastleCryptoModesNISTCTSBlockCipher *create_OrgSpongycastleCryptoModesNISTCTSBlockCipher_initWithInt_withOrgSpongycastleCryptoBlockCipher_(jint type, id<OrgSpongycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoModesNISTCTSBlockCipher, initWithInt_withOrgSpongycastleCryptoBlockCipher_, type, cipher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoModesNISTCTSBlockCipher)
