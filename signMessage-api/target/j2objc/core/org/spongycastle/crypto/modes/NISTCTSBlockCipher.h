//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/modes/NISTCTSBlockCipher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoModesNISTCTSBlockCipher")
#ifdef RESTRICT_OrgSpongycastleCryptoModesNISTCTSBlockCipher
#define INCLUDE_ALL_OrgSpongycastleCryptoModesNISTCTSBlockCipher 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoModesNISTCTSBlockCipher 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoModesNISTCTSBlockCipher

#if !defined (OrgSpongycastleCryptoModesNISTCTSBlockCipher_) && (INCLUDE_ALL_OrgSpongycastleCryptoModesNISTCTSBlockCipher || defined(INCLUDE_OrgSpongycastleCryptoModesNISTCTSBlockCipher))
#define OrgSpongycastleCryptoModesNISTCTSBlockCipher_

#define RESTRICT_OrgSpongycastleCryptoBufferedBlockCipher 1
#define INCLUDE_OrgSpongycastleCryptoBufferedBlockCipher 1
#include "org/spongycastle/crypto/BufferedBlockCipher.h"

@class IOSByteArray;
@protocol OrgSpongycastleCryptoBlockCipher;

@interface OrgSpongycastleCryptoModesNISTCTSBlockCipher : OrgSpongycastleCryptoBufferedBlockCipher

#pragma mark Public

- (instancetype)initWithInt:(jint)type
withOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher;

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff;

- (jint)getOutputSizeWithInt:(jint)len;

- (jint)getUpdateOutputSizeWithInt:(jint)len;

- (jint)processByteWithByte:(jbyte)inArg
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff;

- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoModesNISTCTSBlockCipher)

inline jint OrgSpongycastleCryptoModesNISTCTSBlockCipher_get_CS1(void);
#define OrgSpongycastleCryptoModesNISTCTSBlockCipher_CS1 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoModesNISTCTSBlockCipher, CS1, jint)

inline jint OrgSpongycastleCryptoModesNISTCTSBlockCipher_get_CS2(void);
#define OrgSpongycastleCryptoModesNISTCTSBlockCipher_CS2 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoModesNISTCTSBlockCipher, CS2, jint)

inline jint OrgSpongycastleCryptoModesNISTCTSBlockCipher_get_CS3(void);
#define OrgSpongycastleCryptoModesNISTCTSBlockCipher_CS3 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoModesNISTCTSBlockCipher, CS3, jint)

FOUNDATION_EXPORT void OrgSpongycastleCryptoModesNISTCTSBlockCipher_initWithInt_withOrgSpongycastleCryptoBlockCipher_(OrgSpongycastleCryptoModesNISTCTSBlockCipher *self, jint type, id<OrgSpongycastleCryptoBlockCipher> cipher);

FOUNDATION_EXPORT OrgSpongycastleCryptoModesNISTCTSBlockCipher *new_OrgSpongycastleCryptoModesNISTCTSBlockCipher_initWithInt_withOrgSpongycastleCryptoBlockCipher_(jint type, id<OrgSpongycastleCryptoBlockCipher> cipher) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoModesNISTCTSBlockCipher *create_OrgSpongycastleCryptoModesNISTCTSBlockCipher_initWithInt_withOrgSpongycastleCryptoBlockCipher_(jint type, id<OrgSpongycastleCryptoBlockCipher> cipher);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoModesNISTCTSBlockCipher)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoModesNISTCTSBlockCipher")
