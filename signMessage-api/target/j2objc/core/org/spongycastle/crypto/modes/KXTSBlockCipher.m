//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/modes/KXTSBlockCipher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/BufferedBlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/OutputLengthException.h"
#include "org/spongycastle/crypto/modes/KXTSBlockCipher.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"
#include "org/spongycastle/util/Pack.h"

@interface OrgSpongycastleCryptoModesKXTSBlockCipher () {
 @public
  jint blockSize_;
  jlong reductionPolynomial_;
  IOSLongArray *tw_init_;
  IOSLongArray *tw_current_;
  jint counter_;
}

- (void)processBlockWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outOff;

+ (void)GF_doubleWithLong:(jlong)redPoly
            withLongArray:(IOSLongArray *)z;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesKXTSBlockCipher, tw_init_, IOSLongArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesKXTSBlockCipher, tw_current_, IOSLongArray *)

inline jlong OrgSpongycastleCryptoModesKXTSBlockCipher_get_RED_POLY_128(void);
#define OrgSpongycastleCryptoModesKXTSBlockCipher_RED_POLY_128 135LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoModesKXTSBlockCipher, RED_POLY_128, jlong)

inline jlong OrgSpongycastleCryptoModesKXTSBlockCipher_get_RED_POLY_256(void);
#define OrgSpongycastleCryptoModesKXTSBlockCipher_RED_POLY_256 1061LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoModesKXTSBlockCipher, RED_POLY_256, jlong)

inline jlong OrgSpongycastleCryptoModesKXTSBlockCipher_get_RED_POLY_512(void);
#define OrgSpongycastleCryptoModesKXTSBlockCipher_RED_POLY_512 293LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoModesKXTSBlockCipher, RED_POLY_512, jlong)

__attribute__((unused)) static void OrgSpongycastleCryptoModesKXTSBlockCipher_processBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoModesKXTSBlockCipher *self, IOSByteArray *input, jint inOff, IOSByteArray *output, jint outOff);

__attribute__((unused)) static void OrgSpongycastleCryptoModesKXTSBlockCipher_GF_doubleWithLong_withLongArray_(jlong redPoly, IOSLongArray *z);

@implementation OrgSpongycastleCryptoModesKXTSBlockCipher

+ (jlong)getReductionPolynomialWithInt:(jint)blockSize {
  return OrgSpongycastleCryptoModesKXTSBlockCipher_getReductionPolynomialWithInt_(blockSize);
}

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher {
  OrgSpongycastleCryptoModesKXTSBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(self, cipher);
  return self;
}

- (jint)getOutputSizeWithInt:(jint)length {
  return length;
}

- (jint)getUpdateOutputSizeWithInt:(jint)len {
  return len;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)parameters {
  if (!([parameters isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithIV class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid parameters passed");
  }
  OrgSpongycastleCryptoParamsParametersWithIV *ivParam = (OrgSpongycastleCryptoParamsParametersWithIV *) cast_chk(parameters, [OrgSpongycastleCryptoParamsParametersWithIV class]);
  parameters = [((OrgSpongycastleCryptoParamsParametersWithIV *) nil_chk(ivParam)) getParameters];
  IOSByteArray *iv = [ivParam getIV];
  if (((IOSByteArray *) nil_chk(iv))->size_ != blockSize_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Currently only support IVs of exactly one block");
  }
  IOSByteArray *tweak = [IOSByteArray newArrayWithLength:blockSize_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, tweak, 0, blockSize_);
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:parameters];
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) processBlockWithByteArray:tweak withInt:0 withByteArray:tweak withInt:0];
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:forEncryption withOrgSpongycastleCryptoCipherParameters:parameters];
  OrgSpongycastleUtilPack_littleEndianToLongWithByteArray_withInt_withLongArray_(tweak, 0, tw_init_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tw_init_, 0, tw_current_, 0, ((IOSLongArray *) nil_chk(tw_init_))->size_);
  counter_ = 0;
}

- (jint)processByteWithByte:(jbyte)inArg
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff {
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"unsupported operation");
}

- (jint)processBytesWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outOff {
  if (((IOSByteArray *) nil_chk(input))->size_ - inOff < len) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"Input buffer too short");
  }
  if (((IOSByteArray *) nil_chk(output))->size_ - inOff < len) {
    @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"Output buffer too short");
  }
  if (len % blockSize_ != 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Partial blocks not supported");
  }
  for (jint pos = 0; pos < len; pos += blockSize_) {
    OrgSpongycastleCryptoModesKXTSBlockCipher_processBlockWithByteArray_withInt_withByteArray_withInt_(self, input, inOff + pos, output, outOff + pos);
  }
  return len;
}

- (void)processBlockWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outOff {
  OrgSpongycastleCryptoModesKXTSBlockCipher_processBlockWithByteArray_withInt_withByteArray_withInt_(self, input, inOff, output, outOff);
}

- (jint)doFinalWithByteArray:(IOSByteArray *)output
                     withInt:(jint)outOff {
  [self reset];
  return 0;
}

- (void)reset {
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) reset];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tw_init_, 0, tw_current_, 0, ((IOSLongArray *) nil_chk(tw_init_))->size_);
  counter_ = 0;
}

+ (void)GF_doubleWithLong:(jlong)redPoly
            withLongArray:(IOSLongArray *)z {
  OrgSpongycastleCryptoModesKXTSBlockCipher_GF_doubleWithLong_withLongArray_(redPoly, z);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0xc, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getReductionPolynomialWithInt:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:);
  methods[2].selector = @selector(getOutputSizeWithInt:);
  methods[3].selector = @selector(getUpdateOutputSizeWithInt:);
  methods[4].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[5].selector = @selector(processByteWithByte:withByteArray:withInt:);
  methods[6].selector = @selector(processBytesWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[7].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[8].selector = @selector(doFinalWithByteArray:withInt:);
  methods[9].selector = @selector(reset);
  methods[10].selector = @selector(GF_doubleWithLong:withLongArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "RED_POLY_128", "J", .constantValue.asLong = OrgSpongycastleCryptoModesKXTSBlockCipher_RED_POLY_128, 0x1a, -1, -1, -1, -1 },
    { "RED_POLY_256", "J", .constantValue.asLong = OrgSpongycastleCryptoModesKXTSBlockCipher_RED_POLY_256, 0x1a, -1, -1, -1, -1 },
    { "RED_POLY_512", "J", .constantValue.asLong = OrgSpongycastleCryptoModesKXTSBlockCipher_RED_POLY_512, 0x1a, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "reductionPolynomial_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tw_init_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tw_current_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "counter_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getReductionPolynomial", "I", "LOrgSpongycastleCryptoBlockCipher;", "getOutputSize", "getUpdateOutputSize", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "processByte", "B[BI", "processBytes", "[BII[BI", "processBlock", "[BI[BI", "doFinal", "[BI", "GF_double", "J[J" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoModesKXTSBlockCipher = { "KXTSBlockCipher", "org.spongycastle.crypto.modes", ptrTable, methods, fields, 7, 0x1, 11, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoModesKXTSBlockCipher;
}

@end

jlong OrgSpongycastleCryptoModesKXTSBlockCipher_getReductionPolynomialWithInt_(jint blockSize) {
  OrgSpongycastleCryptoModesKXTSBlockCipher_initialize();
  switch (blockSize) {
    case 16:
    return OrgSpongycastleCryptoModesKXTSBlockCipher_RED_POLY_128;
    case 32:
    return OrgSpongycastleCryptoModesKXTSBlockCipher_RED_POLY_256;
    case 64:
    return OrgSpongycastleCryptoModesKXTSBlockCipher_RED_POLY_512;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Only 128, 256, and 512 -bit block sizes supported");
  }
}

void OrgSpongycastleCryptoModesKXTSBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(OrgSpongycastleCryptoModesKXTSBlockCipher *self, id<OrgSpongycastleCryptoBlockCipher> cipher) {
  OrgSpongycastleCryptoBufferedBlockCipher_init(self);
  self->cipher_ = cipher;
  self->blockSize_ = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize];
  self->reductionPolynomial_ = OrgSpongycastleCryptoModesKXTSBlockCipher_getReductionPolynomialWithInt_(self->blockSize_);
  self->tw_init_ = [IOSLongArray newArrayWithLength:JreURShift32(self->blockSize_, 3)];
  self->tw_current_ = [IOSLongArray newArrayWithLength:JreURShift32(self->blockSize_, 3)];
  self->counter_ = -1;
}

OrgSpongycastleCryptoModesKXTSBlockCipher *new_OrgSpongycastleCryptoModesKXTSBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoModesKXTSBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_, cipher)
}

OrgSpongycastleCryptoModesKXTSBlockCipher *create_OrgSpongycastleCryptoModesKXTSBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoModesKXTSBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_, cipher)
}

void OrgSpongycastleCryptoModesKXTSBlockCipher_processBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoModesKXTSBlockCipher *self, IOSByteArray *input, jint inOff, IOSByteArray *output, jint outOff) {
  if (self->counter_ == -1) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Attempt to process too many blocks");
  }
  ++self->counter_;
  OrgSpongycastleCryptoModesKXTSBlockCipher_GF_doubleWithLong_withLongArray_(self->reductionPolynomial_, self->tw_current_);
  IOSByteArray *tweak = [IOSByteArray newArrayWithLength:self->blockSize_];
  OrgSpongycastleUtilPack_longToLittleEndianWithLongArray_withByteArray_withInt_(self->tw_current_, tweak, 0);
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:self->blockSize_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(tweak, 0, buffer, 0, self->blockSize_);
  for (jint i = 0; i < self->blockSize_; ++i) {
    *IOSByteArray_GetRef(buffer, i) ^= IOSByteArray_Get(nil_chk(input), inOff + i);
  }
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:buffer withInt:0 withByteArray:buffer withInt:0];
  for (jint i = 0; i < self->blockSize_; ++i) {
    *IOSByteArray_GetRef(nil_chk(output), outOff + i) = (jbyte) (IOSByteArray_Get(buffer, i) ^ IOSByteArray_Get(tweak, i));
  }
}

void OrgSpongycastleCryptoModesKXTSBlockCipher_GF_doubleWithLong_withLongArray_(jlong redPoly, IOSLongArray *z) {
  OrgSpongycastleCryptoModesKXTSBlockCipher_initialize();
  jlong c = 0;
  for (jint i = 0; i < ((IOSLongArray *) nil_chk(z))->size_; ++i) {
    jlong zVal = IOSLongArray_Get(z, i);
    jlong bit = JreURShift64(zVal, 63);
    *IOSLongArray_GetRef(z, i) = (JreLShift64(zVal, 1)) ^ c;
    c = bit;
  }
  *IOSLongArray_GetRef(z, 0) ^= redPoly & -c;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoModesKXTSBlockCipher)
