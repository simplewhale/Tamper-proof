//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/modes/OpenPGPCFBBlockCipher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/OutputLengthException.h"
#include "org/spongycastle/crypto/modes/OpenPGPCFBBlockCipher.h"

@interface OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher () {
 @public
  IOSByteArray *IV_;
  IOSByteArray *FR_;
  IOSByteArray *FRE_;
  id<OrgSpongycastleCryptoBlockCipher> cipher_;
  jint count_;
  jint blockSize_;
  jboolean forEncryption_;
}

- (jbyte)encryptByteWithByte:(jbyte)data
                     withInt:(jint)blockOff;

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher, IV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher, FR_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher, FRE_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher, cipher_, id<OrgSpongycastleCryptoBlockCipher>)

__attribute__((unused)) static jbyte OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher *self, jbyte data, jint blockOff);

__attribute__((unused)) static jint OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jint OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

@implementation OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher {
  OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(self, cipher);
  return self;
}

- (id<OrgSpongycastleCryptoBlockCipher>)getUnderlyingCipher {
  return cipher_;
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$", [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) getAlgorithmName], @"/OpenPGPCFB");
}

- (jint)getBlockSize {
  return [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) getBlockSize];
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return (forEncryption_) ? OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff) : OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (void)reset {
  count_ = 0;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IV_, 0, FR_, 0, ((IOSByteArray *) nil_chk(FR_))->size_);
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) reset];
}

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  self->forEncryption_ = forEncryption;
  [self reset];
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:params];
}

- (jbyte)encryptByteWithByte:(jbyte)data
                     withInt:(jint)blockOff {
  return OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(self, data, blockOff);
}

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoBlockCipher;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "B", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 9, 2, 3, -1, -1, -1 },
    { NULL, "I", 0x2, 10, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:);
  methods[1].selector = @selector(getUnderlyingCipher);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(getBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[7].selector = @selector(encryptByteWithByte:withInt:);
  methods[8].selector = @selector(encryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[9].selector = @selector(decryptBlockWithByteArray:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "FR_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "FRE_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_", "LOrgSpongycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoBlockCipher;", "processBlock", "[BI[BI", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "encryptByte", "BI", "encryptBlock", "decryptBlock" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher = { "OpenPGPCFBBlockCipher", "org.spongycastle.crypto.modes", ptrTable, methods, fields, 7, 0x1, 10, 7, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher;
}

@end

void OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher *self, id<OrgSpongycastleCryptoBlockCipher> cipher) {
  NSObject_init(self);
  self->cipher_ = cipher;
  self->blockSize_ = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize];
  self->IV_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->FR_ = [IOSByteArray newArrayWithLength:self->blockSize_];
  self->FRE_ = [IOSByteArray newArrayWithLength:self->blockSize_];
}

OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher *new_OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_, cipher)
}

OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher *create_OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> cipher) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_, cipher)
}

jbyte OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher *self, jbyte data, jint blockOff) {
  return (jbyte) (IOSByteArray_Get(nil_chk(self->FRE_), blockOff) ^ data);
}

jint OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  if ((inOff + self->blockSize_) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + self->blockSize_) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  if (self->count_ > self->blockSize_) {
    *IOSByteArray_GetRef(nil_chk(self->FR_), self->blockSize_ - 2) = *IOSByteArray_GetRef(outArg, outOff) = OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(self, IOSByteArray_Get(inArg, inOff), self->blockSize_ - 2);
    *IOSByteArray_GetRef(nil_chk(self->FR_), self->blockSize_ - 1) = *IOSByteArray_GetRef(outArg, outOff + 1) = OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(self, IOSByteArray_Get(inArg, inOff + 1), self->blockSize_ - 1);
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:self->FR_ withInt:0 withByteArray:self->FRE_ withInt:0];
    for (jint n = 2; n < self->blockSize_; n++) {
      *IOSByteArray_GetRef(nil_chk(self->FR_), n - 2) = *IOSByteArray_GetRef(outArg, outOff + n) = OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(self, IOSByteArray_Get(inArg, inOff + n), n - 2);
    }
  }
  else if (self->count_ == 0) {
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:self->FR_ withInt:0 withByteArray:self->FRE_ withInt:0];
    for (jint n = 0; n < self->blockSize_; n++) {
      *IOSByteArray_GetRef(nil_chk(self->FR_), n) = *IOSByteArray_GetRef(outArg, outOff + n) = OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(self, IOSByteArray_Get(inArg, inOff + n), n);
    }
    self->count_ += self->blockSize_;
  }
  else if (self->count_ == self->blockSize_) {
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:self->FR_ withInt:0 withByteArray:self->FRE_ withInt:0];
    *IOSByteArray_GetRef(outArg, outOff) = OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(self, IOSByteArray_Get(inArg, inOff), 0);
    *IOSByteArray_GetRef(outArg, outOff + 1) = OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(self, IOSByteArray_Get(inArg, inOff + 1), 1);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->FR_, 2, self->FR_, 0, self->blockSize_ - 2);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(outArg, outOff, self->FR_, self->blockSize_ - 2, 2);
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:self->FR_ withInt:0 withByteArray:self->FRE_ withInt:0];
    for (jint n = 2; n < self->blockSize_; n++) {
      *IOSByteArray_GetRef(nil_chk(self->FR_), n - 2) = *IOSByteArray_GetRef(outArg, outOff + n) = OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(self, IOSByteArray_Get(inArg, inOff + n), n - 2);
    }
    self->count_ += self->blockSize_;
  }
  return self->blockSize_;
}

jint OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  if ((inOff + self->blockSize_) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + self->blockSize_) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  if (self->count_ > self->blockSize_) {
    jbyte inVal = IOSByteArray_Get(inArg, inOff);
    *IOSByteArray_GetRef(nil_chk(self->FR_), self->blockSize_ - 2) = inVal;
    *IOSByteArray_GetRef(outArg, outOff) = OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(self, inVal, self->blockSize_ - 2);
    inVal = IOSByteArray_Get(inArg, inOff + 1);
    *IOSByteArray_GetRef(nil_chk(self->FR_), self->blockSize_ - 1) = inVal;
    *IOSByteArray_GetRef(outArg, outOff + 1) = OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(self, inVal, self->blockSize_ - 1);
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:self->FR_ withInt:0 withByteArray:self->FRE_ withInt:0];
    for (jint n = 2; n < self->blockSize_; n++) {
      inVal = IOSByteArray_Get(inArg, inOff + n);
      *IOSByteArray_GetRef(nil_chk(self->FR_), n - 2) = inVal;
      *IOSByteArray_GetRef(outArg, outOff + n) = OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(self, inVal, n - 2);
    }
  }
  else if (self->count_ == 0) {
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:self->FR_ withInt:0 withByteArray:self->FRE_ withInt:0];
    for (jint n = 0; n < self->blockSize_; n++) {
      *IOSByteArray_GetRef(nil_chk(self->FR_), n) = IOSByteArray_Get(inArg, inOff + n);
      *IOSByteArray_GetRef(outArg, n) = OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(self, IOSByteArray_Get(inArg, inOff + n), n);
    }
    self->count_ += self->blockSize_;
  }
  else if (self->count_ == self->blockSize_) {
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:self->FR_ withInt:0 withByteArray:self->FRE_ withInt:0];
    jbyte inVal1 = IOSByteArray_Get(inArg, inOff);
    jbyte inVal2 = IOSByteArray_Get(inArg, inOff + 1);
    *IOSByteArray_GetRef(outArg, outOff) = OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(self, inVal1, 0);
    *IOSByteArray_GetRef(outArg, outOff + 1) = OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(self, inVal2, 1);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->FR_, 2, self->FR_, 0, self->blockSize_ - 2);
    *IOSByteArray_GetRef(nil_chk(self->FR_), self->blockSize_ - 2) = inVal1;
    *IOSByteArray_GetRef(self->FR_, self->blockSize_ - 1) = inVal2;
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->cipher_)) processBlockWithByteArray:self->FR_ withInt:0 withByteArray:self->FRE_ withInt:0];
    for (jint n = 2; n < self->blockSize_; n++) {
      jbyte inVal = IOSByteArray_Get(inArg, inOff + n);
      *IOSByteArray_GetRef(nil_chk(self->FR_), n - 2) = inVal;
      *IOSByteArray_GetRef(outArg, outOff + n) = OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher_encryptByteWithByte_withInt_(self, inVal, n - 2);
    }
    self->count_ += self->blockSize_;
  }
  return self->blockSize_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoModesOpenPGPCFBBlockCipher)
