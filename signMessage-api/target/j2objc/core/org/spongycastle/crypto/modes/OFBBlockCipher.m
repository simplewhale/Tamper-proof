//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/modes/OFBBlockCipher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/StreamBlockCipher.h"
#include "org/spongycastle/crypto/modes/OFBBlockCipher.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"

@interface OrgSpongycastleCryptoModesOFBBlockCipher () {
 @public
  jint byteCount_;
  IOSByteArray *IV_;
  IOSByteArray *ofbV_;
  IOSByteArray *ofbOutV_;
  jint blockSize_;
  id<OrgSpongycastleCryptoBlockCipher> cipher_OFBBlockCipher_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesOFBBlockCipher, IV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesOFBBlockCipher, ofbV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesOFBBlockCipher, ofbOutV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesOFBBlockCipher, cipher_OFBBlockCipher_, id<OrgSpongycastleCryptoBlockCipher>)

@implementation OrgSpongycastleCryptoModesOFBBlockCipher

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher
                                                 withInt:(jint)blockSize {
  OrgSpongycastleCryptoModesOFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withInt_(self, cipher, blockSize);
  return self;
}

- (void)init__WithBoolean:(jboolean)encrypting
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithIV class]]) {
    OrgSpongycastleCryptoParamsParametersWithIV *ivParam = (OrgSpongycastleCryptoParamsParametersWithIV *) params;
    IOSByteArray *iv = [((OrgSpongycastleCryptoParamsParametersWithIV *) nil_chk(ivParam)) getIV];
    if (((IOSByteArray *) nil_chk(iv))->size_ < ((IOSByteArray *) nil_chk(IV_))->size_) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, IV_, IV_->size_ - iv->size_, iv->size_);
      for (jint i = 0; i < ((IOSByteArray *) nil_chk(IV_))->size_ - iv->size_; i++) {
        *IOSByteArray_GetRef(IV_, i) = 0;
      }
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, IV_, 0, IV_->size_);
    }
    [self reset];
    if ([ivParam getParameters] != nil) {
      [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_OFBBlockCipher_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:[ivParam getParameters]];
    }
  }
  else {
    [self reset];
    if (params != nil) {
      [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_OFBBlockCipher_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:params];
    }
  }
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$I", [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_OFBBlockCipher_)) getAlgorithmName], @"/OFB", (blockSize_ * 8));
}

- (jint)getBlockSize {
  return blockSize_;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  [self processBytesWithByteArray:inArg withInt:inOff withInt:blockSize_ withByteArray:outArg withInt:outOff];
  return blockSize_;
}

- (void)reset {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IV_, 0, ofbV_, 0, ((IOSByteArray *) nil_chk(IV_))->size_);
  byteCount_ = 0;
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_OFBBlockCipher_)) reset];
}

- (jbyte)calculateByteWithByte:(jbyte)inArg {
  if (byteCount_ == 0) {
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_OFBBlockCipher_)) processBlockWithByteArray:ofbV_ withInt:0 withByteArray:ofbOutV_ withInt:0];
  }
  jbyte rv = (jbyte) (IOSByteArray_Get(nil_chk(ofbOutV_), byteCount_++) ^ inArg);
  if (byteCount_ == blockSize_) {
    byteCount_ = 0;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ofbV_, blockSize_, ofbV_, 0, ((IOSByteArray *) nil_chk(ofbV_))->size_ - blockSize_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ofbOutV_, 0, ofbV_, ((IOSByteArray *) nil_chk(ofbV_))->size_ - blockSize_, blockSize_);
  }
  return rv;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x4, 7, 8, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:withInt:);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(getBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(calculateByteWithByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "byteCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "IV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ofbV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ofbOutV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cipher_OFBBlockCipher_", "LOrgSpongycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x12, 9, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoBlockCipher;I", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "processBlock", "[BI[BI", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "calculateByte", "B", "cipher" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoModesOFBBlockCipher = { "OFBBlockCipher", "org.spongycastle.crypto.modes", ptrTable, methods, fields, 7, 0x1, 7, 6, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoModesOFBBlockCipher;
}

@end

void OrgSpongycastleCryptoModesOFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withInt_(OrgSpongycastleCryptoModesOFBBlockCipher *self, id<OrgSpongycastleCryptoBlockCipher> cipher, jint blockSize) {
  OrgSpongycastleCryptoStreamBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(self, cipher);
  self->cipher_OFBBlockCipher_ = cipher;
  self->blockSize_ = blockSize / 8;
  self->IV_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize]];
  self->ofbV_ = [IOSByteArray newArrayWithLength:[cipher getBlockSize]];
  self->ofbOutV_ = [IOSByteArray newArrayWithLength:[cipher getBlockSize]];
}

OrgSpongycastleCryptoModesOFBBlockCipher *new_OrgSpongycastleCryptoModesOFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withInt_(id<OrgSpongycastleCryptoBlockCipher> cipher, jint blockSize) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoModesOFBBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_withInt_, cipher, blockSize)
}

OrgSpongycastleCryptoModesOFBBlockCipher *create_OrgSpongycastleCryptoModesOFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withInt_(id<OrgSpongycastleCryptoBlockCipher> cipher, jint blockSize) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoModesOFBBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_withInt_, cipher, blockSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoModesOFBBlockCipher)
