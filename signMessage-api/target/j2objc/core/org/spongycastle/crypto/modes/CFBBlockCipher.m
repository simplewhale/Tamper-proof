//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/modes/CFBBlockCipher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/StreamBlockCipher.h"
#include "org/spongycastle/crypto/modes/CFBBlockCipher.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleCryptoModesCFBBlockCipher () {
 @public
  IOSByteArray *IV_;
  IOSByteArray *cfbV_;
  IOSByteArray *cfbOutV_;
  IOSByteArray *inBuf_;
  jint blockSize_;
  id<OrgSpongycastleCryptoBlockCipher> cipher_CFBBlockCipher_;
  jboolean encrypting_;
  jint byteCount_;
}

- (jbyte)encryptByteWithByte:(jbyte)inArg;

- (jbyte)decryptByteWithByte:(jbyte)inArg;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesCFBBlockCipher, IV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesCFBBlockCipher, cfbV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesCFBBlockCipher, cfbOutV_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesCFBBlockCipher, inBuf_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoModesCFBBlockCipher, cipher_CFBBlockCipher_, id<OrgSpongycastleCryptoBlockCipher>)

__attribute__((unused)) static jbyte OrgSpongycastleCryptoModesCFBBlockCipher_encryptByteWithByte_(OrgSpongycastleCryptoModesCFBBlockCipher *self, jbyte inArg);

__attribute__((unused)) static jbyte OrgSpongycastleCryptoModesCFBBlockCipher_decryptByteWithByte_(OrgSpongycastleCryptoModesCFBBlockCipher *self, jbyte inArg);

@implementation OrgSpongycastleCryptoModesCFBBlockCipher

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher
                                                 withInt:(jint)bitBlockSize {
  OrgSpongycastleCryptoModesCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withInt_(self, cipher, bitBlockSize);
  return self;
}

- (void)init__WithBoolean:(jboolean)encrypting
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  self->encrypting_ = encrypting;
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithIV class]]) {
    OrgSpongycastleCryptoParamsParametersWithIV *ivParam = (OrgSpongycastleCryptoParamsParametersWithIV *) params;
    IOSByteArray *iv = [((OrgSpongycastleCryptoParamsParametersWithIV *) nil_chk(ivParam)) getIV];
    if (((IOSByteArray *) nil_chk(iv))->size_ < ((IOSByteArray *) nil_chk(IV_))->size_) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, IV_, IV_->size_ - iv->size_, iv->size_);
      for (jint i = 0; i < ((IOSByteArray *) nil_chk(IV_))->size_ - iv->size_; i++) {
        *IOSByteArray_GetRef(IV_, i) = 0;
      }
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv, 0, IV_, 0, IV_->size_);
    }
    [self reset];
    if ([ivParam getParameters] != nil) {
      [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_CFBBlockCipher_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:[ivParam getParameters]];
    }
  }
  else {
    [self reset];
    if (params != nil) {
      [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_CFBBlockCipher_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:params];
    }
  }
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$I", [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_CFBBlockCipher_)) getAlgorithmName], @"/CFB", (blockSize_ * 8));
}

- (jbyte)calculateByteWithByte:(jbyte)inArg {
  return (encrypting_) ? OrgSpongycastleCryptoModesCFBBlockCipher_encryptByteWithByte_(self, inArg) : OrgSpongycastleCryptoModesCFBBlockCipher_decryptByteWithByte_(self, inArg);
}

- (jbyte)encryptByteWithByte:(jbyte)inArg {
  return OrgSpongycastleCryptoModesCFBBlockCipher_encryptByteWithByte_(self, inArg);
}

- (jbyte)decryptByteWithByte:(jbyte)inArg {
  return OrgSpongycastleCryptoModesCFBBlockCipher_decryptByteWithByte_(self, inArg);
}

- (jint)getBlockSize {
  return blockSize_;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  [self processBytesWithByteArray:inArg withInt:inOff withInt:blockSize_ withByteArray:outArg withInt:outOff];
  return blockSize_;
}

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  [self processBytesWithByteArray:inArg withInt:inOff withInt:blockSize_ withByteArray:outArg withInt:outOff];
  return blockSize_;
}

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  [self processBytesWithByteArray:inArg withInt:inOff withInt:blockSize_ withByteArray:outArg withInt:outOff];
  return blockSize_;
}

- (IOSByteArray *)getCurrentIV {
  return OrgSpongycastleUtilArrays_cloneWithByteArray_(cfbV_);
}

- (void)reset {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IV_, 0, cfbV_, 0, ((IOSByteArray *) nil_chk(IV_))->size_);
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(inBuf_, (jbyte) 0);
  byteCount_ = 0;
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher_CFBBlockCipher_)) reset];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x4, 4, 5, 6, -1, -1, -1 },
    { NULL, "B", 0x2, 7, 5, -1, -1, -1, -1 },
    { NULL, "B", 0x2, 8, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, 6, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 10, 6, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 10, 6, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:withInt:);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(calculateByteWithByte:);
  methods[4].selector = @selector(encryptByteWithByte:);
  methods[5].selector = @selector(decryptByteWithByte:);
  methods[6].selector = @selector(getBlockSize);
  methods[7].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[8].selector = @selector(encryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[9].selector = @selector(decryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[10].selector = @selector(getCurrentIV);
  methods[11].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cfbV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cfbOutV_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inBuf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cipher_CFBBlockCipher_", "LOrgSpongycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x2, 13, -1, -1, -1 },
    { "encrypting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "byteCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoBlockCipher;I", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "calculateByte", "B", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalStateException;", "encryptByte", "decryptByte", "processBlock", "[BI[BI", "encryptBlock", "decryptBlock", "cipher" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoModesCFBBlockCipher = { "CFBBlockCipher", "org.spongycastle.crypto.modes", ptrTable, methods, fields, 7, 0x1, 12, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoModesCFBBlockCipher;
}

@end

void OrgSpongycastleCryptoModesCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withInt_(OrgSpongycastleCryptoModesCFBBlockCipher *self, id<OrgSpongycastleCryptoBlockCipher> cipher, jint bitBlockSize) {
  OrgSpongycastleCryptoStreamBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(self, cipher);
  self->cipher_CFBBlockCipher_ = nil;
  self->cipher_CFBBlockCipher_ = cipher;
  self->blockSize_ = bitBlockSize / 8;
  self->IV_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher)) getBlockSize]];
  self->cfbV_ = [IOSByteArray newArrayWithLength:[cipher getBlockSize]];
  self->cfbOutV_ = [IOSByteArray newArrayWithLength:[cipher getBlockSize]];
  self->inBuf_ = [IOSByteArray newArrayWithLength:self->blockSize_];
}

OrgSpongycastleCryptoModesCFBBlockCipher *new_OrgSpongycastleCryptoModesCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withInt_(id<OrgSpongycastleCryptoBlockCipher> cipher, jint bitBlockSize) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoModesCFBBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_withInt_, cipher, bitBlockSize)
}

OrgSpongycastleCryptoModesCFBBlockCipher *create_OrgSpongycastleCryptoModesCFBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withInt_(id<OrgSpongycastleCryptoBlockCipher> cipher, jint bitBlockSize) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoModesCFBBlockCipher, initWithOrgSpongycastleCryptoBlockCipher_withInt_, cipher, bitBlockSize)
}

jbyte OrgSpongycastleCryptoModesCFBBlockCipher_encryptByteWithByte_(OrgSpongycastleCryptoModesCFBBlockCipher *self, jbyte inArg) {
  if (self->byteCount_ == 0) {
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->cipher_CFBBlockCipher_)) processBlockWithByteArray:self->cfbV_ withInt:0 withByteArray:self->cfbOutV_ withInt:0];
  }
  jbyte rv = (jbyte) (IOSByteArray_Get(nil_chk(self->cfbOutV_), self->byteCount_) ^ inArg);
  *IOSByteArray_GetRef(nil_chk(self->inBuf_), self->byteCount_++) = rv;
  if (self->byteCount_ == self->blockSize_) {
    self->byteCount_ = 0;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->cfbV_, self->blockSize_, self->cfbV_, 0, ((IOSByteArray *) nil_chk(self->cfbV_))->size_ - self->blockSize_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->inBuf_, 0, self->cfbV_, ((IOSByteArray *) nil_chk(self->cfbV_))->size_ - self->blockSize_, self->blockSize_);
  }
  return rv;
}

jbyte OrgSpongycastleCryptoModesCFBBlockCipher_decryptByteWithByte_(OrgSpongycastleCryptoModesCFBBlockCipher *self, jbyte inArg) {
  if (self->byteCount_ == 0) {
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->cipher_CFBBlockCipher_)) processBlockWithByteArray:self->cfbV_ withInt:0 withByteArray:self->cfbOutV_ withInt:0];
  }
  *IOSByteArray_GetRef(nil_chk(self->inBuf_), self->byteCount_) = inArg;
  jbyte rv = (jbyte) (IOSByteArray_Get(nil_chk(self->cfbOutV_), self->byteCount_++) ^ inArg);
  if (self->byteCount_ == self->blockSize_) {
    self->byteCount_ = 0;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->cfbV_, self->blockSize_, self->cfbV_, 0, ((IOSByteArray *) nil_chk(self->cfbV_))->size_ - self->blockSize_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->inBuf_, 0, self->cfbV_, ((IOSByteArray *) nil_chk(self->cfbV_))->size_ - self->blockSize_, self->blockSize_);
  }
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoModesCFBBlockCipher)
