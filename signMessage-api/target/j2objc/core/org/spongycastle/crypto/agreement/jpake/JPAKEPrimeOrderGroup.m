//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/agreement/jpake/JPAKEPrimeOrderGroup.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/agreement/jpake/JPAKEPrimeOrderGroup.h"
#include "org/spongycastle/crypto/agreement/jpake/JPAKEUtil.h"

@interface OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup () {
 @public
  JavaMathBigInteger *p_;
  JavaMathBigInteger *q_;
  JavaMathBigInteger *g_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup, p_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup, q_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup, g_, JavaMathBigInteger *)

@implementation OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)p
                    withJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)g {
  OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(self, p, q, g);
  return self;
}

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)p
                    withJavaMathBigInteger:(JavaMathBigInteger *)q
                    withJavaMathBigInteger:(JavaMathBigInteger *)g
                               withBoolean:(jboolean)skipChecks {
  OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(self, p, q, g, skipChecks);
  return self;
}

- (JavaMathBigInteger *)getP {
  return p_;
}

- (JavaMathBigInteger *)getQ {
  return q_;
}

- (JavaMathBigInteger *)getG {
  return g_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[1].selector = @selector(initWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withBoolean:);
  methods[2].selector = @selector(getP);
  methods[3].selector = @selector(getQ);
  methods[4].selector = @selector(getG);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "p_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "q_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "g_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;Z" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup = { "JPAKEPrimeOrderGroup", "org.spongycastle.crypto.agreement.jpake", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup;
}

@end

void OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup *self, JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(self, p, q, g, false);
}

OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup *new_OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, p, q, g)
}

OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup *create_OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_, p, q, g)
}

void OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup *self, JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, jboolean skipChecks) {
  NSObject_init(self);
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateNotNullWithId_withNSString_(p, @"p");
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateNotNullWithId_withNSString_(q, @"q");
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateNotNullWithId_withNSString_(g, @"g");
  if (!skipChecks) {
    if (![((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(p)) subtractWithJavaMathBigInteger:JreLoadStatic(OrgSpongycastleCryptoAgreementJpakeJPAKEUtil, ONE)])) modWithJavaMathBigInteger:q])) isEqual:JreLoadStatic(OrgSpongycastleCryptoAgreementJpakeJPAKEUtil, ZERO)]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"p-1 must be evenly divisible by q");
    }
    if ([((JavaMathBigInteger *) nil_chk(g)) compareToWithId:JavaMathBigInteger_valueOfWithLong_(2)] == -1 || [g compareToWithId:[p subtractWithJavaMathBigInteger:JreLoadStatic(OrgSpongycastleCryptoAgreementJpakeJPAKEUtil, ONE)]] == 1) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"g must be in [2, p-1]");
    }
    if (![((JavaMathBigInteger *) nil_chk([g modPowWithJavaMathBigInteger:q withJavaMathBigInteger:p])) isEqual:JreLoadStatic(OrgSpongycastleCryptoAgreementJpakeJPAKEUtil, ONE)]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"g^q mod p must equal 1");
    }
    if (![p isProbablePrimeWithInt:20]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"p must be prime");
    }
    if (![((JavaMathBigInteger *) nil_chk(q)) isProbablePrimeWithInt:20]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"q must be prime");
    }
  }
  self->p_ = p;
  self->q_ = q;
  self->g_ = g;
}

OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup *new_OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, jboolean skipChecks) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_, p, q, g, skipChecks)
}

OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup *create_OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, jboolean skipChecks) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup, initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withBoolean_, p, q, g, skipChecks)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoAgreementJpakeJPAKEPrimeOrderGroup)
