//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/agreement/SM2KeyExchange.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/agreement/SM2KeyExchange.h"
#include "org/spongycastle/crypto/digests/SM3Digest.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/ParametersWithID.h"
#include "org/spongycastle/crypto/params/SM2KeyExchangePrivateParameters.h"
#include "org/spongycastle/crypto/params/SM2KeyExchangePublicParameters.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECFieldElement.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/BigIntegers.h"

@interface OrgSpongycastleCryptoAgreementSM2KeyExchange () {
 @public
  id<OrgSpongycastleCryptoDigest> digest_;
  IOSByteArray *userID_;
  OrgSpongycastleCryptoParamsECPrivateKeyParameters *staticKey_;
  OrgSpongycastleMathEcECPoint *staticPubPoint_;
  OrgSpongycastleMathEcECPoint *ephemeralPubPoint_;
  OrgSpongycastleCryptoParamsECDomainParameters *ecParams_;
  jint curveLength_;
  jint w_;
  OrgSpongycastleCryptoParamsECPrivateKeyParameters *ephemeralKey_;
  jboolean initiator_;
}

- (OrgSpongycastleMathEcECPoint *)calculateUWithOrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters:(OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters *)otherPub;

- (IOSByteArray *)kdfWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)u
                                        withByteArray:(IOSByteArray *)za
                                        withByteArray:(IOSByteArray *)zb
                                              withInt:(jint)klen;

- (JavaMathBigInteger *)reduceWithJavaMathBigInteger:(JavaMathBigInteger *)x;

- (IOSByteArray *)S1WithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                   withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)u
                                      withByteArray:(IOSByteArray *)inner;

- (IOSByteArray *)calculateInnerHashWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                   withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)u
                                                      withByteArray:(IOSByteArray *)za
                                                      withByteArray:(IOSByteArray *)zb
                                   withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p1
                                   withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p2;

- (IOSByteArray *)S2WithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                   withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)u
                                      withByteArray:(IOSByteArray *)inner;

- (IOSByteArray *)getZWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                        withByteArray:(IOSByteArray *)userID
                     withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)pubPoint;

- (void)addUserIDWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                   withByteArray:(IOSByteArray *)userID;

- (void)addFieldElementWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
               withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)v;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementSM2KeyExchange, digest_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementSM2KeyExchange, userID_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementSM2KeyExchange, staticKey_, OrgSpongycastleCryptoParamsECPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementSM2KeyExchange, staticPubPoint_, OrgSpongycastleMathEcECPoint *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementSM2KeyExchange, ephemeralPubPoint_, OrgSpongycastleMathEcECPoint *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementSM2KeyExchange, ecParams_, OrgSpongycastleCryptoParamsECDomainParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementSM2KeyExchange, ephemeralKey_, OrgSpongycastleCryptoParamsECPrivateKeyParameters *)

__attribute__((unused)) static OrgSpongycastleMathEcECPoint *OrgSpongycastleCryptoAgreementSM2KeyExchange_calculateUWithOrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters *otherPub);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoAgreementSM2KeyExchange_kdfWithOrgSpongycastleMathEcECPoint_withByteArray_withByteArray_withInt_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, OrgSpongycastleMathEcECPoint *u, IOSByteArray *za, IOSByteArray *zb, jint klen);

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleCryptoAgreementSM2KeyExchange_reduceWithJavaMathBigInteger_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, JavaMathBigInteger *x);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoAgreementSM2KeyExchange_S1WithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, id<OrgSpongycastleCryptoDigest> digest, OrgSpongycastleMathEcECPoint *u, IOSByteArray *inner);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoAgreementSM2KeyExchange_calculateInnerHashWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_withByteArray_withOrgSpongycastleMathEcECPoint_withOrgSpongycastleMathEcECPoint_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, id<OrgSpongycastleCryptoDigest> digest, OrgSpongycastleMathEcECPoint *u, IOSByteArray *za, IOSByteArray *zb, OrgSpongycastleMathEcECPoint *p1, OrgSpongycastleMathEcECPoint *p2);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoAgreementSM2KeyExchange_S2WithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, id<OrgSpongycastleCryptoDigest> digest, OrgSpongycastleMathEcECPoint *u, IOSByteArray *inner);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoAgreementSM2KeyExchange_getZWithOrgSpongycastleCryptoDigest_withByteArray_withOrgSpongycastleMathEcECPoint_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, id<OrgSpongycastleCryptoDigest> digest, IOSByteArray *userID, OrgSpongycastleMathEcECPoint *pubPoint);

__attribute__((unused)) static void OrgSpongycastleCryptoAgreementSM2KeyExchange_addUserIDWithOrgSpongycastleCryptoDigest_withByteArray_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, id<OrgSpongycastleCryptoDigest> digest, IOSByteArray *userID);

__attribute__((unused)) static void OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, id<OrgSpongycastleCryptoDigest> digest, OrgSpongycastleMathEcECFieldElement *v);

@implementation OrgSpongycastleCryptoAgreementSM2KeyExchange

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoAgreementSM2KeyExchange_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  OrgSpongycastleCryptoAgreementSM2KeyExchange_initWithOrgSpongycastleCryptoDigest_(self, digest);
  return self;
}

- (void)init__WithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)privParam {
  OrgSpongycastleCryptoParamsSM2KeyExchangePrivateParameters *baseParam;
  if ([privParam isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithID class]]) {
    baseParam = (OrgSpongycastleCryptoParamsSM2KeyExchangePrivateParameters *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithID *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithID *) privParam))) getParameters], [OrgSpongycastleCryptoParamsSM2KeyExchangePrivateParameters class]);
    userID_ = [((OrgSpongycastleCryptoParamsParametersWithID *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithID *) privParam))) getID];
  }
  else {
    baseParam = (OrgSpongycastleCryptoParamsSM2KeyExchangePrivateParameters *) cast_chk(privParam, [OrgSpongycastleCryptoParamsSM2KeyExchangePrivateParameters class]);
    userID_ = [IOSByteArray newArrayWithLength:0];
  }
  initiator_ = [((OrgSpongycastleCryptoParamsSM2KeyExchangePrivateParameters *) nil_chk(baseParam)) isInitiator];
  staticKey_ = [baseParam getStaticPrivateKey];
  ephemeralKey_ = [baseParam getEphemeralPrivateKey];
  ecParams_ = [((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(staticKey_)) getParameters];
  staticPubPoint_ = [baseParam getStaticPublicPoint];
  ephemeralPubPoint_ = [baseParam getEphemeralPublicPoint];
  curveLength_ = ([((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getCurve])) getFieldSize] + 7) / 8;
  w_ = [((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getCurve])) getFieldSize] / 2 - 1;
}

- (jint)getFieldSize {
  return ([((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk([((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(staticKey_)) getParameters])) getCurve])) getFieldSize] + 7) / 8;
}

- (IOSByteArray *)calculateKeyWithInt:(jint)kLen
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)pubParam {
  OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters *otherPub;
  IOSByteArray *otherUserID;
  if ([pubParam isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithID class]]) {
    otherPub = (OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithID *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithID *) pubParam))) getParameters], [OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters class]);
    otherUserID = [((OrgSpongycastleCryptoParamsParametersWithID *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithID *) pubParam))) getID];
  }
  else {
    otherPub = (OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters *) cast_chk(pubParam, [OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters class]);
    otherUserID = [IOSByteArray newArrayWithLength:0];
  }
  IOSByteArray *za = OrgSpongycastleCryptoAgreementSM2KeyExchange_getZWithOrgSpongycastleCryptoDigest_withByteArray_withOrgSpongycastleMathEcECPoint_(self, digest_, userID_, staticPubPoint_);
  IOSByteArray *zb = OrgSpongycastleCryptoAgreementSM2KeyExchange_getZWithOrgSpongycastleCryptoDigest_withByteArray_withOrgSpongycastleMathEcECPoint_(self, digest_, otherUserID, [((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk([((OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters *) nil_chk(otherPub)) getStaticPublicKey])) getQ]);
  OrgSpongycastleMathEcECPoint *U = OrgSpongycastleCryptoAgreementSM2KeyExchange_calculateUWithOrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters_(self, otherPub);
  IOSByteArray *rv;
  if (initiator_) {
    rv = OrgSpongycastleCryptoAgreementSM2KeyExchange_kdfWithOrgSpongycastleMathEcECPoint_withByteArray_withByteArray_withInt_(self, U, za, zb, kLen);
  }
  else {
    rv = OrgSpongycastleCryptoAgreementSM2KeyExchange_kdfWithOrgSpongycastleMathEcECPoint_withByteArray_withByteArray_withInt_(self, U, zb, za, kLen);
  }
  return rv;
}

- (IOSObjectArray *)calculateKeyWithConfirmationWithInt:(jint)kLen
                                          withByteArray:(IOSByteArray *)confirmationTag
              withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)pubParam {
  OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters *otherPub;
  IOSByteArray *otherUserID;
  if ([pubParam isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithID class]]) {
    otherPub = (OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithID *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithID *) pubParam))) getParameters], [OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters class]);
    otherUserID = [((OrgSpongycastleCryptoParamsParametersWithID *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithID *) pubParam))) getID];
  }
  else {
    otherPub = (OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters *) cast_chk(pubParam, [OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters class]);
    otherUserID = [IOSByteArray newArrayWithLength:0];
  }
  if (initiator_ && confirmationTag == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"if initiating, confirmationTag must be set");
  }
  IOSByteArray *za = OrgSpongycastleCryptoAgreementSM2KeyExchange_getZWithOrgSpongycastleCryptoDigest_withByteArray_withOrgSpongycastleMathEcECPoint_(self, digest_, userID_, staticPubPoint_);
  IOSByteArray *zb = OrgSpongycastleCryptoAgreementSM2KeyExchange_getZWithOrgSpongycastleCryptoDigest_withByteArray_withOrgSpongycastleMathEcECPoint_(self, digest_, otherUserID, [((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk([((OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters *) nil_chk(otherPub)) getStaticPublicKey])) getQ]);
  OrgSpongycastleMathEcECPoint *U = OrgSpongycastleCryptoAgreementSM2KeyExchange_calculateUWithOrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters_(self, otherPub);
  IOSByteArray *rv;
  if (initiator_) {
    rv = OrgSpongycastleCryptoAgreementSM2KeyExchange_kdfWithOrgSpongycastleMathEcECPoint_withByteArray_withByteArray_withInt_(self, U, za, zb, kLen);
    IOSByteArray *inner = OrgSpongycastleCryptoAgreementSM2KeyExchange_calculateInnerHashWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_withByteArray_withOrgSpongycastleMathEcECPoint_withOrgSpongycastleMathEcECPoint_(self, digest_, U, za, zb, ephemeralPubPoint_, [((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk([otherPub getEphemeralPublicKey])) getQ]);
    IOSByteArray *s1 = OrgSpongycastleCryptoAgreementSM2KeyExchange_S1WithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_(self, digest_, U, inner);
    if (!OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(s1, confirmationTag)) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"confirmation tag mismatch");
    }
    return [IOSObjectArray newArrayWithObjects:(id[]){ rv, OrgSpongycastleCryptoAgreementSM2KeyExchange_S2WithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_(self, digest_, U, inner) } count:2 type:IOSClass_byteArray(1)];
  }
  else {
    rv = OrgSpongycastleCryptoAgreementSM2KeyExchange_kdfWithOrgSpongycastleMathEcECPoint_withByteArray_withByteArray_withInt_(self, U, zb, za, kLen);
    IOSByteArray *inner = OrgSpongycastleCryptoAgreementSM2KeyExchange_calculateInnerHashWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_withByteArray_withOrgSpongycastleMathEcECPoint_withOrgSpongycastleMathEcECPoint_(self, digest_, U, zb, za, [((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk([otherPub getEphemeralPublicKey])) getQ], ephemeralPubPoint_);
    return [IOSObjectArray newArrayWithObjects:(id[]){ rv, OrgSpongycastleCryptoAgreementSM2KeyExchange_S1WithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_(self, digest_, U, inner), OrgSpongycastleCryptoAgreementSM2KeyExchange_S2WithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_(self, digest_, U, inner) } count:3 type:IOSClass_byteArray(1)];
  }
}

- (OrgSpongycastleMathEcECPoint *)calculateUWithOrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters:(OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters *)otherPub {
  return OrgSpongycastleCryptoAgreementSM2KeyExchange_calculateUWithOrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters_(self, otherPub);
}

- (IOSByteArray *)kdfWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)u
                                        withByteArray:(IOSByteArray *)za
                                        withByteArray:(IOSByteArray *)zb
                                              withInt:(jint)klen {
  return OrgSpongycastleCryptoAgreementSM2KeyExchange_kdfWithOrgSpongycastleMathEcECPoint_withByteArray_withByteArray_withInt_(self, u, za, zb, klen);
}

- (JavaMathBigInteger *)reduceWithJavaMathBigInteger:(JavaMathBigInteger *)x {
  return OrgSpongycastleCryptoAgreementSM2KeyExchange_reduceWithJavaMathBigInteger_(self, x);
}

- (IOSByteArray *)S1WithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                   withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)u
                                      withByteArray:(IOSByteArray *)inner {
  return OrgSpongycastleCryptoAgreementSM2KeyExchange_S1WithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_(self, digest, u, inner);
}

- (IOSByteArray *)calculateInnerHashWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                   withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)u
                                                      withByteArray:(IOSByteArray *)za
                                                      withByteArray:(IOSByteArray *)zb
                                   withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p1
                                   withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p2 {
  return OrgSpongycastleCryptoAgreementSM2KeyExchange_calculateInnerHashWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_withByteArray_withOrgSpongycastleMathEcECPoint_withOrgSpongycastleMathEcECPoint_(self, digest, u, za, zb, p1, p2);
}

- (IOSByteArray *)S2WithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                   withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)u
                                      withByteArray:(IOSByteArray *)inner {
  return OrgSpongycastleCryptoAgreementSM2KeyExchange_S2WithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_(self, digest, u, inner);
}

- (IOSByteArray *)getZWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                        withByteArray:(IOSByteArray *)userID
                     withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)pubPoint {
  return OrgSpongycastleCryptoAgreementSM2KeyExchange_getZWithOrgSpongycastleCryptoDigest_withByteArray_withOrgSpongycastleMathEcECPoint_(self, digest, userID, pubPoint);
}

- (void)addUserIDWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                   withByteArray:(IOSByteArray *)userID {
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addUserIDWithOrgSpongycastleCryptoDigest_withByteArray_(self, digest, userID);
}

- (void)addFieldElementWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
               withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)v {
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "[[B", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 17, 14, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoDigest:);
  methods[2].selector = @selector(init__WithOrgSpongycastleCryptoCipherParameters:);
  methods[3].selector = @selector(getFieldSize);
  methods[4].selector = @selector(calculateKeyWithInt:withOrgSpongycastleCryptoCipherParameters:);
  methods[5].selector = @selector(calculateKeyWithConfirmationWithInt:withByteArray:withOrgSpongycastleCryptoCipherParameters:);
  methods[6].selector = @selector(calculateUWithOrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters:);
  methods[7].selector = @selector(kdfWithOrgSpongycastleMathEcECPoint:withByteArray:withByteArray:withInt:);
  methods[8].selector = @selector(reduceWithJavaMathBigInteger:);
  methods[9].selector = @selector(S1WithOrgSpongycastleCryptoDigest:withOrgSpongycastleMathEcECPoint:withByteArray:);
  methods[10].selector = @selector(calculateInnerHashWithOrgSpongycastleCryptoDigest:withOrgSpongycastleMathEcECPoint:withByteArray:withByteArray:withOrgSpongycastleMathEcECPoint:withOrgSpongycastleMathEcECPoint:);
  methods[11].selector = @selector(S2WithOrgSpongycastleCryptoDigest:withOrgSpongycastleMathEcECPoint:withByteArray:);
  methods[12].selector = @selector(getZWithOrgSpongycastleCryptoDigest:withByteArray:withOrgSpongycastleMathEcECPoint:);
  methods[13].selector = @selector(addUserIDWithOrgSpongycastleCryptoDigest:withByteArray:);
  methods[14].selector = @selector(addFieldElementWithOrgSpongycastleCryptoDigest:withOrgSpongycastleMathEcECFieldElement:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "userID_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "staticKey_", "LOrgSpongycastleCryptoParamsECPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "staticPubPoint_", "LOrgSpongycastleMathEcECPoint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ephemeralPubPoint_", "LOrgSpongycastleMathEcECPoint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ecParams_", "LOrgSpongycastleCryptoParamsECDomainParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "curveLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "w_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ephemeralKey_", "LOrgSpongycastleCryptoParamsECPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initiator_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDigest;", "init", "LOrgSpongycastleCryptoCipherParameters;", "calculateKey", "ILOrgSpongycastleCryptoCipherParameters;", "calculateKeyWithConfirmation", "I[BLOrgSpongycastleCryptoCipherParameters;", "calculateU", "LOrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters;", "kdf", "LOrgSpongycastleMathEcECPoint;[B[BI", "reduce", "LJavaMathBigInteger;", "S1", "LOrgSpongycastleCryptoDigest;LOrgSpongycastleMathEcECPoint;[B", "calculateInnerHash", "LOrgSpongycastleCryptoDigest;LOrgSpongycastleMathEcECPoint;[B[BLOrgSpongycastleMathEcECPoint;LOrgSpongycastleMathEcECPoint;", "S2", "getZ", "LOrgSpongycastleCryptoDigest;[BLOrgSpongycastleMathEcECPoint;", "addUserID", "LOrgSpongycastleCryptoDigest;[B", "addFieldElement", "LOrgSpongycastleCryptoDigest;LOrgSpongycastleMathEcECFieldElement;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoAgreementSM2KeyExchange = { "SM2KeyExchange", "org.spongycastle.crypto.agreement", ptrTable, methods, fields, 7, 0x1, 15, 10, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoAgreementSM2KeyExchange;
}

@end

void OrgSpongycastleCryptoAgreementSM2KeyExchange_init(OrgSpongycastleCryptoAgreementSM2KeyExchange *self) {
  OrgSpongycastleCryptoAgreementSM2KeyExchange_initWithOrgSpongycastleCryptoDigest_(self, new_OrgSpongycastleCryptoDigestsSM3Digest_init());
}

OrgSpongycastleCryptoAgreementSM2KeyExchange *new_OrgSpongycastleCryptoAgreementSM2KeyExchange_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoAgreementSM2KeyExchange, init)
}

OrgSpongycastleCryptoAgreementSM2KeyExchange *create_OrgSpongycastleCryptoAgreementSM2KeyExchange_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoAgreementSM2KeyExchange, init)
}

void OrgSpongycastleCryptoAgreementSM2KeyExchange_initWithOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, id<OrgSpongycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->digest_ = digest;
}

OrgSpongycastleCryptoAgreementSM2KeyExchange *new_OrgSpongycastleCryptoAgreementSM2KeyExchange_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoAgreementSM2KeyExchange, initWithOrgSpongycastleCryptoDigest_, digest)
}

OrgSpongycastleCryptoAgreementSM2KeyExchange *create_OrgSpongycastleCryptoAgreementSM2KeyExchange_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoAgreementSM2KeyExchange, initWithOrgSpongycastleCryptoDigest_, digest)
}

OrgSpongycastleMathEcECPoint *OrgSpongycastleCryptoAgreementSM2KeyExchange_calculateUWithOrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters *otherPub) {
  JavaMathBigInteger *x1 = OrgSpongycastleCryptoAgreementSM2KeyExchange_reduceWithJavaMathBigInteger_(self, [((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(self->ephemeralPubPoint_)) getAffineXCoord])) toBigInteger]);
  JavaMathBigInteger *tA = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(self->staticKey_)) getD])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(x1)) multiplyWithJavaMathBigInteger:[((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(self->ephemeralKey_)) getD]]])) modWithJavaMathBigInteger:[((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getN]];
  JavaMathBigInteger *x2 = OrgSpongycastleCryptoAgreementSM2KeyExchange_reduceWithJavaMathBigInteger_(self, [((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk([((OrgSpongycastleCryptoParamsSM2KeyExchangePublicParameters *) nil_chk(otherPub)) getEphemeralPublicKey])) getQ])) getAffineXCoord])) toBigInteger]);
  OrgSpongycastleMathEcECPoint *B0 = [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk([otherPub getEphemeralPublicKey])) getQ])) multiplyWithJavaMathBigInteger:x2])) normalize];
  OrgSpongycastleMathEcECPoint *B1 = [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk([otherPub getStaticPublicKey])) getQ])) addWithOrgSpongycastleMathEcECPoint:B0])) normalize];
  return [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(B1)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getH])) multiplyWithJavaMathBigInteger:tA]])) normalize];
}

IOSByteArray *OrgSpongycastleCryptoAgreementSM2KeyExchange_kdfWithOrgSpongycastleMathEcECPoint_withByteArray_withByteArray_withInt_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, OrgSpongycastleMathEcECPoint *u, IOSByteArray *za, IOSByteArray *zb, jint klen) {
  jint ct = 1;
  jint v = [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->digest_)) getDigestSize] * 8;
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:[self->digest_ getDigestSize]];
  IOSByteArray *rv = [IOSByteArray newArrayWithLength:(klen + 7) / 8];
  jint off = 0;
  for (jint i = 1; i <= ((klen + v - 1) / v); i++) {
    OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, self->digest_, [((OrgSpongycastleMathEcECPoint *) nil_chk(u)) getAffineXCoord]);
    OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, self->digest_, [u getAffineYCoord]);
    [self->digest_ updateWithByteArray:za withInt:0 withInt:((IOSByteArray *) nil_chk(za))->size_];
    [self->digest_ updateWithByteArray:zb withInt:0 withInt:((IOSByteArray *) nil_chk(zb))->size_];
    [self->digest_ updateWithByte:(jbyte) (JreRShift32(ct, 24))];
    [self->digest_ updateWithByte:(jbyte) (JreRShift32(ct, 16))];
    [self->digest_ updateWithByte:(jbyte) (JreRShift32(ct, 8))];
    [self->digest_ updateWithByte:(jbyte) ct];
    [self->digest_ doFinalWithByteArray:buf withInt:0];
    if (off + buf->size_ < rv->size_) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, 0, rv, off, buf->size_);
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, 0, rv, off, rv->size_ - off);
    }
    off += buf->size_;
    ct++;
  }
  return rv;
}

JavaMathBigInteger *OrgSpongycastleCryptoAgreementSM2KeyExchange_reduceWithJavaMathBigInteger_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, JavaMathBigInteger *x) {
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(x)) and__WithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(1))) shiftLeftWithInt:self->w_])) subtractWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(1)]])) setBitWithInt:self->w_];
}

IOSByteArray *OrgSpongycastleCryptoAgreementSM2KeyExchange_S1WithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, id<OrgSpongycastleCryptoDigest> digest, OrgSpongycastleMathEcECPoint *u, IOSByteArray *inner) {
  IOSByteArray *rv = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) getDigestSize]];
  [digest updateWithByte:(jbyte) (jint) 0x02];
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, [((OrgSpongycastleMathEcECPoint *) nil_chk(u)) getAffineYCoord]);
  [digest updateWithByteArray:inner withInt:0 withInt:((IOSByteArray *) nil_chk(inner))->size_];
  [digest doFinalWithByteArray:rv withInt:0];
  return rv;
}

IOSByteArray *OrgSpongycastleCryptoAgreementSM2KeyExchange_calculateInnerHashWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_withByteArray_withOrgSpongycastleMathEcECPoint_withOrgSpongycastleMathEcECPoint_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, id<OrgSpongycastleCryptoDigest> digest, OrgSpongycastleMathEcECPoint *u, IOSByteArray *za, IOSByteArray *zb, OrgSpongycastleMathEcECPoint *p1, OrgSpongycastleMathEcECPoint *p2) {
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, [((OrgSpongycastleMathEcECPoint *) nil_chk(u)) getAffineXCoord]);
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:za withInt:0 withInt:((IOSByteArray *) nil_chk(za))->size_];
  [digest updateWithByteArray:zb withInt:0 withInt:((IOSByteArray *) nil_chk(zb))->size_];
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, [((OrgSpongycastleMathEcECPoint *) nil_chk(p1)) getAffineXCoord]);
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, [p1 getAffineYCoord]);
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, [((OrgSpongycastleMathEcECPoint *) nil_chk(p2)) getAffineXCoord]);
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, [p2 getAffineYCoord]);
  IOSByteArray *rv = [IOSByteArray newArrayWithLength:[digest getDigestSize]];
  [digest doFinalWithByteArray:rv withInt:0];
  return rv;
}

IOSByteArray *OrgSpongycastleCryptoAgreementSM2KeyExchange_S2WithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, id<OrgSpongycastleCryptoDigest> digest, OrgSpongycastleMathEcECPoint *u, IOSByteArray *inner) {
  IOSByteArray *rv = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) getDigestSize]];
  [digest updateWithByte:(jbyte) (jint) 0x03];
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, [((OrgSpongycastleMathEcECPoint *) nil_chk(u)) getAffineYCoord]);
  [digest updateWithByteArray:inner withInt:0 withInt:((IOSByteArray *) nil_chk(inner))->size_];
  [digest doFinalWithByteArray:rv withInt:0];
  return rv;
}

IOSByteArray *OrgSpongycastleCryptoAgreementSM2KeyExchange_getZWithOrgSpongycastleCryptoDigest_withByteArray_withOrgSpongycastleMathEcECPoint_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, id<OrgSpongycastleCryptoDigest> digest, IOSByteArray *userID, OrgSpongycastleMathEcECPoint *pubPoint) {
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addUserIDWithOrgSpongycastleCryptoDigest_withByteArray_(self, digest, userID);
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, [((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getCurve])) getA]);
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, [((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getCurve])) getB]);
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getG])) getAffineXCoord]);
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getG])) getAffineYCoord]);
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, [((OrgSpongycastleMathEcECPoint *) nil_chk(pubPoint)) getAffineXCoord]);
  OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, [pubPoint getAffineYCoord]);
  IOSByteArray *rv = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) getDigestSize]];
  [digest doFinalWithByteArray:rv withInt:0];
  return rv;
}

void OrgSpongycastleCryptoAgreementSM2KeyExchange_addUserIDWithOrgSpongycastleCryptoDigest_withByteArray_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, id<OrgSpongycastleCryptoDigest> digest, IOSByteArray *userID) {
  jint len = ((IOSByteArray *) nil_chk(userID))->size_ * 8;
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) updateWithByte:(jbyte) ((JreRShift32(len, 8)) & (jint) 0xFF)];
  [digest updateWithByte:(jbyte) (len & (jint) 0xFF)];
  [digest updateWithByteArray:userID withInt:0 withInt:userID->size_];
}

void OrgSpongycastleCryptoAgreementSM2KeyExchange_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(OrgSpongycastleCryptoAgreementSM2KeyExchange *self, id<OrgSpongycastleCryptoDigest> digest, OrgSpongycastleMathEcECFieldElement *v) {
  IOSByteArray *p = OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(self->curveLength_, [((OrgSpongycastleMathEcECFieldElement *) nil_chk(v)) toBigInteger]);
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:p withInt:0 withInt:((IOSByteArray *) nil_chk(p))->size_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoAgreementSM2KeyExchange)
