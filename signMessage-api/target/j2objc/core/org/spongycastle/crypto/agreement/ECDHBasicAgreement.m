//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/agreement/ECDHBasicAgreement.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/agreement/ECDHBasicAgreement.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECFieldElement.h"
#include "org/spongycastle/math/ec/ECPoint.h"

@interface OrgSpongycastleCryptoAgreementECDHBasicAgreement () {
 @public
  OrgSpongycastleCryptoParamsECPrivateKeyParameters *key_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementECDHBasicAgreement, key_, OrgSpongycastleCryptoParamsECPrivateKeyParameters *)

@implementation OrgSpongycastleCryptoAgreementECDHBasicAgreement

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoAgreementECDHBasicAgreement_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)key {
  self->key_ = (OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk(key, [OrgSpongycastleCryptoParamsECPrivateKeyParameters class]);
}

- (jint)getFieldSize {
  return ([((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk([((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(key_)) getParameters])) getCurve])) getFieldSize] + 7) / 8;
}

- (JavaMathBigInteger *)calculateAgreementWithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)pubKey {
  OrgSpongycastleCryptoParamsECPublicKeyParameters *pub = (OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk(pubKey, [OrgSpongycastleCryptoParamsECPublicKeyParameters class]);
  if (![((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk([((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(pub)) getParameters])) isEqual:[((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(key_)) getParameters]]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"ECDH public key has wrong domain parameters");
  }
  OrgSpongycastleMathEcECPoint *P = [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([pub getQ])) multiplyWithJavaMathBigInteger:[((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(key_)) getD]])) normalize];
  if ([((OrgSpongycastleMathEcECPoint *) nil_chk(P)) isInfinity]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Infinity is not a valid agreement value for ECDH");
  }
  return [((OrgSpongycastleMathEcECFieldElement *) nil_chk([P getAffineXCoord])) toBigInteger];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getFieldSize);
  methods[3].selector = @selector(calculateAgreementWithOrgSpongycastleCryptoCipherParameters:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LOrgSpongycastleCryptoParamsECPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LOrgSpongycastleCryptoCipherParameters;", "calculateAgreement" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoAgreementECDHBasicAgreement = { "ECDHBasicAgreement", "org.spongycastle.crypto.agreement", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoAgreementECDHBasicAgreement;
}

@end

void OrgSpongycastleCryptoAgreementECDHBasicAgreement_init(OrgSpongycastleCryptoAgreementECDHBasicAgreement *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoAgreementECDHBasicAgreement *new_OrgSpongycastleCryptoAgreementECDHBasicAgreement_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoAgreementECDHBasicAgreement, init)
}

OrgSpongycastleCryptoAgreementECDHBasicAgreement *create_OrgSpongycastleCryptoAgreementECDHBasicAgreement_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoAgreementECDHBasicAgreement, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoAgreementECDHBasicAgreement)
