//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/agreement/ECVKOAgreement.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/agreement/ECVKOAgreement.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/ParametersWithUKM.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECFieldElement.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/util/BigIntegers.h"

@interface OrgSpongycastleCryptoAgreementECVKOAgreement () {
 @public
  id<OrgSpongycastleCryptoDigest> digest_;
  OrgSpongycastleCryptoParamsECPrivateKeyParameters *key_;
  JavaMathBigInteger *ukm_;
}

+ (JavaMathBigInteger *)toIntegerWithByteArray:(IOSByteArray *)ukm;

- (IOSByteArray *)fromPointWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)v;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementECVKOAgreement, digest_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementECVKOAgreement, key_, OrgSpongycastleCryptoParamsECPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementECVKOAgreement, ukm_, JavaMathBigInteger *)

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleCryptoAgreementECVKOAgreement_toIntegerWithByteArray_(IOSByteArray *ukm);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoAgreementECVKOAgreement_fromPointWithOrgSpongycastleMathEcECPoint_(OrgSpongycastleCryptoAgreementECVKOAgreement *self, OrgSpongycastleMathEcECPoint *v);

@implementation OrgSpongycastleCryptoAgreementECVKOAgreement

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  OrgSpongycastleCryptoAgreementECVKOAgreement_initWithOrgSpongycastleCryptoDigest_(self, digest);
  return self;
}

- (void)init__WithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)key {
  OrgSpongycastleCryptoParamsParametersWithUKM *p = (OrgSpongycastleCryptoParamsParametersWithUKM *) cast_chk(key, [OrgSpongycastleCryptoParamsParametersWithUKM class]);
  self->key_ = (OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithUKM *) nil_chk(p)) getParameters], [OrgSpongycastleCryptoParamsECPrivateKeyParameters class]);
  self->ukm_ = OrgSpongycastleCryptoAgreementECVKOAgreement_toIntegerWithByteArray_([p getUKM]);
}

- (jint)getFieldSize {
  return ([((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk([((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(key_)) getParameters])) getCurve])) getFieldSize] + 7) / 8;
}

- (IOSByteArray *)calculateAgreementWithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)pubKey {
  OrgSpongycastleCryptoParamsECPublicKeyParameters *pub = (OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk(pubKey, [OrgSpongycastleCryptoParamsECPublicKeyParameters class]);
  OrgSpongycastleCryptoParamsECDomainParameters *params = [((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(pub)) getParameters];
  if (![((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(params)) isEqual:[((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(key_)) getParameters]]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"ECVKO public key has wrong domain parameters");
  }
  JavaMathBigInteger *hd = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([params getH])) multiplyWithJavaMathBigInteger:ukm_])) multiplyWithJavaMathBigInteger:[((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(key_)) getD]])) modWithJavaMathBigInteger:[params getN]];
  OrgSpongycastleMathEcECPoint *P = [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([pub getQ])) multiplyWithJavaMathBigInteger:hd])) normalize];
  if ([((OrgSpongycastleMathEcECPoint *) nil_chk(P)) isInfinity]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Infinity is not a valid agreement value for ECVKO");
  }
  return OrgSpongycastleCryptoAgreementECVKOAgreement_fromPointWithOrgSpongycastleMathEcECPoint_(self, [P normalize]);
}

+ (JavaMathBigInteger *)toIntegerWithByteArray:(IOSByteArray *)ukm {
  return OrgSpongycastleCryptoAgreementECVKOAgreement_toIntegerWithByteArray_(ukm);
}

- (IOSByteArray *)fromPointWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)v {
  return OrgSpongycastleCryptoAgreementECVKOAgreement_fromPointWithOrgSpongycastleMathEcECPoint_(self, v);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getFieldSize);
  methods[3].selector = @selector(calculateAgreementWithOrgSpongycastleCryptoCipherParameters:);
  methods[4].selector = @selector(toIntegerWithByteArray:);
  methods[5].selector = @selector(fromPointWithOrgSpongycastleMathEcECPoint:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "key_", "LOrgSpongycastleCryptoParamsECPrivateKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ukm_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDigest;", "init", "LOrgSpongycastleCryptoCipherParameters;", "calculateAgreement", "toInteger", "[B", "fromPoint", "LOrgSpongycastleMathEcECPoint;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoAgreementECVKOAgreement = { "ECVKOAgreement", "org.spongycastle.crypto.agreement", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoAgreementECVKOAgreement;
}

@end

void OrgSpongycastleCryptoAgreementECVKOAgreement_initWithOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoAgreementECVKOAgreement *self, id<OrgSpongycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->digest_ = digest;
}

OrgSpongycastleCryptoAgreementECVKOAgreement *new_OrgSpongycastleCryptoAgreementECVKOAgreement_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoAgreementECVKOAgreement, initWithOrgSpongycastleCryptoDigest_, digest)
}

OrgSpongycastleCryptoAgreementECVKOAgreement *create_OrgSpongycastleCryptoAgreementECVKOAgreement_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoAgreementECVKOAgreement, initWithOrgSpongycastleCryptoDigest_, digest)
}

JavaMathBigInteger *OrgSpongycastleCryptoAgreementECVKOAgreement_toIntegerWithByteArray_(IOSByteArray *ukm) {
  OrgSpongycastleCryptoAgreementECVKOAgreement_initialize();
  IOSByteArray *v = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(ukm))->size_];
  for (jint i = 0; i != v->size_; i++) {
    *IOSByteArray_GetRef(v, i) = IOSByteArray_Get(ukm, ukm->size_ - i - 1);
  }
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, v);
}

IOSByteArray *OrgSpongycastleCryptoAgreementECVKOAgreement_fromPointWithOrgSpongycastleMathEcECPoint_(OrgSpongycastleCryptoAgreementECVKOAgreement *self, OrgSpongycastleMathEcECPoint *v) {
  JavaMathBigInteger *bX = [((OrgSpongycastleMathEcECFieldElement *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(v)) getAffineXCoord])) toBigInteger];
  JavaMathBigInteger *bY = [((OrgSpongycastleMathEcECFieldElement *) nil_chk([v getAffineYCoord])) toBigInteger];
  jint size;
  if (((IOSByteArray *) nil_chk([((JavaMathBigInteger *) nil_chk(bX)) toByteArray]))->size_ > 33) {
    size = 64;
  }
  else {
    size = 32;
  }
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:2 * size];
  IOSByteArray *x = OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(size, bX);
  IOSByteArray *y = OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(size, bY);
  for (jint i = 0; i != size; i++) {
    *IOSByteArray_GetRef(bytes, i) = IOSByteArray_Get(nil_chk(x), size - i - 1);
  }
  for (jint i = 0; i != size; i++) {
    *IOSByteArray_GetRef(bytes, size + i) = IOSByteArray_Get(nil_chk(y), size - i - 1);
  }
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->digest_)) updateWithByteArray:bytes withInt:0 withInt:bytes->size_];
  IOSByteArray *rv = [IOSByteArray newArrayWithLength:[self->digest_ getDigestSize]];
  [self->digest_ doFinalWithByteArray:rv withInt:0];
  return rv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoAgreementECVKOAgreement)
