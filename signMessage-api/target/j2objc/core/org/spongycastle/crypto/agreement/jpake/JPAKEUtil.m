//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/agreement/jpake/JPAKEUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/CryptoException.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/Mac.h"
#include "org/spongycastle/crypto/agreement/jpake/JPAKEUtil.h"
#include "org/spongycastle/crypto/macs/HMac.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/BigIntegers.h"
#include "org/spongycastle/util/Strings.h"

@interface OrgSpongycastleCryptoAgreementJpakeJPAKEUtil ()

+ (JavaMathBigInteger *)calculateHashForZeroKnowledgeProofWithJavaMathBigInteger:(JavaMathBigInteger *)g
                                                          withJavaMathBigInteger:(JavaMathBigInteger *)gr
                                                          withJavaMathBigInteger:(JavaMathBigInteger *)gx
                                                                    withNSString:(NSString *)participantId
                                                 withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest;

+ (IOSByteArray *)calculateMacKeyWithJavaMathBigInteger:(JavaMathBigInteger *)keyingMaterial
                        withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest;

+ (void)updateDigestWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                             withJavaMathBigInteger:(JavaMathBigInteger *)bigInteger;

+ (void)updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                          withJavaMathBigInteger:(JavaMathBigInteger *)bigInteger;

+ (void)updateDigestWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                       withNSString:(NSString *)string;

+ (void)updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                                    withNSString:(NSString *)string;

+ (void)updateMacWithOrgSpongycastleCryptoMac:(id<OrgSpongycastleCryptoMac>)mac
                       withJavaMathBigInteger:(JavaMathBigInteger *)bigInteger;

+ (void)updateMacWithOrgSpongycastleCryptoMac:(id<OrgSpongycastleCryptoMac>)mac
                                 withNSString:(NSString *)string;

+ (IOSByteArray *)intToByteArrayWithInt:(jint)value;

@end

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateHashForZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withNSString_withOrgSpongycastleCryptoDigest_(JavaMathBigInteger *g, JavaMathBigInteger *gr, JavaMathBigInteger *gx, NSString *participantId, id<OrgSpongycastleCryptoDigest> digest);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateMacKeyWithJavaMathBigInteger_withOrgSpongycastleCryptoDigest_(JavaMathBigInteger *keyingMaterial, id<OrgSpongycastleCryptoDigest> digest);

__attribute__((unused)) static void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithOrgSpongycastleCryptoDigest_withJavaMathBigInteger_(id<OrgSpongycastleCryptoDigest> digest, JavaMathBigInteger *bigInteger);

__attribute__((unused)) static void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest_withJavaMathBigInteger_(id<OrgSpongycastleCryptoDigest> digest, JavaMathBigInteger *bigInteger);

__attribute__((unused)) static void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithOrgSpongycastleCryptoDigest_withNSString_(id<OrgSpongycastleCryptoDigest> digest, NSString *string);

__attribute__((unused)) static void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest_withNSString_(id<OrgSpongycastleCryptoDigest> digest, NSString *string);

__attribute__((unused)) static void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithOrgSpongycastleCryptoMac_withJavaMathBigInteger_(id<OrgSpongycastleCryptoMac> mac, JavaMathBigInteger *bigInteger);

__attribute__((unused)) static void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithOrgSpongycastleCryptoMac_withNSString_(id<OrgSpongycastleCryptoMac> mac, NSString *string);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_intToByteArrayWithInt_(jint value);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoAgreementJpakeJPAKEUtil)

JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ZERO;
JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ONE;

@implementation OrgSpongycastleCryptoAgreementJpakeJPAKEUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaMathBigInteger *)generateX1WithJavaMathBigInteger:(JavaMathBigInteger *)q
                            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_generateX1WithJavaMathBigInteger_withJavaSecuritySecureRandom_(q, random);
}

+ (JavaMathBigInteger *)generateX2WithJavaMathBigInteger:(JavaMathBigInteger *)q
                            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_generateX2WithJavaMathBigInteger_withJavaSecuritySecureRandom_(q, random);
}

+ (JavaMathBigInteger *)calculateSWithCharArray:(IOSCharArray *)password {
  return OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateSWithCharArray_(password);
}

+ (JavaMathBigInteger *)calculateGxWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                   withJavaMathBigInteger:(JavaMathBigInteger *)g
                                   withJavaMathBigInteger:(JavaMathBigInteger *)x {
  return OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateGxWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, g, x);
}

+ (JavaMathBigInteger *)calculateGAWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                   withJavaMathBigInteger:(JavaMathBigInteger *)gx1
                                   withJavaMathBigInteger:(JavaMathBigInteger *)gx3
                                   withJavaMathBigInteger:(JavaMathBigInteger *)gx4 {
  return OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateGAWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, gx1, gx3, gx4);
}

+ (JavaMathBigInteger *)calculateX2sWithJavaMathBigInteger:(JavaMathBigInteger *)q
                                    withJavaMathBigInteger:(JavaMathBigInteger *)x2
                                    withJavaMathBigInteger:(JavaMathBigInteger *)s {
  return OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateX2sWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(q, x2, s);
}

+ (JavaMathBigInteger *)calculateAWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                  withJavaMathBigInteger:(JavaMathBigInteger *)q
                                  withJavaMathBigInteger:(JavaMathBigInteger *)gA
                                  withJavaMathBigInteger:(JavaMathBigInteger *)x2s {
  return OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateAWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, q, gA, x2s);
}

+ (IOSObjectArray *)calculateZeroKnowledgeProofWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                               withJavaMathBigInteger:(JavaMathBigInteger *)q
                                               withJavaMathBigInteger:(JavaMathBigInteger *)g
                                               withJavaMathBigInteger:(JavaMathBigInteger *)gx
                                               withJavaMathBigInteger:(JavaMathBigInteger *)x
                                                         withNSString:(NSString *)participantId
                                      withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withNSString_withOrgSpongycastleCryptoDigest_withJavaSecuritySecureRandom_(p, q, g, gx, x, participantId, digest, random);
}

+ (JavaMathBigInteger *)calculateHashForZeroKnowledgeProofWithJavaMathBigInteger:(JavaMathBigInteger *)g
                                                          withJavaMathBigInteger:(JavaMathBigInteger *)gr
                                                          withJavaMathBigInteger:(JavaMathBigInteger *)gx
                                                                    withNSString:(NSString *)participantId
                                                 withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  return OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateHashForZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withNSString_withOrgSpongycastleCryptoDigest_(g, gr, gx, participantId, digest);
}

+ (void)validateGx4WithJavaMathBigInteger:(JavaMathBigInteger *)gx4 {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateGx4WithJavaMathBigInteger_(gx4);
}

+ (void)validateGaWithJavaMathBigInteger:(JavaMathBigInteger *)ga {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateGaWithJavaMathBigInteger_(ga);
}

+ (void)validateZeroKnowledgeProofWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                  withJavaMathBigInteger:(JavaMathBigInteger *)q
                                  withJavaMathBigInteger:(JavaMathBigInteger *)g
                                  withJavaMathBigInteger:(JavaMathBigInteger *)gx
                             withJavaMathBigIntegerArray:(IOSObjectArray *)zeroKnowledgeProof
                                            withNSString:(NSString *)participantId
                         withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withNSString_withOrgSpongycastleCryptoDigest_(p, q, g, gx, zeroKnowledgeProof, participantId, digest);
}

+ (JavaMathBigInteger *)calculateKeyingMaterialWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                               withJavaMathBigInteger:(JavaMathBigInteger *)q
                                               withJavaMathBigInteger:(JavaMathBigInteger *)gx4
                                               withJavaMathBigInteger:(JavaMathBigInteger *)x2
                                               withJavaMathBigInteger:(JavaMathBigInteger *)s
                                               withJavaMathBigInteger:(JavaMathBigInteger *)B {
  return OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateKeyingMaterialWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(p, q, gx4, x2, s, B);
}

+ (void)validateParticipantIdsDifferWithNSString:(NSString *)participantId1
                                    withNSString:(NSString *)participantId2 {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateParticipantIdsDifferWithNSString_withNSString_(participantId1, participantId2);
}

+ (void)validateParticipantIdsEqualWithNSString:(NSString *)expectedParticipantId
                                   withNSString:(NSString *)actualParticipantId {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateParticipantIdsEqualWithNSString_withNSString_(expectedParticipantId, actualParticipantId);
}

+ (void)validateNotNullWithId:(id)object
                 withNSString:(NSString *)description_ {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateNotNullWithId_withNSString_(object, description_);
}

+ (JavaMathBigInteger *)calculateMacTagWithNSString:(NSString *)participantId
                                       withNSString:(NSString *)partnerParticipantId
                             withJavaMathBigInteger:(JavaMathBigInteger *)gx1
                             withJavaMathBigInteger:(JavaMathBigInteger *)gx2
                             withJavaMathBigInteger:(JavaMathBigInteger *)gx3
                             withJavaMathBigInteger:(JavaMathBigInteger *)gx4
                             withJavaMathBigInteger:(JavaMathBigInteger *)keyingMaterial
                    withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  return OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateMacTagWithNSString_withNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoDigest_(participantId, partnerParticipantId, gx1, gx2, gx3, gx4, keyingMaterial, digest);
}

+ (IOSByteArray *)calculateMacKeyWithJavaMathBigInteger:(JavaMathBigInteger *)keyingMaterial
                        withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  return OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateMacKeyWithJavaMathBigInteger_withOrgSpongycastleCryptoDigest_(keyingMaterial, digest);
}

+ (void)validateMacTagWithNSString:(NSString *)participantId
                      withNSString:(NSString *)partnerParticipantId
            withJavaMathBigInteger:(JavaMathBigInteger *)gx1
            withJavaMathBigInteger:(JavaMathBigInteger *)gx2
            withJavaMathBigInteger:(JavaMathBigInteger *)gx3
            withJavaMathBigInteger:(JavaMathBigInteger *)gx4
            withJavaMathBigInteger:(JavaMathBigInteger *)keyingMaterial
   withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
            withJavaMathBigInteger:(JavaMathBigInteger *)partnerMacTag {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateMacTagWithNSString_withNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoDigest_withJavaMathBigInteger_(participantId, partnerParticipantId, gx1, gx2, gx3, gx4, keyingMaterial, digest, partnerMacTag);
}

+ (void)updateDigestWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                             withJavaMathBigInteger:(JavaMathBigInteger *)bigInteger {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithOrgSpongycastleCryptoDigest_withJavaMathBigInteger_(digest, bigInteger);
}

+ (void)updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                          withJavaMathBigInteger:(JavaMathBigInteger *)bigInteger {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest_withJavaMathBigInteger_(digest, bigInteger);
}

+ (void)updateDigestWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                       withNSString:(NSString *)string {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithOrgSpongycastleCryptoDigest_withNSString_(digest, string);
}

+ (void)updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                                    withNSString:(NSString *)string {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest_withNSString_(digest, string);
}

+ (void)updateMacWithOrgSpongycastleCryptoMac:(id<OrgSpongycastleCryptoMac>)mac
                       withJavaMathBigInteger:(JavaMathBigInteger *)bigInteger {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithOrgSpongycastleCryptoMac_withJavaMathBigInteger_(mac, bigInteger);
}

+ (void)updateMacWithOrgSpongycastleCryptoMac:(id<OrgSpongycastleCryptoMac>)mac
                                 withNSString:(NSString *)string {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithOrgSpongycastleCryptoMac_withNSString_(mac, string);
}

+ (IOSByteArray *)intToByteArrayWithInt:(jint)value {
  return OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_intToByteArrayWithInt_(value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 9, 6, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 10, 8, -1, -1, -1, -1 },
    { NULL, "[LJavaMathBigInteger;", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 16, 17, -1, -1, -1 },
    { NULL, "V", 0x9, 18, 16, 17, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 20, 17, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 24, 17, -1, -1, -1 },
    { NULL, "V", 0x9, 25, 24, 17, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 28, 29, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 32, 33, 17, -1, -1, -1 },
    { NULL, "V", 0xa, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 36, 35, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 34, 37, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 38, 40, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 41, 42, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateX1WithJavaMathBigInteger:withJavaSecuritySecureRandom:);
  methods[2].selector = @selector(generateX2WithJavaMathBigInteger:withJavaSecuritySecureRandom:);
  methods[3].selector = @selector(calculateSWithCharArray:);
  methods[4].selector = @selector(calculateGxWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[5].selector = @selector(calculateGAWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[6].selector = @selector(calculateX2sWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[7].selector = @selector(calculateAWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[8].selector = @selector(calculateZeroKnowledgeProofWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withNSString:withOrgSpongycastleCryptoDigest:withJavaSecuritySecureRandom:);
  methods[9].selector = @selector(calculateHashForZeroKnowledgeProofWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withNSString:withOrgSpongycastleCryptoDigest:);
  methods[10].selector = @selector(validateGx4WithJavaMathBigInteger:);
  methods[11].selector = @selector(validateGaWithJavaMathBigInteger:);
  methods[12].selector = @selector(validateZeroKnowledgeProofWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigIntegerArray:withNSString:withOrgSpongycastleCryptoDigest:);
  methods[13].selector = @selector(calculateKeyingMaterialWithJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:);
  methods[14].selector = @selector(validateParticipantIdsDifferWithNSString:withNSString:);
  methods[15].selector = @selector(validateParticipantIdsEqualWithNSString:withNSString:);
  methods[16].selector = @selector(validateNotNullWithId:withNSString:);
  methods[17].selector = @selector(calculateMacTagWithNSString:withNSString:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withOrgSpongycastleCryptoDigest:);
  methods[18].selector = @selector(calculateMacKeyWithJavaMathBigInteger:withOrgSpongycastleCryptoDigest:);
  methods[19].selector = @selector(validateMacTagWithNSString:withNSString:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withJavaMathBigInteger:withOrgSpongycastleCryptoDigest:withJavaMathBigInteger:);
  methods[20].selector = @selector(updateDigestWithOrgSpongycastleCryptoDigest:withJavaMathBigInteger:);
  methods[21].selector = @selector(updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest:withJavaMathBigInteger:);
  methods[22].selector = @selector(updateDigestWithOrgSpongycastleCryptoDigest:withNSString:);
  methods[23].selector = @selector(updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest:withNSString:);
  methods[24].selector = @selector(updateMacWithOrgSpongycastleCryptoMac:withJavaMathBigInteger:);
  methods[25].selector = @selector(updateMacWithOrgSpongycastleCryptoMac:withNSString:);
  methods[26].selector = @selector(intToByteArrayWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x18, -1, 43, -1, -1 },
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x18, -1, 44, -1, -1 },
  };
  static const void *ptrTable[] = { "generateX1", "LJavaMathBigInteger;LJavaSecuritySecureRandom;", "generateX2", "calculateS", "[C", "calculateGx", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "calculateGA", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "calculateX2s", "calculateA", "calculateZeroKnowledgeProof", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LNSString;LOrgSpongycastleCryptoDigest;LJavaSecuritySecureRandom;", "calculateHashForZeroKnowledgeProof", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LNSString;LOrgSpongycastleCryptoDigest;", "validateGx4", "LJavaMathBigInteger;", "LOrgSpongycastleCryptoCryptoException;", "validateGa", "validateZeroKnowledgeProof", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;[LJavaMathBigInteger;LNSString;LOrgSpongycastleCryptoDigest;", "calculateKeyingMaterial", "LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;", "validateParticipantIdsDiffer", "LNSString;LNSString;", "validateParticipantIdsEqual", "validateNotNull", "LNSObject;LNSString;", "calculateMacTag", "LNSString;LNSString;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LOrgSpongycastleCryptoDigest;", "calculateMacKey", "LJavaMathBigInteger;LOrgSpongycastleCryptoDigest;", "validateMacTag", "LNSString;LNSString;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LJavaMathBigInteger;LOrgSpongycastleCryptoDigest;LJavaMathBigInteger;", "updateDigest", "LOrgSpongycastleCryptoDigest;LJavaMathBigInteger;", "updateDigestIncludingSize", "LOrgSpongycastleCryptoDigest;LNSString;", "updateMac", "LOrgSpongycastleCryptoMac;LJavaMathBigInteger;", "LOrgSpongycastleCryptoMac;LNSString;", "intToByteArray", "I", &OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ZERO, &OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ONE };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoAgreementJpakeJPAKEUtil = { "JPAKEUtil", "org.spongycastle.crypto.agreement.jpake", ptrTable, methods, fields, 7, 0x1, 27, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoAgreementJpakeJPAKEUtil;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoAgreementJpakeJPAKEUtil class]) {
    OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ZERO = JavaMathBigInteger_valueOfWithLong_(0);
    OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoAgreementJpakeJPAKEUtil)
  }
}

@end

void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_init(OrgSpongycastleCryptoAgreementJpakeJPAKEUtil *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoAgreementJpakeJPAKEUtil *new_OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoAgreementJpakeJPAKEUtil, init)
}

OrgSpongycastleCryptoAgreementJpakeJPAKEUtil *create_OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoAgreementJpakeJPAKEUtil, init)
}

JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_generateX1WithJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *q, JavaSecuritySecureRandom *random) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  JavaMathBigInteger *min = OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ZERO;
  JavaMathBigInteger *max = [((JavaMathBigInteger *) nil_chk(q)) subtractWithJavaMathBigInteger:OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ONE];
  return OrgSpongycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(min, max, random);
}

JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_generateX2WithJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *q, JavaSecuritySecureRandom *random) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  JavaMathBigInteger *min = OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ONE;
  JavaMathBigInteger *max = [((JavaMathBigInteger *) nil_chk(q)) subtractWithJavaMathBigInteger:OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ONE];
  return OrgSpongycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(min, max, random);
}

JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateSWithCharArray_(IOSCharArray *password) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  return new_JavaMathBigInteger_initWithByteArray_(OrgSpongycastleUtilStrings_toUTF8ByteArrayWithCharArray_(password));
}

JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateGxWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *g, JavaMathBigInteger *x) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  return [((JavaMathBigInteger *) nil_chk(g)) modPowWithJavaMathBigInteger:x withJavaMathBigInteger:p];
}

JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateGAWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *gx1, JavaMathBigInteger *gx3, JavaMathBigInteger *gx4) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(gx1)) multiplyWithJavaMathBigInteger:gx3])) multiplyWithJavaMathBigInteger:gx4])) modWithJavaMathBigInteger:p];
}

JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateX2sWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *x2, JavaMathBigInteger *s) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(x2)) multiplyWithJavaMathBigInteger:s])) modWithJavaMathBigInteger:q];
}

JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateAWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *gA, JavaMathBigInteger *x2s) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  return [((JavaMathBigInteger *) nil_chk(gA)) modPowWithJavaMathBigInteger:x2s withJavaMathBigInteger:p];
}

IOSObjectArray *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withNSString_withOrgSpongycastleCryptoDigest_withJavaSecuritySecureRandom_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, JavaMathBigInteger *gx, JavaMathBigInteger *x, NSString *participantId, id<OrgSpongycastleCryptoDigest> digest, JavaSecuritySecureRandom *random) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSObjectArray *zeroKnowledgeProof = [IOSObjectArray newArrayWithLength:2 type:JavaMathBigInteger_class_()];
  JavaMathBigInteger *vMin = OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ZERO;
  JavaMathBigInteger *vMax = [((JavaMathBigInteger *) nil_chk(q)) subtractWithJavaMathBigInteger:OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ONE];
  JavaMathBigInteger *v = OrgSpongycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(vMin, vMax, random);
  JavaMathBigInteger *gv = [((JavaMathBigInteger *) nil_chk(g)) modPowWithJavaMathBigInteger:v withJavaMathBigInteger:p];
  JavaMathBigInteger *h = OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateHashForZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withNSString_withOrgSpongycastleCryptoDigest_(g, gv, gx, participantId, digest);
  (void) IOSObjectArray_Set(zeroKnowledgeProof, 0, gv);
  (void) IOSObjectArray_Set(zeroKnowledgeProof, 1, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(v)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(x)) multiplyWithJavaMathBigInteger:h]])) modWithJavaMathBigInteger:q]);
  return zeroKnowledgeProof;
}

JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateHashForZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withNSString_withOrgSpongycastleCryptoDigest_(JavaMathBigInteger *g, JavaMathBigInteger *gr, JavaMathBigInteger *gx, NSString *participantId, id<OrgSpongycastleCryptoDigest> digest) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) reset];
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest_withJavaMathBigInteger_(digest, g);
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest_withJavaMathBigInteger_(digest, gr);
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest_withJavaMathBigInteger_(digest, gx);
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest_withNSString_(digest, participantId);
  IOSByteArray *output = [IOSByteArray newArrayWithLength:[digest getDigestSize]];
  [digest doFinalWithByteArray:output withInt:0];
  return new_JavaMathBigInteger_initWithByteArray_(output);
}

void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateGx4WithJavaMathBigInteger_(JavaMathBigInteger *gx4) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  if ([((JavaMathBigInteger *) nil_chk(gx4)) isEqual:OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ONE]) {
    @throw new_OrgSpongycastleCryptoCryptoException_initWithNSString_(@"g^x validation failed.  g^x should not be 1.");
  }
}

void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateGaWithJavaMathBigInteger_(JavaMathBigInteger *ga) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  if ([((JavaMathBigInteger *) nil_chk(ga)) isEqual:OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ONE]) {
    @throw new_OrgSpongycastleCryptoCryptoException_initWithNSString_(@"ga is equal to 1.  It should not be.  The chances of this happening are on the order of 2^160 for a 160-bit q.  Try again.");
  }
}

void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withNSString_withOrgSpongycastleCryptoDigest_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, JavaMathBigInteger *gx, IOSObjectArray *zeroKnowledgeProof, NSString *participantId, id<OrgSpongycastleCryptoDigest> digest) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  JavaMathBigInteger *gv = IOSObjectArray_Get(nil_chk(zeroKnowledgeProof), 0);
  JavaMathBigInteger *r = IOSObjectArray_Get(zeroKnowledgeProof, 1);
  JavaMathBigInteger *h = OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateHashForZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withNSString_withOrgSpongycastleCryptoDigest_(g, gv, gx, participantId, digest);
  if (!([((JavaMathBigInteger *) nil_chk(gx)) compareToWithId:OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ZERO] == 1 && [gx compareToWithId:p] == -1 && [((JavaMathBigInteger *) nil_chk([gx modPowWithJavaMathBigInteger:q withJavaMathBigInteger:p])) compareToWithId:OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ONE] == 0 && [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(g)) modPowWithJavaMathBigInteger:r withJavaMathBigInteger:p])) multiplyWithJavaMathBigInteger:[gx modPowWithJavaMathBigInteger:h withJavaMathBigInteger:p]])) modWithJavaMathBigInteger:p])) compareToWithId:gv] == 0)) {
    @throw new_OrgSpongycastleCryptoCryptoException_initWithNSString_(@"Zero-knowledge proof validation failed");
  }
}

JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateKeyingMaterialWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *gx4, JavaMathBigInteger *x2, JavaMathBigInteger *s, JavaMathBigInteger *B) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(gx4)) modPowWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(x2)) multiplyWithJavaMathBigInteger:s])) negate])) modWithJavaMathBigInteger:q] withJavaMathBigInteger:p])) multiplyWithJavaMathBigInteger:B])) modPowWithJavaMathBigInteger:x2 withJavaMathBigInteger:p];
}

void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateParticipantIdsDifferWithNSString_withNSString_(NSString *participantId1, NSString *participantId2) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  if ([((NSString *) nil_chk(participantId1)) isEqual:participantId2]) {
    @throw new_OrgSpongycastleCryptoCryptoException_initWithNSString_(JreStrcat("$$$", @"Both participants are using the same participantId (", participantId1, @"). This is not allowed. Each participant must use a unique participantId."));
  }
}

void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateParticipantIdsEqualWithNSString_withNSString_(NSString *expectedParticipantId, NSString *actualParticipantId) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  if (![((NSString *) nil_chk(expectedParticipantId)) isEqual:actualParticipantId]) {
    @throw new_OrgSpongycastleCryptoCryptoException_initWithNSString_(JreStrcat("$$$$C", @"Received payload from incorrect partner (", actualParticipantId, @"). Expected to receive payload from ", expectedParticipantId, '.'));
  }
}

void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateNotNullWithId_withNSString_(id object, NSString *description_) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  if (object == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(JreStrcat("$$", description_, @" must not be null"));
  }
}

JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateMacTagWithNSString_withNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoDigest_(NSString *participantId, NSString *partnerParticipantId, JavaMathBigInteger *gx1, JavaMathBigInteger *gx2, JavaMathBigInteger *gx3, JavaMathBigInteger *gx4, JavaMathBigInteger *keyingMaterial, id<OrgSpongycastleCryptoDigest> digest) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSByteArray *macKey = OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateMacKeyWithJavaMathBigInteger_withOrgSpongycastleCryptoDigest_(keyingMaterial, digest);
  OrgSpongycastleCryptoMacsHMac *mac = new_OrgSpongycastleCryptoMacsHMac_initWithOrgSpongycastleCryptoDigest_(digest);
  IOSByteArray *macOutput = [IOSByteArray newArrayWithLength:[mac getMacSize]];
  [mac init__WithOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_(macKey)];
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithOrgSpongycastleCryptoMac_withNSString_(mac, @"KC_1_U");
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithOrgSpongycastleCryptoMac_withNSString_(mac, participantId);
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithOrgSpongycastleCryptoMac_withNSString_(mac, partnerParticipantId);
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithOrgSpongycastleCryptoMac_withJavaMathBigInteger_(mac, gx1);
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithOrgSpongycastleCryptoMac_withJavaMathBigInteger_(mac, gx2);
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithOrgSpongycastleCryptoMac_withJavaMathBigInteger_(mac, gx3);
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithOrgSpongycastleCryptoMac_withJavaMathBigInteger_(mac, gx4);
  [mac doFinalWithByteArray:macOutput withInt:0];
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(macKey, (jbyte) 0);
  return new_JavaMathBigInteger_initWithByteArray_(macOutput);
}

IOSByteArray *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateMacKeyWithJavaMathBigInteger_withOrgSpongycastleCryptoDigest_(JavaMathBigInteger *keyingMaterial, id<OrgSpongycastleCryptoDigest> digest) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) reset];
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithOrgSpongycastleCryptoDigest_withJavaMathBigInteger_(digest, keyingMaterial);
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithOrgSpongycastleCryptoDigest_withNSString_(digest, @"JPAKE_KC");
  IOSByteArray *output = [IOSByteArray newArrayWithLength:[digest getDigestSize]];
  [digest doFinalWithByteArray:output withInt:0];
  return output;
}

void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateMacTagWithNSString_withNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoDigest_withJavaMathBigInteger_(NSString *participantId, NSString *partnerParticipantId, JavaMathBigInteger *gx1, JavaMathBigInteger *gx2, JavaMathBigInteger *gx3, JavaMathBigInteger *gx4, JavaMathBigInteger *keyingMaterial, id<OrgSpongycastleCryptoDigest> digest, JavaMathBigInteger *partnerMacTag) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  JavaMathBigInteger *expectedMacTag = OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateMacTagWithNSString_withNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoDigest_(partnerParticipantId, participantId, gx3, gx4, gx1, gx2, keyingMaterial, digest);
  if (![((JavaMathBigInteger *) nil_chk(expectedMacTag)) isEqual:partnerMacTag]) {
    @throw new_OrgSpongycastleCryptoCryptoException_initWithNSString_(@"Partner MacTag validation failed. Therefore, the password, MAC, or digest algorithm of each participant does not match.");
  }
}

void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithOrgSpongycastleCryptoDigest_withJavaMathBigInteger_(id<OrgSpongycastleCryptoDigest> digest, JavaMathBigInteger *bigInteger) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSByteArray *byteArray = OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(bigInteger);
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:byteArray withInt:0 withInt:((IOSByteArray *) nil_chk(byteArray))->size_];
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(byteArray, (jbyte) 0);
}

void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest_withJavaMathBigInteger_(id<OrgSpongycastleCryptoDigest> digest, JavaMathBigInteger *bigInteger) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSByteArray *byteArray = OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(bigInteger);
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_intToByteArrayWithInt_(((IOSByteArray *) nil_chk(byteArray))->size_) withInt:0 withInt:4];
  [digest updateWithByteArray:byteArray withInt:0 withInt:byteArray->size_];
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(byteArray, (jbyte) 0);
}

void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestWithOrgSpongycastleCryptoDigest_withNSString_(id<OrgSpongycastleCryptoDigest> digest, NSString *string) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSByteArray *byteArray = OrgSpongycastleUtilStrings_toUTF8ByteArrayWithNSString_(string);
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:byteArray withInt:0 withInt:((IOSByteArray *) nil_chk(byteArray))->size_];
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(byteArray, (jbyte) 0);
}

void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateDigestIncludingSizeWithOrgSpongycastleCryptoDigest_withNSString_(id<OrgSpongycastleCryptoDigest> digest, NSString *string) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSByteArray *byteArray = OrgSpongycastleUtilStrings_toUTF8ByteArrayWithNSString_(string);
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_intToByteArrayWithInt_(((IOSByteArray *) nil_chk(byteArray))->size_) withInt:0 withInt:4];
  [digest updateWithByteArray:byteArray withInt:0 withInt:byteArray->size_];
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(byteArray, (jbyte) 0);
}

void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithOrgSpongycastleCryptoMac_withJavaMathBigInteger_(id<OrgSpongycastleCryptoMac> mac, JavaMathBigInteger *bigInteger) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSByteArray *byteArray = OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(bigInteger);
  [((id<OrgSpongycastleCryptoMac>) nil_chk(mac)) updateWithByteArray:byteArray withInt:0 withInt:((IOSByteArray *) nil_chk(byteArray))->size_];
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(byteArray, (jbyte) 0);
}

void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_updateMacWithOrgSpongycastleCryptoMac_withNSString_(id<OrgSpongycastleCryptoMac> mac, NSString *string) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  IOSByteArray *byteArray = OrgSpongycastleUtilStrings_toUTF8ByteArrayWithNSString_(string);
  [((id<OrgSpongycastleCryptoMac>) nil_chk(mac)) updateWithByteArray:byteArray withInt:0 withInt:((IOSByteArray *) nil_chk(byteArray))->size_];
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(byteArray, (jbyte) 0);
}

IOSByteArray *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_intToByteArrayWithInt_(jint value) {
  OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_initialize();
  return [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (JreURShift32(value, 24)), (jbyte) (JreURShift32(value, 16)), (jbyte) (JreURShift32(value, 8)), (jbyte) value } count:4];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoAgreementJpakeJPAKEUtil)
