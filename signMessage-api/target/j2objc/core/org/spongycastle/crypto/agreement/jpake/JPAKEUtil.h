//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/agreement/jpake/JPAKEUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoAgreementJpakeJPAKEUtil")
#ifdef RESTRICT_OrgSpongycastleCryptoAgreementJpakeJPAKEUtil
#define INCLUDE_ALL_OrgSpongycastleCryptoAgreementJpakeJPAKEUtil 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoAgreementJpakeJPAKEUtil 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoAgreementJpakeJPAKEUtil

#if !defined (OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_) && (INCLUDE_ALL_OrgSpongycastleCryptoAgreementJpakeJPAKEUtil || defined(INCLUDE_OrgSpongycastleCryptoAgreementJpakeJPAKEUtil))
#define OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_

@class IOSCharArray;
@class IOSObjectArray;
@class JavaMathBigInteger;
@class JavaSecuritySecureRandom;
@protocol OrgSpongycastleCryptoDigest;

@interface OrgSpongycastleCryptoAgreementJpakeJPAKEUtil : NSObject

#pragma mark Public

- (instancetype)init;

+ (JavaMathBigInteger *)calculateAWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                  withJavaMathBigInteger:(JavaMathBigInteger *)q
                                  withJavaMathBigInteger:(JavaMathBigInteger *)gA
                                  withJavaMathBigInteger:(JavaMathBigInteger *)x2s;

+ (JavaMathBigInteger *)calculateGAWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                   withJavaMathBigInteger:(JavaMathBigInteger *)gx1
                                   withJavaMathBigInteger:(JavaMathBigInteger *)gx3
                                   withJavaMathBigInteger:(JavaMathBigInteger *)gx4;

+ (JavaMathBigInteger *)calculateGxWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                   withJavaMathBigInteger:(JavaMathBigInteger *)g
                                   withJavaMathBigInteger:(JavaMathBigInteger *)x;

+ (JavaMathBigInteger *)calculateKeyingMaterialWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                               withJavaMathBigInteger:(JavaMathBigInteger *)q
                                               withJavaMathBigInteger:(JavaMathBigInteger *)gx4
                                               withJavaMathBigInteger:(JavaMathBigInteger *)x2
                                               withJavaMathBigInteger:(JavaMathBigInteger *)s
                                               withJavaMathBigInteger:(JavaMathBigInteger *)B;

+ (JavaMathBigInteger *)calculateMacTagWithNSString:(NSString *)participantId
                                       withNSString:(NSString *)partnerParticipantId
                             withJavaMathBigInteger:(JavaMathBigInteger *)gx1
                             withJavaMathBigInteger:(JavaMathBigInteger *)gx2
                             withJavaMathBigInteger:(JavaMathBigInteger *)gx3
                             withJavaMathBigInteger:(JavaMathBigInteger *)gx4
                             withJavaMathBigInteger:(JavaMathBigInteger *)keyingMaterial
                    withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest;

+ (JavaMathBigInteger *)calculateSWithCharArray:(IOSCharArray *)password;

+ (JavaMathBigInteger *)calculateX2sWithJavaMathBigInteger:(JavaMathBigInteger *)q
                                    withJavaMathBigInteger:(JavaMathBigInteger *)x2
                                    withJavaMathBigInteger:(JavaMathBigInteger *)s;

+ (IOSObjectArray *)calculateZeroKnowledgeProofWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                               withJavaMathBigInteger:(JavaMathBigInteger *)q
                                               withJavaMathBigInteger:(JavaMathBigInteger *)g
                                               withJavaMathBigInteger:(JavaMathBigInteger *)gx
                                               withJavaMathBigInteger:(JavaMathBigInteger *)x
                                                         withNSString:(NSString *)participantId
                                      withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                         withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

+ (JavaMathBigInteger *)generateX1WithJavaMathBigInteger:(JavaMathBigInteger *)q
                            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

+ (JavaMathBigInteger *)generateX2WithJavaMathBigInteger:(JavaMathBigInteger *)q
                            withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

+ (void)validateGaWithJavaMathBigInteger:(JavaMathBigInteger *)ga;

+ (void)validateGx4WithJavaMathBigInteger:(JavaMathBigInteger *)gx4;

+ (void)validateMacTagWithNSString:(NSString *)participantId
                      withNSString:(NSString *)partnerParticipantId
            withJavaMathBigInteger:(JavaMathBigInteger *)gx1
            withJavaMathBigInteger:(JavaMathBigInteger *)gx2
            withJavaMathBigInteger:(JavaMathBigInteger *)gx3
            withJavaMathBigInteger:(JavaMathBigInteger *)gx4
            withJavaMathBigInteger:(JavaMathBigInteger *)keyingMaterial
   withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
            withJavaMathBigInteger:(JavaMathBigInteger *)partnerMacTag;

+ (void)validateNotNullWithId:(id)object
                 withNSString:(NSString *)description_;

+ (void)validateParticipantIdsDifferWithNSString:(NSString *)participantId1
                                    withNSString:(NSString *)participantId2;

+ (void)validateParticipantIdsEqualWithNSString:(NSString *)expectedParticipantId
                                   withNSString:(NSString *)actualParticipantId;

+ (void)validateZeroKnowledgeProofWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                  withJavaMathBigInteger:(JavaMathBigInteger *)q
                                  withJavaMathBigInteger:(JavaMathBigInteger *)g
                                  withJavaMathBigInteger:(JavaMathBigInteger *)gx
                             withJavaMathBigIntegerArray:(IOSObjectArray *)zeroKnowledgeProof
                                            withNSString:(NSString *)participantId
                         withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleCryptoAgreementJpakeJPAKEUtil)

inline JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_get_ZERO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoAgreementJpakeJPAKEUtil, ZERO, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_get_ONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoAgreementJpakeJPAKEUtil, ONE, JavaMathBigInteger *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_init(OrgSpongycastleCryptoAgreementJpakeJPAKEUtil *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoAgreementJpakeJPAKEUtil *new_OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoAgreementJpakeJPAKEUtil *create_OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_init(void);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_generateX1WithJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *q, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_generateX2WithJavaMathBigInteger_withJavaSecuritySecureRandom_(JavaMathBigInteger *q, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateSWithCharArray_(IOSCharArray *password);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateGxWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *g, JavaMathBigInteger *x);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateGAWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *gx1, JavaMathBigInteger *gx3, JavaMathBigInteger *gx4);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateX2sWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *q, JavaMathBigInteger *x2, JavaMathBigInteger *s);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateAWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *gA, JavaMathBigInteger *x2s);

FOUNDATION_EXPORT IOSObjectArray *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withNSString_withOrgSpongycastleCryptoDigest_withJavaSecuritySecureRandom_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, JavaMathBigInteger *gx, JavaMathBigInteger *x, NSString *participantId, id<OrgSpongycastleCryptoDigest> digest, JavaSecuritySecureRandom *random);

FOUNDATION_EXPORT void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateGx4WithJavaMathBigInteger_(JavaMathBigInteger *gx4);

FOUNDATION_EXPORT void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateGaWithJavaMathBigInteger_(JavaMathBigInteger *ga);

FOUNDATION_EXPORT void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateZeroKnowledgeProofWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigIntegerArray_withNSString_withOrgSpongycastleCryptoDigest_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *g, JavaMathBigInteger *gx, IOSObjectArray *zeroKnowledgeProof, NSString *participantId, id<OrgSpongycastleCryptoDigest> digest);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateKeyingMaterialWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *p, JavaMathBigInteger *q, JavaMathBigInteger *gx4, JavaMathBigInteger *x2, JavaMathBigInteger *s, JavaMathBigInteger *B);

FOUNDATION_EXPORT void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateParticipantIdsDifferWithNSString_withNSString_(NSString *participantId1, NSString *participantId2);

FOUNDATION_EXPORT void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateParticipantIdsEqualWithNSString_withNSString_(NSString *expectedParticipantId, NSString *actualParticipantId);

FOUNDATION_EXPORT void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateNotNullWithId_withNSString_(id object, NSString *description_);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_calculateMacTagWithNSString_withNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoDigest_(NSString *participantId, NSString *partnerParticipantId, JavaMathBigInteger *gx1, JavaMathBigInteger *gx2, JavaMathBigInteger *gx3, JavaMathBigInteger *gx4, JavaMathBigInteger *keyingMaterial, id<OrgSpongycastleCryptoDigest> digest);

FOUNDATION_EXPORT void OrgSpongycastleCryptoAgreementJpakeJPAKEUtil_validateMacTagWithNSString_withNSString_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoDigest_withJavaMathBigInteger_(NSString *participantId, NSString *partnerParticipantId, JavaMathBigInteger *gx1, JavaMathBigInteger *gx2, JavaMathBigInteger *gx3, JavaMathBigInteger *gx4, JavaMathBigInteger *keyingMaterial, id<OrgSpongycastleCryptoDigest> digest, JavaMathBigInteger *partnerMacTag);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoAgreementJpakeJPAKEUtil)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoAgreementJpakeJPAKEUtil")
