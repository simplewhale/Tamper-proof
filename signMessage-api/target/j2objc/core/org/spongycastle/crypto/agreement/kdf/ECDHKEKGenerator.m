//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/agreement/kdf/ECDHKEKGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/asn1/ASN1EncodableVector.h"
#include "org/spongycastle/asn1/ASN1Encoding.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/spongycastle/asn1/DERNull.h"
#include "org/spongycastle/asn1/DEROctetString.h"
#include "org/spongycastle/asn1/DERSequence.h"
#include "org/spongycastle/asn1/DERTaggedObject.h"
#include "org/spongycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/spongycastle/crypto/DerivationParameters.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/DigestDerivationFunction.h"
#include "org/spongycastle/crypto/agreement/kdf/DHKDFParameters.h"
#include "org/spongycastle/crypto/agreement/kdf/ECDHKEKGenerator.h"
#include "org/spongycastle/crypto/generators/KDF2BytesGenerator.h"
#include "org/spongycastle/crypto/params/KDFParameters.h"
#include "org/spongycastle/util/Pack.h"

@interface OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator () {
 @public
  id<OrgSpongycastleCryptoDigestDerivationFunction> kdf_;
  OrgSpongycastleAsn1ASN1ObjectIdentifier *algorithm_;
  jint keySize_;
  IOSByteArray *z_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator, kdf_, id<OrgSpongycastleCryptoDigestDerivationFunction>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator, algorithm_, OrgSpongycastleAsn1ASN1ObjectIdentifier *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator, z_, IOSByteArray *)

@implementation OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator_initWithOrgSpongycastleCryptoDigest_(self, digest);
  return self;
}

- (void)init__WithOrgSpongycastleCryptoDerivationParameters:(id<OrgSpongycastleCryptoDerivationParameters>)param {
  OrgSpongycastleCryptoAgreementKdfDHKDFParameters *params = (OrgSpongycastleCryptoAgreementKdfDHKDFParameters *) cast_chk(param, [OrgSpongycastleCryptoAgreementKdfDHKDFParameters class]);
  self->algorithm_ = [((OrgSpongycastleCryptoAgreementKdfDHKDFParameters *) nil_chk(params)) getAlgorithm];
  self->keySize_ = [params getKeySize];
  self->z_ = [params getZ];
}

- (id<OrgSpongycastleCryptoDigest>)getDigest {
  return [((id<OrgSpongycastleCryptoDigestDerivationFunction>) nil_chk(kdf_)) getDigest];
}

- (jint)generateBytesWithByteArray:(IOSByteArray *)outArg
                           withInt:(jint)outOff
                           withInt:(jint)len {
  OrgSpongycastleAsn1ASN1EncodableVector *v = new_OrgSpongycastleAsn1ASN1EncodableVector_init();
  [v addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1X509AlgorithmIdentifier_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Encodable_(algorithm_, JreLoadStatic(OrgSpongycastleAsn1DERNull, INSTANCE))];
  [v addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1DERTaggedObject_initWithBoolean_withInt_withOrgSpongycastleAsn1ASN1Encodable_(true, 2, new_OrgSpongycastleAsn1DEROctetString_initWithByteArray_(OrgSpongycastleUtilPack_intToBigEndianWithInt_(keySize_)))];
  @try {
    [((id<OrgSpongycastleCryptoDigestDerivationFunction>) nil_chk(kdf_)) init__WithOrgSpongycastleCryptoDerivationParameters:new_OrgSpongycastleCryptoParamsKDFParameters_initWithByteArray_withByteArray_(z_, [new_OrgSpongycastleAsn1DERSequence_initWithOrgSpongycastleAsn1ASN1EncodableVector_(v) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER])];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unable to initialise kdf: ", [e getMessage]));
  }
  return [((id<OrgSpongycastleCryptoDigestDerivationFunction>) nil_chk(kdf_)) generateBytesWithByteArray:outArg withInt:outOff withInt:len];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoDigest:);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoDerivationParameters:);
  methods[2].selector = @selector(getDigest);
  methods[3].selector = @selector(generateBytesWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "kdf_", "LOrgSpongycastleCryptoDigestDerivationFunction;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "algorithm_", "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keySize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "z_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDigest;", "init", "LOrgSpongycastleCryptoDerivationParameters;", "generateBytes", "[BII", "LOrgSpongycastleCryptoDataLengthException;LJavaLangIllegalArgumentException;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator = { "ECDHKEKGenerator", "org.spongycastle.crypto.agreement.kdf", ptrTable, methods, fields, 7, 0x1, 4, 4, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator;
}

@end

void OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator_initWithOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator *self, id<OrgSpongycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->kdf_ = new_OrgSpongycastleCryptoGeneratorsKDF2BytesGenerator_initWithOrgSpongycastleCryptoDigest_(digest);
}

OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator *new_OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator, initWithOrgSpongycastleCryptoDigest_, digest)
}

OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator *create_OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator, initWithOrgSpongycastleCryptoDigest_, digest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoAgreementKdfECDHKEKGenerator)
