//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/util/PublicKeyFactory.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/asn1/ASN1Encodable.h"
#include "org/spongycastle/asn1/ASN1InputStream.h"
#include "org/spongycastle/asn1/ASN1Integer.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/spongycastle/asn1/ASN1OctetString.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/DERBitString.h"
#include "org/spongycastle/asn1/DEROctetString.h"
#include "org/spongycastle/asn1/oiw/ElGamalParameter.h"
#include "org/spongycastle/asn1/oiw/OIWObjectIdentifiers.h"
#include "org/spongycastle/asn1/pkcs/DHParameter.h"
#include "org/spongycastle/asn1/pkcs/PKCSObjectIdentifiers.h"
#include "org/spongycastle/asn1/pkcs/RSAPublicKey.h"
#include "org/spongycastle/asn1/x509/AlgorithmIdentifier.h"
#include "org/spongycastle/asn1/x509/DSAParameter.h"
#include "org/spongycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/spongycastle/asn1/x509/X509ObjectIdentifiers.h"
#include "org/spongycastle/asn1/x9/DHPublicKey.h"
#include "org/spongycastle/asn1/x9/DomainParameters.h"
#include "org/spongycastle/asn1/x9/ECNamedCurveTable.h"
#include "org/spongycastle/asn1/x9/ValidationParams.h"
#include "org/spongycastle/asn1/x9/X962Parameters.h"
#include "org/spongycastle/asn1/x9/X9ECParameters.h"
#include "org/spongycastle/asn1/x9/X9ECPoint.h"
#include "org/spongycastle/asn1/x9/X9ObjectIdentifiers.h"
#include "org/spongycastle/crypto/ec/CustomNamedCurves.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/DHParameters.h"
#include "org/spongycastle/crypto/params/DHPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/DHValidationParameters.h"
#include "org/spongycastle/crypto/params/DSAParameters.h"
#include "org/spongycastle/crypto/params/DSAPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECNamedDomainParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/ElGamalParameters.h"
#include "org/spongycastle/crypto/params/ElGamalPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/RSAKeyParameters.h"
#include "org/spongycastle/crypto/util/PublicKeyFactory.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECPoint.h"

@implementation OrgSpongycastleCryptoUtilPublicKeyFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoUtilPublicKeyFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithByteArray:(IOSByteArray *)keyInfoData {
  return OrgSpongycastleCryptoUtilPublicKeyFactory_createKeyWithByteArray_(keyInfoData);
}

+ (OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithJavaIoInputStream:(JavaIoInputStream *)inStr {
  return OrgSpongycastleCryptoUtilPublicKeyFactory_createKeyWithJavaIoInputStream_(inStr);
}

+ (OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)createKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo:(OrgSpongycastleAsn1X509SubjectPublicKeyInfo *)keyInfo {
  return OrgSpongycastleCryptoUtilPublicKeyFactory_createKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(keyInfo);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 3, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", 0x9, 0, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createKeyWithByteArray:);
  methods[2].selector = @selector(createKeyWithJavaIoInputStream:);
  methods[3].selector = @selector(createKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createKey", "[B", "LJavaIoIOException;", "LJavaIoInputStream;", "LOrgSpongycastleAsn1X509SubjectPublicKeyInfo;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoUtilPublicKeyFactory = { "PublicKeyFactory", "org.spongycastle.crypto.util", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoUtilPublicKeyFactory;
}

@end

void OrgSpongycastleCryptoUtilPublicKeyFactory_init(OrgSpongycastleCryptoUtilPublicKeyFactory *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoUtilPublicKeyFactory *new_OrgSpongycastleCryptoUtilPublicKeyFactory_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoUtilPublicKeyFactory, init)
}

OrgSpongycastleCryptoUtilPublicKeyFactory *create_OrgSpongycastleCryptoUtilPublicKeyFactory_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoUtilPublicKeyFactory, init)
}

OrgSpongycastleCryptoParamsAsymmetricKeyParameter *OrgSpongycastleCryptoUtilPublicKeyFactory_createKeyWithByteArray_(IOSByteArray *keyInfoData) {
  OrgSpongycastleCryptoUtilPublicKeyFactory_initialize();
  return OrgSpongycastleCryptoUtilPublicKeyFactory_createKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(OrgSpongycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_(OrgSpongycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(keyInfoData)));
}

OrgSpongycastleCryptoParamsAsymmetricKeyParameter *OrgSpongycastleCryptoUtilPublicKeyFactory_createKeyWithJavaIoInputStream_(JavaIoInputStream *inStr) {
  OrgSpongycastleCryptoUtilPublicKeyFactory_initialize();
  return OrgSpongycastleCryptoUtilPublicKeyFactory_createKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(OrgSpongycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_([new_OrgSpongycastleAsn1ASN1InputStream_initWithJavaIoInputStream_(inStr) readObject]));
}

OrgSpongycastleCryptoParamsAsymmetricKeyParameter *OrgSpongycastleCryptoUtilPublicKeyFactory_createKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(OrgSpongycastleAsn1X509SubjectPublicKeyInfo *keyInfo) {
  OrgSpongycastleCryptoUtilPublicKeyFactory_initialize();
  OrgSpongycastleAsn1X509AlgorithmIdentifier *algId = [((OrgSpongycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(keyInfo)) getAlgorithm];
  if ([((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk(algId)) getAlgorithm])) isEqual:JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, rsaEncryption)] || [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:JreLoadStatic(OrgSpongycastleAsn1X509X509ObjectIdentifiers, id_ea_rsa)]) {
    OrgSpongycastleAsn1PkcsRSAPublicKey *pubKey = OrgSpongycastleAsn1PkcsRSAPublicKey_getInstanceWithId_([keyInfo parsePublicKey]);
    return new_OrgSpongycastleCryptoParamsRSAKeyParameters_initWithBoolean_withJavaMathBigInteger_withJavaMathBigInteger_(false, [((OrgSpongycastleAsn1PkcsRSAPublicKey *) nil_chk(pubKey)) getModulus], [pubKey getPublicExponent]);
  }
  else if ([((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:JreLoadStatic(OrgSpongycastleAsn1X9X9ObjectIdentifiers, dhpublicnumber)]) {
    OrgSpongycastleAsn1X9DHPublicKey *dhPublicKey = OrgSpongycastleAsn1X9DHPublicKey_getInstanceWithId_([keyInfo parsePublicKey]);
    JavaMathBigInteger *y = [((OrgSpongycastleAsn1X9DHPublicKey *) nil_chk(dhPublicKey)) getY];
    OrgSpongycastleAsn1X9DomainParameters *dhParams = OrgSpongycastleAsn1X9DomainParameters_getInstanceWithId_([algId getParameters]);
    JavaMathBigInteger *p = [((OrgSpongycastleAsn1X9DomainParameters *) nil_chk(dhParams)) getP];
    JavaMathBigInteger *g = [dhParams getG];
    JavaMathBigInteger *q = [dhParams getQ];
    JavaMathBigInteger *j = nil;
    if ([dhParams getJ] != nil) {
      j = [dhParams getJ];
    }
    OrgSpongycastleCryptoParamsDHValidationParameters *validation = nil;
    OrgSpongycastleAsn1X9ValidationParams *dhValidationParms = [dhParams getValidationParams];
    if (dhValidationParms != nil) {
      IOSByteArray *seed = [dhValidationParms getSeed];
      JavaMathBigInteger *pgenCounter = [dhValidationParms getPgenCounter];
      validation = new_OrgSpongycastleCryptoParamsDHValidationParameters_initWithByteArray_withInt_(seed, [((JavaMathBigInteger *) nil_chk(pgenCounter)) intValue]);
    }
    return new_OrgSpongycastleCryptoParamsDHPublicKeyParameters_initWithJavaMathBigInteger_withOrgSpongycastleCryptoParamsDHParameters_(y, new_OrgSpongycastleCryptoParamsDHParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withOrgSpongycastleCryptoParamsDHValidationParameters_(p, g, q, j, validation));
  }
  else if ([((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, dhKeyAgreement)]) {
    OrgSpongycastleAsn1PkcsDHParameter *params = OrgSpongycastleAsn1PkcsDHParameter_getInstanceWithId_([algId getParameters]);
    OrgSpongycastleAsn1ASN1Integer *derY = (OrgSpongycastleAsn1ASN1Integer *) cast_chk([keyInfo parsePublicKey], [OrgSpongycastleAsn1ASN1Integer class]);
    JavaMathBigInteger *lVal = [((OrgSpongycastleAsn1PkcsDHParameter *) nil_chk(params)) getL];
    jint l = lVal == nil ? 0 : [lVal intValue];
    OrgSpongycastleCryptoParamsDHParameters *dhParams = new_OrgSpongycastleCryptoParamsDHParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withInt_([params getP], [params getG], nil, l);
    return new_OrgSpongycastleCryptoParamsDHPublicKeyParameters_initWithJavaMathBigInteger_withOrgSpongycastleCryptoParamsDHParameters_([((OrgSpongycastleAsn1ASN1Integer *) nil_chk(derY)) getValue], dhParams);
  }
  else if ([((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:JreLoadStatic(OrgSpongycastleAsn1OiwOIWObjectIdentifiers, elGamalAlgorithm)]) {
    OrgSpongycastleAsn1OiwElGamalParameter *params = OrgSpongycastleAsn1OiwElGamalParameter_getInstanceWithId_([algId getParameters]);
    OrgSpongycastleAsn1ASN1Integer *derY = (OrgSpongycastleAsn1ASN1Integer *) cast_chk([keyInfo parsePublicKey], [OrgSpongycastleAsn1ASN1Integer class]);
    return new_OrgSpongycastleCryptoParamsElGamalPublicKeyParameters_initWithJavaMathBigInteger_withOrgSpongycastleCryptoParamsElGamalParameters_([((OrgSpongycastleAsn1ASN1Integer *) nil_chk(derY)) getValue], new_OrgSpongycastleCryptoParamsElGamalParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_([((OrgSpongycastleAsn1OiwElGamalParameter *) nil_chk(params)) getP], [params getG]));
  }
  else if ([((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:JreLoadStatic(OrgSpongycastleAsn1X9X9ObjectIdentifiers, id_dsa)] || [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:JreLoadStatic(OrgSpongycastleAsn1OiwOIWObjectIdentifiers, dsaWithSHA1)]) {
    OrgSpongycastleAsn1ASN1Integer *derY = (OrgSpongycastleAsn1ASN1Integer *) cast_chk([keyInfo parsePublicKey], [OrgSpongycastleAsn1ASN1Integer class]);
    id<OrgSpongycastleAsn1ASN1Encodable> de = [algId getParameters];
    OrgSpongycastleCryptoParamsDSAParameters *parameters = nil;
    if (de != nil) {
      OrgSpongycastleAsn1X509DSAParameter *params = OrgSpongycastleAsn1X509DSAParameter_getInstanceWithId_([de toASN1Primitive]);
      parameters = new_OrgSpongycastleCryptoParamsDSAParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_([((OrgSpongycastleAsn1X509DSAParameter *) nil_chk(params)) getP], [params getQ], [params getG]);
    }
    return new_OrgSpongycastleCryptoParamsDSAPublicKeyParameters_initWithJavaMathBigInteger_withOrgSpongycastleCryptoParamsDSAParameters_([((OrgSpongycastleAsn1ASN1Integer *) nil_chk(derY)) getValue], parameters);
  }
  else if ([((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([algId getAlgorithm])) isEqual:JreLoadStatic(OrgSpongycastleAsn1X9X9ObjectIdentifiers, id_ecPublicKey)]) {
    OrgSpongycastleAsn1X9X962Parameters *params = OrgSpongycastleAsn1X9X962Parameters_getInstanceWithId_([algId getParameters]);
    OrgSpongycastleAsn1X9X9ECParameters *x9;
    OrgSpongycastleCryptoParamsECDomainParameters *dParams;
    if ([((OrgSpongycastleAsn1X9X962Parameters *) nil_chk(params)) isNamedCurve]) {
      OrgSpongycastleAsn1ASN1ObjectIdentifier *oid = (OrgSpongycastleAsn1ASN1ObjectIdentifier *) cast_chk([params getParameters], [OrgSpongycastleAsn1ASN1ObjectIdentifier class]);
      x9 = OrgSpongycastleCryptoEcCustomNamedCurves_getByOIDWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
      if (x9 == nil) {
        x9 = OrgSpongycastleAsn1X9ECNamedCurveTable_getByOIDWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(oid);
      }
      dParams = new_OrgSpongycastleCryptoParamsECNamedDomainParameters_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_(oid, [((OrgSpongycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve], [x9 getG], [x9 getN], [x9 getH], [x9 getSeed]);
    }
    else {
      x9 = OrgSpongycastleAsn1X9X9ECParameters_getInstanceWithId_([params getParameters]);
      dParams = new_OrgSpongycastleCryptoParamsECDomainParameters_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([((OrgSpongycastleAsn1X9X9ECParameters *) nil_chk(x9)) getCurve], [x9 getG], [x9 getN], [x9 getH], [x9 getSeed]);
    }
    OrgSpongycastleAsn1ASN1OctetString *key = new_OrgSpongycastleAsn1DEROctetString_initWithByteArray_([((OrgSpongycastleAsn1DERBitString *) nil_chk([keyInfo getPublicKeyData])) getBytes]);
    OrgSpongycastleAsn1X9X9ECPoint *derQ = new_OrgSpongycastleAsn1X9X9ECPoint_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleAsn1ASN1OctetString_([x9 getCurve], key);
    return new_OrgSpongycastleCryptoParamsECPublicKeyParameters_initWithOrgSpongycastleMathEcECPoint_withOrgSpongycastleCryptoParamsECDomainParameters_([derQ getPoint], dParams);
  }
  else {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"algorithm identifier in key not recognised");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoUtilPublicKeyFactory)
