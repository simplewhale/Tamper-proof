//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/prng/drbg/CTRSP800DRBG.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/prng/EntropySource.h"
#include "org/spongycastle/crypto/prng/drbg/CTRSP800DRBG.h"
#include "org/spongycastle/crypto/prng/drbg/Utils.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/encoders/Hex.h"

@interface OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG () {
 @public
  id<OrgSpongycastleCryptoPrngEntropySource> _entropySource_;
  id<OrgSpongycastleCryptoBlockCipher> _engine_;
  jint _keySizeInBits_;
  jint _seedLength_;
  jint _securityStrength_;
  IOSByteArray *_Key_;
  IOSByteArray *_V_;
  jlong _reseedCounter_;
  jboolean _isTDEA_;
}

- (void)CTR_DRBG_Instantiate_algorithmWithByteArray:(IOSByteArray *)entropy
                                      withByteArray:(IOSByteArray *)nonce
                                      withByteArray:(IOSByteArray *)personalisationString;

- (void)CTR_DRBG_UpdateWithByteArray:(IOSByteArray *)seed
                       withByteArray:(IOSByteArray *)key
                       withByteArray:(IOSByteArray *)v;

- (void)CTR_DRBG_Reseed_algorithmWithByteArray:(IOSByteArray *)additionalInput;

- (void)XORWithByteArray:(IOSByteArray *)outArg
           withByteArray:(IOSByteArray *)a
           withByteArray:(IOSByteArray *)b
                 withInt:(jint)bOff;

- (void)addOneToWithByteArray:(IOSByteArray *)longer;

- (IOSByteArray *)getEntropy;

- (IOSByteArray *)Block_Cipher_dfWithByteArray:(IOSByteArray *)inputString
                                       withInt:(jint)bitLength;

- (void)BCCWithByteArray:(IOSByteArray *)bccOut
           withByteArray:(IOSByteArray *)k
           withByteArray:(IOSByteArray *)iV
           withByteArray:(IOSByteArray *)data;

- (void)copyIntToByteArrayWithByteArray:(IOSByteArray *)buf
                                withInt:(jint)value
                                withInt:(jint)offSet OBJC_METHOD_FAMILY_NONE;

- (jboolean)isTDEAWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher;

- (jint)getMaxSecurityStrengthWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher
                                                           withInt:(jint)keySizeInBits;

- (void)padKeyWithByteArray:(IOSByteArray *)keyMaster
                    withInt:(jint)keyOff
              withByteArray:(IOSByteArray *)tmp
                    withInt:(jint)tmpOff;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG, _entropySource_, id<OrgSpongycastleCryptoPrngEntropySource>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG, _engine_, id<OrgSpongycastleCryptoBlockCipher>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG, _Key_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG, _V_, IOSByteArray *)

inline jlong OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_get_TDEA_RESEED_MAX(void);
#define OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_TDEA_RESEED_MAX 2147483648LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG, TDEA_RESEED_MAX, jlong)

inline jlong OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_get_AES_RESEED_MAX(void);
#define OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_AES_RESEED_MAX 140737488355328LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG, AES_RESEED_MAX, jlong)

inline jint OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_get_TDEA_MAX_BITS_REQUEST(void);
#define OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_TDEA_MAX_BITS_REQUEST 4096
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG, TDEA_MAX_BITS_REQUEST, jint)

inline jint OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_get_AES_MAX_BITS_REQUEST(void);
#define OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_AES_MAX_BITS_REQUEST 262144
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG, AES_MAX_BITS_REQUEST, jint)

inline IOSByteArray *OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_get_K_BITS(void);
static IOSByteArray *OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_K_BITS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG, K_BITS, IOSByteArray *)

__attribute__((unused)) static void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_Instantiate_algorithmWithByteArray_withByteArray_withByteArray_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *entropy, IOSByteArray *nonce, IOSByteArray *personalisationString);

__attribute__((unused)) static void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_UpdateWithByteArray_withByteArray_withByteArray_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *seed, IOSByteArray *key, IOSByteArray *v);

__attribute__((unused)) static void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_Reseed_algorithmWithByteArray_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *additionalInput);

__attribute__((unused)) static void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_XORWithByteArray_withByteArray_withByteArray_withInt_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *outArg, IOSByteArray *a, IOSByteArray *b, jint bOff);

__attribute__((unused)) static void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_addOneToWithByteArray_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *longer);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_getEntropy(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_Block_Cipher_dfWithByteArray_withInt_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *inputString, jint bitLength);

__attribute__((unused)) static void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_BCCWithByteArray_withByteArray_withByteArray_withByteArray_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *bccOut, IOSByteArray *k, IOSByteArray *iV, IOSByteArray *data);

__attribute__((unused)) static void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_copyIntToByteArrayWithByteArray_withInt_withInt_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *buf, jint value, jint offSet);

__attribute__((unused)) static jboolean OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_isTDEAWithOrgSpongycastleCryptoBlockCipher_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, id<OrgSpongycastleCryptoBlockCipher> cipher);

__attribute__((unused)) static jint OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_getMaxSecurityStrengthWithOrgSpongycastleCryptoBlockCipher_withInt_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, id<OrgSpongycastleCryptoBlockCipher> cipher, jint keySizeInBits);

__attribute__((unused)) static void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_padKeyWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *keyMaster, jint keyOff, IOSByteArray *tmp, jint tmpOff);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG)

@implementation OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)engine
                                                 withInt:(jint)keySizeInBits
                                                 withInt:(jint)securityStrength
              withOrgSpongycastleCryptoPrngEntropySource:(id<OrgSpongycastleCryptoPrngEntropySource>)entropySource
                                           withByteArray:(IOSByteArray *)personalizationString
                                           withByteArray:(IOSByteArray *)nonce {
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_withOrgSpongycastleCryptoPrngEntropySource_withByteArray_withByteArray_(self, engine, keySizeInBits, securityStrength, entropySource, personalizationString, nonce);
  return self;
}

- (void)CTR_DRBG_Instantiate_algorithmWithByteArray:(IOSByteArray *)entropy
                                      withByteArray:(IOSByteArray *)nonce
                                      withByteArray:(IOSByteArray *)personalisationString {
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_Instantiate_algorithmWithByteArray_withByteArray_withByteArray_(self, entropy, nonce, personalisationString);
}

- (void)CTR_DRBG_UpdateWithByteArray:(IOSByteArray *)seed
                       withByteArray:(IOSByteArray *)key
                       withByteArray:(IOSByteArray *)v {
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_UpdateWithByteArray_withByteArray_withByteArray_(self, seed, key, v);
}

- (void)CTR_DRBG_Reseed_algorithmWithByteArray:(IOSByteArray *)additionalInput {
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_Reseed_algorithmWithByteArray_(self, additionalInput);
}

- (void)XORWithByteArray:(IOSByteArray *)outArg
           withByteArray:(IOSByteArray *)a
           withByteArray:(IOSByteArray *)b
                 withInt:(jint)bOff {
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_XORWithByteArray_withByteArray_withByteArray_withInt_(self, outArg, a, b, bOff);
}

- (void)addOneToWithByteArray:(IOSByteArray *)longer {
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_addOneToWithByteArray_(self, longer);
}

- (IOSByteArray *)getEntropy {
  return OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_getEntropy(self);
}

- (IOSByteArray *)Block_Cipher_dfWithByteArray:(IOSByteArray *)inputString
                                       withInt:(jint)bitLength {
  return OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_Block_Cipher_dfWithByteArray_withInt_(self, inputString, bitLength);
}

- (void)BCCWithByteArray:(IOSByteArray *)bccOut
           withByteArray:(IOSByteArray *)k
           withByteArray:(IOSByteArray *)iV
           withByteArray:(IOSByteArray *)data {
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_BCCWithByteArray_withByteArray_withByteArray_withByteArray_(self, bccOut, k, iV, data);
}

- (void)copyIntToByteArrayWithByteArray:(IOSByteArray *)buf
                                withInt:(jint)value
                                withInt:(jint)offSet {
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_copyIntToByteArrayWithByteArray_withInt_withInt_(self, buf, value, offSet);
}

- (jint)getBlockSize {
  return ((IOSByteArray *) nil_chk(_V_))->size_ * 8;
}

- (jint)generateWithByteArray:(IOSByteArray *)output
                withByteArray:(IOSByteArray *)additionalInput
                  withBoolean:(jboolean)predictionResistant {
  if (_isTDEA_) {
    if (_reseedCounter_ > OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_TDEA_RESEED_MAX) {
      return -1;
    }
    if (OrgSpongycastleCryptoPrngDrbgUtils_isTooLargeWithByteArray_withInt_(output, OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_TDEA_MAX_BITS_REQUEST / 8)) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Number of bits per request limited to ", OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_TDEA_MAX_BITS_REQUEST));
    }
  }
  else {
    if (_reseedCounter_ > OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_AES_RESEED_MAX) {
      return -1;
    }
    if (OrgSpongycastleCryptoPrngDrbgUtils_isTooLargeWithByteArray_withInt_(output, OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_AES_MAX_BITS_REQUEST / 8)) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Number of bits per request limited to ", OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_AES_MAX_BITS_REQUEST));
    }
  }
  if (predictionResistant) {
    OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_Reseed_algorithmWithByteArray_(self, additionalInput);
    additionalInput = nil;
  }
  if (additionalInput != nil) {
    additionalInput = OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_Block_Cipher_dfWithByteArray_withInt_(self, additionalInput, _seedLength_);
    OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_UpdateWithByteArray_withByteArray_withByteArray_(self, additionalInput, _Key_, _V_);
  }
  else {
    additionalInput = [IOSByteArray newArrayWithLength:_seedLength_];
  }
  IOSByteArray *out = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(_V_))->size_];
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(_engine_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_([self expandKeyWithByteArray:_Key_])];
  for (jint i = 0; i <= ((IOSByteArray *) nil_chk(output))->size_ / out->size_; i++) {
    jint bytesToCopy = ((output->size_ - i * out->size_) > out->size_) ? out->size_ : (output->size_ - i * ((IOSByteArray *) nil_chk(_V_))->size_);
    if (bytesToCopy != 0) {
      OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_addOneToWithByteArray_(self, _V_);
      [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(_engine_)) processBlockWithByteArray:_V_ withInt:0 withByteArray:out withInt:0];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(out, 0, output, i * out->size_, bytesToCopy);
    }
  }
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_UpdateWithByteArray_withByteArray_withByteArray_(self, additionalInput, _Key_, _V_);
  _reseedCounter_++;
  return output->size_ * 8;
}

- (void)reseedWithByteArray:(IOSByteArray *)additionalInput {
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_Reseed_algorithmWithByteArray_(self, additionalInput);
}

- (jboolean)isTDEAWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher {
  return OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_isTDEAWithOrgSpongycastleCryptoBlockCipher_(self, cipher);
}

- (jint)getMaxSecurityStrengthWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)cipher
                                                           withInt:(jint)keySizeInBits {
  return OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_getMaxSecurityStrengthWithOrgSpongycastleCryptoBlockCipher_withInt_(self, cipher, keySizeInBits);
}

- (IOSByteArray *)expandKeyWithByteArray:(IOSByteArray *)key {
  if (_isTDEA_) {
    IOSByteArray *tmp = [IOSByteArray newArrayWithLength:24];
    OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_padKeyWithByteArray_withInt_withByteArray_withInt_(self, key, 0, tmp, 0);
    OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_padKeyWithByteArray_withInt_withByteArray_withInt_(self, key, 7, tmp, 8);
    OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_padKeyWithByteArray_withInt_withByteArray_withInt_(self, key, 14, tmp, 16);
    return tmp;
  }
  else {
    return key;
  }
}

- (void)padKeyWithByteArray:(IOSByteArray *)keyMaster
                    withInt:(jint)keyOff
              withByteArray:(IOSByteArray *)tmp
                    withInt:(jint)tmpOff {
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_padKeyWithByteArray_withInt_withByteArray_withInt_(self, keyMaster, keyOff, tmp, tmpOff);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 22, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 24, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:withInt:withInt:withOrgSpongycastleCryptoPrngEntropySource:withByteArray:withByteArray:);
  methods[1].selector = @selector(CTR_DRBG_Instantiate_algorithmWithByteArray:withByteArray:withByteArray:);
  methods[2].selector = @selector(CTR_DRBG_UpdateWithByteArray:withByteArray:withByteArray:);
  methods[3].selector = @selector(CTR_DRBG_Reseed_algorithmWithByteArray:);
  methods[4].selector = @selector(XORWithByteArray:withByteArray:withByteArray:withInt:);
  methods[5].selector = @selector(addOneToWithByteArray:);
  methods[6].selector = @selector(getEntropy);
  methods[7].selector = @selector(Block_Cipher_dfWithByteArray:withInt:);
  methods[8].selector = @selector(BCCWithByteArray:withByteArray:withByteArray:withByteArray:);
  methods[9].selector = @selector(copyIntToByteArrayWithByteArray:withInt:withInt:);
  methods[10].selector = @selector(getBlockSize);
  methods[11].selector = @selector(generateWithByteArray:withByteArray:withBoolean:);
  methods[12].selector = @selector(reseedWithByteArray:);
  methods[13].selector = @selector(isTDEAWithOrgSpongycastleCryptoBlockCipher:);
  methods[14].selector = @selector(getMaxSecurityStrengthWithOrgSpongycastleCryptoBlockCipher:withInt:);
  methods[15].selector = @selector(expandKeyWithByteArray:);
  methods[16].selector = @selector(padKeyWithByteArray:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TDEA_RESEED_MAX", "J", .constantValue.asLong = OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_TDEA_RESEED_MAX, 0x1a, -1, -1, -1, -1 },
    { "AES_RESEED_MAX", "J", .constantValue.asLong = OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_AES_RESEED_MAX, 0x1a, -1, -1, -1, -1 },
    { "TDEA_MAX_BITS_REQUEST", "I", .constantValue.asInt = OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_TDEA_MAX_BITS_REQUEST, 0x1a, -1, -1, -1, -1 },
    { "AES_MAX_BITS_REQUEST", "I", .constantValue.asInt = OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_AES_MAX_BITS_REQUEST, 0x1a, -1, -1, -1, -1 },
    { "_entropySource_", "LOrgSpongycastleCryptoPrngEntropySource;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_engine_", "LOrgSpongycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_keySizeInBits_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_seedLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_securityStrength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_Key_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_V_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_reseedCounter_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_isTDEA_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "K_BITS", "[B", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoBlockCipher;IILOrgSpongycastleCryptoPrngEntropySource;[B[B", "CTR_DRBG_Instantiate_algorithm", "[B[B[B", "CTR_DRBG_Update", "CTR_DRBG_Reseed_algorithm", "[B", "XOR", "[B[B[BI", "addOneTo", "Block_Cipher_df", "[BI", "BCC", "[B[B[B[B", "copyIntToByteArray", "[BII", "generate", "[B[BZ", "reseed", "isTDEA", "LOrgSpongycastleCryptoBlockCipher;", "getMaxSecurityStrength", "LOrgSpongycastleCryptoBlockCipher;I", "expandKey", "padKey", "[BI[BI", &OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_K_BITS };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG = { "CTRSP800DRBG", "org.spongycastle.crypto.prng.drbg", ptrTable, methods, fields, 7, 0x1, 17, 14, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG class]) {
    OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_K_BITS = OrgSpongycastleUtilEncodersHex_decodeWithNSString_(@"000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F");
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG)
  }
}

@end

void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_withOrgSpongycastleCryptoPrngEntropySource_withByteArray_withByteArray_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, id<OrgSpongycastleCryptoBlockCipher> engine, jint keySizeInBits, jint securityStrength, id<OrgSpongycastleCryptoPrngEntropySource> entropySource, IOSByteArray *personalizationString, IOSByteArray *nonce) {
  NSObject_init(self);
  self->_reseedCounter_ = 0;
  self->_isTDEA_ = false;
  self->_entropySource_ = entropySource;
  self->_engine_ = engine;
  self->_keySizeInBits_ = keySizeInBits;
  self->_securityStrength_ = securityStrength;
  self->_seedLength_ = keySizeInBits + [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine)) getBlockSize] * 8;
  self->_isTDEA_ = OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_isTDEAWithOrgSpongycastleCryptoBlockCipher_(self, engine);
  if (securityStrength > 256) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Requested security strength is not supported by the derivation function");
  }
  if (OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_getMaxSecurityStrengthWithOrgSpongycastleCryptoBlockCipher_withInt_(self, engine, keySizeInBits) < securityStrength) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Requested security strength is not supported by block cipher and key size");
  }
  if ([((id<OrgSpongycastleCryptoPrngEntropySource>) nil_chk(entropySource)) entropySize] < securityStrength) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Not enough entropy for security strength required");
  }
  IOSByteArray *entropy = OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_getEntropy(self);
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_Instantiate_algorithmWithByteArray_withByteArray_withByteArray_(self, entropy, nonce, personalizationString);
}

OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *new_OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_withOrgSpongycastleCryptoPrngEntropySource_withByteArray_withByteArray_(id<OrgSpongycastleCryptoBlockCipher> engine, jint keySizeInBits, jint securityStrength, id<OrgSpongycastleCryptoPrngEntropySource> entropySource, IOSByteArray *personalizationString, IOSByteArray *nonce) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG, initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_withOrgSpongycastleCryptoPrngEntropySource_withByteArray_withByteArray_, engine, keySizeInBits, securityStrength, entropySource, personalizationString, nonce)
}

OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *create_OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_withOrgSpongycastleCryptoPrngEntropySource_withByteArray_withByteArray_(id<OrgSpongycastleCryptoBlockCipher> engine, jint keySizeInBits, jint securityStrength, id<OrgSpongycastleCryptoPrngEntropySource> entropySource, IOSByteArray *personalizationString, IOSByteArray *nonce) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG, initWithOrgSpongycastleCryptoBlockCipher_withInt_withInt_withOrgSpongycastleCryptoPrngEntropySource_withByteArray_withByteArray_, engine, keySizeInBits, securityStrength, entropySource, personalizationString, nonce)
}

void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_Instantiate_algorithmWithByteArray_withByteArray_withByteArray_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *entropy, IOSByteArray *nonce, IOSByteArray *personalisationString) {
  IOSByteArray *seedMaterial = OrgSpongycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_(entropy, nonce, personalisationString);
  IOSByteArray *seed = OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_Block_Cipher_dfWithByteArray_withInt_(self, seedMaterial, self->_seedLength_);
  jint outlen = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->_engine_)) getBlockSize];
  self->_Key_ = [IOSByteArray newArrayWithLength:(self->_keySizeInBits_ + 7) / 8];
  self->_V_ = [IOSByteArray newArrayWithLength:outlen];
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_UpdateWithByteArray_withByteArray_withByteArray_(self, seed, self->_Key_, self->_V_);
  self->_reseedCounter_ = 1;
}

void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_UpdateWithByteArray_withByteArray_withByteArray_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *seed, IOSByteArray *key, IOSByteArray *v) {
  IOSByteArray *temp = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(seed))->size_];
  IOSByteArray *outputBlock = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->_engine_)) getBlockSize]];
  jint i = 0;
  jint outLen = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->_engine_)) getBlockSize];
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->_engine_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_([self expandKeyWithByteArray:key])];
  while (i * outLen < seed->size_) {
    OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_addOneToWithByteArray_(self, v);
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->_engine_)) processBlockWithByteArray:v withInt:0 withByteArray:outputBlock withInt:0];
    jint bytesToCopy = ((temp->size_ - i * outLen) > outLen) ? outLen : (temp->size_ - i * outLen);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(outputBlock, 0, temp, i * outLen, bytesToCopy);
    ++i;
  }
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_XORWithByteArray_withByteArray_withByteArray_withInt_(self, temp, seed, temp, 0);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(temp, 0, key, 0, ((IOSByteArray *) nil_chk(key))->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(temp, key->size_, v, 0, ((IOSByteArray *) nil_chk(v))->size_);
}

void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_Reseed_algorithmWithByteArray_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *additionalInput) {
  IOSByteArray *seedMaterial = OrgSpongycastleUtilArrays_concatenateWithByteArray_withByteArray_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_getEntropy(self), additionalInput);
  seedMaterial = OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_Block_Cipher_dfWithByteArray_withInt_(self, seedMaterial, self->_seedLength_);
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_CTR_DRBG_UpdateWithByteArray_withByteArray_withByteArray_(self, seedMaterial, self->_Key_, self->_V_);
  self->_reseedCounter_ = 1;
}

void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_XORWithByteArray_withByteArray_withByteArray_withInt_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *outArg, IOSByteArray *a, IOSByteArray *b, jint bOff) {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(outArg))->size_; i++) {
    *IOSByteArray_GetRef(outArg, i) = (jbyte) (IOSByteArray_Get(nil_chk(a), i) ^ IOSByteArray_Get(nil_chk(b), i + bOff));
  }
}

void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_addOneToWithByteArray_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *longer) {
  jint carry = 1;
  for (jint i = 1; i <= ((IOSByteArray *) nil_chk(longer))->size_; i++) {
    jint res = (IOSByteArray_Get(longer, longer->size_ - i) & (jint) 0xff) + carry;
    carry = (res > (jint) 0xff) ? 1 : 0;
    *IOSByteArray_GetRef(longer, longer->size_ - i) = (jbyte) res;
  }
}

IOSByteArray *OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_getEntropy(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self) {
  IOSByteArray *entropy = [((id<OrgSpongycastleCryptoPrngEntropySource>) nil_chk(self->_entropySource_)) getEntropy];
  if (((IOSByteArray *) nil_chk(entropy))->size_ < (self->_securityStrength_ + 7) / 8) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Insufficient entropy provided by entropy source");
  }
  return entropy;
}

IOSByteArray *OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_Block_Cipher_dfWithByteArray_withInt_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *inputString, jint bitLength) {
  jint outLen = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->_engine_)) getBlockSize];
  jint L = ((IOSByteArray *) nil_chk(inputString))->size_;
  jint N = bitLength / 8;
  jint sLen = 4 + 4 + L + 1;
  jint blockLen = ((sLen + outLen - 1) / outLen) * outLen;
  IOSByteArray *S = [IOSByteArray newArrayWithLength:blockLen];
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_copyIntToByteArrayWithByteArray_withInt_withInt_(self, S, L, 0);
  OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_copyIntToByteArrayWithByteArray_withInt_withInt_(self, S, N, 4);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inputString, 0, S, 8, L);
  *IOSByteArray_GetRef(S, 8 + L) = (jbyte) (jint) 0x80;
  IOSByteArray *temp = [IOSByteArray newArrayWithLength:self->_keySizeInBits_ / 8 + outLen];
  IOSByteArray *bccOut = [IOSByteArray newArrayWithLength:outLen];
  IOSByteArray *IV = [IOSByteArray newArrayWithLength:outLen];
  jint i = 0;
  IOSByteArray *K = [IOSByteArray newArrayWithLength:self->_keySizeInBits_ / 8];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_K_BITS, 0, K, 0, K->size_);
  while (i * outLen * 8 < self->_keySizeInBits_ + outLen * 8) {
    OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_copyIntToByteArrayWithByteArray_withInt_withInt_(self, IV, i, 0);
    OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_BCCWithByteArray_withByteArray_withByteArray_withByteArray_(self, bccOut, K, IV, S);
    jint bytesToCopy = ((temp->size_ - i * outLen) > outLen) ? outLen : (temp->size_ - i * outLen);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bccOut, 0, temp, i * outLen, bytesToCopy);
    ++i;
  }
  IOSByteArray *X = [IOSByteArray newArrayWithLength:outLen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(temp, 0, K, 0, K->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(temp, K->size_, X, 0, X->size_);
  temp = [IOSByteArray newArrayWithLength:bitLength / 2];
  i = 0;
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->_engine_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_([self expandKeyWithByteArray:K])];
  while (i * outLen < temp->size_) {
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->_engine_)) processBlockWithByteArray:X withInt:0 withByteArray:X withInt:0];
    jint bytesToCopy = ((temp->size_ - i * outLen) > outLen) ? outLen : (temp->size_ - i * outLen);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(X, 0, temp, i * outLen, bytesToCopy);
    i++;
  }
  return temp;
}

void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_BCCWithByteArray_withByteArray_withByteArray_withByteArray_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *bccOut, IOSByteArray *k, IOSByteArray *iV, IOSByteArray *data) {
  jint outlen = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->_engine_)) getBlockSize];
  IOSByteArray *chainingValue = [IOSByteArray newArrayWithLength:outlen];
  jint n = ((IOSByteArray *) nil_chk(data))->size_ / outlen;
  IOSByteArray *inputBlock = [IOSByteArray newArrayWithLength:outlen];
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->_engine_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_([self expandKeyWithByteArray:k])];
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->_engine_)) processBlockWithByteArray:iV withInt:0 withByteArray:chainingValue withInt:0];
  for (jint i = 0; i < n; i++) {
    OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_XORWithByteArray_withByteArray_withByteArray_withInt_(self, inputBlock, chainingValue, data, i * outlen);
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->_engine_)) processBlockWithByteArray:inputBlock withInt:0 withByteArray:chainingValue withInt:0];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(chainingValue, 0, bccOut, 0, ((IOSByteArray *) nil_chk(bccOut))->size_);
}

void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_copyIntToByteArrayWithByteArray_withInt_withInt_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *buf, jint value, jint offSet) {
  *IOSByteArray_GetRef(nil_chk(buf), offSet + 0) = ((jbyte) (JreRShift32(value, 24)));
  *IOSByteArray_GetRef(buf, offSet + 1) = ((jbyte) (JreRShift32(value, 16)));
  *IOSByteArray_GetRef(buf, offSet + 2) = ((jbyte) (JreRShift32(value, 8)));
  *IOSByteArray_GetRef(buf, offSet + 3) = ((jbyte) (value));
}

jboolean OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_isTDEAWithOrgSpongycastleCryptoBlockCipher_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, id<OrgSpongycastleCryptoBlockCipher> cipher) {
  return [((NSString *) nil_chk([((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher)) getAlgorithmName])) isEqual:@"DESede"] || [((NSString *) nil_chk([cipher getAlgorithmName])) isEqual:@"TDEA"];
}

jint OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_getMaxSecurityStrengthWithOrgSpongycastleCryptoBlockCipher_withInt_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, id<OrgSpongycastleCryptoBlockCipher> cipher, jint keySizeInBits) {
  if (OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_isTDEAWithOrgSpongycastleCryptoBlockCipher_(self, cipher) && keySizeInBits == 168) {
    return 112;
  }
  if ([((NSString *) nil_chk([((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(cipher)) getAlgorithmName])) isEqual:@"AES"]) {
    return keySizeInBits;
  }
  return -1;
}

void OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG_padKeyWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG *self, IOSByteArray *keyMaster, jint keyOff, IOSByteArray *tmp, jint tmpOff) {
  *IOSByteArray_GetRef(nil_chk(tmp), tmpOff + 0) = (jbyte) (IOSByteArray_Get(nil_chk(keyMaster), keyOff + 0) & (jint) 0xfe);
  *IOSByteArray_GetRef(tmp, tmpOff + 1) = (jbyte) ((JreLShift32(IOSByteArray_Get(keyMaster, keyOff + 0), 7)) | (JreURShift32((IOSByteArray_Get(keyMaster, keyOff + 1) & (jint) 0xfc), 1)));
  *IOSByteArray_GetRef(tmp, tmpOff + 2) = (jbyte) ((JreLShift32(IOSByteArray_Get(keyMaster, keyOff + 1), 6)) | (JreURShift32((IOSByteArray_Get(keyMaster, keyOff + 2) & (jint) 0xf8), 2)));
  *IOSByteArray_GetRef(tmp, tmpOff + 3) = (jbyte) ((JreLShift32(IOSByteArray_Get(keyMaster, keyOff + 2), 5)) | (JreURShift32((IOSByteArray_Get(keyMaster, keyOff + 3) & (jint) 0xf0), 3)));
  *IOSByteArray_GetRef(tmp, tmpOff + 4) = (jbyte) ((JreLShift32(IOSByteArray_Get(keyMaster, keyOff + 3), 4)) | (JreURShift32((IOSByteArray_Get(keyMaster, keyOff + 4) & (jint) 0xe0), 4)));
  *IOSByteArray_GetRef(tmp, tmpOff + 5) = (jbyte) ((JreLShift32(IOSByteArray_Get(keyMaster, keyOff + 4), 3)) | (JreURShift32((IOSByteArray_Get(keyMaster, keyOff + 5) & (jint) 0xc0), 5)));
  *IOSByteArray_GetRef(tmp, tmpOff + 6) = (jbyte) ((JreLShift32(IOSByteArray_Get(keyMaster, keyOff + 5), 2)) | (JreURShift32((IOSByteArray_Get(keyMaster, keyOff + 6) & (jint) 0x80), 6)));
  *IOSByteArray_GetRef(tmp, tmpOff + 7) = (jbyte) (JreLShift32(IOSByteArray_Get(keyMaster, keyOff + 6), 1));
  for (jint i = tmpOff; i <= tmpOff + 7; i++) {
    jint b = IOSByteArray_Get(tmp, i);
    *IOSByteArray_GetRef(tmp, i) = (jbyte) ((b & (jint) 0xfe) | ((((JreRShift32(b, 1)) ^ (JreRShift32(b, 2)) ^ (JreRShift32(b, 3)) ^ (JreRShift32(b, 4)) ^ (JreRShift32(b, 5)) ^ (JreRShift32(b, 6)) ^ (JreRShift32(b, 7))) ^ (jint) 0x01) & (jint) 0x01));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoPrngDrbgCTRSP800DRBG)
