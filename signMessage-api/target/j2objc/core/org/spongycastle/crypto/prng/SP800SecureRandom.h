//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/prng/SP800SecureRandom.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoPrngSP800SecureRandom")
#ifdef RESTRICT_OrgSpongycastleCryptoPrngSP800SecureRandom
#define INCLUDE_ALL_OrgSpongycastleCryptoPrngSP800SecureRandom 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoPrngSP800SecureRandom 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoPrngSP800SecureRandom

#if !defined (OrgSpongycastleCryptoPrngSP800SecureRandom_) && (INCLUDE_ALL_OrgSpongycastleCryptoPrngSP800SecureRandom || defined(INCLUDE_OrgSpongycastleCryptoPrngSP800SecureRandom))
#define OrgSpongycastleCryptoPrngSP800SecureRandom_

#define RESTRICT_JavaSecuritySecureRandom 1
#define INCLUDE_JavaSecuritySecureRandom 1
#include "java/security/SecureRandom.h"

@class IOSByteArray;
@class JavaSecurityProvider;
@class JavaSecuritySecureRandomSpi;
@protocol OrgSpongycastleCryptoPrngDRBGProvider;
@protocol OrgSpongycastleCryptoPrngEntropySource;

@interface OrgSpongycastleCryptoPrngSP800SecureRandom : JavaSecuritySecureRandom

#pragma mark Public

- (IOSByteArray *)generateSeedWithInt:(jint)numBytes;

- (void)nextBytesWithByteArray:(IOSByteArray *)bytes;

- (void)reseedWithByteArray:(IOSByteArray *)additionalInput;

- (void)setSeedWithByteArray:(IOSByteArray *)seed;

- (void)setSeedWithLong:(jlong)seed;

#pragma mark Package-Private

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)randomSource
      withOrgSpongycastleCryptoPrngEntropySource:(id<OrgSpongycastleCryptoPrngEntropySource>)entropySource
       withOrgSpongycastleCryptoPrngDRBGProvider:(id<OrgSpongycastleCryptoPrngDRBGProvider>)drbgProvider
                                     withBoolean:(jboolean)predictionResistant;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithByteArray:(IOSByteArray *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithJavaSecuritySecureRandomSpi:(JavaSecuritySecureRandomSpi *)arg0
                           withJavaSecurityProvider:(JavaSecurityProvider *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoPrngSP800SecureRandom)

FOUNDATION_EXPORT void OrgSpongycastleCryptoPrngSP800SecureRandom_initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoPrngEntropySource_withOrgSpongycastleCryptoPrngDRBGProvider_withBoolean_(OrgSpongycastleCryptoPrngSP800SecureRandom *self, JavaSecuritySecureRandom *randomSource, id<OrgSpongycastleCryptoPrngEntropySource> entropySource, id<OrgSpongycastleCryptoPrngDRBGProvider> drbgProvider, jboolean predictionResistant);

FOUNDATION_EXPORT OrgSpongycastleCryptoPrngSP800SecureRandom *new_OrgSpongycastleCryptoPrngSP800SecureRandom_initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoPrngEntropySource_withOrgSpongycastleCryptoPrngDRBGProvider_withBoolean_(JavaSecuritySecureRandom *randomSource, id<OrgSpongycastleCryptoPrngEntropySource> entropySource, id<OrgSpongycastleCryptoPrngDRBGProvider> drbgProvider, jboolean predictionResistant) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoPrngSP800SecureRandom *create_OrgSpongycastleCryptoPrngSP800SecureRandom_initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoPrngEntropySource_withOrgSpongycastleCryptoPrngDRBGProvider_withBoolean_(JavaSecuritySecureRandom *randomSource, id<OrgSpongycastleCryptoPrngEntropySource> entropySource, id<OrgSpongycastleCryptoPrngDRBGProvider> drbgProvider, jboolean predictionResistant);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoPrngSP800SecureRandom)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoPrngSP800SecureRandom")
