//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/prng/X931SecureRandom.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/prng/EntropySource.h"
#include "org/spongycastle/crypto/prng/EntropyUtil.h"
#include "org/spongycastle/crypto/prng/X931RNG.h"
#include "org/spongycastle/crypto/prng/X931SecureRandom.h"

@interface OrgSpongycastleCryptoPrngX931SecureRandom () {
 @public
  jboolean predictionResistant_;
  JavaSecuritySecureRandom *randomSource_;
  OrgSpongycastleCryptoPrngX931RNG *drbg_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngX931SecureRandom, randomSource_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngX931SecureRandom, drbg_, OrgSpongycastleCryptoPrngX931RNG *)

@implementation OrgSpongycastleCryptoPrngX931SecureRandom

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)randomSource
            withOrgSpongycastleCryptoPrngX931RNG:(OrgSpongycastleCryptoPrngX931RNG *)drbg
                                     withBoolean:(jboolean)predictionResistant {
  OrgSpongycastleCryptoPrngX931SecureRandom_initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoPrngX931RNG_withBoolean_(self, randomSource, drbg, predictionResistant);
  return self;
}

- (void)setSeedWithByteArray:(IOSByteArray *)seed {
  @synchronized(self) {
    if (randomSource_ != nil) {
      [self->randomSource_ setSeedWithByteArray:seed];
    }
  }
}

- (void)setSeedWithLong:(jlong)seed {
  @synchronized(self) {
    if (randomSource_ != nil) {
      [self->randomSource_ setSeedWithLong:seed];
    }
  }
}

- (void)nextBytesWithByteArray:(IOSByteArray *)bytes {
  @synchronized(self) {
    if ([((OrgSpongycastleCryptoPrngX931RNG *) nil_chk(drbg_)) generateWithByteArray:bytes withBoolean:predictionResistant_] < 0) {
      [drbg_ reseed];
      [drbg_ generateWithByteArray:bytes withBoolean:predictionResistant_];
    }
  }
}

- (IOSByteArray *)generateSeedWithInt:(jint)numBytes {
  return OrgSpongycastleCryptoPrngEntropyUtil_generateSeedWithOrgSpongycastleCryptoPrngEntropySource_withInt_([((OrgSpongycastleCryptoPrngX931RNG *) nil_chk(drbg_)) getEntropySource], numBytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecuritySecureRandom:withOrgSpongycastleCryptoPrngX931RNG:withBoolean:);
  methods[1].selector = @selector(setSeedWithByteArray:);
  methods[2].selector = @selector(setSeedWithLong:);
  methods[3].selector = @selector(nextBytesWithByteArray:);
  methods[4].selector = @selector(generateSeedWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "predictionResistant_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "randomSource_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "drbg_", "LOrgSpongycastleCryptoPrngX931RNG;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecuritySecureRandom;LOrgSpongycastleCryptoPrngX931RNG;Z", "setSeed", "[B", "J", "nextBytes", "generateSeed", "I" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoPrngX931SecureRandom = { "X931SecureRandom", "org.spongycastle.crypto.prng", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoPrngX931SecureRandom;
}

@end

void OrgSpongycastleCryptoPrngX931SecureRandom_initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoPrngX931RNG_withBoolean_(OrgSpongycastleCryptoPrngX931SecureRandom *self, JavaSecuritySecureRandom *randomSource, OrgSpongycastleCryptoPrngX931RNG *drbg, jboolean predictionResistant) {
  JavaSecuritySecureRandom_init(self);
  self->randomSource_ = randomSource;
  self->drbg_ = drbg;
  self->predictionResistant_ = predictionResistant;
}

OrgSpongycastleCryptoPrngX931SecureRandom *new_OrgSpongycastleCryptoPrngX931SecureRandom_initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoPrngX931RNG_withBoolean_(JavaSecuritySecureRandom *randomSource, OrgSpongycastleCryptoPrngX931RNG *drbg, jboolean predictionResistant) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoPrngX931SecureRandom, initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoPrngX931RNG_withBoolean_, randomSource, drbg, predictionResistant)
}

OrgSpongycastleCryptoPrngX931SecureRandom *create_OrgSpongycastleCryptoPrngX931SecureRandom_initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoPrngX931RNG_withBoolean_(JavaSecuritySecureRandom *randomSource, OrgSpongycastleCryptoPrngX931RNG *drbg, jboolean predictionResistant) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoPrngX931SecureRandom, initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoPrngX931RNG_withBoolean_, randomSource, drbg, predictionResistant)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoPrngX931SecureRandom)
