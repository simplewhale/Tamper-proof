//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/prng/FixedSecureRandom.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/prng/FixedSecureRandom.h"

@interface OrgSpongycastleCryptoPrngFixedSecureRandom () {
 @public
  IOSByteArray *_data_;
  jint _index_;
  jint _intPad_;
}

- (jint)nextValue;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngFixedSecureRandom, _data_, IOSByteArray *)

__attribute__((unused)) static jint OrgSpongycastleCryptoPrngFixedSecureRandom_nextValue(OrgSpongycastleCryptoPrngFixedSecureRandom *self);

@implementation OrgSpongycastleCryptoPrngFixedSecureRandom

- (instancetype)initWithByteArray:(IOSByteArray *)value {
  OrgSpongycastleCryptoPrngFixedSecureRandom_initWithByteArray_(self, value);
  return self;
}

- (instancetype)initWithByteArray2:(IOSObjectArray *)values {
  OrgSpongycastleCryptoPrngFixedSecureRandom_initWithByteArray2_(self, values);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)intPad
                  withByteArray:(IOSByteArray *)value {
  OrgSpongycastleCryptoPrngFixedSecureRandom_initWithBoolean_withByteArray_(self, intPad, value);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)intPad
                 withByteArray2:(IOSObjectArray *)values {
  OrgSpongycastleCryptoPrngFixedSecureRandom_initWithBoolean_withByteArray2_(self, intPad, values);
  return self;
}

- (void)nextBytesWithByteArray:(IOSByteArray *)bytes {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_data_, _index_, bytes, 0, ((IOSByteArray *) nil_chk(bytes))->size_);
  _index_ += bytes->size_;
}

- (IOSByteArray *)generateSeedWithInt:(jint)numBytes {
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:numBytes];
  [self nextBytesWithByteArray:bytes];
  return bytes;
}

- (jint)nextInt {
  jint val = 0;
  val |= JreLShift32(OrgSpongycastleCryptoPrngFixedSecureRandom_nextValue(self), 24);
  val |= JreLShift32(OrgSpongycastleCryptoPrngFixedSecureRandom_nextValue(self), 16);
  if (_intPad_ == 2) {
    _intPad_--;
  }
  else {
    val |= JreLShift32(OrgSpongycastleCryptoPrngFixedSecureRandom_nextValue(self), 8);
  }
  if (_intPad_ == 1) {
    _intPad_--;
  }
  else {
    val |= OrgSpongycastleCryptoPrngFixedSecureRandom_nextValue(self);
  }
  return val;
}

- (jlong)nextLong {
  jlong val = 0;
  val |= JreLShift64((jlong) OrgSpongycastleCryptoPrngFixedSecureRandom_nextValue(self), 56);
  val |= JreLShift64((jlong) OrgSpongycastleCryptoPrngFixedSecureRandom_nextValue(self), 48);
  val |= JreLShift64((jlong) OrgSpongycastleCryptoPrngFixedSecureRandom_nextValue(self), 40);
  val |= JreLShift64((jlong) OrgSpongycastleCryptoPrngFixedSecureRandom_nextValue(self), 32);
  val |= JreLShift64((jlong) OrgSpongycastleCryptoPrngFixedSecureRandom_nextValue(self), 24);
  val |= JreLShift64((jlong) OrgSpongycastleCryptoPrngFixedSecureRandom_nextValue(self), 16);
  val |= JreLShift64((jlong) OrgSpongycastleCryptoPrngFixedSecureRandom_nextValue(self), 8);
  val |= (jlong) OrgSpongycastleCryptoPrngFixedSecureRandom_nextValue(self);
  return val;
}

- (jboolean)isExhausted {
  return _index_ == ((IOSByteArray *) nil_chk(_data_))->size_;
}

- (jint)nextValue {
  return OrgSpongycastleCryptoPrngFixedSecureRandom_nextValue(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:);
  methods[1].selector = @selector(initWithByteArray2:);
  methods[2].selector = @selector(initWithBoolean:withByteArray:);
  methods[3].selector = @selector(initWithBoolean:withByteArray2:);
  methods[4].selector = @selector(nextBytesWithByteArray:);
  methods[5].selector = @selector(generateSeedWithInt:);
  methods[6].selector = @selector(nextInt);
  methods[7].selector = @selector(nextLong);
  methods[8].selector = @selector(isExhausted);
  methods[9].selector = @selector(nextValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_data_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_index_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_intPad_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B", "[[B", "Z[B", "Z[[B", "nextBytes", "generateSeed", "I" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoPrngFixedSecureRandom = { "FixedSecureRandom", "org.spongycastle.crypto.prng", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoPrngFixedSecureRandom;
}

@end

void OrgSpongycastleCryptoPrngFixedSecureRandom_initWithByteArray_(OrgSpongycastleCryptoPrngFixedSecureRandom *self, IOSByteArray *value) {
  OrgSpongycastleCryptoPrngFixedSecureRandom_initWithBoolean_withByteArray2_(self, false, [IOSObjectArray newArrayWithObjects:(id[]){ value } count:1 type:IOSClass_byteArray(1)]);
}

OrgSpongycastleCryptoPrngFixedSecureRandom *new_OrgSpongycastleCryptoPrngFixedSecureRandom_initWithByteArray_(IOSByteArray *value) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoPrngFixedSecureRandom, initWithByteArray_, value)
}

OrgSpongycastleCryptoPrngFixedSecureRandom *create_OrgSpongycastleCryptoPrngFixedSecureRandom_initWithByteArray_(IOSByteArray *value) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoPrngFixedSecureRandom, initWithByteArray_, value)
}

void OrgSpongycastleCryptoPrngFixedSecureRandom_initWithByteArray2_(OrgSpongycastleCryptoPrngFixedSecureRandom *self, IOSObjectArray *values) {
  OrgSpongycastleCryptoPrngFixedSecureRandom_initWithBoolean_withByteArray2_(self, false, values);
}

OrgSpongycastleCryptoPrngFixedSecureRandom *new_OrgSpongycastleCryptoPrngFixedSecureRandom_initWithByteArray2_(IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoPrngFixedSecureRandom, initWithByteArray2_, values)
}

OrgSpongycastleCryptoPrngFixedSecureRandom *create_OrgSpongycastleCryptoPrngFixedSecureRandom_initWithByteArray2_(IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoPrngFixedSecureRandom, initWithByteArray2_, values)
}

void OrgSpongycastleCryptoPrngFixedSecureRandom_initWithBoolean_withByteArray_(OrgSpongycastleCryptoPrngFixedSecureRandom *self, jboolean intPad, IOSByteArray *value) {
  OrgSpongycastleCryptoPrngFixedSecureRandom_initWithBoolean_withByteArray2_(self, intPad, [IOSObjectArray newArrayWithObjects:(id[]){ value } count:1 type:IOSClass_byteArray(1)]);
}

OrgSpongycastleCryptoPrngFixedSecureRandom *new_OrgSpongycastleCryptoPrngFixedSecureRandom_initWithBoolean_withByteArray_(jboolean intPad, IOSByteArray *value) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoPrngFixedSecureRandom, initWithBoolean_withByteArray_, intPad, value)
}

OrgSpongycastleCryptoPrngFixedSecureRandom *create_OrgSpongycastleCryptoPrngFixedSecureRandom_initWithBoolean_withByteArray_(jboolean intPad, IOSByteArray *value) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoPrngFixedSecureRandom, initWithBoolean_withByteArray_, intPad, value)
}

void OrgSpongycastleCryptoPrngFixedSecureRandom_initWithBoolean_withByteArray2_(OrgSpongycastleCryptoPrngFixedSecureRandom *self, jboolean intPad, IOSObjectArray *values) {
  JavaSecuritySecureRandom_init(self);
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(values))->size_; i++) {
    @try {
      [bOut writeWithByteArray:IOSObjectArray_Get(values, i)];
    }
    @catch (JavaIoIOException *e) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"can't save value array.");
    }
  }
  self->_data_ = [bOut toByteArray];
  if (intPad) {
    self->_intPad_ = ((IOSByteArray *) nil_chk(self->_data_))->size_ % 4;
  }
}

OrgSpongycastleCryptoPrngFixedSecureRandom *new_OrgSpongycastleCryptoPrngFixedSecureRandom_initWithBoolean_withByteArray2_(jboolean intPad, IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoPrngFixedSecureRandom, initWithBoolean_withByteArray2_, intPad, values)
}

OrgSpongycastleCryptoPrngFixedSecureRandom *create_OrgSpongycastleCryptoPrngFixedSecureRandom_initWithBoolean_withByteArray2_(jboolean intPad, IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoPrngFixedSecureRandom, initWithBoolean_withByteArray2_, intPad, values)
}

jint OrgSpongycastleCryptoPrngFixedSecureRandom_nextValue(OrgSpongycastleCryptoPrngFixedSecureRandom *self) {
  return IOSByteArray_Get(nil_chk(self->_data_), self->_index_++) & (jint) 0xff;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoPrngFixedSecureRandom)
