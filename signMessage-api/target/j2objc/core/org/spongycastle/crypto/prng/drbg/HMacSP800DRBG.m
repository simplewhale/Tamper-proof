//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/prng/drbg/HMacSP800DRBG.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/Mac.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/prng/EntropySource.h"
#include "org/spongycastle/crypto/prng/drbg/HMacSP800DRBG.h"
#include "org/spongycastle/crypto/prng/drbg/Utils.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG () {
 @public
  IOSByteArray *_K_;
  IOSByteArray *_V_;
  jlong _reseedCounter_;
  id<OrgSpongycastleCryptoPrngEntropySource> _entropySource_;
  id<OrgSpongycastleCryptoMac> _hMac_;
  jint _securityStrength_;
}

- (void)hmac_DRBG_UpdateWithByteArray:(IOSByteArray *)seedMaterial;

- (void)hmac_DRBG_Update_FuncWithByteArray:(IOSByteArray *)seedMaterial
                                  withByte:(jbyte)vValue;

- (IOSByteArray *)getEntropy;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG, _K_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG, _V_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG, _entropySource_, id<OrgSpongycastleCryptoPrngEntropySource>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG, _hMac_, id<OrgSpongycastleCryptoMac>)

inline jlong OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_get_RESEED_MAX(void);
#define OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_RESEED_MAX 140737488355328LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG, RESEED_MAX, jlong)

inline jint OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_get_MAX_BITS_REQUEST(void);
#define OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_MAX_BITS_REQUEST 262144
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG, MAX_BITS_REQUEST, jint)

__attribute__((unused)) static void OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_hmac_DRBG_UpdateWithByteArray_(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG *self, IOSByteArray *seedMaterial);

__attribute__((unused)) static void OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_hmac_DRBG_Update_FuncWithByteArray_withByte_(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG *self, IOSByteArray *seedMaterial, jbyte vValue);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_getEntropy(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG *self);

@implementation OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG

- (instancetype)initWithOrgSpongycastleCryptoMac:(id<OrgSpongycastleCryptoMac>)hMac
                                         withInt:(jint)securityStrength
      withOrgSpongycastleCryptoPrngEntropySource:(id<OrgSpongycastleCryptoPrngEntropySource>)entropySource
                                   withByteArray:(IOSByteArray *)personalizationString
                                   withByteArray:(IOSByteArray *)nonce {
  OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_initWithOrgSpongycastleCryptoMac_withInt_withOrgSpongycastleCryptoPrngEntropySource_withByteArray_withByteArray_(self, hMac, securityStrength, entropySource, personalizationString, nonce);
  return self;
}

- (void)hmac_DRBG_UpdateWithByteArray:(IOSByteArray *)seedMaterial {
  OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_hmac_DRBG_UpdateWithByteArray_(self, seedMaterial);
}

- (void)hmac_DRBG_Update_FuncWithByteArray:(IOSByteArray *)seedMaterial
                                  withByte:(jbyte)vValue {
  OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_hmac_DRBG_Update_FuncWithByteArray_withByte_(self, seedMaterial, vValue);
}

- (jint)getBlockSize {
  return ((IOSByteArray *) nil_chk(_V_))->size_ * 8;
}

- (jint)generateWithByteArray:(IOSByteArray *)output
                withByteArray:(IOSByteArray *)additionalInput
                  withBoolean:(jboolean)predictionResistant {
  jint numberOfBits = ((IOSByteArray *) nil_chk(output))->size_ * 8;
  if (numberOfBits > OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_MAX_BITS_REQUEST) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Number of bits per request limited to ", OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_MAX_BITS_REQUEST));
  }
  if (_reseedCounter_ > OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_RESEED_MAX) {
    return -1;
  }
  if (predictionResistant) {
    [self reseedWithByteArray:additionalInput];
    additionalInput = nil;
  }
  if (additionalInput != nil) {
    OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_hmac_DRBG_UpdateWithByteArray_(self, additionalInput);
  }
  IOSByteArray *rv = [IOSByteArray newArrayWithLength:output->size_];
  jint m = output->size_ / ((IOSByteArray *) nil_chk(_V_))->size_;
  [((id<OrgSpongycastleCryptoMac>) nil_chk(_hMac_)) init__WithOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_(_K_)];
  for (jint i = 0; i < m; i++) {
    [((id<OrgSpongycastleCryptoMac>) nil_chk(_hMac_)) updateWithByteArray:_V_ withInt:0 withInt:((IOSByteArray *) nil_chk(_V_))->size_];
    [((id<OrgSpongycastleCryptoMac>) nil_chk(_hMac_)) doFinalWithByteArray:_V_ withInt:0];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_V_, 0, rv, i * ((IOSByteArray *) nil_chk(_V_))->size_, _V_->size_);
  }
  if (m * ((IOSByteArray *) nil_chk(_V_))->size_ < rv->size_) {
    [((id<OrgSpongycastleCryptoMac>) nil_chk(_hMac_)) updateWithByteArray:_V_ withInt:0 withInt:_V_->size_];
    [((id<OrgSpongycastleCryptoMac>) nil_chk(_hMac_)) doFinalWithByteArray:_V_ withInt:0];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(_V_, 0, rv, m * ((IOSByteArray *) nil_chk(_V_))->size_, rv->size_ - (m * _V_->size_));
  }
  OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_hmac_DRBG_UpdateWithByteArray_(self, additionalInput);
  _reseedCounter_++;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(rv, 0, output, 0, output->size_);
  return numberOfBits;
}

- (void)reseedWithByteArray:(IOSByteArray *)additionalInput {
  IOSByteArray *entropy = OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_getEntropy(self);
  IOSByteArray *seedMaterial = OrgSpongycastleUtilArrays_concatenateWithByteArray_withByteArray_(entropy, additionalInput);
  OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_hmac_DRBG_UpdateWithByteArray_(self, seedMaterial);
  _reseedCounter_ = 1;
}

- (IOSByteArray *)getEntropy {
  return OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_getEntropy(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoMac:withInt:withOrgSpongycastleCryptoPrngEntropySource:withByteArray:withByteArray:);
  methods[1].selector = @selector(hmac_DRBG_UpdateWithByteArray:);
  methods[2].selector = @selector(hmac_DRBG_Update_FuncWithByteArray:withByte:);
  methods[3].selector = @selector(getBlockSize);
  methods[4].selector = @selector(generateWithByteArray:withByteArray:withBoolean:);
  methods[5].selector = @selector(reseedWithByteArray:);
  methods[6].selector = @selector(getEntropy);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "RESEED_MAX", "J", .constantValue.asLong = OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_RESEED_MAX, 0x1a, -1, -1, -1, -1 },
    { "MAX_BITS_REQUEST", "I", .constantValue.asInt = OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_MAX_BITS_REQUEST, 0x1a, -1, -1, -1, -1 },
    { "_K_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_V_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_reseedCounter_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_entropySource_", "LOrgSpongycastleCryptoPrngEntropySource;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_hMac_", "LOrgSpongycastleCryptoMac;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_securityStrength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoMac;ILOrgSpongycastleCryptoPrngEntropySource;[B[B", "hmac_DRBG_Update", "[B", "hmac_DRBG_Update_Func", "[BB", "generate", "[B[BZ", "reseed" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG = { "HMacSP800DRBG", "org.spongycastle.crypto.prng.drbg", ptrTable, methods, fields, 7, 0x1, 7, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG;
}

@end

void OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_initWithOrgSpongycastleCryptoMac_withInt_withOrgSpongycastleCryptoPrngEntropySource_withByteArray_withByteArray_(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG *self, id<OrgSpongycastleCryptoMac> hMac, jint securityStrength, id<OrgSpongycastleCryptoPrngEntropySource> entropySource, IOSByteArray *personalizationString, IOSByteArray *nonce) {
  NSObject_init(self);
  if (securityStrength > OrgSpongycastleCryptoPrngDrbgUtils_getMaxSecurityStrengthWithOrgSpongycastleCryptoMac_(hMac)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Requested security strength is not supported by the derivation function");
  }
  if ([((id<OrgSpongycastleCryptoPrngEntropySource>) nil_chk(entropySource)) entropySize] < securityStrength) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Not enough entropy for security strength required");
  }
  self->_securityStrength_ = securityStrength;
  self->_entropySource_ = entropySource;
  self->_hMac_ = hMac;
  IOSByteArray *entropy = OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_getEntropy(self);
  IOSByteArray *seedMaterial = OrgSpongycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_(entropy, nonce, personalizationString);
  self->_K_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoMac>) nil_chk(hMac)) getMacSize]];
  self->_V_ = [IOSByteArray newArrayWithLength:self->_K_->size_];
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(self->_V_, (jbyte) 1);
  OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_hmac_DRBG_UpdateWithByteArray_(self, seedMaterial);
  self->_reseedCounter_ = 1;
}

OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG *new_OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_initWithOrgSpongycastleCryptoMac_withInt_withOrgSpongycastleCryptoPrngEntropySource_withByteArray_withByteArray_(id<OrgSpongycastleCryptoMac> hMac, jint securityStrength, id<OrgSpongycastleCryptoPrngEntropySource> entropySource, IOSByteArray *personalizationString, IOSByteArray *nonce) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG, initWithOrgSpongycastleCryptoMac_withInt_withOrgSpongycastleCryptoPrngEntropySource_withByteArray_withByteArray_, hMac, securityStrength, entropySource, personalizationString, nonce)
}

OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG *create_OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_initWithOrgSpongycastleCryptoMac_withInt_withOrgSpongycastleCryptoPrngEntropySource_withByteArray_withByteArray_(id<OrgSpongycastleCryptoMac> hMac, jint securityStrength, id<OrgSpongycastleCryptoPrngEntropySource> entropySource, IOSByteArray *personalizationString, IOSByteArray *nonce) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG, initWithOrgSpongycastleCryptoMac_withInt_withOrgSpongycastleCryptoPrngEntropySource_withByteArray_withByteArray_, hMac, securityStrength, entropySource, personalizationString, nonce)
}

void OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_hmac_DRBG_UpdateWithByteArray_(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG *self, IOSByteArray *seedMaterial) {
  OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_hmac_DRBG_Update_FuncWithByteArray_withByte_(self, seedMaterial, (jbyte) (jint) 0x00);
  if (seedMaterial != nil) {
    OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_hmac_DRBG_Update_FuncWithByteArray_withByte_(self, seedMaterial, (jbyte) (jint) 0x01);
  }
}

void OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_hmac_DRBG_Update_FuncWithByteArray_withByte_(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG *self, IOSByteArray *seedMaterial, jbyte vValue) {
  [((id<OrgSpongycastleCryptoMac>) nil_chk(self->_hMac_)) init__WithOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_(self->_K_)];
  [((id<OrgSpongycastleCryptoMac>) nil_chk(self->_hMac_)) updateWithByteArray:self->_V_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->_V_))->size_];
  [((id<OrgSpongycastleCryptoMac>) nil_chk(self->_hMac_)) updateWithByte:vValue];
  if (seedMaterial != nil) {
    [((id<OrgSpongycastleCryptoMac>) nil_chk(self->_hMac_)) updateWithByteArray:seedMaterial withInt:0 withInt:seedMaterial->size_];
  }
  [((id<OrgSpongycastleCryptoMac>) nil_chk(self->_hMac_)) doFinalWithByteArray:self->_K_ withInt:0];
  [((id<OrgSpongycastleCryptoMac>) nil_chk(self->_hMac_)) init__WithOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_(self->_K_)];
  [((id<OrgSpongycastleCryptoMac>) nil_chk(self->_hMac_)) updateWithByteArray:self->_V_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->_V_))->size_];
  [((id<OrgSpongycastleCryptoMac>) nil_chk(self->_hMac_)) doFinalWithByteArray:self->_V_ withInt:0];
}

IOSByteArray *OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG_getEntropy(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG *self) {
  IOSByteArray *entropy = [((id<OrgSpongycastleCryptoPrngEntropySource>) nil_chk(self->_entropySource_)) getEntropy];
  if (((IOSByteArray *) nil_chk(entropy))->size_ < (self->_securityStrength_ + 7) / 8) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Insufficient entropy provided by entropy source");
  }
  return entropy;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoPrngDrbgHMacSP800DRBG)
