//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/prng/SP800SecureRandom.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/prng/DRBGProvider.h"
#include "org/spongycastle/crypto/prng/EntropySource.h"
#include "org/spongycastle/crypto/prng/EntropyUtil.h"
#include "org/spongycastle/crypto/prng/SP800SecureRandom.h"
#include "org/spongycastle/crypto/prng/drbg/SP80090DRBG.h"

@interface OrgSpongycastleCryptoPrngSP800SecureRandom () {
 @public
  id<OrgSpongycastleCryptoPrngDRBGProvider> drbgProvider_;
  jboolean predictionResistant_;
  JavaSecuritySecureRandom *randomSource_;
  id<OrgSpongycastleCryptoPrngEntropySource> entropySource_;
  id<OrgSpongycastleCryptoPrngDrbgSP80090DRBG> drbg_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngSP800SecureRandom, drbgProvider_, id<OrgSpongycastleCryptoPrngDRBGProvider>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngSP800SecureRandom, randomSource_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngSP800SecureRandom, entropySource_, id<OrgSpongycastleCryptoPrngEntropySource>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngSP800SecureRandom, drbg_, id<OrgSpongycastleCryptoPrngDrbgSP80090DRBG>)

@implementation OrgSpongycastleCryptoPrngSP800SecureRandom

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)randomSource
      withOrgSpongycastleCryptoPrngEntropySource:(id<OrgSpongycastleCryptoPrngEntropySource>)entropySource
       withOrgSpongycastleCryptoPrngDRBGProvider:(id<OrgSpongycastleCryptoPrngDRBGProvider>)drbgProvider
                                     withBoolean:(jboolean)predictionResistant {
  OrgSpongycastleCryptoPrngSP800SecureRandom_initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoPrngEntropySource_withOrgSpongycastleCryptoPrngDRBGProvider_withBoolean_(self, randomSource, entropySource, drbgProvider, predictionResistant);
  return self;
}

- (void)setSeedWithByteArray:(IOSByteArray *)seed {
  @synchronized(self) {
    if (randomSource_ != nil) {
      [self->randomSource_ setSeedWithByteArray:seed];
    }
  }
}

- (void)setSeedWithLong:(jlong)seed {
  @synchronized(self) {
    if (randomSource_ != nil) {
      [self->randomSource_ setSeedWithLong:seed];
    }
  }
}

- (void)nextBytesWithByteArray:(IOSByteArray *)bytes {
  @synchronized(self) {
    if (drbg_ == nil) {
      drbg_ = [((id<OrgSpongycastleCryptoPrngDRBGProvider>) nil_chk(drbgProvider_)) getWithOrgSpongycastleCryptoPrngEntropySource:entropySource_];
    }
    if ([((id<OrgSpongycastleCryptoPrngDrbgSP80090DRBG>) nil_chk(drbg_)) generateWithByteArray:bytes withByteArray:nil withBoolean:predictionResistant_] < 0) {
      [((id<OrgSpongycastleCryptoPrngDrbgSP80090DRBG>) nil_chk(drbg_)) reseedWithByteArray:nil];
      [((id<OrgSpongycastleCryptoPrngDrbgSP80090DRBG>) nil_chk(drbg_)) generateWithByteArray:bytes withByteArray:nil withBoolean:predictionResistant_];
    }
  }
}

- (IOSByteArray *)generateSeedWithInt:(jint)numBytes {
  return OrgSpongycastleCryptoPrngEntropyUtil_generateSeedWithOrgSpongycastleCryptoPrngEntropySource_withInt_(entropySource_, numBytes);
}

- (void)reseedWithByteArray:(IOSByteArray *)additionalInput {
  @synchronized(self) {
    if (drbg_ == nil) {
      drbg_ = [((id<OrgSpongycastleCryptoPrngDRBGProvider>) nil_chk(drbgProvider_)) getWithOrgSpongycastleCryptoPrngEntropySource:entropySource_];
    }
    [((id<OrgSpongycastleCryptoPrngDrbgSP80090DRBG>) nil_chk(drbg_)) reseedWithByteArray:additionalInput];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecuritySecureRandom:withOrgSpongycastleCryptoPrngEntropySource:withOrgSpongycastleCryptoPrngDRBGProvider:withBoolean:);
  methods[1].selector = @selector(setSeedWithByteArray:);
  methods[2].selector = @selector(setSeedWithLong:);
  methods[3].selector = @selector(nextBytesWithByteArray:);
  methods[4].selector = @selector(generateSeedWithInt:);
  methods[5].selector = @selector(reseedWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "drbgProvider_", "LOrgSpongycastleCryptoPrngDRBGProvider;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "predictionResistant_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "randomSource_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "entropySource_", "LOrgSpongycastleCryptoPrngEntropySource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "drbg_", "LOrgSpongycastleCryptoPrngDrbgSP80090DRBG;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecuritySecureRandom;LOrgSpongycastleCryptoPrngEntropySource;LOrgSpongycastleCryptoPrngDRBGProvider;Z", "setSeed", "[B", "J", "nextBytes", "generateSeed", "I", "reseed" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoPrngSP800SecureRandom = { "SP800SecureRandom", "org.spongycastle.crypto.prng", ptrTable, methods, fields, 7, 0x1, 6, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoPrngSP800SecureRandom;
}

@end

void OrgSpongycastleCryptoPrngSP800SecureRandom_initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoPrngEntropySource_withOrgSpongycastleCryptoPrngDRBGProvider_withBoolean_(OrgSpongycastleCryptoPrngSP800SecureRandom *self, JavaSecuritySecureRandom *randomSource, id<OrgSpongycastleCryptoPrngEntropySource> entropySource, id<OrgSpongycastleCryptoPrngDRBGProvider> drbgProvider, jboolean predictionResistant) {
  JavaSecuritySecureRandom_init(self);
  self->randomSource_ = randomSource;
  self->entropySource_ = entropySource;
  self->drbgProvider_ = drbgProvider;
  self->predictionResistant_ = predictionResistant;
}

OrgSpongycastleCryptoPrngSP800SecureRandom *new_OrgSpongycastleCryptoPrngSP800SecureRandom_initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoPrngEntropySource_withOrgSpongycastleCryptoPrngDRBGProvider_withBoolean_(JavaSecuritySecureRandom *randomSource, id<OrgSpongycastleCryptoPrngEntropySource> entropySource, id<OrgSpongycastleCryptoPrngDRBGProvider> drbgProvider, jboolean predictionResistant) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoPrngSP800SecureRandom, initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoPrngEntropySource_withOrgSpongycastleCryptoPrngDRBGProvider_withBoolean_, randomSource, entropySource, drbgProvider, predictionResistant)
}

OrgSpongycastleCryptoPrngSP800SecureRandom *create_OrgSpongycastleCryptoPrngSP800SecureRandom_initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoPrngEntropySource_withOrgSpongycastleCryptoPrngDRBGProvider_withBoolean_(JavaSecuritySecureRandom *randomSource, id<OrgSpongycastleCryptoPrngEntropySource> entropySource, id<OrgSpongycastleCryptoPrngDRBGProvider> drbgProvider, jboolean predictionResistant) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoPrngSP800SecureRandom, initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoPrngEntropySource_withOrgSpongycastleCryptoPrngDRBGProvider_withBoolean_, randomSource, entropySource, drbgProvider, predictionResistant)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoPrngSP800SecureRandom)
