//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/prng/ReversedWindowGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/crypto/prng/RandomGenerator.h"
#include "org/spongycastle/crypto/prng/ReversedWindowGenerator.h"

@interface OrgSpongycastleCryptoPrngReversedWindowGenerator () {
 @public
  id<OrgSpongycastleCryptoPrngRandomGenerator> generator_;
  IOSByteArray *window_;
  jint windowCount_;
}

- (void)doNextBytesWithByteArray:(IOSByteArray *)bytes
                         withInt:(jint)start
                         withInt:(jint)len;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngReversedWindowGenerator, generator_, id<OrgSpongycastleCryptoPrngRandomGenerator>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngReversedWindowGenerator, window_, IOSByteArray *)

__attribute__((unused)) static void OrgSpongycastleCryptoPrngReversedWindowGenerator_doNextBytesWithByteArray_withInt_withInt_(OrgSpongycastleCryptoPrngReversedWindowGenerator *self, IOSByteArray *bytes, jint start, jint len);

@implementation OrgSpongycastleCryptoPrngReversedWindowGenerator

- (instancetype)initWithOrgSpongycastleCryptoPrngRandomGenerator:(id<OrgSpongycastleCryptoPrngRandomGenerator>)generator
                                                         withInt:(jint)windowSize {
  OrgSpongycastleCryptoPrngReversedWindowGenerator_initWithOrgSpongycastleCryptoPrngRandomGenerator_withInt_(self, generator, windowSize);
  return self;
}

- (void)addSeedMaterialWithByteArray:(IOSByteArray *)seed {
  @synchronized(self) {
    windowCount_ = 0;
    [((id<OrgSpongycastleCryptoPrngRandomGenerator>) nil_chk(generator_)) addSeedMaterialWithByteArray:seed];
  }
}

- (void)addSeedMaterialWithLong:(jlong)seed {
  @synchronized(self) {
    windowCount_ = 0;
    [((id<OrgSpongycastleCryptoPrngRandomGenerator>) nil_chk(generator_)) addSeedMaterialWithLong:seed];
  }
}

- (void)nextBytesWithByteArray:(IOSByteArray *)bytes {
  OrgSpongycastleCryptoPrngReversedWindowGenerator_doNextBytesWithByteArray_withInt_withInt_(self, bytes, 0, ((IOSByteArray *) nil_chk(bytes))->size_);
}

- (void)nextBytesWithByteArray:(IOSByteArray *)bytes
                       withInt:(jint)start
                       withInt:(jint)len {
  OrgSpongycastleCryptoPrngReversedWindowGenerator_doNextBytesWithByteArray_withInt_withInt_(self, bytes, start, len);
}

- (void)doNextBytesWithByteArray:(IOSByteArray *)bytes
                         withInt:(jint)start
                         withInt:(jint)len {
  OrgSpongycastleCryptoPrngReversedWindowGenerator_doNextBytesWithByteArray_withInt_withInt_(self, bytes, start, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoPrngRandomGenerator:withInt:);
  methods[1].selector = @selector(addSeedMaterialWithByteArray:);
  methods[2].selector = @selector(addSeedMaterialWithLong:);
  methods[3].selector = @selector(nextBytesWithByteArray:);
  methods[4].selector = @selector(nextBytesWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(doNextBytesWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "generator_", "LOrgSpongycastleCryptoPrngRandomGenerator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "window_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "windowCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoPrngRandomGenerator;I", "addSeedMaterial", "[B", "J", "nextBytes", "[BII", "doNextBytes" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoPrngReversedWindowGenerator = { "ReversedWindowGenerator", "org.spongycastle.crypto.prng", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoPrngReversedWindowGenerator;
}

@end

void OrgSpongycastleCryptoPrngReversedWindowGenerator_initWithOrgSpongycastleCryptoPrngRandomGenerator_withInt_(OrgSpongycastleCryptoPrngReversedWindowGenerator *self, id<OrgSpongycastleCryptoPrngRandomGenerator> generator, jint windowSize) {
  NSObject_init(self);
  if (generator == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"generator cannot be null");
  }
  if (windowSize < 2) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"windowSize must be at least 2");
  }
  self->generator_ = generator;
  self->window_ = [IOSByteArray newArrayWithLength:windowSize];
}

OrgSpongycastleCryptoPrngReversedWindowGenerator *new_OrgSpongycastleCryptoPrngReversedWindowGenerator_initWithOrgSpongycastleCryptoPrngRandomGenerator_withInt_(id<OrgSpongycastleCryptoPrngRandomGenerator> generator, jint windowSize) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoPrngReversedWindowGenerator, initWithOrgSpongycastleCryptoPrngRandomGenerator_withInt_, generator, windowSize)
}

OrgSpongycastleCryptoPrngReversedWindowGenerator *create_OrgSpongycastleCryptoPrngReversedWindowGenerator_initWithOrgSpongycastleCryptoPrngRandomGenerator_withInt_(id<OrgSpongycastleCryptoPrngRandomGenerator> generator, jint windowSize) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoPrngReversedWindowGenerator, initWithOrgSpongycastleCryptoPrngRandomGenerator_withInt_, generator, windowSize)
}

void OrgSpongycastleCryptoPrngReversedWindowGenerator_doNextBytesWithByteArray_withInt_withInt_(OrgSpongycastleCryptoPrngReversedWindowGenerator *self, IOSByteArray *bytes, jint start, jint len) {
  @synchronized(self) {
    jint done = 0;
    while (done < len) {
      if (self->windowCount_ < 1) {
        [((id<OrgSpongycastleCryptoPrngRandomGenerator>) nil_chk(self->generator_)) nextBytesWithByteArray:self->window_ withInt:0 withInt:((IOSByteArray *) nil_chk(self->window_))->size_];
        self->windowCount_ = ((IOSByteArray *) nil_chk(self->window_))->size_;
      }
      *IOSByteArray_GetRef(nil_chk(bytes), start + done++) = IOSByteArray_Get(nil_chk(self->window_), --self->windowCount_);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoPrngReversedWindowGenerator)
