//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/prng/X931RNG.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/prng/EntropySource.h"
#include "org/spongycastle/crypto/prng/X931RNG.h"

@interface OrgSpongycastleCryptoPrngX931RNG () {
 @public
  id<OrgSpongycastleCryptoBlockCipher> engine_;
  id<OrgSpongycastleCryptoPrngEntropySource> entropySource_;
  IOSByteArray *DT_;
  IOSByteArray *I_;
  IOSByteArray *R_;
  IOSByteArray *V_;
  jlong reseedCounter_;
}

- (void)processWithByteArray:(IOSByteArray *)res
               withByteArray:(IOSByteArray *)a
               withByteArray:(IOSByteArray *)b;

- (void)incrementWithByteArray:(IOSByteArray *)val;

+ (jboolean)isTooLargeWithByteArray:(IOSByteArray *)bytes
                            withInt:(jint)maxBytes;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngX931RNG, engine_, id<OrgSpongycastleCryptoBlockCipher>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngX931RNG, entropySource_, id<OrgSpongycastleCryptoPrngEntropySource>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngX931RNG, DT_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngX931RNG, I_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngX931RNG, R_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngX931RNG, V_, IOSByteArray *)

inline jlong OrgSpongycastleCryptoPrngX931RNG_get_BLOCK64_RESEED_MAX(void);
#define OrgSpongycastleCryptoPrngX931RNG_BLOCK64_RESEED_MAX 32768LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoPrngX931RNG, BLOCK64_RESEED_MAX, jlong)

inline jlong OrgSpongycastleCryptoPrngX931RNG_get_BLOCK128_RESEED_MAX(void);
#define OrgSpongycastleCryptoPrngX931RNG_BLOCK128_RESEED_MAX 8388608LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoPrngX931RNG, BLOCK128_RESEED_MAX, jlong)

inline jint OrgSpongycastleCryptoPrngX931RNG_get_BLOCK64_MAX_BITS_REQUEST(void);
#define OrgSpongycastleCryptoPrngX931RNG_BLOCK64_MAX_BITS_REQUEST 4096
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoPrngX931RNG, BLOCK64_MAX_BITS_REQUEST, jint)

inline jint OrgSpongycastleCryptoPrngX931RNG_get_BLOCK128_MAX_BITS_REQUEST(void);
#define OrgSpongycastleCryptoPrngX931RNG_BLOCK128_MAX_BITS_REQUEST 262144
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoPrngX931RNG, BLOCK128_MAX_BITS_REQUEST, jint)

__attribute__((unused)) static void OrgSpongycastleCryptoPrngX931RNG_processWithByteArray_withByteArray_withByteArray_(OrgSpongycastleCryptoPrngX931RNG *self, IOSByteArray *res, IOSByteArray *a, IOSByteArray *b);

__attribute__((unused)) static void OrgSpongycastleCryptoPrngX931RNG_incrementWithByteArray_(OrgSpongycastleCryptoPrngX931RNG *self, IOSByteArray *val);

__attribute__((unused)) static jboolean OrgSpongycastleCryptoPrngX931RNG_isTooLargeWithByteArray_withInt_(IOSByteArray *bytes, jint maxBytes);

@implementation OrgSpongycastleCryptoPrngX931RNG

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)engine
                                           withByteArray:(IOSByteArray *)dateTimeVector
              withOrgSpongycastleCryptoPrngEntropySource:(id<OrgSpongycastleCryptoPrngEntropySource>)entropySource {
  OrgSpongycastleCryptoPrngX931RNG_initWithOrgSpongycastleCryptoBlockCipher_withByteArray_withOrgSpongycastleCryptoPrngEntropySource_(self, engine, dateTimeVector, entropySource);
  return self;
}

- (jint)generateWithByteArray:(IOSByteArray *)output
                  withBoolean:(jboolean)predictionResistant {
  if (((IOSByteArray *) nil_chk(R_))->size_ == 8) {
    if (reseedCounter_ > OrgSpongycastleCryptoPrngX931RNG_BLOCK64_RESEED_MAX) {
      return -1;
    }
    if (OrgSpongycastleCryptoPrngX931RNG_isTooLargeWithByteArray_withInt_(output, OrgSpongycastleCryptoPrngX931RNG_BLOCK64_MAX_BITS_REQUEST / 8)) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Number of bits per request limited to ", OrgSpongycastleCryptoPrngX931RNG_BLOCK64_MAX_BITS_REQUEST));
    }
  }
  else {
    if (reseedCounter_ > OrgSpongycastleCryptoPrngX931RNG_BLOCK128_RESEED_MAX) {
      return -1;
    }
    if (OrgSpongycastleCryptoPrngX931RNG_isTooLargeWithByteArray_withInt_(output, OrgSpongycastleCryptoPrngX931RNG_BLOCK128_MAX_BITS_REQUEST / 8)) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Number of bits per request limited to ", OrgSpongycastleCryptoPrngX931RNG_BLOCK128_MAX_BITS_REQUEST));
    }
  }
  if (predictionResistant || V_ == nil) {
    V_ = [((id<OrgSpongycastleCryptoPrngEntropySource>) nil_chk(entropySource_)) getEntropy];
    if (((IOSByteArray *) nil_chk(V_))->size_ != [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) getBlockSize]) {
      @throw new_JavaLangIllegalStateException_initWithNSString_(@"Insufficient entropy returned");
    }
  }
  jint m = ((IOSByteArray *) nil_chk(output))->size_ / R_->size_;
  for (jint i = 0; i < m; i++) {
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) processBlockWithByteArray:DT_ withInt:0 withByteArray:I_ withInt:0];
    OrgSpongycastleCryptoPrngX931RNG_processWithByteArray_withByteArray_withByteArray_(self, R_, I_, V_);
    OrgSpongycastleCryptoPrngX931RNG_processWithByteArray_withByteArray_withByteArray_(self, V_, R_, I_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(R_, 0, output, i * R_->size_, R_->size_);
    OrgSpongycastleCryptoPrngX931RNG_incrementWithByteArray_(self, DT_);
  }
  jint bytesToCopy = (output->size_ - m * R_->size_);
  if (bytesToCopy > 0) {
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) processBlockWithByteArray:DT_ withInt:0 withByteArray:I_ withInt:0];
    OrgSpongycastleCryptoPrngX931RNG_processWithByteArray_withByteArray_withByteArray_(self, R_, I_, V_);
    OrgSpongycastleCryptoPrngX931RNG_processWithByteArray_withByteArray_withByteArray_(self, V_, R_, I_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(R_, 0, output, m * R_->size_, bytesToCopy);
    OrgSpongycastleCryptoPrngX931RNG_incrementWithByteArray_(self, DT_);
  }
  reseedCounter_++;
  return output->size_;
}

- (void)reseed {
  V_ = [((id<OrgSpongycastleCryptoPrngEntropySource>) nil_chk(entropySource_)) getEntropy];
  if (((IOSByteArray *) nil_chk(V_))->size_ != [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) getBlockSize]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Insufficient entropy returned");
  }
  reseedCounter_ = 1;
}

- (id<OrgSpongycastleCryptoPrngEntropySource>)getEntropySource {
  return entropySource_;
}

- (void)processWithByteArray:(IOSByteArray *)res
               withByteArray:(IOSByteArray *)a
               withByteArray:(IOSByteArray *)b {
  OrgSpongycastleCryptoPrngX931RNG_processWithByteArray_withByteArray_withByteArray_(self, res, a, b);
}

- (void)incrementWithByteArray:(IOSByteArray *)val {
  OrgSpongycastleCryptoPrngX931RNG_incrementWithByteArray_(self, val);
}

+ (jboolean)isTooLargeWithByteArray:(IOSByteArray *)bytes
                            withInt:(jint)maxBytes {
  return OrgSpongycastleCryptoPrngX931RNG_isTooLargeWithByteArray_withInt_(bytes, maxBytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoPrngEntropySource;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:withByteArray:withOrgSpongycastleCryptoPrngEntropySource:);
  methods[1].selector = @selector(generateWithByteArray:withBoolean:);
  methods[2].selector = @selector(reseed);
  methods[3].selector = @selector(getEntropySource);
  methods[4].selector = @selector(processWithByteArray:withByteArray:withByteArray:);
  methods[5].selector = @selector(incrementWithByteArray:);
  methods[6].selector = @selector(isTooLargeWithByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BLOCK64_RESEED_MAX", "J", .constantValue.asLong = OrgSpongycastleCryptoPrngX931RNG_BLOCK64_RESEED_MAX, 0x1a, -1, -1, -1, -1 },
    { "BLOCK128_RESEED_MAX", "J", .constantValue.asLong = OrgSpongycastleCryptoPrngX931RNG_BLOCK128_RESEED_MAX, 0x1a, -1, -1, -1, -1 },
    { "BLOCK64_MAX_BITS_REQUEST", "I", .constantValue.asInt = OrgSpongycastleCryptoPrngX931RNG_BLOCK64_MAX_BITS_REQUEST, 0x1a, -1, -1, -1, -1 },
    { "BLOCK128_MAX_BITS_REQUEST", "I", .constantValue.asInt = OrgSpongycastleCryptoPrngX931RNG_BLOCK128_MAX_BITS_REQUEST, 0x1a, -1, -1, -1, -1 },
    { "engine_", "LOrgSpongycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "entropySource_", "LOrgSpongycastleCryptoPrngEntropySource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "DT_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "I_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "R_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "V_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "reseedCounter_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoBlockCipher;[BLOrgSpongycastleCryptoPrngEntropySource;", "generate", "[BZ", "process", "[B[B[B", "increment", "[B", "isTooLarge", "[BI" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoPrngX931RNG = { "X931RNG", "org.spongycastle.crypto.prng", ptrTable, methods, fields, 7, 0x1, 7, 11, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoPrngX931RNG;
}

@end

void OrgSpongycastleCryptoPrngX931RNG_initWithOrgSpongycastleCryptoBlockCipher_withByteArray_withOrgSpongycastleCryptoPrngEntropySource_(OrgSpongycastleCryptoPrngX931RNG *self, id<OrgSpongycastleCryptoBlockCipher> engine, IOSByteArray *dateTimeVector, id<OrgSpongycastleCryptoPrngEntropySource> entropySource) {
  NSObject_init(self);
  self->reseedCounter_ = 1;
  self->engine_ = engine;
  self->entropySource_ = entropySource;
  self->DT_ = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine)) getBlockSize]];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(dateTimeVector, 0, self->DT_, 0, self->DT_->size_);
  self->I_ = [IOSByteArray newArrayWithLength:[engine getBlockSize]];
  self->R_ = [IOSByteArray newArrayWithLength:[engine getBlockSize]];
}

OrgSpongycastleCryptoPrngX931RNG *new_OrgSpongycastleCryptoPrngX931RNG_initWithOrgSpongycastleCryptoBlockCipher_withByteArray_withOrgSpongycastleCryptoPrngEntropySource_(id<OrgSpongycastleCryptoBlockCipher> engine, IOSByteArray *dateTimeVector, id<OrgSpongycastleCryptoPrngEntropySource> entropySource) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoPrngX931RNG, initWithOrgSpongycastleCryptoBlockCipher_withByteArray_withOrgSpongycastleCryptoPrngEntropySource_, engine, dateTimeVector, entropySource)
}

OrgSpongycastleCryptoPrngX931RNG *create_OrgSpongycastleCryptoPrngX931RNG_initWithOrgSpongycastleCryptoBlockCipher_withByteArray_withOrgSpongycastleCryptoPrngEntropySource_(id<OrgSpongycastleCryptoBlockCipher> engine, IOSByteArray *dateTimeVector, id<OrgSpongycastleCryptoPrngEntropySource> entropySource) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoPrngX931RNG, initWithOrgSpongycastleCryptoBlockCipher_withByteArray_withOrgSpongycastleCryptoPrngEntropySource_, engine, dateTimeVector, entropySource)
}

void OrgSpongycastleCryptoPrngX931RNG_processWithByteArray_withByteArray_withByteArray_(OrgSpongycastleCryptoPrngX931RNG *self, IOSByteArray *res, IOSByteArray *a, IOSByteArray *b) {
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(res))->size_; i++) {
    *IOSByteArray_GetRef(res, i) = (jbyte) (IOSByteArray_Get(nil_chk(a), i) ^ IOSByteArray_Get(nil_chk(b), i));
  }
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->engine_)) processBlockWithByteArray:res withInt:0 withByteArray:res withInt:0];
}

void OrgSpongycastleCryptoPrngX931RNG_incrementWithByteArray_(OrgSpongycastleCryptoPrngX931RNG *self, IOSByteArray *val) {
  for (jint i = ((IOSByteArray *) nil_chk(val))->size_ - 1; i >= 0; i--) {
    if (++(*IOSByteArray_GetRef(val, i)) != 0) {
      break;
    }
  }
}

jboolean OrgSpongycastleCryptoPrngX931RNG_isTooLargeWithByteArray_withInt_(IOSByteArray *bytes, jint maxBytes) {
  OrgSpongycastleCryptoPrngX931RNG_initialize();
  return bytes != nil && bytes->size_ > maxBytes;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoPrngX931RNG)
