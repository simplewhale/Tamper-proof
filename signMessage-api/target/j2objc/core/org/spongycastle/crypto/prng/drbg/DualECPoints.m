//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/prng/drbg/DualECPoints.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/crypto/prng/drbg/DualECPoints.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECPoint.h"

@interface OrgSpongycastleCryptoPrngDrbgDualECPoints () {
 @public
  OrgSpongycastleMathEcECPoint *p_;
  OrgSpongycastleMathEcECPoint *q_;
  jint securityStrength_;
  jint cofactor_;
}

+ (jint)log2WithInt:(jint)value;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngDrbgDualECPoints, p_, OrgSpongycastleMathEcECPoint *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoPrngDrbgDualECPoints, q_, OrgSpongycastleMathEcECPoint *)

__attribute__((unused)) static jint OrgSpongycastleCryptoPrngDrbgDualECPoints_log2WithInt_(jint value);

@implementation OrgSpongycastleCryptoPrngDrbgDualECPoints

- (instancetype)initWithInt:(jint)securityStrength
withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p
withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)q
                    withInt:(jint)cofactor {
  OrgSpongycastleCryptoPrngDrbgDualECPoints_initWithInt_withOrgSpongycastleMathEcECPoint_withOrgSpongycastleMathEcECPoint_withInt_(self, securityStrength, p, q, cofactor);
  return self;
}

- (jint)getSeedLen {
  return [((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(p_)) getCurve])) getFieldSize];
}

- (jint)getMaxOutlen {
  return (([((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(p_)) getCurve])) getFieldSize] - (13 + OrgSpongycastleCryptoPrngDrbgDualECPoints_log2WithInt_(cofactor_))) / 8) * 8;
}

- (OrgSpongycastleMathEcECPoint *)getP {
  return p_;
}

- (OrgSpongycastleMathEcECPoint *)getQ {
  return q_;
}

- (jint)getSecurityStrength {
  return securityStrength_;
}

- (jint)getCofactor {
  return cofactor_;
}

+ (jint)log2WithInt:(jint)value {
  return OrgSpongycastleCryptoPrngDrbgDualECPoints_log2WithInt_(value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withOrgSpongycastleMathEcECPoint:withOrgSpongycastleMathEcECPoint:withInt:);
  methods[1].selector = @selector(getSeedLen);
  methods[2].selector = @selector(getMaxOutlen);
  methods[3].selector = @selector(getP);
  methods[4].selector = @selector(getQ);
  methods[5].selector = @selector(getSecurityStrength);
  methods[6].selector = @selector(getCofactor);
  methods[7].selector = @selector(log2WithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "p_", "LOrgSpongycastleMathEcECPoint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "q_", "LOrgSpongycastleMathEcECPoint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "securityStrength_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cofactor_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILOrgSpongycastleMathEcECPoint;LOrgSpongycastleMathEcECPoint;I", "log2", "I" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoPrngDrbgDualECPoints = { "DualECPoints", "org.spongycastle.crypto.prng.drbg", ptrTable, methods, fields, 7, 0x1, 8, 4, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoPrngDrbgDualECPoints;
}

@end

void OrgSpongycastleCryptoPrngDrbgDualECPoints_initWithInt_withOrgSpongycastleMathEcECPoint_withOrgSpongycastleMathEcECPoint_withInt_(OrgSpongycastleCryptoPrngDrbgDualECPoints *self, jint securityStrength, OrgSpongycastleMathEcECPoint *p, OrgSpongycastleMathEcECPoint *q, jint cofactor) {
  NSObject_init(self);
  if (![((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk(p)) getCurve])) equalsWithOrgSpongycastleMathEcECCurve:[((OrgSpongycastleMathEcECPoint *) nil_chk(q)) getCurve]]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"points need to be on the same curve");
  }
  self->securityStrength_ = securityStrength;
  self->p_ = p;
  self->q_ = q;
  self->cofactor_ = cofactor;
}

OrgSpongycastleCryptoPrngDrbgDualECPoints *new_OrgSpongycastleCryptoPrngDrbgDualECPoints_initWithInt_withOrgSpongycastleMathEcECPoint_withOrgSpongycastleMathEcECPoint_withInt_(jint securityStrength, OrgSpongycastleMathEcECPoint *p, OrgSpongycastleMathEcECPoint *q, jint cofactor) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoPrngDrbgDualECPoints, initWithInt_withOrgSpongycastleMathEcECPoint_withOrgSpongycastleMathEcECPoint_withInt_, securityStrength, p, q, cofactor)
}

OrgSpongycastleCryptoPrngDrbgDualECPoints *create_OrgSpongycastleCryptoPrngDrbgDualECPoints_initWithInt_withOrgSpongycastleMathEcECPoint_withOrgSpongycastleMathEcECPoint_withInt_(jint securityStrength, OrgSpongycastleMathEcECPoint *p, OrgSpongycastleMathEcECPoint *q, jint cofactor) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoPrngDrbgDualECPoints, initWithInt_withOrgSpongycastleMathEcECPoint_withOrgSpongycastleMathEcECPoint_withInt_, securityStrength, p, q, cofactor)
}

jint OrgSpongycastleCryptoPrngDrbgDualECPoints_log2WithInt_(jint value) {
  OrgSpongycastleCryptoPrngDrbgDualECPoints_initialize();
  jint log = 0;
  while ((JreRShiftAssignInt(&value, 1)) != 0) {
    log++;
  }
  return log;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoPrngDrbgDualECPoints)
