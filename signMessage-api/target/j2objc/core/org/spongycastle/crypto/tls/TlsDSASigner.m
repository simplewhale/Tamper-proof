//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsDSASigner.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DSA.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/Signer.h"
#include "org/spongycastle/crypto/digests/NullDigest.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/crypto/signers/DSADigestSigner.h"
#include "org/spongycastle/crypto/tls/AbstractTlsSigner.h"
#include "org/spongycastle/crypto/tls/HashAlgorithm.h"
#include "org/spongycastle/crypto/tls/SignatureAndHashAlgorithm.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsDSASigner.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

@implementation OrgSpongycastleCryptoTlsTlsDSASigner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsTlsDSASigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)generateRawSignatureWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                      withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:(OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)privateKey
                                                                              withByteArray:(IOSByteArray *)hash_ {
  id<OrgSpongycastleCryptoSigner> signer = [self makeSignerWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:algorithm withBoolean:true withBoolean:true withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsParametersWithRandom_initWithOrgSpongycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(privateKey, [((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(self->context_)) getSecureRandom])];
  if (algorithm == nil) {
    [((id<OrgSpongycastleCryptoSigner>) nil_chk(signer)) updateWithByteArray:hash_ withInt:16 withInt:20];
  }
  else {
    [((id<OrgSpongycastleCryptoSigner>) nil_chk(signer)) updateWithByteArray:hash_ withInt:0 withInt:((IOSByteArray *) nil_chk(hash_))->size_];
  }
  return [signer generateSignature];
}

- (jboolean)verifyRawSignatureWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                                      withByteArray:(IOSByteArray *)sigBytes
                              withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:(OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)publicKey
                                                                      withByteArray:(IOSByteArray *)hash_ {
  id<OrgSpongycastleCryptoSigner> signer = [self makeSignerWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:algorithm withBoolean:true withBoolean:false withOrgSpongycastleCryptoCipherParameters:publicKey];
  if (algorithm == nil) {
    [((id<OrgSpongycastleCryptoSigner>) nil_chk(signer)) updateWithByteArray:hash_ withInt:16 withInt:20];
  }
  else {
    [((id<OrgSpongycastleCryptoSigner>) nil_chk(signer)) updateWithByteArray:hash_ withInt:0 withInt:((IOSByteArray *) nil_chk(hash_))->size_];
  }
  return [signer verifySignatureWithByteArray:sigBytes];
}

- (id<OrgSpongycastleCryptoSigner>)createSignerWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                               withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:(OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)privateKey {
  return [self makeSignerWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:algorithm withBoolean:false withBoolean:true withOrgSpongycastleCryptoCipherParameters:privateKey];
}

- (id<OrgSpongycastleCryptoSigner>)createVerifyerWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                 withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:(OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)publicKey {
  return [self makeSignerWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:algorithm withBoolean:false withBoolean:false withOrgSpongycastleCryptoCipherParameters:publicKey];
}

- (id<OrgSpongycastleCryptoCipherParameters>)makeInitParametersWithBoolean:(jboolean)forSigning
                                 withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)cp {
  return cp;
}

- (id<OrgSpongycastleCryptoSigner>)makeSignerWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                                                                       withBoolean:(jboolean)raw
                                                                                       withBoolean:(jboolean)forSigning
                                                         withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)cp {
  if ((algorithm != nil) != OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_(context_)) {
    @throw new_JavaLangIllegalStateException_init();
  }
  if (algorithm != nil && [algorithm getSignature] != [self getSignatureAlgorithm]) {
    @throw new_JavaLangIllegalStateException_init();
  }
  jshort hashAlgorithm = algorithm == nil ? OrgSpongycastleCryptoTlsHashAlgorithm_sha1 : [algorithm getHash];
  id<OrgSpongycastleCryptoDigest> d = raw ? new_OrgSpongycastleCryptoDigestsNullDigest_init() : OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(hashAlgorithm);
  id<OrgSpongycastleCryptoSigner> s = new_OrgSpongycastleCryptoSignersDSADigestSigner_initWithOrgSpongycastleCryptoDSA_withOrgSpongycastleCryptoDigest_([self createDSAImplWithShort:hashAlgorithm], d);
  [s init__WithBoolean:forSigning withOrgSpongycastleCryptoCipherParameters:[self makeInitParametersWithBoolean:forSigning withOrgSpongycastleCryptoCipherParameters:cp]];
  return s;
}

- (jshort)getSignatureAlgorithm {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgSpongycastleCryptoDSA>)createDSAImplWithShort:(jshort)hashAlgorithm {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoSigner;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoSigner;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoCipherParameters;", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoSigner;", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "S", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoDSA;", 0x404, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateRawSignatureWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:withByteArray:);
  methods[2].selector = @selector(verifyRawSignatureWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:withByteArray:withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:withByteArray:);
  methods[3].selector = @selector(createSignerWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:);
  methods[4].selector = @selector(createVerifyerWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:);
  methods[5].selector = @selector(makeInitParametersWithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[6].selector = @selector(makeSignerWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:withBoolean:withBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[7].selector = @selector(getSignatureAlgorithm);
  methods[8].selector = @selector(createDSAImplWithShort:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "generateRawSignature", "LOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;[B", "LOrgSpongycastleCryptoCryptoException;", "verifyRawSignature", "LOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;[BLOrgSpongycastleCryptoParamsAsymmetricKeyParameter;[B", "createSigner", "LOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", "createVerifyer", "makeInitParameters", "ZLOrgSpongycastleCryptoCipherParameters;", "makeSigner", "LOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;ZZLOrgSpongycastleCryptoCipherParameters;", "createDSAImpl", "S" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsTlsDSASigner = { "TlsDSASigner", "org.spongycastle.crypto.tls", ptrTable, methods, NULL, 7, 0x401, 9, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsTlsDSASigner;
}

@end

void OrgSpongycastleCryptoTlsTlsDSASigner_init(OrgSpongycastleCryptoTlsTlsDSASigner *self) {
  OrgSpongycastleCryptoTlsAbstractTlsSigner_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsTlsDSASigner)
