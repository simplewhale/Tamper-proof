//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsSRPUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsSRPUtils")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsTlsSRPUtils
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsSRPUtils 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsSRPUtils 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsTlsSRPUtils

#if !defined (OrgSpongycastleCryptoTlsTlsSRPUtils_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsSRPUtils || defined(INCLUDE_OrgSpongycastleCryptoTlsTlsSRPUtils))
#define OrgSpongycastleCryptoTlsTlsSRPUtils_

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaLangInteger;
@class JavaMathBigInteger;
@class JavaUtilHashtable;

@interface OrgSpongycastleCryptoTlsTlsSRPUtils : NSObject

#pragma mark Public

- (instancetype)init;

+ (void)addSRPExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                               withByteArray:(IOSByteArray *)identity;

+ (IOSByteArray *)createSRPExtensionWithByteArray:(IOSByteArray *)identity;

+ (IOSByteArray *)getSRPExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jboolean)isSRPCipherSuiteWithInt:(jint)cipherSuite;

+ (IOSByteArray *)readSRPExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (JavaMathBigInteger *)readSRPParameterWithJavaIoInputStream:(JavaIoInputStream *)input;

+ (void)writeSRPParameterWithJavaMathBigInteger:(JavaMathBigInteger *)x
                         withJavaIoOutputStream:(JavaIoOutputStream *)output;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleCryptoTlsTlsSRPUtils)

inline JavaLangInteger *OrgSpongycastleCryptoTlsTlsSRPUtils_get_EXT_SRP(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *OrgSpongycastleCryptoTlsTlsSRPUtils_EXT_SRP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsSRPUtils, EXT_SRP, JavaLangInteger *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsSRPUtils_init(OrgSpongycastleCryptoTlsTlsSRPUtils *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsSRPUtils *new_OrgSpongycastleCryptoTlsTlsSRPUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsSRPUtils *create_OrgSpongycastleCryptoTlsTlsSRPUtils_init(void);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsSRPUtils_addSRPExtensionWithJavaUtilHashtable_withByteArray_(JavaUtilHashtable *extensions, IOSByteArray *identity);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsSRPUtils_getSRPExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsSRPUtils_createSRPExtensionWithByteArray_(IOSByteArray *identity);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsSRPUtils_readSRPExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleCryptoTlsTlsSRPUtils_readSRPParameterWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsSRPUtils_writeSRPParameterWithJavaMathBigInteger_withJavaIoOutputStream_(JavaMathBigInteger *x, JavaIoOutputStream *output);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsSRPUtils_isSRPCipherSuiteWithInt_(jint cipherSuite);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsTlsSRPUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsSRPUtils")
