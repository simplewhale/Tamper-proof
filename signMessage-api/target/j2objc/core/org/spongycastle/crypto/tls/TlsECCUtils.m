//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsECCUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "java/util/Hashtable.h"
#include "org/spongycastle/asn1/x9/ECNamedCurveTable.h"
#include "org/spongycastle/asn1/x9/X9ECParameters.h"
#include "org/spongycastle/crypto/AsymmetricCipherKeyPair.h"
#include "org/spongycastle/crypto/agreement/ECDHBasicAgreement.h"
#include "org/spongycastle/crypto/ec/CustomNamedCurves.h"
#include "org/spongycastle/crypto/generators/ECKeyPairGenerator.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECKeyGenerationParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/CipherSuite.h"
#include "org/spongycastle/crypto/tls/ECBasisType.h"
#include "org/spongycastle/crypto/tls/ECCurveType.h"
#include "org/spongycastle/crypto/tls/ECPointFormat.h"
#include "org/spongycastle/crypto/tls/ExtensionType.h"
#include "org/spongycastle/crypto/tls/NamedCurve.h"
#include "org/spongycastle/crypto/tls/TlsECCUtils.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsProtocol.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/math/ec/ECAlgorithms.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECFieldElement.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/math/field/FiniteField.h"
#include "org/spongycastle/math/field/Polynomial.h"
#include "org/spongycastle/math/field/PolynomialExtensionField.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/BigIntegers.h"
#include "org/spongycastle/util/Integers.h"

@interface OrgSpongycastleCryptoTlsTlsECCUtils ()

+ (void)checkNamedCurveWithIntArray:(IOSIntArray *)namedCurves
                            withInt:(jint)namedCurve;

@end

inline IOSObjectArray *OrgSpongycastleCryptoTlsTlsECCUtils_get_CURVE_NAMES(void);
static IOSObjectArray *OrgSpongycastleCryptoTlsTlsECCUtils_CURVE_NAMES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsECCUtils, CURVE_NAMES, IOSObjectArray *)

__attribute__((unused)) static void OrgSpongycastleCryptoTlsTlsECCUtils_checkNamedCurveWithIntArray_withInt_(IOSIntArray *namedCurves, jint namedCurve);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoTlsTlsECCUtils)

JavaLangInteger *OrgSpongycastleCryptoTlsTlsECCUtils_EXT_elliptic_curves;
JavaLangInteger *OrgSpongycastleCryptoTlsTlsECCUtils_EXT_ec_point_formats;

@implementation OrgSpongycastleCryptoTlsTlsECCUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsTlsECCUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)addSupportedEllipticCurvesExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                                    withIntArray:(IOSIntArray *)namedCurves {
  OrgSpongycastleCryptoTlsTlsECCUtils_addSupportedEllipticCurvesExtensionWithJavaUtilHashtable_withIntArray_(extensions, namedCurves);
}

+ (void)addSupportedPointFormatsExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                                withShortArray:(IOSShortArray *)ecPointFormats {
  OrgSpongycastleCryptoTlsTlsECCUtils_addSupportedPointFormatsExtensionWithJavaUtilHashtable_withShortArray_(extensions, ecPointFormats);
}

+ (IOSIntArray *)getSupportedEllipticCurvesExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  return OrgSpongycastleCryptoTlsTlsECCUtils_getSupportedEllipticCurvesExtensionWithJavaUtilHashtable_(extensions);
}

+ (IOSShortArray *)getSupportedPointFormatsExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  return OrgSpongycastleCryptoTlsTlsECCUtils_getSupportedPointFormatsExtensionWithJavaUtilHashtable_(extensions);
}

+ (IOSByteArray *)createSupportedEllipticCurvesExtensionWithIntArray:(IOSIntArray *)namedCurves {
  return OrgSpongycastleCryptoTlsTlsECCUtils_createSupportedEllipticCurvesExtensionWithIntArray_(namedCurves);
}

+ (IOSByteArray *)createSupportedPointFormatsExtensionWithShortArray:(IOSShortArray *)ecPointFormats {
  return OrgSpongycastleCryptoTlsTlsECCUtils_createSupportedPointFormatsExtensionWithShortArray_(ecPointFormats);
}

+ (IOSIntArray *)readSupportedEllipticCurvesExtensionWithByteArray:(IOSByteArray *)extensionData {
  return OrgSpongycastleCryptoTlsTlsECCUtils_readSupportedEllipticCurvesExtensionWithByteArray_(extensionData);
}

+ (IOSShortArray *)readSupportedPointFormatsExtensionWithByteArray:(IOSByteArray *)extensionData {
  return OrgSpongycastleCryptoTlsTlsECCUtils_readSupportedPointFormatsExtensionWithByteArray_(extensionData);
}

+ (NSString *)getNameOfNamedCurveWithInt:(jint)namedCurve {
  return OrgSpongycastleCryptoTlsTlsECCUtils_getNameOfNamedCurveWithInt_(namedCurve);
}

+ (OrgSpongycastleCryptoParamsECDomainParameters *)getParametersForNamedCurveWithInt:(jint)namedCurve {
  return OrgSpongycastleCryptoTlsTlsECCUtils_getParametersForNamedCurveWithInt_(namedCurve);
}

+ (jboolean)hasAnySupportedNamedCurves {
  return OrgSpongycastleCryptoTlsTlsECCUtils_hasAnySupportedNamedCurves();
}

+ (jboolean)containsECCCipherSuitesWithIntArray:(IOSIntArray *)cipherSuites {
  return OrgSpongycastleCryptoTlsTlsECCUtils_containsECCCipherSuitesWithIntArray_(cipherSuites);
}

+ (jboolean)isECCCipherSuiteWithInt:(jint)cipherSuite {
  return OrgSpongycastleCryptoTlsTlsECCUtils_isECCCipherSuiteWithInt_(cipherSuite);
}

+ (jboolean)areOnSameCurveWithOrgSpongycastleCryptoParamsECDomainParameters:(OrgSpongycastleCryptoParamsECDomainParameters *)a
                          withOrgSpongycastleCryptoParamsECDomainParameters:(OrgSpongycastleCryptoParamsECDomainParameters *)b {
  return OrgSpongycastleCryptoTlsTlsECCUtils_areOnSameCurveWithOrgSpongycastleCryptoParamsECDomainParameters_withOrgSpongycastleCryptoParamsECDomainParameters_(a, b);
}

+ (jboolean)isSupportedNamedCurveWithInt:(jint)namedCurve {
  return OrgSpongycastleCryptoTlsTlsECCUtils_isSupportedNamedCurveWithInt_(namedCurve);
}

+ (jboolean)isCompressionPreferredWithShortArray:(IOSShortArray *)ecPointFormats
                                       withShort:(jshort)compressionFormat {
  return OrgSpongycastleCryptoTlsTlsECCUtils_isCompressionPreferredWithShortArray_withShort_(ecPointFormats, compressionFormat);
}

+ (IOSByteArray *)serializeECFieldElementWithInt:(jint)fieldSize
                          withJavaMathBigInteger:(JavaMathBigInteger *)x {
  return OrgSpongycastleCryptoTlsTlsECCUtils_serializeECFieldElementWithInt_withJavaMathBigInteger_(fieldSize, x);
}

+ (IOSByteArray *)serializeECPointWithShortArray:(IOSShortArray *)ecPointFormats
                withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)point {
  return OrgSpongycastleCryptoTlsTlsECCUtils_serializeECPointWithShortArray_withOrgSpongycastleMathEcECPoint_(ecPointFormats, point);
}

+ (IOSByteArray *)serializeECPublicKeyWithShortArray:(IOSShortArray *)ecPointFormats
withOrgSpongycastleCryptoParamsECPublicKeyParameters:(OrgSpongycastleCryptoParamsECPublicKeyParameters *)keyParameters {
  return OrgSpongycastleCryptoTlsTlsECCUtils_serializeECPublicKeyWithShortArray_withOrgSpongycastleCryptoParamsECPublicKeyParameters_(ecPointFormats, keyParameters);
}

+ (JavaMathBigInteger *)deserializeECFieldElementWithInt:(jint)fieldSize
                                           withByteArray:(IOSByteArray *)encoding {
  return OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECFieldElementWithInt_withByteArray_(fieldSize, encoding);
}

+ (OrgSpongycastleMathEcECPoint *)deserializeECPointWithShortArray:(IOSShortArray *)ecPointFormats
                                  withOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)curve
                                                     withByteArray:(IOSByteArray *)encoding {
  return OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECPointWithShortArray_withOrgSpongycastleMathEcECCurve_withByteArray_(ecPointFormats, curve, encoding);
}

+ (OrgSpongycastleCryptoParamsECPublicKeyParameters *)deserializeECPublicKeyWithShortArray:(IOSShortArray *)ecPointFormats
                                         withOrgSpongycastleCryptoParamsECDomainParameters:(OrgSpongycastleCryptoParamsECDomainParameters *)curve_params
                                                                             withByteArray:(IOSByteArray *)encoding {
  return OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECPublicKeyWithShortArray_withOrgSpongycastleCryptoParamsECDomainParameters_withByteArray_(ecPointFormats, curve_params, encoding);
}

+ (IOSByteArray *)calculateECDHBasicAgreementWithOrgSpongycastleCryptoParamsECPublicKeyParameters:(OrgSpongycastleCryptoParamsECPublicKeyParameters *)publicKey
                                            withOrgSpongycastleCryptoParamsECPrivateKeyParameters:(OrgSpongycastleCryptoParamsECPrivateKeyParameters *)privateKey {
  return OrgSpongycastleCryptoTlsTlsECCUtils_calculateECDHBasicAgreementWithOrgSpongycastleCryptoParamsECPublicKeyParameters_withOrgSpongycastleCryptoParamsECPrivateKeyParameters_(publicKey, privateKey);
}

+ (OrgSpongycastleCryptoAsymmetricCipherKeyPair *)generateECKeyPairWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                              withOrgSpongycastleCryptoParamsECDomainParameters:(OrgSpongycastleCryptoParamsECDomainParameters *)ecParams {
  return OrgSpongycastleCryptoTlsTlsECCUtils_generateECKeyPairWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoParamsECDomainParameters_(random, ecParams);
}

+ (OrgSpongycastleCryptoParamsECPrivateKeyParameters *)generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                                                                       withShortArray:(IOSShortArray *)ecPointFormats
                                                                    withOrgSpongycastleCryptoParamsECDomainParameters:(OrgSpongycastleCryptoParamsECDomainParameters *)ecParams
                                                                                               withJavaIoOutputStream:(JavaIoOutputStream *)output {
  return OrgSpongycastleCryptoTlsTlsECCUtils_generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom_withShortArray_withOrgSpongycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(random, ecPointFormats, ecParams, output);
}

+ (OrgSpongycastleCryptoParamsECPrivateKeyParameters *)generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                                                                         withIntArray:(IOSIntArray *)namedCurves
                                                                                                       withShortArray:(IOSShortArray *)ecPointFormats
                                                                                               withJavaIoOutputStream:(JavaIoOutputStream *)output {
  return OrgSpongycastleCryptoTlsTlsECCUtils_generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom_withIntArray_withShortArray_withJavaIoOutputStream_(random, namedCurves, ecPointFormats, output);
}

+ (OrgSpongycastleCryptoParamsECPublicKeyParameters *)validateECPublicKeyWithOrgSpongycastleCryptoParamsECPublicKeyParameters:(OrgSpongycastleCryptoParamsECPublicKeyParameters *)key {
  return OrgSpongycastleCryptoTlsTlsECCUtils_validateECPublicKeyWithOrgSpongycastleCryptoParamsECPublicKeyParameters_(key);
}

+ (jint)readECExponentWithInt:(jint)fieldSize
        withJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsECCUtils_readECExponentWithInt_withJavaIoInputStream_(fieldSize, input);
}

+ (JavaMathBigInteger *)readECFieldElementWithInt:(jint)fieldSize
                            withJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsECCUtils_readECFieldElementWithInt_withJavaIoInputStream_(fieldSize, input);
}

+ (JavaMathBigInteger *)readECParameterWithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(input);
}

+ (OrgSpongycastleCryptoParamsECDomainParameters *)readECParametersWithIntArray:(IOSIntArray *)namedCurves
                                                                 withShortArray:(IOSShortArray *)ecPointFormats
                                                          withJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsECCUtils_readECParametersWithIntArray_withShortArray_withJavaIoInputStream_(namedCurves, ecPointFormats, input);
}

+ (void)checkNamedCurveWithIntArray:(IOSIntArray *)namedCurves
                            withInt:(jint)namedCurve {
  OrgSpongycastleCryptoTlsTlsECCUtils_checkNamedCurveWithIntArray_withInt_(namedCurves, namedCurve);
}

+ (void)writeECExponentWithInt:(jint)k
        withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsECCUtils_writeECExponentWithInt_withJavaIoOutputStream_(k, output);
}

+ (void)writeECFieldElementWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                            withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsECCUtils_writeECFieldElementWithOrgSpongycastleMathEcECFieldElement_withJavaIoOutputStream_(x, output);
}

+ (void)writeECFieldElementWithInt:(jint)fieldSize
            withJavaMathBigInteger:(JavaMathBigInteger *)x
            withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsECCUtils_writeECFieldElementWithInt_withJavaMathBigInteger_withJavaIoOutputStream_(fieldSize, x, output);
}

+ (void)writeECParameterWithJavaMathBigInteger:(JavaMathBigInteger *)x
                        withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsECCUtils_writeECParameterWithJavaMathBigInteger_withJavaIoOutputStream_(x, output);
}

+ (void)writeExplicitECParametersWithShortArray:(IOSShortArray *)ecPointFormats
withOrgSpongycastleCryptoParamsECDomainParameters:(OrgSpongycastleCryptoParamsECDomainParameters *)ecParameters
                         withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsECCUtils_writeExplicitECParametersWithShortArray_withOrgSpongycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(ecPointFormats, ecParameters, output);
}

+ (void)writeECPointWithShortArray:(IOSShortArray *)ecPointFormats
  withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)point
            withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsECCUtils_writeECPointWithShortArray_withOrgSpongycastleMathEcECPoint_withJavaIoOutputStream_(ecPointFormats, point, output);
}

+ (void)writeNamedECParametersWithInt:(jint)namedCurve
               withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsECCUtils_writeNamedECParametersWithInt_withJavaIoOutputStream_(namedCurve, output);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, 2, -1, -1, -1 },
    { NULL, "[I", 0x9, 5, 6, 2, -1, -1, -1 },
    { NULL, "[S", 0x9, 7, 6, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 8, 9, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 10, 11, 2, -1, -1, -1 },
    { NULL, "[I", 0x9, 12, 13, 2, -1, -1, -1 },
    { NULL, "[S", 0x9, 14, 13, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsECDomainParameters;", 0x9, 17, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 18, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 19, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 20, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 22, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 25, 26, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 27, 28, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 29, 30, 2, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 31, 32, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleMathEcECPoint;", 0x9, 33, 34, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsECPublicKeyParameters;", 0x9, 35, 36, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 37, 38, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoAsymmetricCipherKeyPair;", 0x9, 39, 40, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsECPrivateKeyParameters;", 0x9, 41, 42, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsECPrivateKeyParameters;", 0x8, 43, 44, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsECPublicKeyParameters;", 0x9, 45, 46, 2, -1, -1, -1 },
    { NULL, "I", 0x9, 47, 48, 2, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 49, 48, 2, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x9, 50, 51, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsECDomainParameters;", 0x9, 52, 53, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 54, 55, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 56, 57, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 58, 59, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 58, 60, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 61, 62, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 63, 64, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 65, 66, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 67, 57, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addSupportedEllipticCurvesExtensionWithJavaUtilHashtable:withIntArray:);
  methods[2].selector = @selector(addSupportedPointFormatsExtensionWithJavaUtilHashtable:withShortArray:);
  methods[3].selector = @selector(getSupportedEllipticCurvesExtensionWithJavaUtilHashtable:);
  methods[4].selector = @selector(getSupportedPointFormatsExtensionWithJavaUtilHashtable:);
  methods[5].selector = @selector(createSupportedEllipticCurvesExtensionWithIntArray:);
  methods[6].selector = @selector(createSupportedPointFormatsExtensionWithShortArray:);
  methods[7].selector = @selector(readSupportedEllipticCurvesExtensionWithByteArray:);
  methods[8].selector = @selector(readSupportedPointFormatsExtensionWithByteArray:);
  methods[9].selector = @selector(getNameOfNamedCurveWithInt:);
  methods[10].selector = @selector(getParametersForNamedCurveWithInt:);
  methods[11].selector = @selector(hasAnySupportedNamedCurves);
  methods[12].selector = @selector(containsECCCipherSuitesWithIntArray:);
  methods[13].selector = @selector(isECCCipherSuiteWithInt:);
  methods[14].selector = @selector(areOnSameCurveWithOrgSpongycastleCryptoParamsECDomainParameters:withOrgSpongycastleCryptoParamsECDomainParameters:);
  methods[15].selector = @selector(isSupportedNamedCurveWithInt:);
  methods[16].selector = @selector(isCompressionPreferredWithShortArray:withShort:);
  methods[17].selector = @selector(serializeECFieldElementWithInt:withJavaMathBigInteger:);
  methods[18].selector = @selector(serializeECPointWithShortArray:withOrgSpongycastleMathEcECPoint:);
  methods[19].selector = @selector(serializeECPublicKeyWithShortArray:withOrgSpongycastleCryptoParamsECPublicKeyParameters:);
  methods[20].selector = @selector(deserializeECFieldElementWithInt:withByteArray:);
  methods[21].selector = @selector(deserializeECPointWithShortArray:withOrgSpongycastleMathEcECCurve:withByteArray:);
  methods[22].selector = @selector(deserializeECPublicKeyWithShortArray:withOrgSpongycastleCryptoParamsECDomainParameters:withByteArray:);
  methods[23].selector = @selector(calculateECDHBasicAgreementWithOrgSpongycastleCryptoParamsECPublicKeyParameters:withOrgSpongycastleCryptoParamsECPrivateKeyParameters:);
  methods[24].selector = @selector(generateECKeyPairWithJavaSecuritySecureRandom:withOrgSpongycastleCryptoParamsECDomainParameters:);
  methods[25].selector = @selector(generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom:withShortArray:withOrgSpongycastleCryptoParamsECDomainParameters:withJavaIoOutputStream:);
  methods[26].selector = @selector(generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom:withIntArray:withShortArray:withJavaIoOutputStream:);
  methods[27].selector = @selector(validateECPublicKeyWithOrgSpongycastleCryptoParamsECPublicKeyParameters:);
  methods[28].selector = @selector(readECExponentWithInt:withJavaIoInputStream:);
  methods[29].selector = @selector(readECFieldElementWithInt:withJavaIoInputStream:);
  methods[30].selector = @selector(readECParameterWithJavaIoInputStream:);
  methods[31].selector = @selector(readECParametersWithIntArray:withShortArray:withJavaIoInputStream:);
  methods[32].selector = @selector(checkNamedCurveWithIntArray:withInt:);
  methods[33].selector = @selector(writeECExponentWithInt:withJavaIoOutputStream:);
  methods[34].selector = @selector(writeECFieldElementWithOrgSpongycastleMathEcECFieldElement:withJavaIoOutputStream:);
  methods[35].selector = @selector(writeECFieldElementWithInt:withJavaMathBigInteger:withJavaIoOutputStream:);
  methods[36].selector = @selector(writeECParameterWithJavaMathBigInteger:withJavaIoOutputStream:);
  methods[37].selector = @selector(writeExplicitECParametersWithShortArray:withOrgSpongycastleCryptoParamsECDomainParameters:withJavaIoOutputStream:);
  methods[38].selector = @selector(writeECPointWithShortArray:withOrgSpongycastleMathEcECPoint:withJavaIoOutputStream:);
  methods[39].selector = @selector(writeNamedECParametersWithInt:withJavaIoOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EXT_elliptic_curves", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 68, -1, -1 },
    { "EXT_ec_point_formats", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 69, -1, -1 },
    { "CURVE_NAMES", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 70, -1, -1 },
  };
  static const void *ptrTable[] = { "addSupportedEllipticCurvesExtension", "LJavaUtilHashtable;[I", "LJavaIoIOException;", "addSupportedPointFormatsExtension", "LJavaUtilHashtable;[S", "getSupportedEllipticCurvesExtension", "LJavaUtilHashtable;", "getSupportedPointFormatsExtension", "createSupportedEllipticCurvesExtension", "[I", "createSupportedPointFormatsExtension", "[S", "readSupportedEllipticCurvesExtension", "[B", "readSupportedPointFormatsExtension", "getNameOfNamedCurve", "I", "getParametersForNamedCurve", "containsECCCipherSuites", "isECCCipherSuite", "areOnSameCurve", "LOrgSpongycastleCryptoParamsECDomainParameters;LOrgSpongycastleCryptoParamsECDomainParameters;", "isSupportedNamedCurve", "isCompressionPreferred", "[SS", "serializeECFieldElement", "ILJavaMathBigInteger;", "serializeECPoint", "[SLOrgSpongycastleMathEcECPoint;", "serializeECPublicKey", "[SLOrgSpongycastleCryptoParamsECPublicKeyParameters;", "deserializeECFieldElement", "I[B", "deserializeECPoint", "[SLOrgSpongycastleMathEcECCurve;[B", "deserializeECPublicKey", "[SLOrgSpongycastleCryptoParamsECDomainParameters;[B", "calculateECDHBasicAgreement", "LOrgSpongycastleCryptoParamsECPublicKeyParameters;LOrgSpongycastleCryptoParamsECPrivateKeyParameters;", "generateECKeyPair", "LJavaSecuritySecureRandom;LOrgSpongycastleCryptoParamsECDomainParameters;", "generateEphemeralClientKeyExchange", "LJavaSecuritySecureRandom;[SLOrgSpongycastleCryptoParamsECDomainParameters;LJavaIoOutputStream;", "generateEphemeralServerKeyExchange", "LJavaSecuritySecureRandom;[I[SLJavaIoOutputStream;", "validateECPublicKey", "LOrgSpongycastleCryptoParamsECPublicKeyParameters;", "readECExponent", "ILJavaIoInputStream;", "readECFieldElement", "readECParameter", "LJavaIoInputStream;", "readECParameters", "[I[SLJavaIoInputStream;", "checkNamedCurve", "[II", "writeECExponent", "ILJavaIoOutputStream;", "writeECFieldElement", "LOrgSpongycastleMathEcECFieldElement;LJavaIoOutputStream;", "ILJavaMathBigInteger;LJavaIoOutputStream;", "writeECParameter", "LJavaMathBigInteger;LJavaIoOutputStream;", "writeExplicitECParameters", "[SLOrgSpongycastleCryptoParamsECDomainParameters;LJavaIoOutputStream;", "writeECPoint", "[SLOrgSpongycastleMathEcECPoint;LJavaIoOutputStream;", "writeNamedECParameters", &OrgSpongycastleCryptoTlsTlsECCUtils_EXT_elliptic_curves, &OrgSpongycastleCryptoTlsTlsECCUtils_EXT_ec_point_formats, &OrgSpongycastleCryptoTlsTlsECCUtils_CURVE_NAMES };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsTlsECCUtils = { "TlsECCUtils", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 40, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsTlsECCUtils;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoTlsTlsECCUtils class]) {
    OrgSpongycastleCryptoTlsTlsECCUtils_EXT_elliptic_curves = OrgSpongycastleUtilIntegers_valueOfWithInt_(OrgSpongycastleCryptoTlsExtensionType_elliptic_curves);
    OrgSpongycastleCryptoTlsTlsECCUtils_EXT_ec_point_formats = OrgSpongycastleUtilIntegers_valueOfWithInt_(OrgSpongycastleCryptoTlsExtensionType_ec_point_formats);
    OrgSpongycastleCryptoTlsTlsECCUtils_CURVE_NAMES = [IOSObjectArray newArrayWithObjects:(id[]){ @"sect163k1", @"sect163r1", @"sect163r2", @"sect193r1", @"sect193r2", @"sect233k1", @"sect233r1", @"sect239k1", @"sect283k1", @"sect283r1", @"sect409k1", @"sect409r1", @"sect571k1", @"sect571r1", @"secp160k1", @"secp160r1", @"secp160r2", @"secp192k1", @"secp192r1", @"secp224k1", @"secp224r1", @"secp256k1", @"secp256r1", @"secp384r1", @"secp521r1", @"brainpoolP256r1", @"brainpoolP384r1", @"brainpoolP512r1" } count:28 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoTlsTlsECCUtils)
  }
}

@end

void OrgSpongycastleCryptoTlsTlsECCUtils_init(OrgSpongycastleCryptoTlsTlsECCUtils *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoTlsTlsECCUtils *new_OrgSpongycastleCryptoTlsTlsECCUtils_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsTlsECCUtils, init)
}

OrgSpongycastleCryptoTlsTlsECCUtils *create_OrgSpongycastleCryptoTlsTlsECCUtils_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsTlsECCUtils, init)
}

void OrgSpongycastleCryptoTlsTlsECCUtils_addSupportedEllipticCurvesExtensionWithJavaUtilHashtable_withIntArray_(JavaUtilHashtable *extensions, IOSIntArray *namedCurves) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(extensions)) putWithId:OrgSpongycastleCryptoTlsTlsECCUtils_EXT_elliptic_curves withId:OrgSpongycastleCryptoTlsTlsECCUtils_createSupportedEllipticCurvesExtensionWithIntArray_(namedCurves)];
}

void OrgSpongycastleCryptoTlsTlsECCUtils_addSupportedPointFormatsExtensionWithJavaUtilHashtable_withShortArray_(JavaUtilHashtable *extensions, IOSShortArray *ecPointFormats) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(extensions)) putWithId:OrgSpongycastleCryptoTlsTlsECCUtils_EXT_ec_point_formats withId:OrgSpongycastleCryptoTlsTlsECCUtils_createSupportedPointFormatsExtensionWithShortArray_(ecPointFormats)];
}

IOSIntArray *OrgSpongycastleCryptoTlsTlsECCUtils_getSupportedEllipticCurvesExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  IOSByteArray *extensionData = OrgSpongycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, OrgSpongycastleCryptoTlsTlsECCUtils_EXT_elliptic_curves);
  return extensionData == nil ? nil : OrgSpongycastleCryptoTlsTlsECCUtils_readSupportedEllipticCurvesExtensionWithByteArray_(extensionData);
}

IOSShortArray *OrgSpongycastleCryptoTlsTlsECCUtils_getSupportedPointFormatsExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  IOSByteArray *extensionData = OrgSpongycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, OrgSpongycastleCryptoTlsTlsECCUtils_EXT_ec_point_formats);
  return extensionData == nil ? nil : OrgSpongycastleCryptoTlsTlsECCUtils_readSupportedPointFormatsExtensionWithByteArray_(extensionData);
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsECCUtils_createSupportedEllipticCurvesExtensionWithIntArray_(IOSIntArray *namedCurves) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  if (namedCurves == nil || namedCurves->size_ < 1) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  return OrgSpongycastleCryptoTlsTlsUtils_encodeUint16ArrayWithUint16LengthWithIntArray_(namedCurves);
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsECCUtils_createSupportedPointFormatsExtensionWithShortArray_(IOSShortArray *ecPointFormats) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  if (ecPointFormats == nil || !OrgSpongycastleUtilArrays_containsWithShortArray_withShort_(ecPointFormats, OrgSpongycastleCryptoTlsECPointFormat_uncompressed)) {
    ecPointFormats = OrgSpongycastleUtilArrays_appendWithShortArray_withShort_(ecPointFormats, OrgSpongycastleCryptoTlsECPointFormat_uncompressed);
  }
  return OrgSpongycastleCryptoTlsTlsUtils_encodeUint8ArrayWithUint8LengthWithShortArray_(ecPointFormats);
}

IOSIntArray *OrgSpongycastleCryptoTlsTlsECCUtils_readSupportedEllipticCurvesExtensionWithByteArray_(IOSByteArray *extensionData) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  if (extensionData == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'extensionData' cannot be null");
  }
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(extensionData);
  jint length = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(buf);
  if (length < 2 || (length & 1) != 0) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  IOSIntArray *namedCurves = OrgSpongycastleCryptoTlsTlsUtils_readUint16ArrayWithInt_withJavaIoInputStream_(length / 2, buf);
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  return namedCurves;
}

IOSShortArray *OrgSpongycastleCryptoTlsTlsECCUtils_readSupportedPointFormatsExtensionWithByteArray_(IOSByteArray *extensionData) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  if (extensionData == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'extensionData' cannot be null");
  }
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(extensionData);
  jshort length = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(buf);
  if (length < 1) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  IOSShortArray *ecPointFormats = OrgSpongycastleCryptoTlsTlsUtils_readUint8ArrayWithInt_withJavaIoInputStream_(length, buf);
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  if (!OrgSpongycastleUtilArrays_containsWithShortArray_withShort_(ecPointFormats, OrgSpongycastleCryptoTlsECPointFormat_uncompressed)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  return ecPointFormats;
}

NSString *OrgSpongycastleCryptoTlsTlsECCUtils_getNameOfNamedCurveWithInt_(jint namedCurve) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  return OrgSpongycastleCryptoTlsTlsECCUtils_isSupportedNamedCurveWithInt_(namedCurve) ? IOSObjectArray_Get(nil_chk(OrgSpongycastleCryptoTlsTlsECCUtils_CURVE_NAMES), namedCurve - 1) : nil;
}

OrgSpongycastleCryptoParamsECDomainParameters *OrgSpongycastleCryptoTlsTlsECCUtils_getParametersForNamedCurveWithInt_(jint namedCurve) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  NSString *curveName = OrgSpongycastleCryptoTlsTlsECCUtils_getNameOfNamedCurveWithInt_(namedCurve);
  if (curveName == nil) {
    return nil;
  }
  OrgSpongycastleAsn1X9X9ECParameters *ecP = OrgSpongycastleCryptoEcCustomNamedCurves_getByNameWithNSString_(curveName);
  if (ecP == nil) {
    ecP = OrgSpongycastleAsn1X9ECNamedCurveTable_getByNameWithNSString_(curveName);
    if (ecP == nil) {
      return nil;
    }
  }
  return new_OrgSpongycastleCryptoParamsECDomainParameters_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_withByteArray_([ecP getCurve], [ecP getG], [ecP getN], [ecP getH], [ecP getSeed]);
}

jboolean OrgSpongycastleCryptoTlsTlsECCUtils_hasAnySupportedNamedCurves() {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  return ((IOSObjectArray *) nil_chk(OrgSpongycastleCryptoTlsTlsECCUtils_CURVE_NAMES))->size_ > 0;
}

jboolean OrgSpongycastleCryptoTlsTlsECCUtils_containsECCCipherSuitesWithIntArray_(IOSIntArray *cipherSuites) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(cipherSuites))->size_; ++i) {
    if (OrgSpongycastleCryptoTlsTlsECCUtils_isECCCipherSuiteWithInt_(IOSIntArray_Get(cipherSuites, i))) {
      return true;
    }
  }
  return false;
}

jboolean OrgSpongycastleCryptoTlsTlsECCUtils_isECCCipherSuiteWithInt_(jint cipherSuite) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  switch (cipherSuite) {
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_AES_256_OCB:
    return true;
    default:
    return false;
  }
}

jboolean OrgSpongycastleCryptoTlsTlsECCUtils_areOnSameCurveWithOrgSpongycastleCryptoParamsECDomainParameters_withOrgSpongycastleCryptoParamsECDomainParameters_(OrgSpongycastleCryptoParamsECDomainParameters *a, OrgSpongycastleCryptoParamsECDomainParameters *b) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  return a != nil && [a isEqual:b];
}

jboolean OrgSpongycastleCryptoTlsTlsECCUtils_isSupportedNamedCurveWithInt_(jint namedCurve) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  return (namedCurve > 0 && namedCurve <= ((IOSObjectArray *) nil_chk(OrgSpongycastleCryptoTlsTlsECCUtils_CURVE_NAMES))->size_);
}

jboolean OrgSpongycastleCryptoTlsTlsECCUtils_isCompressionPreferredWithShortArray_withShort_(IOSShortArray *ecPointFormats, jshort compressionFormat) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  if (ecPointFormats == nil) {
    return false;
  }
  for (jint i = 0; i < ecPointFormats->size_; ++i) {
    jshort ecPointFormat = IOSShortArray_Get(ecPointFormats, i);
    if (ecPointFormat == OrgSpongycastleCryptoTlsECPointFormat_uncompressed) {
      return false;
    }
    if (ecPointFormat == compressionFormat) {
      return true;
    }
  }
  return false;
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsECCUtils_serializeECFieldElementWithInt_withJavaMathBigInteger_(jint fieldSize, JavaMathBigInteger *x) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  return OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_((fieldSize + 7) / 8, x);
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsECCUtils_serializeECPointWithShortArray_withOrgSpongycastleMathEcECPoint_(IOSShortArray *ecPointFormats, OrgSpongycastleMathEcECPoint *point) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  OrgSpongycastleMathEcECCurve *curve = [((OrgSpongycastleMathEcECPoint *) nil_chk(point)) getCurve];
  jboolean compressed = false;
  if (OrgSpongycastleMathEcECAlgorithms_isFpCurveWithOrgSpongycastleMathEcECCurve_(curve)) {
    compressed = OrgSpongycastleCryptoTlsTlsECCUtils_isCompressionPreferredWithShortArray_withShort_(ecPointFormats, OrgSpongycastleCryptoTlsECPointFormat_ansiX962_compressed_prime);
  }
  else if (OrgSpongycastleMathEcECAlgorithms_isF2mCurveWithOrgSpongycastleMathEcECCurve_(curve)) {
    compressed = OrgSpongycastleCryptoTlsTlsECCUtils_isCompressionPreferredWithShortArray_withShort_(ecPointFormats, OrgSpongycastleCryptoTlsECPointFormat_ansiX962_compressed_char2);
  }
  return [point getEncodedWithBoolean:compressed];
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsECCUtils_serializeECPublicKeyWithShortArray_withOrgSpongycastleCryptoParamsECPublicKeyParameters_(IOSShortArray *ecPointFormats, OrgSpongycastleCryptoParamsECPublicKeyParameters *keyParameters) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  return OrgSpongycastleCryptoTlsTlsECCUtils_serializeECPointWithShortArray_withOrgSpongycastleMathEcECPoint_(ecPointFormats, [((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(keyParameters)) getQ]);
}

JavaMathBigInteger *OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECFieldElementWithInt_withByteArray_(jint fieldSize, IOSByteArray *encoding) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  jint requiredLength = (fieldSize + 7) / 8;
  if (((IOSByteArray *) nil_chk(encoding))->size_ != requiredLength) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, encoding);
}

OrgSpongycastleMathEcECPoint *OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECPointWithShortArray_withOrgSpongycastleMathEcECCurve_withByteArray_(IOSShortArray *ecPointFormats, OrgSpongycastleMathEcECCurve *curve, IOSByteArray *encoding) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  if (encoding == nil || encoding->size_ < 1) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  jshort actualFormat;
  switch (IOSByteArray_Get(encoding, 0)) {
    case (jint) 0x02:
    case (jint) 0x03:
    {
      if (OrgSpongycastleMathEcECAlgorithms_isF2mCurveWithOrgSpongycastleMathEcECCurve_(curve)) {
        actualFormat = OrgSpongycastleCryptoTlsECPointFormat_ansiX962_compressed_char2;
      }
      else if (OrgSpongycastleMathEcECAlgorithms_isFpCurveWithOrgSpongycastleMathEcECCurve_(curve)) {
        actualFormat = OrgSpongycastleCryptoTlsECPointFormat_ansiX962_compressed_prime;
      }
      else {
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
      }
      break;
    }
    case (jint) 0x04:
    {
      actualFormat = OrgSpongycastleCryptoTlsECPointFormat_uncompressed;
      break;
    }
    case (jint) 0x00:
    case (jint) 0x06:
    case (jint) 0x07:
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  if (actualFormat != OrgSpongycastleCryptoTlsECPointFormat_uncompressed && (ecPointFormats == nil || !OrgSpongycastleUtilArrays_containsWithShortArray_withShort_(ecPointFormats, actualFormat))) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  return [((OrgSpongycastleMathEcECCurve *) nil_chk(curve)) decodePointWithByteArray:encoding];
}

OrgSpongycastleCryptoParamsECPublicKeyParameters *OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECPublicKeyWithShortArray_withOrgSpongycastleCryptoParamsECDomainParameters_withByteArray_(IOSShortArray *ecPointFormats, OrgSpongycastleCryptoParamsECDomainParameters *curve_params, IOSByteArray *encoding) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  @try {
    OrgSpongycastleMathEcECPoint *Y = OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECPointWithShortArray_withOrgSpongycastleMathEcECCurve_withByteArray_(ecPointFormats, [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(curve_params)) getCurve], encoding);
    return new_OrgSpongycastleCryptoParamsECPublicKeyParameters_initWithOrgSpongycastleMathEcECPoint_withOrgSpongycastleCryptoParamsECDomainParameters_(Y, curve_params);
  }
  @catch (JavaLangRuntimeException *e) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter, e);
  }
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsECCUtils_calculateECDHBasicAgreementWithOrgSpongycastleCryptoParamsECPublicKeyParameters_withOrgSpongycastleCryptoParamsECPrivateKeyParameters_(OrgSpongycastleCryptoParamsECPublicKeyParameters *publicKey, OrgSpongycastleCryptoParamsECPrivateKeyParameters *privateKey) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  OrgSpongycastleCryptoAgreementECDHBasicAgreement *basicAgreement = new_OrgSpongycastleCryptoAgreementECDHBasicAgreement_init();
  [basicAgreement init__WithOrgSpongycastleCryptoCipherParameters:privateKey];
  JavaMathBigInteger *agreementValue = [basicAgreement calculateAgreementWithOrgSpongycastleCryptoCipherParameters:publicKey];
  return OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_([basicAgreement getFieldSize], agreementValue);
}

OrgSpongycastleCryptoAsymmetricCipherKeyPair *OrgSpongycastleCryptoTlsTlsECCUtils_generateECKeyPairWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoParamsECDomainParameters_(JavaSecuritySecureRandom *random, OrgSpongycastleCryptoParamsECDomainParameters *ecParams) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  OrgSpongycastleCryptoGeneratorsECKeyPairGenerator *keyPairGenerator = new_OrgSpongycastleCryptoGeneratorsECKeyPairGenerator_init();
  [keyPairGenerator init__WithOrgSpongycastleCryptoKeyGenerationParameters:new_OrgSpongycastleCryptoParamsECKeyGenerationParameters_initWithOrgSpongycastleCryptoParamsECDomainParameters_withJavaSecuritySecureRandom_(ecParams, random)];
  return [keyPairGenerator generateKeyPair];
}

OrgSpongycastleCryptoParamsECPrivateKeyParameters *OrgSpongycastleCryptoTlsTlsECCUtils_generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom_withShortArray_withOrgSpongycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(JavaSecuritySecureRandom *random, IOSShortArray *ecPointFormats, OrgSpongycastleCryptoParamsECDomainParameters *ecParams, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  OrgSpongycastleCryptoAsymmetricCipherKeyPair *kp = OrgSpongycastleCryptoTlsTlsECCUtils_generateECKeyPairWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoParamsECDomainParameters_(random, ecParams);
  OrgSpongycastleCryptoParamsECPublicKeyParameters *ecPublicKey = (OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk([((OrgSpongycastleCryptoAsymmetricCipherKeyPair *) nil_chk(kp)) getPublic], [OrgSpongycastleCryptoParamsECPublicKeyParameters class]);
  OrgSpongycastleCryptoTlsTlsECCUtils_writeECPointWithShortArray_withOrgSpongycastleMathEcECPoint_withJavaIoOutputStream_(ecPointFormats, [((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(ecPublicKey)) getQ], output);
  return (OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk([kp getPrivate], [OrgSpongycastleCryptoParamsECPrivateKeyParameters class]);
}

OrgSpongycastleCryptoParamsECPrivateKeyParameters *OrgSpongycastleCryptoTlsTlsECCUtils_generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom_withIntArray_withShortArray_withJavaIoOutputStream_(JavaSecuritySecureRandom *random, IOSIntArray *namedCurves, IOSShortArray *ecPointFormats, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  jint namedCurve = -1;
  if (namedCurves == nil) {
    namedCurve = OrgSpongycastleCryptoTlsNamedCurve_secp256r1;
  }
  else {
    for (jint i = 0; i < namedCurves->size_; ++i) {
      jint entry_ = IOSIntArray_Get(namedCurves, i);
      if (OrgSpongycastleCryptoTlsNamedCurve_isValidWithInt_(entry_) && OrgSpongycastleCryptoTlsTlsECCUtils_isSupportedNamedCurveWithInt_(entry_)) {
        namedCurve = entry_;
        break;
      }
    }
  }
  OrgSpongycastleCryptoParamsECDomainParameters *ecParams = nil;
  if (namedCurve >= 0) {
    ecParams = OrgSpongycastleCryptoTlsTlsECCUtils_getParametersForNamedCurveWithInt_(namedCurve);
  }
  else {
    if (OrgSpongycastleUtilArrays_containsWithIntArray_withInt_(namedCurves, OrgSpongycastleCryptoTlsNamedCurve_arbitrary_explicit_prime_curves)) {
      ecParams = OrgSpongycastleCryptoTlsTlsECCUtils_getParametersForNamedCurveWithInt_(OrgSpongycastleCryptoTlsNamedCurve_secp256r1);
    }
    else if (OrgSpongycastleUtilArrays_containsWithIntArray_withInt_(namedCurves, OrgSpongycastleCryptoTlsNamedCurve_arbitrary_explicit_char2_curves)) {
      ecParams = OrgSpongycastleCryptoTlsTlsECCUtils_getParametersForNamedCurveWithInt_(OrgSpongycastleCryptoTlsNamedCurve_sect283r1);
    }
  }
  if (ecParams == nil) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  if (namedCurve < 0) {
    OrgSpongycastleCryptoTlsTlsECCUtils_writeExplicitECParametersWithShortArray_withOrgSpongycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(ecPointFormats, ecParams, output);
  }
  else {
    OrgSpongycastleCryptoTlsTlsECCUtils_writeNamedECParametersWithInt_withJavaIoOutputStream_(namedCurve, output);
  }
  return OrgSpongycastleCryptoTlsTlsECCUtils_generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom_withShortArray_withOrgSpongycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(random, ecPointFormats, ecParams, output);
}

OrgSpongycastleCryptoParamsECPublicKeyParameters *OrgSpongycastleCryptoTlsTlsECCUtils_validateECPublicKeyWithOrgSpongycastleCryptoParamsECPublicKeyParameters_(OrgSpongycastleCryptoParamsECPublicKeyParameters *key) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  return key;
}

jint OrgSpongycastleCryptoTlsTlsECCUtils_readECExponentWithInt_withJavaIoInputStream_(jint fieldSize, JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  JavaMathBigInteger *K = OrgSpongycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(input);
  if ([((JavaMathBigInteger *) nil_chk(K)) bitLength] < 32) {
    jint k = [K intValue];
    if (k > 0 && k < fieldSize) {
      return k;
    }
  }
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
}

JavaMathBigInteger *OrgSpongycastleCryptoTlsTlsECCUtils_readECFieldElementWithInt_withJavaIoInputStream_(jint fieldSize, JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  return OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECFieldElementWithInt_withByteArray_(fieldSize, OrgSpongycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(input));
}

JavaMathBigInteger *OrgSpongycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  return new_JavaMathBigInteger_initWithInt_withByteArray_(1, OrgSpongycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(input));
}

OrgSpongycastleCryptoParamsECDomainParameters *OrgSpongycastleCryptoTlsTlsECCUtils_readECParametersWithIntArray_withShortArray_withJavaIoInputStream_(IOSIntArray *namedCurves, IOSShortArray *ecPointFormats, JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  @try {
    jshort curveType = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
    switch (curveType) {
      case OrgSpongycastleCryptoTlsECCurveType_explicit_prime:
      {
        OrgSpongycastleCryptoTlsTlsECCUtils_checkNamedCurveWithIntArray_withInt_(namedCurves, OrgSpongycastleCryptoTlsNamedCurve_arbitrary_explicit_prime_curves);
        JavaMathBigInteger *prime_p = OrgSpongycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(input);
        JavaMathBigInteger *a = OrgSpongycastleCryptoTlsTlsECCUtils_readECFieldElementWithInt_withJavaIoInputStream_([((JavaMathBigInteger *) nil_chk(prime_p)) bitLength], input);
        JavaMathBigInteger *b = OrgSpongycastleCryptoTlsTlsECCUtils_readECFieldElementWithInt_withJavaIoInputStream_([prime_p bitLength], input);
        IOSByteArray *baseEncoding = OrgSpongycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(input);
        JavaMathBigInteger *order = OrgSpongycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(input);
        JavaMathBigInteger *cofactor = OrgSpongycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(input);
        OrgSpongycastleMathEcECCurve *curve = new_OrgSpongycastleMathEcECCurve_Fp_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(prime_p, a, b, order, cofactor);
        OrgSpongycastleMathEcECPoint *base = OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECPointWithShortArray_withOrgSpongycastleMathEcECCurve_withByteArray_(ecPointFormats, curve, baseEncoding);
        return new_OrgSpongycastleCryptoParamsECDomainParameters_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(curve, base, order, cofactor);
      }
      case OrgSpongycastleCryptoTlsECCurveType_explicit_char2:
      {
        OrgSpongycastleCryptoTlsTlsECCUtils_checkNamedCurveWithIntArray_withInt_(namedCurves, OrgSpongycastleCryptoTlsNamedCurve_arbitrary_explicit_char2_curves);
        jint m = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(input);
        jshort basis = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
        if (!OrgSpongycastleCryptoTlsECBasisType_isValidWithShort_(basis)) {
          @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
        }
        jint k1 = OrgSpongycastleCryptoTlsTlsECCUtils_readECExponentWithInt_withJavaIoInputStream_(m, input);
        jint k2 = -1;
        jint k3 = -1;
        if (basis == OrgSpongycastleCryptoTlsECBasisType_ec_basis_pentanomial) {
          k2 = OrgSpongycastleCryptoTlsTlsECCUtils_readECExponentWithInt_withJavaIoInputStream_(m, input);
          k3 = OrgSpongycastleCryptoTlsTlsECCUtils_readECExponentWithInt_withJavaIoInputStream_(m, input);
        }
        JavaMathBigInteger *a = OrgSpongycastleCryptoTlsTlsECCUtils_readECFieldElementWithInt_withJavaIoInputStream_(m, input);
        JavaMathBigInteger *b = OrgSpongycastleCryptoTlsTlsECCUtils_readECFieldElementWithInt_withJavaIoInputStream_(m, input);
        IOSByteArray *baseEncoding = OrgSpongycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(input);
        JavaMathBigInteger *order = OrgSpongycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(input);
        JavaMathBigInteger *cofactor = OrgSpongycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(input);
        OrgSpongycastleMathEcECCurve *curve = (basis == OrgSpongycastleCryptoTlsECBasisType_ec_basis_pentanomial) ? new_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(m, k1, k2, k3, a, b, order, cofactor) : new_OrgSpongycastleMathEcECCurve_F2m_initWithInt_withInt_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(m, k1, a, b, order, cofactor);
        OrgSpongycastleMathEcECPoint *base = OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECPointWithShortArray_withOrgSpongycastleMathEcECCurve_withByteArray_(ecPointFormats, curve, baseEncoding);
        return new_OrgSpongycastleCryptoParamsECDomainParameters_initWithOrgSpongycastleMathEcECCurve_withOrgSpongycastleMathEcECPoint_withJavaMathBigInteger_withJavaMathBigInteger_(curve, base, order, cofactor);
      }
      case OrgSpongycastleCryptoTlsECCurveType_named_curve:
      {
        jint namedCurve = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(input);
        if (!OrgSpongycastleCryptoTlsNamedCurve_refersToASpecificNamedCurveWithInt_(namedCurve)) {
          @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
        }
        OrgSpongycastleCryptoTlsTlsECCUtils_checkNamedCurveWithIntArray_withInt_(namedCurves, namedCurve);
        return OrgSpongycastleCryptoTlsTlsECCUtils_getParametersForNamedCurveWithInt_(namedCurve);
      }
      default:
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
  }
  @catch (JavaLangRuntimeException *e) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter, e);
  }
}

void OrgSpongycastleCryptoTlsTlsECCUtils_checkNamedCurveWithIntArray_withInt_(IOSIntArray *namedCurves, jint namedCurve) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  if (namedCurves != nil && !OrgSpongycastleUtilArrays_containsWithIntArray_withInt_(namedCurves, namedCurve)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
}

void OrgSpongycastleCryptoTlsTlsECCUtils_writeECExponentWithInt_withJavaIoOutputStream_(jint k, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  JavaMathBigInteger *K = JavaMathBigInteger_valueOfWithLong_(k);
  OrgSpongycastleCryptoTlsTlsECCUtils_writeECParameterWithJavaMathBigInteger_withJavaIoOutputStream_(K, output);
}

void OrgSpongycastleCryptoTlsTlsECCUtils_writeECFieldElementWithOrgSpongycastleMathEcECFieldElement_withJavaIoOutputStream_(OrgSpongycastleMathEcECFieldElement *x, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_([((OrgSpongycastleMathEcECFieldElement *) nil_chk(x)) getEncoded], output);
}

void OrgSpongycastleCryptoTlsTlsECCUtils_writeECFieldElementWithInt_withJavaMathBigInteger_withJavaIoOutputStream_(jint fieldSize, JavaMathBigInteger *x, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsTlsECCUtils_serializeECFieldElementWithInt_withJavaMathBigInteger_(fieldSize, x), output);
}

void OrgSpongycastleCryptoTlsTlsECCUtils_writeECParameterWithJavaMathBigInteger_withJavaIoOutputStream_(JavaMathBigInteger *x, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(x), output);
}

void OrgSpongycastleCryptoTlsTlsECCUtils_writeExplicitECParametersWithShortArray_withOrgSpongycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(IOSShortArray *ecPointFormats, OrgSpongycastleCryptoParamsECDomainParameters *ecParameters, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  OrgSpongycastleMathEcECCurve *curve = [((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(ecParameters)) getCurve];
  if (OrgSpongycastleMathEcECAlgorithms_isFpCurveWithOrgSpongycastleMathEcECCurve_(curve)) {
    OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsECCurveType_explicit_prime, output);
    OrgSpongycastleCryptoTlsTlsECCUtils_writeECParameterWithJavaMathBigInteger_withJavaIoOutputStream_([((id<OrgSpongycastleMathFieldFiniteField>) nil_chk([((OrgSpongycastleMathEcECCurve *) nil_chk(curve)) getField])) getCharacteristic], output);
  }
  else if (OrgSpongycastleMathEcECAlgorithms_isF2mCurveWithOrgSpongycastleMathEcECCurve_(curve)) {
    id<OrgSpongycastleMathFieldPolynomialExtensionField> field = (id<OrgSpongycastleMathFieldPolynomialExtensionField>) cast_check([((OrgSpongycastleMathEcECCurve *) nil_chk(curve)) getField], OrgSpongycastleMathFieldPolynomialExtensionField_class_());
    IOSIntArray *exponents = [((id<OrgSpongycastleMathFieldPolynomial>) nil_chk([((id<OrgSpongycastleMathFieldPolynomialExtensionField>) nil_chk(field)) getMinimalPolynomial])) getExponentsPresent];
    OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsECCurveType_explicit_char2, output);
    jint m = IOSIntArray_Get(exponents, ((IOSIntArray *) nil_chk(exponents))->size_ - 1);
    OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithInt_(m);
    OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(m, output);
    if (exponents->size_ == 3) {
      OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsECBasisType_ec_basis_trinomial, output);
      OrgSpongycastleCryptoTlsTlsECCUtils_writeECExponentWithInt_withJavaIoOutputStream_(IOSIntArray_Get(exponents, 1), output);
    }
    else if (exponents->size_ == 5) {
      OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsECBasisType_ec_basis_pentanomial, output);
      OrgSpongycastleCryptoTlsTlsECCUtils_writeECExponentWithInt_withJavaIoOutputStream_(IOSIntArray_Get(exponents, 1), output);
      OrgSpongycastleCryptoTlsTlsECCUtils_writeECExponentWithInt_withJavaIoOutputStream_(IOSIntArray_Get(exponents, 2), output);
      OrgSpongycastleCryptoTlsTlsECCUtils_writeECExponentWithInt_withJavaIoOutputStream_(IOSIntArray_Get(exponents, 3), output);
    }
    else {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Only trinomial and pentomial curves are supported");
    }
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'ecParameters' not a known curve type");
  }
  OrgSpongycastleCryptoTlsTlsECCUtils_writeECFieldElementWithOrgSpongycastleMathEcECFieldElement_withJavaIoOutputStream_([curve getA], output);
  OrgSpongycastleCryptoTlsTlsECCUtils_writeECFieldElementWithOrgSpongycastleMathEcECFieldElement_withJavaIoOutputStream_([curve getB], output);
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsTlsECCUtils_serializeECPointWithShortArray_withOrgSpongycastleMathEcECPoint_(ecPointFormats, [ecParameters getG]), output);
  OrgSpongycastleCryptoTlsTlsECCUtils_writeECParameterWithJavaMathBigInteger_withJavaIoOutputStream_([ecParameters getN], output);
  OrgSpongycastleCryptoTlsTlsECCUtils_writeECParameterWithJavaMathBigInteger_withJavaIoOutputStream_([ecParameters getH], output);
}

void OrgSpongycastleCryptoTlsTlsECCUtils_writeECPointWithShortArray_withOrgSpongycastleMathEcECPoint_withJavaIoOutputStream_(IOSShortArray *ecPointFormats, OrgSpongycastleMathEcECPoint *point, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsTlsECCUtils_serializeECPointWithShortArray_withOrgSpongycastleMathEcECPoint_(ecPointFormats, point), output);
}

void OrgSpongycastleCryptoTlsTlsECCUtils_writeNamedECParametersWithInt_withJavaIoOutputStream_(jint namedCurve, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsECCUtils_initialize();
  if (!OrgSpongycastleCryptoTlsNamedCurve_refersToASpecificNamedCurveWithInt_(namedCurve)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsECCurveType_named_curve, output);
  OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithInt_(namedCurve);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(namedCurve, output);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsTlsECCUtils)
