//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DTLSProtocol.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSProtocol")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsDTLSProtocol
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSProtocol 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSProtocol 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsDTLSProtocol

#if !defined (OrgSpongycastleCryptoTlsDTLSProtocol_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSProtocol || defined(INCLUDE_OrgSpongycastleCryptoTlsDTLSProtocol))
#define OrgSpongycastleCryptoTlsDTLSProtocol_

@class IOSByteArray;
@class JavaSecuritySecureRandom;
@class JavaUtilHashtable;
@class JavaUtilVector;
@class OrgSpongycastleCryptoTlsCertificate;
@class OrgSpongycastleCryptoTlsDTLSRecordLayer;

@interface OrgSpongycastleCryptoTlsDTLSProtocol : NSObject {
 @public
  JavaSecuritySecureRandom *secureRandom_;
}

#pragma mark Protected

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

+ (void)applyMaxFragmentLengthExtensionWithOrgSpongycastleCryptoTlsDTLSRecordLayer:(OrgSpongycastleCryptoTlsDTLSRecordLayer *)recordLayer
                                                                         withShort:(jshort)maxFragmentLength;

+ (jshort)evaluateMaxFragmentLengthExtensionWithBoolean:(jboolean)resumedSession
                                  withJavaUtilHashtable:(JavaUtilHashtable *)clientExtensions
                                  withJavaUtilHashtable:(JavaUtilHashtable *)serverExtensions
                                              withShort:(jshort)alertDescription;

+ (IOSByteArray *)generateCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)certificate;

+ (IOSByteArray *)generateSupplementalDataWithJavaUtilVector:(JavaUtilVector *)supplementalData;

- (void)processFinishedWithByteArray:(IOSByteArray *)body
                       withByteArray:(IOSByteArray *)expected_verify_data;

+ (void)validateSelectedCipherSuiteWithInt:(jint)selectedCipherSuite
                                 withShort:(jshort)alertDescription;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsDTLSProtocol)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSProtocol, secureRandom_, JavaSecuritySecureRandom *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsDTLSProtocol_initWithJavaSecuritySecureRandom_(OrgSpongycastleCryptoTlsDTLSProtocol *self, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsDTLSProtocol_applyMaxFragmentLengthExtensionWithOrgSpongycastleCryptoTlsDTLSRecordLayer_withShort_(OrgSpongycastleCryptoTlsDTLSRecordLayer *recordLayer, jshort maxFragmentLength);

FOUNDATION_EXPORT jshort OrgSpongycastleCryptoTlsDTLSProtocol_evaluateMaxFragmentLengthExtensionWithBoolean_withJavaUtilHashtable_withJavaUtilHashtable_withShort_(jboolean resumedSession, JavaUtilHashtable *clientExtensions, JavaUtilHashtable *serverExtensions, jshort alertDescription);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsDTLSProtocol_generateCertificateWithOrgSpongycastleCryptoTlsCertificate_(OrgSpongycastleCryptoTlsCertificate *certificate);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsDTLSProtocol_generateSupplementalDataWithJavaUtilVector_(JavaUtilVector *supplementalData);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsDTLSProtocol_validateSelectedCipherSuiteWithInt_withShort_(jint selectedCipherSuite, jshort alertDescription);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsDTLSProtocol)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSProtocol")
