//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/ProtocolVersion.java
//

#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/ProtocolVersion.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/util/Strings.h"

@interface OrgSpongycastleCryptoTlsProtocolVersion () {
 @public
  jint version__;
  NSString *name_;
}

- (instancetype)initWithInt:(jint)v
               withNSString:(NSString *)name;

+ (OrgSpongycastleCryptoTlsProtocolVersion *)getUnknownVersionWithInt:(jint)major
                                                              withInt:(jint)minor
                                                         withNSString:(NSString *)prefix;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsProtocolVersion, name_, NSString *)

__attribute__((unused)) static void OrgSpongycastleCryptoTlsProtocolVersion_initWithInt_withNSString_(OrgSpongycastleCryptoTlsProtocolVersion *self, jint v, NSString *name);

__attribute__((unused)) static OrgSpongycastleCryptoTlsProtocolVersion *new_OrgSpongycastleCryptoTlsProtocolVersion_initWithInt_withNSString_(jint v, NSString *name) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleCryptoTlsProtocolVersion *create_OrgSpongycastleCryptoTlsProtocolVersion_initWithInt_withNSString_(jint v, NSString *name);

__attribute__((unused)) static OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_getUnknownVersionWithInt_withInt_withNSString_(jint major, jint minor, NSString *prefix);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoTlsProtocolVersion)

OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_SSLv3;
OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_TLSv10;
OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_TLSv11;
OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_TLSv12;
OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_DTLSv10;
OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_DTLSv12;

@implementation OrgSpongycastleCryptoTlsProtocolVersion

- (instancetype)initWithInt:(jint)v
               withNSString:(NSString *)name {
  OrgSpongycastleCryptoTlsProtocolVersion_initWithInt_withNSString_(self, v, name);
  return self;
}

- (jint)getFullVersion {
  return version__;
}

- (jint)getMajorVersion {
  return JreRShift32(version__, 8);
}

- (jint)getMinorVersion {
  return version__ & (jint) 0xff;
}

- (jboolean)isDTLS {
  return [self getMajorVersion] == (jint) 0xFE;
}

- (jboolean)isSSL {
  return self == OrgSpongycastleCryptoTlsProtocolVersion_SSLv3;
}

- (jboolean)isTLS {
  return [self getMajorVersion] == (jint) 0x03;
}

- (OrgSpongycastleCryptoTlsProtocolVersion *)getEquivalentTLSVersion {
  if (![self isDTLS]) {
    return self;
  }
  if (self == OrgSpongycastleCryptoTlsProtocolVersion_DTLSv10) {
    return OrgSpongycastleCryptoTlsProtocolVersion_TLSv11;
  }
  return OrgSpongycastleCryptoTlsProtocolVersion_TLSv12;
}

- (jboolean)isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)version_ {
  if ([self getMajorVersion] != [((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(version_)) getMajorVersion]) {
    return false;
  }
  jint diffMinorVersion = [version_ getMinorVersion] - [self getMinorVersion];
  return [self isDTLS] ? diffMinorVersion <= 0 : diffMinorVersion >= 0;
}

- (jboolean)isLaterVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)version_ {
  if ([self getMajorVersion] != [((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(version_)) getMajorVersion]) {
    return false;
  }
  jint diffMinorVersion = [version_ getMinorVersion] - [self getMinorVersion];
  return [self isDTLS] ? diffMinorVersion > 0 : diffMinorVersion < 0;
}

- (jboolean)isEqual:(id)other {
  return self == other || ([other isKindOfClass:[OrgSpongycastleCryptoTlsProtocolVersion class]] && [self equalsWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *) cast_chk(other, [OrgSpongycastleCryptoTlsProtocolVersion class])]);
}

- (jboolean)equalsWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)other {
  return other != nil && self->version__ == other->version__;
}

- (NSUInteger)hash {
  return version__;
}

+ (OrgSpongycastleCryptoTlsProtocolVersion *)getWithInt:(jint)major
                                                withInt:(jint)minor {
  return OrgSpongycastleCryptoTlsProtocolVersion_getWithInt_withInt_(major, minor);
}

- (NSString *)description {
  return name_;
}

+ (OrgSpongycastleCryptoTlsProtocolVersion *)getUnknownVersionWithInt:(jint)major
                                                              withInt:(jint)minor
                                                         withNSString:(NSString *)prefix {
  return OrgSpongycastleCryptoTlsProtocolVersion_getUnknownVersionWithInt_withInt_withNSString_(major, minor, prefix);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsProtocolVersion;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsProtocolVersion;", 0x9, 7, 8, 9, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsProtocolVersion;", 0xa, 11, 12, 9, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withNSString:);
  methods[1].selector = @selector(getFullVersion);
  methods[2].selector = @selector(getMajorVersion);
  methods[3].selector = @selector(getMinorVersion);
  methods[4].selector = @selector(isDTLS);
  methods[5].selector = @selector(isSSL);
  methods[6].selector = @selector(isTLS);
  methods[7].selector = @selector(getEquivalentTLSVersion);
  methods[8].selector = @selector(isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:);
  methods[9].selector = @selector(isLaterVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:);
  methods[10].selector = @selector(isEqual:);
  methods[11].selector = @selector(equalsWithOrgSpongycastleCryptoTlsProtocolVersion:);
  methods[12].selector = @selector(hash);
  methods[13].selector = @selector(getWithInt:withInt:);
  methods[14].selector = @selector(description);
  methods[15].selector = @selector(getUnknownVersionWithInt:withInt:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SSLv3", "LOrgSpongycastleCryptoTlsProtocolVersion;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "TLSv10", "LOrgSpongycastleCryptoTlsProtocolVersion;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "TLSv11", "LOrgSpongycastleCryptoTlsProtocolVersion;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "TLSv12", "LOrgSpongycastleCryptoTlsProtocolVersion;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "DTLSv10", "LOrgSpongycastleCryptoTlsProtocolVersion;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "DTLSv12", "LOrgSpongycastleCryptoTlsProtocolVersion;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "version__", "I", .constantValue.asLong = 0, 0x2, 19, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;", "isEqualOrEarlierVersionOf", "LOrgSpongycastleCryptoTlsProtocolVersion;", "isLaterVersionOf", "equals", "LNSObject;", "hashCode", "get", "II", "LJavaIoIOException;", "toString", "getUnknownVersion", "IILNSString;", &OrgSpongycastleCryptoTlsProtocolVersion_SSLv3, &OrgSpongycastleCryptoTlsProtocolVersion_TLSv10, &OrgSpongycastleCryptoTlsProtocolVersion_TLSv11, &OrgSpongycastleCryptoTlsProtocolVersion_TLSv12, &OrgSpongycastleCryptoTlsProtocolVersion_DTLSv10, &OrgSpongycastleCryptoTlsProtocolVersion_DTLSv12, "version" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsProtocolVersion = { "ProtocolVersion", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x11, 16, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsProtocolVersion;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoTlsProtocolVersion class]) {
    OrgSpongycastleCryptoTlsProtocolVersion_SSLv3 = new_OrgSpongycastleCryptoTlsProtocolVersion_initWithInt_withNSString_((jint) 0x0300, @"SSL 3.0");
    OrgSpongycastleCryptoTlsProtocolVersion_TLSv10 = new_OrgSpongycastleCryptoTlsProtocolVersion_initWithInt_withNSString_((jint) 0x0301, @"TLS 1.0");
    OrgSpongycastleCryptoTlsProtocolVersion_TLSv11 = new_OrgSpongycastleCryptoTlsProtocolVersion_initWithInt_withNSString_((jint) 0x0302, @"TLS 1.1");
    OrgSpongycastleCryptoTlsProtocolVersion_TLSv12 = new_OrgSpongycastleCryptoTlsProtocolVersion_initWithInt_withNSString_((jint) 0x0303, @"TLS 1.2");
    OrgSpongycastleCryptoTlsProtocolVersion_DTLSv10 = new_OrgSpongycastleCryptoTlsProtocolVersion_initWithInt_withNSString_((jint) 0xFEFF, @"DTLS 1.0");
    OrgSpongycastleCryptoTlsProtocolVersion_DTLSv12 = new_OrgSpongycastleCryptoTlsProtocolVersion_initWithInt_withNSString_((jint) 0xFEFD, @"DTLS 1.2");
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoTlsProtocolVersion)
  }
}

@end

void OrgSpongycastleCryptoTlsProtocolVersion_initWithInt_withNSString_(OrgSpongycastleCryptoTlsProtocolVersion *self, jint v, NSString *name) {
  NSObject_init(self);
  self->version__ = v & (jint) 0xffff;
  self->name_ = name;
}

OrgSpongycastleCryptoTlsProtocolVersion *new_OrgSpongycastleCryptoTlsProtocolVersion_initWithInt_withNSString_(jint v, NSString *name) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsProtocolVersion, initWithInt_withNSString_, v, name)
}

OrgSpongycastleCryptoTlsProtocolVersion *create_OrgSpongycastleCryptoTlsProtocolVersion_initWithInt_withNSString_(jint v, NSString *name) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsProtocolVersion, initWithInt_withNSString_, v, name)
}

OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_getWithInt_withInt_(jint major, jint minor) {
  OrgSpongycastleCryptoTlsProtocolVersion_initialize();
  switch (major) {
    case (jint) 0x03:
    {
      switch (minor) {
        case (jint) 0x00:
        return OrgSpongycastleCryptoTlsProtocolVersion_SSLv3;
        case (jint) 0x01:
        return OrgSpongycastleCryptoTlsProtocolVersion_TLSv10;
        case (jint) 0x02:
        return OrgSpongycastleCryptoTlsProtocolVersion_TLSv11;
        case (jint) 0x03:
        return OrgSpongycastleCryptoTlsProtocolVersion_TLSv12;
      }
      return OrgSpongycastleCryptoTlsProtocolVersion_getUnknownVersionWithInt_withInt_withNSString_(major, minor, @"TLS");
    }
    case (jint) 0xFE:
    {
      switch (minor) {
        case (jint) 0xFF:
        return OrgSpongycastleCryptoTlsProtocolVersion_DTLSv10;
        case (jint) 0xFE:
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
        case (jint) 0xFD:
        return OrgSpongycastleCryptoTlsProtocolVersion_DTLSv12;
      }
      return OrgSpongycastleCryptoTlsProtocolVersion_getUnknownVersionWithInt_withInt_withNSString_(major, minor, @"DTLS");
    }
    default:
    {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
  }
}

OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_getUnknownVersionWithInt_withInt_withNSString_(jint major, jint minor, NSString *prefix) {
  OrgSpongycastleCryptoTlsProtocolVersion_initialize();
  OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithInt_(major);
  OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithInt_(minor);
  jint v = (JreLShift32(major, 8)) | minor;
  NSString *hex = OrgSpongycastleUtilStrings_toUpperCaseWithNSString_([((NSString *) nil_chk(JavaLangInteger_toHexStringWithInt_((jint) 0x10000 | v))) java_substring:1]);
  return new_OrgSpongycastleCryptoTlsProtocolVersion_initWithInt_withNSString_(v, JreStrcat("$$$", prefix, @" 0x", hex));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsProtocolVersion)
