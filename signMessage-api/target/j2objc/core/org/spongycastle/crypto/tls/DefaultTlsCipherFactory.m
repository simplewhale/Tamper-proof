//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DefaultTlsCipherFactory.java
//

#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/StreamCipher.h"
#include "org/spongycastle/crypto/engines/AESEngine.h"
#include "org/spongycastle/crypto/engines/CamelliaEngine.h"
#include "org/spongycastle/crypto/engines/DESedeEngine.h"
#include "org/spongycastle/crypto/engines/RC4Engine.h"
#include "org/spongycastle/crypto/engines/SEEDEngine.h"
#include "org/spongycastle/crypto/modes/AEADBlockCipher.h"
#include "org/spongycastle/crypto/modes/CBCBlockCipher.h"
#include "org/spongycastle/crypto/modes/CCMBlockCipher.h"
#include "org/spongycastle/crypto/modes/GCMBlockCipher.h"
#include "org/spongycastle/crypto/modes/OCBBlockCipher.h"
#include "org/spongycastle/crypto/tls/AbstractTlsCipherFactory.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/Chacha20Poly1305.h"
#include "org/spongycastle/crypto/tls/DefaultTlsCipherFactory.h"
#include "org/spongycastle/crypto/tls/EncryptionAlgorithm.h"
#include "org/spongycastle/crypto/tls/HashAlgorithm.h"
#include "org/spongycastle/crypto/tls/MACAlgorithm.h"
#include "org/spongycastle/crypto/tls/TlsAEADCipher.h"
#include "org/spongycastle/crypto/tls/TlsBlockCipher.h"
#include "org/spongycastle/crypto/tls/TlsCipher.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsNullCipher.h"
#include "org/spongycastle/crypto/tls/TlsStreamCipher.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

@implementation OrgSpongycastleCryptoTlsDefaultTlsCipherFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsDefaultTlsCipherFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<OrgSpongycastleCryptoTlsTlsCipher>)createCipherWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                                    withInt:(jint)encryptionAlgorithm
                                                                                    withInt:(jint)macAlgorithm {
  switch (encryptionAlgorithm) {
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm__3DES_EDE_CBC:
    return [self createDESedeCipherWithOrgSpongycastleCryptoTlsTlsContext:context withInt:macAlgorithm];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_128_CBC:
    return [self createAESCipherWithOrgSpongycastleCryptoTlsTlsContext:context withInt:16 withInt:macAlgorithm];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_128_CCM:
    return [self createCipher_AES_CCMWithOrgSpongycastleCryptoTlsTlsContext:context withInt:16 withInt:16];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_128_CCM_8:
    return [self createCipher_AES_CCMWithOrgSpongycastleCryptoTlsTlsContext:context withInt:16 withInt:8];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_128_GCM:
    return [self createCipher_AES_GCMWithOrgSpongycastleCryptoTlsTlsContext:context withInt:16 withInt:16];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_128_OCB_TAGLEN96:
    return [self createCipher_AES_OCBWithOrgSpongycastleCryptoTlsTlsContext:context withInt:16 withInt:12];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_256_CBC:
    return [self createAESCipherWithOrgSpongycastleCryptoTlsTlsContext:context withInt:32 withInt:macAlgorithm];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_256_CCM:
    return [self createCipher_AES_CCMWithOrgSpongycastleCryptoTlsTlsContext:context withInt:32 withInt:16];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_256_CCM_8:
    return [self createCipher_AES_CCMWithOrgSpongycastleCryptoTlsTlsContext:context withInt:32 withInt:8];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_256_GCM:
    return [self createCipher_AES_GCMWithOrgSpongycastleCryptoTlsTlsContext:context withInt:32 withInt:16];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_256_OCB_TAGLEN96:
    return [self createCipher_AES_OCBWithOrgSpongycastleCryptoTlsTlsContext:context withInt:32 withInt:12];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_128_CBC:
    return [self createCamelliaCipherWithOrgSpongycastleCryptoTlsTlsContext:context withInt:16 withInt:macAlgorithm];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_128_GCM:
    return [self createCipher_Camellia_GCMWithOrgSpongycastleCryptoTlsTlsContext:context withInt:16 withInt:16];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_256_CBC:
    return [self createCamelliaCipherWithOrgSpongycastleCryptoTlsTlsContext:context withInt:32 withInt:macAlgorithm];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_256_GCM:
    return [self createCipher_Camellia_GCMWithOrgSpongycastleCryptoTlsTlsContext:context withInt:32 withInt:16];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_CHACHA20_POLY1305:
    return [self createChaCha20Poly1305WithOrgSpongycastleCryptoTlsTlsContext:context];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_NULL:
    return [self createNullCipherWithOrgSpongycastleCryptoTlsTlsContext:context withInt:macAlgorithm];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_RC4_128:
    return [self createRC4CipherWithOrgSpongycastleCryptoTlsTlsContext:context withInt:16 withInt:macAlgorithm];
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_SEED_CBC:
    return [self createSEEDCipherWithOrgSpongycastleCryptoTlsTlsContext:context withInt:macAlgorithm];
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

- (OrgSpongycastleCryptoTlsTlsBlockCipher *)createAESCipherWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                                          withInt:(jint)cipherKeySize
                                                                                          withInt:(jint)macAlgorithm {
  return new_OrgSpongycastleCryptoTlsTlsBlockCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withInt_(context, [self createAESBlockCipher], [self createAESBlockCipher], [self createHMACDigestWithInt:macAlgorithm], [self createHMACDigestWithInt:macAlgorithm], cipherKeySize);
}

- (OrgSpongycastleCryptoTlsTlsBlockCipher *)createCamelliaCipherWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                                               withInt:(jint)cipherKeySize
                                                                                               withInt:(jint)macAlgorithm {
  return new_OrgSpongycastleCryptoTlsTlsBlockCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withInt_(context, [self createCamelliaBlockCipher], [self createCamelliaBlockCipher], [self createHMACDigestWithInt:macAlgorithm], [self createHMACDigestWithInt:macAlgorithm], cipherKeySize);
}

- (id<OrgSpongycastleCryptoTlsTlsCipher>)createChaCha20Poly1305WithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context {
  return new_OrgSpongycastleCryptoTlsChacha20Poly1305_initWithOrgSpongycastleCryptoTlsTlsContext_(context);
}

- (OrgSpongycastleCryptoTlsTlsAEADCipher *)createCipher_AES_CCMWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                                              withInt:(jint)cipherKeySize
                                                                                              withInt:(jint)macSize {
  return new_OrgSpongycastleCryptoTlsTlsAEADCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoModesAEADBlockCipher_withOrgSpongycastleCryptoModesAEADBlockCipher_withInt_withInt_(context, [self createAEADBlockCipher_AES_CCM], [self createAEADBlockCipher_AES_CCM], cipherKeySize, macSize);
}

- (OrgSpongycastleCryptoTlsTlsAEADCipher *)createCipher_AES_GCMWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                                              withInt:(jint)cipherKeySize
                                                                                              withInt:(jint)macSize {
  return new_OrgSpongycastleCryptoTlsTlsAEADCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoModesAEADBlockCipher_withOrgSpongycastleCryptoModesAEADBlockCipher_withInt_withInt_(context, [self createAEADBlockCipher_AES_GCM], [self createAEADBlockCipher_AES_GCM], cipherKeySize, macSize);
}

- (OrgSpongycastleCryptoTlsTlsAEADCipher *)createCipher_AES_OCBWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                                              withInt:(jint)cipherKeySize
                                                                                              withInt:(jint)macSize {
  return new_OrgSpongycastleCryptoTlsTlsAEADCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoModesAEADBlockCipher_withOrgSpongycastleCryptoModesAEADBlockCipher_withInt_withInt_withInt_(context, [self createAEADBlockCipher_AES_OCB], [self createAEADBlockCipher_AES_OCB], cipherKeySize, macSize, OrgSpongycastleCryptoTlsTlsAEADCipher_NONCE_DRAFT_CHACHA20_POLY1305);
}

- (OrgSpongycastleCryptoTlsTlsAEADCipher *)createCipher_Camellia_GCMWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                                                   withInt:(jint)cipherKeySize
                                                                                                   withInt:(jint)macSize {
  return new_OrgSpongycastleCryptoTlsTlsAEADCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoModesAEADBlockCipher_withOrgSpongycastleCryptoModesAEADBlockCipher_withInt_withInt_(context, [self createAEADBlockCipher_Camellia_GCM], [self createAEADBlockCipher_Camellia_GCM], cipherKeySize, macSize);
}

- (OrgSpongycastleCryptoTlsTlsBlockCipher *)createDESedeCipherWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                                             withInt:(jint)macAlgorithm {
  return new_OrgSpongycastleCryptoTlsTlsBlockCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withInt_(context, [self createDESedeBlockCipher], [self createDESedeBlockCipher], [self createHMACDigestWithInt:macAlgorithm], [self createHMACDigestWithInt:macAlgorithm], 24);
}

- (OrgSpongycastleCryptoTlsTlsNullCipher *)createNullCipherWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                                          withInt:(jint)macAlgorithm {
  return new_OrgSpongycastleCryptoTlsTlsNullCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_(context, [self createHMACDigestWithInt:macAlgorithm], [self createHMACDigestWithInt:macAlgorithm]);
}

- (OrgSpongycastleCryptoTlsTlsStreamCipher *)createRC4CipherWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                                           withInt:(jint)cipherKeySize
                                                                                           withInt:(jint)macAlgorithm {
  return new_OrgSpongycastleCryptoTlsTlsStreamCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoStreamCipher_withOrgSpongycastleCryptoStreamCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withInt_withBoolean_(context, [self createRC4StreamCipher], [self createRC4StreamCipher], [self createHMACDigestWithInt:macAlgorithm], [self createHMACDigestWithInt:macAlgorithm], cipherKeySize, false);
}

- (OrgSpongycastleCryptoTlsTlsBlockCipher *)createSEEDCipherWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                                           withInt:(jint)macAlgorithm {
  return new_OrgSpongycastleCryptoTlsTlsBlockCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withInt_(context, [self createSEEDBlockCipher], [self createSEEDBlockCipher], [self createHMACDigestWithInt:macAlgorithm], [self createHMACDigestWithInt:macAlgorithm], 16);
}

- (id<OrgSpongycastleCryptoBlockCipher>)createAESEngine {
  return new_OrgSpongycastleCryptoEnginesAESEngine_init();
}

- (id<OrgSpongycastleCryptoBlockCipher>)createCamelliaEngine {
  return new_OrgSpongycastleCryptoEnginesCamelliaEngine_init();
}

- (id<OrgSpongycastleCryptoBlockCipher>)createAESBlockCipher {
  return new_OrgSpongycastleCryptoModesCBCBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_([self createAESEngine]);
}

- (id<OrgSpongycastleCryptoModesAEADBlockCipher>)createAEADBlockCipher_AES_CCM {
  return new_OrgSpongycastleCryptoModesCCMBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_([self createAESEngine]);
}

- (id<OrgSpongycastleCryptoModesAEADBlockCipher>)createAEADBlockCipher_AES_GCM {
  return new_OrgSpongycastleCryptoModesGCMBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_([self createAESEngine]);
}

- (id<OrgSpongycastleCryptoModesAEADBlockCipher>)createAEADBlockCipher_AES_OCB {
  return new_OrgSpongycastleCryptoModesOCBBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoBlockCipher_([self createAESEngine], [self createAESEngine]);
}

- (id<OrgSpongycastleCryptoModesAEADBlockCipher>)createAEADBlockCipher_Camellia_GCM {
  return new_OrgSpongycastleCryptoModesGCMBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_([self createCamelliaEngine]);
}

- (id<OrgSpongycastleCryptoBlockCipher>)createCamelliaBlockCipher {
  return new_OrgSpongycastleCryptoModesCBCBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_([self createCamelliaEngine]);
}

- (id<OrgSpongycastleCryptoBlockCipher>)createDESedeBlockCipher {
  return new_OrgSpongycastleCryptoModesCBCBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(new_OrgSpongycastleCryptoEnginesDESedeEngine_init());
}

- (id<OrgSpongycastleCryptoStreamCipher>)createRC4StreamCipher {
  return new_OrgSpongycastleCryptoEnginesRC4Engine_init();
}

- (id<OrgSpongycastleCryptoBlockCipher>)createSEEDBlockCipher {
  return new_OrgSpongycastleCryptoModesCBCBlockCipher_initWithOrgSpongycastleCryptoBlockCipher_(new_OrgSpongycastleCryptoEnginesSEEDEngine_init());
}

- (id<OrgSpongycastleCryptoDigest>)createHMACDigestWithInt:(jint)macAlgorithm {
  switch (macAlgorithm) {
    case OrgSpongycastleCryptoTlsMACAlgorithm__null:
    return nil;
    case OrgSpongycastleCryptoTlsMACAlgorithm_hmac_md5:
    return OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsHashAlgorithm_md5);
    case OrgSpongycastleCryptoTlsMACAlgorithm_hmac_sha1:
    return OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsHashAlgorithm_sha1);
    case OrgSpongycastleCryptoTlsMACAlgorithm_hmac_sha256:
    return OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsHashAlgorithm_sha256);
    case OrgSpongycastleCryptoTlsMACAlgorithm_hmac_sha384:
    return OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsHashAlgorithm_sha384);
    case OrgSpongycastleCryptoTlsMACAlgorithm_hmac_sha512:
    return OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsHashAlgorithm_sha512);
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsCipher;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsBlockCipher;", 0x4, 3, 1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsBlockCipher;", 0x4, 4, 1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsCipher;", 0x4, 5, 6, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsAEADCipher;", 0x4, 7, 1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsAEADCipher;", 0x4, 8, 1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsAEADCipher;", 0x4, 9, 1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsAEADCipher;", 0x4, 10, 1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsBlockCipher;", 0x4, 11, 12, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsNullCipher;", 0x4, 13, 12, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsStreamCipher;", 0x4, 14, 1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsBlockCipher;", 0x4, 15, 12, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoBlockCipher;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoBlockCipher;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoBlockCipher;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoModesAEADBlockCipher;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoModesAEADBlockCipher;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoModesAEADBlockCipher;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoModesAEADBlockCipher;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoBlockCipher;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoBlockCipher;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoStreamCipher;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoBlockCipher;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoDigest;", 0x4, 16, 17, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createCipherWithOrgSpongycastleCryptoTlsTlsContext:withInt:withInt:);
  methods[2].selector = @selector(createAESCipherWithOrgSpongycastleCryptoTlsTlsContext:withInt:withInt:);
  methods[3].selector = @selector(createCamelliaCipherWithOrgSpongycastleCryptoTlsTlsContext:withInt:withInt:);
  methods[4].selector = @selector(createChaCha20Poly1305WithOrgSpongycastleCryptoTlsTlsContext:);
  methods[5].selector = @selector(createCipher_AES_CCMWithOrgSpongycastleCryptoTlsTlsContext:withInt:withInt:);
  methods[6].selector = @selector(createCipher_AES_GCMWithOrgSpongycastleCryptoTlsTlsContext:withInt:withInt:);
  methods[7].selector = @selector(createCipher_AES_OCBWithOrgSpongycastleCryptoTlsTlsContext:withInt:withInt:);
  methods[8].selector = @selector(createCipher_Camellia_GCMWithOrgSpongycastleCryptoTlsTlsContext:withInt:withInt:);
  methods[9].selector = @selector(createDESedeCipherWithOrgSpongycastleCryptoTlsTlsContext:withInt:);
  methods[10].selector = @selector(createNullCipherWithOrgSpongycastleCryptoTlsTlsContext:withInt:);
  methods[11].selector = @selector(createRC4CipherWithOrgSpongycastleCryptoTlsTlsContext:withInt:withInt:);
  methods[12].selector = @selector(createSEEDCipherWithOrgSpongycastleCryptoTlsTlsContext:withInt:);
  methods[13].selector = @selector(createAESEngine);
  methods[14].selector = @selector(createCamelliaEngine);
  methods[15].selector = @selector(createAESBlockCipher);
  methods[16].selector = @selector(createAEADBlockCipher_AES_CCM);
  methods[17].selector = @selector(createAEADBlockCipher_AES_GCM);
  methods[18].selector = @selector(createAEADBlockCipher_AES_OCB);
  methods[19].selector = @selector(createAEADBlockCipher_Camellia_GCM);
  methods[20].selector = @selector(createCamelliaBlockCipher);
  methods[21].selector = @selector(createDESedeBlockCipher);
  methods[22].selector = @selector(createRC4StreamCipher);
  methods[23].selector = @selector(createSEEDBlockCipher);
  methods[24].selector = @selector(createHMACDigestWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createCipher", "LOrgSpongycastleCryptoTlsTlsContext;II", "LJavaIoIOException;", "createAESCipher", "createCamelliaCipher", "createChaCha20Poly1305", "LOrgSpongycastleCryptoTlsTlsContext;", "createCipher_AES_CCM", "createCipher_AES_GCM", "createCipher_AES_OCB", "createCipher_Camellia_GCM", "createDESedeCipher", "LOrgSpongycastleCryptoTlsTlsContext;I", "createNullCipher", "createRC4Cipher", "createSEEDCipher", "createHMACDigest", "I" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDefaultTlsCipherFactory = { "DefaultTlsCipherFactory", "org.spongycastle.crypto.tls", ptrTable, methods, NULL, 7, 0x1, 25, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDefaultTlsCipherFactory;
}

@end

void OrgSpongycastleCryptoTlsDefaultTlsCipherFactory_init(OrgSpongycastleCryptoTlsDefaultTlsCipherFactory *self) {
  OrgSpongycastleCryptoTlsAbstractTlsCipherFactory_init(self);
}

OrgSpongycastleCryptoTlsDefaultTlsCipherFactory *new_OrgSpongycastleCryptoTlsDefaultTlsCipherFactory_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDefaultTlsCipherFactory, init)
}

OrgSpongycastleCryptoTlsDefaultTlsCipherFactory *create_OrgSpongycastleCryptoTlsDefaultTlsCipherFactory_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDefaultTlsCipherFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDefaultTlsCipherFactory)
