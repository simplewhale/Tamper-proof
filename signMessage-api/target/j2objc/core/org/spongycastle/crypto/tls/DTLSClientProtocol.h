//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DTLSClientProtocol.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSClientProtocol")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsDTLSClientProtocol
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSClientProtocol 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSClientProtocol 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsDTLSClientProtocol

#if !defined (OrgSpongycastleCryptoTlsDTLSClientProtocol_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSClientProtocol || defined(INCLUDE_OrgSpongycastleCryptoTlsDTLSClientProtocol))
#define OrgSpongycastleCryptoTlsDTLSClientProtocol_

#define RESTRICT_OrgSpongycastleCryptoTlsDTLSProtocol 1
#define INCLUDE_OrgSpongycastleCryptoTlsDTLSProtocol 1
#include "org/spongycastle/crypto/tls/DTLSProtocol.h"

@class IOSByteArray;
@class JavaSecuritySecureRandom;
@class OrgSpongycastleCryptoTlsCertificate;
@class OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState;
@class OrgSpongycastleCryptoTlsDTLSRecordLayer;
@class OrgSpongycastleCryptoTlsDTLSTransport;
@class OrgSpongycastleCryptoTlsDigitallySigned;
@class OrgSpongycastleCryptoTlsProtocolVersion;
@protocol OrgSpongycastleCryptoTlsDatagramTransport;
@protocol OrgSpongycastleCryptoTlsTlsClient;

@interface OrgSpongycastleCryptoTlsDTLSClientProtocol : OrgSpongycastleCryptoTlsDTLSProtocol

#pragma mark Public

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

- (OrgSpongycastleCryptoTlsDTLSTransport *)connectWithOrgSpongycastleCryptoTlsTlsClient:(id<OrgSpongycastleCryptoTlsTlsClient>)client
                                          withOrgSpongycastleCryptoTlsDatagramTransport:(id<OrgSpongycastleCryptoTlsDatagramTransport>)transport;

#pragma mark Protected

- (void)abortClientHandshakeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                    withOrgSpongycastleCryptoTlsDTLSRecordLayer:(OrgSpongycastleCryptoTlsDTLSRecordLayer *)recordLayer
                                                                                      withShort:(jshort)alertDescription;

- (OrgSpongycastleCryptoTlsDTLSTransport *)clientHandshakeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                  withOrgSpongycastleCryptoTlsDTLSRecordLayer:(OrgSpongycastleCryptoTlsDTLSRecordLayer *)recordLayer;

- (IOSByteArray *)generateCertificateVerifyWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                   withOrgSpongycastleCryptoTlsDigitallySigned:(OrgSpongycastleCryptoTlsDigitallySigned *)certificateVerify;

- (IOSByteArray *)generateClientHelloWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                   withOrgSpongycastleCryptoTlsTlsClient:(id<OrgSpongycastleCryptoTlsTlsClient>)client;

- (IOSByteArray *)generateClientKeyExchangeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state;

- (void)invalidateSessionWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state;

+ (IOSByteArray *)patchClientHelloWithCookieWithByteArray:(IOSByteArray *)clientHelloBody
                                            withByteArray:(IOSByteArray *)cookie;

- (void)processCertificateRequestWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                       withByteArray:(IOSByteArray *)body;

- (void)processCertificateStatusWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                      withByteArray:(IOSByteArray *)body;

- (IOSByteArray *)processHelloVerifyRequestWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                                 withByteArray:(IOSByteArray *)body;

- (void)processNewSessionTicketWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                     withByteArray:(IOSByteArray *)body;

- (OrgSpongycastleCryptoTlsCertificate *)processServerCertificateWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                                                       withByteArray:(IOSByteArray *)body;

- (void)processServerHelloWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                withByteArray:(IOSByteArray *)body;

- (void)processServerKeyExchangeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                      withByteArray:(IOSByteArray *)body;

- (void)processServerSupplementalDataWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                           withByteArray:(IOSByteArray *)body;

- (void)reportServerVersionWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                   withOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)server_version;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsDTLSClientProtocol)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsDTLSClientProtocol_initWithJavaSecuritySecureRandom_(OrgSpongycastleCryptoTlsDTLSClientProtocol *self, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsDTLSClientProtocol *new_OrgSpongycastleCryptoTlsDTLSClientProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsDTLSClientProtocol *create_OrgSpongycastleCryptoTlsDTLSClientProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsDTLSClientProtocol_patchClientHelloWithCookieWithByteArray_withByteArray_(IOSByteArray *clientHelloBody, IOSByteArray *cookie);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsDTLSClientProtocol)

#endif

#if !defined (OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSClientProtocol || defined(INCLUDE_OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState))
#define OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState_

@class IOSByteArray;
@class IOSIntArray;
@class IOSShortArray;
@class JavaUtilHashtable;
@class OrgSpongycastleCryptoTlsCertificateRequest;
@class OrgSpongycastleCryptoTlsCertificateStatus;
@class OrgSpongycastleCryptoTlsSessionParameters;
@class OrgSpongycastleCryptoTlsSessionParameters_Builder;
@class OrgSpongycastleCryptoTlsTlsClientContextImpl;
@protocol OrgSpongycastleCryptoTlsTlsAuthentication;
@protocol OrgSpongycastleCryptoTlsTlsClient;
@protocol OrgSpongycastleCryptoTlsTlsCredentials;
@protocol OrgSpongycastleCryptoTlsTlsKeyExchange;
@protocol OrgSpongycastleCryptoTlsTlsSession;

@interface OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState : NSObject {
 @public
  id<OrgSpongycastleCryptoTlsTlsClient> client_;
  OrgSpongycastleCryptoTlsTlsClientContextImpl *clientContext_;
  id<OrgSpongycastleCryptoTlsTlsSession> tlsSession_;
  OrgSpongycastleCryptoTlsSessionParameters *sessionParameters_;
  OrgSpongycastleCryptoTlsSessionParameters_Builder *sessionParametersBuilder_;
  IOSIntArray *offeredCipherSuites_;
  IOSShortArray *offeredCompressionMethods_;
  JavaUtilHashtable *clientExtensions_;
  JavaUtilHashtable *serverExtensions_;
  IOSByteArray *selectedSessionID_;
  jboolean resumedSession_;
  jboolean secure_renegotiation_;
  jboolean allowCertificateStatus_;
  jboolean expectSessionTicket_;
  id<OrgSpongycastleCryptoTlsTlsKeyExchange> keyExchange_;
  id<OrgSpongycastleCryptoTlsTlsAuthentication> authentication_;
  OrgSpongycastleCryptoTlsCertificateStatus *certificateStatus_;
  OrgSpongycastleCryptoTlsCertificateRequest *certificateRequest_;
  id<OrgSpongycastleCryptoTlsTlsCredentials> clientCredentials_;
}

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, client_, id<OrgSpongycastleCryptoTlsTlsClient>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, clientContext_, OrgSpongycastleCryptoTlsTlsClientContextImpl *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, tlsSession_, id<OrgSpongycastleCryptoTlsTlsSession>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, sessionParameters_, OrgSpongycastleCryptoTlsSessionParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, sessionParametersBuilder_, OrgSpongycastleCryptoTlsSessionParameters_Builder *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, offeredCipherSuites_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, offeredCompressionMethods_, IOSShortArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, clientExtensions_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, serverExtensions_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, selectedSessionID_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, keyExchange_, id<OrgSpongycastleCryptoTlsTlsKeyExchange>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, authentication_, id<OrgSpongycastleCryptoTlsTlsAuthentication>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, certificateStatus_, OrgSpongycastleCryptoTlsCertificateStatus *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, certificateRequest_, OrgSpongycastleCryptoTlsCertificateRequest *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, clientCredentials_, id<OrgSpongycastleCryptoTlsTlsCredentials>)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState_init(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *new_OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *create_OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSClientProtocol")
