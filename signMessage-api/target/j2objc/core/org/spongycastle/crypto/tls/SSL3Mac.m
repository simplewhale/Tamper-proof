//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/SSL3Mac.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/tls/SSL3Mac.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleCryptoTlsSSL3Mac () {
 @public
  id<OrgSpongycastleCryptoDigest> digest_;
  jint padLength_;
  IOSByteArray *secret_;
}

+ (IOSByteArray *)genPadWithByte:(jbyte)b
                         withInt:(jint)count;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsSSL3Mac, digest_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsSSL3Mac, secret_, IOSByteArray *)

inline jbyte OrgSpongycastleCryptoTlsSSL3Mac_get_IPAD_BYTE(void);
#define OrgSpongycastleCryptoTlsSSL3Mac_IPAD_BYTE 54
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsSSL3Mac, IPAD_BYTE, jbyte)

inline jbyte OrgSpongycastleCryptoTlsSSL3Mac_get_OPAD_BYTE(void);
#define OrgSpongycastleCryptoTlsSSL3Mac_OPAD_BYTE 92
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsSSL3Mac, OPAD_BYTE, jbyte)

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoTlsSSL3Mac_genPadWithByte_withInt_(jbyte b, jint count);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoTlsSSL3Mac)

IOSByteArray *OrgSpongycastleCryptoTlsSSL3Mac_IPAD;
IOSByteArray *OrgSpongycastleCryptoTlsSSL3Mac_OPAD;

@implementation OrgSpongycastleCryptoTlsSSL3Mac

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  OrgSpongycastleCryptoTlsSSL3Mac_initWithOrgSpongycastleCryptoDigest_(self, digest);
  return self;
}

- (NSString *)getAlgorithmName {
  return JreStrcat("$$", [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getAlgorithmName], @"/SSL3MAC");
}

- (id<OrgSpongycastleCryptoDigest>)getUnderlyingDigest {
  return digest_;
}

- (void)init__WithOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  secret_ = OrgSpongycastleUtilArrays_cloneWithByteArray_([((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(((OrgSpongycastleCryptoParamsKeyParameter *) cast_chk(params, [OrgSpongycastleCryptoParamsKeyParameter class])))) getKey]);
  [self reset];
}

- (jint)getMacSize {
  return [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize];
}

- (void)updateWithByte:(jbyte)inArg {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByte:inArg];
}

- (void)updateWithByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
                    withInt:(jint)len {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:inArg withInt:inOff withInt:len];
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) getDigestSize]];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:tmp withInt:0];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:secret_ withInt:0 withInt:((IOSByteArray *) nil_chk(secret_))->size_];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:OrgSpongycastleCryptoTlsSSL3Mac_OPAD withInt:0 withInt:padLength_];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:tmp withInt:0 withInt:tmp->size_];
  jint len = [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) doFinalWithByteArray:outArg withInt:outOff];
  [self reset];
  return len;
}

- (void)reset {
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) reset];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:secret_ withInt:0 withInt:((IOSByteArray *) nil_chk(secret_))->size_];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest_)) updateWithByteArray:OrgSpongycastleCryptoTlsSSL3Mac_IPAD withInt:0 withInt:padLength_];
}

+ (IOSByteArray *)genPadWithByte:(jbyte)b
                         withInt:(jint)count {
  return OrgSpongycastleCryptoTlsSSL3Mac_genPadWithByte_withInt_(b, count);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoDigest:);
  methods[1].selector = @selector(getAlgorithmName);
  methods[2].selector = @selector(getUnderlyingDigest);
  methods[3].selector = @selector(init__WithOrgSpongycastleCryptoCipherParameters:);
  methods[4].selector = @selector(getMacSize);
  methods[5].selector = @selector(updateWithByte:);
  methods[6].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(doFinalWithByteArray:withInt:);
  methods[8].selector = @selector(reset);
  methods[9].selector = @selector(genPadWithByte:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IPAD_BYTE", "B", .constantValue.asChar = OrgSpongycastleCryptoTlsSSL3Mac_IPAD_BYTE, 0x1a, -1, -1, -1, -1 },
    { "OPAD_BYTE", "B", .constantValue.asChar = OrgSpongycastleCryptoTlsSSL3Mac_OPAD_BYTE, 0x1a, -1, -1, -1, -1 },
    { "IPAD", "[B", .constantValue.asLong = 0, 0x18, -1, 10, -1, -1 },
    { "OPAD", "[B", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
    { "digest_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "padLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "secret_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDigest;", "init", "LOrgSpongycastleCryptoCipherParameters;", "update", "B", "[BII", "doFinal", "[BI", "genPad", "BI", &OrgSpongycastleCryptoTlsSSL3Mac_IPAD, &OrgSpongycastleCryptoTlsSSL3Mac_OPAD };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsSSL3Mac = { "SSL3Mac", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 10, 7, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsSSL3Mac;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoTlsSSL3Mac class]) {
    OrgSpongycastleCryptoTlsSSL3Mac_IPAD = OrgSpongycastleCryptoTlsSSL3Mac_genPadWithByte_withInt_(OrgSpongycastleCryptoTlsSSL3Mac_IPAD_BYTE, 48);
    OrgSpongycastleCryptoTlsSSL3Mac_OPAD = OrgSpongycastleCryptoTlsSSL3Mac_genPadWithByte_withInt_(OrgSpongycastleCryptoTlsSSL3Mac_OPAD_BYTE, 48);
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoTlsSSL3Mac)
  }
}

@end

void OrgSpongycastleCryptoTlsSSL3Mac_initWithOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoTlsSSL3Mac *self, id<OrgSpongycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->digest_ = digest;
  if ([((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) getDigestSize] == 20) {
    self->padLength_ = 40;
  }
  else {
    self->padLength_ = 48;
  }
}

OrgSpongycastleCryptoTlsSSL3Mac *new_OrgSpongycastleCryptoTlsSSL3Mac_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsSSL3Mac, initWithOrgSpongycastleCryptoDigest_, digest)
}

OrgSpongycastleCryptoTlsSSL3Mac *create_OrgSpongycastleCryptoTlsSSL3Mac_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsSSL3Mac, initWithOrgSpongycastleCryptoDigest_, digest)
}

IOSByteArray *OrgSpongycastleCryptoTlsSSL3Mac_genPadWithByte_withInt_(jbyte b, jint count) {
  OrgSpongycastleCryptoTlsSSL3Mac_initialize();
  IOSByteArray *padding = [IOSByteArray newArrayWithLength:count];
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(padding, b);
  return padding;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsSSL3Mac)
