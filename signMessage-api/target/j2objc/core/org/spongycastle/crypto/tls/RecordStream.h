//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/RecordStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsRecordStream")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsRecordStream
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsRecordStream 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsRecordStream 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsRecordStream

#if !defined (OrgSpongycastleCryptoTlsRecordStream_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsRecordStream || defined(INCLUDE_OrgSpongycastleCryptoTlsRecordStream))
#define OrgSpongycastleCryptoTlsRecordStream_

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class OrgSpongycastleCryptoTlsProtocolVersion;
@class OrgSpongycastleCryptoTlsTlsProtocol;
@protocol OrgSpongycastleCryptoTlsTlsCipher;
@protocol OrgSpongycastleCryptoTlsTlsCompression;
@protocol OrgSpongycastleCryptoTlsTlsContext;
@protocol OrgSpongycastleCryptoTlsTlsHandshakeHash;

@interface OrgSpongycastleCryptoTlsRecordStream : NSObject

#pragma mark Package-Private

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsProtocol:(OrgSpongycastleCryptoTlsTlsProtocol *)handler
                                      withJavaIoInputStream:(JavaIoInputStream *)input
                                     withJavaIoOutputStream:(JavaIoOutputStream *)output;

- (void)checkRecordHeaderWithByteArray:(IOSByteArray *)recordHeader;

- (IOSByteArray *)decodeAndVerifyWithShort:(jshort)type
                     withJavaIoInputStream:(JavaIoInputStream *)input
                                   withInt:(jint)len;

- (void)finaliseHandshake;

- (void)flush;

- (id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)getHandshakeHash;

- (JavaIoOutputStream *)getHandshakeHashUpdater;

- (jint)getPlaintextLimit;

- (OrgSpongycastleCryptoTlsProtocolVersion *)getReadVersion;

- (void)init__WithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context OBJC_METHOD_FAMILY_NONE;

- (void)notifyHelloComplete;

- (id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)prepareToFinish;

- (jboolean)readRecord;

- (void)receivedReadCipherSpec;

- (void)safeClose;

- (void)sentWriteCipherSpec;

- (void)setPendingConnectionStateWithOrgSpongycastleCryptoTlsTlsCompression:(id<OrgSpongycastleCryptoTlsTlsCompression>)tlsCompression
                                      withOrgSpongycastleCryptoTlsTlsCipher:(id<OrgSpongycastleCryptoTlsTlsCipher>)tlsCipher;

- (void)setPlaintextLimitWithInt:(jint)plaintextLimit;

- (void)setReadVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)readVersion;

- (void)setRestrictReadVersionWithBoolean:(jboolean)enabled;

- (void)setWriteVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)writeVersion;

- (void)writeRecordWithShort:(jshort)type
               withByteArray:(IOSByteArray *)plaintext
                     withInt:(jint)plaintextOffset
                     withInt:(jint)plaintextLength;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsRecordStream)

inline jint OrgSpongycastleCryptoTlsRecordStream_get_TLS_HEADER_SIZE(void);
#define OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_SIZE 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsRecordStream, TLS_HEADER_SIZE, jint)

inline jint OrgSpongycastleCryptoTlsRecordStream_get_TLS_HEADER_TYPE_OFFSET(void);
#define OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_TYPE_OFFSET 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsRecordStream, TLS_HEADER_TYPE_OFFSET, jint)

inline jint OrgSpongycastleCryptoTlsRecordStream_get_TLS_HEADER_VERSION_OFFSET(void);
#define OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_VERSION_OFFSET 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsRecordStream, TLS_HEADER_VERSION_OFFSET, jint)

inline jint OrgSpongycastleCryptoTlsRecordStream_get_TLS_HEADER_LENGTH_OFFSET(void);
#define OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_LENGTH_OFFSET 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsRecordStream, TLS_HEADER_LENGTH_OFFSET, jint)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsRecordStream_initWithOrgSpongycastleCryptoTlsTlsProtocol_withJavaIoInputStream_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsRecordStream *self, OrgSpongycastleCryptoTlsTlsProtocol *handler, JavaIoInputStream *input, JavaIoOutputStream *output);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsRecordStream *new_OrgSpongycastleCryptoTlsRecordStream_initWithOrgSpongycastleCryptoTlsTlsProtocol_withJavaIoInputStream_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsTlsProtocol *handler, JavaIoInputStream *input, JavaIoOutputStream *output) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsRecordStream *create_OrgSpongycastleCryptoTlsRecordStream_initWithOrgSpongycastleCryptoTlsTlsProtocol_withJavaIoInputStream_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsTlsProtocol *handler, JavaIoInputStream *input, JavaIoOutputStream *output);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsRecordStream)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsRecordStream")
