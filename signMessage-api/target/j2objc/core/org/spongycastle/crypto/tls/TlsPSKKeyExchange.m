//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsPSKKeyExchange.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "java/util/Vector.h"
#include "org/spongycastle/asn1/x509/Certificate.h"
#include "org/spongycastle/asn1/x509/KeyUsage.h"
#include "org/spongycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/DHParameters.h"
#include "org/spongycastle/crypto/params/DHPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/DHPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/RSAKeyParameters.h"
#include "org/spongycastle/crypto/tls/AbstractTlsKeyExchange.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/Certificate.h"
#include "org/spongycastle/crypto/tls/CertificateRequest.h"
#include "org/spongycastle/crypto/tls/KeyExchangeAlgorithm.h"
#include "org/spongycastle/crypto/tls/SecurityParameters.h"
#include "org/spongycastle/crypto/tls/ServerDHParams.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsCredentials.h"
#include "org/spongycastle/crypto/tls/TlsDHUtils.h"
#include "org/spongycastle/crypto/tls/TlsECCUtils.h"
#include "org/spongycastle/crypto/tls/TlsEncryptionCredentials.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsPSKIdentity.h"
#include "org/spongycastle/crypto/tls/TlsPSKIdentityManager.h"
#include "org/spongycastle/crypto/tls/TlsPSKKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsRSAUtils.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/crypto/util/PublicKeyFactory.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/io/Streams.h"

@implementation OrgSpongycastleCryptoTlsTlsPSKKeyExchange

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
withOrgSpongycastleCryptoTlsTlsPSKIdentity:(id<OrgSpongycastleCryptoTlsTlsPSKIdentity>)pskIdentity
withOrgSpongycastleCryptoTlsTlsPSKIdentityManager:(id<OrgSpongycastleCryptoTlsTlsPSKIdentityManager>)pskIdentityManager
withOrgSpongycastleCryptoParamsDHParameters:(OrgSpongycastleCryptoParamsDHParameters *)dhParameters
               withIntArray:(IOSIntArray *)namedCurves
             withShortArray:(IOSShortArray *)clientECPointFormats
             withShortArray:(IOSShortArray *)serverECPointFormats {
  OrgSpongycastleCryptoTlsTlsPSKKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsPSKIdentity_withOrgSpongycastleCryptoTlsTlsPSKIdentityManager_withOrgSpongycastleCryptoParamsDHParameters_withIntArray_withShortArray_withShortArray_(self, keyExchange, supportedSignatureAlgorithms, pskIdentity, pskIdentityManager, dhParameters, namedCurves, clientECPointFormats, serverECPointFormats);
  return self;
}

- (void)skipServerCredentials {
  if (keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_RSA_PSK) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
}

- (void)processServerCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:(id<OrgSpongycastleCryptoTlsTlsCredentials>)serverCredentials {
  if (!([OrgSpongycastleCryptoTlsTlsEncryptionCredentials_class_() isInstance:serverCredentials])) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  [self processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:[((id<OrgSpongycastleCryptoTlsTlsCredentials>) nil_chk(serverCredentials)) getCertificate]];
  self->serverCredentials_ = (id<OrgSpongycastleCryptoTlsTlsEncryptionCredentials>) cast_check(serverCredentials, OrgSpongycastleCryptoTlsTlsEncryptionCredentials_class_());
}

- (IOSByteArray *)generateServerKeyExchange {
  self->psk_identity_hint_ = [((id<OrgSpongycastleCryptoTlsTlsPSKIdentityManager>) nil_chk(pskIdentityManager_)) getHint];
  if (self->psk_identity_hint_ == nil && ![self requiresServerKeyExchange]) {
    return nil;
  }
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  if (self->psk_identity_hint_ == nil) {
    OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES), buf);
  }
  else {
    OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(self->psk_identity_hint_, buf);
  }
  if (self->keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_PSK) {
    if (self->dhParameters_ == nil) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
    }
    self->dhAgreePrivateKey_ = OrgSpongycastleCryptoTlsTlsDHUtils_generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoParamsDHParameters_withJavaIoOutputStream_([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecureRandom], self->dhParameters_, buf);
  }
  else if (self->keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_PSK) {
    self->ecAgreePrivateKey_ = OrgSpongycastleCryptoTlsTlsECCUtils_generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom_withIntArray_withShortArray_withJavaIoOutputStream_([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecureRandom], namedCurves_, clientECPointFormats_, buf);
  }
  return [buf toByteArray];
}

- (void)processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)serverCertificate {
  if (keyExchange_ != OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_RSA_PSK) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
  if ([((OrgSpongycastleCryptoTlsCertificate *) nil_chk(serverCertificate)) isEmpty]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_bad_certificate);
  }
  OrgSpongycastleAsn1X509Certificate *x509Cert = [serverCertificate getCertificateAtWithInt:0];
  OrgSpongycastleAsn1X509SubjectPublicKeyInfo *keyInfo = [((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Cert)) getSubjectPublicKeyInfo];
  @try {
    self->serverPublicKey_ = OrgSpongycastleCryptoUtilPublicKeyFactory_createKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(keyInfo);
  }
  @catch (JavaLangRuntimeException *e) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_unsupported_certificate, e);
  }
  if ([((OrgSpongycastleCryptoParamsAsymmetricKeyParameter *) nil_chk(self->serverPublicKey_)) isPrivate]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  self->rsaServerPublicKey_ = [self validateRSAPublicKeyWithOrgSpongycastleCryptoParamsRSAKeyParameters:(OrgSpongycastleCryptoParamsRSAKeyParameters *) cast_chk(self->serverPublicKey_, [OrgSpongycastleCryptoParamsRSAKeyParameters class])];
  OrgSpongycastleCryptoTlsTlsUtils_validateKeyUsageWithOrgSpongycastleAsn1X509Certificate_withInt_(x509Cert, OrgSpongycastleAsn1X509KeyUsage_keyEncipherment);
  [super processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:serverCertificate];
}

- (jboolean)requiresServerKeyExchange {
  switch (keyExchange_) {
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_PSK:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_PSK:
    return true;
    default:
    return false;
  }
}

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input {
  self->psk_identity_hint_ = OrgSpongycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(input);
  if (self->keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_PSK) {
    OrgSpongycastleCryptoTlsServerDHParams *serverDHParams = OrgSpongycastleCryptoTlsServerDHParams_parseWithJavaIoInputStream_(input);
    self->dhAgreePublicKey_ = OrgSpongycastleCryptoTlsTlsDHUtils_validateDHPublicKeyWithOrgSpongycastleCryptoParamsDHPublicKeyParameters_([((OrgSpongycastleCryptoTlsServerDHParams *) nil_chk(serverDHParams)) getPublicKey]);
    self->dhParameters_ = [((OrgSpongycastleCryptoParamsDHPublicKeyParameters *) nil_chk(dhAgreePublicKey_)) getParameters];
  }
  else if (self->keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_PSK) {
    OrgSpongycastleCryptoParamsECDomainParameters *ecParams = OrgSpongycastleCryptoTlsTlsECCUtils_readECParametersWithIntArray_withShortArray_withJavaIoInputStream_(namedCurves_, clientECPointFormats_, input);
    IOSByteArray *point = OrgSpongycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(input);
    self->ecAgreePublicKey_ = OrgSpongycastleCryptoTlsTlsECCUtils_validateECPublicKeyWithOrgSpongycastleCryptoParamsECPublicKeyParameters_(OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECPublicKeyWithShortArray_withOrgSpongycastleCryptoParamsECDomainParameters_withByteArray_(clientECPointFormats_, ecParams, point));
  }
}

- (void)validateCertificateRequestWithOrgSpongycastleCryptoTlsCertificateRequest:(OrgSpongycastleCryptoTlsCertificateRequest *)certificateRequest {
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
}

- (void)processClientCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:(id<OrgSpongycastleCryptoTlsTlsCredentials>)clientCredentials {
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
}

- (void)generateClientKeyExchangeWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  if (psk_identity_hint_ == nil) {
    [((id<OrgSpongycastleCryptoTlsTlsPSKIdentity>) nil_chk(pskIdentity_)) skipIdentityHint];
  }
  else {
    [((id<OrgSpongycastleCryptoTlsTlsPSKIdentity>) nil_chk(pskIdentity_)) notifyIdentityHintWithByteArray:psk_identity_hint_];
  }
  IOSByteArray *psk_identity = [((id<OrgSpongycastleCryptoTlsTlsPSKIdentity>) nil_chk(pskIdentity_)) getPSKIdentity];
  if (psk_identity == nil) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  self->psk_ = [((id<OrgSpongycastleCryptoTlsTlsPSKIdentity>) nil_chk(pskIdentity_)) getPSK];
  if (psk_ == nil) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(psk_identity, output);
  ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecurityParameters]))->pskIdentity_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(psk_identity);
  if (self->keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_PSK) {
    self->dhAgreePrivateKey_ = OrgSpongycastleCryptoTlsTlsDHUtils_generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoParamsDHParameters_withJavaIoOutputStream_([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecureRandom], dhParameters_, output);
  }
  else if (self->keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_PSK) {
    self->ecAgreePrivateKey_ = OrgSpongycastleCryptoTlsTlsECCUtils_generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom_withShortArray_withOrgSpongycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecureRandom], serverECPointFormats_, [((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(ecAgreePublicKey_)) getParameters], output);
  }
  else if (self->keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_RSA_PSK) {
    self->premasterSecret_ = OrgSpongycastleCryptoTlsTlsRSAUtils_generateEncryptedPreMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoParamsRSAKeyParameters_withJavaIoOutputStream_(context_, self->rsaServerPublicKey_, output);
  }
}

- (void)processClientKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input {
  IOSByteArray *psk_identity = OrgSpongycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(input);
  self->psk_ = [((id<OrgSpongycastleCryptoTlsTlsPSKIdentityManager>) nil_chk(pskIdentityManager_)) getPSKWithByteArray:psk_identity];
  if (psk_ == nil) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unknown_psk_identity);
  }
  ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecurityParameters]))->pskIdentity_ = psk_identity;
  if (self->keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_PSK) {
    JavaMathBigInteger *Yc = OrgSpongycastleCryptoTlsTlsDHUtils_readDHParameterWithJavaIoInputStream_(input);
    self->dhAgreePublicKey_ = OrgSpongycastleCryptoTlsTlsDHUtils_validateDHPublicKeyWithOrgSpongycastleCryptoParamsDHPublicKeyParameters_(new_OrgSpongycastleCryptoParamsDHPublicKeyParameters_initWithJavaMathBigInteger_withOrgSpongycastleCryptoParamsDHParameters_(Yc, dhParameters_));
  }
  else if (self->keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_PSK) {
    IOSByteArray *point = OrgSpongycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(input);
    OrgSpongycastleCryptoParamsECDomainParameters *curve_params = [((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(self->ecAgreePrivateKey_)) getParameters];
    self->ecAgreePublicKey_ = OrgSpongycastleCryptoTlsTlsECCUtils_validateECPublicKeyWithOrgSpongycastleCryptoParamsECPublicKeyParameters_(OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECPublicKeyWithShortArray_withOrgSpongycastleCryptoParamsECDomainParameters_withByteArray_(serverECPointFormats_, curve_params, point));
  }
  else if (self->keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_RSA_PSK) {
    IOSByteArray *encryptedPreMasterSecret;
    if (OrgSpongycastleCryptoTlsTlsUtils_isSSLWithOrgSpongycastleCryptoTlsTlsContext_(context_)) {
      encryptedPreMasterSecret = OrgSpongycastleUtilIoStreams_readAllWithJavaIoInputStream_(input);
    }
    else {
      encryptedPreMasterSecret = OrgSpongycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(input);
    }
    self->premasterSecret_ = [((id<OrgSpongycastleCryptoTlsTlsEncryptionCredentials>) nil_chk(serverCredentials_)) decryptPreMasterSecretWithByteArray:encryptedPreMasterSecret];
  }
}

- (IOSByteArray *)generatePremasterSecret {
  IOSByteArray *other_secret = [self generateOtherSecretWithInt:((IOSByteArray *) nil_chk(psk_))->size_];
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_initWithInt_(4 + ((IOSByteArray *) nil_chk(other_secret))->size_ + ((IOSByteArray *) nil_chk(psk_))->size_);
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(other_secret, buf);
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(psk_, buf);
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(psk_, (jbyte) 0);
  self->psk_ = nil;
  return [buf toByteArray];
}

- (IOSByteArray *)generateOtherSecretWithInt:(jint)pskLength {
  if (self->keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_PSK) {
    if (dhAgreePrivateKey_ != nil) {
      return OrgSpongycastleCryptoTlsTlsDHUtils_calculateDHBasicAgreementWithOrgSpongycastleCryptoParamsDHPublicKeyParameters_withOrgSpongycastleCryptoParamsDHPrivateKeyParameters_(dhAgreePublicKey_, dhAgreePrivateKey_);
    }
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  if (self->keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_PSK) {
    if (ecAgreePrivateKey_ != nil) {
      return OrgSpongycastleCryptoTlsTlsECCUtils_calculateECDHBasicAgreementWithOrgSpongycastleCryptoParamsECPublicKeyParameters_withOrgSpongycastleCryptoParamsECPrivateKeyParameters_(ecAgreePublicKey_, ecAgreePrivateKey_);
    }
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  if (self->keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_RSA_PSK) {
    return self->premasterSecret_;
  }
  return [IOSByteArray newArrayWithLength:pskLength];
}

- (OrgSpongycastleCryptoParamsRSAKeyParameters *)validateRSAPublicKeyWithOrgSpongycastleCryptoParamsRSAKeyParameters:(OrgSpongycastleCryptoParamsRSAKeyParameters *)key {
  if (![((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsRSAKeyParameters *) nil_chk(key)) getExponent])) isProbablePrimeWithInt:2]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  return key;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 7, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x4, 14, 15, 1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsRSAKeyParameters;", 0x4, 16, 17, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withJavaUtilVector:withOrgSpongycastleCryptoTlsTlsPSKIdentity:withOrgSpongycastleCryptoTlsTlsPSKIdentityManager:withOrgSpongycastleCryptoParamsDHParameters:withIntArray:withShortArray:withShortArray:);
  methods[1].selector = @selector(skipServerCredentials);
  methods[2].selector = @selector(processServerCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:);
  methods[3].selector = @selector(generateServerKeyExchange);
  methods[4].selector = @selector(processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:);
  methods[5].selector = @selector(requiresServerKeyExchange);
  methods[6].selector = @selector(processServerKeyExchangeWithJavaIoInputStream:);
  methods[7].selector = @selector(validateCertificateRequestWithOrgSpongycastleCryptoTlsCertificateRequest:);
  methods[8].selector = @selector(processClientCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:);
  methods[9].selector = @selector(generateClientKeyExchangeWithJavaIoOutputStream:);
  methods[10].selector = @selector(processClientKeyExchangeWithJavaIoInputStream:);
  methods[11].selector = @selector(generatePremasterSecret);
  methods[12].selector = @selector(generateOtherSecretWithInt:);
  methods[13].selector = @selector(validateRSAPublicKeyWithOrgSpongycastleCryptoParamsRSAKeyParameters:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pskIdentity_", "LOrgSpongycastleCryptoTlsTlsPSKIdentity;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pskIdentityManager_", "LOrgSpongycastleCryptoTlsTlsPSKIdentityManager;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "dhParameters_", "LOrgSpongycastleCryptoParamsDHParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "namedCurves_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "clientECPointFormats_", "[S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverECPointFormats_", "[S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "psk_identity_hint_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "psk_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "dhAgreePrivateKey_", "LOrgSpongycastleCryptoParamsDHPrivateKeyParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "dhAgreePublicKey_", "LOrgSpongycastleCryptoParamsDHPublicKeyParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ecAgreePrivateKey_", "LOrgSpongycastleCryptoParamsECPrivateKeyParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ecAgreePublicKey_", "LOrgSpongycastleCryptoParamsECPublicKeyParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverPublicKey_", "LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "rsaServerPublicKey_", "LOrgSpongycastleCryptoParamsRSAKeyParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverCredentials_", "LOrgSpongycastleCryptoTlsTlsEncryptionCredentials;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "premasterSecret_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILJavaUtilVector;LOrgSpongycastleCryptoTlsTlsPSKIdentity;LOrgSpongycastleCryptoTlsTlsPSKIdentityManager;LOrgSpongycastleCryptoParamsDHParameters;[I[S[S", "LJavaIoIOException;", "processServerCredentials", "LOrgSpongycastleCryptoTlsTlsCredentials;", "processServerCertificate", "LOrgSpongycastleCryptoTlsCertificate;", "processServerKeyExchange", "LJavaIoInputStream;", "validateCertificateRequest", "LOrgSpongycastleCryptoTlsCertificateRequest;", "processClientCredentials", "generateClientKeyExchange", "LJavaIoOutputStream;", "processClientKeyExchange", "generateOtherSecret", "I", "validateRSAPublicKey", "LOrgSpongycastleCryptoParamsRSAKeyParameters;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsTlsPSKKeyExchange = { "TlsPSKKeyExchange", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 14, 16, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsTlsPSKKeyExchange;
}

@end

void OrgSpongycastleCryptoTlsTlsPSKKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsPSKIdentity_withOrgSpongycastleCryptoTlsTlsPSKIdentityManager_withOrgSpongycastleCryptoParamsDHParameters_withIntArray_withShortArray_withShortArray_(OrgSpongycastleCryptoTlsTlsPSKKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<OrgSpongycastleCryptoTlsTlsPSKIdentity> pskIdentity, id<OrgSpongycastleCryptoTlsTlsPSKIdentityManager> pskIdentityManager, OrgSpongycastleCryptoParamsDHParameters *dhParameters, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats) {
  OrgSpongycastleCryptoTlsAbstractTlsKeyExchange_initWithInt_withJavaUtilVector_(self, keyExchange, supportedSignatureAlgorithms);
  self->psk_identity_hint_ = nil;
  self->psk_ = nil;
  self->dhAgreePrivateKey_ = nil;
  self->dhAgreePublicKey_ = nil;
  self->ecAgreePrivateKey_ = nil;
  self->ecAgreePublicKey_ = nil;
  self->serverPublicKey_ = nil;
  self->rsaServerPublicKey_ = nil;
  self->serverCredentials_ = nil;
  switch (keyExchange) {
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_PSK:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_PSK:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_PSK:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_RSA_PSK:
    break;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported key exchange algorithm");
  }
  self->pskIdentity_ = pskIdentity;
  self->pskIdentityManager_ = pskIdentityManager;
  self->dhParameters_ = dhParameters;
  self->namedCurves_ = namedCurves;
  self->clientECPointFormats_ = clientECPointFormats;
  self->serverECPointFormats_ = serverECPointFormats;
}

OrgSpongycastleCryptoTlsTlsPSKKeyExchange *new_OrgSpongycastleCryptoTlsTlsPSKKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsPSKIdentity_withOrgSpongycastleCryptoTlsTlsPSKIdentityManager_withOrgSpongycastleCryptoParamsDHParameters_withIntArray_withShortArray_withShortArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<OrgSpongycastleCryptoTlsTlsPSKIdentity> pskIdentity, id<OrgSpongycastleCryptoTlsTlsPSKIdentityManager> pskIdentityManager, OrgSpongycastleCryptoParamsDHParameters *dhParameters, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsTlsPSKKeyExchange, initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsPSKIdentity_withOrgSpongycastleCryptoTlsTlsPSKIdentityManager_withOrgSpongycastleCryptoParamsDHParameters_withIntArray_withShortArray_withShortArray_, keyExchange, supportedSignatureAlgorithms, pskIdentity, pskIdentityManager, dhParameters, namedCurves, clientECPointFormats, serverECPointFormats)
}

OrgSpongycastleCryptoTlsTlsPSKKeyExchange *create_OrgSpongycastleCryptoTlsTlsPSKKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsPSKIdentity_withOrgSpongycastleCryptoTlsTlsPSKIdentityManager_withOrgSpongycastleCryptoParamsDHParameters_withIntArray_withShortArray_withShortArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<OrgSpongycastleCryptoTlsTlsPSKIdentity> pskIdentity, id<OrgSpongycastleCryptoTlsTlsPSKIdentityManager> pskIdentityManager, OrgSpongycastleCryptoParamsDHParameters *dhParameters, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsTlsPSKKeyExchange, initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsPSKIdentity_withOrgSpongycastleCryptoTlsTlsPSKIdentityManager_withOrgSpongycastleCryptoParamsDHParameters_withIntArray_withShortArray_withShortArray_, keyExchange, supportedSignatureAlgorithms, pskIdentity, pskIdentityManager, dhParameters, namedCurves, clientECPointFormats, serverECPointFormats)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsTlsPSKKeyExchange)
