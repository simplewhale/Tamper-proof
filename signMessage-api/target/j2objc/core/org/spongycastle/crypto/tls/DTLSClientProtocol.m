//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DTLSClientProtocol.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"
#include "org/spongycastle/crypto/prng/RandomGenerator.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/Certificate.h"
#include "org/spongycastle/crypto/tls/CertificateRequest.h"
#include "org/spongycastle/crypto/tls/CertificateStatus.h"
#include "org/spongycastle/crypto/tls/CipherSuite.h"
#include "org/spongycastle/crypto/tls/CompressionMethod.h"
#include "org/spongycastle/crypto/tls/ConnectionEnd.h"
#include "org/spongycastle/crypto/tls/ContentType.h"
#include "org/spongycastle/crypto/tls/DTLSClientProtocol.h"
#include "org/spongycastle/crypto/tls/DTLSProtocol.h"
#include "org/spongycastle/crypto/tls/DTLSRecordLayer.h"
#include "org/spongycastle/crypto/tls/DTLSReliableHandshake.h"
#include "org/spongycastle/crypto/tls/DTLSTransport.h"
#include "org/spongycastle/crypto/tls/DatagramTransport.h"
#include "org/spongycastle/crypto/tls/DigitallySigned.h"
#include "org/spongycastle/crypto/tls/ExporterLabel.h"
#include "org/spongycastle/crypto/tls/HandshakeType.h"
#include "org/spongycastle/crypto/tls/NewSessionTicket.h"
#include "org/spongycastle/crypto/tls/ProtocolVersion.h"
#include "org/spongycastle/crypto/tls/SecurityParameters.h"
#include "org/spongycastle/crypto/tls/SessionParameters.h"
#include "org/spongycastle/crypto/tls/SignatureAndHashAlgorithm.h"
#include "org/spongycastle/crypto/tls/TlsAuthentication.h"
#include "org/spongycastle/crypto/tls/TlsCipher.h"
#include "org/spongycastle/crypto/tls/TlsClient.h"
#include "org/spongycastle/crypto/tls/TlsClientContextImpl.h"
#include "org/spongycastle/crypto/tls/TlsCredentials.h"
#include "org/spongycastle/crypto/tls/TlsExtensionsUtils.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsHandshakeHash.h"
#include "org/spongycastle/crypto/tls/TlsKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsProtocol.h"
#include "org/spongycastle/crypto/tls/TlsSession.h"
#include "org/spongycastle/crypto/tls/TlsSessionImpl.h"
#include "org/spongycastle/crypto/tls/TlsSignerCredentials.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/util/Arrays.h"

@implementation OrgSpongycastleCryptoTlsDTLSClientProtocol

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  OrgSpongycastleCryptoTlsDTLSClientProtocol_initWithJavaSecuritySecureRandom_(self, secureRandom);
  return self;
}

- (OrgSpongycastleCryptoTlsDTLSTransport *)connectWithOrgSpongycastleCryptoTlsTlsClient:(id<OrgSpongycastleCryptoTlsTlsClient>)client
                                          withOrgSpongycastleCryptoTlsDatagramTransport:(id<OrgSpongycastleCryptoTlsDatagramTransport>)transport {
  if (client == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'client' cannot be null");
  }
  if (transport == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'transport' cannot be null");
  }
  OrgSpongycastleCryptoTlsSecurityParameters *securityParameters = new_OrgSpongycastleCryptoTlsSecurityParameters_init();
  securityParameters->entity_ = OrgSpongycastleCryptoTlsConnectionEnd_client;
  OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *state = new_OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState_init();
  state->client_ = client;
  state->clientContext_ = new_OrgSpongycastleCryptoTlsTlsClientContextImpl_initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoTlsSecurityParameters_(secureRandom_, securityParameters);
  securityParameters->clientRandom_ = OrgSpongycastleCryptoTlsTlsProtocol_createRandomBlockWithBoolean_withOrgSpongycastleCryptoPrngRandomGenerator_([client shouldUseGMTUnixTime], [((OrgSpongycastleCryptoTlsTlsClientContextImpl *) nil_chk(state->clientContext_)) getNonceRandomGenerator]);
  [client init__WithOrgSpongycastleCryptoTlsTlsClientContext:state->clientContext_];
  OrgSpongycastleCryptoTlsDTLSRecordLayer *recordLayer = new_OrgSpongycastleCryptoTlsDTLSRecordLayer_initWithOrgSpongycastleCryptoTlsDatagramTransport_withOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsPeer_withShort_(transport, state->clientContext_, client, OrgSpongycastleCryptoTlsContentType_handshake);
  id<OrgSpongycastleCryptoTlsTlsSession> sessionToResume = [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(state->client_)) getSessionToResume];
  if (sessionToResume != nil && [sessionToResume isResumable]) {
    OrgSpongycastleCryptoTlsSessionParameters *sessionParameters = [sessionToResume exportSessionParameters];
    if (sessionParameters != nil) {
      state->tlsSession_ = sessionToResume;
      state->sessionParameters_ = sessionParameters;
    }
  }
  @try {
    return [self clientHandshakeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withOrgSpongycastleCryptoTlsDTLSRecordLayer:recordLayer];
  }
  @catch (OrgSpongycastleCryptoTlsTlsFatalAlert *fatalAlert) {
    [self abortClientHandshakeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withOrgSpongycastleCryptoTlsDTLSRecordLayer:recordLayer withShort:[fatalAlert getAlertDescription]];
    @throw fatalAlert;
  }
  @catch (JavaIoIOException *e) {
    [self abortClientHandshakeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withOrgSpongycastleCryptoTlsDTLSRecordLayer:recordLayer withShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error];
    @throw e;
  }
  @catch (JavaLangRuntimeException *e) {
    [self abortClientHandshakeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withOrgSpongycastleCryptoTlsDTLSRecordLayer:recordLayer withShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error];
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_internal_error, e);
  }
  @finally {
    [securityParameters clear];
  }
}

- (void)abortClientHandshakeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                    withOrgSpongycastleCryptoTlsDTLSRecordLayer:(OrgSpongycastleCryptoTlsDTLSRecordLayer *)recordLayer
                                                                                      withShort:(jshort)alertDescription {
  [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(recordLayer)) failWithShort:alertDescription];
  [self invalidateSessionWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state];
}

- (OrgSpongycastleCryptoTlsDTLSTransport *)clientHandshakeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                  withOrgSpongycastleCryptoTlsDTLSRecordLayer:(OrgSpongycastleCryptoTlsDTLSRecordLayer *)recordLayer {
  OrgSpongycastleCryptoTlsSecurityParameters *securityParameters = [((OrgSpongycastleCryptoTlsTlsClientContextImpl *) nil_chk(((OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *) nil_chk(state))->clientContext_)) getSecurityParameters];
  OrgSpongycastleCryptoTlsDTLSReliableHandshake *handshake = new_OrgSpongycastleCryptoTlsDTLSReliableHandshake_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsDTLSRecordLayer_(state->clientContext_, recordLayer);
  IOSByteArray *clientHelloBody = [self generateClientHelloWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withOrgSpongycastleCryptoTlsTlsClient:state->client_];
  [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(recordLayer)) setWriteVersionWithOrgSpongycastleCryptoTlsProtocolVersion:JreLoadStatic(OrgSpongycastleCryptoTlsProtocolVersion, DTLSv10)];
  [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_client_hello withByteArray:clientHelloBody];
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *serverMessage = [handshake receiveMessage];
  while ([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(serverMessage)) getType] == OrgSpongycastleCryptoTlsHandshakeType_hello_verify_request) {
    OrgSpongycastleCryptoTlsProtocolVersion *recordLayerVersion = [recordLayer getReadVersion];
    OrgSpongycastleCryptoTlsProtocolVersion *client_version = [((OrgSpongycastleCryptoTlsTlsClientContextImpl *) nil_chk(state->clientContext_)) getClientVersion];
    if (![((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(recordLayerVersion)) isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:client_version]) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
    [recordLayer setReadVersionWithOrgSpongycastleCryptoTlsProtocolVersion:nil];
    IOSByteArray *cookie = [self processHelloVerifyRequestWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withByteArray:[serverMessage getBody]];
    IOSByteArray *patched = OrgSpongycastleCryptoTlsDTLSClientProtocol_patchClientHelloWithCookieWithByteArray_withByteArray_(clientHelloBody, cookie);
    [handshake resetHandshakeMessagesDigest];
    [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_client_hello withByteArray:patched];
    serverMessage = [handshake receiveMessage];
  }
  if ([serverMessage getType] == OrgSpongycastleCryptoTlsHandshakeType_server_hello) {
    OrgSpongycastleCryptoTlsProtocolVersion *recordLayerVersion = [recordLayer getReadVersion];
    [self reportServerVersionWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withOrgSpongycastleCryptoTlsProtocolVersion:recordLayerVersion];
    [recordLayer setWriteVersionWithOrgSpongycastleCryptoTlsProtocolVersion:recordLayerVersion];
    [self processServerHelloWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withByteArray:[serverMessage getBody]];
  }
  else {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
  [handshake notifyHelloComplete];
  OrgSpongycastleCryptoTlsDTLSProtocol_applyMaxFragmentLengthExtensionWithOrgSpongycastleCryptoTlsDTLSRecordLayer_withShort_(recordLayer, ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters))->maxFragmentLength_);
  if (state->resumedSession_) {
    securityParameters->masterSecret_ = OrgSpongycastleUtilArrays_cloneWithByteArray_([((OrgSpongycastleCryptoTlsSessionParameters *) nil_chk(state->sessionParameters_)) getMasterSecret]);
    [recordLayer initPendingEpochWithOrgSpongycastleCryptoTlsTlsCipher:[((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(state->client_)) getCipher]];
    IOSByteArray *expectedServerVerifyData = OrgSpongycastleCryptoTlsTlsUtils_calculateVerifyDataWithOrgSpongycastleCryptoTlsTlsContext_withNSString_withByteArray_(state->clientContext_, OrgSpongycastleCryptoTlsExporterLabel_server_finished, OrgSpongycastleCryptoTlsTlsProtocol_getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsHandshakeHash_withByteArray_(state->clientContext_, [handshake getHandshakeHash], nil));
    [self processFinishedWithByteArray:[handshake receiveMessageBodyWithShort:OrgSpongycastleCryptoTlsHandshakeType_finished] withByteArray:expectedServerVerifyData];
    IOSByteArray *clientVerifyData = OrgSpongycastleCryptoTlsTlsUtils_calculateVerifyDataWithOrgSpongycastleCryptoTlsTlsContext_withNSString_withByteArray_(state->clientContext_, OrgSpongycastleCryptoTlsExporterLabel_client_finished, OrgSpongycastleCryptoTlsTlsProtocol_getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsHandshakeHash_withByteArray_(state->clientContext_, [handshake getHandshakeHash], nil));
    [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_finished withByteArray:clientVerifyData];
    [handshake finish];
    [((OrgSpongycastleCryptoTlsTlsClientContextImpl *) nil_chk(state->clientContext_)) setResumableSessionWithOrgSpongycastleCryptoTlsTlsSession:state->tlsSession_];
    [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(state->client_)) notifyHandshakeComplete];
    return new_OrgSpongycastleCryptoTlsDTLSTransport_initWithOrgSpongycastleCryptoTlsDTLSRecordLayer_(recordLayer);
  }
  [self invalidateSessionWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state];
  if (((IOSByteArray *) nil_chk(state->selectedSessionID_))->size_ > 0) {
    state->tlsSession_ = new_OrgSpongycastleCryptoTlsTlsSessionImpl_initWithByteArray_withOrgSpongycastleCryptoTlsSessionParameters_(state->selectedSessionID_, nil);
  }
  serverMessage = [handshake receiveMessage];
  if ([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(serverMessage)) getType] == OrgSpongycastleCryptoTlsHandshakeType_supplemental_data) {
    [self processServerSupplementalDataWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withByteArray:[serverMessage getBody]];
    serverMessage = [handshake receiveMessage];
  }
  else {
    [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(state->client_)) processServerSupplementalDataWithJavaUtilVector:nil];
  }
  state->keyExchange_ = [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(state->client_)) getKeyExchange];
  [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(state->keyExchange_)) init__WithOrgSpongycastleCryptoTlsTlsContext:state->clientContext_];
  OrgSpongycastleCryptoTlsCertificate *serverCertificate = nil;
  if ([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(serverMessage)) getType] == OrgSpongycastleCryptoTlsHandshakeType_certificate) {
    serverCertificate = [self processServerCertificateWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withByteArray:[serverMessage getBody]];
    serverMessage = [handshake receiveMessage];
  }
  else {
    [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(state->keyExchange_)) skipServerCredentials];
  }
  if (serverCertificate == nil || [serverCertificate isEmpty]) {
    state->allowCertificateStatus_ = false;
  }
  if ([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(serverMessage)) getType] == OrgSpongycastleCryptoTlsHandshakeType_certificate_status) {
    [self processCertificateStatusWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withByteArray:[serverMessage getBody]];
    serverMessage = [handshake receiveMessage];
  }
  else {
  }
  if ([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(serverMessage)) getType] == OrgSpongycastleCryptoTlsHandshakeType_server_key_exchange) {
    [self processServerKeyExchangeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withByteArray:[serverMessage getBody]];
    serverMessage = [handshake receiveMessage];
  }
  else {
    [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(state->keyExchange_)) skipServerKeyExchange];
  }
  if ([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(serverMessage)) getType] == OrgSpongycastleCryptoTlsHandshakeType_certificate_request) {
    [self processCertificateRequestWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withByteArray:[serverMessage getBody]];
    OrgSpongycastleCryptoTlsTlsUtils_trackHashAlgorithmsWithOrgSpongycastleCryptoTlsTlsHandshakeHash_withJavaUtilVector_([handshake getHandshakeHash], [((OrgSpongycastleCryptoTlsCertificateRequest *) nil_chk(state->certificateRequest_)) getSupportedSignatureAlgorithms]);
    serverMessage = [handshake receiveMessage];
  }
  else {
  }
  if ([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(serverMessage)) getType] == OrgSpongycastleCryptoTlsHandshakeType_server_hello_done) {
    if (((IOSByteArray *) nil_chk([serverMessage getBody]))->size_ != 0) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
    }
  }
  else {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
  [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk([handshake getHandshakeHash])) sealHashAlgorithms];
  JavaUtilVector *clientSupplementalData = [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(state->client_)) getClientSupplementalData];
  if (clientSupplementalData != nil) {
    IOSByteArray *supplementalDataBody = OrgSpongycastleCryptoTlsDTLSProtocol_generateSupplementalDataWithJavaUtilVector_(clientSupplementalData);
    [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_supplemental_data withByteArray:supplementalDataBody];
  }
  if (state->certificateRequest_ != nil) {
    state->clientCredentials_ = [((id<OrgSpongycastleCryptoTlsTlsAuthentication>) nil_chk(state->authentication_)) getClientCredentialsWithOrgSpongycastleCryptoTlsCertificateRequest:state->certificateRequest_];
    OrgSpongycastleCryptoTlsCertificate *clientCertificate = nil;
    if (state->clientCredentials_ != nil) {
      clientCertificate = [state->clientCredentials_ getCertificate];
    }
    if (clientCertificate == nil) {
      clientCertificate = JreLoadStatic(OrgSpongycastleCryptoTlsCertificate, EMPTY_CHAIN);
    }
    IOSByteArray *certificateBody = OrgSpongycastleCryptoTlsDTLSProtocol_generateCertificateWithOrgSpongycastleCryptoTlsCertificate_(clientCertificate);
    [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_certificate withByteArray:certificateBody];
  }
  if (state->clientCredentials_ != nil) {
    [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(state->keyExchange_)) processClientCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:state->clientCredentials_];
  }
  else {
    [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(state->keyExchange_)) skipClientCredentials];
  }
  IOSByteArray *clientKeyExchangeBody = [self generateClientKeyExchangeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state];
  [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_client_key_exchange withByteArray:clientKeyExchangeBody];
  id<OrgSpongycastleCryptoTlsTlsHandshakeHash> prepareFinishHash = [handshake prepareToFinish];
  securityParameters->sessionHash_ = OrgSpongycastleCryptoTlsTlsProtocol_getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsHandshakeHash_withByteArray_(state->clientContext_, prepareFinishHash, nil);
  OrgSpongycastleCryptoTlsTlsProtocol_establishMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsKeyExchange_(state->clientContext_, state->keyExchange_);
  [recordLayer initPendingEpochWithOrgSpongycastleCryptoTlsTlsCipher:[((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(state->client_)) getCipher]];
  if (state->clientCredentials_ != nil && [OrgSpongycastleCryptoTlsTlsSignerCredentials_class_() isInstance:state->clientCredentials_]) {
    id<OrgSpongycastleCryptoTlsTlsSignerCredentials> signerCredentials = (id<OrgSpongycastleCryptoTlsTlsSignerCredentials>) cast_check(state->clientCredentials_, OrgSpongycastleCryptoTlsTlsSignerCredentials_class_());
    OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm = OrgSpongycastleCryptoTlsTlsUtils_getSignatureAndHashAlgorithmWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsSignerCredentials_(state->clientContext_, signerCredentials);
    IOSByteArray *hash_;
    if (signatureAndHashAlgorithm == nil) {
      hash_ = [securityParameters getSessionHash];
    }
    else {
      hash_ = [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk(prepareFinishHash)) getFinalHashWithShort:[signatureAndHashAlgorithm getHash]];
    }
    IOSByteArray *signature = [signerCredentials generateCertificateSignatureWithByteArray:hash_];
    OrgSpongycastleCryptoTlsDigitallySigned *certificateVerify = new_OrgSpongycastleCryptoTlsDigitallySigned_initWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_withByteArray_(signatureAndHashAlgorithm, signature);
    IOSByteArray *certificateVerifyBody = [self generateCertificateVerifyWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withOrgSpongycastleCryptoTlsDigitallySigned:certificateVerify];
    [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_certificate_verify withByteArray:certificateVerifyBody];
  }
  IOSByteArray *clientVerifyData = OrgSpongycastleCryptoTlsTlsUtils_calculateVerifyDataWithOrgSpongycastleCryptoTlsTlsContext_withNSString_withByteArray_(state->clientContext_, OrgSpongycastleCryptoTlsExporterLabel_client_finished, OrgSpongycastleCryptoTlsTlsProtocol_getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsHandshakeHash_withByteArray_(state->clientContext_, [handshake getHandshakeHash], nil));
  [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_finished withByteArray:clientVerifyData];
  if (state->expectSessionTicket_) {
    serverMessage = [handshake receiveMessage];
    if ([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(serverMessage)) getType] == OrgSpongycastleCryptoTlsHandshakeType_session_ticket) {
      [self processNewSessionTicketWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withByteArray:[serverMessage getBody]];
    }
    else {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
    }
  }
  IOSByteArray *expectedServerVerifyData = OrgSpongycastleCryptoTlsTlsUtils_calculateVerifyDataWithOrgSpongycastleCryptoTlsTlsContext_withNSString_withByteArray_(state->clientContext_, OrgSpongycastleCryptoTlsExporterLabel_server_finished, OrgSpongycastleCryptoTlsTlsProtocol_getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsHandshakeHash_withByteArray_(state->clientContext_, [handshake getHandshakeHash], nil));
  [self processFinishedWithByteArray:[handshake receiveMessageBodyWithShort:OrgSpongycastleCryptoTlsHandshakeType_finished] withByteArray:expectedServerVerifyData];
  [handshake finish];
  if (state->tlsSession_ != nil) {
    state->sessionParameters_ = [((OrgSpongycastleCryptoTlsSessionParameters_Builder *) nil_chk([((OrgSpongycastleCryptoTlsSessionParameters_Builder *) nil_chk([((OrgSpongycastleCryptoTlsSessionParameters_Builder *) nil_chk([((OrgSpongycastleCryptoTlsSessionParameters_Builder *) nil_chk([((OrgSpongycastleCryptoTlsSessionParameters_Builder *) nil_chk([((OrgSpongycastleCryptoTlsSessionParameters_Builder *) nil_chk([((OrgSpongycastleCryptoTlsSessionParameters_Builder *) nil_chk([new_OrgSpongycastleCryptoTlsSessionParameters_Builder_init() setCipherSuiteWithInt:[securityParameters getCipherSuite]])) setCompressionAlgorithmWithShort:[securityParameters getCompressionAlgorithm]])) setMasterSecretWithByteArray:[securityParameters getMasterSecret]])) setPeerCertificateWithOrgSpongycastleCryptoTlsCertificate:serverCertificate])) setPSKIdentityWithByteArray:[securityParameters getPSKIdentity]])) setSRPIdentityWithByteArray:[securityParameters getSRPIdentity]])) setServerExtensionsWithJavaUtilHashtable:state->serverExtensions_])) build];
    state->tlsSession_ = OrgSpongycastleCryptoTlsTlsUtils_importSessionWithByteArray_withOrgSpongycastleCryptoTlsSessionParameters_([((id<OrgSpongycastleCryptoTlsTlsSession>) nil_chk(state->tlsSession_)) getSessionID], state->sessionParameters_);
    [((OrgSpongycastleCryptoTlsTlsClientContextImpl *) nil_chk(state->clientContext_)) setResumableSessionWithOrgSpongycastleCryptoTlsTlsSession:state->tlsSession_];
  }
  [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(state->client_)) notifyHandshakeComplete];
  return new_OrgSpongycastleCryptoTlsDTLSTransport_initWithOrgSpongycastleCryptoTlsDTLSRecordLayer_(recordLayer);
}

- (IOSByteArray *)generateCertificateVerifyWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                   withOrgSpongycastleCryptoTlsDigitallySigned:(OrgSpongycastleCryptoTlsDigitallySigned *)certificateVerify {
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  [((OrgSpongycastleCryptoTlsDigitallySigned *) nil_chk(certificateVerify)) encodeWithJavaIoOutputStream:buf];
  return [buf toByteArray];
}

- (IOSByteArray *)generateClientHelloWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                   withOrgSpongycastleCryptoTlsTlsClient:(id<OrgSpongycastleCryptoTlsTlsClient>)client {
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  OrgSpongycastleCryptoTlsProtocolVersion *client_version = [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(client)) getClientVersion];
  if (![((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(client_version)) isDTLS]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  OrgSpongycastleCryptoTlsTlsClientContextImpl *context = ((OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *) nil_chk(state))->clientContext_;
  [((OrgSpongycastleCryptoTlsTlsClientContextImpl *) nil_chk(context)) setClientVersionWithOrgSpongycastleCryptoTlsProtocolVersion:client_version];
  OrgSpongycastleCryptoTlsTlsUtils_writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion_withJavaIoOutputStream_(client_version, buf);
  OrgSpongycastleCryptoTlsSecurityParameters *securityParameters = [context getSecurityParameters];
  [buf writeWithByteArray:[((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters)) getClientRandom]];
  IOSByteArray *session_id = JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES);
  if (state->tlsSession_ != nil) {
    session_id = [state->tlsSession_ getSessionID];
    if (session_id == nil || session_id->size_ > 32) {
      session_id = JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES);
    }
  }
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(session_id, buf);
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES), buf);
  jboolean fallback = [client isFallback];
  state->offeredCipherSuites_ = [client getCipherSuites];
  state->clientExtensions_ = [client getClientExtensions];
  {
    IOSByteArray *renegExtData = OrgSpongycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(state->clientExtensions_, JreLoadStatic(OrgSpongycastleCryptoTlsTlsProtocol, EXT_RenegotiationInfo));
    jboolean noRenegExt = nil == renegExtData;
    jboolean noRenegSCSV = !OrgSpongycastleUtilArrays_containsWithIntArray_withInt_(state->offeredCipherSuites_, OrgSpongycastleCryptoTlsCipherSuite_TLS_EMPTY_RENEGOTIATION_INFO_SCSV);
    if (noRenegExt && noRenegSCSV) {
      state->offeredCipherSuites_ = OrgSpongycastleUtilArrays_appendWithIntArray_withInt_(state->offeredCipherSuites_, OrgSpongycastleCryptoTlsCipherSuite_TLS_EMPTY_RENEGOTIATION_INFO_SCSV);
    }
    if (fallback && !OrgSpongycastleUtilArrays_containsWithIntArray_withInt_(state->offeredCipherSuites_, OrgSpongycastleCryptoTlsCipherSuite_TLS_FALLBACK_SCSV)) {
      state->offeredCipherSuites_ = OrgSpongycastleUtilArrays_appendWithIntArray_withInt_(state->offeredCipherSuites_, OrgSpongycastleCryptoTlsCipherSuite_TLS_FALLBACK_SCSV);
    }
    OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithUint16LengthWithIntArray_withJavaIoOutputStream_(state->offeredCipherSuites_, buf);
  }
  state->offeredCompressionMethods_ = [IOSShortArray newArrayWithShorts:(jshort[]){ OrgSpongycastleCryptoTlsCompressionMethod__null } count:1];
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithUint8LengthWithShortArray_withJavaIoOutputStream_(state->offeredCompressionMethods_, buf);
  if (state->clientExtensions_ != nil) {
    OrgSpongycastleCryptoTlsTlsProtocol_writeExtensionsWithJavaIoOutputStream_withJavaUtilHashtable_(buf, state->clientExtensions_);
  }
  return [buf toByteArray];
}

- (IOSByteArray *)generateClientKeyExchangeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state {
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(((OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *) nil_chk(state))->keyExchange_)) generateClientKeyExchangeWithJavaIoOutputStream:buf];
  return [buf toByteArray];
}

- (void)invalidateSessionWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state {
  if (((OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *) nil_chk(state))->sessionParameters_ != nil) {
    [state->sessionParameters_ clear];
    state->sessionParameters_ = nil;
  }
  if (state->tlsSession_ != nil) {
    [state->tlsSession_ invalidate];
    state->tlsSession_ = nil;
  }
}

- (void)processCertificateRequestWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                       withByteArray:(IOSByteArray *)body {
  if (((OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *) nil_chk(state))->authentication_ == nil) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_handshake_failure);
  }
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(body);
  state->certificateRequest_ = OrgSpongycastleCryptoTlsCertificateRequest_parseWithOrgSpongycastleCryptoTlsTlsContext_withJavaIoInputStream_(state->clientContext_, buf);
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(state->keyExchange_)) validateCertificateRequestWithOrgSpongycastleCryptoTlsCertificateRequest:state->certificateRequest_];
}

- (void)processCertificateStatusWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                      withByteArray:(IOSByteArray *)body {
  if (!((OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *) nil_chk(state))->allowCertificateStatus_) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(body);
  state->certificateStatus_ = OrgSpongycastleCryptoTlsCertificateStatus_parseWithJavaIoInputStream_(buf);
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
}

- (IOSByteArray *)processHelloVerifyRequestWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                                 withByteArray:(IOSByteArray *)body {
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(body);
  OrgSpongycastleCryptoTlsProtocolVersion *server_version = OrgSpongycastleCryptoTlsTlsUtils_readVersionWithJavaIoInputStream_(buf);
  IOSByteArray *cookie = OrgSpongycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(buf);
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  if (![((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(server_version)) isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:[((OrgSpongycastleCryptoTlsTlsClientContextImpl *) nil_chk(((OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *) nil_chk(state))->clientContext_)) getClientVersion]]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  if (![((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(JreLoadStatic(OrgSpongycastleCryptoTlsProtocolVersion, DTLSv12))) isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:server_version] && ((IOSByteArray *) nil_chk(cookie))->size_ > 32) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  return cookie;
}

- (void)processNewSessionTicketWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                     withByteArray:(IOSByteArray *)body {
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(body);
  OrgSpongycastleCryptoTlsNewSessionTicket *newSessionTicket = OrgSpongycastleCryptoTlsNewSessionTicket_parseWithJavaIoInputStream_(buf);
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(((OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *) nil_chk(state))->client_)) notifyNewSessionTicketWithOrgSpongycastleCryptoTlsNewSessionTicket:newSessionTicket];
}

- (OrgSpongycastleCryptoTlsCertificate *)processServerCertificateWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                                                       withByteArray:(IOSByteArray *)body {
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(body);
  OrgSpongycastleCryptoTlsCertificate *serverCertificate = OrgSpongycastleCryptoTlsCertificate_parseWithJavaIoInputStream_(buf);
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(((OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *) nil_chk(state))->keyExchange_)) processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:serverCertificate];
  state->authentication_ = [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(state->client_)) getAuthentication];
  [((id<OrgSpongycastleCryptoTlsTlsAuthentication>) nil_chk(state->authentication_)) notifyServerCertificateWithOrgSpongycastleCryptoTlsCertificate:serverCertificate];
  return serverCertificate;
}

- (void)processServerHelloWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                withByteArray:(IOSByteArray *)body {
  OrgSpongycastleCryptoTlsSecurityParameters *securityParameters = [((OrgSpongycastleCryptoTlsTlsClientContextImpl *) nil_chk(((OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *) nil_chk(state))->clientContext_)) getSecurityParameters];
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(body);
  {
    OrgSpongycastleCryptoTlsProtocolVersion *server_version = OrgSpongycastleCryptoTlsTlsUtils_readVersionWithJavaIoInputStream_(buf);
    [self reportServerVersionWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:state withOrgSpongycastleCryptoTlsProtocolVersion:server_version];
  }
  ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters))->serverRandom_ = OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(32, buf);
  state->selectedSessionID_ = OrgSpongycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(buf);
  if (((IOSByteArray *) nil_chk(state->selectedSessionID_))->size_ > 32) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(state->client_)) notifySessionIDWithByteArray:state->selectedSessionID_];
  state->resumedSession_ = (((IOSByteArray *) nil_chk(state->selectedSessionID_))->size_ > 0 && state->tlsSession_ != nil && OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(state->selectedSessionID_, [state->tlsSession_ getSessionID]));
  jint selectedCipherSuite = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(buf);
  if (!OrgSpongycastleUtilArrays_containsWithIntArray_withInt_(state->offeredCipherSuites_, selectedCipherSuite) || selectedCipherSuite == OrgSpongycastleCryptoTlsCipherSuite_TLS_NULL_WITH_NULL_NULL || OrgSpongycastleCryptoTlsCipherSuite_isSCSVWithInt_(selectedCipherSuite) || !OrgSpongycastleCryptoTlsTlsUtils_isValidCipherSuiteForVersionWithInt_withOrgSpongycastleCryptoTlsProtocolVersion_(selectedCipherSuite, [((OrgSpongycastleCryptoTlsTlsClientContextImpl *) nil_chk(state->clientContext_)) getServerVersion])) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  OrgSpongycastleCryptoTlsDTLSProtocol_validateSelectedCipherSuiteWithInt_withShort_(selectedCipherSuite, OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(state->client_)) notifySelectedCipherSuiteWithInt:selectedCipherSuite];
  jshort selectedCompressionMethod = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(buf);
  if (!OrgSpongycastleUtilArrays_containsWithShortArray_withShort_(state->offeredCompressionMethods_, selectedCompressionMethod)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(state->client_)) notifySelectedCompressionMethodWithShort:selectedCompressionMethod];
  state->serverExtensions_ = OrgSpongycastleCryptoTlsTlsProtocol_readExtensionsWithJavaIoByteArrayInputStream_(buf);
  if (state->serverExtensions_ != nil) {
    id<JavaUtilEnumeration> e = [state->serverExtensions_ keys];
    while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
      JavaLangInteger *extType = (JavaLangInteger *) cast_chk([e nextElement], [JavaLangInteger class]);
      if ([((JavaLangInteger *) nil_chk(extType)) isEqual:JreLoadStatic(OrgSpongycastleCryptoTlsTlsProtocol, EXT_RenegotiationInfo)]) {
        continue;
      }
      if (nil == OrgSpongycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(state->clientExtensions_, extType)) {
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unsupported_extension);
      }
      if (state->resumedSession_) {
      }
    }
  }
  {
    IOSByteArray *renegExtData = OrgSpongycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(state->serverExtensions_, JreLoadStatic(OrgSpongycastleCryptoTlsTlsProtocol, EXT_RenegotiationInfo));
    if (renegExtData != nil) {
      state->secure_renegotiation_ = true;
      if (!OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(renegExtData, OrgSpongycastleCryptoTlsTlsProtocol_createRenegotiationInfoWithByteArray_(JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES)))) {
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_handshake_failure);
      }
    }
  }
  [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(state->client_)) notifySecureRenegotiationWithBoolean:state->secure_renegotiation_];
  JavaUtilHashtable *sessionClientExtensions = state->clientExtensions_;
  JavaUtilHashtable *sessionServerExtensions = state->serverExtensions_;
  if (state->resumedSession_) {
    if (selectedCipherSuite != [((OrgSpongycastleCryptoTlsSessionParameters *) nil_chk(state->sessionParameters_)) getCipherSuite] || selectedCompressionMethod != [((OrgSpongycastleCryptoTlsSessionParameters *) nil_chk(state->sessionParameters_)) getCompressionAlgorithm]) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
    sessionClientExtensions = nil;
    sessionServerExtensions = [((OrgSpongycastleCryptoTlsSessionParameters *) nil_chk(state->sessionParameters_)) readServerExtensions];
  }
  securityParameters->cipherSuite_ = selectedCipherSuite;
  securityParameters->compressionAlgorithm_ = selectedCompressionMethod;
  if (sessionServerExtensions != nil) {
    {
      jboolean serverSentEncryptThenMAC = OrgSpongycastleCryptoTlsTlsExtensionsUtils_hasEncryptThenMACExtensionWithJavaUtilHashtable_(sessionServerExtensions);
      if (serverSentEncryptThenMAC && !OrgSpongycastleCryptoTlsTlsUtils_isBlockCipherSuiteWithInt_([securityParameters getCipherSuite])) {
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
      }
      securityParameters->encryptThenMAC_ = serverSentEncryptThenMAC;
    }
    securityParameters->extendedMasterSecret_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_hasExtendedMasterSecretExtensionWithJavaUtilHashtable_(sessionServerExtensions);
    securityParameters->maxFragmentLength_ = OrgSpongycastleCryptoTlsDTLSProtocol_evaluateMaxFragmentLengthExtensionWithBoolean_withJavaUtilHashtable_withJavaUtilHashtable_withShort_(state->resumedSession_, sessionClientExtensions, sessionServerExtensions, OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    securityParameters->truncatedHMac_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_hasTruncatedHMacExtensionWithJavaUtilHashtable_(sessionServerExtensions);
    state->allowCertificateStatus_ = (!state->resumedSession_ && OrgSpongycastleCryptoTlsTlsUtils_hasExpectedEmptyExtensionDataWithJavaUtilHashtable_withJavaLangInteger_withShort_(sessionServerExtensions, JreLoadStatic(OrgSpongycastleCryptoTlsTlsExtensionsUtils, EXT_status_request), OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter));
    state->expectSessionTicket_ = (!state->resumedSession_ && OrgSpongycastleCryptoTlsTlsUtils_hasExpectedEmptyExtensionDataWithJavaUtilHashtable_withJavaLangInteger_withShort_(sessionServerExtensions, JreLoadStatic(OrgSpongycastleCryptoTlsTlsProtocol, EXT_SessionTicket), OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter));
  }
  if (sessionClientExtensions != nil) {
    [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(state->client_)) processServerExtensionsWithJavaUtilHashtable:sessionServerExtensions];
  }
  securityParameters->prfAlgorithm_ = OrgSpongycastleCryptoTlsTlsProtocol_getPRFAlgorithmWithOrgSpongycastleCryptoTlsTlsContext_withInt_(state->clientContext_, [securityParameters getCipherSuite]);
  securityParameters->verifyDataLength_ = 12;
}

- (void)processServerKeyExchangeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                      withByteArray:(IOSByteArray *)body {
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(body);
  [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(((OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *) nil_chk(state))->keyExchange_)) processServerKeyExchangeWithJavaIoInputStream:buf];
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
}

- (void)processServerSupplementalDataWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                                                           withByteArray:(IOSByteArray *)body {
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(body);
  JavaUtilVector *serverSupplementalData = OrgSpongycastleCryptoTlsTlsProtocol_readSupplementalDataMessageWithJavaIoByteArrayInputStream_(buf);
  [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(((OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *) nil_chk(state))->client_)) processServerSupplementalDataWithJavaUtilVector:serverSupplementalData];
}

- (void)reportServerVersionWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *)state
                                                   withOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)server_version {
  OrgSpongycastleCryptoTlsTlsClientContextImpl *clientContext = ((OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *) nil_chk(state))->clientContext_;
  OrgSpongycastleCryptoTlsProtocolVersion *currentServerVersion = [((OrgSpongycastleCryptoTlsTlsClientContextImpl *) nil_chk(clientContext)) getServerVersion];
  if (nil == currentServerVersion) {
    [clientContext setServerVersionWithOrgSpongycastleCryptoTlsProtocolVersion:server_version];
    [((id<OrgSpongycastleCryptoTlsTlsClient>) nil_chk(state->client_)) notifyServerVersionWithOrgSpongycastleCryptoTlsProtocolVersion:server_version];
  }
  else if (![currentServerVersion equalsWithOrgSpongycastleCryptoTlsProtocolVersion:server_version]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
}

+ (IOSByteArray *)patchClientHelloWithCookieWithByteArray:(IOSByteArray *)clientHelloBody
                                            withByteArray:(IOSByteArray *)cookie {
  return OrgSpongycastleCryptoTlsDTLSClientProtocol_patchClientHelloWithCookieWithByteArray_withByteArray_(clientHelloBody, cookie);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsDTLSTransport;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsDTLSTransport;", 0x4, 6, 7, 3, -1, -1, -1 },
    { NULL, "[B", 0x4, 8, 9, 3, -1, -1, -1 },
    { NULL, "[B", 0x4, 10, 11, 3, -1, -1, -1 },
    { NULL, "[B", 0x4, 12, 13, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 15, 16, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 17, 16, 3, -1, -1, -1 },
    { NULL, "[B", 0x4, 18, 16, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 19, 16, 3, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsCertificate;", 0x4, 20, 16, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 21, 16, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 22, 16, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 23, 16, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 24, 25, 3, -1, -1, -1 },
    { NULL, "[B", 0xc, 26, 27, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecuritySecureRandom:);
  methods[1].selector = @selector(connectWithOrgSpongycastleCryptoTlsTlsClient:withOrgSpongycastleCryptoTlsDatagramTransport:);
  methods[2].selector = @selector(abortClientHandshakeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:withOrgSpongycastleCryptoTlsDTLSRecordLayer:withShort:);
  methods[3].selector = @selector(clientHandshakeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:withOrgSpongycastleCryptoTlsDTLSRecordLayer:);
  methods[4].selector = @selector(generateCertificateVerifyWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:withOrgSpongycastleCryptoTlsDigitallySigned:);
  methods[5].selector = @selector(generateClientHelloWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:withOrgSpongycastleCryptoTlsTlsClient:);
  methods[6].selector = @selector(generateClientKeyExchangeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:);
  methods[7].selector = @selector(invalidateSessionWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:);
  methods[8].selector = @selector(processCertificateRequestWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:withByteArray:);
  methods[9].selector = @selector(processCertificateStatusWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:withByteArray:);
  methods[10].selector = @selector(processHelloVerifyRequestWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:withByteArray:);
  methods[11].selector = @selector(processNewSessionTicketWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:withByteArray:);
  methods[12].selector = @selector(processServerCertificateWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:withByteArray:);
  methods[13].selector = @selector(processServerHelloWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:withByteArray:);
  methods[14].selector = @selector(processServerKeyExchangeWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:withByteArray:);
  methods[15].selector = @selector(processServerSupplementalDataWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:withByteArray:);
  methods[16].selector = @selector(reportServerVersionWithOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState:withOrgSpongycastleCryptoTlsProtocolVersion:);
  methods[17].selector = @selector(patchClientHelloWithCookieWithByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaSecuritySecureRandom;", "connect", "LOrgSpongycastleCryptoTlsTlsClient;LOrgSpongycastleCryptoTlsDatagramTransport;", "LJavaIoIOException;", "abortClientHandshake", "LOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState;LOrgSpongycastleCryptoTlsDTLSRecordLayer;S", "clientHandshake", "LOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState;LOrgSpongycastleCryptoTlsDTLSRecordLayer;", "generateCertificateVerify", "LOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState;LOrgSpongycastleCryptoTlsDigitallySigned;", "generateClientHello", "LOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState;LOrgSpongycastleCryptoTlsTlsClient;", "generateClientKeyExchange", "LOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState;", "invalidateSession", "processCertificateRequest", "LOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState;[B", "processCertificateStatus", "processHelloVerifyRequest", "processNewSessionTicket", "processServerCertificate", "processServerHello", "processServerKeyExchange", "processServerSupplementalData", "reportServerVersion", "LOrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState;LOrgSpongycastleCryptoTlsProtocolVersion;", "patchClientHelloWithCookie", "[B[B" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDTLSClientProtocol = { "DTLSClientProtocol", "org.spongycastle.crypto.tls", ptrTable, methods, NULL, 7, 0x1, 18, 0, -1, 13, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDTLSClientProtocol;
}

@end

void OrgSpongycastleCryptoTlsDTLSClientProtocol_initWithJavaSecuritySecureRandom_(OrgSpongycastleCryptoTlsDTLSClientProtocol *self, JavaSecuritySecureRandom *secureRandom) {
  OrgSpongycastleCryptoTlsDTLSProtocol_initWithJavaSecuritySecureRandom_(self, secureRandom);
}

OrgSpongycastleCryptoTlsDTLSClientProtocol *new_OrgSpongycastleCryptoTlsDTLSClientProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDTLSClientProtocol, initWithJavaSecuritySecureRandom_, secureRandom)
}

OrgSpongycastleCryptoTlsDTLSClientProtocol *create_OrgSpongycastleCryptoTlsDTLSClientProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDTLSClientProtocol, initWithJavaSecuritySecureRandom_, secureRandom)
}

IOSByteArray *OrgSpongycastleCryptoTlsDTLSClientProtocol_patchClientHelloWithCookieWithByteArray_withByteArray_(IOSByteArray *clientHelloBody, IOSByteArray *cookie) {
  OrgSpongycastleCryptoTlsDTLSClientProtocol_initialize();
  jint sessionIDPos = 34;
  jint sessionIDLength = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithByteArray_withInt_(clientHelloBody, sessionIDPos);
  jint cookieLengthPos = sessionIDPos + 1 + sessionIDLength;
  jint cookiePos = cookieLengthPos + 1;
  IOSByteArray *patched = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(clientHelloBody))->size_ + ((IOSByteArray *) nil_chk(cookie))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(clientHelloBody, 0, patched, 0, cookieLengthPos);
  OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithInt_(cookie->size_);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithInt_withByteArray_withInt_(cookie->size_, patched, cookieLengthPos);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(cookie, 0, patched, cookiePos, cookie->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(clientHelloBody, cookiePos, patched, cookiePos + cookie->size_, clientHelloBody->size_ - cookiePos);
  return patched;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDTLSClientProtocol)

@implementation OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "client_", "LOrgSpongycastleCryptoTlsTlsClient;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "clientContext_", "LOrgSpongycastleCryptoTlsTlsClientContextImpl;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tlsSession_", "LOrgSpongycastleCryptoTlsTlsSession;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sessionParameters_", "LOrgSpongycastleCryptoTlsSessionParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sessionParametersBuilder_", "LOrgSpongycastleCryptoTlsSessionParameters_Builder;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "offeredCipherSuites_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "offeredCompressionMethods_", "[S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "clientExtensions_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "serverExtensions_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "selectedSessionID_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "resumedSession_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "secure_renegotiation_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "allowCertificateStatus_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "expectSessionTicket_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "keyExchange_", "LOrgSpongycastleCryptoTlsTlsKeyExchange;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "authentication_", "LOrgSpongycastleCryptoTlsTlsAuthentication;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "certificateStatus_", "LOrgSpongycastleCryptoTlsCertificateStatus;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "certificateRequest_", "LOrgSpongycastleCryptoTlsCertificateRequest;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "clientCredentials_", "LOrgSpongycastleCryptoTlsTlsCredentials;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsDTLSClientProtocol;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState = { "ClientHandshakeState", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0xc, 1, 19, 0, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState;
}

@end

void OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState_init(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *self) {
  NSObject_init(self);
  self->client_ = nil;
  self->clientContext_ = nil;
  self->tlsSession_ = nil;
  self->sessionParameters_ = nil;
  self->sessionParametersBuilder_ = nil;
  self->offeredCipherSuites_ = nil;
  self->offeredCompressionMethods_ = nil;
  self->clientExtensions_ = nil;
  self->serverExtensions_ = nil;
  self->selectedSessionID_ = nil;
  self->resumedSession_ = false;
  self->secure_renegotiation_ = false;
  self->allowCertificateStatus_ = false;
  self->expectSessionTicket_ = false;
  self->keyExchange_ = nil;
  self->authentication_ = nil;
  self->certificateStatus_ = nil;
  self->certificateRequest_ = nil;
  self->clientCredentials_ = nil;
}

OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *new_OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, init)
}

OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState *create_OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDTLSClientProtocol_ClientHandshakeState)
