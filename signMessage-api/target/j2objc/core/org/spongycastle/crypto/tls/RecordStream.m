//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/RecordStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/ContentType.h"
#include "org/spongycastle/crypto/tls/DeferredHash.h"
#include "org/spongycastle/crypto/tls/ProtocolVersion.h"
#include "org/spongycastle/crypto/tls/RecordStream.h"
#include "org/spongycastle/crypto/tls/TlsCipher.h"
#include "org/spongycastle/crypto/tls/TlsCompression.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsHandshakeHash.h"
#include "org/spongycastle/crypto/tls/TlsNullCipher.h"
#include "org/spongycastle/crypto/tls/TlsNullCompression.h"
#include "org/spongycastle/crypto/tls/TlsProtocol.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/util/io/SimpleOutputStream.h"

@class OrgSpongycastleCryptoTlsRecordStream_SequenceNumber;

@interface OrgSpongycastleCryptoTlsRecordStream () {
 @public
  OrgSpongycastleCryptoTlsTlsProtocol *handler_;
  JavaIoInputStream *input_;
  JavaIoOutputStream *output_;
  id<OrgSpongycastleCryptoTlsTlsCompression> pendingCompression_;
  id<OrgSpongycastleCryptoTlsTlsCompression> readCompression_;
  id<OrgSpongycastleCryptoTlsTlsCompression> writeCompression_;
  id<OrgSpongycastleCryptoTlsTlsCipher> pendingCipher_;
  id<OrgSpongycastleCryptoTlsTlsCipher> readCipher_;
  id<OrgSpongycastleCryptoTlsTlsCipher> writeCipher_;
  OrgSpongycastleCryptoTlsRecordStream_SequenceNumber *readSeqNo_;
  OrgSpongycastleCryptoTlsRecordStream_SequenceNumber *writeSeqNo_;
  JavaIoByteArrayOutputStream *buffer_;
  id<OrgSpongycastleCryptoTlsTlsHandshakeHash> handshakeHash_;
  OrgSpongycastleUtilIoSimpleOutputStream *handshakeHashUpdater_;
  OrgSpongycastleCryptoTlsProtocolVersion *readVersion_;
  OrgSpongycastleCryptoTlsProtocolVersion *writeVersion_;
  jboolean restrictReadVersion_;
  jint plaintextLimit_;
  jint compressedLimit_;
  jint ciphertextLimit_;
}

- (IOSByteArray *)getBufferContents;

+ (void)checkTypeWithShort:(jshort)type
                 withShort:(jshort)alertDescription;

+ (void)checkLengthWithInt:(jint)length
                   withInt:(jint)limit
                 withShort:(jshort)alertDescription;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, handler_, OrgSpongycastleCryptoTlsTlsProtocol *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, input_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, output_, JavaIoOutputStream *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, pendingCompression_, id<OrgSpongycastleCryptoTlsTlsCompression>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, readCompression_, id<OrgSpongycastleCryptoTlsTlsCompression>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, writeCompression_, id<OrgSpongycastleCryptoTlsTlsCompression>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, pendingCipher_, id<OrgSpongycastleCryptoTlsTlsCipher>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, readCipher_, id<OrgSpongycastleCryptoTlsTlsCipher>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, writeCipher_, id<OrgSpongycastleCryptoTlsTlsCipher>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, readSeqNo_, OrgSpongycastleCryptoTlsRecordStream_SequenceNumber *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, writeSeqNo_, OrgSpongycastleCryptoTlsRecordStream_SequenceNumber *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, buffer_, JavaIoByteArrayOutputStream *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, handshakeHash_, id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, handshakeHashUpdater_, OrgSpongycastleUtilIoSimpleOutputStream *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, readVersion_, OrgSpongycastleCryptoTlsProtocolVersion *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsRecordStream, writeVersion_, OrgSpongycastleCryptoTlsProtocolVersion *)

inline jint OrgSpongycastleCryptoTlsRecordStream_get_DEFAULT_PLAINTEXT_LIMIT(void);
inline jint OrgSpongycastleCryptoTlsRecordStream_set_DEFAULT_PLAINTEXT_LIMIT(jint value);
inline jint *OrgSpongycastleCryptoTlsRecordStream_getRef_DEFAULT_PLAINTEXT_LIMIT(void);
static jint OrgSpongycastleCryptoTlsRecordStream_DEFAULT_PLAINTEXT_LIMIT = 16384;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgSpongycastleCryptoTlsRecordStream, DEFAULT_PLAINTEXT_LIMIT, jint)

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoTlsRecordStream_getBufferContents(OrgSpongycastleCryptoTlsRecordStream *self);

__attribute__((unused)) static void OrgSpongycastleCryptoTlsRecordStream_checkTypeWithShort_withShort_(jshort type, jshort alertDescription);

__attribute__((unused)) static void OrgSpongycastleCryptoTlsRecordStream_checkLengthWithInt_withInt_withShort_(jint length, jint limit, jshort alertDescription);

@interface OrgSpongycastleCryptoTlsRecordStream_1 : OrgSpongycastleUtilIoSimpleOutputStream {
 @public
  OrgSpongycastleCryptoTlsRecordStream *this$0_;
}

- (instancetype)initWithOrgSpongycastleCryptoTlsRecordStream:(OrgSpongycastleCryptoTlsRecordStream *)outer$;

- (void)writeWithByteArray:(IOSByteArray *)buf
                   withInt:(jint)off
                   withInt:(jint)len;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsRecordStream_1)

__attribute__((unused)) static void OrgSpongycastleCryptoTlsRecordStream_1_initWithOrgSpongycastleCryptoTlsRecordStream_(OrgSpongycastleCryptoTlsRecordStream_1 *self, OrgSpongycastleCryptoTlsRecordStream *outer$);

__attribute__((unused)) static OrgSpongycastleCryptoTlsRecordStream_1 *new_OrgSpongycastleCryptoTlsRecordStream_1_initWithOrgSpongycastleCryptoTlsRecordStream_(OrgSpongycastleCryptoTlsRecordStream *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleCryptoTlsRecordStream_1 *create_OrgSpongycastleCryptoTlsRecordStream_1_initWithOrgSpongycastleCryptoTlsRecordStream_(OrgSpongycastleCryptoTlsRecordStream *outer$);

@interface OrgSpongycastleCryptoTlsRecordStream_SequenceNumber : NSObject {
 @public
  jlong value_;
  jboolean exhausted_;
}

- (instancetype)init;

- (jlong)nextValueWithShort:(jshort)alertDescription;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsRecordStream_SequenceNumber)

__attribute__((unused)) static void OrgSpongycastleCryptoTlsRecordStream_SequenceNumber_init(OrgSpongycastleCryptoTlsRecordStream_SequenceNumber *self);

__attribute__((unused)) static OrgSpongycastleCryptoTlsRecordStream_SequenceNumber *new_OrgSpongycastleCryptoTlsRecordStream_SequenceNumber_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleCryptoTlsRecordStream_SequenceNumber *create_OrgSpongycastleCryptoTlsRecordStream_SequenceNumber_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsRecordStream_SequenceNumber)

@implementation OrgSpongycastleCryptoTlsRecordStream

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsProtocol:(OrgSpongycastleCryptoTlsTlsProtocol *)handler
                                      withJavaIoInputStream:(JavaIoInputStream *)input
                                     withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsRecordStream_initWithOrgSpongycastleCryptoTlsTlsProtocol_withJavaIoInputStream_withJavaIoOutputStream_(self, handler, input, output);
  return self;
}

- (void)init__WithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context {
  self->readCipher_ = new_OrgSpongycastleCryptoTlsTlsNullCipher_initWithOrgSpongycastleCryptoTlsTlsContext_(context);
  self->writeCipher_ = self->readCipher_;
  self->handshakeHash_ = new_OrgSpongycastleCryptoTlsDeferredHash_init();
  [self->handshakeHash_ init__WithOrgSpongycastleCryptoTlsTlsContext:context];
  [self setPlaintextLimitWithInt:OrgSpongycastleCryptoTlsRecordStream_DEFAULT_PLAINTEXT_LIMIT];
}

- (jint)getPlaintextLimit {
  return plaintextLimit_;
}

- (void)setPlaintextLimitWithInt:(jint)plaintextLimit {
  self->plaintextLimit_ = plaintextLimit;
  self->compressedLimit_ = self->plaintextLimit_ + 1024;
  self->ciphertextLimit_ = self->compressedLimit_ + 1024;
}

- (OrgSpongycastleCryptoTlsProtocolVersion *)getReadVersion {
  return readVersion_;
}

- (void)setReadVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)readVersion {
  self->readVersion_ = readVersion;
}

- (void)setWriteVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)writeVersion {
  self->writeVersion_ = writeVersion;
}

- (void)setRestrictReadVersionWithBoolean:(jboolean)enabled {
  self->restrictReadVersion_ = enabled;
}

- (void)setPendingConnectionStateWithOrgSpongycastleCryptoTlsTlsCompression:(id<OrgSpongycastleCryptoTlsTlsCompression>)tlsCompression
                                      withOrgSpongycastleCryptoTlsTlsCipher:(id<OrgSpongycastleCryptoTlsTlsCipher>)tlsCipher {
  self->pendingCompression_ = tlsCompression;
  self->pendingCipher_ = tlsCipher;
}

- (void)sentWriteCipherSpec {
  if (pendingCompression_ == nil || pendingCipher_ == nil) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_handshake_failure);
  }
  self->writeCompression_ = self->pendingCompression_;
  self->writeCipher_ = self->pendingCipher_;
  self->writeSeqNo_ = new_OrgSpongycastleCryptoTlsRecordStream_SequenceNumber_init();
}

- (void)receivedReadCipherSpec {
  if (pendingCompression_ == nil || pendingCipher_ == nil) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_handshake_failure);
  }
  self->readCompression_ = self->pendingCompression_;
  self->readCipher_ = self->pendingCipher_;
  self->readSeqNo_ = new_OrgSpongycastleCryptoTlsRecordStream_SequenceNumber_init();
}

- (void)finaliseHandshake {
  if (readCompression_ != pendingCompression_ || writeCompression_ != pendingCompression_ || readCipher_ != pendingCipher_ || writeCipher_ != pendingCipher_) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_handshake_failure);
  }
  self->pendingCompression_ = nil;
  self->pendingCipher_ = nil;
}

- (void)checkRecordHeaderWithByteArray:(IOSByteArray *)recordHeader {
  jshort type = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithByteArray_withInt_(recordHeader, OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_TYPE_OFFSET);
  OrgSpongycastleCryptoTlsRecordStream_checkTypeWithShort_withShort_(type, OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  if (!restrictReadVersion_) {
    jint version_ = OrgSpongycastleCryptoTlsTlsUtils_readVersionRawWithByteArray_withInt_(recordHeader, OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_VERSION_OFFSET);
    if ((version_ & (jint) 0xffffff00) != (jint) 0x0300) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
  }
  else {
    OrgSpongycastleCryptoTlsProtocolVersion *version_ = OrgSpongycastleCryptoTlsTlsUtils_readVersionWithByteArray_withInt_(recordHeader, OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_VERSION_OFFSET);
    if (readVersion_ == nil) {
    }
    else if (![((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(version_)) equalsWithOrgSpongycastleCryptoTlsProtocolVersion:readVersion_]) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
  }
  jint length = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithByteArray_withInt_(recordHeader, OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_LENGTH_OFFSET);
  OrgSpongycastleCryptoTlsRecordStream_checkLengthWithInt_withInt_withShort_(length, ciphertextLimit_, OrgSpongycastleCryptoTlsAlertDescription_record_overflow);
}

- (jboolean)readRecord {
  IOSByteArray *recordHeader = OrgSpongycastleCryptoTlsTlsUtils_readAllOrNothingWithInt_withJavaIoInputStream_(OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_SIZE, input_);
  if (recordHeader == nil) {
    return false;
  }
  jshort type = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithByteArray_withInt_(recordHeader, OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_TYPE_OFFSET);
  OrgSpongycastleCryptoTlsRecordStream_checkTypeWithShort_withShort_(type, OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  if (!restrictReadVersion_) {
    jint version_ = OrgSpongycastleCryptoTlsTlsUtils_readVersionRawWithByteArray_withInt_(recordHeader, OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_VERSION_OFFSET);
    if ((version_ & (jint) 0xffffff00) != (jint) 0x0300) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
  }
  else {
    OrgSpongycastleCryptoTlsProtocolVersion *version_ = OrgSpongycastleCryptoTlsTlsUtils_readVersionWithByteArray_withInt_(recordHeader, OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_VERSION_OFFSET);
    if (readVersion_ == nil) {
      readVersion_ = version_;
    }
    else if (![((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(version_)) equalsWithOrgSpongycastleCryptoTlsProtocolVersion:readVersion_]) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
  }
  jint length = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithByteArray_withInt_(recordHeader, OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_LENGTH_OFFSET);
  OrgSpongycastleCryptoTlsRecordStream_checkLengthWithInt_withInt_withShort_(length, ciphertextLimit_, OrgSpongycastleCryptoTlsAlertDescription_record_overflow);
  IOSByteArray *plaintext = [self decodeAndVerifyWithShort:type withJavaIoInputStream:input_ withInt:length];
  [((OrgSpongycastleCryptoTlsTlsProtocol *) nil_chk(handler_)) processRecordWithShort:type withByteArray:plaintext withInt:0 withInt:((IOSByteArray *) nil_chk(plaintext))->size_];
  return true;
}

- (IOSByteArray *)decodeAndVerifyWithShort:(jshort)type
                     withJavaIoInputStream:(JavaIoInputStream *)input
                                   withInt:(jint)len {
  IOSByteArray *buf = OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(len, input);
  jlong seqNo = [((OrgSpongycastleCryptoTlsRecordStream_SequenceNumber *) nil_chk(readSeqNo_)) nextValueWithShort:OrgSpongycastleCryptoTlsAlertDescription_unexpected_message];
  IOSByteArray *decoded = [((id<OrgSpongycastleCryptoTlsTlsCipher>) nil_chk(readCipher_)) decodeCiphertextWithLong:seqNo withShort:type withByteArray:buf withInt:0 withInt:((IOSByteArray *) nil_chk(buf))->size_];
  OrgSpongycastleCryptoTlsRecordStream_checkLengthWithInt_withInt_withShort_(((IOSByteArray *) nil_chk(decoded))->size_, compressedLimit_, OrgSpongycastleCryptoTlsAlertDescription_record_overflow);
  JavaIoOutputStream *cOut = [((id<OrgSpongycastleCryptoTlsTlsCompression>) nil_chk(readCompression_)) decompressWithJavaIoOutputStream:buffer_];
  if (cOut != buffer_) {
    [((JavaIoOutputStream *) nil_chk(cOut)) writeWithByteArray:decoded withInt:0 withInt:decoded->size_];
    [cOut flush];
    decoded = OrgSpongycastleCryptoTlsRecordStream_getBufferContents(self);
  }
  OrgSpongycastleCryptoTlsRecordStream_checkLengthWithInt_withInt_withShort_(((IOSByteArray *) nil_chk(decoded))->size_, plaintextLimit_, OrgSpongycastleCryptoTlsAlertDescription_decompression_failure);
  if (decoded->size_ < 1 && type != OrgSpongycastleCryptoTlsContentType_application_data) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  return decoded;
}

- (void)writeRecordWithShort:(jshort)type
               withByteArray:(IOSByteArray *)plaintext
                     withInt:(jint)plaintextOffset
                     withInt:(jint)plaintextLength {
  if (writeVersion_ == nil) {
    return;
  }
  OrgSpongycastleCryptoTlsRecordStream_checkTypeWithShort_withShort_(type, OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  OrgSpongycastleCryptoTlsRecordStream_checkLengthWithInt_withInt_withShort_(plaintextLength, plaintextLimit_, OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  if (plaintextLength < 1 && type != OrgSpongycastleCryptoTlsContentType_application_data) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  JavaIoOutputStream *cOut = [((id<OrgSpongycastleCryptoTlsTlsCompression>) nil_chk(writeCompression_)) compressWithJavaIoOutputStream:buffer_];
  jlong seqNo = [((OrgSpongycastleCryptoTlsRecordStream_SequenceNumber *) nil_chk(writeSeqNo_)) nextValueWithShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error];
  IOSByteArray *ciphertext;
  if (cOut == buffer_) {
    ciphertext = [((id<OrgSpongycastleCryptoTlsTlsCipher>) nil_chk(writeCipher_)) encodePlaintextWithLong:seqNo withShort:type withByteArray:plaintext withInt:plaintextOffset withInt:plaintextLength];
  }
  else {
    [((JavaIoOutputStream *) nil_chk(cOut)) writeWithByteArray:plaintext withInt:plaintextOffset withInt:plaintextLength];
    [cOut flush];
    IOSByteArray *compressed = OrgSpongycastleCryptoTlsRecordStream_getBufferContents(self);
    OrgSpongycastleCryptoTlsRecordStream_checkLengthWithInt_withInt_withShort_(((IOSByteArray *) nil_chk(compressed))->size_, plaintextLength + 1024, OrgSpongycastleCryptoTlsAlertDescription_internal_error);
    ciphertext = [((id<OrgSpongycastleCryptoTlsTlsCipher>) nil_chk(writeCipher_)) encodePlaintextWithLong:seqNo withShort:type withByteArray:compressed withInt:0 withInt:compressed->size_];
  }
  OrgSpongycastleCryptoTlsRecordStream_checkLengthWithInt_withInt_withShort_(((IOSByteArray *) nil_chk(ciphertext))->size_, ciphertextLimit_, OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  IOSByteArray *record = [IOSByteArray newArrayWithLength:ciphertext->size_ + OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_SIZE];
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withByteArray_withInt_(type, record, OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_TYPE_OFFSET);
  OrgSpongycastleCryptoTlsTlsUtils_writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion_withByteArray_withInt_(writeVersion_, record, OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_VERSION_OFFSET);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withByteArray_withInt_(ciphertext->size_, record, OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_LENGTH_OFFSET);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ciphertext, 0, record, OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_SIZE, ciphertext->size_);
  [((JavaIoOutputStream *) nil_chk(output_)) writeWithByteArray:record];
  [((JavaIoOutputStream *) nil_chk(output_)) flush];
}

- (void)notifyHelloComplete {
  self->handshakeHash_ = [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk(handshakeHash_)) notifyPRFDetermined];
}

- (id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)getHandshakeHash {
  return handshakeHash_;
}

- (JavaIoOutputStream *)getHandshakeHashUpdater {
  return handshakeHashUpdater_;
}

- (id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)prepareToFinish {
  id<OrgSpongycastleCryptoTlsTlsHandshakeHash> result = handshakeHash_;
  self->handshakeHash_ = [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk(handshakeHash_)) stopTracking];
  return result;
}

- (void)safeClose {
  @try {
    [((JavaIoInputStream *) nil_chk(input_)) close];
  }
  @catch (JavaIoIOException *e) {
  }
  @try {
    [((JavaIoOutputStream *) nil_chk(output_)) close];
  }
  @catch (JavaIoIOException *e) {
  }
}

- (void)flush {
  [((JavaIoOutputStream *) nil_chk(output_)) flush];
}

- (IOSByteArray *)getBufferContents {
  return OrgSpongycastleCryptoTlsRecordStream_getBufferContents(self);
}

+ (void)checkTypeWithShort:(jshort)type
                 withShort:(jshort)alertDescription {
  OrgSpongycastleCryptoTlsRecordStream_checkTypeWithShort_withShort_(type, alertDescription);
}

+ (void)checkLengthWithInt:(jint)length
                   withInt:(jint)limit
                 withShort:(jshort)alertDescription {
  OrgSpongycastleCryptoTlsRecordStream_checkLengthWithInt_withInt_withShort_(length, limit, alertDescription);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsProtocolVersion;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 12, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 12, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 12, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 14, 12, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, 12, -1, -1, -1 },
    { NULL, "[B", 0x0, 15, 16, 12, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, 12, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsHandshakeHash;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsHandshakeHash;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 12, -1, -1, -1 },
    { NULL, "[B", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 19, 20, 12, -1, -1, -1 },
    { NULL, "V", 0xa, 21, 22, 12, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsProtocol:withJavaIoInputStream:withJavaIoOutputStream:);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoTlsTlsContext:);
  methods[2].selector = @selector(getPlaintextLimit);
  methods[3].selector = @selector(setPlaintextLimitWithInt:);
  methods[4].selector = @selector(getReadVersion);
  methods[5].selector = @selector(setReadVersionWithOrgSpongycastleCryptoTlsProtocolVersion:);
  methods[6].selector = @selector(setWriteVersionWithOrgSpongycastleCryptoTlsProtocolVersion:);
  methods[7].selector = @selector(setRestrictReadVersionWithBoolean:);
  methods[8].selector = @selector(setPendingConnectionStateWithOrgSpongycastleCryptoTlsTlsCompression:withOrgSpongycastleCryptoTlsTlsCipher:);
  methods[9].selector = @selector(sentWriteCipherSpec);
  methods[10].selector = @selector(receivedReadCipherSpec);
  methods[11].selector = @selector(finaliseHandshake);
  methods[12].selector = @selector(checkRecordHeaderWithByteArray:);
  methods[13].selector = @selector(readRecord);
  methods[14].selector = @selector(decodeAndVerifyWithShort:withJavaIoInputStream:withInt:);
  methods[15].selector = @selector(writeRecordWithShort:withByteArray:withInt:withInt:);
  methods[16].selector = @selector(notifyHelloComplete);
  methods[17].selector = @selector(getHandshakeHash);
  methods[18].selector = @selector(getHandshakeHashUpdater);
  methods[19].selector = @selector(prepareToFinish);
  methods[20].selector = @selector(safeClose);
  methods[21].selector = @selector(flush);
  methods[22].selector = @selector(getBufferContents);
  methods[23].selector = @selector(checkTypeWithShort:withShort:);
  methods[24].selector = @selector(checkLengthWithInt:withInt:withShort:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_PLAINTEXT_LIMIT", "I", .constantValue.asLong = 0, 0xa, -1, 23, -1, -1 },
    { "TLS_HEADER_SIZE", "I", .constantValue.asInt = OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_SIZE, 0x18, -1, -1, -1, -1 },
    { "TLS_HEADER_TYPE_OFFSET", "I", .constantValue.asInt = OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_TYPE_OFFSET, 0x18, -1, -1, -1, -1 },
    { "TLS_HEADER_VERSION_OFFSET", "I", .constantValue.asInt = OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_VERSION_OFFSET, 0x18, -1, -1, -1, -1 },
    { "TLS_HEADER_LENGTH_OFFSET", "I", .constantValue.asInt = OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_LENGTH_OFFSET, 0x18, -1, -1, -1, -1 },
    { "handler_", "LOrgSpongycastleCryptoTlsTlsProtocol;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "input_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "output_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pendingCompression_", "LOrgSpongycastleCryptoTlsTlsCompression;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readCompression_", "LOrgSpongycastleCryptoTlsTlsCompression;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeCompression_", "LOrgSpongycastleCryptoTlsTlsCompression;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pendingCipher_", "LOrgSpongycastleCryptoTlsTlsCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readCipher_", "LOrgSpongycastleCryptoTlsTlsCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeCipher_", "LOrgSpongycastleCryptoTlsTlsCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readSeqNo_", "LOrgSpongycastleCryptoTlsRecordStream_SequenceNumber;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeSeqNo_", "LOrgSpongycastleCryptoTlsRecordStream_SequenceNumber;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buffer_", "LJavaIoByteArrayOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "handshakeHash_", "LOrgSpongycastleCryptoTlsTlsHandshakeHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "handshakeHashUpdater_", "LOrgSpongycastleUtilIoSimpleOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readVersion_", "LOrgSpongycastleCryptoTlsProtocolVersion;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeVersion_", "LOrgSpongycastleCryptoTlsProtocolVersion;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "restrictReadVersion_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "plaintextLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "compressedLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ciphertextLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsTlsProtocol;LJavaIoInputStream;LJavaIoOutputStream;", "init", "LOrgSpongycastleCryptoTlsTlsContext;", "setPlaintextLimit", "I", "setReadVersion", "LOrgSpongycastleCryptoTlsProtocolVersion;", "setWriteVersion", "setRestrictReadVersion", "Z", "setPendingConnectionState", "LOrgSpongycastleCryptoTlsTlsCompression;LOrgSpongycastleCryptoTlsTlsCipher;", "LJavaIoIOException;", "checkRecordHeader", "[B", "decodeAndVerify", "SLJavaIoInputStream;I", "writeRecord", "S[BII", "checkType", "SS", "checkLength", "IIS", &OrgSpongycastleCryptoTlsRecordStream_DEFAULT_PLAINTEXT_LIMIT, "LOrgSpongycastleCryptoTlsRecordStream_SequenceNumber;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsRecordStream = { "RecordStream", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x0, 25, 25, -1, 24, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsRecordStream;
}

@end

void OrgSpongycastleCryptoTlsRecordStream_initWithOrgSpongycastleCryptoTlsTlsProtocol_withJavaIoInputStream_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsRecordStream *self, OrgSpongycastleCryptoTlsTlsProtocol *handler, JavaIoInputStream *input, JavaIoOutputStream *output) {
  NSObject_init(self);
  self->pendingCompression_ = nil;
  self->readCompression_ = nil;
  self->writeCompression_ = nil;
  self->pendingCipher_ = nil;
  self->readCipher_ = nil;
  self->writeCipher_ = nil;
  self->readSeqNo_ = new_OrgSpongycastleCryptoTlsRecordStream_SequenceNumber_init();
  self->writeSeqNo_ = new_OrgSpongycastleCryptoTlsRecordStream_SequenceNumber_init();
  self->buffer_ = new_JavaIoByteArrayOutputStream_init();
  self->handshakeHash_ = nil;
  self->handshakeHashUpdater_ = new_OrgSpongycastleCryptoTlsRecordStream_1_initWithOrgSpongycastleCryptoTlsRecordStream_(self);
  self->readVersion_ = nil;
  self->writeVersion_ = nil;
  self->restrictReadVersion_ = true;
  self->handler_ = handler;
  self->input_ = input;
  self->output_ = output;
  self->readCompression_ = new_OrgSpongycastleCryptoTlsTlsNullCompression_init();
  self->writeCompression_ = self->readCompression_;
}

OrgSpongycastleCryptoTlsRecordStream *new_OrgSpongycastleCryptoTlsRecordStream_initWithOrgSpongycastleCryptoTlsTlsProtocol_withJavaIoInputStream_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsTlsProtocol *handler, JavaIoInputStream *input, JavaIoOutputStream *output) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsRecordStream, initWithOrgSpongycastleCryptoTlsTlsProtocol_withJavaIoInputStream_withJavaIoOutputStream_, handler, input, output)
}

OrgSpongycastleCryptoTlsRecordStream *create_OrgSpongycastleCryptoTlsRecordStream_initWithOrgSpongycastleCryptoTlsTlsProtocol_withJavaIoInputStream_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsTlsProtocol *handler, JavaIoInputStream *input, JavaIoOutputStream *output) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsRecordStream, initWithOrgSpongycastleCryptoTlsTlsProtocol_withJavaIoInputStream_withJavaIoOutputStream_, handler, input, output)
}

IOSByteArray *OrgSpongycastleCryptoTlsRecordStream_getBufferContents(OrgSpongycastleCryptoTlsRecordStream *self) {
  IOSByteArray *contents = [((JavaIoByteArrayOutputStream *) nil_chk(self->buffer_)) toByteArray];
  [((JavaIoByteArrayOutputStream *) nil_chk(self->buffer_)) reset];
  return contents;
}

void OrgSpongycastleCryptoTlsRecordStream_checkTypeWithShort_withShort_(jshort type, jshort alertDescription) {
  OrgSpongycastleCryptoTlsRecordStream_initialize();
  switch (type) {
    case OrgSpongycastleCryptoTlsContentType_application_data:
    case OrgSpongycastleCryptoTlsContentType_alert:
    case OrgSpongycastleCryptoTlsContentType_change_cipher_spec:
    case OrgSpongycastleCryptoTlsContentType_handshake:
    break;
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(alertDescription);
  }
}

void OrgSpongycastleCryptoTlsRecordStream_checkLengthWithInt_withInt_withShort_(jint length, jint limit, jshort alertDescription) {
  OrgSpongycastleCryptoTlsRecordStream_initialize();
  if (length > limit) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(alertDescription);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsRecordStream)

@implementation OrgSpongycastleCryptoTlsRecordStream_1

- (instancetype)initWithOrgSpongycastleCryptoTlsRecordStream:(OrgSpongycastleCryptoTlsRecordStream *)outer$ {
  OrgSpongycastleCryptoTlsRecordStream_1_initWithOrgSpongycastleCryptoTlsRecordStream_(self, outer$);
  return self;
}

- (void)writeWithByteArray:(IOSByteArray *)buf
                   withInt:(jint)off
                   withInt:(jint)len {
  [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk(this$0_->handshakeHash_)) updateWithByteArray:buf withInt:off withInt:len];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoTlsRecordStream:);
  methods[1].selector = @selector(writeWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgSpongycastleCryptoTlsRecordStream;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "write", "[BII", "LJavaIoIOException;", "LOrgSpongycastleCryptoTlsRecordStream;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsRecordStream_1 = { "", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x8010, 2, 1, 3, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsRecordStream_1;
}

@end

void OrgSpongycastleCryptoTlsRecordStream_1_initWithOrgSpongycastleCryptoTlsRecordStream_(OrgSpongycastleCryptoTlsRecordStream_1 *self, OrgSpongycastleCryptoTlsRecordStream *outer$) {
  self->this$0_ = outer$;
  OrgSpongycastleUtilIoSimpleOutputStream_init(self);
}

OrgSpongycastleCryptoTlsRecordStream_1 *new_OrgSpongycastleCryptoTlsRecordStream_1_initWithOrgSpongycastleCryptoTlsRecordStream_(OrgSpongycastleCryptoTlsRecordStream *outer$) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsRecordStream_1, initWithOrgSpongycastleCryptoTlsRecordStream_, outer$)
}

OrgSpongycastleCryptoTlsRecordStream_1 *create_OrgSpongycastleCryptoTlsRecordStream_1_initWithOrgSpongycastleCryptoTlsRecordStream_(OrgSpongycastleCryptoTlsRecordStream *outer$) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsRecordStream_1, initWithOrgSpongycastleCryptoTlsRecordStream_, outer$)
}

@implementation OrgSpongycastleCryptoTlsRecordStream_SequenceNumber

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsRecordStream_SequenceNumber_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jlong)nextValueWithShort:(jshort)alertDescription {
  @synchronized(self) {
    if (exhausted_) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(alertDescription);
    }
    jlong result = value_;
    if (++value_ == 0) {
      exhausted_ = true;
    }
    return result;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x20, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(nextValueWithShort:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "exhausted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "nextValue", "S", "LOrgSpongycastleCryptoTlsTlsFatalAlert;", "LOrgSpongycastleCryptoTlsRecordStream;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsRecordStream_SequenceNumber = { "SequenceNumber", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0xa, 2, 2, 3, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsRecordStream_SequenceNumber;
}

@end

void OrgSpongycastleCryptoTlsRecordStream_SequenceNumber_init(OrgSpongycastleCryptoTlsRecordStream_SequenceNumber *self) {
  NSObject_init(self);
  self->value_ = 0LL;
  self->exhausted_ = false;
}

OrgSpongycastleCryptoTlsRecordStream_SequenceNumber *new_OrgSpongycastleCryptoTlsRecordStream_SequenceNumber_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsRecordStream_SequenceNumber, init)
}

OrgSpongycastleCryptoTlsRecordStream_SequenceNumber *create_OrgSpongycastleCryptoTlsRecordStream_SequenceNumber_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsRecordStream_SequenceNumber, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsRecordStream_SequenceNumber)
