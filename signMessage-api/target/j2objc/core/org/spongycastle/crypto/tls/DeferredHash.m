//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DeferredHash.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Short.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/tls/CombinedHash.h"
#include "org/spongycastle/crypto/tls/DeferredHash.h"
#include "org/spongycastle/crypto/tls/DigestInputBuffer.h"
#include "org/spongycastle/crypto/tls/HashAlgorithm.h"
#include "org/spongycastle/crypto/tls/PRFAlgorithm.h"
#include "org/spongycastle/crypto/tls/SecurityParameters.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsHandshakeHash.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/util/Shorts.h"

@interface OrgSpongycastleCryptoTlsDeferredHash () {
 @public
  OrgSpongycastleCryptoTlsDigestInputBuffer *buf_;
  JavaUtilHashtable *hashes_;
  JavaLangShort *prfHashAlgorithm_;
}

- (instancetype)initWithJavaLangShort:(JavaLangShort *)prfHashAlgorithm
      withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)prfHash;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDeferredHash, buf_, OrgSpongycastleCryptoTlsDigestInputBuffer *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDeferredHash, hashes_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDeferredHash, prfHashAlgorithm_, JavaLangShort *)

__attribute__((unused)) static void OrgSpongycastleCryptoTlsDeferredHash_initWithJavaLangShort_withOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoTlsDeferredHash *self, JavaLangShort *prfHashAlgorithm, id<OrgSpongycastleCryptoDigest> prfHash);

__attribute__((unused)) static OrgSpongycastleCryptoTlsDeferredHash *new_OrgSpongycastleCryptoTlsDeferredHash_initWithJavaLangShort_withOrgSpongycastleCryptoDigest_(JavaLangShort *prfHashAlgorithm, id<OrgSpongycastleCryptoDigest> prfHash) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleCryptoTlsDeferredHash *create_OrgSpongycastleCryptoTlsDeferredHash_initWithJavaLangShort_withOrgSpongycastleCryptoDigest_(JavaLangShort *prfHashAlgorithm, id<OrgSpongycastleCryptoDigest> prfHash);

@implementation OrgSpongycastleCryptoTlsDeferredHash

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsDeferredHash_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaLangShort:(JavaLangShort *)prfHashAlgorithm
      withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)prfHash {
  OrgSpongycastleCryptoTlsDeferredHash_initWithJavaLangShort_withOrgSpongycastleCryptoDigest_(self, prfHashAlgorithm, prfHash);
  return self;
}

- (void)init__WithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context {
  self->context_ = context;
}

- (id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)notifyPRFDetermined {
  jint prfAlgorithm = [((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecurityParameters])) getPrfAlgorithm];
  if (prfAlgorithm == OrgSpongycastleCryptoTlsPRFAlgorithm_tls_prf_legacy) {
    OrgSpongycastleCryptoTlsCombinedHash *legacyHash = new_OrgSpongycastleCryptoTlsCombinedHash_init();
    [legacyHash init__WithOrgSpongycastleCryptoTlsTlsContext:context_];
    [((OrgSpongycastleCryptoTlsDigestInputBuffer *) nil_chk(buf_)) updateDigestWithOrgSpongycastleCryptoDigest:legacyHash];
    return [legacyHash notifyPRFDetermined];
  }
  self->prfHashAlgorithm_ = OrgSpongycastleUtilShorts_valueOfWithShort_(OrgSpongycastleCryptoTlsTlsUtils_getHashAlgorithmForPRFAlgorithmWithInt_(prfAlgorithm));
  [self checkTrackingHashWithJavaLangShort:prfHashAlgorithm_];
  return self;
}

- (void)trackHashAlgorithmWithShort:(jshort)hashAlgorithm {
  if (buf_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Too late to track more hash algorithms");
  }
  [self checkTrackingHashWithJavaLangShort:OrgSpongycastleUtilShorts_valueOfWithShort_(hashAlgorithm)];
}

- (void)sealHashAlgorithms {
  [self checkStopBuffering];
}

- (id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)stopTracking {
  id<OrgSpongycastleCryptoDigest> prfHash = OrgSpongycastleCryptoTlsTlsUtils_cloneHashWithShort_withOrgSpongycastleCryptoDigest_([((JavaLangShort *) nil_chk(prfHashAlgorithm_)) shortValue], (id<OrgSpongycastleCryptoDigest>) cast_check([((JavaUtilHashtable *) nil_chk(hashes_)) getWithId:prfHashAlgorithm_], OrgSpongycastleCryptoDigest_class_()));
  if (buf_ != nil) {
    [buf_ updateDigestWithOrgSpongycastleCryptoDigest:prfHash];
  }
  OrgSpongycastleCryptoTlsDeferredHash *result = new_OrgSpongycastleCryptoTlsDeferredHash_initWithJavaLangShort_withOrgSpongycastleCryptoDigest_(prfHashAlgorithm_, prfHash);
  [result init__WithOrgSpongycastleCryptoTlsTlsContext:context_];
  return result;
}

- (id<OrgSpongycastleCryptoDigest>)forkPRFHash {
  [self checkStopBuffering];
  if (buf_ != nil) {
    id<OrgSpongycastleCryptoDigest> prfHash = OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_([((JavaLangShort *) nil_chk(prfHashAlgorithm_)) shortValue]);
    [((OrgSpongycastleCryptoTlsDigestInputBuffer *) nil_chk(buf_)) updateDigestWithOrgSpongycastleCryptoDigest:prfHash];
    return prfHash;
  }
  return OrgSpongycastleCryptoTlsTlsUtils_cloneHashWithShort_withOrgSpongycastleCryptoDigest_([((JavaLangShort *) nil_chk(prfHashAlgorithm_)) shortValue], (id<OrgSpongycastleCryptoDigest>) cast_check([((JavaUtilHashtable *) nil_chk(hashes_)) getWithId:prfHashAlgorithm_], OrgSpongycastleCryptoDigest_class_()));
}

- (IOSByteArray *)getFinalHashWithShort:(jshort)hashAlgorithm {
  id<OrgSpongycastleCryptoDigest> d = (id<OrgSpongycastleCryptoDigest>) cast_check([((JavaUtilHashtable *) nil_chk(hashes_)) getWithId:OrgSpongycastleUtilShorts_valueOfWithShort_(hashAlgorithm)], OrgSpongycastleCryptoDigest_class_());
  if (d == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"HashAlgorithm.", OrgSpongycastleCryptoTlsHashAlgorithm_getTextWithShort_(hashAlgorithm), @" is not being tracked"));
  }
  d = OrgSpongycastleCryptoTlsTlsUtils_cloneHashWithShort_withOrgSpongycastleCryptoDigest_(hashAlgorithm, d);
  if (buf_ != nil) {
    [buf_ updateDigestWithOrgSpongycastleCryptoDigest:d];
  }
  IOSByteArray *bs = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(d)) getDigestSize]];
  [d doFinalWithByteArray:bs withInt:0];
  return bs;
}

- (NSString *)getAlgorithmName {
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"Use fork() to get a definite Digest");
}

- (jint)getDigestSize {
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"Use fork() to get a definite Digest");
}

- (void)updateWithByte:(jbyte)input {
  if (buf_ != nil) {
    [buf_ writeWithInt:input];
    return;
  }
  id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(hashes_)) elements];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    id<OrgSpongycastleCryptoDigest> hash_ = (id<OrgSpongycastleCryptoDigest>) cast_check([e nextElement], OrgSpongycastleCryptoDigest_class_());
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(hash_)) updateWithByte:input];
  }
}

- (void)updateWithByteArray:(IOSByteArray *)input
                    withInt:(jint)inOff
                    withInt:(jint)len {
  if (buf_ != nil) {
    [buf_ writeWithByteArray:input withInt:inOff withInt:len];
    return;
  }
  id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(hashes_)) elements];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    id<OrgSpongycastleCryptoDigest> hash_ = (id<OrgSpongycastleCryptoDigest>) cast_check([e nextElement], OrgSpongycastleCryptoDigest_class_());
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(hash_)) updateWithByteArray:input withInt:inOff withInt:len];
  }
}

- (jint)doFinalWithByteArray:(IOSByteArray *)output
                     withInt:(jint)outOff {
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"Use fork() to get a definite Digest");
}

- (void)reset {
  if (buf_ != nil) {
    [buf_ reset];
    return;
  }
  id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(hashes_)) elements];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    id<OrgSpongycastleCryptoDigest> hash_ = (id<OrgSpongycastleCryptoDigest>) cast_check([e nextElement], OrgSpongycastleCryptoDigest_class_());
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(hash_)) reset];
  }
}

- (void)checkStopBuffering {
  if (buf_ != nil && [((JavaUtilHashtable *) nil_chk(hashes_)) size] <= OrgSpongycastleCryptoTlsDeferredHash_BUFFERING_HASH_LIMIT) {
    id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(hashes_)) elements];
    while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
      id<OrgSpongycastleCryptoDigest> hash_ = (id<OrgSpongycastleCryptoDigest>) cast_check([e nextElement], OrgSpongycastleCryptoDigest_class_());
      [((OrgSpongycastleCryptoTlsDigestInputBuffer *) nil_chk(buf_)) updateDigestWithOrgSpongycastleCryptoDigest:hash_];
    }
    self->buf_ = nil;
  }
}

- (void)checkTrackingHashWithJavaLangShort:(JavaLangShort *)hashAlgorithm {
  if (![((JavaUtilHashtable *) nil_chk(hashes_)) containsKeyWithId:hashAlgorithm]) {
    id<OrgSpongycastleCryptoDigest> hash_ = OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_([((JavaLangShort *) nil_chk(hashAlgorithm)) shortValue]);
    (void) [((JavaUtilHashtable *) nil_chk(hashes_)) putWithId:hashAlgorithm withId:hash_];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsHandshakeHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsHandshakeHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoDigest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaLangShort:withOrgSpongycastleCryptoDigest:);
  methods[2].selector = @selector(init__WithOrgSpongycastleCryptoTlsTlsContext:);
  methods[3].selector = @selector(notifyPRFDetermined);
  methods[4].selector = @selector(trackHashAlgorithmWithShort:);
  methods[5].selector = @selector(sealHashAlgorithms);
  methods[6].selector = @selector(stopTracking);
  methods[7].selector = @selector(forkPRFHash);
  methods[8].selector = @selector(getFinalHashWithShort:);
  methods[9].selector = @selector(getAlgorithmName);
  methods[10].selector = @selector(getDigestSize);
  methods[11].selector = @selector(updateWithByte:);
  methods[12].selector = @selector(updateWithByteArray:withInt:withInt:);
  methods[13].selector = @selector(doFinalWithByteArray:withInt:);
  methods[14].selector = @selector(reset);
  methods[15].selector = @selector(checkStopBuffering);
  methods[16].selector = @selector(checkTrackingHashWithJavaLangShort:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BUFFERING_HASH_LIMIT", "I", .constantValue.asInt = OrgSpongycastleCryptoTlsDeferredHash_BUFFERING_HASH_LIMIT, 0x1c, -1, -1, -1, -1 },
    { "context_", "LOrgSpongycastleCryptoTlsTlsContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "buf_", "LOrgSpongycastleCryptoTlsDigestInputBuffer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashes_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prfHashAlgorithm_", "LJavaLangShort;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangShort;LOrgSpongycastleCryptoDigest;", "init", "LOrgSpongycastleCryptoTlsTlsContext;", "trackHashAlgorithm", "S", "getFinalHash", "update", "B", "[BII", "doFinal", "[BI", "checkTrackingHash", "LJavaLangShort;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDeferredHash = { "DeferredHash", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x0, 17, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDeferredHash;
}

@end

void OrgSpongycastleCryptoTlsDeferredHash_init(OrgSpongycastleCryptoTlsDeferredHash *self) {
  NSObject_init(self);
  self->buf_ = new_OrgSpongycastleCryptoTlsDigestInputBuffer_init();
  self->hashes_ = new_JavaUtilHashtable_init();
  self->prfHashAlgorithm_ = nil;
}

OrgSpongycastleCryptoTlsDeferredHash *new_OrgSpongycastleCryptoTlsDeferredHash_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDeferredHash, init)
}

OrgSpongycastleCryptoTlsDeferredHash *create_OrgSpongycastleCryptoTlsDeferredHash_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDeferredHash, init)
}

void OrgSpongycastleCryptoTlsDeferredHash_initWithJavaLangShort_withOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoTlsDeferredHash *self, JavaLangShort *prfHashAlgorithm, id<OrgSpongycastleCryptoDigest> prfHash) {
  NSObject_init(self);
  self->buf_ = nil;
  self->hashes_ = new_JavaUtilHashtable_init();
  self->prfHashAlgorithm_ = prfHashAlgorithm;
  (void) [self->hashes_ putWithId:prfHashAlgorithm withId:prfHash];
}

OrgSpongycastleCryptoTlsDeferredHash *new_OrgSpongycastleCryptoTlsDeferredHash_initWithJavaLangShort_withOrgSpongycastleCryptoDigest_(JavaLangShort *prfHashAlgorithm, id<OrgSpongycastleCryptoDigest> prfHash) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDeferredHash, initWithJavaLangShort_withOrgSpongycastleCryptoDigest_, prfHashAlgorithm, prfHash)
}

OrgSpongycastleCryptoTlsDeferredHash *create_OrgSpongycastleCryptoTlsDeferredHash_initWithJavaLangShort_withOrgSpongycastleCryptoDigest_(JavaLangShort *prfHashAlgorithm, id<OrgSpongycastleCryptoDigest> prfHash) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDeferredHash, initWithJavaLangShort_withOrgSpongycastleCryptoDigest_, prfHashAlgorithm, prfHash)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDeferredHash)
