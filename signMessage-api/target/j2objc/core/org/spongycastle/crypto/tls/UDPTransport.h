//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/UDPTransport.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsUDPTransport")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsUDPTransport
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsUDPTransport 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsUDPTransport 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsUDPTransport

#if !defined (OrgSpongycastleCryptoTlsUDPTransport_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsUDPTransport || defined(INCLUDE_OrgSpongycastleCryptoTlsUDPTransport))
#define OrgSpongycastleCryptoTlsUDPTransport_

#define RESTRICT_OrgSpongycastleCryptoTlsDatagramTransport 1
#define INCLUDE_OrgSpongycastleCryptoTlsDatagramTransport 1
#include "org/spongycastle/crypto/tls/DatagramTransport.h"

@class IOSByteArray;
@class JavaNetDatagramSocket;

@interface OrgSpongycastleCryptoTlsUDPTransport : NSObject < OrgSpongycastleCryptoTlsDatagramTransport > {
 @public
  JavaNetDatagramSocket *socket_;
  jint receiveLimit_;
  jint sendLimit_;
}

#pragma mark Public

- (instancetype)initWithJavaNetDatagramSocket:(JavaNetDatagramSocket *)socket
                                      withInt:(jint)mtu;

- (void)close;

- (jint)getReceiveLimit;

- (jint)getSendLimit;

- (jint)receiveWithByteArray:(IOSByteArray *)buf
                     withInt:(jint)off
                     withInt:(jint)len
                     withInt:(jint)waitMillis;

- (void)sendWithByteArray:(IOSByteArray *)buf
                  withInt:(jint)off
                  withInt:(jint)len;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsUDPTransport)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsUDPTransport, socket_, JavaNetDatagramSocket *)

inline jint OrgSpongycastleCryptoTlsUDPTransport_get_MIN_IP_OVERHEAD(void);
#define OrgSpongycastleCryptoTlsUDPTransport_MIN_IP_OVERHEAD 20
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsUDPTransport, MIN_IP_OVERHEAD, jint)

inline jint OrgSpongycastleCryptoTlsUDPTransport_get_MAX_IP_OVERHEAD(void);
#define OrgSpongycastleCryptoTlsUDPTransport_MAX_IP_OVERHEAD 84
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsUDPTransport, MAX_IP_OVERHEAD, jint)

inline jint OrgSpongycastleCryptoTlsUDPTransport_get_UDP_OVERHEAD(void);
#define OrgSpongycastleCryptoTlsUDPTransport_UDP_OVERHEAD 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsUDPTransport, UDP_OVERHEAD, jint)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsUDPTransport_initWithJavaNetDatagramSocket_withInt_(OrgSpongycastleCryptoTlsUDPTransport *self, JavaNetDatagramSocket *socket, jint mtu);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsUDPTransport *new_OrgSpongycastleCryptoTlsUDPTransport_initWithJavaNetDatagramSocket_withInt_(JavaNetDatagramSocket *socket, jint mtu) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsUDPTransport *create_OrgSpongycastleCryptoTlsUDPTransport_initWithJavaNetDatagramSocket_withInt_(JavaNetDatagramSocket *socket, jint mtu);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsUDPTransport)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsUDPTransport")
