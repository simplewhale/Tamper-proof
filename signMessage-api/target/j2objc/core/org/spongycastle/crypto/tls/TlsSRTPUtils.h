//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsSRTPUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsSRTPUtils")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsTlsSRTPUtils
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsSRTPUtils 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsSRTPUtils 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsTlsSRTPUtils

#if !defined (OrgSpongycastleCryptoTlsTlsSRTPUtils_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsSRTPUtils || defined(INCLUDE_OrgSpongycastleCryptoTlsTlsSRTPUtils))
#define OrgSpongycastleCryptoTlsTlsSRTPUtils_

@class IOSByteArray;
@class JavaLangInteger;
@class JavaUtilHashtable;
@class OrgSpongycastleCryptoTlsUseSRTPData;

@interface OrgSpongycastleCryptoTlsTlsSRTPUtils : NSObject

#pragma mark Public

- (instancetype)init;

+ (void)addUseSRTPExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
         withOrgSpongycastleCryptoTlsUseSRTPData:(OrgSpongycastleCryptoTlsUseSRTPData *)useSRTPData;

+ (IOSByteArray *)createUseSRTPExtensionWithOrgSpongycastleCryptoTlsUseSRTPData:(OrgSpongycastleCryptoTlsUseSRTPData *)useSRTPData;

+ (OrgSpongycastleCryptoTlsUseSRTPData *)getUseSRTPExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (OrgSpongycastleCryptoTlsUseSRTPData *)readUseSRTPExtensionWithByteArray:(IOSByteArray *)extensionData;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleCryptoTlsTlsSRTPUtils)

inline JavaLangInteger *OrgSpongycastleCryptoTlsTlsSRTPUtils_get_EXT_use_srtp(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *OrgSpongycastleCryptoTlsTlsSRTPUtils_EXT_use_srtp;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsSRTPUtils, EXT_use_srtp, JavaLangInteger *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsSRTPUtils_init(OrgSpongycastleCryptoTlsTlsSRTPUtils *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsSRTPUtils *new_OrgSpongycastleCryptoTlsTlsSRTPUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsSRTPUtils *create_OrgSpongycastleCryptoTlsTlsSRTPUtils_init(void);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsSRTPUtils_addUseSRTPExtensionWithJavaUtilHashtable_withOrgSpongycastleCryptoTlsUseSRTPData_(JavaUtilHashtable *extensions, OrgSpongycastleCryptoTlsUseSRTPData *useSRTPData);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsUseSRTPData *OrgSpongycastleCryptoTlsTlsSRTPUtils_getUseSRTPExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsSRTPUtils_createUseSRTPExtensionWithOrgSpongycastleCryptoTlsUseSRTPData_(OrgSpongycastleCryptoTlsUseSRTPData *useSRTPData);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsUseSRTPData *OrgSpongycastleCryptoTlsTlsSRTPUtils_readUseSRTPExtensionWithByteArray_(IOSByteArray *extensionData);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsTlsSRTPUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsSRTPUtils")
