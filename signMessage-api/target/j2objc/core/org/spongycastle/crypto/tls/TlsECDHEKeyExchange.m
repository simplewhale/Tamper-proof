//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsECDHEKeyExchange.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/security/SecureRandom.h"
#include "java/util/Vector.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/Signer.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/Certificate.h"
#include "org/spongycastle/crypto/tls/CertificateRequest.h"
#include "org/spongycastle/crypto/tls/ClientCertificateType.h"
#include "org/spongycastle/crypto/tls/DigestInputBuffer.h"
#include "org/spongycastle/crypto/tls/DigitallySigned.h"
#include "org/spongycastle/crypto/tls/SecurityParameters.h"
#include "org/spongycastle/crypto/tls/SignatureAndHashAlgorithm.h"
#include "org/spongycastle/crypto/tls/SignerInputBuffer.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsCredentials.h"
#include "org/spongycastle/crypto/tls/TlsECCUtils.h"
#include "org/spongycastle/crypto/tls/TlsECDHEKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsECDHKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsSigner.h"
#include "org/spongycastle/crypto/tls/TlsSignerCredentials.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/util/io/TeeInputStream.h"

@implementation OrgSpongycastleCryptoTlsTlsECDHEKeyExchange

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
               withIntArray:(IOSIntArray *)namedCurves
             withShortArray:(IOSShortArray *)clientECPointFormats
             withShortArray:(IOSShortArray *)serverECPointFormats {
  OrgSpongycastleCryptoTlsTlsECDHEKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(self, keyExchange, supportedSignatureAlgorithms, namedCurves, clientECPointFormats, serverECPointFormats);
  return self;
}

- (void)processServerCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:(id<OrgSpongycastleCryptoTlsTlsCredentials>)serverCredentials {
  if (!([OrgSpongycastleCryptoTlsTlsSignerCredentials_class_() isInstance:serverCredentials])) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  [self processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:[((id<OrgSpongycastleCryptoTlsTlsCredentials>) nil_chk(serverCredentials)) getCertificate]];
  self->serverCredentials_ = (id<OrgSpongycastleCryptoTlsTlsSignerCredentials>) cast_check(serverCredentials, OrgSpongycastleCryptoTlsTlsSignerCredentials_class_());
}

- (IOSByteArray *)generateServerKeyExchange {
  OrgSpongycastleCryptoTlsDigestInputBuffer *buf = new_OrgSpongycastleCryptoTlsDigestInputBuffer_init();
  self->ecAgreePrivateKey_ = OrgSpongycastleCryptoTlsTlsECCUtils_generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom_withIntArray_withShortArray_withJavaIoOutputStream_([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecureRandom], namedCurves_, clientECPointFormats_, buf);
  OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm = OrgSpongycastleCryptoTlsTlsUtils_getSignatureAndHashAlgorithmWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsSignerCredentials_(context_, serverCredentials_);
  id<OrgSpongycastleCryptoDigest> d = OrgSpongycastleCryptoTlsTlsUtils_createHashWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(signatureAndHashAlgorithm);
  OrgSpongycastleCryptoTlsSecurityParameters *securityParameters = [((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecurityParameters];
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(d)) updateWithByteArray:((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters))->clientRandom_ withInt:0 withInt:((IOSByteArray *) nil_chk(securityParameters->clientRandom_))->size_];
  [d updateWithByteArray:securityParameters->serverRandom_ withInt:0 withInt:((IOSByteArray *) nil_chk(securityParameters->serverRandom_))->size_];
  [buf updateDigestWithOrgSpongycastleCryptoDigest:d];
  IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[d getDigestSize]];
  [d doFinalWithByteArray:hash_ withInt:0];
  IOSByteArray *signature = [((id<OrgSpongycastleCryptoTlsTlsSignerCredentials>) nil_chk(serverCredentials_)) generateCertificateSignatureWithByteArray:hash_];
  OrgSpongycastleCryptoTlsDigitallySigned *signed_params = new_OrgSpongycastleCryptoTlsDigitallySigned_initWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_withByteArray_(signatureAndHashAlgorithm, signature);
  [signed_params encodeWithJavaIoOutputStream:buf];
  return [buf toByteArray];
}

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input {
  OrgSpongycastleCryptoTlsSecurityParameters *securityParameters = [((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecurityParameters];
  OrgSpongycastleCryptoTlsSignerInputBuffer *buf = new_OrgSpongycastleCryptoTlsSignerInputBuffer_init();
  JavaIoInputStream *teeIn = new_OrgSpongycastleUtilIoTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_(input, buf);
  OrgSpongycastleCryptoParamsECDomainParameters *curve_params = OrgSpongycastleCryptoTlsTlsECCUtils_readECParametersWithIntArray_withShortArray_withJavaIoInputStream_(namedCurves_, clientECPointFormats_, teeIn);
  IOSByteArray *point = OrgSpongycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(teeIn);
  OrgSpongycastleCryptoTlsDigitallySigned *signed_params = [self parseSignatureWithJavaIoInputStream:input];
  id<OrgSpongycastleCryptoSigner> signer = [self initVerifyerWithOrgSpongycastleCryptoTlsTlsSigner:tlsSigner_ withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:[((OrgSpongycastleCryptoTlsDigitallySigned *) nil_chk(signed_params)) getAlgorithm] withOrgSpongycastleCryptoTlsSecurityParameters:securityParameters];
  [buf updateSignerWithOrgSpongycastleCryptoSigner:signer];
  if (![((id<OrgSpongycastleCryptoSigner>) nil_chk(signer)) verifySignatureWithByteArray:[signed_params getSignature]]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decrypt_error);
  }
  self->ecAgreePublicKey_ = OrgSpongycastleCryptoTlsTlsECCUtils_validateECPublicKeyWithOrgSpongycastleCryptoParamsECPublicKeyParameters_(OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECPublicKeyWithShortArray_withOrgSpongycastleCryptoParamsECDomainParameters_withByteArray_(clientECPointFormats_, curve_params, point));
}

- (void)validateCertificateRequestWithOrgSpongycastleCryptoTlsCertificateRequest:(OrgSpongycastleCryptoTlsCertificateRequest *)certificateRequest {
  IOSShortArray *types = [((OrgSpongycastleCryptoTlsCertificateRequest *) nil_chk(certificateRequest)) getCertificateTypes];
  for (jint i = 0; i < ((IOSShortArray *) nil_chk(types))->size_; ++i) {
    switch (IOSShortArray_Get(types, i)) {
      case OrgSpongycastleCryptoTlsClientCertificateType_rsa_sign:
      case OrgSpongycastleCryptoTlsClientCertificateType_dss_sign:
      case OrgSpongycastleCryptoTlsClientCertificateType_ecdsa_sign:
      break;
      default:
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
  }
}

- (void)processClientCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:(id<OrgSpongycastleCryptoTlsTlsCredentials>)clientCredentials {
  if ([OrgSpongycastleCryptoTlsTlsSignerCredentials_class_() isInstance:clientCredentials]) {
  }
  else {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

- (id<OrgSpongycastleCryptoSigner>)initVerifyerWithOrgSpongycastleCryptoTlsTlsSigner:(id<OrgSpongycastleCryptoTlsTlsSigner>)tlsSigner
                               withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                      withOrgSpongycastleCryptoTlsSecurityParameters:(OrgSpongycastleCryptoTlsSecurityParameters *)securityParameters {
  id<OrgSpongycastleCryptoSigner> signer = [((id<OrgSpongycastleCryptoTlsTlsSigner>) nil_chk(tlsSigner)) createVerifyerWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:algorithm withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:self->serverPublicKey_];
  [((id<OrgSpongycastleCryptoSigner>) nil_chk(signer)) updateWithByteArray:((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters))->clientRandom_ withInt:0 withInt:((IOSByteArray *) nil_chk(securityParameters->clientRandom_))->size_];
  [signer updateWithByteArray:securityParameters->serverRandom_ withInt:0 withInt:((IOSByteArray *) nil_chk(securityParameters->serverRandom_))->size_];
  return signer;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, 3, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoSigner;", 0x4, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withJavaUtilVector:withIntArray:withShortArray:withShortArray:);
  methods[1].selector = @selector(processServerCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:);
  methods[2].selector = @selector(generateServerKeyExchange);
  methods[3].selector = @selector(processServerKeyExchangeWithJavaIoInputStream:);
  methods[4].selector = @selector(validateCertificateRequestWithOrgSpongycastleCryptoTlsCertificateRequest:);
  methods[5].selector = @selector(processClientCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:);
  methods[6].selector = @selector(initVerifyerWithOrgSpongycastleCryptoTlsTlsSigner:withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:withOrgSpongycastleCryptoTlsSecurityParameters:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serverCredentials_", "LOrgSpongycastleCryptoTlsTlsSignerCredentials;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILJavaUtilVector;[I[S[S", "processServerCredentials", "LOrgSpongycastleCryptoTlsTlsCredentials;", "LJavaIoIOException;", "processServerKeyExchange", "LJavaIoInputStream;", "validateCertificateRequest", "LOrgSpongycastleCryptoTlsCertificateRequest;", "processClientCredentials", "initVerifyer", "LOrgSpongycastleCryptoTlsTlsSigner;LOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;LOrgSpongycastleCryptoTlsSecurityParameters;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsTlsECDHEKeyExchange = { "TlsECDHEKeyExchange", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsTlsECDHEKeyExchange;
}

@end

void OrgSpongycastleCryptoTlsTlsECDHEKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(OrgSpongycastleCryptoTlsTlsECDHEKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats) {
  OrgSpongycastleCryptoTlsTlsECDHKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(self, keyExchange, supportedSignatureAlgorithms, namedCurves, clientECPointFormats, serverECPointFormats);
  self->serverCredentials_ = nil;
}

OrgSpongycastleCryptoTlsTlsECDHEKeyExchange *new_OrgSpongycastleCryptoTlsTlsECDHEKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsTlsECDHEKeyExchange, initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_, keyExchange, supportedSignatureAlgorithms, namedCurves, clientECPointFormats, serverECPointFormats)
}

OrgSpongycastleCryptoTlsTlsECDHEKeyExchange *create_OrgSpongycastleCryptoTlsTlsECDHEKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsTlsECDHEKeyExchange, initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_, keyExchange, supportedSignatureAlgorithms, namedCurves, clientECPointFormats, serverECPointFormats)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsTlsECDHEKeyExchange)
