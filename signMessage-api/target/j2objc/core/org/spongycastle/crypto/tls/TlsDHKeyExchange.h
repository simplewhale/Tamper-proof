//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsDHKeyExchange.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsDHKeyExchange")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsTlsDHKeyExchange
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsDHKeyExchange 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsDHKeyExchange 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsTlsDHKeyExchange

#if !defined (OrgSpongycastleCryptoTlsTlsDHKeyExchange_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsDHKeyExchange || defined(INCLUDE_OrgSpongycastleCryptoTlsTlsDHKeyExchange))
#define OrgSpongycastleCryptoTlsTlsDHKeyExchange_

#define RESTRICT_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange 1
#define INCLUDE_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange 1
#include "org/spongycastle/crypto/tls/AbstractTlsKeyExchange.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaUtilVector;
@class OrgSpongycastleCryptoParamsAsymmetricKeyParameter;
@class OrgSpongycastleCryptoParamsDHParameters;
@class OrgSpongycastleCryptoParamsDHPrivateKeyParameters;
@class OrgSpongycastleCryptoParamsDHPublicKeyParameters;
@class OrgSpongycastleCryptoTlsCertificate;
@class OrgSpongycastleCryptoTlsCertificateRequest;
@protocol OrgSpongycastleCryptoTlsTlsAgreementCredentials;
@protocol OrgSpongycastleCryptoTlsTlsContext;
@protocol OrgSpongycastleCryptoTlsTlsCredentials;
@protocol OrgSpongycastleCryptoTlsTlsSigner;

@interface OrgSpongycastleCryptoTlsTlsDHKeyExchange : OrgSpongycastleCryptoTlsAbstractTlsKeyExchange {
 @public
  id<OrgSpongycastleCryptoTlsTlsSigner> tlsSigner_;
  OrgSpongycastleCryptoParamsDHParameters *dhParameters_;
  OrgSpongycastleCryptoParamsAsymmetricKeyParameter *serverPublicKey_;
  id<OrgSpongycastleCryptoTlsTlsAgreementCredentials> agreementCredentials_;
  OrgSpongycastleCryptoParamsDHPrivateKeyParameters *dhAgreePrivateKey_;
  OrgSpongycastleCryptoParamsDHPublicKeyParameters *dhAgreePublicKey_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
withOrgSpongycastleCryptoParamsDHParameters:(OrgSpongycastleCryptoParamsDHParameters *)dhParameters;

- (void)generateClientKeyExchangeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (IOSByteArray *)generatePremasterSecret;

- (IOSByteArray *)generateServerKeyExchange;

- (void)init__WithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context OBJC_METHOD_FAMILY_NONE;

- (void)processClientCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)clientCertificate;

- (void)processClientCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:(id<OrgSpongycastleCryptoTlsTlsCredentials>)clientCredentials;

- (void)processClientKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (void)processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)serverCertificate;

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (jboolean)requiresServerKeyExchange;

- (void)skipServerCredentials;

- (void)validateCertificateRequestWithOrgSpongycastleCryptoTlsCertificateRequest:(OrgSpongycastleCryptoTlsCertificateRequest *)certificateRequest;

#pragma mark Protected

- (jint)getMinimumPrimeBits;

- (OrgSpongycastleCryptoParamsDHParameters *)validateDHParametersWithOrgSpongycastleCryptoParamsDHParameters:(OrgSpongycastleCryptoParamsDHParameters *)params;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithInt:(jint)arg0
         withJavaUtilVector:(JavaUtilVector *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsTlsDHKeyExchange)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsDHKeyExchange, tlsSigner_, id<OrgSpongycastleCryptoTlsTlsSigner>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsDHKeyExchange, dhParameters_, OrgSpongycastleCryptoParamsDHParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsDHKeyExchange, serverPublicKey_, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsDHKeyExchange, agreementCredentials_, id<OrgSpongycastleCryptoTlsTlsAgreementCredentials>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsDHKeyExchange, dhAgreePrivateKey_, OrgSpongycastleCryptoParamsDHPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsDHKeyExchange, dhAgreePublicKey_, OrgSpongycastleCryptoParamsDHPublicKeyParameters *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoParamsDHParameters_(OrgSpongycastleCryptoTlsTlsDHKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, OrgSpongycastleCryptoParamsDHParameters *dhParameters);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsDHKeyExchange *new_OrgSpongycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, OrgSpongycastleCryptoParamsDHParameters *dhParameters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsDHKeyExchange *create_OrgSpongycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, OrgSpongycastleCryptoParamsDHParameters *dhParameters);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsTlsDHKeyExchange)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsDHKeyExchange")
