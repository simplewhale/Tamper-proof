//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/ByteQueue.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/tls/ByteQueue.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

@interface OrgSpongycastleCryptoTlsByteQueue () {
 @public
  IOSByteArray *databuf_;
  jint skipped_;
  jint available_;
  jboolean readOnlyBuf_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsByteQueue, databuf_, IOSByteArray *)

inline jint OrgSpongycastleCryptoTlsByteQueue_get_DEFAULT_CAPACITY(void);
#define OrgSpongycastleCryptoTlsByteQueue_DEFAULT_CAPACITY 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsByteQueue, DEFAULT_CAPACITY, jint)

@implementation OrgSpongycastleCryptoTlsByteQueue

+ (jint)nextTwoPowWithInt:(jint)i {
  return OrgSpongycastleCryptoTlsByteQueue_nextTwoPowWithInt_(i);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsByteQueue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)capacity {
  OrgSpongycastleCryptoTlsByteQueue_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)buf
                          withInt:(jint)off
                          withInt:(jint)len {
  OrgSpongycastleCryptoTlsByteQueue_initWithByteArray_withInt_withInt_(self, buf, off, len);
  return self;
}

- (void)addDataWithByteArray:(IOSByteArray *)buf
                     withInt:(jint)off
                     withInt:(jint)len {
  if (readOnlyBuf_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot add data to read-only buffer");
  }
  if ((skipped_ + available_ + len) > ((IOSByteArray *) nil_chk(databuf_))->size_) {
    jint desiredSize = OrgSpongycastleCryptoTlsByteQueue_nextTwoPowWithInt_(available_ + len);
    if (desiredSize > ((IOSByteArray *) nil_chk(databuf_))->size_) {
      IOSByteArray *tmp = [IOSByteArray newArrayWithLength:desiredSize];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(databuf_, skipped_, tmp, 0, available_);
      databuf_ = tmp;
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(databuf_, skipped_, databuf_, 0, available_);
    }
    skipped_ = 0;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, off, databuf_, skipped_ + available_, len);
  available_ += len;
}

- (jint)available {
  return available_;
}

- (void)copyToWithJavaIoOutputStream:(JavaIoOutputStream *)output
                             withInt:(jint)length {
  if (length > available_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"Cannot copy ", length, @" bytes, only got ", available_));
  }
  [((JavaIoOutputStream *) nil_chk(output)) writeWithByteArray:databuf_ withInt:skipped_ withInt:length];
}

- (void)readWithByteArray:(IOSByteArray *)buf
                  withInt:(jint)offset
                  withInt:(jint)len
                  withInt:(jint)skip {
  if ((((IOSByteArray *) nil_chk(buf))->size_ - offset) < len) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$", @"Buffer size of ", buf->size_, @" is too small for a read of ", len, @" bytes"));
  }
  if ((available_ - skip) < len) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Not enough data to read");
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(databuf_, skipped_ + skip, buf, offset, len);
}

- (JavaIoByteArrayInputStream *)readFromWithInt:(jint)length {
  if (length > available_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"Cannot read ", length, @" bytes, only got ", available_));
  }
  jint position = skipped_;
  available_ -= length;
  skipped_ += length;
  return new_JavaIoByteArrayInputStream_initWithByteArray_withInt_withInt_(databuf_, position, length);
}

- (void)removeDataWithInt:(jint)i {
  if (i > available_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"Cannot remove ", i, @" bytes, only got ", available_));
  }
  available_ -= i;
  skipped_ += i;
}

- (void)removeDataWithByteArray:(IOSByteArray *)buf
                        withInt:(jint)off
                        withInt:(jint)len
                        withInt:(jint)skip {
  [self readWithByteArray:buf withInt:off withInt:len withInt:skip];
  [self removeDataWithInt:skip + len];
}

- (IOSByteArray *)removeDataWithInt:(jint)len
                            withInt:(jint)skip {
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:len];
  [self removeDataWithByteArray:buf withInt:0 withInt:len withInt:skip];
  return buf;
}

- (void)shrink {
  if (available_ == 0) {
    databuf_ = JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES);
    skipped_ = 0;
  }
  else {
    jint desiredSize = OrgSpongycastleCryptoTlsByteQueue_nextTwoPowWithInt_(available_);
    if (desiredSize < ((IOSByteArray *) nil_chk(databuf_))->size_) {
      IOSByteArray *tmp = [IOSByteArray newArrayWithLength:desiredSize];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(databuf_, skipped_, tmp, 0, available_);
      databuf_ = tmp;
      skipped_ = 0;
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaIoByteArrayInputStream;", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(nextTwoPowWithInt:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(initWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(addDataWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(available);
  methods[6].selector = @selector(copyToWithJavaIoOutputStream:withInt:);
  methods[7].selector = @selector(readWithByteArray:withInt:withInt:withInt:);
  methods[8].selector = @selector(readFromWithInt:);
  methods[9].selector = @selector(removeDataWithInt:);
  methods[10].selector = @selector(removeDataWithByteArray:withInt:withInt:withInt:);
  methods[11].selector = @selector(removeDataWithInt:withInt:);
  methods[12].selector = @selector(shrink);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_CAPACITY", "I", .constantValue.asInt = OrgSpongycastleCryptoTlsByteQueue_DEFAULT_CAPACITY, 0x1a, -1, -1, -1, -1 },
    { "databuf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipped_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "available_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readOnlyBuf_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "nextTwoPow", "I", "[BII", "addData", "copyTo", "LJavaIoOutputStream;I", "LJavaIoIOException;", "read", "[BIII", "readFrom", "removeData", "II" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsByteQueue = { "ByteQueue", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 13, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsByteQueue;
}

@end

jint OrgSpongycastleCryptoTlsByteQueue_nextTwoPowWithInt_(jint i) {
  OrgSpongycastleCryptoTlsByteQueue_initialize();
  i |= (JreRShift32(i, 1));
  i |= (JreRShift32(i, 2));
  i |= (JreRShift32(i, 4));
  i |= (JreRShift32(i, 8));
  i |= (JreRShift32(i, 16));
  return i + 1;
}

void OrgSpongycastleCryptoTlsByteQueue_init(OrgSpongycastleCryptoTlsByteQueue *self) {
  OrgSpongycastleCryptoTlsByteQueue_initWithInt_(self, OrgSpongycastleCryptoTlsByteQueue_DEFAULT_CAPACITY);
}

OrgSpongycastleCryptoTlsByteQueue *new_OrgSpongycastleCryptoTlsByteQueue_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsByteQueue, init)
}

OrgSpongycastleCryptoTlsByteQueue *create_OrgSpongycastleCryptoTlsByteQueue_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsByteQueue, init)
}

void OrgSpongycastleCryptoTlsByteQueue_initWithInt_(OrgSpongycastleCryptoTlsByteQueue *self, jint capacity) {
  NSObject_init(self);
  self->skipped_ = 0;
  self->available_ = 0;
  self->readOnlyBuf_ = false;
  self->databuf_ = capacity == 0 ? JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES) : [IOSByteArray newArrayWithLength:capacity];
}

OrgSpongycastleCryptoTlsByteQueue *new_OrgSpongycastleCryptoTlsByteQueue_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsByteQueue, initWithInt_, capacity)
}

OrgSpongycastleCryptoTlsByteQueue *create_OrgSpongycastleCryptoTlsByteQueue_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsByteQueue, initWithInt_, capacity)
}

void OrgSpongycastleCryptoTlsByteQueue_initWithByteArray_withInt_withInt_(OrgSpongycastleCryptoTlsByteQueue *self, IOSByteArray *buf, jint off, jint len) {
  NSObject_init(self);
  self->skipped_ = 0;
  self->available_ = 0;
  self->readOnlyBuf_ = false;
  self->databuf_ = buf;
  self->skipped_ = off;
  self->available_ = len;
  self->readOnlyBuf_ = true;
}

OrgSpongycastleCryptoTlsByteQueue *new_OrgSpongycastleCryptoTlsByteQueue_initWithByteArray_withInt_withInt_(IOSByteArray *buf, jint off, jint len) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsByteQueue, initWithByteArray_withInt_withInt_, buf, off, len)
}

OrgSpongycastleCryptoTlsByteQueue *create_OrgSpongycastleCryptoTlsByteQueue_initWithByteArray_withInt_withInt_(IOSByteArray *buf, jint off, jint len) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsByteQueue, initWithByteArray_withInt_withInt_, buf, off, len)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsByteQueue)
