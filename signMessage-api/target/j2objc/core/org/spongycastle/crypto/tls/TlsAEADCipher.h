//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsAEADCipher.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsAEADCipher")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsTlsAEADCipher
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsAEADCipher 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsAEADCipher 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsTlsAEADCipher

#if !defined (OrgSpongycastleCryptoTlsTlsAEADCipher_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsAEADCipher || defined(INCLUDE_OrgSpongycastleCryptoTlsTlsAEADCipher))
#define OrgSpongycastleCryptoTlsTlsAEADCipher_

#define RESTRICT_OrgSpongycastleCryptoTlsTlsCipher 1
#define INCLUDE_OrgSpongycastleCryptoTlsTlsCipher 1
#include "org/spongycastle/crypto/tls/TlsCipher.h"

@class IOSByteArray;
@protocol OrgSpongycastleCryptoModesAEADBlockCipher;
@protocol OrgSpongycastleCryptoTlsTlsContext;

@interface OrgSpongycastleCryptoTlsTlsAEADCipher : NSObject < OrgSpongycastleCryptoTlsTlsCipher > {
 @public
  id<OrgSpongycastleCryptoTlsTlsContext> context_;
  jint macSize_;
  jint record_iv_length_;
  id<OrgSpongycastleCryptoModesAEADBlockCipher> encryptCipher_;
  id<OrgSpongycastleCryptoModesAEADBlockCipher> decryptCipher_;
  IOSByteArray *encryptImplicitNonce_;
  IOSByteArray *decryptImplicitNonce_;
  jint nonceMode_;
}

#pragma mark Public

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
             withOrgSpongycastleCryptoModesAEADBlockCipher:(id<OrgSpongycastleCryptoModesAEADBlockCipher>)clientWriteCipher
             withOrgSpongycastleCryptoModesAEADBlockCipher:(id<OrgSpongycastleCryptoModesAEADBlockCipher>)serverWriteCipher
                                                   withInt:(jint)cipherKeySize
                                                   withInt:(jint)macSize;

- (IOSByteArray *)decodeCiphertextWithLong:(jlong)seqNo
                                 withShort:(jshort)type
                             withByteArray:(IOSByteArray *)ciphertext
                                   withInt:(jint)offset
                                   withInt:(jint)len;

- (IOSByteArray *)encodePlaintextWithLong:(jlong)seqNo
                                withShort:(jshort)type
                            withByteArray:(IOSByteArray *)plaintext
                                  withInt:(jint)offset
                                  withInt:(jint)len;

- (jint)getPlaintextLimitWithInt:(jint)ciphertextLimit;

#pragma mark Protected

- (IOSByteArray *)getAdditionalDataWithLong:(jlong)seqNo
                                  withShort:(jshort)type
                                    withInt:(jint)len;

#pragma mark Package-Private

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
             withOrgSpongycastleCryptoModesAEADBlockCipher:(id<OrgSpongycastleCryptoModesAEADBlockCipher>)clientWriteCipher
             withOrgSpongycastleCryptoModesAEADBlockCipher:(id<OrgSpongycastleCryptoModesAEADBlockCipher>)serverWriteCipher
                                                   withInt:(jint)cipherKeySize
                                                   withInt:(jint)macSize
                                                   withInt:(jint)nonceMode;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsTlsAEADCipher)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsAEADCipher, context_, id<OrgSpongycastleCryptoTlsTlsContext>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsAEADCipher, encryptCipher_, id<OrgSpongycastleCryptoModesAEADBlockCipher>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsAEADCipher, decryptCipher_, id<OrgSpongycastleCryptoModesAEADBlockCipher>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsAEADCipher, encryptImplicitNonce_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsAEADCipher, decryptImplicitNonce_, IOSByteArray *)

inline jint OrgSpongycastleCryptoTlsTlsAEADCipher_get_NONCE_RFC5288(void);
#define OrgSpongycastleCryptoTlsTlsAEADCipher_NONCE_RFC5288 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsAEADCipher, NONCE_RFC5288, jint)

inline jint OrgSpongycastleCryptoTlsTlsAEADCipher_get_NONCE_DRAFT_CHACHA20_POLY1305(void);
#define OrgSpongycastleCryptoTlsTlsAEADCipher_NONCE_DRAFT_CHACHA20_POLY1305 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsAEADCipher, NONCE_DRAFT_CHACHA20_POLY1305, jint)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsAEADCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoModesAEADBlockCipher_withOrgSpongycastleCryptoModesAEADBlockCipher_withInt_withInt_(OrgSpongycastleCryptoTlsTlsAEADCipher *self, id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoModesAEADBlockCipher> clientWriteCipher, id<OrgSpongycastleCryptoModesAEADBlockCipher> serverWriteCipher, jint cipherKeySize, jint macSize);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsAEADCipher *new_OrgSpongycastleCryptoTlsTlsAEADCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoModesAEADBlockCipher_withOrgSpongycastleCryptoModesAEADBlockCipher_withInt_withInt_(id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoModesAEADBlockCipher> clientWriteCipher, id<OrgSpongycastleCryptoModesAEADBlockCipher> serverWriteCipher, jint cipherKeySize, jint macSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsAEADCipher *create_OrgSpongycastleCryptoTlsTlsAEADCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoModesAEADBlockCipher_withOrgSpongycastleCryptoModesAEADBlockCipher_withInt_withInt_(id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoModesAEADBlockCipher> clientWriteCipher, id<OrgSpongycastleCryptoModesAEADBlockCipher> serverWriteCipher, jint cipherKeySize, jint macSize);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsAEADCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoModesAEADBlockCipher_withOrgSpongycastleCryptoModesAEADBlockCipher_withInt_withInt_withInt_(OrgSpongycastleCryptoTlsTlsAEADCipher *self, id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoModesAEADBlockCipher> clientWriteCipher, id<OrgSpongycastleCryptoModesAEADBlockCipher> serverWriteCipher, jint cipherKeySize, jint macSize, jint nonceMode);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsAEADCipher *new_OrgSpongycastleCryptoTlsTlsAEADCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoModesAEADBlockCipher_withOrgSpongycastleCryptoModesAEADBlockCipher_withInt_withInt_withInt_(id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoModesAEADBlockCipher> clientWriteCipher, id<OrgSpongycastleCryptoModesAEADBlockCipher> serverWriteCipher, jint cipherKeySize, jint macSize, jint nonceMode) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsAEADCipher *create_OrgSpongycastleCryptoTlsTlsAEADCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoModesAEADBlockCipher_withOrgSpongycastleCryptoModesAEADBlockCipher_withInt_withInt_withInt_(id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoModesAEADBlockCipher> clientWriteCipher, id<OrgSpongycastleCryptoModesAEADBlockCipher> serverWriteCipher, jint cipherKeySize, jint macSize, jint nonceMode);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsTlsAEADCipher)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsAEADCipher")
