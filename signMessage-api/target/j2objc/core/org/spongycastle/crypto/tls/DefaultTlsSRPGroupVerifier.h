//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DefaultTlsSRPGroupVerifier.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier

#if !defined (OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier || defined(INCLUDE_OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier))
#define OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier_

#define RESTRICT_OrgSpongycastleCryptoTlsTlsSRPGroupVerifier 1
#define INCLUDE_OrgSpongycastleCryptoTlsTlsSRPGroupVerifier 1
#include "org/spongycastle/crypto/tls/TlsSRPGroupVerifier.h"

@class JavaMathBigInteger;
@class JavaUtilVector;
@class OrgSpongycastleCryptoParamsSRP6GroupParameters;

@interface OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier : NSObject < OrgSpongycastleCryptoTlsTlsSRPGroupVerifier > {
 @public
  JavaUtilVector *groups_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithJavaUtilVector:(JavaUtilVector *)groups;

- (jboolean)acceptWithOrgSpongycastleCryptoParamsSRP6GroupParameters:(OrgSpongycastleCryptoParamsSRP6GroupParameters *)group;

#pragma mark Protected

- (jboolean)areGroupsEqualWithOrgSpongycastleCryptoParamsSRP6GroupParameters:(OrgSpongycastleCryptoParamsSRP6GroupParameters *)a
                          withOrgSpongycastleCryptoParamsSRP6GroupParameters:(OrgSpongycastleCryptoParamsSRP6GroupParameters *)b;

- (jboolean)areParametersEqualWithJavaMathBigInteger:(JavaMathBigInteger *)a
                              withJavaMathBigInteger:(JavaMathBigInteger *)b;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier, groups_, JavaUtilVector *)

inline JavaUtilVector *OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier_get_DEFAULT_GROUPS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilVector *OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier_DEFAULT_GROUPS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier, DEFAULT_GROUPS, JavaUtilVector *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier_init(OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier *new_OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier *create_OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier_init(void);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier_initWithJavaUtilVector_(OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier *self, JavaUtilVector *groups);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier *new_OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier_initWithJavaUtilVector_(JavaUtilVector *groups) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier *create_OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier_initWithJavaUtilVector_(JavaUtilVector *groups);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier")
