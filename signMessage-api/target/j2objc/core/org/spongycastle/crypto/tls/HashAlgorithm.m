//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/HashAlgorithm.java
//

#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/tls/HashAlgorithm.h"

@implementation OrgSpongycastleCryptoTlsHashAlgorithm

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsHashAlgorithm_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)getNameWithShort:(jshort)hashAlgorithm {
  return OrgSpongycastleCryptoTlsHashAlgorithm_getNameWithShort_(hashAlgorithm);
}

+ (NSString *)getTextWithShort:(jshort)hashAlgorithm {
  return OrgSpongycastleCryptoTlsHashAlgorithm_getTextWithShort_(hashAlgorithm);
}

+ (jboolean)isPrivateWithShort:(jshort)hashAlgorithm {
  return OrgSpongycastleCryptoTlsHashAlgorithm_isPrivateWithShort_(hashAlgorithm);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getNameWithShort:);
  methods[2].selector = @selector(getTextWithShort:);
  methods[3].selector = @selector(isPrivateWithShort:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "none", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHashAlgorithm_none, 0x19, -1, -1, -1, -1 },
    { "md5", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHashAlgorithm_md5, 0x19, -1, -1, -1, -1 },
    { "sha1", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHashAlgorithm_sha1, 0x19, -1, -1, -1, -1 },
    { "sha224", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHashAlgorithm_sha224, 0x19, -1, -1, -1, -1 },
    { "sha256", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHashAlgorithm_sha256, 0x19, -1, -1, -1, -1 },
    { "sha384", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHashAlgorithm_sha384, 0x19, -1, -1, -1, -1 },
    { "sha512", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHashAlgorithm_sha512, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getName", "S", "getText", "isPrivate" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsHashAlgorithm = { "HashAlgorithm", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 4, 7, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsHashAlgorithm;
}

@end

void OrgSpongycastleCryptoTlsHashAlgorithm_init(OrgSpongycastleCryptoTlsHashAlgorithm *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoTlsHashAlgorithm *new_OrgSpongycastleCryptoTlsHashAlgorithm_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsHashAlgorithm, init)
}

OrgSpongycastleCryptoTlsHashAlgorithm *create_OrgSpongycastleCryptoTlsHashAlgorithm_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsHashAlgorithm, init)
}

NSString *OrgSpongycastleCryptoTlsHashAlgorithm_getNameWithShort_(jshort hashAlgorithm) {
  OrgSpongycastleCryptoTlsHashAlgorithm_initialize();
  switch (hashAlgorithm) {
    case OrgSpongycastleCryptoTlsHashAlgorithm_none:
    return @"none";
    case OrgSpongycastleCryptoTlsHashAlgorithm_md5:
    return @"md5";
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha1:
    return @"sha1";
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha224:
    return @"sha224";
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha256:
    return @"sha256";
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha384:
    return @"sha384";
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha512:
    return @"sha512";
    default:
    return @"UNKNOWN";
  }
}

NSString *OrgSpongycastleCryptoTlsHashAlgorithm_getTextWithShort_(jshort hashAlgorithm) {
  OrgSpongycastleCryptoTlsHashAlgorithm_initialize();
  return JreStrcat("$CSC", OrgSpongycastleCryptoTlsHashAlgorithm_getNameWithShort_(hashAlgorithm), '(', hashAlgorithm, ')');
}

jboolean OrgSpongycastleCryptoTlsHashAlgorithm_isPrivateWithShort_(jshort hashAlgorithm) {
  OrgSpongycastleCryptoTlsHashAlgorithm_initialize();
  return 224 <= hashAlgorithm && hashAlgorithm <= 255;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsHashAlgorithm)
