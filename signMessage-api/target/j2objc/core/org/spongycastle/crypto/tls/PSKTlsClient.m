//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/PSKTlsClient.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Vector.h"
#include "org/spongycastle/crypto/tls/AbstractTlsClient.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/CipherSuite.h"
#include "org/spongycastle/crypto/tls/DefaultTlsCipherFactory.h"
#include "org/spongycastle/crypto/tls/KeyExchangeAlgorithm.h"
#include "org/spongycastle/crypto/tls/PSKTlsClient.h"
#include "org/spongycastle/crypto/tls/TlsAuthentication.h"
#include "org/spongycastle/crypto/tls/TlsCipherFactory.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsPSKIdentity.h"
#include "org/spongycastle/crypto/tls/TlsPSKKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

@implementation OrgSpongycastleCryptoTlsPSKTlsClient

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsPSKIdentity:(id<OrgSpongycastleCryptoTlsTlsPSKIdentity>)pskIdentity {
  OrgSpongycastleCryptoTlsPSKTlsClient_initWithOrgSpongycastleCryptoTlsTlsPSKIdentity_(self, pskIdentity);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsCipherFactory:(id<OrgSpongycastleCryptoTlsTlsCipherFactory>)cipherFactory
                      withOrgSpongycastleCryptoTlsTlsPSKIdentity:(id<OrgSpongycastleCryptoTlsTlsPSKIdentity>)pskIdentity {
  OrgSpongycastleCryptoTlsPSKTlsClient_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_withOrgSpongycastleCryptoTlsTlsPSKIdentity_(self, cipherFactory, pskIdentity);
  return self;
}

- (IOSIntArray *)getCipherSuites {
  return [IOSIntArray newArrayWithInts:(jint[]){ OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256, OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA, OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256, OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_CBC_SHA } count:4];
}

- (id<OrgSpongycastleCryptoTlsTlsKeyExchange>)getKeyExchange {
  jint keyExchangeAlgorithm = OrgSpongycastleCryptoTlsTlsUtils_getKeyExchangeAlgorithmWithInt_(selectedCipherSuite_);
  switch (keyExchangeAlgorithm) {
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_PSK:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_PSK:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_PSK:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_RSA_PSK:
    return [self createPSKKeyExchangeWithInt:keyExchangeAlgorithm];
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

- (id<OrgSpongycastleCryptoTlsTlsAuthentication>)getAuthentication {
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
}

- (id<OrgSpongycastleCryptoTlsTlsKeyExchange>)createPSKKeyExchangeWithInt:(jint)keyExchange {
  return new_OrgSpongycastleCryptoTlsTlsPSKKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsPSKIdentity_withOrgSpongycastleCryptoTlsTlsPSKIdentityManager_withOrgSpongycastleCryptoParamsDHParameters_withIntArray_withShortArray_withShortArray_(keyExchange, supportedSignatureAlgorithms_, pskIdentity_, nil, nil, namedCurves_, clientECPointFormats_, serverECPointFormats_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsKeyExchange;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsAuthentication;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsKeyExchange;", 0x4, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsPSKIdentity:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsCipherFactory:withOrgSpongycastleCryptoTlsTlsPSKIdentity:);
  methods[2].selector = @selector(getCipherSuites);
  methods[3].selector = @selector(getKeyExchange);
  methods[4].selector = @selector(getAuthentication);
  methods[5].selector = @selector(createPSKKeyExchangeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pskIdentity_", "LOrgSpongycastleCryptoTlsTlsPSKIdentity;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsTlsPSKIdentity;", "LOrgSpongycastleCryptoTlsTlsCipherFactory;LOrgSpongycastleCryptoTlsTlsPSKIdentity;", "LJavaIoIOException;", "createPSKKeyExchange", "I" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsPSKTlsClient = { "PSKTlsClient", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsPSKTlsClient;
}

@end

void OrgSpongycastleCryptoTlsPSKTlsClient_initWithOrgSpongycastleCryptoTlsTlsPSKIdentity_(OrgSpongycastleCryptoTlsPSKTlsClient *self, id<OrgSpongycastleCryptoTlsTlsPSKIdentity> pskIdentity) {
  OrgSpongycastleCryptoTlsPSKTlsClient_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_withOrgSpongycastleCryptoTlsTlsPSKIdentity_(self, new_OrgSpongycastleCryptoTlsDefaultTlsCipherFactory_init(), pskIdentity);
}

OrgSpongycastleCryptoTlsPSKTlsClient *new_OrgSpongycastleCryptoTlsPSKTlsClient_initWithOrgSpongycastleCryptoTlsTlsPSKIdentity_(id<OrgSpongycastleCryptoTlsTlsPSKIdentity> pskIdentity) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsPSKTlsClient, initWithOrgSpongycastleCryptoTlsTlsPSKIdentity_, pskIdentity)
}

OrgSpongycastleCryptoTlsPSKTlsClient *create_OrgSpongycastleCryptoTlsPSKTlsClient_initWithOrgSpongycastleCryptoTlsTlsPSKIdentity_(id<OrgSpongycastleCryptoTlsTlsPSKIdentity> pskIdentity) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsPSKTlsClient, initWithOrgSpongycastleCryptoTlsTlsPSKIdentity_, pskIdentity)
}

void OrgSpongycastleCryptoTlsPSKTlsClient_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_withOrgSpongycastleCryptoTlsTlsPSKIdentity_(OrgSpongycastleCryptoTlsPSKTlsClient *self, id<OrgSpongycastleCryptoTlsTlsCipherFactory> cipherFactory, id<OrgSpongycastleCryptoTlsTlsPSKIdentity> pskIdentity) {
  OrgSpongycastleCryptoTlsAbstractTlsClient_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_(self, cipherFactory);
  self->pskIdentity_ = pskIdentity;
}

OrgSpongycastleCryptoTlsPSKTlsClient *new_OrgSpongycastleCryptoTlsPSKTlsClient_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_withOrgSpongycastleCryptoTlsTlsPSKIdentity_(id<OrgSpongycastleCryptoTlsTlsCipherFactory> cipherFactory, id<OrgSpongycastleCryptoTlsTlsPSKIdentity> pskIdentity) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsPSKTlsClient, initWithOrgSpongycastleCryptoTlsTlsCipherFactory_withOrgSpongycastleCryptoTlsTlsPSKIdentity_, cipherFactory, pskIdentity)
}

OrgSpongycastleCryptoTlsPSKTlsClient *create_OrgSpongycastleCryptoTlsPSKTlsClient_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_withOrgSpongycastleCryptoTlsTlsPSKIdentity_(id<OrgSpongycastleCryptoTlsTlsCipherFactory> cipherFactory, id<OrgSpongycastleCryptoTlsTlsPSKIdentity> pskIdentity) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsPSKTlsClient, initWithOrgSpongycastleCryptoTlsTlsCipherFactory_withOrgSpongycastleCryptoTlsTlsPSKIdentity_, cipherFactory, pskIdentity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsPSKTlsClient)
