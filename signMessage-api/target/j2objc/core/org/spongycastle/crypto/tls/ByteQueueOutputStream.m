//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/ByteQueueOutputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/OutputStream.h"
#include "org/spongycastle/crypto/tls/ByteQueue.h"
#include "org/spongycastle/crypto/tls/ByteQueueOutputStream.h"

@interface OrgSpongycastleCryptoTlsByteQueueOutputStream () {
 @public
  OrgSpongycastleCryptoTlsByteQueue *buffer_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsByteQueueOutputStream, buffer_, OrgSpongycastleCryptoTlsByteQueue *)

@implementation OrgSpongycastleCryptoTlsByteQueueOutputStream

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsByteQueueOutputStream_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgSpongycastleCryptoTlsByteQueue *)getBuffer {
  return buffer_;
}

- (void)writeWithInt:(jint)b {
  [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(buffer_)) addDataWithByteArray:[IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) b } count:1] withInt:0 withInt:1];
}

- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
  [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(buffer_)) addDataWithByteArray:b withInt:off withInt:len];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsByteQueue;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getBuffer);
  methods[2].selector = @selector(writeWithInt:);
  methods[3].selector = @selector(writeWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "buffer_", "LOrgSpongycastleCryptoTlsByteQueue;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "write", "I", "LJavaIoIOException;", "[BII" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsByteQueueOutputStream = { "ByteQueueOutputStream", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsByteQueueOutputStream;
}

@end

void OrgSpongycastleCryptoTlsByteQueueOutputStream_init(OrgSpongycastleCryptoTlsByteQueueOutputStream *self) {
  JavaIoOutputStream_init(self);
  self->buffer_ = new_OrgSpongycastleCryptoTlsByteQueue_init();
}

OrgSpongycastleCryptoTlsByteQueueOutputStream *new_OrgSpongycastleCryptoTlsByteQueueOutputStream_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsByteQueueOutputStream, init)
}

OrgSpongycastleCryptoTlsByteQueueOutputStream *create_OrgSpongycastleCryptoTlsByteQueueOutputStream_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsByteQueueOutputStream, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsByteQueueOutputStream)
