//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/AbstractTlsKeyExchange.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange

#if !defined (OrgSpongycastleCryptoTlsAbstractTlsKeyExchange_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange || defined(INCLUDE_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange))
#define OrgSpongycastleCryptoTlsAbstractTlsKeyExchange_

#define RESTRICT_OrgSpongycastleCryptoTlsTlsKeyExchange 1
#define INCLUDE_OrgSpongycastleCryptoTlsTlsKeyExchange 1
#include "org/spongycastle/crypto/tls/TlsKeyExchange.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaUtilVector;
@class OrgSpongycastleCryptoTlsCertificate;
@class OrgSpongycastleCryptoTlsDigitallySigned;
@protocol OrgSpongycastleCryptoTlsTlsContext;
@protocol OrgSpongycastleCryptoTlsTlsCredentials;

@interface OrgSpongycastleCryptoTlsAbstractTlsKeyExchange : NSObject < OrgSpongycastleCryptoTlsTlsKeyExchange > {
 @public
  jint keyExchange_;
  JavaUtilVector *supportedSignatureAlgorithms_;
  id<OrgSpongycastleCryptoTlsTlsContext> context_;
}

#pragma mark Public

- (IOSByteArray *)generateServerKeyExchange;

- (void)init__WithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context OBJC_METHOD_FAMILY_NONE;

- (void)processClientCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)clientCertificate;

- (void)processClientKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (void)processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)serverCertificate;

- (void)processServerCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:(id<OrgSpongycastleCryptoTlsTlsCredentials>)serverCredentials;

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (jboolean)requiresServerKeyExchange;

- (void)skipClientCredentials;

- (void)skipServerKeyExchange;

#pragma mark Protected

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms;

- (OrgSpongycastleCryptoTlsDigitallySigned *)parseSignatureWithJavaIoInputStream:(JavaIoInputStream *)input;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsAbstractTlsKeyExchange)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsKeyExchange, supportedSignatureAlgorithms_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsKeyExchange, context_, id<OrgSpongycastleCryptoTlsTlsContext>)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsAbstractTlsKeyExchange_initWithInt_withJavaUtilVector_(OrgSpongycastleCryptoTlsAbstractTlsKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsAbstractTlsKeyExchange)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange")
