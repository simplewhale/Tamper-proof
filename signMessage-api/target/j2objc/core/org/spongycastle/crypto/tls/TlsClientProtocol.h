//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsClientProtocol.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsClientProtocol")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsTlsClientProtocol
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsClientProtocol 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsClientProtocol 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsTlsClientProtocol

#if !defined (OrgSpongycastleCryptoTlsTlsClientProtocol_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsClientProtocol || defined(INCLUDE_OrgSpongycastleCryptoTlsTlsClientProtocol))
#define OrgSpongycastleCryptoTlsTlsClientProtocol_

#define RESTRICT_OrgSpongycastleCryptoTlsTlsProtocol 1
#define INCLUDE_OrgSpongycastleCryptoTlsTlsProtocol 1
#include "org/spongycastle/crypto/tls/TlsProtocol.h"

@class IOSByteArray;
@class JavaIoByteArrayInputStream;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaSecuritySecureRandom;
@class JavaUtilVector;
@class OrgSpongycastleCryptoTlsAbstractTlsContext;
@class OrgSpongycastleCryptoTlsCertificateRequest;
@class OrgSpongycastleCryptoTlsCertificateStatus;
@class OrgSpongycastleCryptoTlsDigitallySigned;
@class OrgSpongycastleCryptoTlsTlsClientContextImpl;
@protocol OrgSpongycastleCryptoTlsTlsAuthentication;
@protocol OrgSpongycastleCryptoTlsTlsClient;
@protocol OrgSpongycastleCryptoTlsTlsContext;
@protocol OrgSpongycastleCryptoTlsTlsKeyExchange;
@protocol OrgSpongycastleCryptoTlsTlsPeer;

@interface OrgSpongycastleCryptoTlsTlsClientProtocol : OrgSpongycastleCryptoTlsTlsProtocol {
 @public
  id<OrgSpongycastleCryptoTlsTlsClient> tlsClient_;
  OrgSpongycastleCryptoTlsTlsClientContextImpl *tlsClientContext_;
  IOSByteArray *selectedSessionID_;
  id<OrgSpongycastleCryptoTlsTlsKeyExchange> keyExchange_;
  id<OrgSpongycastleCryptoTlsTlsAuthentication> authentication_;
  OrgSpongycastleCryptoTlsCertificateStatus *certificateStatus_;
  OrgSpongycastleCryptoTlsCertificateRequest *certificateRequest_;
}

#pragma mark Public

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)input
                   withJavaIoOutputStream:(JavaIoOutputStream *)output
             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

- (void)connectWithOrgSpongycastleCryptoTlsTlsClient:(id<OrgSpongycastleCryptoTlsTlsClient>)tlsClient;

#pragma mark Protected

- (void)cleanupHandshake;

- (id<OrgSpongycastleCryptoTlsTlsContext>)getContext;

- (id<OrgSpongycastleCryptoTlsTlsPeer>)getPeer;

- (void)handleHandshakeMessageWithShort:(jshort)type
         withJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)handleSupplementalDataWithJavaUtilVector:(JavaUtilVector *)serverSupplementalData;

- (void)receiveNewSessionTicketMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)receiveServerHelloMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)sendCertificateVerifyMessageWithOrgSpongycastleCryptoTlsDigitallySigned:(OrgSpongycastleCryptoTlsDigitallySigned *)certificateVerify;

- (void)sendClientHelloMessage;

- (void)sendClientKeyExchangeMessage;

#pragma mark Package-Private

- (OrgSpongycastleCryptoTlsAbstractTlsContext *)getContextAdmin;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsTlsClientProtocol)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsClientProtocol, tlsClient_, id<OrgSpongycastleCryptoTlsTlsClient>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsClientProtocol, tlsClientContext_, OrgSpongycastleCryptoTlsTlsClientContextImpl *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsClientProtocol, selectedSessionID_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsClientProtocol, keyExchange_, id<OrgSpongycastleCryptoTlsTlsKeyExchange>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsClientProtocol, authentication_, id<OrgSpongycastleCryptoTlsTlsAuthentication>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsClientProtocol, certificateStatus_, OrgSpongycastleCryptoTlsCertificateStatus *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsClientProtocol, certificateRequest_, OrgSpongycastleCryptoTlsCertificateRequest *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsClientProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(OrgSpongycastleCryptoTlsTlsClientProtocol *self, JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsClientProtocol *new_OrgSpongycastleCryptoTlsTlsClientProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsClientProtocol *create_OrgSpongycastleCryptoTlsTlsClientProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsClientProtocol_initWithJavaSecuritySecureRandom_(OrgSpongycastleCryptoTlsTlsClientProtocol *self, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsClientProtocol *new_OrgSpongycastleCryptoTlsTlsClientProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsClientProtocol *create_OrgSpongycastleCryptoTlsTlsClientProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsTlsClientProtocol)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsClientProtocol")
