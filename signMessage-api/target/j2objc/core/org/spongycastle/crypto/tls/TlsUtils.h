//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsUtils")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsTlsUtils
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsUtils 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsUtils 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsTlsUtils

#if !defined (OrgSpongycastleCryptoTlsTlsUtils_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsUtils || defined(INCLUDE_OrgSpongycastleCryptoTlsTlsUtils))
#define OrgSpongycastleCryptoTlsTlsUtils_

@class IOSByteArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class IOSShortArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaLangInteger;
@class JavaUtilHashtable;
@class JavaUtilVector;
@class OrgSpongycastleAsn1ASN1ObjectIdentifier;
@class OrgSpongycastleAsn1ASN1Primitive;
@class OrgSpongycastleAsn1X509Certificate;
@class OrgSpongycastleCryptoTlsCertificate;
@class OrgSpongycastleCryptoTlsProtocolVersion;
@class OrgSpongycastleCryptoTlsSessionParameters;
@class OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;
@protocol OrgSpongycastleCryptoDigest;
@protocol OrgSpongycastleCryptoTlsTlsContext;
@protocol OrgSpongycastleCryptoTlsTlsHandshakeHash;
@protocol OrgSpongycastleCryptoTlsTlsSession;
@protocol OrgSpongycastleCryptoTlsTlsSigner;
@protocol OrgSpongycastleCryptoTlsTlsSignerCredentials;

@interface OrgSpongycastleCryptoTlsTlsUtils : NSObject

#pragma mark Public

- (instancetype)init;

+ (void)addSignatureAlgorithmsExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                          withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms;

+ (void)checkUint16WithInt:(jint)i;

+ (void)checkUint16WithLong:(jlong)i;

+ (void)checkUint24WithInt:(jint)i;

+ (void)checkUint24WithLong:(jlong)i;

+ (void)checkUint32WithLong:(jlong)i;

+ (void)checkUint48WithLong:(jlong)i;

+ (void)checkUint64WithLong:(jlong)i;

+ (void)checkUint8WithInt:(jint)i;

+ (void)checkUint8WithLong:(jlong)i;

+ (void)checkUint8WithShort:(jshort)i;

+ (id<OrgSpongycastleCryptoDigest>)cloneHashWithShort:(jshort)hashAlgorithm
                      withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hash_;

+ (id<OrgSpongycastleCryptoDigest>)clonePRFHashWithInt:(jint)prfAlgorithm
                       withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hash_;

+ (id<OrgSpongycastleCryptoDigest>)createHashWithShort:(jshort)hashAlgorithm;

+ (id<OrgSpongycastleCryptoDigest>)createHashWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)signatureAndHashAlgorithm;

+ (id<OrgSpongycastleCryptoDigest>)createPRFHashWithInt:(jint)prfAlgorithm;

+ (IOSByteArray *)createSignatureAlgorithmsExtensionWithJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms;

+ (id<OrgSpongycastleCryptoTlsTlsSigner>)createTlsSignerWithShort:(jshort)clientCertificateType;

+ (IOSByteArray *)encodeOpaque8WithByteArray:(IOSByteArray *)buf;

+ (void)encodeSupportedSignatureAlgorithmsWithJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
                                                 withBoolean:(jboolean)allowAnonymous
                                      withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (IOSByteArray *)encodeUint16ArrayWithUint16LengthWithIntArray:(IOSIntArray *)uints;

+ (IOSByteArray *)encodeUint8ArrayWithUint8LengthWithShortArray:(IOSShortArray *)uints;

+ (JavaUtilVector *)getAllSignatureAlgorithms;

+ (jint)getCipherTypeWithInt:(jint)ciphersuite;

+ (JavaUtilVector *)getDefaultDSSSignatureAlgorithms;

+ (JavaUtilVector *)getDefaultECDSASignatureAlgorithms;

+ (JavaUtilVector *)getDefaultRSASignatureAlgorithms;

+ (JavaUtilVector *)getDefaultSupportedSignatureAlgorithms;

+ (jint)getEncryptionAlgorithmWithInt:(jint)ciphersuite;

+ (IOSByteArray *)getExtensionDataWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                    withJavaLangInteger:(JavaLangInteger *)extensionType;

+ (jshort)getHashAlgorithmForPRFAlgorithmWithInt:(jint)prfAlgorithm;

+ (jint)getKeyExchangeAlgorithmWithInt:(jint)ciphersuite;

+ (jint)getMACAlgorithmWithInt:(jint)ciphersuite;

+ (OrgSpongycastleCryptoTlsProtocolVersion *)getMinimumVersionWithInt:(jint)ciphersuite;

+ (OrgSpongycastleAsn1ASN1ObjectIdentifier *)getOIDForHashAlgorithmWithShort:(jshort)hashAlgorithm;

+ (JavaUtilVector *)getSignatureAlgorithmsExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)getSignatureAndHashAlgorithmWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                         withOrgSpongycastleCryptoTlsTlsSignerCredentials:(id<OrgSpongycastleCryptoTlsTlsSignerCredentials>)signerCredentials;

+ (JavaUtilVector *)getUsableSignatureAlgorithmsWithJavaUtilVector:(JavaUtilVector *)sigHashAlgs;

+ (jboolean)hasExpectedEmptyExtensionDataWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                           withJavaLangInteger:(JavaLangInteger *)extensionType
                                                     withShort:(jshort)alertDescription;

+ (jboolean)hasSigningCapabilityWithShort:(jshort)clientCertificateType;

+ (id<OrgSpongycastleCryptoTlsTlsSession>)importSessionWithByteArray:(IOSByteArray *)sessionID
                       withOrgSpongycastleCryptoTlsSessionParameters:(OrgSpongycastleCryptoTlsSessionParameters *)sessionParameters;

+ (jboolean)isAEADCipherSuiteWithInt:(jint)ciphersuite;

+ (jboolean)isBlockCipherSuiteWithInt:(jint)ciphersuite;

+ (jboolean)isSignatureAlgorithmsExtensionAllowedWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)clientVersion;

+ (jboolean)isSSLWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context;

+ (jboolean)isStreamCipherSuiteWithInt:(jint)ciphersuite;

+ (jboolean)isTLSv11WithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)version_;

+ (jboolean)isTLSv11WithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context;

+ (jboolean)isTLSv12WithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)version_;

+ (jboolean)isTLSv12WithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context;

+ (jboolean)isValidCipherSuiteForSignatureAlgorithmsWithInt:(jint)cipherSuite
                                         withJavaUtilVector:(JavaUtilVector *)sigAlgs;

+ (jboolean)isValidCipherSuiteForVersionWithInt:(jint)cipherSuite
    withOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)serverVersion;

+ (jboolean)isValidUint16WithInt:(jint)i;

+ (jboolean)isValidUint16WithLong:(jlong)i;

+ (jboolean)isValidUint24WithInt:(jint)i;

+ (jboolean)isValidUint24WithLong:(jlong)i;

+ (jboolean)isValidUint32WithLong:(jlong)i;

+ (jboolean)isValidUint48WithLong:(jlong)i;

+ (jboolean)isValidUint64WithLong:(jlong)i;

+ (jboolean)isValidUint8WithInt:(jint)i;

+ (jboolean)isValidUint8WithLong:(jlong)i;

+ (jboolean)isValidUint8WithShort:(jshort)i;

+ (JavaUtilVector *)parseSupportedSignatureAlgorithmsWithBoolean:(jboolean)allowAnonymous
                                           withJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSByteArray *)PRFWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                              withByteArray:(IOSByteArray *)secret
                                               withNSString:(NSString *)asciiLabel
                                              withByteArray:(IOSByteArray *)seed
                                                    withInt:(jint)size;

+ (IOSByteArray *)PRF_legacyWithByteArray:(IOSByteArray *)secret
                             withNSString:(NSString *)asciiLabel
                            withByteArray:(IOSByteArray *)seed
                                  withInt:(jint)size;

+ (IOSByteArray *)readAllOrNothingWithInt:(jint)length
                    withJavaIoInputStream:(JavaIoInputStream *)input;

+ (OrgSpongycastleAsn1ASN1Primitive *)readASN1ObjectWithByteArray:(IOSByteArray *)encoding;

+ (OrgSpongycastleAsn1ASN1Primitive *)readDERObjectWithByteArray:(IOSByteArray *)encoding;

+ (void)readFullyWithByteArray:(IOSByteArray *)buf
         withJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSByteArray *)readFullyWithInt:(jint)length
             withJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSByteArray *)readOpaque16WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSByteArray *)readOpaque24WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSByteArray *)readOpaque8WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (JavaUtilVector *)readSignatureAlgorithmsExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (jint)readUint16WithByteArray:(IOSByteArray *)buf
                        withInt:(jint)offset;

+ (jint)readUint16WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSIntArray *)readUint16ArrayWithInt:(jint)count
                  withJavaIoInputStream:(JavaIoInputStream *)input;

+ (jint)readUint24WithByteArray:(IOSByteArray *)buf
                        withInt:(jint)offset;

+ (jint)readUint24WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (jlong)readUint32WithByteArray:(IOSByteArray *)buf
                         withInt:(jint)offset;

+ (jlong)readUint32WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (jlong)readUint48WithByteArray:(IOSByteArray *)buf
                         withInt:(jint)offset;

+ (jlong)readUint48WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (jshort)readUint8WithByteArray:(IOSByteArray *)buf
                         withInt:(jint)offset;

+ (jshort)readUint8WithJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSShortArray *)readUint8ArrayWithInt:(jint)count
                   withJavaIoInputStream:(JavaIoInputStream *)input;

+ (OrgSpongycastleCryptoTlsProtocolVersion *)readVersionWithByteArray:(IOSByteArray *)buf
                                                              withInt:(jint)offset;

+ (OrgSpongycastleCryptoTlsProtocolVersion *)readVersionWithJavaIoInputStream:(JavaIoInputStream *)input;

+ (jint)readVersionRawWithByteArray:(IOSByteArray *)buf
                            withInt:(jint)offset;

+ (jint)readVersionRawWithJavaIoInputStream:(JavaIoInputStream *)input;

+ (void)verifySupportedSignatureAlgorithmWithJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
      withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)signatureAlgorithm;

+ (void)writeGMTUnixTimeWithByteArray:(IOSByteArray *)buf
                              withInt:(jint)offset;

+ (void)writeOpaque16WithByteArray:(IOSByteArray *)buf
            withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeOpaque24WithByteArray:(IOSByteArray *)buf
            withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeOpaque8WithByteArray:(IOSByteArray *)buf
           withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint16WithInt:(jint)i
             withByteArray:(IOSByteArray *)buf
                   withInt:(jint)offset;

+ (void)writeUint16WithInt:(jint)i
    withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint16ArrayWithIntArray:(IOSIntArray *)uints
                       withByteArray:(IOSByteArray *)buf
                             withInt:(jint)offset;

+ (void)writeUint16ArrayWithIntArray:(IOSIntArray *)uints
              withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint16ArrayWithUint16LengthWithIntArray:(IOSIntArray *)uints
                                       withByteArray:(IOSByteArray *)buf
                                             withInt:(jint)offset;

+ (void)writeUint16ArrayWithUint16LengthWithIntArray:(IOSIntArray *)uints
                              withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint24WithInt:(jint)i
             withByteArray:(IOSByteArray *)buf
                   withInt:(jint)offset;

+ (void)writeUint24WithInt:(jint)i
    withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint32WithLong:(jlong)i
              withByteArray:(IOSByteArray *)buf
                    withInt:(jint)offset;

+ (void)writeUint32WithLong:(jlong)i
     withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint48WithLong:(jlong)i
              withByteArray:(IOSByteArray *)buf
                    withInt:(jint)offset;

+ (void)writeUint48WithLong:(jlong)i
     withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint64WithLong:(jlong)i
              withByteArray:(IOSByteArray *)buf
                    withInt:(jint)offset;

+ (void)writeUint64WithLong:(jlong)i
     withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint8WithInt:(jint)i
            withByteArray:(IOSByteArray *)buf
                  withInt:(jint)offset;

+ (void)writeUint8WithInt:(jint)i
   withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint8WithShort:(jshort)i
              withByteArray:(IOSByteArray *)buf
                    withInt:(jint)offset;

+ (void)writeUint8WithShort:(jshort)i
     withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint8ArrayWithShortArray:(IOSShortArray *)uints
                        withByteArray:(IOSByteArray *)buf
                              withInt:(jint)offset;

+ (void)writeUint8ArrayWithShortArray:(IOSShortArray *)uints
               withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeUint8ArrayWithUint8LengthWithShortArray:(IOSShortArray *)uints
                                       withByteArray:(IOSByteArray *)buf
                                             withInt:(jint)offset;

+ (void)writeUint8ArrayWithUint8LengthWithShortArray:(IOSShortArray *)uints
                              withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)version_
                                                  withByteArray:(IOSByteArray *)buf
                                                        withInt:(jint)offset;

+ (void)writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)version_
                                         withJavaIoOutputStream:(JavaIoOutputStream *)output;

#pragma mark Package-Private

+ (IOSByteArray *)calculateKeyBlockWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                  withInt:(jint)size;

+ (IOSByteArray *)calculateKeyBlock_SSLWithByteArray:(IOSByteArray *)master_secret
                                       withByteArray:(IOSByteArray *)random
                                             withInt:(jint)size;

+ (IOSByteArray *)calculateMasterSecretWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                withByteArray:(IOSByteArray *)pre_master_secret;

+ (IOSByteArray *)calculateMasterSecret_SSLWithByteArray:(IOSByteArray *)pre_master_secret
                                           withByteArray:(IOSByteArray *)random;

+ (IOSByteArray *)calculateVerifyDataWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                               withNSString:(NSString *)asciiLabel
                                                              withByteArray:(IOSByteArray *)handshakeHash;

+ (IOSByteArray *)concatWithByteArray:(IOSByteArray *)a
                        withByteArray:(IOSByteArray *)b;

+ (jshort)getClientCertificateTypeWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)clientCertificate
                                  withOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)serverCertificate;

+ (void)hmac_hashWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                   withByteArray:(IOSByteArray *)secret
                                   withByteArray:(IOSByteArray *)seed
                                   withByteArray:(IOSByteArray *)outArg;

+ (IOSByteArray *)PRF_legacyWithByteArray:(IOSByteArray *)secret
                            withByteArray:(IOSByteArray *)label
                            withByteArray:(IOSByteArray *)labelSeed
                                  withInt:(jint)size;

+ (void)trackHashAlgorithmsWithOrgSpongycastleCryptoTlsTlsHandshakeHash:(id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)handshakeHash
                                                     withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms;

+ (void)validateKeyUsageWithOrgSpongycastleAsn1X509Certificate:(OrgSpongycastleAsn1X509Certificate *)c
                                                       withInt:(jint)keyUsageBits;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleCryptoTlsTlsUtils)

inline IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_get_EMPTY_BYTES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_EMPTY_BYTES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES, IOSByteArray *)

inline IOSShortArray *OrgSpongycastleCryptoTlsTlsUtils_get_EMPTY_SHORTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSShortArray *OrgSpongycastleCryptoTlsTlsUtils_EMPTY_SHORTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_SHORTS, IOSShortArray *)

inline IOSIntArray *OrgSpongycastleCryptoTlsTlsUtils_get_EMPTY_INTS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *OrgSpongycastleCryptoTlsTlsUtils_EMPTY_INTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_INTS, IOSIntArray *)

inline IOSLongArray *OrgSpongycastleCryptoTlsTlsUtils_get_EMPTY_LONGS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSLongArray *OrgSpongycastleCryptoTlsTlsUtils_EMPTY_LONGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_LONGS, IOSLongArray *)

inline JavaLangInteger *OrgSpongycastleCryptoTlsTlsUtils_get_EXT_signature_algorithms(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *OrgSpongycastleCryptoTlsTlsUtils_EXT_signature_algorithms;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsUtils, EXT_signature_algorithms, JavaLangInteger *)

inline IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_get_SSL_CLIENT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_SSL_CLIENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsUtils, SSL_CLIENT, IOSByteArray *)

inline IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_get_SSL_SERVER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_SSL_SERVER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsUtils, SSL_SERVER, IOSByteArray *)

inline IOSObjectArray *OrgSpongycastleCryptoTlsTlsUtils_get_SSL3_CONST(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *OrgSpongycastleCryptoTlsTlsUtils_SSL3_CONST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsUtils, SSL3_CONST, IOSObjectArray *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_init(OrgSpongycastleCryptoTlsTlsUtils *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsUtils *new_OrgSpongycastleCryptoTlsTlsUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsUtils *create_OrgSpongycastleCryptoTlsTlsUtils_init(void);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithShort_(jshort i);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithInt_(jint i);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithLong_(jlong i);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithInt_(jint i);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithLong_(jlong i);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_checkUint24WithInt_(jint i);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_checkUint24WithLong_(jlong i);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_checkUint32WithLong_(jlong i);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_checkUint48WithLong_(jlong i);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_checkUint64WithLong_(jlong i);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint8WithShort_(jshort i);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint8WithInt_(jint i);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint8WithLong_(jlong i);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint16WithInt_(jint i);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint16WithLong_(jlong i);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint24WithInt_(jint i);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint24WithLong_(jlong i);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint32WithLong_(jlong i);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint48WithLong_(jlong i);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint64WithLong_(jlong i);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isSSLWithOrgSpongycastleCryptoTlsTlsContext_(id<OrgSpongycastleCryptoTlsTlsContext> context);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isTLSv11WithOrgSpongycastleCryptoTlsProtocolVersion_(OrgSpongycastleCryptoTlsProtocolVersion *version_);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isTLSv11WithOrgSpongycastleCryptoTlsTlsContext_(id<OrgSpongycastleCryptoTlsTlsContext> context);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsProtocolVersion_(OrgSpongycastleCryptoTlsProtocolVersion *version_);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_(id<OrgSpongycastleCryptoTlsTlsContext> context);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(jshort i, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithInt_withJavaIoOutputStream_(jint i, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withByteArray_withInt_(jshort i, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithInt_withByteArray_withInt_(jint i, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(jint i, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withByteArray_withInt_(jint i, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withJavaIoOutputStream_(jint i, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withByteArray_withInt_(jint i, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint32WithLong_withJavaIoOutputStream_(jlong i, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint32WithLong_withByteArray_withInt_(jlong i, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint48WithLong_withJavaIoOutputStream_(jlong i, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint48WithLong_withByteArray_withInt_(jlong i, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint64WithLong_withJavaIoOutputStream_(jlong i, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint64WithLong_withByteArray_withInt_(jlong i, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(IOSByteArray *buf, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(IOSByteArray *buf, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeOpaque24WithByteArray_withJavaIoOutputStream_(IOSByteArray *buf, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithShortArray_withJavaIoOutputStream_(IOSShortArray *uints, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithShortArray_withByteArray_withInt_(IOSShortArray *uints, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithUint8LengthWithShortArray_withJavaIoOutputStream_(IOSShortArray *uints, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithUint8LengthWithShortArray_withByteArray_withInt_(IOSShortArray *uints, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithIntArray_withJavaIoOutputStream_(IOSIntArray *uints, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithIntArray_withByteArray_withInt_(IOSIntArray *uints, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithUint16LengthWithIntArray_withJavaIoOutputStream_(IOSIntArray *uints, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithUint16LengthWithIntArray_withByteArray_withInt_(IOSIntArray *uints, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_encodeOpaque8WithByteArray_(IOSByteArray *buf);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_encodeUint8ArrayWithUint8LengthWithShortArray_(IOSShortArray *uints);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_encodeUint16ArrayWithUint16LengthWithIntArray_(IOSIntArray *uints);

FOUNDATION_EXPORT jshort OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT jshort OrgSpongycastleCryptoTlsTlsUtils_readUint8WithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoTlsTlsUtils_readUint16WithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoTlsTlsUtils_readUint24WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoTlsTlsUtils_readUint24WithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT jlong OrgSpongycastleCryptoTlsTlsUtils_readUint32WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT jlong OrgSpongycastleCryptoTlsTlsUtils_readUint32WithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT jlong OrgSpongycastleCryptoTlsTlsUtils_readUint48WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT jlong OrgSpongycastleCryptoTlsTlsUtils_readUint48WithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_readAllOrNothingWithInt_withJavaIoInputStream_(jint length, JavaIoInputStream *input);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(jint length, JavaIoInputStream *input);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_readFullyWithByteArray_withJavaIoInputStream_(IOSByteArray *buf, JavaIoInputStream *input);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_readOpaque24WithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT IOSShortArray *OrgSpongycastleCryptoTlsTlsUtils_readUint8ArrayWithInt_withJavaIoInputStream_(jint count, JavaIoInputStream *input);

FOUNDATION_EXPORT IOSIntArray *OrgSpongycastleCryptoTlsTlsUtils_readUint16ArrayWithInt_withJavaIoInputStream_(jint count, JavaIoInputStream *input);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsTlsUtils_readVersionWithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsTlsUtils_readVersionWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoTlsTlsUtils_readVersionRawWithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoTlsTlsUtils_readVersionRawWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1Primitive *OrgSpongycastleCryptoTlsTlsUtils_readASN1ObjectWithByteArray_(IOSByteArray *encoding);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1Primitive *OrgSpongycastleCryptoTlsTlsUtils_readDERObjectWithByteArray_(IOSByteArray *encoding);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeGMTUnixTimeWithByteArray_withInt_(IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsProtocolVersion *version_, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion_withByteArray_withInt_(OrgSpongycastleCryptoTlsProtocolVersion *version_, IOSByteArray *buf, jint offset);

FOUNDATION_EXPORT JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_getAllSignatureAlgorithms(void);

FOUNDATION_EXPORT JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_getDefaultDSSSignatureAlgorithms(void);

FOUNDATION_EXPORT JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_getDefaultECDSASignatureAlgorithms(void);

FOUNDATION_EXPORT JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_getDefaultRSASignatureAlgorithms(void);

FOUNDATION_EXPORT JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_getDefaultSupportedSignatureAlgorithms(void);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *OrgSpongycastleCryptoTlsTlsUtils_getSignatureAndHashAlgorithmWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsSignerCredentials_(id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoTlsTlsSignerCredentials> signerCredentials);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(JavaUtilHashtable *extensions, JavaLangInteger *extensionType);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_hasExpectedEmptyExtensionDataWithJavaUtilHashtable_withJavaLangInteger_withShort_(JavaUtilHashtable *extensions, JavaLangInteger *extensionType, jshort alertDescription);

FOUNDATION_EXPORT id<OrgSpongycastleCryptoTlsTlsSession> OrgSpongycastleCryptoTlsTlsUtils_importSessionWithByteArray_withOrgSpongycastleCryptoTlsSessionParameters_(IOSByteArray *sessionID, OrgSpongycastleCryptoTlsSessionParameters *sessionParameters);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isSignatureAlgorithmsExtensionAllowedWithOrgSpongycastleCryptoTlsProtocolVersion_(OrgSpongycastleCryptoTlsProtocolVersion *clientVersion);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_addSignatureAlgorithmsExtensionWithJavaUtilHashtable_withJavaUtilVector_(JavaUtilHashtable *extensions, JavaUtilVector *supportedSignatureAlgorithms);

FOUNDATION_EXPORT JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_getSignatureAlgorithmsExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_createSignatureAlgorithmsExtensionWithJavaUtilVector_(JavaUtilVector *supportedSignatureAlgorithms);

FOUNDATION_EXPORT JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_readSignatureAlgorithmsExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_encodeSupportedSignatureAlgorithmsWithJavaUtilVector_withBoolean_withJavaIoOutputStream_(JavaUtilVector *supportedSignatureAlgorithms, jboolean allowAnonymous, JavaIoOutputStream *output);

FOUNDATION_EXPORT JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_parseSupportedSignatureAlgorithmsWithBoolean_withJavaIoInputStream_(jboolean allowAnonymous, JavaIoInputStream *input);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_verifySupportedSignatureAlgorithmWithJavaUtilVector_withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(JavaUtilVector *supportedSignatureAlgorithms, OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAlgorithm);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_PRFWithOrgSpongycastleCryptoTlsTlsContext_withByteArray_withNSString_withByteArray_withInt_(id<OrgSpongycastleCryptoTlsTlsContext> context, IOSByteArray *secret, NSString *asciiLabel, IOSByteArray *seed, jint size);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_PRF_legacyWithByteArray_withNSString_withByteArray_withInt_(IOSByteArray *secret, NSString *asciiLabel, IOSByteArray *seed, jint size);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_PRF_legacyWithByteArray_withByteArray_withByteArray_withInt_(IOSByteArray *secret, IOSByteArray *label, IOSByteArray *labelSeed, jint size);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_concatWithByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_hmac_hashWithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withByteArray_(id<OrgSpongycastleCryptoDigest> digest, IOSByteArray *secret, IOSByteArray *seed, IOSByteArray *outArg);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_validateKeyUsageWithOrgSpongycastleAsn1X509Certificate_withInt_(OrgSpongycastleAsn1X509Certificate *c, jint keyUsageBits);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_calculateKeyBlockWithOrgSpongycastleCryptoTlsTlsContext_withInt_(id<OrgSpongycastleCryptoTlsTlsContext> context, jint size);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_calculateKeyBlock_SSLWithByteArray_withByteArray_withInt_(IOSByteArray *master_secret, IOSByteArray *random, jint size);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_calculateMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withByteArray_(id<OrgSpongycastleCryptoTlsTlsContext> context, IOSByteArray *pre_master_secret);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_calculateMasterSecret_SSLWithByteArray_withByteArray_(IOSByteArray *pre_master_secret, IOSByteArray *random);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_calculateVerifyDataWithOrgSpongycastleCryptoTlsTlsContext_withNSString_withByteArray_(id<OrgSpongycastleCryptoTlsTlsContext> context, NSString *asciiLabel, IOSByteArray *handshakeHash);

FOUNDATION_EXPORT id<OrgSpongycastleCryptoDigest> OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(jshort hashAlgorithm);

FOUNDATION_EXPORT id<OrgSpongycastleCryptoDigest> OrgSpongycastleCryptoTlsTlsUtils_createHashWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm);

FOUNDATION_EXPORT id<OrgSpongycastleCryptoDigest> OrgSpongycastleCryptoTlsTlsUtils_cloneHashWithShort_withOrgSpongycastleCryptoDigest_(jshort hashAlgorithm, id<OrgSpongycastleCryptoDigest> hash_);

FOUNDATION_EXPORT id<OrgSpongycastleCryptoDigest> OrgSpongycastleCryptoTlsTlsUtils_createPRFHashWithInt_(jint prfAlgorithm);

FOUNDATION_EXPORT id<OrgSpongycastleCryptoDigest> OrgSpongycastleCryptoTlsTlsUtils_clonePRFHashWithInt_withOrgSpongycastleCryptoDigest_(jint prfAlgorithm, id<OrgSpongycastleCryptoDigest> hash_);

FOUNDATION_EXPORT jshort OrgSpongycastleCryptoTlsTlsUtils_getHashAlgorithmForPRFAlgorithmWithInt_(jint prfAlgorithm);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1ObjectIdentifier *OrgSpongycastleCryptoTlsTlsUtils_getOIDForHashAlgorithmWithShort_(jshort hashAlgorithm);

FOUNDATION_EXPORT jshort OrgSpongycastleCryptoTlsTlsUtils_getClientCertificateTypeWithOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoTlsCertificate_(OrgSpongycastleCryptoTlsCertificate *clientCertificate, OrgSpongycastleCryptoTlsCertificate *serverCertificate);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsUtils_trackHashAlgorithmsWithOrgSpongycastleCryptoTlsTlsHandshakeHash_withJavaUtilVector_(id<OrgSpongycastleCryptoTlsTlsHandshakeHash> handshakeHash, JavaUtilVector *supportedSignatureAlgorithms);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_hasSigningCapabilityWithShort_(jshort clientCertificateType);

FOUNDATION_EXPORT id<OrgSpongycastleCryptoTlsTlsSigner> OrgSpongycastleCryptoTlsTlsUtils_createTlsSignerWithShort_(jshort clientCertificateType);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoTlsTlsUtils_getCipherTypeWithInt_(jint ciphersuite);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoTlsTlsUtils_getEncryptionAlgorithmWithInt_(jint ciphersuite);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoTlsTlsUtils_getKeyExchangeAlgorithmWithInt_(jint ciphersuite);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoTlsTlsUtils_getMACAlgorithmWithInt_(jint ciphersuite);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsTlsUtils_getMinimumVersionWithInt_(jint ciphersuite);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isAEADCipherSuiteWithInt_(jint ciphersuite);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isBlockCipherSuiteWithInt_(jint ciphersuite);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isStreamCipherSuiteWithInt_(jint ciphersuite);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidCipherSuiteForSignatureAlgorithmsWithInt_withJavaUtilVector_(jint cipherSuite, JavaUtilVector *sigAlgs);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidCipherSuiteForVersionWithInt_withOrgSpongycastleCryptoTlsProtocolVersion_(jint cipherSuite, OrgSpongycastleCryptoTlsProtocolVersion *serverVersion);

FOUNDATION_EXPORT JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_getUsableSignatureAlgorithmsWithJavaUtilVector_(JavaUtilVector *sigHashAlgs);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsTlsUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsUtils")
