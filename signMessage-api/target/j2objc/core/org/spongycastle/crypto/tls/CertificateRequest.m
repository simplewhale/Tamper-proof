//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/CertificateRequest.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/util/Vector.h"
#include "org/spongycastle/asn1/ASN1Encoding.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/x500/X500Name.h"
#include "org/spongycastle/crypto/tls/CertificateRequest.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

@implementation OrgSpongycastleCryptoTlsCertificateRequest

- (instancetype)initWithShortArray:(IOSShortArray *)certificateTypes
                withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
                withJavaUtilVector:(JavaUtilVector *)certificateAuthorities {
  OrgSpongycastleCryptoTlsCertificateRequest_initWithShortArray_withJavaUtilVector_withJavaUtilVector_(self, certificateTypes, supportedSignatureAlgorithms, certificateAuthorities);
  return self;
}

- (IOSShortArray *)getCertificateTypes {
  return certificateTypes_;
}

- (JavaUtilVector *)getSupportedSignatureAlgorithms {
  return supportedSignatureAlgorithms_;
}

- (JavaUtilVector *)getCertificateAuthorities {
  return certificateAuthorities_;
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  if (certificateTypes_ == nil || certificateTypes_->size_ == 0) {
    OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithInt_withJavaIoOutputStream_(0, output);
  }
  else {
    OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithUint8LengthWithShortArray_withJavaIoOutputStream_(certificateTypes_, output);
  }
  if (supportedSignatureAlgorithms_ != nil) {
    OrgSpongycastleCryptoTlsTlsUtils_encodeSupportedSignatureAlgorithmsWithJavaUtilVector_withBoolean_withJavaIoOutputStream_(supportedSignatureAlgorithms_, false, output);
  }
  if (certificateAuthorities_ == nil || [certificateAuthorities_ isEmpty]) {
    OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(0, output);
  }
  else {
    JavaUtilVector *derEncodings = new_JavaUtilVector_initWithInt_([certificateAuthorities_ size]);
    jint totalLength = 0;
    for (jint i = 0; i < [((JavaUtilVector *) nil_chk(certificateAuthorities_)) size]; ++i) {
      OrgSpongycastleAsn1X500X500Name *certificateAuthority = (OrgSpongycastleAsn1X500X500Name *) cast_chk([((JavaUtilVector *) nil_chk(certificateAuthorities_)) elementAtWithInt:i], [OrgSpongycastleAsn1X500X500Name class]);
      IOSByteArray *derEncoding = [((OrgSpongycastleAsn1X500X500Name *) nil_chk(certificateAuthority)) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
      [derEncodings addElementWithId:derEncoding];
      totalLength += ((IOSByteArray *) nil_chk(derEncoding))->size_ + 2;
    }
    OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithInt_(totalLength);
    OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(totalLength, output);
    for (jint i = 0; i < [derEncodings size]; ++i) {
      IOSByteArray *derEncoding = (IOSByteArray *) cast_chk([derEncodings elementAtWithInt:i], [IOSByteArray class]);
      OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(derEncoding, output);
    }
  }
}

+ (OrgSpongycastleCryptoTlsCertificateRequest *)parseWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                      withJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsCertificateRequest_parseWithOrgSpongycastleCryptoTlsTlsContext_withJavaIoInputStream_(context, input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsCertificateRequest;", 0x9, 4, 5, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithShortArray:withJavaUtilVector:withJavaUtilVector:);
  methods[1].selector = @selector(getCertificateTypes);
  methods[2].selector = @selector(getSupportedSignatureAlgorithms);
  methods[3].selector = @selector(getCertificateAuthorities);
  methods[4].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[5].selector = @selector(parseWithOrgSpongycastleCryptoTlsTlsContext:withJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "certificateTypes_", "[S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "supportedSignatureAlgorithms_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "certificateAuthorities_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[SLJavaUtilVector;LJavaUtilVector;", "encode", "LJavaIoOutputStream;", "LJavaIoIOException;", "parse", "LOrgSpongycastleCryptoTlsTlsContext;LJavaIoInputStream;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsCertificateRequest = { "CertificateRequest", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsCertificateRequest;
}

@end

void OrgSpongycastleCryptoTlsCertificateRequest_initWithShortArray_withJavaUtilVector_withJavaUtilVector_(OrgSpongycastleCryptoTlsCertificateRequest *self, IOSShortArray *certificateTypes, JavaUtilVector *supportedSignatureAlgorithms, JavaUtilVector *certificateAuthorities) {
  NSObject_init(self);
  self->certificateTypes_ = certificateTypes;
  self->supportedSignatureAlgorithms_ = supportedSignatureAlgorithms;
  self->certificateAuthorities_ = certificateAuthorities;
}

OrgSpongycastleCryptoTlsCertificateRequest *new_OrgSpongycastleCryptoTlsCertificateRequest_initWithShortArray_withJavaUtilVector_withJavaUtilVector_(IOSShortArray *certificateTypes, JavaUtilVector *supportedSignatureAlgorithms, JavaUtilVector *certificateAuthorities) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsCertificateRequest, initWithShortArray_withJavaUtilVector_withJavaUtilVector_, certificateTypes, supportedSignatureAlgorithms, certificateAuthorities)
}

OrgSpongycastleCryptoTlsCertificateRequest *create_OrgSpongycastleCryptoTlsCertificateRequest_initWithShortArray_withJavaUtilVector_withJavaUtilVector_(IOSShortArray *certificateTypes, JavaUtilVector *supportedSignatureAlgorithms, JavaUtilVector *certificateAuthorities) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsCertificateRequest, initWithShortArray_withJavaUtilVector_withJavaUtilVector_, certificateTypes, supportedSignatureAlgorithms, certificateAuthorities)
}

OrgSpongycastleCryptoTlsCertificateRequest *OrgSpongycastleCryptoTlsCertificateRequest_parseWithOrgSpongycastleCryptoTlsTlsContext_withJavaIoInputStream_(id<OrgSpongycastleCryptoTlsTlsContext> context, JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsCertificateRequest_initialize();
  jint numTypes = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
  IOSShortArray *certificateTypes = [IOSShortArray newArrayWithLength:numTypes];
  for (jint i = 0; i < numTypes; ++i) {
    *IOSShortArray_GetRef(certificateTypes, i) = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
  }
  JavaUtilVector *supportedSignatureAlgorithms = nil;
  if (OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_(context)) {
    supportedSignatureAlgorithms = OrgSpongycastleCryptoTlsTlsUtils_parseSupportedSignatureAlgorithmsWithBoolean_withJavaIoInputStream_(false, input);
  }
  JavaUtilVector *certificateAuthorities = new_JavaUtilVector_init();
  IOSByteArray *certAuthData = OrgSpongycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(input);
  JavaIoByteArrayInputStream *bis = new_JavaIoByteArrayInputStream_initWithByteArray_(certAuthData);
  while ([bis available] > 0) {
    IOSByteArray *derEncoding = OrgSpongycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(bis);
    OrgSpongycastleAsn1ASN1Primitive *asn1 = OrgSpongycastleCryptoTlsTlsUtils_readDERObjectWithByteArray_(derEncoding);
    [certificateAuthorities addElementWithId:OrgSpongycastleAsn1X500X500Name_getInstanceWithId_(asn1)];
  }
  return new_OrgSpongycastleCryptoTlsCertificateRequest_initWithShortArray_withJavaUtilVector_withJavaUtilVector_(certificateTypes, supportedSignatureAlgorithms, certificateAuthorities);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsCertificateRequest)
