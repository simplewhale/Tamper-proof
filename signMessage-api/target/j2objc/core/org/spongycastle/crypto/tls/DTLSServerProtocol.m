//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DTLSServerProtocol.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/security/SecureRandom.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"
#include "org/spongycastle/asn1/x509/Certificate.h"
#include "org/spongycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/prng/RandomGenerator.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/Certificate.h"
#include "org/spongycastle/crypto/tls/CertificateRequest.h"
#include "org/spongycastle/crypto/tls/CertificateStatus.h"
#include "org/spongycastle/crypto/tls/CipherSuite.h"
#include "org/spongycastle/crypto/tls/ConnectionEnd.h"
#include "org/spongycastle/crypto/tls/ContentType.h"
#include "org/spongycastle/crypto/tls/DTLSProtocol.h"
#include "org/spongycastle/crypto/tls/DTLSRecordLayer.h"
#include "org/spongycastle/crypto/tls/DTLSReliableHandshake.h"
#include "org/spongycastle/crypto/tls/DTLSServerProtocol.h"
#include "org/spongycastle/crypto/tls/DTLSTransport.h"
#include "org/spongycastle/crypto/tls/DatagramTransport.h"
#include "org/spongycastle/crypto/tls/DigitallySigned.h"
#include "org/spongycastle/crypto/tls/ExporterLabel.h"
#include "org/spongycastle/crypto/tls/HandshakeType.h"
#include "org/spongycastle/crypto/tls/NewSessionTicket.h"
#include "org/spongycastle/crypto/tls/ProtocolVersion.h"
#include "org/spongycastle/crypto/tls/SecurityParameters.h"
#include "org/spongycastle/crypto/tls/SessionParameters.h"
#include "org/spongycastle/crypto/tls/SignatureAndHashAlgorithm.h"
#include "org/spongycastle/crypto/tls/TlsCipher.h"
#include "org/spongycastle/crypto/tls/TlsCredentials.h"
#include "org/spongycastle/crypto/tls/TlsExtensionsUtils.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsHandshakeHash.h"
#include "org/spongycastle/crypto/tls/TlsKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsProtocol.h"
#include "org/spongycastle/crypto/tls/TlsServer.h"
#include "org/spongycastle/crypto/tls/TlsServerContextImpl.h"
#include "org/spongycastle/crypto/tls/TlsSession.h"
#include "org/spongycastle/crypto/tls/TlsSigner.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/crypto/util/PublicKeyFactory.h"
#include "org/spongycastle/util/Arrays.h"

@implementation OrgSpongycastleCryptoTlsDTLSServerProtocol

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  OrgSpongycastleCryptoTlsDTLSServerProtocol_initWithJavaSecuritySecureRandom_(self, secureRandom);
  return self;
}

- (jboolean)getVerifyRequests {
  return verifyRequests_;
}

- (void)setVerifyRequestsWithBoolean:(jboolean)verifyRequests {
  self->verifyRequests_ = verifyRequests;
}

- (OrgSpongycastleCryptoTlsDTLSTransport *)acceptWithOrgSpongycastleCryptoTlsTlsServer:(id<OrgSpongycastleCryptoTlsTlsServer>)server
                                         withOrgSpongycastleCryptoTlsDatagramTransport:(id<OrgSpongycastleCryptoTlsDatagramTransport>)transport {
  if (server == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'server' cannot be null");
  }
  if (transport == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'transport' cannot be null");
  }
  OrgSpongycastleCryptoTlsSecurityParameters *securityParameters = new_OrgSpongycastleCryptoTlsSecurityParameters_init();
  securityParameters->entity_ = OrgSpongycastleCryptoTlsConnectionEnd_server;
  OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *state = new_OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState_init();
  state->server_ = server;
  state->serverContext_ = new_OrgSpongycastleCryptoTlsTlsServerContextImpl_initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoTlsSecurityParameters_(secureRandom_, securityParameters);
  securityParameters->serverRandom_ = OrgSpongycastleCryptoTlsTlsProtocol_createRandomBlockWithBoolean_withOrgSpongycastleCryptoPrngRandomGenerator_([server shouldUseGMTUnixTime], [((OrgSpongycastleCryptoTlsTlsServerContextImpl *) nil_chk(state->serverContext_)) getNonceRandomGenerator]);
  [server init__WithOrgSpongycastleCryptoTlsTlsServerContext:state->serverContext_];
  OrgSpongycastleCryptoTlsDTLSRecordLayer *recordLayer = new_OrgSpongycastleCryptoTlsDTLSRecordLayer_initWithOrgSpongycastleCryptoTlsDatagramTransport_withOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsPeer_withShort_(transport, state->serverContext_, server, OrgSpongycastleCryptoTlsContentType_handshake);
  @try {
    return [self serverHandshakeWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state withOrgSpongycastleCryptoTlsDTLSRecordLayer:recordLayer];
  }
  @catch (OrgSpongycastleCryptoTlsTlsFatalAlert *fatalAlert) {
    [self abortServerHandshakeWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state withOrgSpongycastleCryptoTlsDTLSRecordLayer:recordLayer withShort:[fatalAlert getAlertDescription]];
    @throw fatalAlert;
  }
  @catch (JavaIoIOException *e) {
    [self abortServerHandshakeWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state withOrgSpongycastleCryptoTlsDTLSRecordLayer:recordLayer withShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error];
    @throw e;
  }
  @catch (JavaLangRuntimeException *e) {
    [self abortServerHandshakeWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state withOrgSpongycastleCryptoTlsDTLSRecordLayer:recordLayer withShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error];
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_internal_error, e);
  }
  @finally {
    [securityParameters clear];
  }
}

- (void)abortServerHandshakeWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *)state
                                                    withOrgSpongycastleCryptoTlsDTLSRecordLayer:(OrgSpongycastleCryptoTlsDTLSRecordLayer *)recordLayer
                                                                                      withShort:(jshort)alertDescription {
  [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(recordLayer)) failWithShort:alertDescription];
  [self invalidateSessionWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state];
}

- (OrgSpongycastleCryptoTlsDTLSTransport *)serverHandshakeWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *)state
                                                                                  withOrgSpongycastleCryptoTlsDTLSRecordLayer:(OrgSpongycastleCryptoTlsDTLSRecordLayer *)recordLayer {
  OrgSpongycastleCryptoTlsSecurityParameters *securityParameters = [((OrgSpongycastleCryptoTlsTlsServerContextImpl *) nil_chk(((OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *) nil_chk(state))->serverContext_)) getSecurityParameters];
  OrgSpongycastleCryptoTlsDTLSReliableHandshake *handshake = new_OrgSpongycastleCryptoTlsDTLSReliableHandshake_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsDTLSRecordLayer_(state->serverContext_, recordLayer);
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *clientMessage = [handshake receiveMessage];
  if ([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(clientMessage)) getType] == OrgSpongycastleCryptoTlsHandshakeType_client_hello) {
    [self processClientHelloWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state withByteArray:[clientMessage getBody]];
  }
  else {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
  {
    IOSByteArray *serverHelloBody = [self generateServerHelloWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state];
    OrgSpongycastleCryptoTlsDTLSProtocol_applyMaxFragmentLengthExtensionWithOrgSpongycastleCryptoTlsDTLSRecordLayer_withShort_(recordLayer, ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters))->maxFragmentLength_);
    OrgSpongycastleCryptoTlsProtocolVersion *recordLayerVersion = [((OrgSpongycastleCryptoTlsTlsServerContextImpl *) nil_chk(state->serverContext_)) getServerVersion];
    [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(recordLayer)) setReadVersionWithOrgSpongycastleCryptoTlsProtocolVersion:recordLayerVersion];
    [recordLayer setWriteVersionWithOrgSpongycastleCryptoTlsProtocolVersion:recordLayerVersion];
    [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_server_hello withByteArray:serverHelloBody];
  }
  [handshake notifyHelloComplete];
  JavaUtilVector *serverSupplementalData = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) getServerSupplementalData];
  if (serverSupplementalData != nil) {
    IOSByteArray *supplementalDataBody = OrgSpongycastleCryptoTlsDTLSProtocol_generateSupplementalDataWithJavaUtilVector_(serverSupplementalData);
    [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_supplemental_data withByteArray:supplementalDataBody];
  }
  state->keyExchange_ = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) getKeyExchange];
  [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(state->keyExchange_)) init__WithOrgSpongycastleCryptoTlsTlsContext:state->serverContext_];
  state->serverCredentials_ = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) getCredentials];
  OrgSpongycastleCryptoTlsCertificate *serverCertificate = nil;
  if (state->serverCredentials_ == nil) {
    [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(state->keyExchange_)) skipServerCredentials];
  }
  else {
    [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(state->keyExchange_)) processServerCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:state->serverCredentials_];
    serverCertificate = [((id<OrgSpongycastleCryptoTlsTlsCredentials>) nil_chk(state->serverCredentials_)) getCertificate];
    IOSByteArray *certificateBody = OrgSpongycastleCryptoTlsDTLSProtocol_generateCertificateWithOrgSpongycastleCryptoTlsCertificate_(serverCertificate);
    [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_certificate withByteArray:certificateBody];
  }
  if (serverCertificate == nil || [serverCertificate isEmpty]) {
    state->allowCertificateStatus_ = false;
  }
  if (state->allowCertificateStatus_) {
    OrgSpongycastleCryptoTlsCertificateStatus *certificateStatus = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) getCertificateStatus];
    if (certificateStatus != nil) {
      IOSByteArray *certificateStatusBody = [self generateCertificateStatusWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state withOrgSpongycastleCryptoTlsCertificateStatus:certificateStatus];
      [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_certificate_status withByteArray:certificateStatusBody];
    }
  }
  IOSByteArray *serverKeyExchange = [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(state->keyExchange_)) generateServerKeyExchange];
  if (serverKeyExchange != nil) {
    [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_server_key_exchange withByteArray:serverKeyExchange];
  }
  if (state->serverCredentials_ != nil) {
    state->certificateRequest_ = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) getCertificateRequest];
    if (state->certificateRequest_ != nil) {
      if (OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_(state->serverContext_) != ([((OrgSpongycastleCryptoTlsCertificateRequest *) nil_chk(state->certificateRequest_)) getSupportedSignatureAlgorithms] != nil)) {
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
      }
      [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(state->keyExchange_)) validateCertificateRequestWithOrgSpongycastleCryptoTlsCertificateRequest:state->certificateRequest_];
      IOSByteArray *certificateRequestBody = [self generateCertificateRequestWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state withOrgSpongycastleCryptoTlsCertificateRequest:state->certificateRequest_];
      [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_certificate_request withByteArray:certificateRequestBody];
      OrgSpongycastleCryptoTlsTlsUtils_trackHashAlgorithmsWithOrgSpongycastleCryptoTlsTlsHandshakeHash_withJavaUtilVector_([handshake getHandshakeHash], [((OrgSpongycastleCryptoTlsCertificateRequest *) nil_chk(state->certificateRequest_)) getSupportedSignatureAlgorithms]);
    }
  }
  [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_server_hello_done withByteArray:JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES)];
  [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk([handshake getHandshakeHash])) sealHashAlgorithms];
  clientMessage = [handshake receiveMessage];
  if ([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(clientMessage)) getType] == OrgSpongycastleCryptoTlsHandshakeType_supplemental_data) {
    [self processClientSupplementalDataWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state withByteArray:[clientMessage getBody]];
    clientMessage = [handshake receiveMessage];
  }
  else {
    [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) processClientSupplementalDataWithJavaUtilVector:nil];
  }
  if (state->certificateRequest_ == nil) {
    [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(state->keyExchange_)) skipClientCredentials];
  }
  else {
    if ([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(clientMessage)) getType] == OrgSpongycastleCryptoTlsHandshakeType_certificate) {
      [self processClientCertificateWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state withByteArray:[clientMessage getBody]];
      clientMessage = [handshake receiveMessage];
    }
    else {
      if (OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_(state->serverContext_)) {
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
      }
      [self notifyClientCertificateWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state withOrgSpongycastleCryptoTlsCertificate:JreLoadStatic(OrgSpongycastleCryptoTlsCertificate, EMPTY_CHAIN)];
    }
  }
  if ([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(clientMessage)) getType] == OrgSpongycastleCryptoTlsHandshakeType_client_key_exchange) {
    [self processClientKeyExchangeWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state withByteArray:[clientMessage getBody]];
  }
  else {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
  id<OrgSpongycastleCryptoTlsTlsHandshakeHash> prepareFinishHash = [handshake prepareToFinish];
  securityParameters->sessionHash_ = OrgSpongycastleCryptoTlsTlsProtocol_getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsHandshakeHash_withByteArray_(state->serverContext_, prepareFinishHash, nil);
  OrgSpongycastleCryptoTlsTlsProtocol_establishMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsKeyExchange_(state->serverContext_, state->keyExchange_);
  [recordLayer initPendingEpochWithOrgSpongycastleCryptoTlsTlsCipher:[((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) getCipher]];
  if ([self expectCertificateVerifyMessageWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state]) {
    IOSByteArray *certificateVerifyBody = [handshake receiveMessageBodyWithShort:OrgSpongycastleCryptoTlsHandshakeType_certificate_verify];
    [self processCertificateVerifyWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state withByteArray:certificateVerifyBody withOrgSpongycastleCryptoTlsTlsHandshakeHash:prepareFinishHash];
  }
  IOSByteArray *expectedClientVerifyData = OrgSpongycastleCryptoTlsTlsUtils_calculateVerifyDataWithOrgSpongycastleCryptoTlsTlsContext_withNSString_withByteArray_(state->serverContext_, OrgSpongycastleCryptoTlsExporterLabel_client_finished, OrgSpongycastleCryptoTlsTlsProtocol_getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsHandshakeHash_withByteArray_(state->serverContext_, [handshake getHandshakeHash], nil));
  [self processFinishedWithByteArray:[handshake receiveMessageBodyWithShort:OrgSpongycastleCryptoTlsHandshakeType_finished] withByteArray:expectedClientVerifyData];
  if (state->expectSessionTicket_) {
    OrgSpongycastleCryptoTlsNewSessionTicket *newSessionTicket = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) getNewSessionTicket];
    IOSByteArray *newSessionTicketBody = [self generateNewSessionTicketWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state withOrgSpongycastleCryptoTlsNewSessionTicket:newSessionTicket];
    [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_session_ticket withByteArray:newSessionTicketBody];
  }
  IOSByteArray *serverVerifyData = OrgSpongycastleCryptoTlsTlsUtils_calculateVerifyDataWithOrgSpongycastleCryptoTlsTlsContext_withNSString_withByteArray_(state->serverContext_, OrgSpongycastleCryptoTlsExporterLabel_server_finished, OrgSpongycastleCryptoTlsTlsProtocol_getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsHandshakeHash_withByteArray_(state->serverContext_, [handshake getHandshakeHash], nil));
  [handshake sendMessageWithShort:OrgSpongycastleCryptoTlsHandshakeType_finished withByteArray:serverVerifyData];
  [handshake finish];
  [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) notifyHandshakeComplete];
  return new_OrgSpongycastleCryptoTlsDTLSTransport_initWithOrgSpongycastleCryptoTlsDTLSRecordLayer_(recordLayer);
}

- (IOSByteArray *)generateCertificateRequestWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *)state
                                                                 withOrgSpongycastleCryptoTlsCertificateRequest:(OrgSpongycastleCryptoTlsCertificateRequest *)certificateRequest {
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  [((OrgSpongycastleCryptoTlsCertificateRequest *) nil_chk(certificateRequest)) encodeWithJavaIoOutputStream:buf];
  return [buf toByteArray];
}

- (IOSByteArray *)generateCertificateStatusWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *)state
                                                                 withOrgSpongycastleCryptoTlsCertificateStatus:(OrgSpongycastleCryptoTlsCertificateStatus *)certificateStatus {
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  [((OrgSpongycastleCryptoTlsCertificateStatus *) nil_chk(certificateStatus)) encodeWithJavaIoOutputStream:buf];
  return [buf toByteArray];
}

- (IOSByteArray *)generateNewSessionTicketWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *)state
                                                                 withOrgSpongycastleCryptoTlsNewSessionTicket:(OrgSpongycastleCryptoTlsNewSessionTicket *)newSessionTicket {
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  [((OrgSpongycastleCryptoTlsNewSessionTicket *) nil_chk(newSessionTicket)) encodeWithJavaIoOutputStream:buf];
  return [buf toByteArray];
}

- (IOSByteArray *)generateServerHelloWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *)state {
  OrgSpongycastleCryptoTlsSecurityParameters *securityParameters = [((OrgSpongycastleCryptoTlsTlsServerContextImpl *) nil_chk(((OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *) nil_chk(state))->serverContext_)) getSecurityParameters];
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  {
    OrgSpongycastleCryptoTlsProtocolVersion *server_version = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) getServerVersion];
    if (![((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(server_version)) isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:[((OrgSpongycastleCryptoTlsTlsServerContextImpl *) nil_chk(state->serverContext_)) getClientVersion]]) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
    }
    [((OrgSpongycastleCryptoTlsTlsServerContextImpl *) nil_chk(state->serverContext_)) setServerVersionWithOrgSpongycastleCryptoTlsProtocolVersion:server_version];
    OrgSpongycastleCryptoTlsTlsUtils_writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion_withJavaIoOutputStream_([((OrgSpongycastleCryptoTlsTlsServerContextImpl *) nil_chk(state->serverContext_)) getServerVersion], buf);
  }
  [buf writeWithByteArray:[((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters)) getServerRandom]];
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES), buf);
  jint selectedCipherSuite = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) getSelectedCipherSuite];
  if (!OrgSpongycastleUtilArrays_containsWithIntArray_withInt_(state->offeredCipherSuites_, selectedCipherSuite) || selectedCipherSuite == OrgSpongycastleCryptoTlsCipherSuite_TLS_NULL_WITH_NULL_NULL || OrgSpongycastleCryptoTlsCipherSuite_isSCSVWithInt_(selectedCipherSuite) || !OrgSpongycastleCryptoTlsTlsUtils_isValidCipherSuiteForVersionWithInt_withOrgSpongycastleCryptoTlsProtocolVersion_(selectedCipherSuite, [((OrgSpongycastleCryptoTlsTlsServerContextImpl *) nil_chk(state->serverContext_)) getServerVersion])) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  OrgSpongycastleCryptoTlsDTLSProtocol_validateSelectedCipherSuiteWithInt_withShort_(selectedCipherSuite, OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  securityParameters->cipherSuite_ = selectedCipherSuite;
  jshort selectedCompressionMethod = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) getSelectedCompressionMethod];
  if (!OrgSpongycastleUtilArrays_containsWithShortArray_withShort_(state->offeredCompressionMethods_, selectedCompressionMethod)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  securityParameters->compressionAlgorithm_ = selectedCompressionMethod;
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(selectedCipherSuite, buf);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(selectedCompressionMethod, buf);
  state->serverExtensions_ = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) getServerExtensions];
  if (state->secure_renegotiation_) {
    IOSByteArray *renegExtData = OrgSpongycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(state->serverExtensions_, JreLoadStatic(OrgSpongycastleCryptoTlsTlsProtocol, EXT_RenegotiationInfo));
    jboolean noRenegExt = nil == renegExtData;
    if (noRenegExt) {
      state->serverExtensions_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_ensureExtensionsInitialisedWithJavaUtilHashtable_(state->serverExtensions_);
      (void) [((JavaUtilHashtable *) nil_chk(state->serverExtensions_)) putWithId:JreLoadStatic(OrgSpongycastleCryptoTlsTlsProtocol, EXT_RenegotiationInfo) withId:OrgSpongycastleCryptoTlsTlsProtocol_createRenegotiationInfoWithByteArray_(JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES))];
    }
  }
  if (securityParameters->extendedMasterSecret_) {
    state->serverExtensions_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_ensureExtensionsInitialisedWithJavaUtilHashtable_(state->serverExtensions_);
    OrgSpongycastleCryptoTlsTlsExtensionsUtils_addExtendedMasterSecretExtensionWithJavaUtilHashtable_(state->serverExtensions_);
  }
  if (state->serverExtensions_ != nil) {
    securityParameters->encryptThenMAC_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_hasEncryptThenMACExtensionWithJavaUtilHashtable_(state->serverExtensions_);
    securityParameters->maxFragmentLength_ = OrgSpongycastleCryptoTlsDTLSProtocol_evaluateMaxFragmentLengthExtensionWithBoolean_withJavaUtilHashtable_withJavaUtilHashtable_withShort_(state->resumedSession_, state->clientExtensions_, state->serverExtensions_, OrgSpongycastleCryptoTlsAlertDescription_internal_error);
    securityParameters->truncatedHMac_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_hasTruncatedHMacExtensionWithJavaUtilHashtable_(state->serverExtensions_);
    state->allowCertificateStatus_ = (!state->resumedSession_ && OrgSpongycastleCryptoTlsTlsUtils_hasExpectedEmptyExtensionDataWithJavaUtilHashtable_withJavaLangInteger_withShort_(state->serverExtensions_, JreLoadStatic(OrgSpongycastleCryptoTlsTlsExtensionsUtils, EXT_status_request), OrgSpongycastleCryptoTlsAlertDescription_internal_error));
    state->expectSessionTicket_ = (!state->resumedSession_ && OrgSpongycastleCryptoTlsTlsUtils_hasExpectedEmptyExtensionDataWithJavaUtilHashtable_withJavaLangInteger_withShort_(state->serverExtensions_, JreLoadStatic(OrgSpongycastleCryptoTlsTlsProtocol, EXT_SessionTicket), OrgSpongycastleCryptoTlsAlertDescription_internal_error));
    OrgSpongycastleCryptoTlsTlsProtocol_writeExtensionsWithJavaIoOutputStream_withJavaUtilHashtable_(buf, state->serverExtensions_);
  }
  securityParameters->prfAlgorithm_ = OrgSpongycastleCryptoTlsTlsProtocol_getPRFAlgorithmWithOrgSpongycastleCryptoTlsTlsContext_withInt_(state->serverContext_, [securityParameters getCipherSuite]);
  securityParameters->verifyDataLength_ = 12;
  return [buf toByteArray];
}

- (void)invalidateSessionWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *)state {
  if (((OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *) nil_chk(state))->sessionParameters_ != nil) {
    [state->sessionParameters_ clear];
    state->sessionParameters_ = nil;
  }
  if (state->tlsSession_ != nil) {
    [state->tlsSession_ invalidate];
    state->tlsSession_ = nil;
  }
}

- (void)notifyClientCertificateWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *)state
                                                           withOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)clientCertificate {
  if (((OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *) nil_chk(state))->certificateRequest_ == nil) {
    @throw new_JavaLangIllegalStateException_init();
  }
  if (state->clientCertificate_ != nil) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
  state->clientCertificate_ = clientCertificate;
  if ([((OrgSpongycastleCryptoTlsCertificate *) nil_chk(clientCertificate)) isEmpty]) {
    [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(state->keyExchange_)) skipClientCredentials];
  }
  else {
    state->clientCertificateType_ = OrgSpongycastleCryptoTlsTlsUtils_getClientCertificateTypeWithOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoTlsCertificate_(clientCertificate, [((id<OrgSpongycastleCryptoTlsTlsCredentials>) nil_chk(state->serverCredentials_)) getCertificate]);
    [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(state->keyExchange_)) processClientCertificateWithOrgSpongycastleCryptoTlsCertificate:clientCertificate];
  }
  [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) notifyClientCertificateWithOrgSpongycastleCryptoTlsCertificate:clientCertificate];
}

- (void)processClientCertificateWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *)state
                                                                                      withByteArray:(IOSByteArray *)body {
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(body);
  OrgSpongycastleCryptoTlsCertificate *clientCertificate = OrgSpongycastleCryptoTlsCertificate_parseWithJavaIoInputStream_(buf);
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  [self notifyClientCertificateWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:state withOrgSpongycastleCryptoTlsCertificate:clientCertificate];
}

- (void)processCertificateVerifyWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *)state
                                                                                      withByteArray:(IOSByteArray *)body
                                                       withOrgSpongycastleCryptoTlsTlsHandshakeHash:(id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)prepareFinishHash {
  if (((OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *) nil_chk(state))->certificateRequest_ == nil) {
    @throw new_JavaLangIllegalStateException_init();
  }
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(body);
  OrgSpongycastleCryptoTlsTlsServerContextImpl *context = state->serverContext_;
  OrgSpongycastleCryptoTlsDigitallySigned *clientCertificateVerify = OrgSpongycastleCryptoTlsDigitallySigned_parseWithOrgSpongycastleCryptoTlsTlsContext_withJavaIoInputStream_(context, buf);
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  @try {
    OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAlgorithm = [((OrgSpongycastleCryptoTlsDigitallySigned *) nil_chk(clientCertificateVerify)) getAlgorithm];
    IOSByteArray *hash_;
    if (OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_(context)) {
      OrgSpongycastleCryptoTlsTlsUtils_verifySupportedSignatureAlgorithmWithJavaUtilVector_withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_([((OrgSpongycastleCryptoTlsCertificateRequest *) nil_chk(state->certificateRequest_)) getSupportedSignatureAlgorithms], signatureAlgorithm);
      hash_ = [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk(prepareFinishHash)) getFinalHashWithShort:[((OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *) nil_chk(signatureAlgorithm)) getHash]];
    }
    else {
      hash_ = [((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk([((OrgSpongycastleCryptoTlsTlsServerContextImpl *) nil_chk(context)) getSecurityParameters])) getSessionHash];
    }
    OrgSpongycastleAsn1X509Certificate *x509Cert = [((OrgSpongycastleCryptoTlsCertificate *) nil_chk(state->clientCertificate_)) getCertificateAtWithInt:0];
    OrgSpongycastleAsn1X509SubjectPublicKeyInfo *keyInfo = [((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Cert)) getSubjectPublicKeyInfo];
    OrgSpongycastleCryptoParamsAsymmetricKeyParameter *publicKey = OrgSpongycastleCryptoUtilPublicKeyFactory_createKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(keyInfo);
    id<OrgSpongycastleCryptoTlsTlsSigner> tlsSigner = OrgSpongycastleCryptoTlsTlsUtils_createTlsSignerWithShort_(state->clientCertificateType_);
    [((id<OrgSpongycastleCryptoTlsTlsSigner>) nil_chk(tlsSigner)) init__WithOrgSpongycastleCryptoTlsTlsContext:context];
    if (![tlsSigner verifyRawSignatureWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:signatureAlgorithm withByteArray:[clientCertificateVerify getSignature] withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:publicKey withByteArray:hash_]) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decrypt_error);
    }
  }
  @catch (OrgSpongycastleCryptoTlsTlsFatalAlert *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_decrypt_error, e);
  }
}

- (void)processClientHelloWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *)state
                                                                                withByteArray:(IOSByteArray *)body {
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(body);
  OrgSpongycastleCryptoTlsProtocolVersion *client_version = OrgSpongycastleCryptoTlsTlsUtils_readVersionWithJavaIoInputStream_(buf);
  if (![((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(client_version)) isDTLS]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  IOSByteArray *client_random = OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(32, buf);
  IOSByteArray *sessionID = OrgSpongycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(buf);
  if (((IOSByteArray *) nil_chk(sessionID))->size_ > 32) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  IOSByteArray *cookie = OrgSpongycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(buf);
  jint cipher_suites_length = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(buf);
  if (cipher_suites_length < 2 || (cipher_suites_length & 1) != 0) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  ((OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *) nil_chk(state))->offeredCipherSuites_ = OrgSpongycastleCryptoTlsTlsUtils_readUint16ArrayWithInt_withJavaIoInputStream_(cipher_suites_length / 2, buf);
  jint compression_methods_length = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(buf);
  if (compression_methods_length < 1) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  state->offeredCompressionMethods_ = OrgSpongycastleCryptoTlsTlsUtils_readUint8ArrayWithInt_withJavaIoInputStream_(compression_methods_length, buf);
  state->clientExtensions_ = OrgSpongycastleCryptoTlsTlsProtocol_readExtensionsWithJavaIoByteArrayInputStream_(buf);
  OrgSpongycastleCryptoTlsTlsServerContextImpl *context = state->serverContext_;
  OrgSpongycastleCryptoTlsSecurityParameters *securityParameters = [((OrgSpongycastleCryptoTlsTlsServerContextImpl *) nil_chk(context)) getSecurityParameters];
  ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters))->extendedMasterSecret_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_hasExtendedMasterSecretExtensionWithJavaUtilHashtable_(state->clientExtensions_);
  [context setClientVersionWithOrgSpongycastleCryptoTlsProtocolVersion:client_version];
  [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) notifyClientVersionWithOrgSpongycastleCryptoTlsProtocolVersion:client_version];
  [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) notifyFallbackWithBoolean:OrgSpongycastleUtilArrays_containsWithIntArray_withInt_(state->offeredCipherSuites_, OrgSpongycastleCryptoTlsCipherSuite_TLS_FALLBACK_SCSV)];
  securityParameters->clientRandom_ = client_random;
  [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) notifyOfferedCipherSuitesWithIntArray:state->offeredCipherSuites_];
  [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) notifyOfferedCompressionMethodsWithShortArray:state->offeredCompressionMethods_];
  {
    if (OrgSpongycastleUtilArrays_containsWithIntArray_withInt_(state->offeredCipherSuites_, OrgSpongycastleCryptoTlsCipherSuite_TLS_EMPTY_RENEGOTIATION_INFO_SCSV)) {
      state->secure_renegotiation_ = true;
    }
    IOSByteArray *renegExtData = OrgSpongycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(state->clientExtensions_, JreLoadStatic(OrgSpongycastleCryptoTlsTlsProtocol, EXT_RenegotiationInfo));
    if (renegExtData != nil) {
      state->secure_renegotiation_ = true;
      if (!OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(renegExtData, OrgSpongycastleCryptoTlsTlsProtocol_createRenegotiationInfoWithByteArray_(JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES)))) {
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_handshake_failure);
      }
    }
  }
  [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) notifySecureRenegotiationWithBoolean:state->secure_renegotiation_];
  if (state->clientExtensions_ != nil) {
    OrgSpongycastleCryptoTlsTlsExtensionsUtils_getPaddingExtensionWithJavaUtilHashtable_(state->clientExtensions_);
    [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(state->server_)) processClientExtensionsWithJavaUtilHashtable:state->clientExtensions_];
  }
}

- (void)processClientKeyExchangeWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *)state
                                                                                      withByteArray:(IOSByteArray *)body {
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(body);
  [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(((OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *) nil_chk(state))->keyExchange_)) processClientKeyExchangeWithJavaIoInputStream:buf];
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
}

- (void)processClientSupplementalDataWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *)state
                                                                                           withByteArray:(IOSByteArray *)body {
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(body);
  JavaUtilVector *clientSupplementalData = OrgSpongycastleCryptoTlsTlsProtocol_readSupplementalDataMessageWithJavaIoByteArrayInputStream_(buf);
  [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(((OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *) nil_chk(state))->server_)) processClientSupplementalDataWithJavaUtilVector:clientSupplementalData];
}

- (jboolean)expectCertificateVerifyMessageWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *)state {
  return ((OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *) nil_chk(state))->clientCertificateType_ >= 0 && OrgSpongycastleCryptoTlsTlsUtils_hasSigningCapabilityWithShort_(state->clientCertificateType_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsDTLSTransport;", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsDTLSTransport;", 0x4, 8, 9, 5, -1, -1, -1 },
    { NULL, "[B", 0x4, 10, 11, 5, -1, -1, -1 },
    { NULL, "[B", 0x4, 12, 13, 5, -1, -1, -1 },
    { NULL, "[B", 0x4, 14, 15, 5, -1, -1, -1 },
    { NULL, "[B", 0x4, 16, 17, 5, -1, -1, -1 },
    { NULL, "V", 0x4, 18, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 19, 20, 5, -1, -1, -1 },
    { NULL, "V", 0x4, 21, 22, 5, -1, -1, -1 },
    { NULL, "V", 0x4, 23, 24, 5, -1, -1, -1 },
    { NULL, "V", 0x4, 25, 22, 5, -1, -1, -1 },
    { NULL, "V", 0x4, 26, 22, 5, -1, -1, -1 },
    { NULL, "V", 0x4, 27, 22, 5, -1, -1, -1 },
    { NULL, "Z", 0x4, 28, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaSecuritySecureRandom:);
  methods[1].selector = @selector(getVerifyRequests);
  methods[2].selector = @selector(setVerifyRequestsWithBoolean:);
  methods[3].selector = @selector(acceptWithOrgSpongycastleCryptoTlsTlsServer:withOrgSpongycastleCryptoTlsDatagramTransport:);
  methods[4].selector = @selector(abortServerHandshakeWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:withOrgSpongycastleCryptoTlsDTLSRecordLayer:withShort:);
  methods[5].selector = @selector(serverHandshakeWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:withOrgSpongycastleCryptoTlsDTLSRecordLayer:);
  methods[6].selector = @selector(generateCertificateRequestWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:withOrgSpongycastleCryptoTlsCertificateRequest:);
  methods[7].selector = @selector(generateCertificateStatusWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:withOrgSpongycastleCryptoTlsCertificateStatus:);
  methods[8].selector = @selector(generateNewSessionTicketWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:withOrgSpongycastleCryptoTlsNewSessionTicket:);
  methods[9].selector = @selector(generateServerHelloWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:);
  methods[10].selector = @selector(invalidateSessionWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:);
  methods[11].selector = @selector(notifyClientCertificateWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:withOrgSpongycastleCryptoTlsCertificate:);
  methods[12].selector = @selector(processClientCertificateWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:withByteArray:);
  methods[13].selector = @selector(processCertificateVerifyWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:withByteArray:withOrgSpongycastleCryptoTlsTlsHandshakeHash:);
  methods[14].selector = @selector(processClientHelloWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:withByteArray:);
  methods[15].selector = @selector(processClientKeyExchangeWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:withByteArray:);
  methods[16].selector = @selector(processClientSupplementalDataWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:withByteArray:);
  methods[17].selector = @selector(expectCertificateVerifyMessageWithOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "verifyRequests_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaSecuritySecureRandom;", "setVerifyRequests", "Z", "accept", "LOrgSpongycastleCryptoTlsTlsServer;LOrgSpongycastleCryptoTlsDatagramTransport;", "LJavaIoIOException;", "abortServerHandshake", "LOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState;LOrgSpongycastleCryptoTlsDTLSRecordLayer;S", "serverHandshake", "LOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState;LOrgSpongycastleCryptoTlsDTLSRecordLayer;", "generateCertificateRequest", "LOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState;LOrgSpongycastleCryptoTlsCertificateRequest;", "generateCertificateStatus", "LOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState;LOrgSpongycastleCryptoTlsCertificateStatus;", "generateNewSessionTicket", "LOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState;LOrgSpongycastleCryptoTlsNewSessionTicket;", "generateServerHello", "LOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState;", "invalidateSession", "notifyClientCertificate", "LOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState;LOrgSpongycastleCryptoTlsCertificate;", "processClientCertificate", "LOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState;[B", "processCertificateVerify", "LOrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState;[BLOrgSpongycastleCryptoTlsTlsHandshakeHash;", "processClientHello", "processClientKeyExchange", "processClientSupplementalData", "expectCertificateVerifyMessage" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDTLSServerProtocol = { "DTLSServerProtocol", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 18, 1, -1, 17, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDTLSServerProtocol;
}

@end

void OrgSpongycastleCryptoTlsDTLSServerProtocol_initWithJavaSecuritySecureRandom_(OrgSpongycastleCryptoTlsDTLSServerProtocol *self, JavaSecuritySecureRandom *secureRandom) {
  OrgSpongycastleCryptoTlsDTLSProtocol_initWithJavaSecuritySecureRandom_(self, secureRandom);
  self->verifyRequests_ = true;
}

OrgSpongycastleCryptoTlsDTLSServerProtocol *new_OrgSpongycastleCryptoTlsDTLSServerProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDTLSServerProtocol, initWithJavaSecuritySecureRandom_, secureRandom)
}

OrgSpongycastleCryptoTlsDTLSServerProtocol *create_OrgSpongycastleCryptoTlsDTLSServerProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDTLSServerProtocol, initWithJavaSecuritySecureRandom_, secureRandom)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDTLSServerProtocol)

@implementation OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "server_", "LOrgSpongycastleCryptoTlsTlsServer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "serverContext_", "LOrgSpongycastleCryptoTlsTlsServerContextImpl;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tlsSession_", "LOrgSpongycastleCryptoTlsTlsSession;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sessionParameters_", "LOrgSpongycastleCryptoTlsSessionParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sessionParametersBuilder_", "LOrgSpongycastleCryptoTlsSessionParameters_Builder;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "offeredCipherSuites_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "offeredCompressionMethods_", "[S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "clientExtensions_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "serverExtensions_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "resumedSession_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "secure_renegotiation_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "allowCertificateStatus_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "expectSessionTicket_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "keyExchange_", "LOrgSpongycastleCryptoTlsTlsKeyExchange;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "serverCredentials_", "LOrgSpongycastleCryptoTlsTlsCredentials;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "certificateRequest_", "LOrgSpongycastleCryptoTlsCertificateRequest;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "clientCertificateType_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "clientCertificate_", "LOrgSpongycastleCryptoTlsCertificate;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsDTLSServerProtocol;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState = { "ServerHandshakeState", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0xc, 1, 18, 0, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState;
}

@end

void OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState_init(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *self) {
  NSObject_init(self);
  self->server_ = nil;
  self->serverContext_ = nil;
  self->tlsSession_ = nil;
  self->sessionParameters_ = nil;
  self->sessionParametersBuilder_ = nil;
  self->offeredCipherSuites_ = nil;
  self->offeredCompressionMethods_ = nil;
  self->clientExtensions_ = nil;
  self->serverExtensions_ = nil;
  self->resumedSession_ = false;
  self->secure_renegotiation_ = false;
  self->allowCertificateStatus_ = false;
  self->expectSessionTicket_ = false;
  self->keyExchange_ = nil;
  self->serverCredentials_ = nil;
  self->certificateRequest_ = nil;
  self->clientCertificateType_ = -1;
  self->clientCertificate_ = nil;
}

OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *new_OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState, init)
}

OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState *create_OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDTLSServerProtocol_ServerHandshakeState)
