//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsSRPKeyExchange.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsSRPKeyExchange")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsTlsSRPKeyExchange
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsSRPKeyExchange 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsSRPKeyExchange 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsTlsSRPKeyExchange

#if !defined (OrgSpongycastleCryptoTlsTlsSRPKeyExchange_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsSRPKeyExchange || defined(INCLUDE_OrgSpongycastleCryptoTlsTlsSRPKeyExchange))
#define OrgSpongycastleCryptoTlsTlsSRPKeyExchange_

#define RESTRICT_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange 1
#define INCLUDE_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange 1
#include "org/spongycastle/crypto/tls/AbstractTlsKeyExchange.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaMathBigInteger;
@class JavaUtilVector;
@class OrgSpongycastleCryptoAgreementSrpSRP6Client;
@class OrgSpongycastleCryptoAgreementSrpSRP6Server;
@class OrgSpongycastleCryptoParamsAsymmetricKeyParameter;
@class OrgSpongycastleCryptoParamsSRP6GroupParameters;
@class OrgSpongycastleCryptoTlsCertificate;
@class OrgSpongycastleCryptoTlsCertificateRequest;
@class OrgSpongycastleCryptoTlsSecurityParameters;
@class OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;
@class OrgSpongycastleCryptoTlsTlsSRPLoginParameters;
@protocol OrgSpongycastleCryptoSigner;
@protocol OrgSpongycastleCryptoTlsTlsContext;
@protocol OrgSpongycastleCryptoTlsTlsCredentials;
@protocol OrgSpongycastleCryptoTlsTlsSRPGroupVerifier;
@protocol OrgSpongycastleCryptoTlsTlsSigner;
@protocol OrgSpongycastleCryptoTlsTlsSignerCredentials;

@interface OrgSpongycastleCryptoTlsTlsSRPKeyExchange : OrgSpongycastleCryptoTlsAbstractTlsKeyExchange {
 @public
  id<OrgSpongycastleCryptoTlsTlsSigner> tlsSigner_;
  id<OrgSpongycastleCryptoTlsTlsSRPGroupVerifier> groupVerifier_;
  IOSByteArray *identity_;
  IOSByteArray *password_;
  OrgSpongycastleCryptoParamsAsymmetricKeyParameter *serverPublicKey_;
  OrgSpongycastleCryptoParamsSRP6GroupParameters *srpGroup_;
  OrgSpongycastleCryptoAgreementSrpSRP6Client *srpClient_;
  OrgSpongycastleCryptoAgreementSrpSRP6Server *srpServer_;
  JavaMathBigInteger *srpPeerCredentials_;
  JavaMathBigInteger *srpVerifier_;
  IOSByteArray *srpSalt_;
  id<OrgSpongycastleCryptoTlsTlsSignerCredentials> serverCredentials_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
              withByteArray:(IOSByteArray *)identity
              withByteArray:(IOSByteArray *)password;

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
              withByteArray:(IOSByteArray *)identity
withOrgSpongycastleCryptoTlsTlsSRPLoginParameters:(OrgSpongycastleCryptoTlsTlsSRPLoginParameters *)loginParameters;

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
withOrgSpongycastleCryptoTlsTlsSRPGroupVerifier:(id<OrgSpongycastleCryptoTlsTlsSRPGroupVerifier>)groupVerifier
              withByteArray:(IOSByteArray *)identity
              withByteArray:(IOSByteArray *)password;

- (void)generateClientKeyExchangeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (IOSByteArray *)generatePremasterSecret;

- (IOSByteArray *)generateServerKeyExchange;

- (void)init__WithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context OBJC_METHOD_FAMILY_NONE;

- (void)processClientCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:(id<OrgSpongycastleCryptoTlsTlsCredentials>)clientCredentials;

- (void)processClientKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (void)processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)serverCertificate;

- (void)processServerCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:(id<OrgSpongycastleCryptoTlsTlsCredentials>)serverCredentials;

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (jboolean)requiresServerKeyExchange;

- (void)skipServerCredentials;

- (void)validateCertificateRequestWithOrgSpongycastleCryptoTlsCertificateRequest:(OrgSpongycastleCryptoTlsCertificateRequest *)certificateRequest;

#pragma mark Protected

+ (id<OrgSpongycastleCryptoTlsTlsSigner>)createSignerWithInt:(jint)keyExchange;

- (id<OrgSpongycastleCryptoSigner>)initVerifyerWithOrgSpongycastleCryptoTlsTlsSigner:(id<OrgSpongycastleCryptoTlsTlsSigner>)tlsSigner
                               withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                      withOrgSpongycastleCryptoTlsSecurityParameters:(OrgSpongycastleCryptoTlsSecurityParameters *)securityParameters OBJC_METHOD_FAMILY_NONE;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithInt:(jint)arg0
         withJavaUtilVector:(JavaUtilVector *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsTlsSRPKeyExchange)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, tlsSigner_, id<OrgSpongycastleCryptoTlsTlsSigner>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, groupVerifier_, id<OrgSpongycastleCryptoTlsTlsSRPGroupVerifier>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, identity_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, password_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, serverPublicKey_, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, srpGroup_, OrgSpongycastleCryptoParamsSRP6GroupParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, srpClient_, OrgSpongycastleCryptoAgreementSrpSRP6Client *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, srpServer_, OrgSpongycastleCryptoAgreementSrpSRP6Server *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, srpPeerCredentials_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, srpVerifier_, JavaMathBigInteger *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, srpSalt_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, serverCredentials_, id<OrgSpongycastleCryptoTlsTlsSignerCredentials>)

FOUNDATION_EXPORT id<OrgSpongycastleCryptoTlsTlsSigner> OrgSpongycastleCryptoTlsTlsSRPKeyExchange_createSignerWithInt_(jint keyExchange);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withByteArray_withByteArray_(OrgSpongycastleCryptoTlsTlsSRPKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSByteArray *identity, IOSByteArray *password);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsSRPKeyExchange *new_OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withByteArray_withByteArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSByteArray *identity, IOSByteArray *password) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsSRPKeyExchange *create_OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withByteArray_withByteArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSByteArray *identity, IOSByteArray *password);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(OrgSpongycastleCryptoTlsTlsSRPKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<OrgSpongycastleCryptoTlsTlsSRPGroupVerifier> groupVerifier, IOSByteArray *identity, IOSByteArray *password);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsSRPKeyExchange *new_OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<OrgSpongycastleCryptoTlsTlsSRPGroupVerifier> groupVerifier, IOSByteArray *identity, IOSByteArray *password) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsSRPKeyExchange *create_OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<OrgSpongycastleCryptoTlsTlsSRPGroupVerifier> groupVerifier, IOSByteArray *identity, IOSByteArray *password);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withByteArray_withOrgSpongycastleCryptoTlsTlsSRPLoginParameters_(OrgSpongycastleCryptoTlsTlsSRPKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSByteArray *identity, OrgSpongycastleCryptoTlsTlsSRPLoginParameters *loginParameters);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsSRPKeyExchange *new_OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withByteArray_withOrgSpongycastleCryptoTlsTlsSRPLoginParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSByteArray *identity, OrgSpongycastleCryptoTlsTlsSRPLoginParameters *loginParameters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsSRPKeyExchange *create_OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withByteArray_withOrgSpongycastleCryptoTlsTlsSRPLoginParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSByteArray *identity, OrgSpongycastleCryptoTlsTlsSRPLoginParameters *loginParameters);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsTlsSRPKeyExchange)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsSRPKeyExchange")
