//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Short.h"
#include "java/lang/System.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"
#include "org/spongycastle/asn1/ASN1Encoding.h"
#include "org/spongycastle/asn1/ASN1InputStream.h"
#include "org/spongycastle/asn1/ASN1ObjectIdentifier.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/nist/NISTObjectIdentifiers.h"
#include "org/spongycastle/asn1/pkcs/PKCSObjectIdentifiers.h"
#include "org/spongycastle/asn1/x509/Certificate.h"
#include "org/spongycastle/asn1/x509/Extensions.h"
#include "org/spongycastle/asn1/x509/KeyUsage.h"
#include "org/spongycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/spongycastle/asn1/x509/TBSCertificate.h"
#include "org/spongycastle/asn1/x509/X509ObjectIdentifiers.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/digests/MD5Digest.h"
#include "org/spongycastle/crypto/digests/SHA1Digest.h"
#include "org/spongycastle/crypto/digests/SHA224Digest.h"
#include "org/spongycastle/crypto/digests/SHA256Digest.h"
#include "org/spongycastle/crypto/digests/SHA384Digest.h"
#include "org/spongycastle/crypto/digests/SHA512Digest.h"
#include "org/spongycastle/crypto/macs/HMac.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/DSAPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/RSAKeyParameters.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/Certificate.h"
#include "org/spongycastle/crypto/tls/CipherSuite.h"
#include "org/spongycastle/crypto/tls/CipherType.h"
#include "org/spongycastle/crypto/tls/ClientCertificateType.h"
#include "org/spongycastle/crypto/tls/CombinedHash.h"
#include "org/spongycastle/crypto/tls/EncryptionAlgorithm.h"
#include "org/spongycastle/crypto/tls/ExporterLabel.h"
#include "org/spongycastle/crypto/tls/ExtensionType.h"
#include "org/spongycastle/crypto/tls/HashAlgorithm.h"
#include "org/spongycastle/crypto/tls/KeyExchangeAlgorithm.h"
#include "org/spongycastle/crypto/tls/MACAlgorithm.h"
#include "org/spongycastle/crypto/tls/PRFAlgorithm.h"
#include "org/spongycastle/crypto/tls/ProtocolVersion.h"
#include "org/spongycastle/crypto/tls/SecurityParameters.h"
#include "org/spongycastle/crypto/tls/SessionParameters.h"
#include "org/spongycastle/crypto/tls/SignatureAlgorithm.h"
#include "org/spongycastle/crypto/tls/SignatureAndHashAlgorithm.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsDSSSigner.h"
#include "org/spongycastle/crypto/tls/TlsECDSASigner.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsHandshakeHash.h"
#include "org/spongycastle/crypto/tls/TlsProtocol.h"
#include "org/spongycastle/crypto/tls/TlsRSASigner.h"
#include "org/spongycastle/crypto/tls/TlsSession.h"
#include "org/spongycastle/crypto/tls/TlsSessionImpl.h"
#include "org/spongycastle/crypto/tls/TlsSigner.h"
#include "org/spongycastle/crypto/tls/TlsSignerCredentials.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/crypto/util/PublicKeyFactory.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/Integers.h"
#include "org/spongycastle/util/Shorts.h"
#include "org/spongycastle/util/Strings.h"
#include "org/spongycastle/util/io/Streams.h"

@interface OrgSpongycastleCryptoTlsTlsUtils ()

+ (IOSObjectArray *)genSSL3Const;

+ (JavaUtilVector *)vectorOfOneWithId:(id)obj;

@end

__attribute__((unused)) static IOSObjectArray *OrgSpongycastleCryptoTlsTlsUtils_genSSL3Const(void);

__attribute__((unused)) static JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_vectorOfOneWithId_(id obj);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoTlsTlsUtils)

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_EMPTY_BYTES;
IOSShortArray *OrgSpongycastleCryptoTlsTlsUtils_EMPTY_SHORTS;
IOSIntArray *OrgSpongycastleCryptoTlsTlsUtils_EMPTY_INTS;
IOSLongArray *OrgSpongycastleCryptoTlsTlsUtils_EMPTY_LONGS;
JavaLangInteger *OrgSpongycastleCryptoTlsTlsUtils_EXT_signature_algorithms;
IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_SSL_CLIENT;
IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_SSL_SERVER;
IOSObjectArray *OrgSpongycastleCryptoTlsTlsUtils_SSL3_CONST;

@implementation OrgSpongycastleCryptoTlsTlsUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsTlsUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)checkUint8WithShort:(jshort)i {
  OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithShort_(i);
}

+ (void)checkUint8WithInt:(jint)i {
  OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithInt_(i);
}

+ (void)checkUint8WithLong:(jlong)i {
  OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithLong_(i);
}

+ (void)checkUint16WithInt:(jint)i {
  OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithInt_(i);
}

+ (void)checkUint16WithLong:(jlong)i {
  OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithLong_(i);
}

+ (void)checkUint24WithInt:(jint)i {
  OrgSpongycastleCryptoTlsTlsUtils_checkUint24WithInt_(i);
}

+ (void)checkUint24WithLong:(jlong)i {
  OrgSpongycastleCryptoTlsTlsUtils_checkUint24WithLong_(i);
}

+ (void)checkUint32WithLong:(jlong)i {
  OrgSpongycastleCryptoTlsTlsUtils_checkUint32WithLong_(i);
}

+ (void)checkUint48WithLong:(jlong)i {
  OrgSpongycastleCryptoTlsTlsUtils_checkUint48WithLong_(i);
}

+ (void)checkUint64WithLong:(jlong)i {
  OrgSpongycastleCryptoTlsTlsUtils_checkUint64WithLong_(i);
}

+ (jboolean)isValidUint8WithShort:(jshort)i {
  return OrgSpongycastleCryptoTlsTlsUtils_isValidUint8WithShort_(i);
}

+ (jboolean)isValidUint8WithInt:(jint)i {
  return OrgSpongycastleCryptoTlsTlsUtils_isValidUint8WithInt_(i);
}

+ (jboolean)isValidUint8WithLong:(jlong)i {
  return OrgSpongycastleCryptoTlsTlsUtils_isValidUint8WithLong_(i);
}

+ (jboolean)isValidUint16WithInt:(jint)i {
  return OrgSpongycastleCryptoTlsTlsUtils_isValidUint16WithInt_(i);
}

+ (jboolean)isValidUint16WithLong:(jlong)i {
  return OrgSpongycastleCryptoTlsTlsUtils_isValidUint16WithLong_(i);
}

+ (jboolean)isValidUint24WithInt:(jint)i {
  return OrgSpongycastleCryptoTlsTlsUtils_isValidUint24WithInt_(i);
}

+ (jboolean)isValidUint24WithLong:(jlong)i {
  return OrgSpongycastleCryptoTlsTlsUtils_isValidUint24WithLong_(i);
}

+ (jboolean)isValidUint32WithLong:(jlong)i {
  return OrgSpongycastleCryptoTlsTlsUtils_isValidUint32WithLong_(i);
}

+ (jboolean)isValidUint48WithLong:(jlong)i {
  return OrgSpongycastleCryptoTlsTlsUtils_isValidUint48WithLong_(i);
}

+ (jboolean)isValidUint64WithLong:(jlong)i {
  return OrgSpongycastleCryptoTlsTlsUtils_isValidUint64WithLong_(i);
}

+ (jboolean)isSSLWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context {
  return OrgSpongycastleCryptoTlsTlsUtils_isSSLWithOrgSpongycastleCryptoTlsTlsContext_(context);
}

+ (jboolean)isTLSv11WithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)version_ {
  return OrgSpongycastleCryptoTlsTlsUtils_isTLSv11WithOrgSpongycastleCryptoTlsProtocolVersion_(version_);
}

+ (jboolean)isTLSv11WithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context {
  return OrgSpongycastleCryptoTlsTlsUtils_isTLSv11WithOrgSpongycastleCryptoTlsTlsContext_(context);
}

+ (jboolean)isTLSv12WithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)version_ {
  return OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsProtocolVersion_(version_);
}

+ (jboolean)isTLSv12WithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context {
  return OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_(context);
}

+ (void)writeUint8WithShort:(jshort)i
     withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(i, output);
}

+ (void)writeUint8WithInt:(jint)i
   withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithInt_withJavaIoOutputStream_(i, output);
}

+ (void)writeUint8WithShort:(jshort)i
              withByteArray:(IOSByteArray *)buf
                    withInt:(jint)offset {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withByteArray_withInt_(i, buf, offset);
}

+ (void)writeUint8WithInt:(jint)i
            withByteArray:(IOSByteArray *)buf
                  withInt:(jint)offset {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithInt_withByteArray_withInt_(i, buf, offset);
}

+ (void)writeUint16WithInt:(jint)i
    withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(i, output);
}

+ (void)writeUint16WithInt:(jint)i
             withByteArray:(IOSByteArray *)buf
                   withInt:(jint)offset {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withByteArray_withInt_(i, buf, offset);
}

+ (void)writeUint24WithInt:(jint)i
    withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withJavaIoOutputStream_(i, output);
}

+ (void)writeUint24WithInt:(jint)i
             withByteArray:(IOSByteArray *)buf
                   withInt:(jint)offset {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withByteArray_withInt_(i, buf, offset);
}

+ (void)writeUint32WithLong:(jlong)i
     withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint32WithLong_withJavaIoOutputStream_(i, output);
}

+ (void)writeUint32WithLong:(jlong)i
              withByteArray:(IOSByteArray *)buf
                    withInt:(jint)offset {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint32WithLong_withByteArray_withInt_(i, buf, offset);
}

+ (void)writeUint48WithLong:(jlong)i
     withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint48WithLong_withJavaIoOutputStream_(i, output);
}

+ (void)writeUint48WithLong:(jlong)i
              withByteArray:(IOSByteArray *)buf
                    withInt:(jint)offset {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint48WithLong_withByteArray_withInt_(i, buf, offset);
}

+ (void)writeUint64WithLong:(jlong)i
     withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint64WithLong_withJavaIoOutputStream_(i, output);
}

+ (void)writeUint64WithLong:(jlong)i
              withByteArray:(IOSByteArray *)buf
                    withInt:(jint)offset {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint64WithLong_withByteArray_withInt_(i, buf, offset);
}

+ (void)writeOpaque8WithByteArray:(IOSByteArray *)buf
           withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(buf, output);
}

+ (void)writeOpaque16WithByteArray:(IOSByteArray *)buf
            withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(buf, output);
}

+ (void)writeOpaque24WithByteArray:(IOSByteArray *)buf
            withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque24WithByteArray_withJavaIoOutputStream_(buf, output);
}

+ (void)writeUint8ArrayWithShortArray:(IOSShortArray *)uints
               withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithShortArray_withJavaIoOutputStream_(uints, output);
}

+ (void)writeUint8ArrayWithShortArray:(IOSShortArray *)uints
                        withByteArray:(IOSByteArray *)buf
                              withInt:(jint)offset {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithShortArray_withByteArray_withInt_(uints, buf, offset);
}

+ (void)writeUint8ArrayWithUint8LengthWithShortArray:(IOSShortArray *)uints
                              withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithUint8LengthWithShortArray_withJavaIoOutputStream_(uints, output);
}

+ (void)writeUint8ArrayWithUint8LengthWithShortArray:(IOSShortArray *)uints
                                       withByteArray:(IOSByteArray *)buf
                                             withInt:(jint)offset {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithUint8LengthWithShortArray_withByteArray_withInt_(uints, buf, offset);
}

+ (void)writeUint16ArrayWithIntArray:(IOSIntArray *)uints
              withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithIntArray_withJavaIoOutputStream_(uints, output);
}

+ (void)writeUint16ArrayWithIntArray:(IOSIntArray *)uints
                       withByteArray:(IOSByteArray *)buf
                             withInt:(jint)offset {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithIntArray_withByteArray_withInt_(uints, buf, offset);
}

+ (void)writeUint16ArrayWithUint16LengthWithIntArray:(IOSIntArray *)uints
                              withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithUint16LengthWithIntArray_withJavaIoOutputStream_(uints, output);
}

+ (void)writeUint16ArrayWithUint16LengthWithIntArray:(IOSIntArray *)uints
                                       withByteArray:(IOSByteArray *)buf
                                             withInt:(jint)offset {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithUint16LengthWithIntArray_withByteArray_withInt_(uints, buf, offset);
}

+ (IOSByteArray *)encodeOpaque8WithByteArray:(IOSByteArray *)buf {
  return OrgSpongycastleCryptoTlsTlsUtils_encodeOpaque8WithByteArray_(buf);
}

+ (IOSByteArray *)encodeUint8ArrayWithUint8LengthWithShortArray:(IOSShortArray *)uints {
  return OrgSpongycastleCryptoTlsTlsUtils_encodeUint8ArrayWithUint8LengthWithShortArray_(uints);
}

+ (IOSByteArray *)encodeUint16ArrayWithUint16LengthWithIntArray:(IOSIntArray *)uints {
  return OrgSpongycastleCryptoTlsTlsUtils_encodeUint16ArrayWithUint16LengthWithIntArray_(uints);
}

+ (jshort)readUint8WithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
}

+ (jshort)readUint8WithByteArray:(IOSByteArray *)buf
                         withInt:(jint)offset {
  return OrgSpongycastleCryptoTlsTlsUtils_readUint8WithByteArray_withInt_(buf, offset);
}

+ (jint)readUint16WithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(input);
}

+ (jint)readUint16WithByteArray:(IOSByteArray *)buf
                        withInt:(jint)offset {
  return OrgSpongycastleCryptoTlsTlsUtils_readUint16WithByteArray_withInt_(buf, offset);
}

+ (jint)readUint24WithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsUtils_readUint24WithJavaIoInputStream_(input);
}

+ (jint)readUint24WithByteArray:(IOSByteArray *)buf
                        withInt:(jint)offset {
  return OrgSpongycastleCryptoTlsTlsUtils_readUint24WithByteArray_withInt_(buf, offset);
}

+ (jlong)readUint32WithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsUtils_readUint32WithJavaIoInputStream_(input);
}

+ (jlong)readUint32WithByteArray:(IOSByteArray *)buf
                         withInt:(jint)offset {
  return OrgSpongycastleCryptoTlsTlsUtils_readUint32WithByteArray_withInt_(buf, offset);
}

+ (jlong)readUint48WithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsUtils_readUint48WithJavaIoInputStream_(input);
}

+ (jlong)readUint48WithByteArray:(IOSByteArray *)buf
                         withInt:(jint)offset {
  return OrgSpongycastleCryptoTlsTlsUtils_readUint48WithByteArray_withInt_(buf, offset);
}

+ (IOSByteArray *)readAllOrNothingWithInt:(jint)length
                    withJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsUtils_readAllOrNothingWithInt_withJavaIoInputStream_(length, input);
}

+ (IOSByteArray *)readFullyWithInt:(jint)length
             withJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(length, input);
}

+ (void)readFullyWithByteArray:(IOSByteArray *)buf
         withJavaIoInputStream:(JavaIoInputStream *)input {
  OrgSpongycastleCryptoTlsTlsUtils_readFullyWithByteArray_withJavaIoInputStream_(buf, input);
}

+ (IOSByteArray *)readOpaque8WithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(input);
}

+ (IOSByteArray *)readOpaque16WithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(input);
}

+ (IOSByteArray *)readOpaque24WithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsUtils_readOpaque24WithJavaIoInputStream_(input);
}

+ (IOSShortArray *)readUint8ArrayWithInt:(jint)count
                   withJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsUtils_readUint8ArrayWithInt_withJavaIoInputStream_(count, input);
}

+ (IOSIntArray *)readUint16ArrayWithInt:(jint)count
                  withJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsUtils_readUint16ArrayWithInt_withJavaIoInputStream_(count, input);
}

+ (OrgSpongycastleCryptoTlsProtocolVersion *)readVersionWithByteArray:(IOSByteArray *)buf
                                                              withInt:(jint)offset {
  return OrgSpongycastleCryptoTlsTlsUtils_readVersionWithByteArray_withInt_(buf, offset);
}

+ (OrgSpongycastleCryptoTlsProtocolVersion *)readVersionWithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsUtils_readVersionWithJavaIoInputStream_(input);
}

+ (jint)readVersionRawWithByteArray:(IOSByteArray *)buf
                            withInt:(jint)offset {
  return OrgSpongycastleCryptoTlsTlsUtils_readVersionRawWithByteArray_withInt_(buf, offset);
}

+ (jint)readVersionRawWithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsUtils_readVersionRawWithJavaIoInputStream_(input);
}

+ (OrgSpongycastleAsn1ASN1Primitive *)readASN1ObjectWithByteArray:(IOSByteArray *)encoding {
  return OrgSpongycastleCryptoTlsTlsUtils_readASN1ObjectWithByteArray_(encoding);
}

+ (OrgSpongycastleAsn1ASN1Primitive *)readDERObjectWithByteArray:(IOSByteArray *)encoding {
  return OrgSpongycastleCryptoTlsTlsUtils_readDERObjectWithByteArray_(encoding);
}

+ (void)writeGMTUnixTimeWithByteArray:(IOSByteArray *)buf
                              withInt:(jint)offset {
  OrgSpongycastleCryptoTlsTlsUtils_writeGMTUnixTimeWithByteArray_withInt_(buf, offset);
}

+ (void)writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)version_
                                         withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion_withJavaIoOutputStream_(version_, output);
}

+ (void)writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)version_
                                                  withByteArray:(IOSByteArray *)buf
                                                        withInt:(jint)offset {
  OrgSpongycastleCryptoTlsTlsUtils_writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion_withByteArray_withInt_(version_, buf, offset);
}

+ (JavaUtilVector *)getAllSignatureAlgorithms {
  return OrgSpongycastleCryptoTlsTlsUtils_getAllSignatureAlgorithms();
}

+ (JavaUtilVector *)getDefaultDSSSignatureAlgorithms {
  return OrgSpongycastleCryptoTlsTlsUtils_getDefaultDSSSignatureAlgorithms();
}

+ (JavaUtilVector *)getDefaultECDSASignatureAlgorithms {
  return OrgSpongycastleCryptoTlsTlsUtils_getDefaultECDSASignatureAlgorithms();
}

+ (JavaUtilVector *)getDefaultRSASignatureAlgorithms {
  return OrgSpongycastleCryptoTlsTlsUtils_getDefaultRSASignatureAlgorithms();
}

+ (JavaUtilVector *)getDefaultSupportedSignatureAlgorithms {
  return OrgSpongycastleCryptoTlsTlsUtils_getDefaultSupportedSignatureAlgorithms();
}

+ (OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)getSignatureAndHashAlgorithmWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                         withOrgSpongycastleCryptoTlsTlsSignerCredentials:(id<OrgSpongycastleCryptoTlsTlsSignerCredentials>)signerCredentials {
  return OrgSpongycastleCryptoTlsTlsUtils_getSignatureAndHashAlgorithmWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsSignerCredentials_(context, signerCredentials);
}

+ (IOSByteArray *)getExtensionDataWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                    withJavaLangInteger:(JavaLangInteger *)extensionType {
  return OrgSpongycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, extensionType);
}

+ (jboolean)hasExpectedEmptyExtensionDataWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                           withJavaLangInteger:(JavaLangInteger *)extensionType
                                                     withShort:(jshort)alertDescription {
  return OrgSpongycastleCryptoTlsTlsUtils_hasExpectedEmptyExtensionDataWithJavaUtilHashtable_withJavaLangInteger_withShort_(extensions, extensionType, alertDescription);
}

+ (id<OrgSpongycastleCryptoTlsTlsSession>)importSessionWithByteArray:(IOSByteArray *)sessionID
                       withOrgSpongycastleCryptoTlsSessionParameters:(OrgSpongycastleCryptoTlsSessionParameters *)sessionParameters {
  return OrgSpongycastleCryptoTlsTlsUtils_importSessionWithByteArray_withOrgSpongycastleCryptoTlsSessionParameters_(sessionID, sessionParameters);
}

+ (jboolean)isSignatureAlgorithmsExtensionAllowedWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)clientVersion {
  return OrgSpongycastleCryptoTlsTlsUtils_isSignatureAlgorithmsExtensionAllowedWithOrgSpongycastleCryptoTlsProtocolVersion_(clientVersion);
}

+ (void)addSignatureAlgorithmsExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                          withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms {
  OrgSpongycastleCryptoTlsTlsUtils_addSignatureAlgorithmsExtensionWithJavaUtilHashtable_withJavaUtilVector_(extensions, supportedSignatureAlgorithms);
}

+ (JavaUtilVector *)getSignatureAlgorithmsExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  return OrgSpongycastleCryptoTlsTlsUtils_getSignatureAlgorithmsExtensionWithJavaUtilHashtable_(extensions);
}

+ (IOSByteArray *)createSignatureAlgorithmsExtensionWithJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms {
  return OrgSpongycastleCryptoTlsTlsUtils_createSignatureAlgorithmsExtensionWithJavaUtilVector_(supportedSignatureAlgorithms);
}

+ (JavaUtilVector *)readSignatureAlgorithmsExtensionWithByteArray:(IOSByteArray *)extensionData {
  return OrgSpongycastleCryptoTlsTlsUtils_readSignatureAlgorithmsExtensionWithByteArray_(extensionData);
}

+ (void)encodeSupportedSignatureAlgorithmsWithJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
                                                 withBoolean:(jboolean)allowAnonymous
                                      withJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_encodeSupportedSignatureAlgorithmsWithJavaUtilVector_withBoolean_withJavaIoOutputStream_(supportedSignatureAlgorithms, allowAnonymous, output);
}

+ (JavaUtilVector *)parseSupportedSignatureAlgorithmsWithBoolean:(jboolean)allowAnonymous
                                           withJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsUtils_parseSupportedSignatureAlgorithmsWithBoolean_withJavaIoInputStream_(allowAnonymous, input);
}

+ (void)verifySupportedSignatureAlgorithmWithJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
      withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)signatureAlgorithm {
  OrgSpongycastleCryptoTlsTlsUtils_verifySupportedSignatureAlgorithmWithJavaUtilVector_withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(supportedSignatureAlgorithms, signatureAlgorithm);
}

+ (IOSByteArray *)PRFWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                              withByteArray:(IOSByteArray *)secret
                                               withNSString:(NSString *)asciiLabel
                                              withByteArray:(IOSByteArray *)seed
                                                    withInt:(jint)size {
  return OrgSpongycastleCryptoTlsTlsUtils_PRFWithOrgSpongycastleCryptoTlsTlsContext_withByteArray_withNSString_withByteArray_withInt_(context, secret, asciiLabel, seed, size);
}

+ (IOSByteArray *)PRF_legacyWithByteArray:(IOSByteArray *)secret
                             withNSString:(NSString *)asciiLabel
                            withByteArray:(IOSByteArray *)seed
                                  withInt:(jint)size {
  return OrgSpongycastleCryptoTlsTlsUtils_PRF_legacyWithByteArray_withNSString_withByteArray_withInt_(secret, asciiLabel, seed, size);
}

+ (IOSByteArray *)PRF_legacyWithByteArray:(IOSByteArray *)secret
                            withByteArray:(IOSByteArray *)label
                            withByteArray:(IOSByteArray *)labelSeed
                                  withInt:(jint)size {
  return OrgSpongycastleCryptoTlsTlsUtils_PRF_legacyWithByteArray_withByteArray_withByteArray_withInt_(secret, label, labelSeed, size);
}

+ (IOSByteArray *)concatWithByteArray:(IOSByteArray *)a
                        withByteArray:(IOSByteArray *)b {
  return OrgSpongycastleCryptoTlsTlsUtils_concatWithByteArray_withByteArray_(a, b);
}

+ (void)hmac_hashWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
                                   withByteArray:(IOSByteArray *)secret
                                   withByteArray:(IOSByteArray *)seed
                                   withByteArray:(IOSByteArray *)outArg {
  OrgSpongycastleCryptoTlsTlsUtils_hmac_hashWithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withByteArray_(digest, secret, seed, outArg);
}

+ (void)validateKeyUsageWithOrgSpongycastleAsn1X509Certificate:(OrgSpongycastleAsn1X509Certificate *)c
                                                       withInt:(jint)keyUsageBits {
  OrgSpongycastleCryptoTlsTlsUtils_validateKeyUsageWithOrgSpongycastleAsn1X509Certificate_withInt_(c, keyUsageBits);
}

+ (IOSByteArray *)calculateKeyBlockWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                  withInt:(jint)size {
  return OrgSpongycastleCryptoTlsTlsUtils_calculateKeyBlockWithOrgSpongycastleCryptoTlsTlsContext_withInt_(context, size);
}

+ (IOSByteArray *)calculateKeyBlock_SSLWithByteArray:(IOSByteArray *)master_secret
                                       withByteArray:(IOSByteArray *)random
                                             withInt:(jint)size {
  return OrgSpongycastleCryptoTlsTlsUtils_calculateKeyBlock_SSLWithByteArray_withByteArray_withInt_(master_secret, random, size);
}

+ (IOSByteArray *)calculateMasterSecretWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                withByteArray:(IOSByteArray *)pre_master_secret {
  return OrgSpongycastleCryptoTlsTlsUtils_calculateMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withByteArray_(context, pre_master_secret);
}

+ (IOSByteArray *)calculateMasterSecret_SSLWithByteArray:(IOSByteArray *)pre_master_secret
                                           withByteArray:(IOSByteArray *)random {
  return OrgSpongycastleCryptoTlsTlsUtils_calculateMasterSecret_SSLWithByteArray_withByteArray_(pre_master_secret, random);
}

+ (IOSByteArray *)calculateVerifyDataWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                               withNSString:(NSString *)asciiLabel
                                                              withByteArray:(IOSByteArray *)handshakeHash {
  return OrgSpongycastleCryptoTlsTlsUtils_calculateVerifyDataWithOrgSpongycastleCryptoTlsTlsContext_withNSString_withByteArray_(context, asciiLabel, handshakeHash);
}

+ (id<OrgSpongycastleCryptoDigest>)createHashWithShort:(jshort)hashAlgorithm {
  return OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(hashAlgorithm);
}

+ (id<OrgSpongycastleCryptoDigest>)createHashWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)signatureAndHashAlgorithm {
  return OrgSpongycastleCryptoTlsTlsUtils_createHashWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(signatureAndHashAlgorithm);
}

+ (id<OrgSpongycastleCryptoDigest>)cloneHashWithShort:(jshort)hashAlgorithm
                      withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hash_ {
  return OrgSpongycastleCryptoTlsTlsUtils_cloneHashWithShort_withOrgSpongycastleCryptoDigest_(hashAlgorithm, hash_);
}

+ (id<OrgSpongycastleCryptoDigest>)createPRFHashWithInt:(jint)prfAlgorithm {
  return OrgSpongycastleCryptoTlsTlsUtils_createPRFHashWithInt_(prfAlgorithm);
}

+ (id<OrgSpongycastleCryptoDigest>)clonePRFHashWithInt:(jint)prfAlgorithm
                       withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)hash_ {
  return OrgSpongycastleCryptoTlsTlsUtils_clonePRFHashWithInt_withOrgSpongycastleCryptoDigest_(prfAlgorithm, hash_);
}

+ (jshort)getHashAlgorithmForPRFAlgorithmWithInt:(jint)prfAlgorithm {
  return OrgSpongycastleCryptoTlsTlsUtils_getHashAlgorithmForPRFAlgorithmWithInt_(prfAlgorithm);
}

+ (OrgSpongycastleAsn1ASN1ObjectIdentifier *)getOIDForHashAlgorithmWithShort:(jshort)hashAlgorithm {
  return OrgSpongycastleCryptoTlsTlsUtils_getOIDForHashAlgorithmWithShort_(hashAlgorithm);
}

+ (jshort)getClientCertificateTypeWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)clientCertificate
                                  withOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)serverCertificate {
  return OrgSpongycastleCryptoTlsTlsUtils_getClientCertificateTypeWithOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoTlsCertificate_(clientCertificate, serverCertificate);
}

+ (void)trackHashAlgorithmsWithOrgSpongycastleCryptoTlsTlsHandshakeHash:(id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)handshakeHash
                                                     withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms {
  OrgSpongycastleCryptoTlsTlsUtils_trackHashAlgorithmsWithOrgSpongycastleCryptoTlsTlsHandshakeHash_withJavaUtilVector_(handshakeHash, supportedSignatureAlgorithms);
}

+ (jboolean)hasSigningCapabilityWithShort:(jshort)clientCertificateType {
  return OrgSpongycastleCryptoTlsTlsUtils_hasSigningCapabilityWithShort_(clientCertificateType);
}

+ (id<OrgSpongycastleCryptoTlsTlsSigner>)createTlsSignerWithShort:(jshort)clientCertificateType {
  return OrgSpongycastleCryptoTlsTlsUtils_createTlsSignerWithShort_(clientCertificateType);
}

+ (IOSObjectArray *)genSSL3Const {
  return OrgSpongycastleCryptoTlsTlsUtils_genSSL3Const();
}

+ (JavaUtilVector *)vectorOfOneWithId:(id)obj {
  return OrgSpongycastleCryptoTlsTlsUtils_vectorOfOneWithId_(obj);
}

+ (jint)getCipherTypeWithInt:(jint)ciphersuite {
  return OrgSpongycastleCryptoTlsTlsUtils_getCipherTypeWithInt_(ciphersuite);
}

+ (jint)getEncryptionAlgorithmWithInt:(jint)ciphersuite {
  return OrgSpongycastleCryptoTlsTlsUtils_getEncryptionAlgorithmWithInt_(ciphersuite);
}

+ (jint)getKeyExchangeAlgorithmWithInt:(jint)ciphersuite {
  return OrgSpongycastleCryptoTlsTlsUtils_getKeyExchangeAlgorithmWithInt_(ciphersuite);
}

+ (jint)getMACAlgorithmWithInt:(jint)ciphersuite {
  return OrgSpongycastleCryptoTlsTlsUtils_getMACAlgorithmWithInt_(ciphersuite);
}

+ (OrgSpongycastleCryptoTlsProtocolVersion *)getMinimumVersionWithInt:(jint)ciphersuite {
  return OrgSpongycastleCryptoTlsTlsUtils_getMinimumVersionWithInt_(ciphersuite);
}

+ (jboolean)isAEADCipherSuiteWithInt:(jint)ciphersuite {
  return OrgSpongycastleCryptoTlsTlsUtils_isAEADCipherSuiteWithInt_(ciphersuite);
}

+ (jboolean)isBlockCipherSuiteWithInt:(jint)ciphersuite {
  return OrgSpongycastleCryptoTlsTlsUtils_isBlockCipherSuiteWithInt_(ciphersuite);
}

+ (jboolean)isStreamCipherSuiteWithInt:(jint)ciphersuite {
  return OrgSpongycastleCryptoTlsTlsUtils_isStreamCipherSuiteWithInt_(ciphersuite);
}

+ (jboolean)isValidCipherSuiteForSignatureAlgorithmsWithInt:(jint)cipherSuite
                                         withJavaUtilVector:(JavaUtilVector *)sigAlgs {
  return OrgSpongycastleCryptoTlsTlsUtils_isValidCipherSuiteForSignatureAlgorithmsWithInt_withJavaUtilVector_(cipherSuite, sigAlgs);
}

+ (jboolean)isValidCipherSuiteForVersionWithInt:(jint)cipherSuite
    withOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)serverVersion {
  return OrgSpongycastleCryptoTlsTlsUtils_isValidCipherSuiteForVersionWithInt_withOrgSpongycastleCryptoTlsProtocolVersion_(cipherSuite, serverVersion);
}

+ (JavaUtilVector *)getUsableSignatureAlgorithmsWithJavaUtilVector:(JavaUtilVector *)sigHashAlgs {
  return OrgSpongycastleCryptoTlsTlsUtils_getUsableSignatureAlgorithmsWithJavaUtilVector_(sigHashAlgs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 3, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 3, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 3, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 9, 4, 2, -1, -1, -1 },
    { NULL, "Z", 0x9, 10, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 10, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 10, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 11, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 11, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 12, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 12, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 13, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 14, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 15, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 18, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 20, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 20, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 22, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 23, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 23, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 27, 23, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 27, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 28, 29, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 28, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 31, 29, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 32, 29, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 33, 34, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 35, 34, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 36, 34, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 37, 38, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 37, 39, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 40, 38, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 40, 39, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 41, 42, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 41, 43, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 44, 42, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 44, 43, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 45, 46, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 47, 48, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 49, 50, 2, -1, -1, -1 },
    { NULL, "S", 0x9, 51, 52, 2, -1, -1, -1 },
    { NULL, "S", 0x9, 51, 53, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 54, 52, 2, -1, -1, -1 },
    { NULL, "I", 0x9, 54, 53, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 55, 52, 2, -1, -1, -1 },
    { NULL, "I", 0x9, 55, 53, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 56, 52, 2, -1, -1, -1 },
    { NULL, "J", 0x9, 56, 53, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 57, 52, 2, -1, -1, -1 },
    { NULL, "J", 0x9, 57, 53, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 58, 59, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 60, 59, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 60, 61, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 62, 52, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 63, 52, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 64, 52, 2, -1, -1, -1 },
    { NULL, "[S", 0x9, 65, 59, 2, -1, -1, -1 },
    { NULL, "[I", 0x9, 66, 59, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsProtocolVersion;", 0x9, 67, 53, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsProtocolVersion;", 0x9, 67, 52, 2, -1, -1, -1 },
    { NULL, "I", 0x9, 68, 53, 2, -1, -1, -1 },
    { NULL, "I", 0x9, 68, 52, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Primitive;", 0x9, 69, 46, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Primitive;", 0x9, 70, 46, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 71, 53, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 72, 73, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 72, 74, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;", 0x9, 75, 76, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 77, 78, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 79, 80, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsSession;", 0x9, 81, 82, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 83, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 84, 85, 2, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x9, 86, 87, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 88, 89, 2, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x9, 90, 46, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 91, 92, 2, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x9, 93, 94, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 95, 96, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 97, 98, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 99, 100, -1, -1, -1, -1 },
    { NULL, "[B", 0x8, 99, 101, -1, -1, -1, -1 },
    { NULL, "[B", 0x8, 102, 103, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 104, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 106, 107, 2, -1, -1, -1 },
    { NULL, "[B", 0x8, 108, 109, -1, -1, -1, -1 },
    { NULL, "[B", 0x8, 110, 111, -1, -1, -1, -1 },
    { NULL, "[B", 0x8, 112, 113, -1, -1, -1, -1 },
    { NULL, "[B", 0x8, 114, 103, -1, -1, -1, -1 },
    { NULL, "[B", 0x8, 115, 116, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoDigest;", 0x9, 117, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoDigest;", 0x9, 117, 118, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoDigest;", 0x9, 119, 120, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoDigest;", 0x9, 121, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoDigest;", 0x9, 122, 123, -1, -1, -1, -1 },
    { NULL, "S", 0x9, 124, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", 0x9, 125, 1, -1, -1, -1, -1 },
    { NULL, "S", 0x8, 126, 127, 2, -1, -1, -1 },
    { NULL, "V", 0x8, 128, 129, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 130, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsSigner;", 0x9, 131, 1, -1, -1, -1, -1 },
    { NULL, "[[B", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0xa, 132, 133, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 134, 3, 2, -1, -1, -1 },
    { NULL, "I", 0x9, 135, 3, 2, -1, -1, -1 },
    { NULL, "I", 0x9, 136, 3, 2, -1, -1, -1 },
    { NULL, "I", 0x9, 137, 3, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsProtocolVersion;", 0x9, 138, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 139, 3, 2, -1, -1, -1 },
    { NULL, "Z", 0x9, 140, 3, 2, -1, -1, -1 },
    { NULL, "Z", 0x9, 141, 3, 2, -1, -1, -1 },
    { NULL, "Z", 0x9, 142, 143, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 144, 145, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x9, 146, 89, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(checkUint8WithShort:);
  methods[2].selector = @selector(checkUint8WithInt:);
  methods[3].selector = @selector(checkUint8WithLong:);
  methods[4].selector = @selector(checkUint16WithInt:);
  methods[5].selector = @selector(checkUint16WithLong:);
  methods[6].selector = @selector(checkUint24WithInt:);
  methods[7].selector = @selector(checkUint24WithLong:);
  methods[8].selector = @selector(checkUint32WithLong:);
  methods[9].selector = @selector(checkUint48WithLong:);
  methods[10].selector = @selector(checkUint64WithLong:);
  methods[11].selector = @selector(isValidUint8WithShort:);
  methods[12].selector = @selector(isValidUint8WithInt:);
  methods[13].selector = @selector(isValidUint8WithLong:);
  methods[14].selector = @selector(isValidUint16WithInt:);
  methods[15].selector = @selector(isValidUint16WithLong:);
  methods[16].selector = @selector(isValidUint24WithInt:);
  methods[17].selector = @selector(isValidUint24WithLong:);
  methods[18].selector = @selector(isValidUint32WithLong:);
  methods[19].selector = @selector(isValidUint48WithLong:);
  methods[20].selector = @selector(isValidUint64WithLong:);
  methods[21].selector = @selector(isSSLWithOrgSpongycastleCryptoTlsTlsContext:);
  methods[22].selector = @selector(isTLSv11WithOrgSpongycastleCryptoTlsProtocolVersion:);
  methods[23].selector = @selector(isTLSv11WithOrgSpongycastleCryptoTlsTlsContext:);
  methods[24].selector = @selector(isTLSv12WithOrgSpongycastleCryptoTlsProtocolVersion:);
  methods[25].selector = @selector(isTLSv12WithOrgSpongycastleCryptoTlsTlsContext:);
  methods[26].selector = @selector(writeUint8WithShort:withJavaIoOutputStream:);
  methods[27].selector = @selector(writeUint8WithInt:withJavaIoOutputStream:);
  methods[28].selector = @selector(writeUint8WithShort:withByteArray:withInt:);
  methods[29].selector = @selector(writeUint8WithInt:withByteArray:withInt:);
  methods[30].selector = @selector(writeUint16WithInt:withJavaIoOutputStream:);
  methods[31].selector = @selector(writeUint16WithInt:withByteArray:withInt:);
  methods[32].selector = @selector(writeUint24WithInt:withJavaIoOutputStream:);
  methods[33].selector = @selector(writeUint24WithInt:withByteArray:withInt:);
  methods[34].selector = @selector(writeUint32WithLong:withJavaIoOutputStream:);
  methods[35].selector = @selector(writeUint32WithLong:withByteArray:withInt:);
  methods[36].selector = @selector(writeUint48WithLong:withJavaIoOutputStream:);
  methods[37].selector = @selector(writeUint48WithLong:withByteArray:withInt:);
  methods[38].selector = @selector(writeUint64WithLong:withJavaIoOutputStream:);
  methods[39].selector = @selector(writeUint64WithLong:withByteArray:withInt:);
  methods[40].selector = @selector(writeOpaque8WithByteArray:withJavaIoOutputStream:);
  methods[41].selector = @selector(writeOpaque16WithByteArray:withJavaIoOutputStream:);
  methods[42].selector = @selector(writeOpaque24WithByteArray:withJavaIoOutputStream:);
  methods[43].selector = @selector(writeUint8ArrayWithShortArray:withJavaIoOutputStream:);
  methods[44].selector = @selector(writeUint8ArrayWithShortArray:withByteArray:withInt:);
  methods[45].selector = @selector(writeUint8ArrayWithUint8LengthWithShortArray:withJavaIoOutputStream:);
  methods[46].selector = @selector(writeUint8ArrayWithUint8LengthWithShortArray:withByteArray:withInt:);
  methods[47].selector = @selector(writeUint16ArrayWithIntArray:withJavaIoOutputStream:);
  methods[48].selector = @selector(writeUint16ArrayWithIntArray:withByteArray:withInt:);
  methods[49].selector = @selector(writeUint16ArrayWithUint16LengthWithIntArray:withJavaIoOutputStream:);
  methods[50].selector = @selector(writeUint16ArrayWithUint16LengthWithIntArray:withByteArray:withInt:);
  methods[51].selector = @selector(encodeOpaque8WithByteArray:);
  methods[52].selector = @selector(encodeUint8ArrayWithUint8LengthWithShortArray:);
  methods[53].selector = @selector(encodeUint16ArrayWithUint16LengthWithIntArray:);
  methods[54].selector = @selector(readUint8WithJavaIoInputStream:);
  methods[55].selector = @selector(readUint8WithByteArray:withInt:);
  methods[56].selector = @selector(readUint16WithJavaIoInputStream:);
  methods[57].selector = @selector(readUint16WithByteArray:withInt:);
  methods[58].selector = @selector(readUint24WithJavaIoInputStream:);
  methods[59].selector = @selector(readUint24WithByteArray:withInt:);
  methods[60].selector = @selector(readUint32WithJavaIoInputStream:);
  methods[61].selector = @selector(readUint32WithByteArray:withInt:);
  methods[62].selector = @selector(readUint48WithJavaIoInputStream:);
  methods[63].selector = @selector(readUint48WithByteArray:withInt:);
  methods[64].selector = @selector(readAllOrNothingWithInt:withJavaIoInputStream:);
  methods[65].selector = @selector(readFullyWithInt:withJavaIoInputStream:);
  methods[66].selector = @selector(readFullyWithByteArray:withJavaIoInputStream:);
  methods[67].selector = @selector(readOpaque8WithJavaIoInputStream:);
  methods[68].selector = @selector(readOpaque16WithJavaIoInputStream:);
  methods[69].selector = @selector(readOpaque24WithJavaIoInputStream:);
  methods[70].selector = @selector(readUint8ArrayWithInt:withJavaIoInputStream:);
  methods[71].selector = @selector(readUint16ArrayWithInt:withJavaIoInputStream:);
  methods[72].selector = @selector(readVersionWithByteArray:withInt:);
  methods[73].selector = @selector(readVersionWithJavaIoInputStream:);
  methods[74].selector = @selector(readVersionRawWithByteArray:withInt:);
  methods[75].selector = @selector(readVersionRawWithJavaIoInputStream:);
  methods[76].selector = @selector(readASN1ObjectWithByteArray:);
  methods[77].selector = @selector(readDERObjectWithByteArray:);
  methods[78].selector = @selector(writeGMTUnixTimeWithByteArray:withInt:);
  methods[79].selector = @selector(writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion:withJavaIoOutputStream:);
  methods[80].selector = @selector(writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion:withByteArray:withInt:);
  methods[81].selector = @selector(getAllSignatureAlgorithms);
  methods[82].selector = @selector(getDefaultDSSSignatureAlgorithms);
  methods[83].selector = @selector(getDefaultECDSASignatureAlgorithms);
  methods[84].selector = @selector(getDefaultRSASignatureAlgorithms);
  methods[85].selector = @selector(getDefaultSupportedSignatureAlgorithms);
  methods[86].selector = @selector(getSignatureAndHashAlgorithmWithOrgSpongycastleCryptoTlsTlsContext:withOrgSpongycastleCryptoTlsTlsSignerCredentials:);
  methods[87].selector = @selector(getExtensionDataWithJavaUtilHashtable:withJavaLangInteger:);
  methods[88].selector = @selector(hasExpectedEmptyExtensionDataWithJavaUtilHashtable:withJavaLangInteger:withShort:);
  methods[89].selector = @selector(importSessionWithByteArray:withOrgSpongycastleCryptoTlsSessionParameters:);
  methods[90].selector = @selector(isSignatureAlgorithmsExtensionAllowedWithOrgSpongycastleCryptoTlsProtocolVersion:);
  methods[91].selector = @selector(addSignatureAlgorithmsExtensionWithJavaUtilHashtable:withJavaUtilVector:);
  methods[92].selector = @selector(getSignatureAlgorithmsExtensionWithJavaUtilHashtable:);
  methods[93].selector = @selector(createSignatureAlgorithmsExtensionWithJavaUtilVector:);
  methods[94].selector = @selector(readSignatureAlgorithmsExtensionWithByteArray:);
  methods[95].selector = @selector(encodeSupportedSignatureAlgorithmsWithJavaUtilVector:withBoolean:withJavaIoOutputStream:);
  methods[96].selector = @selector(parseSupportedSignatureAlgorithmsWithBoolean:withJavaIoInputStream:);
  methods[97].selector = @selector(verifySupportedSignatureAlgorithmWithJavaUtilVector:withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:);
  methods[98].selector = @selector(PRFWithOrgSpongycastleCryptoTlsTlsContext:withByteArray:withNSString:withByteArray:withInt:);
  methods[99].selector = @selector(PRF_legacyWithByteArray:withNSString:withByteArray:withInt:);
  methods[100].selector = @selector(PRF_legacyWithByteArray:withByteArray:withByteArray:withInt:);
  methods[101].selector = @selector(concatWithByteArray:withByteArray:);
  methods[102].selector = @selector(hmac_hashWithOrgSpongycastleCryptoDigest:withByteArray:withByteArray:withByteArray:);
  methods[103].selector = @selector(validateKeyUsageWithOrgSpongycastleAsn1X509Certificate:withInt:);
  methods[104].selector = @selector(calculateKeyBlockWithOrgSpongycastleCryptoTlsTlsContext:withInt:);
  methods[105].selector = @selector(calculateKeyBlock_SSLWithByteArray:withByteArray:withInt:);
  methods[106].selector = @selector(calculateMasterSecretWithOrgSpongycastleCryptoTlsTlsContext:withByteArray:);
  methods[107].selector = @selector(calculateMasterSecret_SSLWithByteArray:withByteArray:);
  methods[108].selector = @selector(calculateVerifyDataWithOrgSpongycastleCryptoTlsTlsContext:withNSString:withByteArray:);
  methods[109].selector = @selector(createHashWithShort:);
  methods[110].selector = @selector(createHashWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:);
  methods[111].selector = @selector(cloneHashWithShort:withOrgSpongycastleCryptoDigest:);
  methods[112].selector = @selector(createPRFHashWithInt:);
  methods[113].selector = @selector(clonePRFHashWithInt:withOrgSpongycastleCryptoDigest:);
  methods[114].selector = @selector(getHashAlgorithmForPRFAlgorithmWithInt:);
  methods[115].selector = @selector(getOIDForHashAlgorithmWithShort:);
  methods[116].selector = @selector(getClientCertificateTypeWithOrgSpongycastleCryptoTlsCertificate:withOrgSpongycastleCryptoTlsCertificate:);
  methods[117].selector = @selector(trackHashAlgorithmsWithOrgSpongycastleCryptoTlsTlsHandshakeHash:withJavaUtilVector:);
  methods[118].selector = @selector(hasSigningCapabilityWithShort:);
  methods[119].selector = @selector(createTlsSignerWithShort:);
  methods[120].selector = @selector(genSSL3Const);
  methods[121].selector = @selector(vectorOfOneWithId:);
  methods[122].selector = @selector(getCipherTypeWithInt:);
  methods[123].selector = @selector(getEncryptionAlgorithmWithInt:);
  methods[124].selector = @selector(getKeyExchangeAlgorithmWithInt:);
  methods[125].selector = @selector(getMACAlgorithmWithInt:);
  methods[126].selector = @selector(getMinimumVersionWithInt:);
  methods[127].selector = @selector(isAEADCipherSuiteWithInt:);
  methods[128].selector = @selector(isBlockCipherSuiteWithInt:);
  methods[129].selector = @selector(isStreamCipherSuiteWithInt:);
  methods[130].selector = @selector(isValidCipherSuiteForSignatureAlgorithmsWithInt:withJavaUtilVector:);
  methods[131].selector = @selector(isValidCipherSuiteForVersionWithInt:withOrgSpongycastleCryptoTlsProtocolVersion:);
  methods[132].selector = @selector(getUsableSignatureAlgorithmsWithJavaUtilVector:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_BYTES", "[B", .constantValue.asLong = 0, 0x19, -1, 147, -1, -1 },
    { "EMPTY_SHORTS", "[S", .constantValue.asLong = 0, 0x19, -1, 148, -1, -1 },
    { "EMPTY_INTS", "[I", .constantValue.asLong = 0, 0x19, -1, 149, -1, -1 },
    { "EMPTY_LONGS", "[J", .constantValue.asLong = 0, 0x19, -1, 150, -1, -1 },
    { "EXT_signature_algorithms", "LJavaLangInteger;", .constantValue.asLong = 0, 0x19, -1, 151, -1, -1 },
    { "SSL_CLIENT", "[B", .constantValue.asLong = 0, 0x18, -1, 152, -1, -1 },
    { "SSL_SERVER", "[B", .constantValue.asLong = 0, 0x18, -1, 153, -1, -1 },
    { "SSL3_CONST", "[[B", .constantValue.asLong = 0, 0x18, -1, 154, -1, -1 },
  };
  static const void *ptrTable[] = { "checkUint8", "S", "LJavaIoIOException;", "I", "J", "checkUint16", "checkUint24", "checkUint32", "checkUint48", "checkUint64", "isValidUint8", "isValidUint16", "isValidUint24", "isValidUint32", "isValidUint48", "isValidUint64", "isSSL", "LOrgSpongycastleCryptoTlsTlsContext;", "isTLSv11", "LOrgSpongycastleCryptoTlsProtocolVersion;", "isTLSv12", "writeUint8", "SLJavaIoOutputStream;", "ILJavaIoOutputStream;", "S[BI", "I[BI", "writeUint16", "writeUint24", "writeUint32", "JLJavaIoOutputStream;", "J[BI", "writeUint48", "writeUint64", "writeOpaque8", "[BLJavaIoOutputStream;", "writeOpaque16", "writeOpaque24", "writeUint8Array", "[SLJavaIoOutputStream;", "[S[BI", "writeUint8ArrayWithUint8Length", "writeUint16Array", "[ILJavaIoOutputStream;", "[I[BI", "writeUint16ArrayWithUint16Length", "encodeOpaque8", "[B", "encodeUint8ArrayWithUint8Length", "[S", "encodeUint16ArrayWithUint16Length", "[I", "readUint8", "LJavaIoInputStream;", "[BI", "readUint16", "readUint24", "readUint32", "readUint48", "readAllOrNothing", "ILJavaIoInputStream;", "readFully", "[BLJavaIoInputStream;", "readOpaque8", "readOpaque16", "readOpaque24", "readUint8Array", "readUint16Array", "readVersion", "readVersionRaw", "readASN1Object", "readDERObject", "writeGMTUnixTime", "writeVersion", "LOrgSpongycastleCryptoTlsProtocolVersion;LJavaIoOutputStream;", "LOrgSpongycastleCryptoTlsProtocolVersion;[BI", "getSignatureAndHashAlgorithm", "LOrgSpongycastleCryptoTlsTlsContext;LOrgSpongycastleCryptoTlsTlsSignerCredentials;", "getExtensionData", "LJavaUtilHashtable;LJavaLangInteger;", "hasExpectedEmptyExtensionData", "LJavaUtilHashtable;LJavaLangInteger;S", "importSession", "[BLOrgSpongycastleCryptoTlsSessionParameters;", "isSignatureAlgorithmsExtensionAllowed", "addSignatureAlgorithmsExtension", "LJavaUtilHashtable;LJavaUtilVector;", "getSignatureAlgorithmsExtension", "LJavaUtilHashtable;", "createSignatureAlgorithmsExtension", "LJavaUtilVector;", "readSignatureAlgorithmsExtension", "encodeSupportedSignatureAlgorithms", "LJavaUtilVector;ZLJavaIoOutputStream;", "parseSupportedSignatureAlgorithms", "ZLJavaIoInputStream;", "verifySupportedSignatureAlgorithm", "LJavaUtilVector;LOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;", "PRF", "LOrgSpongycastleCryptoTlsTlsContext;[BLNSString;[BI", "PRF_legacy", "[BLNSString;[BI", "[B[B[BI", "concat", "[B[B", "hmac_hash", "LOrgSpongycastleCryptoDigest;[B[B[B", "validateKeyUsage", "LOrgSpongycastleAsn1X509Certificate;I", "calculateKeyBlock", "LOrgSpongycastleCryptoTlsTlsContext;I", "calculateKeyBlock_SSL", "[B[BI", "calculateMasterSecret", "LOrgSpongycastleCryptoTlsTlsContext;[B", "calculateMasterSecret_SSL", "calculateVerifyData", "LOrgSpongycastleCryptoTlsTlsContext;LNSString;[B", "createHash", "LOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;", "cloneHash", "SLOrgSpongycastleCryptoDigest;", "createPRFHash", "clonePRFHash", "ILOrgSpongycastleCryptoDigest;", "getHashAlgorithmForPRFAlgorithm", "getOIDForHashAlgorithm", "getClientCertificateType", "LOrgSpongycastleCryptoTlsCertificate;LOrgSpongycastleCryptoTlsCertificate;", "trackHashAlgorithms", "LOrgSpongycastleCryptoTlsTlsHandshakeHash;LJavaUtilVector;", "hasSigningCapability", "createTlsSigner", "vectorOfOne", "LNSObject;", "getCipherType", "getEncryptionAlgorithm", "getKeyExchangeAlgorithm", "getMACAlgorithm", "getMinimumVersion", "isAEADCipherSuite", "isBlockCipherSuite", "isStreamCipherSuite", "isValidCipherSuiteForSignatureAlgorithms", "ILJavaUtilVector;", "isValidCipherSuiteForVersion", "ILOrgSpongycastleCryptoTlsProtocolVersion;", "getUsableSignatureAlgorithms", &OrgSpongycastleCryptoTlsTlsUtils_EMPTY_BYTES, &OrgSpongycastleCryptoTlsTlsUtils_EMPTY_SHORTS, &OrgSpongycastleCryptoTlsTlsUtils_EMPTY_INTS, &OrgSpongycastleCryptoTlsTlsUtils_EMPTY_LONGS, &OrgSpongycastleCryptoTlsTlsUtils_EXT_signature_algorithms, &OrgSpongycastleCryptoTlsTlsUtils_SSL_CLIENT, &OrgSpongycastleCryptoTlsTlsUtils_SSL_SERVER, &OrgSpongycastleCryptoTlsTlsUtils_SSL3_CONST };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsTlsUtils = { "TlsUtils", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 133, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsTlsUtils;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoTlsTlsUtils class]) {
    OrgSpongycastleCryptoTlsTlsUtils_EMPTY_BYTES = [IOSByteArray newArrayWithLength:0];
    OrgSpongycastleCryptoTlsTlsUtils_EMPTY_SHORTS = [IOSShortArray newArrayWithLength:0];
    OrgSpongycastleCryptoTlsTlsUtils_EMPTY_INTS = [IOSIntArray newArrayWithLength:0];
    OrgSpongycastleCryptoTlsTlsUtils_EMPTY_LONGS = [IOSLongArray newArrayWithLength:0];
    OrgSpongycastleCryptoTlsTlsUtils_EXT_signature_algorithms = OrgSpongycastleUtilIntegers_valueOfWithInt_(OrgSpongycastleCryptoTlsExtensionType_signature_algorithms);
    OrgSpongycastleCryptoTlsTlsUtils_SSL_CLIENT = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0x43, (jint) 0x4C, (jint) 0x4E, (jint) 0x54 } count:4];
    OrgSpongycastleCryptoTlsTlsUtils_SSL_SERVER = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jint) 0x53, (jint) 0x52, (jint) 0x56, (jint) 0x52 } count:4];
    OrgSpongycastleCryptoTlsTlsUtils_SSL3_CONST = OrgSpongycastleCryptoTlsTlsUtils_genSSL3Const();
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoTlsTlsUtils)
  }
}

@end

void OrgSpongycastleCryptoTlsTlsUtils_init(OrgSpongycastleCryptoTlsTlsUtils *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoTlsTlsUtils *new_OrgSpongycastleCryptoTlsTlsUtils_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsTlsUtils, init)
}

OrgSpongycastleCryptoTlsTlsUtils *create_OrgSpongycastleCryptoTlsTlsUtils_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsTlsUtils, init)
}

void OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithShort_(jshort i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (!OrgSpongycastleCryptoTlsTlsUtils_isValidUint8WithShort_(i)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

void OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithInt_(jint i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (!OrgSpongycastleCryptoTlsTlsUtils_isValidUint8WithInt_(i)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

void OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithLong_(jlong i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (!OrgSpongycastleCryptoTlsTlsUtils_isValidUint8WithLong_(i)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

void OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithInt_(jint i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (!OrgSpongycastleCryptoTlsTlsUtils_isValidUint16WithInt_(i)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

void OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithLong_(jlong i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (!OrgSpongycastleCryptoTlsTlsUtils_isValidUint16WithLong_(i)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

void OrgSpongycastleCryptoTlsTlsUtils_checkUint24WithInt_(jint i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (!OrgSpongycastleCryptoTlsTlsUtils_isValidUint24WithInt_(i)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

void OrgSpongycastleCryptoTlsTlsUtils_checkUint24WithLong_(jlong i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (!OrgSpongycastleCryptoTlsTlsUtils_isValidUint24WithLong_(i)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

void OrgSpongycastleCryptoTlsTlsUtils_checkUint32WithLong_(jlong i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (!OrgSpongycastleCryptoTlsTlsUtils_isValidUint32WithLong_(i)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

void OrgSpongycastleCryptoTlsTlsUtils_checkUint48WithLong_(jlong i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (!OrgSpongycastleCryptoTlsTlsUtils_isValidUint48WithLong_(i)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

void OrgSpongycastleCryptoTlsTlsUtils_checkUint64WithLong_(jlong i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (!OrgSpongycastleCryptoTlsTlsUtils_isValidUint64WithLong_(i)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint8WithShort_(jshort i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return (i & (jint) 0xFF) == i;
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint8WithInt_(jint i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return (i & (jint) 0xFF) == i;
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint8WithLong_(jlong i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return (i & (jlong) 0xFFLL) == i;
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint16WithInt_(jint i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return (i & (jint) 0xFFFF) == i;
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint16WithLong_(jlong i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return (i & (jlong) 0xFFFFLL) == i;
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint24WithInt_(jint i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return (i & (jint) 0xFFFFFF) == i;
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint24WithLong_(jlong i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return (i & (jlong) 0xFFFFFFLL) == i;
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint32WithLong_(jlong i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return (i & (jlong) 0xFFFFFFFFLL) == i;
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint48WithLong_(jlong i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return (i & (jlong) 0xFFFFFFFFFFFFLL) == i;
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidUint64WithLong_(jlong i) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return true;
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isSSLWithOrgSpongycastleCryptoTlsTlsContext_(id<OrgSpongycastleCryptoTlsTlsContext> context) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return [((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context)) getServerVersion])) isSSL];
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isTLSv11WithOrgSpongycastleCryptoTlsProtocolVersion_(OrgSpongycastleCryptoTlsProtocolVersion *version_) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return [((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(JreLoadStatic(OrgSpongycastleCryptoTlsProtocolVersion, TLSv11))) isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:[((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(version_)) getEquivalentTLSVersion]];
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isTLSv11WithOrgSpongycastleCryptoTlsTlsContext_(id<OrgSpongycastleCryptoTlsTlsContext> context) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return OrgSpongycastleCryptoTlsTlsUtils_isTLSv11WithOrgSpongycastleCryptoTlsProtocolVersion_([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context)) getServerVersion]);
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsProtocolVersion_(OrgSpongycastleCryptoTlsProtocolVersion *version_) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return [((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(JreLoadStatic(OrgSpongycastleCryptoTlsProtocolVersion, TLSv12))) isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:[((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(version_)) getEquivalentTLSVersion]];
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_(id<OrgSpongycastleCryptoTlsTlsContext> context) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsProtocolVersion_([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context)) getServerVersion]);
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(jshort i, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  [((JavaIoOutputStream *) nil_chk(output)) writeWithInt:i];
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithInt_withJavaIoOutputStream_(jint i, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  [((JavaIoOutputStream *) nil_chk(output)) writeWithInt:i];
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withByteArray_withInt_(jshort i, IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  *IOSByteArray_GetRef(nil_chk(buf), offset) = (jbyte) i;
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithInt_withByteArray_withInt_(jint i, IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  *IOSByteArray_GetRef(nil_chk(buf), offset) = (jbyte) i;
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(jint i, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  [((JavaIoOutputStream *) nil_chk(output)) writeWithInt:JreURShift32(i, 8)];
  [output writeWithInt:i];
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withByteArray_withInt_(jint i, IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  *IOSByteArray_GetRef(nil_chk(buf), offset) = (jbyte) (JreURShift32(i, 8));
  *IOSByteArray_GetRef(buf, offset + 1) = (jbyte) i;
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withJavaIoOutputStream_(jint i, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  [((JavaIoOutputStream *) nil_chk(output)) writeWithInt:(jbyte) (JreURShift32(i, 16))];
  [output writeWithInt:(jbyte) (JreURShift32(i, 8))];
  [output writeWithInt:(jbyte) i];
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withByteArray_withInt_(jint i, IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  *IOSByteArray_GetRef(nil_chk(buf), offset) = (jbyte) (JreURShift32(i, 16));
  *IOSByteArray_GetRef(buf, offset + 1) = (jbyte) (JreURShift32(i, 8));
  *IOSByteArray_GetRef(buf, offset + 2) = (jbyte) i;
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint32WithLong_withJavaIoOutputStream_(jlong i, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  [((JavaIoOutputStream *) nil_chk(output)) writeWithInt:(jbyte) (JreURShift64(i, 24))];
  [output writeWithInt:(jbyte) (JreURShift64(i, 16))];
  [output writeWithInt:(jbyte) (JreURShift64(i, 8))];
  [output writeWithInt:(jbyte) i];
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint32WithLong_withByteArray_withInt_(jlong i, IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  *IOSByteArray_GetRef(nil_chk(buf), offset) = (jbyte) (JreURShift64(i, 24));
  *IOSByteArray_GetRef(buf, offset + 1) = (jbyte) (JreURShift64(i, 16));
  *IOSByteArray_GetRef(buf, offset + 2) = (jbyte) (JreURShift64(i, 8));
  *IOSByteArray_GetRef(buf, offset + 3) = (jbyte) i;
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint48WithLong_withJavaIoOutputStream_(jlong i, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  [((JavaIoOutputStream *) nil_chk(output)) writeWithInt:(jbyte) (JreURShift64(i, 40))];
  [output writeWithInt:(jbyte) (JreURShift64(i, 32))];
  [output writeWithInt:(jbyte) (JreURShift64(i, 24))];
  [output writeWithInt:(jbyte) (JreURShift64(i, 16))];
  [output writeWithInt:(jbyte) (JreURShift64(i, 8))];
  [output writeWithInt:(jbyte) i];
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint48WithLong_withByteArray_withInt_(jlong i, IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  *IOSByteArray_GetRef(nil_chk(buf), offset) = (jbyte) (JreURShift64(i, 40));
  *IOSByteArray_GetRef(buf, offset + 1) = (jbyte) (JreURShift64(i, 32));
  *IOSByteArray_GetRef(buf, offset + 2) = (jbyte) (JreURShift64(i, 24));
  *IOSByteArray_GetRef(buf, offset + 3) = (jbyte) (JreURShift64(i, 16));
  *IOSByteArray_GetRef(buf, offset + 4) = (jbyte) (JreURShift64(i, 8));
  *IOSByteArray_GetRef(buf, offset + 5) = (jbyte) i;
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint64WithLong_withJavaIoOutputStream_(jlong i, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  [((JavaIoOutputStream *) nil_chk(output)) writeWithInt:(jbyte) (JreURShift64(i, 56))];
  [output writeWithInt:(jbyte) (JreURShift64(i, 48))];
  [output writeWithInt:(jbyte) (JreURShift64(i, 40))];
  [output writeWithInt:(jbyte) (JreURShift64(i, 32))];
  [output writeWithInt:(jbyte) (JreURShift64(i, 24))];
  [output writeWithInt:(jbyte) (JreURShift64(i, 16))];
  [output writeWithInt:(jbyte) (JreURShift64(i, 8))];
  [output writeWithInt:(jbyte) i];
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint64WithLong_withByteArray_withInt_(jlong i, IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  *IOSByteArray_GetRef(nil_chk(buf), offset) = (jbyte) (JreURShift64(i, 56));
  *IOSByteArray_GetRef(buf, offset + 1) = (jbyte) (JreURShift64(i, 48));
  *IOSByteArray_GetRef(buf, offset + 2) = (jbyte) (JreURShift64(i, 40));
  *IOSByteArray_GetRef(buf, offset + 3) = (jbyte) (JreURShift64(i, 32));
  *IOSByteArray_GetRef(buf, offset + 4) = (jbyte) (JreURShift64(i, 24));
  *IOSByteArray_GetRef(buf, offset + 5) = (jbyte) (JreURShift64(i, 16));
  *IOSByteArray_GetRef(buf, offset + 6) = (jbyte) (JreURShift64(i, 8));
  *IOSByteArray_GetRef(buf, offset + 7) = (jbyte) i;
}

void OrgSpongycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(IOSByteArray *buf, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithInt_(((IOSByteArray *) nil_chk(buf))->size_);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithInt_withJavaIoOutputStream_(buf->size_, output);
  [((JavaIoOutputStream *) nil_chk(output)) writeWithByteArray:buf];
}

void OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(IOSByteArray *buf, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithInt_(((IOSByteArray *) nil_chk(buf))->size_);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(buf->size_, output);
  [((JavaIoOutputStream *) nil_chk(output)) writeWithByteArray:buf];
}

void OrgSpongycastleCryptoTlsTlsUtils_writeOpaque24WithByteArray_withJavaIoOutputStream_(IOSByteArray *buf, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  OrgSpongycastleCryptoTlsTlsUtils_checkUint24WithInt_(((IOSByteArray *) nil_chk(buf))->size_);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withJavaIoOutputStream_(buf->size_, output);
  [((JavaIoOutputStream *) nil_chk(output)) writeWithByteArray:buf];
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithShortArray_withJavaIoOutputStream_(IOSShortArray *uints, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  for (jint i = 0; i < ((IOSShortArray *) nil_chk(uints))->size_; ++i) {
    OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(IOSShortArray_Get(uints, i), output);
  }
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithShortArray_withByteArray_withInt_(IOSShortArray *uints, IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  for (jint i = 0; i < ((IOSShortArray *) nil_chk(uints))->size_; ++i) {
    OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withByteArray_withInt_(IOSShortArray_Get(uints, i), buf, offset);
    ++offset;
  }
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithUint8LengthWithShortArray_withJavaIoOutputStream_(IOSShortArray *uints, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithInt_(((IOSShortArray *) nil_chk(uints))->size_);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithInt_withJavaIoOutputStream_(uints->size_, output);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithShortArray_withJavaIoOutputStream_(uints, output);
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithUint8LengthWithShortArray_withByteArray_withInt_(IOSShortArray *uints, IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithInt_(((IOSShortArray *) nil_chk(uints))->size_);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithInt_withByteArray_withInt_(uints->size_, buf, offset);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithShortArray_withByteArray_withInt_(uints, buf, offset + 1);
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithIntArray_withJavaIoOutputStream_(IOSIntArray *uints, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(uints))->size_; ++i) {
    OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(IOSIntArray_Get(uints, i), output);
  }
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithIntArray_withByteArray_withInt_(IOSIntArray *uints, IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(uints))->size_; ++i) {
    OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withByteArray_withInt_(IOSIntArray_Get(uints, i), buf, offset);
    offset += 2;
  }
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithUint16LengthWithIntArray_withJavaIoOutputStream_(IOSIntArray *uints, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint length = 2 * ((IOSIntArray *) nil_chk(uints))->size_;
  OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithInt_(length);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(length, output);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithIntArray_withJavaIoOutputStream_(uints, output);
}

void OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithUint16LengthWithIntArray_withByteArray_withInt_(IOSIntArray *uints, IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint length = 2 * ((IOSIntArray *) nil_chk(uints))->size_;
  OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithInt_(length);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withByteArray_withInt_(length, buf, offset);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithIntArray_withByteArray_withInt_(uints, buf, offset + 2);
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_encodeOpaque8WithByteArray_(IOSByteArray *buf) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  OrgSpongycastleCryptoTlsTlsUtils_checkUint8WithInt_(((IOSByteArray *) nil_chk(buf))->size_);
  return OrgSpongycastleUtilArrays_prependWithByteArray_withByte_(buf, (jbyte) buf->size_);
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_encodeUint8ArrayWithUint8LengthWithShortArray_(IOSShortArray *uints) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  IOSByteArray *result = [IOSByteArray newArrayWithLength:1 + ((IOSShortArray *) nil_chk(uints))->size_];
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8ArrayWithUint8LengthWithShortArray_withByteArray_withInt_(uints, result, 0);
  return result;
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_encodeUint16ArrayWithUint16LengthWithIntArray_(IOSIntArray *uints) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint length = 2 * ((IOSIntArray *) nil_chk(uints))->size_;
  IOSByteArray *result = [IOSByteArray newArrayWithLength:2 + length];
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16ArrayWithUint16LengthWithIntArray_withByteArray_withInt_(uints, result, 0);
  return result;
}

jshort OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint i = [((JavaIoInputStream *) nil_chk(input)) read];
  if (i < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return (jshort) i;
}

jshort OrgSpongycastleCryptoTlsTlsUtils_readUint8WithByteArray_withInt_(IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return (jshort) (IOSByteArray_Get(nil_chk(buf), offset) & (jint) 0xff);
}

jint OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint i1 = [((JavaIoInputStream *) nil_chk(input)) read];
  jint i2 = [input read];
  if (i2 < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return (JreLShift32(i1, 8)) | i2;
}

jint OrgSpongycastleCryptoTlsTlsUtils_readUint16WithByteArray_withInt_(IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint n = JreLShift32((IOSByteArray_Get(nil_chk(buf), offset) & (jint) 0xff), 8);
  n |= (IOSByteArray_Get(buf, ++offset) & (jint) 0xff);
  return n;
}

jint OrgSpongycastleCryptoTlsTlsUtils_readUint24WithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint i1 = [((JavaIoInputStream *) nil_chk(input)) read];
  jint i2 = [input read];
  jint i3 = [input read];
  if (i3 < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return (JreLShift32(i1, 16)) | (JreLShift32(i2, 8)) | i3;
}

jint OrgSpongycastleCryptoTlsTlsUtils_readUint24WithByteArray_withInt_(IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint n = JreLShift32((IOSByteArray_Get(nil_chk(buf), offset) & (jint) 0xff), 16);
  n |= JreLShift32((IOSByteArray_Get(buf, ++offset) & (jint) 0xff), 8);
  n |= (IOSByteArray_Get(buf, ++offset) & (jint) 0xff);
  return n;
}

jlong OrgSpongycastleCryptoTlsTlsUtils_readUint32WithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint i1 = [((JavaIoInputStream *) nil_chk(input)) read];
  jint i2 = [input read];
  jint i3 = [input read];
  jint i4 = [input read];
  if (i4 < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return ((JreLShift32(i1, 24)) | (JreLShift32(i2, 16)) | (JreLShift32(i3, 8)) | i4) & (jlong) 0xFFFFFFFFLL;
}

jlong OrgSpongycastleCryptoTlsTlsUtils_readUint32WithByteArray_withInt_(IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint n = JreLShift32((IOSByteArray_Get(nil_chk(buf), offset) & (jint) 0xff), 24);
  n |= JreLShift32((IOSByteArray_Get(buf, ++offset) & (jint) 0xff), 16);
  n |= JreLShift32((IOSByteArray_Get(buf, ++offset) & (jint) 0xff), 8);
  n |= (IOSByteArray_Get(buf, ++offset) & (jint) 0xff);
  return n & (jlong) 0xFFFFFFFFLL;
}

jlong OrgSpongycastleCryptoTlsTlsUtils_readUint48WithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint hi = OrgSpongycastleCryptoTlsTlsUtils_readUint24WithJavaIoInputStream_(input);
  jint lo = OrgSpongycastleCryptoTlsTlsUtils_readUint24WithJavaIoInputStream_(input);
  return (JreLShift64((jlong) (hi & (jlong) 0xffffffffLL), 24)) | (jlong) (lo & (jlong) 0xffffffffLL);
}

jlong OrgSpongycastleCryptoTlsTlsUtils_readUint48WithByteArray_withInt_(IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint hi = OrgSpongycastleCryptoTlsTlsUtils_readUint24WithByteArray_withInt_(buf, offset);
  jint lo = OrgSpongycastleCryptoTlsTlsUtils_readUint24WithByteArray_withInt_(buf, offset + 3);
  return (JreLShift64((jlong) (hi & (jlong) 0xffffffffLL), 24)) | (jlong) (lo & (jlong) 0xffffffffLL);
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_readAllOrNothingWithInt_withJavaIoInputStream_(jint length, JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (length < 1) {
    return OrgSpongycastleCryptoTlsTlsUtils_EMPTY_BYTES;
  }
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:length];
  jint read = OrgSpongycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_(input, buf);
  if (read == 0) {
    return nil;
  }
  if (read != length) {
    @throw new_JavaIoEOFException_init();
  }
  return buf;
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(jint length, JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (length < 1) {
    return OrgSpongycastleCryptoTlsTlsUtils_EMPTY_BYTES;
  }
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:length];
  if (length != OrgSpongycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_(input, buf)) {
    @throw new_JavaIoEOFException_init();
  }
  return buf;
}

void OrgSpongycastleCryptoTlsTlsUtils_readFullyWithByteArray_withJavaIoInputStream_(IOSByteArray *buf, JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint length = ((IOSByteArray *) nil_chk(buf))->size_;
  if (length > 0 && length != OrgSpongycastleUtilIoStreams_readFullyWithJavaIoInputStream_withByteArray_(input, buf)) {
    @throw new_JavaIoEOFException_init();
  }
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jshort length = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
  return OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(length, input);
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint length = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(input);
  return OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(length, input);
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_readOpaque24WithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint length = OrgSpongycastleCryptoTlsTlsUtils_readUint24WithJavaIoInputStream_(input);
  return OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(length, input);
}

IOSShortArray *OrgSpongycastleCryptoTlsTlsUtils_readUint8ArrayWithInt_withJavaIoInputStream_(jint count, JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  IOSShortArray *uints = [IOSShortArray newArrayWithLength:count];
  for (jint i = 0; i < count; ++i) {
    *IOSShortArray_GetRef(uints, i) = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
  }
  return uints;
}

IOSIntArray *OrgSpongycastleCryptoTlsTlsUtils_readUint16ArrayWithInt_withJavaIoInputStream_(jint count, JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  IOSIntArray *uints = [IOSIntArray newArrayWithLength:count];
  for (jint i = 0; i < count; ++i) {
    *IOSIntArray_GetRef(uints, i) = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(input);
  }
  return uints;
}

OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsTlsUtils_readVersionWithByteArray_withInt_(IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return OrgSpongycastleCryptoTlsProtocolVersion_getWithInt_withInt_(IOSByteArray_Get(nil_chk(buf), offset) & (jint) 0xFF, IOSByteArray_Get(buf, offset + 1) & (jint) 0xFF);
}

OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsTlsUtils_readVersionWithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint i1 = [((JavaIoInputStream *) nil_chk(input)) read];
  jint i2 = [input read];
  if (i2 < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return OrgSpongycastleCryptoTlsProtocolVersion_getWithInt_withInt_(i1, i2);
}

jint OrgSpongycastleCryptoTlsTlsUtils_readVersionRawWithByteArray_withInt_(IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return (JreLShift32(IOSByteArray_Get(nil_chk(buf), offset), 8)) | IOSByteArray_Get(buf, offset + 1);
}

jint OrgSpongycastleCryptoTlsTlsUtils_readVersionRawWithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint i1 = [((JavaIoInputStream *) nil_chk(input)) read];
  jint i2 = [input read];
  if (i2 < 0) {
    @throw new_JavaIoEOFException_init();
  }
  return (JreLShift32(i1, 8)) | i2;
}

OrgSpongycastleAsn1ASN1Primitive *OrgSpongycastleCryptoTlsTlsUtils_readASN1ObjectWithByteArray_(IOSByteArray *encoding) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  OrgSpongycastleAsn1ASN1InputStream *asn1 = new_OrgSpongycastleAsn1ASN1InputStream_initWithByteArray_(encoding);
  OrgSpongycastleAsn1ASN1Primitive *result = [asn1 readObject];
  if (nil == result) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  if (nil != [asn1 readObject]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  return result;
}

OrgSpongycastleAsn1ASN1Primitive *OrgSpongycastleCryptoTlsTlsUtils_readDERObjectWithByteArray_(IOSByteArray *encoding) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  OrgSpongycastleAsn1ASN1Primitive *result = OrgSpongycastleCryptoTlsTlsUtils_readASN1ObjectWithByteArray_(encoding);
  IOSByteArray *check = [((OrgSpongycastleAsn1ASN1Primitive *) nil_chk(result)) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
  if (!OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(check, encoding)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  return result;
}

void OrgSpongycastleCryptoTlsTlsUtils_writeGMTUnixTimeWithByteArray_withInt_(IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint t = (jint) (JavaLangSystem_currentTimeMillis() / 1000LL);
  *IOSByteArray_GetRef(nil_chk(buf), offset) = (jbyte) (JreURShift32(t, 24));
  *IOSByteArray_GetRef(buf, offset + 1) = (jbyte) (JreURShift32(t, 16));
  *IOSByteArray_GetRef(buf, offset + 2) = (jbyte) (JreURShift32(t, 8));
  *IOSByteArray_GetRef(buf, offset + 3) = (jbyte) t;
}

void OrgSpongycastleCryptoTlsTlsUtils_writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion_withJavaIoOutputStream_(OrgSpongycastleCryptoTlsProtocolVersion *version_, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  [((JavaIoOutputStream *) nil_chk(output)) writeWithInt:[((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(version_)) getMajorVersion]];
  [output writeWithInt:[version_ getMinorVersion]];
}

void OrgSpongycastleCryptoTlsTlsUtils_writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion_withByteArray_withInt_(OrgSpongycastleCryptoTlsProtocolVersion *version_, IOSByteArray *buf, jint offset) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  *IOSByteArray_GetRef(nil_chk(buf), offset) = (jbyte) [((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(version_)) getMajorVersion];
  *IOSByteArray_GetRef(buf, offset + 1) = (jbyte) [version_ getMinorVersion];
}

JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_getAllSignatureAlgorithms() {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  JavaUtilVector *v = new_JavaUtilVector_initWithInt_(4);
  [v addElementWithId:OrgSpongycastleUtilShorts_valueOfWithShort_(OrgSpongycastleCryptoTlsSignatureAlgorithm_anonymous)];
  [v addElementWithId:OrgSpongycastleUtilShorts_valueOfWithShort_(OrgSpongycastleCryptoTlsSignatureAlgorithm_rsa)];
  [v addElementWithId:OrgSpongycastleUtilShorts_valueOfWithShort_(OrgSpongycastleCryptoTlsSignatureAlgorithm_dsa)];
  [v addElementWithId:OrgSpongycastleUtilShorts_valueOfWithShort_(OrgSpongycastleCryptoTlsSignatureAlgorithm_ecdsa)];
  return v;
}

JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_getDefaultDSSSignatureAlgorithms() {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return OrgSpongycastleCryptoTlsTlsUtils_vectorOfOneWithId_(new_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_initWithShort_withShort_(OrgSpongycastleCryptoTlsHashAlgorithm_sha1, OrgSpongycastleCryptoTlsSignatureAlgorithm_dsa));
}

JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_getDefaultECDSASignatureAlgorithms() {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return OrgSpongycastleCryptoTlsTlsUtils_vectorOfOneWithId_(new_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_initWithShort_withShort_(OrgSpongycastleCryptoTlsHashAlgorithm_sha1, OrgSpongycastleCryptoTlsSignatureAlgorithm_ecdsa));
}

JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_getDefaultRSASignatureAlgorithms() {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return OrgSpongycastleCryptoTlsTlsUtils_vectorOfOneWithId_(new_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_initWithShort_withShort_(OrgSpongycastleCryptoTlsHashAlgorithm_sha1, OrgSpongycastleCryptoTlsSignatureAlgorithm_rsa));
}

JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_getDefaultSupportedSignatureAlgorithms() {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  IOSShortArray *hashAlgorithms = [IOSShortArray newArrayWithShorts:(jshort[]){ OrgSpongycastleCryptoTlsHashAlgorithm_sha1, OrgSpongycastleCryptoTlsHashAlgorithm_sha224, OrgSpongycastleCryptoTlsHashAlgorithm_sha256, OrgSpongycastleCryptoTlsHashAlgorithm_sha384, OrgSpongycastleCryptoTlsHashAlgorithm_sha512 } count:5];
  IOSShortArray *signatureAlgorithms = [IOSShortArray newArrayWithShorts:(jshort[]){ OrgSpongycastleCryptoTlsSignatureAlgorithm_rsa, OrgSpongycastleCryptoTlsSignatureAlgorithm_dsa, OrgSpongycastleCryptoTlsSignatureAlgorithm_ecdsa } count:3];
  JavaUtilVector *result = new_JavaUtilVector_init();
  for (jint i = 0; i < signatureAlgorithms->size_; ++i) {
    for (jint j = 0; j < hashAlgorithms->size_; ++j) {
      [result addElementWithId:new_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_initWithShort_withShort_(IOSShortArray_Get(hashAlgorithms, j), IOSShortArray_Get(signatureAlgorithms, i))];
    }
  }
  return result;
}

OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *OrgSpongycastleCryptoTlsTlsUtils_getSignatureAndHashAlgorithmWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsSignerCredentials_(id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoTlsTlsSignerCredentials> signerCredentials) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm = nil;
  if (OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_(context)) {
    signatureAndHashAlgorithm = [((id<OrgSpongycastleCryptoTlsTlsSignerCredentials>) nil_chk(signerCredentials)) getSignatureAndHashAlgorithm];
    if (signatureAndHashAlgorithm == nil) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
    }
  }
  return signatureAndHashAlgorithm;
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(JavaUtilHashtable *extensions, JavaLangInteger *extensionType) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return extensions == nil ? nil : (IOSByteArray *) cast_chk([extensions getWithId:extensionType], [IOSByteArray class]);
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_hasExpectedEmptyExtensionDataWithJavaUtilHashtable_withJavaLangInteger_withShort_(JavaUtilHashtable *extensions, JavaLangInteger *extensionType, jshort alertDescription) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  IOSByteArray *extension_data = OrgSpongycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, extensionType);
  if (extension_data == nil) {
    return false;
  }
  if (extension_data->size_ != 0) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(alertDescription);
  }
  return true;
}

id<OrgSpongycastleCryptoTlsTlsSession> OrgSpongycastleCryptoTlsTlsUtils_importSessionWithByteArray_withOrgSpongycastleCryptoTlsSessionParameters_(IOSByteArray *sessionID, OrgSpongycastleCryptoTlsSessionParameters *sessionParameters) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return new_OrgSpongycastleCryptoTlsTlsSessionImpl_initWithByteArray_withOrgSpongycastleCryptoTlsSessionParameters_(sessionID, sessionParameters);
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isSignatureAlgorithmsExtensionAllowedWithOrgSpongycastleCryptoTlsProtocolVersion_(OrgSpongycastleCryptoTlsProtocolVersion *clientVersion) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return [((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(JreLoadStatic(OrgSpongycastleCryptoTlsProtocolVersion, TLSv12))) isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:[((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(clientVersion)) getEquivalentTLSVersion]];
}

void OrgSpongycastleCryptoTlsTlsUtils_addSignatureAlgorithmsExtensionWithJavaUtilHashtable_withJavaUtilVector_(JavaUtilHashtable *extensions, JavaUtilVector *supportedSignatureAlgorithms) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  (void) [((JavaUtilHashtable *) nil_chk(extensions)) putWithId:OrgSpongycastleCryptoTlsTlsUtils_EXT_signature_algorithms withId:OrgSpongycastleCryptoTlsTlsUtils_createSignatureAlgorithmsExtensionWithJavaUtilVector_(supportedSignatureAlgorithms)];
}

JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_getSignatureAlgorithmsExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  IOSByteArray *extensionData = OrgSpongycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(extensions, OrgSpongycastleCryptoTlsTlsUtils_EXT_signature_algorithms);
  return extensionData == nil ? nil : OrgSpongycastleCryptoTlsTlsUtils_readSignatureAlgorithmsExtensionWithByteArray_(extensionData);
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_createSignatureAlgorithmsExtensionWithJavaUtilVector_(JavaUtilVector *supportedSignatureAlgorithms) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  OrgSpongycastleCryptoTlsTlsUtils_encodeSupportedSignatureAlgorithmsWithJavaUtilVector_withBoolean_withJavaIoOutputStream_(supportedSignatureAlgorithms, false, buf);
  return [buf toByteArray];
}

JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_readSignatureAlgorithmsExtensionWithByteArray_(IOSByteArray *extensionData) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (extensionData == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'extensionData' cannot be null");
  }
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(extensionData);
  JavaUtilVector *supported_signature_algorithms = OrgSpongycastleCryptoTlsTlsUtils_parseSupportedSignatureAlgorithmsWithBoolean_withJavaIoInputStream_(false, buf);
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  return supported_signature_algorithms;
}

void OrgSpongycastleCryptoTlsTlsUtils_encodeSupportedSignatureAlgorithmsWithJavaUtilVector_withBoolean_withJavaIoOutputStream_(JavaUtilVector *supportedSignatureAlgorithms, jboolean allowAnonymous, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (supportedSignatureAlgorithms == nil || [supportedSignatureAlgorithms size] < 1 || [supportedSignatureAlgorithms size] >= (JreLShift32(1, 15))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'supportedSignatureAlgorithms' must have length from 1 to (2^15 - 1)");
  }
  jint length = 2 * [supportedSignatureAlgorithms size];
  OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithInt_(length);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(length, output);
  for (jint i = 0; i < [supportedSignatureAlgorithms size]; ++i) {
    OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *entry_ = (OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *) cast_chk([supportedSignatureAlgorithms elementAtWithInt:i], [OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm class]);
    if (!allowAnonymous && [((OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *) nil_chk(entry_)) getSignature] == OrgSpongycastleCryptoTlsSignatureAlgorithm_anonymous) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"SignatureAlgorithm.anonymous MUST NOT appear in the signature_algorithms extension");
    }
    [((OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *) nil_chk(entry_)) encodeWithJavaIoOutputStream:output];
  }
}

JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_parseSupportedSignatureAlgorithmsWithBoolean_withJavaIoInputStream_(jboolean allowAnonymous, JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint length = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(input);
  if (length < 2 || (length & 1) != 0) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  jint count = length / 2;
  JavaUtilVector *supportedSignatureAlgorithms = new_JavaUtilVector_initWithInt_(count);
  for (jint i = 0; i < count; ++i) {
    OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *entry_ = OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_parseWithJavaIoInputStream_(input);
    if (!allowAnonymous && [((OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *) nil_chk(entry_)) getSignature] == OrgSpongycastleCryptoTlsSignatureAlgorithm_anonymous) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
    [supportedSignatureAlgorithms addElementWithId:entry_];
  }
  return supportedSignatureAlgorithms;
}

void OrgSpongycastleCryptoTlsTlsUtils_verifySupportedSignatureAlgorithmWithJavaUtilVector_withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(JavaUtilVector *supportedSignatureAlgorithms, OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAlgorithm) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (supportedSignatureAlgorithms == nil || [supportedSignatureAlgorithms size] < 1 || [supportedSignatureAlgorithms size] >= (JreLShift32(1, 15))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'supportedSignatureAlgorithms' must have length from 1 to (2^15 - 1)");
  }
  if (signatureAlgorithm == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'signatureAlgorithm' cannot be null");
  }
  if ([signatureAlgorithm getSignature] != OrgSpongycastleCryptoTlsSignatureAlgorithm_anonymous) {
    for (jint i = 0; i < [supportedSignatureAlgorithms size]; ++i) {
      OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *entry_ = (OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *) cast_chk([supportedSignatureAlgorithms elementAtWithInt:i], [OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm class]);
      if ([((OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *) nil_chk(entry_)) getHash] == [signatureAlgorithm getHash] && [entry_ getSignature] == [signatureAlgorithm getSignature]) {
        return;
      }
    }
  }
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_PRFWithOrgSpongycastleCryptoTlsTlsContext_withByteArray_withNSString_withByteArray_withInt_(id<OrgSpongycastleCryptoTlsTlsContext> context, IOSByteArray *secret, NSString *asciiLabel, IOSByteArray *seed, jint size) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  OrgSpongycastleCryptoTlsProtocolVersion *version_ = [((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context)) getServerVersion];
  if ([((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(version_)) isSSL]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"No PRF available for SSLv3 session");
  }
  IOSByteArray *label = OrgSpongycastleUtilStrings_toByteArrayWithNSString_(asciiLabel);
  IOSByteArray *labelSeed = OrgSpongycastleCryptoTlsTlsUtils_concatWithByteArray_withByteArray_(label, seed);
  jint prfAlgorithm = [((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk([context getSecurityParameters])) getPrfAlgorithm];
  if (prfAlgorithm == OrgSpongycastleCryptoTlsPRFAlgorithm_tls_prf_legacy) {
    return OrgSpongycastleCryptoTlsTlsUtils_PRF_legacyWithByteArray_withByteArray_withByteArray_withInt_(secret, label, labelSeed, size);
  }
  id<OrgSpongycastleCryptoDigest> prfDigest = OrgSpongycastleCryptoTlsTlsUtils_createPRFHashWithInt_(prfAlgorithm);
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:size];
  OrgSpongycastleCryptoTlsTlsUtils_hmac_hashWithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withByteArray_(prfDigest, secret, labelSeed, buf);
  return buf;
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_PRF_legacyWithByteArray_withNSString_withByteArray_withInt_(IOSByteArray *secret, NSString *asciiLabel, IOSByteArray *seed, jint size) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  IOSByteArray *label = OrgSpongycastleUtilStrings_toByteArrayWithNSString_(asciiLabel);
  IOSByteArray *labelSeed = OrgSpongycastleCryptoTlsTlsUtils_concatWithByteArray_withByteArray_(label, seed);
  return OrgSpongycastleCryptoTlsTlsUtils_PRF_legacyWithByteArray_withByteArray_withByteArray_withInt_(secret, label, labelSeed, size);
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_PRF_legacyWithByteArray_withByteArray_withByteArray_withInt_(IOSByteArray *secret, IOSByteArray *label, IOSByteArray *labelSeed, jint size) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint s_half = (((IOSByteArray *) nil_chk(secret))->size_ + 1) / 2;
  IOSByteArray *s1 = [IOSByteArray newArrayWithLength:s_half];
  IOSByteArray *s2 = [IOSByteArray newArrayWithLength:s_half];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(secret, 0, s1, 0, s_half);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(secret, secret->size_ - s_half, s2, 0, s_half);
  IOSByteArray *b1 = [IOSByteArray newArrayWithLength:size];
  IOSByteArray *b2 = [IOSByteArray newArrayWithLength:size];
  OrgSpongycastleCryptoTlsTlsUtils_hmac_hashWithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withByteArray_(OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsHashAlgorithm_md5), s1, labelSeed, b1);
  OrgSpongycastleCryptoTlsTlsUtils_hmac_hashWithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withByteArray_(OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsHashAlgorithm_sha1), s2, labelSeed, b2);
  for (jint i = 0; i < size; i++) {
    *IOSByteArray_GetRef(b1, i) ^= IOSByteArray_Get(b2, i);
  }
  return b1;
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_concatWithByteArray_withByteArray_(IOSByteArray *a, IOSByteArray *b) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  IOSByteArray *c = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(a))->size_ + ((IOSByteArray *) nil_chk(b))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, c, 0, a->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, c, a->size_, b->size_);
  return c;
}

void OrgSpongycastleCryptoTlsTlsUtils_hmac_hashWithOrgSpongycastleCryptoDigest_withByteArray_withByteArray_withByteArray_(id<OrgSpongycastleCryptoDigest> digest, IOSByteArray *secret, IOSByteArray *seed, IOSByteArray *outArg) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  OrgSpongycastleCryptoMacsHMac *mac = new_OrgSpongycastleCryptoMacsHMac_initWithOrgSpongycastleCryptoDigest_(digest);
  [mac init__WithOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_(secret)];
  IOSByteArray *a = seed;
  jint size = [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) getDigestSize];
  jint iterations = (((IOSByteArray *) nil_chk(outArg))->size_ + size - 1) / size;
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:[mac getMacSize]];
  IOSByteArray *buf2 = [IOSByteArray newArrayWithLength:[mac getMacSize]];
  for (jint i = 0; i < iterations; i++) {
    [mac updateWithByteArray:a withInt:0 withInt:((IOSByteArray *) nil_chk(a))->size_];
    [mac doFinalWithByteArray:buf withInt:0];
    a = buf;
    [mac updateWithByteArray:a withInt:0 withInt:a->size_];
    [mac updateWithByteArray:seed withInt:0 withInt:((IOSByteArray *) nil_chk(seed))->size_];
    [mac doFinalWithByteArray:buf2 withInt:0];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf2, 0, outArg, (size * i), JavaLangMath_minWithInt_withInt_(size, outArg->size_ - (size * i)));
  }
}

void OrgSpongycastleCryptoTlsTlsUtils_validateKeyUsageWithOrgSpongycastleAsn1X509Certificate_withInt_(OrgSpongycastleAsn1X509Certificate *c, jint keyUsageBits) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  OrgSpongycastleAsn1X509Extensions *exts = [((OrgSpongycastleAsn1X509TBSCertificate *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c)) getTBSCertificate])) getExtensions];
  if (exts != nil) {
    OrgSpongycastleAsn1X509KeyUsage *ku = OrgSpongycastleAsn1X509KeyUsage_fromExtensionsWithOrgSpongycastleAsn1X509Extensions_(exts);
    if (ku != nil) {
      jint bits = IOSByteArray_Get(nil_chk([ku getBytes]), 0) & (jint) 0xff;
      if ((bits & keyUsageBits) != keyUsageBits) {
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_certificate_unknown);
      }
    }
  }
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_calculateKeyBlockWithOrgSpongycastleCryptoTlsTlsContext_withInt_(id<OrgSpongycastleCryptoTlsTlsContext> context, jint size) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  OrgSpongycastleCryptoTlsSecurityParameters *securityParameters = [((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context)) getSecurityParameters];
  IOSByteArray *master_secret = [((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters)) getMasterSecret];
  IOSByteArray *seed = OrgSpongycastleCryptoTlsTlsUtils_concatWithByteArray_withByteArray_([securityParameters getServerRandom], [securityParameters getClientRandom]);
  if (OrgSpongycastleCryptoTlsTlsUtils_isSSLWithOrgSpongycastleCryptoTlsTlsContext_(context)) {
    return OrgSpongycastleCryptoTlsTlsUtils_calculateKeyBlock_SSLWithByteArray_withByteArray_withInt_(master_secret, seed, size);
  }
  return OrgSpongycastleCryptoTlsTlsUtils_PRFWithOrgSpongycastleCryptoTlsTlsContext_withByteArray_withNSString_withByteArray_withInt_(context, master_secret, OrgSpongycastleCryptoTlsExporterLabel_key_expansion, seed, size);
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_calculateKeyBlock_SSLWithByteArray_withByteArray_withInt_(IOSByteArray *master_secret, IOSByteArray *random, jint size) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  id<OrgSpongycastleCryptoDigest> md5 = OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsHashAlgorithm_md5);
  id<OrgSpongycastleCryptoDigest> sha1 = OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsHashAlgorithm_sha1);
  jint md5Size = [((id<OrgSpongycastleCryptoDigest>) nil_chk(md5)) getDigestSize];
  IOSByteArray *shatmp = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(sha1)) getDigestSize]];
  IOSByteArray *tmp = [IOSByteArray newArrayWithLength:size + md5Size];
  jint i = 0;
  jint pos = 0;
  while (pos < size) {
    IOSByteArray *ssl3Const = IOSObjectArray_Get(nil_chk(OrgSpongycastleCryptoTlsTlsUtils_SSL3_CONST), i);
    [sha1 updateWithByteArray:ssl3Const withInt:0 withInt:((IOSByteArray *) nil_chk(ssl3Const))->size_];
    [sha1 updateWithByteArray:master_secret withInt:0 withInt:((IOSByteArray *) nil_chk(master_secret))->size_];
    [sha1 updateWithByteArray:random withInt:0 withInt:((IOSByteArray *) nil_chk(random))->size_];
    [sha1 doFinalWithByteArray:shatmp withInt:0];
    [md5 updateWithByteArray:master_secret withInt:0 withInt:master_secret->size_];
    [md5 updateWithByteArray:shatmp withInt:0 withInt:shatmp->size_];
    [md5 doFinalWithByteArray:tmp withInt:pos];
    pos += md5Size;
    ++i;
  }
  return OrgSpongycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(tmp, 0, size);
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_calculateMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withByteArray_(id<OrgSpongycastleCryptoTlsTlsContext> context, IOSByteArray *pre_master_secret) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  OrgSpongycastleCryptoTlsSecurityParameters *securityParameters = [((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context)) getSecurityParameters];
  IOSByteArray *seed;
  if (((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters))->extendedMasterSecret_) {
    seed = [securityParameters getSessionHash];
  }
  else {
    seed = OrgSpongycastleCryptoTlsTlsUtils_concatWithByteArray_withByteArray_([securityParameters getClientRandom], [securityParameters getServerRandom]);
  }
  if (OrgSpongycastleCryptoTlsTlsUtils_isSSLWithOrgSpongycastleCryptoTlsTlsContext_(context)) {
    return OrgSpongycastleCryptoTlsTlsUtils_calculateMasterSecret_SSLWithByteArray_withByteArray_(pre_master_secret, seed);
  }
  NSString *asciiLabel = securityParameters->extendedMasterSecret_ ? OrgSpongycastleCryptoTlsExporterLabel_extended_master_secret : OrgSpongycastleCryptoTlsExporterLabel_master_secret;
  return OrgSpongycastleCryptoTlsTlsUtils_PRFWithOrgSpongycastleCryptoTlsTlsContext_withByteArray_withNSString_withByteArray_withInt_(context, pre_master_secret, asciiLabel, seed, 48);
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_calculateMasterSecret_SSLWithByteArray_withByteArray_(IOSByteArray *pre_master_secret, IOSByteArray *random) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  id<OrgSpongycastleCryptoDigest> md5 = OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsHashAlgorithm_md5);
  id<OrgSpongycastleCryptoDigest> sha1 = OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsHashAlgorithm_sha1);
  jint md5Size = [((id<OrgSpongycastleCryptoDigest>) nil_chk(md5)) getDigestSize];
  IOSByteArray *shatmp = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(sha1)) getDigestSize]];
  IOSByteArray *rval = [IOSByteArray newArrayWithLength:md5Size * 3];
  jint pos = 0;
  for (jint i = 0; i < 3; ++i) {
    IOSByteArray *ssl3Const = IOSObjectArray_Get(nil_chk(OrgSpongycastleCryptoTlsTlsUtils_SSL3_CONST), i);
    [sha1 updateWithByteArray:ssl3Const withInt:0 withInt:((IOSByteArray *) nil_chk(ssl3Const))->size_];
    [sha1 updateWithByteArray:pre_master_secret withInt:0 withInt:((IOSByteArray *) nil_chk(pre_master_secret))->size_];
    [sha1 updateWithByteArray:random withInt:0 withInt:((IOSByteArray *) nil_chk(random))->size_];
    [sha1 doFinalWithByteArray:shatmp withInt:0];
    [md5 updateWithByteArray:pre_master_secret withInt:0 withInt:pre_master_secret->size_];
    [md5 updateWithByteArray:shatmp withInt:0 withInt:shatmp->size_];
    [md5 doFinalWithByteArray:rval withInt:pos];
    pos += md5Size;
  }
  return rval;
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsUtils_calculateVerifyDataWithOrgSpongycastleCryptoTlsTlsContext_withNSString_withByteArray_(id<OrgSpongycastleCryptoTlsTlsContext> context, NSString *asciiLabel, IOSByteArray *handshakeHash) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (OrgSpongycastleCryptoTlsTlsUtils_isSSLWithOrgSpongycastleCryptoTlsTlsContext_(context)) {
    return handshakeHash;
  }
  OrgSpongycastleCryptoTlsSecurityParameters *securityParameters = [((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context)) getSecurityParameters];
  IOSByteArray *master_secret = [((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters)) getMasterSecret];
  jint verify_data_length = [securityParameters getVerifyDataLength];
  return OrgSpongycastleCryptoTlsTlsUtils_PRFWithOrgSpongycastleCryptoTlsTlsContext_withByteArray_withNSString_withByteArray_withInt_(context, master_secret, asciiLabel, handshakeHash, verify_data_length);
}

id<OrgSpongycastleCryptoDigest> OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(jshort hashAlgorithm) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  switch (hashAlgorithm) {
    case OrgSpongycastleCryptoTlsHashAlgorithm_md5:
    return new_OrgSpongycastleCryptoDigestsMD5Digest_init();
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha1:
    return new_OrgSpongycastleCryptoDigestsSHA1Digest_init();
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha224:
    return new_OrgSpongycastleCryptoDigestsSHA224Digest_init();
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha256:
    return new_OrgSpongycastleCryptoDigestsSHA256Digest_init();
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha384:
    return new_OrgSpongycastleCryptoDigestsSHA384Digest_init();
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha512:
    return new_OrgSpongycastleCryptoDigestsSHA512Digest_init();
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unknown HashAlgorithm");
  }
}

id<OrgSpongycastleCryptoDigest> OrgSpongycastleCryptoTlsTlsUtils_createHashWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return signatureAndHashAlgorithm == nil ? new_OrgSpongycastleCryptoTlsCombinedHash_init() : OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_([signatureAndHashAlgorithm getHash]);
}

id<OrgSpongycastleCryptoDigest> OrgSpongycastleCryptoTlsTlsUtils_cloneHashWithShort_withOrgSpongycastleCryptoDigest_(jshort hashAlgorithm, id<OrgSpongycastleCryptoDigest> hash_) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  switch (hashAlgorithm) {
    case OrgSpongycastleCryptoTlsHashAlgorithm_md5:
    return new_OrgSpongycastleCryptoDigestsMD5Digest_initWithOrgSpongycastleCryptoDigestsMD5Digest_((OrgSpongycastleCryptoDigestsMD5Digest *) cast_chk(hash_, [OrgSpongycastleCryptoDigestsMD5Digest class]));
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha1:
    return new_OrgSpongycastleCryptoDigestsSHA1Digest_initWithOrgSpongycastleCryptoDigestsSHA1Digest_((OrgSpongycastleCryptoDigestsSHA1Digest *) cast_chk(hash_, [OrgSpongycastleCryptoDigestsSHA1Digest class]));
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha224:
    return new_OrgSpongycastleCryptoDigestsSHA224Digest_initWithOrgSpongycastleCryptoDigestsSHA224Digest_((OrgSpongycastleCryptoDigestsSHA224Digest *) cast_chk(hash_, [OrgSpongycastleCryptoDigestsSHA224Digest class]));
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha256:
    return new_OrgSpongycastleCryptoDigestsSHA256Digest_initWithOrgSpongycastleCryptoDigestsSHA256Digest_((OrgSpongycastleCryptoDigestsSHA256Digest *) cast_chk(hash_, [OrgSpongycastleCryptoDigestsSHA256Digest class]));
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha384:
    return new_OrgSpongycastleCryptoDigestsSHA384Digest_initWithOrgSpongycastleCryptoDigestsSHA384Digest_((OrgSpongycastleCryptoDigestsSHA384Digest *) cast_chk(hash_, [OrgSpongycastleCryptoDigestsSHA384Digest class]));
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha512:
    return new_OrgSpongycastleCryptoDigestsSHA512Digest_initWithOrgSpongycastleCryptoDigestsSHA512Digest_((OrgSpongycastleCryptoDigestsSHA512Digest *) cast_chk(hash_, [OrgSpongycastleCryptoDigestsSHA512Digest class]));
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unknown HashAlgorithm");
  }
}

id<OrgSpongycastleCryptoDigest> OrgSpongycastleCryptoTlsTlsUtils_createPRFHashWithInt_(jint prfAlgorithm) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  switch (prfAlgorithm) {
    case OrgSpongycastleCryptoTlsPRFAlgorithm_tls_prf_legacy:
    return new_OrgSpongycastleCryptoTlsCombinedHash_init();
    default:
    return OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsTlsUtils_getHashAlgorithmForPRFAlgorithmWithInt_(prfAlgorithm));
  }
}

id<OrgSpongycastleCryptoDigest> OrgSpongycastleCryptoTlsTlsUtils_clonePRFHashWithInt_withOrgSpongycastleCryptoDigest_(jint prfAlgorithm, id<OrgSpongycastleCryptoDigest> hash_) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  switch (prfAlgorithm) {
    case OrgSpongycastleCryptoTlsPRFAlgorithm_tls_prf_legacy:
    return new_OrgSpongycastleCryptoTlsCombinedHash_initWithOrgSpongycastleCryptoTlsCombinedHash_((OrgSpongycastleCryptoTlsCombinedHash *) cast_chk(hash_, [OrgSpongycastleCryptoTlsCombinedHash class]));
    default:
    return OrgSpongycastleCryptoTlsTlsUtils_cloneHashWithShort_withOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoTlsTlsUtils_getHashAlgorithmForPRFAlgorithmWithInt_(prfAlgorithm), hash_);
  }
}

jshort OrgSpongycastleCryptoTlsTlsUtils_getHashAlgorithmForPRFAlgorithmWithInt_(jint prfAlgorithm) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  switch (prfAlgorithm) {
    case OrgSpongycastleCryptoTlsPRFAlgorithm_tls_prf_legacy:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"legacy PRF not a valid algorithm");
    case OrgSpongycastleCryptoTlsPRFAlgorithm_tls_prf_sha256:
    return OrgSpongycastleCryptoTlsHashAlgorithm_sha256;
    case OrgSpongycastleCryptoTlsPRFAlgorithm_tls_prf_sha384:
    return OrgSpongycastleCryptoTlsHashAlgorithm_sha384;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unknown PRFAlgorithm");
  }
}

OrgSpongycastleAsn1ASN1ObjectIdentifier *OrgSpongycastleCryptoTlsTlsUtils_getOIDForHashAlgorithmWithShort_(jshort hashAlgorithm) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  switch (hashAlgorithm) {
    case OrgSpongycastleCryptoTlsHashAlgorithm_md5:
    return JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, md5);
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha1:
    return JreLoadStatic(OrgSpongycastleAsn1X509X509ObjectIdentifiers, id_SHA1);
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha224:
    return JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha224);
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha256:
    return JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha256);
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha384:
    return JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha384);
    case OrgSpongycastleCryptoTlsHashAlgorithm_sha512:
    return JreLoadStatic(OrgSpongycastleAsn1NistNISTObjectIdentifiers, id_sha512);
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unknown HashAlgorithm");
  }
}

jshort OrgSpongycastleCryptoTlsTlsUtils_getClientCertificateTypeWithOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoTlsCertificate_(OrgSpongycastleCryptoTlsCertificate *clientCertificate, OrgSpongycastleCryptoTlsCertificate *serverCertificate) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if ([((OrgSpongycastleCryptoTlsCertificate *) nil_chk(clientCertificate)) isEmpty]) {
    return -1;
  }
  OrgSpongycastleAsn1X509Certificate *x509Cert = [clientCertificate getCertificateAtWithInt:0];
  OrgSpongycastleAsn1X509SubjectPublicKeyInfo *keyInfo = [((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Cert)) getSubjectPublicKeyInfo];
  @try {
    OrgSpongycastleCryptoParamsAsymmetricKeyParameter *publicKey = OrgSpongycastleCryptoUtilPublicKeyFactory_createKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(keyInfo);
    if ([((OrgSpongycastleCryptoParamsAsymmetricKeyParameter *) nil_chk(publicKey)) isPrivate]) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
    }
    if ([publicKey isKindOfClass:[OrgSpongycastleCryptoParamsRSAKeyParameters class]]) {
      OrgSpongycastleCryptoTlsTlsUtils_validateKeyUsageWithOrgSpongycastleAsn1X509Certificate_withInt_(x509Cert, OrgSpongycastleAsn1X509KeyUsage_digitalSignature);
      return OrgSpongycastleCryptoTlsClientCertificateType_rsa_sign;
    }
    if ([publicKey isKindOfClass:[OrgSpongycastleCryptoParamsDSAPublicKeyParameters class]]) {
      OrgSpongycastleCryptoTlsTlsUtils_validateKeyUsageWithOrgSpongycastleAsn1X509Certificate_withInt_(x509Cert, OrgSpongycastleAsn1X509KeyUsage_digitalSignature);
      return OrgSpongycastleCryptoTlsClientCertificateType_dss_sign;
    }
    if ([publicKey isKindOfClass:[OrgSpongycastleCryptoParamsECPublicKeyParameters class]]) {
      OrgSpongycastleCryptoTlsTlsUtils_validateKeyUsageWithOrgSpongycastleAsn1X509Certificate_withInt_(x509Cert, OrgSpongycastleAsn1X509KeyUsage_digitalSignature);
      return OrgSpongycastleCryptoTlsClientCertificateType_ecdsa_sign;
    }
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unsupported_certificate);
  }
  @catch (JavaLangException *e) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_unsupported_certificate, e);
  }
}

void OrgSpongycastleCryptoTlsTlsUtils_trackHashAlgorithmsWithOrgSpongycastleCryptoTlsTlsHandshakeHash_withJavaUtilVector_(id<OrgSpongycastleCryptoTlsTlsHandshakeHash> handshakeHash, JavaUtilVector *supportedSignatureAlgorithms) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (supportedSignatureAlgorithms != nil) {
    for (jint i = 0; i < [supportedSignatureAlgorithms size]; ++i) {
      OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm = (OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *) cast_chk([supportedSignatureAlgorithms elementAtWithInt:i], [OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm class]);
      jshort hashAlgorithm = [((OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *) nil_chk(signatureAndHashAlgorithm)) getHash];
      if (!OrgSpongycastleCryptoTlsHashAlgorithm_isPrivateWithShort_(hashAlgorithm)) {
        [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk(handshakeHash)) trackHashAlgorithmWithShort:hashAlgorithm];
      }
    }
  }
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_hasSigningCapabilityWithShort_(jshort clientCertificateType) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  switch (clientCertificateType) {
    case OrgSpongycastleCryptoTlsClientCertificateType_dss_sign:
    case OrgSpongycastleCryptoTlsClientCertificateType_ecdsa_sign:
    case OrgSpongycastleCryptoTlsClientCertificateType_rsa_sign:
    return true;
    default:
    return false;
  }
}

id<OrgSpongycastleCryptoTlsTlsSigner> OrgSpongycastleCryptoTlsTlsUtils_createTlsSignerWithShort_(jshort clientCertificateType) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  switch (clientCertificateType) {
    case OrgSpongycastleCryptoTlsClientCertificateType_dss_sign:
    return new_OrgSpongycastleCryptoTlsTlsDSSSigner_init();
    case OrgSpongycastleCryptoTlsClientCertificateType_ecdsa_sign:
    return new_OrgSpongycastleCryptoTlsTlsECDSASigner_init();
    case OrgSpongycastleCryptoTlsClientCertificateType_rsa_sign:
    return new_OrgSpongycastleCryptoTlsTlsRSASigner_init();
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'clientCertificateType' is not a type with signing capability");
  }
}

IOSObjectArray *OrgSpongycastleCryptoTlsTlsUtils_genSSL3Const() {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint n = 10;
  IOSObjectArray *arr = [IOSObjectArray newArrayWithLength:n type:IOSClass_byteArray(1)];
  for (jint i = 0; i < n; i++) {
    IOSByteArray *b = [IOSByteArray newArrayWithLength:i + 1];
    OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(b, (jbyte) ('A' + i));
    (void) IOSObjectArray_Set(arr, i, b);
  }
  return arr;
}

JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_vectorOfOneWithId_(id obj) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  JavaUtilVector *v = new_JavaUtilVector_initWithInt_(1);
  [v addElementWithId:obj];
  return v;
}

jint OrgSpongycastleCryptoTlsTlsUtils_getCipherTypeWithInt_(jint ciphersuite) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  switch (OrgSpongycastleCryptoTlsTlsUtils_getEncryptionAlgorithmWithInt_(ciphersuite)) {
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_128_CCM:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_128_GCM:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_128_OCB_TAGLEN96:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_256_CCM:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_256_GCM:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_256_OCB_TAGLEN96:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_128_GCM:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_256_GCM:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_CHACHA20_POLY1305:
    return OrgSpongycastleCryptoTlsCipherType_aead;
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_RC2_CBC_40:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_IDEA_CBC:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_DES40_CBC:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_DES_CBC:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm__3DES_EDE_CBC:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_128_CBC:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_256_CBC:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_128_CBC:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_256_CBC:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_SEED_CBC:
    return OrgSpongycastleCryptoTlsCipherType_block;
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_NULL:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_RC4_40:
    case OrgSpongycastleCryptoTlsEncryptionAlgorithm_RC4_128:
    return OrgSpongycastleCryptoTlsCipherType_stream;
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

jint OrgSpongycastleCryptoTlsTlsUtils_getEncryptionAlgorithmWithInt_(jint ciphersuite) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  switch (ciphersuite) {
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm__3DES_EDE_CBC;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_WITH_AES_128_CBC_SHA:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_128_CBC;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CCM:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_128_CCM;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_DHE_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CCM_8:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_128_CCM_8;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_GCM_SHA256:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_128_GCM;
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_PSK_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_RSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_PSK_WITH_AES_128_OCB:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_128_OCB_TAGLEN96;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_WITH_AES_256_CBC_SHA:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_256_CBC;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CCM:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_256_CCM;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_DHE_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CCM_8:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_256_CCM_8;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_GCM_SHA384:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_256_GCM;
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_PSK_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_RSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_PSK_WITH_AES_256_OCB:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_AES_256_OCB_TAGLEN96;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_128_CBC;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_128_GCM;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_256_CBC;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_CAMELLIA_256_GCM;
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_CHACHA20_POLY1305;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_NULL_MD5:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_NULL;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_NULL_SHA:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_NULL;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_NULL_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_NULL_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_NULL_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_NULL_SHA256:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_NULL;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_NULL_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_NULL_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_NULL_SHA384:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_NULL;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_RC4_128_MD5:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_RC4_128_MD5:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_RC4_128;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_RC4_128_SHA:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_RC4_128;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_SEED_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_SEED_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_SEED_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_SEED_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_SEED_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_SEED_CBC_SHA:
    return OrgSpongycastleCryptoTlsEncryptionAlgorithm_SEED_CBC;
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

jint OrgSpongycastleCryptoTlsTlsUtils_getKeyExchangeAlgorithmWithInt_(jint ciphersuite) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  switch (ciphersuite) {
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_RC4_128_MD5:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_SEED_CBC_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_anon;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_SEED_CBC_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_DSS;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_SEED_CBC_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_RSA;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_SEED_CBC_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_DSS;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_PSK_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_PSK_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_NULL_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_NULL_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_DHE_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_DHE_WITH_AES_256_CCM_8:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_PSK;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_RSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_RSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_SEED_CBC_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_RSA;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_RC4_128_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDH_anon;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_RC4_128_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDH_ECDSA;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_RC4_128_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDH_RSA;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_ECDSA;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_RC4_128_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_PSK;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_RC4_128_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_RSA;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_PSK_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_PSK_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_NULL_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_NULL_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_RC4_128_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_PSK;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_NULL_MD5:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_NULL_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_RC4_128_MD5:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_SEED_CBC_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_RSA;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_NULL_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_NULL_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_RC4_128_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_RSA_PSK;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_WITH_AES_256_CBC_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_SRP;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_SRP_DSS;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA:
    return OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_SRP_RSA;
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

jint OrgSpongycastleCryptoTlsTlsUtils_getMACAlgorithmWithInt_(jint ciphersuite) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  switch (ciphersuite) {
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_PSK_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_PSK_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_RSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_RSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_DHE_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_DHE_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_PSK_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_PSK_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    return OrgSpongycastleCryptoTlsMACAlgorithm__null;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_RC4_128_MD5:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_NULL_MD5:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_RC4_128_MD5:
    return OrgSpongycastleCryptoTlsMACAlgorithm_hmac_md5;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_SEED_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_SEED_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_SEED_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_SEED_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_SEED_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_anon_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_NULL_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_RC4_128_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_SEED_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_WITH_AES_128_CBC_SHA:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_WITH_AES_256_CBC_SHA:
    return OrgSpongycastleCryptoTlsMACAlgorithm_hmac_sha1;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_NULL_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_NULL_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_NULL_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_NULL_SHA256:
    return OrgSpongycastleCryptoTlsMACAlgorithm_hmac_sha256;
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_NULL_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_NULL_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_NULL_SHA384:
    return OrgSpongycastleCryptoTlsMACAlgorithm_hmac_sha384;
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsTlsUtils_getMinimumVersionWithInt_(jint ciphersuite) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  switch (ciphersuite) {
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_PSK_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_PSK_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_RSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_RSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_DHE_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_DHE_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_PSK_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_PSK_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_NULL_SHA256:
    return JreLoadStatic(OrgSpongycastleCryptoTlsProtocolVersion, TLSv12);
    default:
    return JreLoadStatic(OrgSpongycastleCryptoTlsProtocolVersion, SSLv3);
  }
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isAEADCipherSuiteWithInt_(jint ciphersuite) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return OrgSpongycastleCryptoTlsCipherType_aead == OrgSpongycastleCryptoTlsTlsUtils_getCipherTypeWithInt_(ciphersuite);
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isBlockCipherSuiteWithInt_(jint ciphersuite) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return OrgSpongycastleCryptoTlsCipherType_block == OrgSpongycastleCryptoTlsTlsUtils_getCipherTypeWithInt_(ciphersuite);
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isStreamCipherSuiteWithInt_(jint ciphersuite) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return OrgSpongycastleCryptoTlsCipherType_stream == OrgSpongycastleCryptoTlsTlsUtils_getCipherTypeWithInt_(ciphersuite);
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidCipherSuiteForSignatureAlgorithmsWithInt_withJavaUtilVector_(jint cipherSuite, JavaUtilVector *sigAlgs) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  jint keyExchangeAlgorithm;
  @try {
    keyExchangeAlgorithm = OrgSpongycastleCryptoTlsTlsUtils_getKeyExchangeAlgorithmWithInt_(cipherSuite);
  }
  @catch (JavaIoIOException *e) {
    return true;
  }
  switch (keyExchangeAlgorithm) {
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_anon:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_anon_EXPORT:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDH_anon:
    return [((JavaUtilVector *) nil_chk(sigAlgs)) containsWithId:OrgSpongycastleUtilShorts_valueOfWithShort_(OrgSpongycastleCryptoTlsSignatureAlgorithm_anonymous)];
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_RSA:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_RSA_EXPORT:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_RSA:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_SRP_RSA:
    return [((JavaUtilVector *) nil_chk(sigAlgs)) containsWithId:OrgSpongycastleUtilShorts_valueOfWithShort_(OrgSpongycastleCryptoTlsSignatureAlgorithm_rsa)];
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_DSS:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_DSS_EXPORT:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_SRP_DSS:
    return [((JavaUtilVector *) nil_chk(sigAlgs)) containsWithId:OrgSpongycastleUtilShorts_valueOfWithShort_(OrgSpongycastleCryptoTlsSignatureAlgorithm_dsa)];
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_ECDSA:
    return [((JavaUtilVector *) nil_chk(sigAlgs)) containsWithId:OrgSpongycastleUtilShorts_valueOfWithShort_(OrgSpongycastleCryptoTlsSignatureAlgorithm_ecdsa)];
    default:
    return true;
  }
}

jboolean OrgSpongycastleCryptoTlsTlsUtils_isValidCipherSuiteForVersionWithInt_withOrgSpongycastleCryptoTlsProtocolVersion_(jint cipherSuite, OrgSpongycastleCryptoTlsProtocolVersion *serverVersion) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  return [((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(OrgSpongycastleCryptoTlsTlsUtils_getMinimumVersionWithInt_(cipherSuite))) isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:[((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(serverVersion)) getEquivalentTLSVersion]];
}

JavaUtilVector *OrgSpongycastleCryptoTlsTlsUtils_getUsableSignatureAlgorithmsWithJavaUtilVector_(JavaUtilVector *sigHashAlgs) {
  OrgSpongycastleCryptoTlsTlsUtils_initialize();
  if (sigHashAlgs == nil) {
    return OrgSpongycastleCryptoTlsTlsUtils_getAllSignatureAlgorithms();
  }
  JavaUtilVector *v = new_JavaUtilVector_initWithInt_(4);
  [v addElementWithId:OrgSpongycastleUtilShorts_valueOfWithShort_(OrgSpongycastleCryptoTlsSignatureAlgorithm_anonymous)];
  for (jint i = 0; i < [sigHashAlgs size]; ++i) {
    OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *sigHashAlg = (OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *) cast_chk([sigHashAlgs elementAtWithInt:i], [OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm class]);
    {
      JavaLangShort *sigAlg = OrgSpongycastleUtilShorts_valueOfWithShort_([((OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *) nil_chk(sigHashAlg)) getSignature]);
      if (![v containsWithId:sigAlg]) {
        [v addElementWithId:sigAlg];
      }
    }
  }
  return v;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsTlsUtils)
