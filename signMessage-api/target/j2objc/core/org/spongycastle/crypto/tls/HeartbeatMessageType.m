//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/HeartbeatMessageType.java
//

#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/tls/HeartbeatMessageType.h"

@implementation OrgSpongycastleCryptoTlsHeartbeatMessageType

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsHeartbeatMessageType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isValidWithShort:(jshort)heartbeatMessageType {
  return OrgSpongycastleCryptoTlsHeartbeatMessageType_isValidWithShort_(heartbeatMessageType);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isValidWithShort:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "heartbeat_request", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHeartbeatMessageType_heartbeat_request, 0x19, -1, -1, -1, -1 },
    { "heartbeat_response", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHeartbeatMessageType_heartbeat_response, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isValid", "S" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsHeartbeatMessageType = { "HeartbeatMessageType", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsHeartbeatMessageType;
}

@end

void OrgSpongycastleCryptoTlsHeartbeatMessageType_init(OrgSpongycastleCryptoTlsHeartbeatMessageType *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoTlsHeartbeatMessageType *new_OrgSpongycastleCryptoTlsHeartbeatMessageType_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsHeartbeatMessageType, init)
}

OrgSpongycastleCryptoTlsHeartbeatMessageType *create_OrgSpongycastleCryptoTlsHeartbeatMessageType_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsHeartbeatMessageType, init)
}

jboolean OrgSpongycastleCryptoTlsHeartbeatMessageType_isValidWithShort_(jshort heartbeatMessageType) {
  OrgSpongycastleCryptoTlsHeartbeatMessageType_initialize();
  return heartbeatMessageType >= OrgSpongycastleCryptoTlsHeartbeatMessageType_heartbeat_request && heartbeatMessageType <= OrgSpongycastleCryptoTlsHeartbeatMessageType_heartbeat_response;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsHeartbeatMessageType)
