//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/ServerName.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/NameType.h"
#include "org/spongycastle/crypto/tls/ServerName.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

@implementation OrgSpongycastleCryptoTlsServerName

- (instancetype)initWithShort:(jshort)nameType
                       withId:(id)name {
  OrgSpongycastleCryptoTlsServerName_initWithShort_withId_(self, nameType, name);
  return self;
}

- (jshort)getNameType {
  return nameType_;
}

- (id)getName {
  return name_;
}

- (NSString *)getHostName {
  if (!OrgSpongycastleCryptoTlsServerName_isCorrectTypeWithShort_withId_(OrgSpongycastleCryptoTlsNameType_host_name, name_)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"'name' is not a HostName string");
  }
  return (NSString *) cast_chk(name_, [NSString class]);
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(nameType_, output);
  {
    IOSByteArray *asciiEncoding;
    switch (nameType_) {
      case OrgSpongycastleCryptoTlsNameType_host_name:
      asciiEncoding = [((NSString *) nil_chk(((NSString *) cast_chk(name_, [NSString class])))) java_getBytesWithCharsetName:@"ASCII"];
      if (((IOSByteArray *) nil_chk(asciiEncoding))->size_ < 1) {
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
      }
      OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(asciiEncoding, output);
      break;
      default:
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
    }
  }
}

+ (OrgSpongycastleCryptoTlsServerName *)parseWithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsServerName_parseWithJavaIoInputStream_(input);
}

+ (jboolean)isCorrectTypeWithShort:(jshort)nameType
                            withId:(id)name {
  return OrgSpongycastleCryptoTlsServerName_isCorrectTypeWithShort_withId_(nameType, name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsServerName;", 0x9, 4, 5, 3, -1, -1, -1 },
    { NULL, "Z", 0xc, 6, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithShort:withId:);
  methods[1].selector = @selector(getNameType);
  methods[2].selector = @selector(getName);
  methods[3].selector = @selector(getHostName);
  methods[4].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[5].selector = @selector(parseWithJavaIoInputStream:);
  methods[6].selector = @selector(isCorrectTypeWithShort:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nameType_", "S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "name_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "SLNSObject;", "encode", "LJavaIoOutputStream;", "LJavaIoIOException;", "parse", "LJavaIoInputStream;", "isCorrectType" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsServerName = { "ServerName", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsServerName;
}

@end

void OrgSpongycastleCryptoTlsServerName_initWithShort_withId_(OrgSpongycastleCryptoTlsServerName *self, jshort nameType, id name) {
  NSObject_init(self);
  if (!OrgSpongycastleCryptoTlsServerName_isCorrectTypeWithShort_withId_(nameType, name)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'name' is not an instance of the correct type");
  }
  self->nameType_ = nameType;
  self->name_ = name;
}

OrgSpongycastleCryptoTlsServerName *new_OrgSpongycastleCryptoTlsServerName_initWithShort_withId_(jshort nameType, id name) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsServerName, initWithShort_withId_, nameType, name)
}

OrgSpongycastleCryptoTlsServerName *create_OrgSpongycastleCryptoTlsServerName_initWithShort_withId_(jshort nameType, id name) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsServerName, initWithShort_withId_, nameType, name)
}

OrgSpongycastleCryptoTlsServerName *OrgSpongycastleCryptoTlsServerName_parseWithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsServerName_initialize();
  jshort name_type = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
  id name;
  switch (name_type) {
    case OrgSpongycastleCryptoTlsNameType_host_name:
    {
      IOSByteArray *asciiEncoding = OrgSpongycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(input);
      if (((IOSByteArray *) nil_chk(asciiEncoding))->size_ < 1) {
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
      }
      name = [NSString java_stringWithBytes:asciiEncoding charsetName:@"ASCII"];
      break;
    }
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  return new_OrgSpongycastleCryptoTlsServerName_initWithShort_withId_(name_type, name);
}

jboolean OrgSpongycastleCryptoTlsServerName_isCorrectTypeWithShort_withId_(jshort nameType, id name) {
  OrgSpongycastleCryptoTlsServerName_initialize();
  switch (nameType) {
    case OrgSpongycastleCryptoTlsNameType_host_name:
    return [name isKindOfClass:[NSString class]];
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'nameType' is an unsupported NameType");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsServerName)
