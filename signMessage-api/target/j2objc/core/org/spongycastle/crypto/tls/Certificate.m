//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/Certificate.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/util/Vector.h"
#include "org/spongycastle/asn1/ASN1Encoding.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/x509/Certificate.h"
#include "org/spongycastle/crypto/tls/Certificate.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoTlsCertificate)

OrgSpongycastleCryptoTlsCertificate *OrgSpongycastleCryptoTlsCertificate_EMPTY_CHAIN;

@implementation OrgSpongycastleCryptoTlsCertificate

- (instancetype)initWithOrgSpongycastleAsn1X509CertificateArray:(IOSObjectArray *)certificateList {
  OrgSpongycastleCryptoTlsCertificate_initWithOrgSpongycastleAsn1X509CertificateArray_(self, certificateList);
  return self;
}

- (IOSObjectArray *)getCertificateList {
  return [self cloneCertificateList];
}

- (OrgSpongycastleAsn1X509Certificate *)getCertificateAtWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(certificateList_), index);
}

- (jint)getLength {
  return ((IOSObjectArray *) nil_chk(certificateList_))->size_;
}

- (jboolean)isEmpty {
  return ((IOSObjectArray *) nil_chk(certificateList_))->size_ == 0;
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  JavaUtilVector *derEncodings = new_JavaUtilVector_initWithInt_(((IOSObjectArray *) nil_chk(self->certificateList_))->size_);
  jint totalLength = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->certificateList_))->size_; ++i) {
    IOSByteArray *derEncoding = [((OrgSpongycastleAsn1X509Certificate *) nil_chk(IOSObjectArray_Get(certificateList_, i))) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
    [derEncodings addElementWithId:derEncoding];
    totalLength += ((IOSByteArray *) nil_chk(derEncoding))->size_ + 3;
  }
  OrgSpongycastleCryptoTlsTlsUtils_checkUint24WithInt_(totalLength);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withJavaIoOutputStream_(totalLength, output);
  for (jint i = 0; i < [derEncodings size]; ++i) {
    IOSByteArray *derEncoding = (IOSByteArray *) cast_chk([derEncodings elementAtWithInt:i], [IOSByteArray class]);
    OrgSpongycastleCryptoTlsTlsUtils_writeOpaque24WithByteArray_withJavaIoOutputStream_(derEncoding, output);
  }
}

+ (OrgSpongycastleCryptoTlsCertificate *)parseWithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsCertificate_parseWithJavaIoInputStream_(input);
}

- (IOSObjectArray *)cloneCertificateList {
  IOSObjectArray *result = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(certificateList_))->size_ type:OrgSpongycastleAsn1X509Certificate_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(certificateList_, 0, result, 0, result->size_);
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[LOrgSpongycastleAsn1X509Certificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509Certificate;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsCertificate;", 0x9, 6, 7, 5, -1, -1, -1 },
    { NULL, "[LOrgSpongycastleAsn1X509Certificate;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleAsn1X509CertificateArray:);
  methods[1].selector = @selector(getCertificateList);
  methods[2].selector = @selector(getCertificateAtWithInt:);
  methods[3].selector = @selector(getLength);
  methods[4].selector = @selector(isEmpty);
  methods[5].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[6].selector = @selector(parseWithJavaIoInputStream:);
  methods[7].selector = @selector(cloneCertificateList);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_CHAIN", "LOrgSpongycastleCryptoTlsCertificate;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "certificateList_", "[LOrgSpongycastleAsn1X509Certificate;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LOrgSpongycastleAsn1X509Certificate;", "getCertificateAt", "I", "encode", "LJavaIoOutputStream;", "LJavaIoIOException;", "parse", "LJavaIoInputStream;", &OrgSpongycastleCryptoTlsCertificate_EMPTY_CHAIN };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsCertificate = { "Certificate", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsCertificate;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoTlsCertificate class]) {
    OrgSpongycastleCryptoTlsCertificate_EMPTY_CHAIN = new_OrgSpongycastleCryptoTlsCertificate_initWithOrgSpongycastleAsn1X509CertificateArray_([IOSObjectArray newArrayWithLength:0 type:OrgSpongycastleAsn1X509Certificate_class_()]);
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoTlsCertificate)
  }
}

@end

void OrgSpongycastleCryptoTlsCertificate_initWithOrgSpongycastleAsn1X509CertificateArray_(OrgSpongycastleCryptoTlsCertificate *self, IOSObjectArray *certificateList) {
  NSObject_init(self);
  if (certificateList == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'certificateList' cannot be null");
  }
  self->certificateList_ = certificateList;
}

OrgSpongycastleCryptoTlsCertificate *new_OrgSpongycastleCryptoTlsCertificate_initWithOrgSpongycastleAsn1X509CertificateArray_(IOSObjectArray *certificateList) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsCertificate, initWithOrgSpongycastleAsn1X509CertificateArray_, certificateList)
}

OrgSpongycastleCryptoTlsCertificate *create_OrgSpongycastleCryptoTlsCertificate_initWithOrgSpongycastleAsn1X509CertificateArray_(IOSObjectArray *certificateList) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsCertificate, initWithOrgSpongycastleAsn1X509CertificateArray_, certificateList)
}

OrgSpongycastleCryptoTlsCertificate *OrgSpongycastleCryptoTlsCertificate_parseWithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsCertificate_initialize();
  jint totalLength = OrgSpongycastleCryptoTlsTlsUtils_readUint24WithJavaIoInputStream_(input);
  if (totalLength == 0) {
    return OrgSpongycastleCryptoTlsCertificate_EMPTY_CHAIN;
  }
  IOSByteArray *certListData = OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(totalLength, input);
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(certListData);
  JavaUtilVector *certificate_list = new_JavaUtilVector_init();
  while ([buf available] > 0) {
    IOSByteArray *berEncoding = OrgSpongycastleCryptoTlsTlsUtils_readOpaque24WithJavaIoInputStream_(buf);
    OrgSpongycastleAsn1ASN1Primitive *asn1Cert = OrgSpongycastleCryptoTlsTlsUtils_readASN1ObjectWithByteArray_(berEncoding);
    [certificate_list addElementWithId:OrgSpongycastleAsn1X509Certificate_getInstanceWithId_(asn1Cert)];
  }
  IOSObjectArray *certificateList = [IOSObjectArray newArrayWithLength:[certificate_list size] type:OrgSpongycastleAsn1X509Certificate_class_()];
  for (jint i = 0; i < [certificate_list size]; i++) {
    (void) IOSObjectArray_Set(certificateList, i, (OrgSpongycastleAsn1X509Certificate *) cast_chk([certificate_list elementAtWithInt:i], [OrgSpongycastleAsn1X509Certificate class]));
  }
  return new_OrgSpongycastleCryptoTlsCertificate_initWithOrgSpongycastleAsn1X509CertificateArray_(certificateList);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsCertificate)
