//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DTLSReliableHandshake.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/DTLSHandshakeRetransmit.h"
#include "org/spongycastle/crypto/tls/DTLSReassembler.h"
#include "org/spongycastle/crypto/tls/DTLSRecordLayer.h"
#include "org/spongycastle/crypto/tls/DTLSReliableHandshake.h"
#include "org/spongycastle/crypto/tls/DeferredHash.h"
#include "org/spongycastle/crypto/tls/HandshakeType.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsHandshakeHash.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/util/Integers.h"

@interface OrgSpongycastleCryptoTlsDTLSReliableHandshake () {
 @public
  OrgSpongycastleCryptoTlsDTLSRecordLayer *recordLayer_;
  id<OrgSpongycastleCryptoTlsTlsHandshakeHash> handshakeHash_;
  JavaUtilHashtable *currentInboundFlight_;
  JavaUtilHashtable *previousInboundFlight_;
  JavaUtilVector *outboundFlight_;
  jboolean sending_;
  jint message_seq_;
  jint next_receive_seq_;
}

- (jint)backOffWithInt:(jint)timeoutMillis;

- (void)checkInboundFlight;

- (OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *)getPendingMessage;

- (void)prepareInboundFlightWithJavaUtilHashtable:(JavaUtilHashtable *)nextFlight;

- (jboolean)processRecordWithInt:(jint)windowSize
                         withInt:(jint)epoch
                   withByteArray:(IOSByteArray *)buf
                         withInt:(jint)off
                         withInt:(jint)len;

- (void)resendOutboundFlight;

- (OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *)updateHandshakeMessagesDigestWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message:(OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *)message;

- (void)writeMessageWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message:(OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *)message;

- (void)writeHandshakeFragmentWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message:(OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *)message
                                                                                withInt:(jint)fragment_offset
                                                                                withInt:(jint)fragment_length;

+ (jboolean)checkAllWithJavaUtilHashtable:(JavaUtilHashtable *)inboundFlight;

+ (void)resetAllWithJavaUtilHashtable:(JavaUtilHashtable *)inboundFlight;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSReliableHandshake, recordLayer_, OrgSpongycastleCryptoTlsDTLSRecordLayer *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSReliableHandshake, handshakeHash_, id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSReliableHandshake, currentInboundFlight_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSReliableHandshake, previousInboundFlight_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSReliableHandshake, outboundFlight_, JavaUtilVector *)

inline jint OrgSpongycastleCryptoTlsDTLSReliableHandshake_get_MAX_RECEIVE_AHEAD(void);
#define OrgSpongycastleCryptoTlsDTLSReliableHandshake_MAX_RECEIVE_AHEAD 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsDTLSReliableHandshake, MAX_RECEIVE_AHEAD, jint)

inline jint OrgSpongycastleCryptoTlsDTLSReliableHandshake_get_MESSAGE_HEADER_LENGTH(void);
#define OrgSpongycastleCryptoTlsDTLSReliableHandshake_MESSAGE_HEADER_LENGTH 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsDTLSReliableHandshake, MESSAGE_HEADER_LENGTH, jint)

__attribute__((unused)) static jint OrgSpongycastleCryptoTlsDTLSReliableHandshake_backOffWithInt_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self, jint timeoutMillis);

__attribute__((unused)) static void OrgSpongycastleCryptoTlsDTLSReliableHandshake_checkInboundFlight(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self);

__attribute__((unused)) static OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *OrgSpongycastleCryptoTlsDTLSReliableHandshake_getPendingMessage(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self);

__attribute__((unused)) static void OrgSpongycastleCryptoTlsDTLSReliableHandshake_prepareInboundFlightWithJavaUtilHashtable_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self, JavaUtilHashtable *nextFlight);

__attribute__((unused)) static jboolean OrgSpongycastleCryptoTlsDTLSReliableHandshake_processRecordWithInt_withInt_withByteArray_withInt_withInt_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self, jint windowSize, jint epoch, IOSByteArray *buf, jint off, jint len);

__attribute__((unused)) static void OrgSpongycastleCryptoTlsDTLSReliableHandshake_resendOutboundFlight(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self);

__attribute__((unused)) static OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *OrgSpongycastleCryptoTlsDTLSReliableHandshake_updateHandshakeMessagesDigestWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self, OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *message);

__attribute__((unused)) static void OrgSpongycastleCryptoTlsDTLSReliableHandshake_writeMessageWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self, OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *message);

__attribute__((unused)) static void OrgSpongycastleCryptoTlsDTLSReliableHandshake_writeHandshakeFragmentWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_withInt_withInt_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self, OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *message, jint fragment_offset, jint fragment_length);

__attribute__((unused)) static jboolean OrgSpongycastleCryptoTlsDTLSReliableHandshake_checkAllWithJavaUtilHashtable_(JavaUtilHashtable *inboundFlight);

__attribute__((unused)) static void OrgSpongycastleCryptoTlsDTLSReliableHandshake_resetAllWithJavaUtilHashtable_(JavaUtilHashtable *inboundFlight);

@interface OrgSpongycastleCryptoTlsDTLSReliableHandshake_1 : NSObject < OrgSpongycastleCryptoTlsDTLSHandshakeRetransmit > {
 @public
  OrgSpongycastleCryptoTlsDTLSReliableHandshake *this$0_;
}

- (instancetype)initWithOrgSpongycastleCryptoTlsDTLSReliableHandshake:(OrgSpongycastleCryptoTlsDTLSReliableHandshake *)outer$;

- (void)receivedHandshakeRecordWithInt:(jint)epoch
                         withByteArray:(IOSByteArray *)buf
                               withInt:(jint)off
                               withInt:(jint)len;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsDTLSReliableHandshake_1)

__attribute__((unused)) static void OrgSpongycastleCryptoTlsDTLSReliableHandshake_1_initWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_(OrgSpongycastleCryptoTlsDTLSReliableHandshake_1 *self, OrgSpongycastleCryptoTlsDTLSReliableHandshake *outer$);

__attribute__((unused)) static OrgSpongycastleCryptoTlsDTLSReliableHandshake_1 *new_OrgSpongycastleCryptoTlsDTLSReliableHandshake_1_initWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleCryptoTlsDTLSReliableHandshake_1 *create_OrgSpongycastleCryptoTlsDTLSReliableHandshake_1_initWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *outer$);

@interface OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message () {
 @public
  jint message_seq_;
  jshort msg_type_;
  IOSByteArray *body_;
}

- (instancetype)initWithInt:(jint)message_seq
                  withShort:(jshort)msg_type
              withByteArray:(IOSByteArray *)body;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message, body_, IOSByteArray *)

__attribute__((unused)) static void OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_initWithInt_withShort_withByteArray_(OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *self, jint message_seq, jshort msg_type, IOSByteArray *body);

__attribute__((unused)) static OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *new_OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_initWithInt_withShort_withByteArray_(jint message_seq, jshort msg_type, IOSByteArray *body) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *create_OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_initWithInt_withShort_withByteArray_(jint message_seq, jshort msg_type, IOSByteArray *body);

@implementation OrgSpongycastleCryptoTlsDTLSReliableHandshake

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
               withOrgSpongycastleCryptoTlsDTLSRecordLayer:(OrgSpongycastleCryptoTlsDTLSRecordLayer *)transport {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsDTLSRecordLayer_(self, context, transport);
  return self;
}

- (void)notifyHelloComplete {
  self->handshakeHash_ = [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk(handshakeHash_)) notifyPRFDetermined];
}

- (id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)getHandshakeHash {
  return handshakeHash_;
}

- (id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)prepareToFinish {
  id<OrgSpongycastleCryptoTlsTlsHandshakeHash> result = handshakeHash_;
  self->handshakeHash_ = [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk(handshakeHash_)) stopTracking];
  return result;
}

- (void)sendMessageWithShort:(jshort)msg_type
               withByteArray:(IOSByteArray *)body {
  OrgSpongycastleCryptoTlsTlsUtils_checkUint24WithInt_(((IOSByteArray *) nil_chk(body))->size_);
  if (!sending_) {
    OrgSpongycastleCryptoTlsDTLSReliableHandshake_checkInboundFlight(self);
    sending_ = true;
    [((JavaUtilVector *) nil_chk(outboundFlight_)) removeAllElements];
  }
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *message = new_OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_initWithInt_withShort_withByteArray_(message_seq_++, msg_type, body);
  [((JavaUtilVector *) nil_chk(outboundFlight_)) addElementWithId:message];
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_writeMessageWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_(self, message);
  (void) OrgSpongycastleCryptoTlsDTLSReliableHandshake_updateHandshakeMessagesDigestWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_(self, message);
}

- (IOSByteArray *)receiveMessageBodyWithShort:(jshort)msg_type {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *message = [self receiveMessage];
  if ([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(message)) getType] != msg_type) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
  return [message getBody];
}

- (OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *)receiveMessage {
  if (sending_) {
    sending_ = false;
    OrgSpongycastleCryptoTlsDTLSReliableHandshake_prepareInboundFlightWithJavaUtilHashtable_(self, new_JavaUtilHashtable_init());
  }
  IOSByteArray *buf = nil;
  jint readTimeoutMillis = 1000;
  for (; ; ) {
    @try {
      for (; ; ) {
        OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *pending = OrgSpongycastleCryptoTlsDTLSReliableHandshake_getPendingMessage(self);
        if (pending != nil) {
          return pending;
        }
        jint receiveLimit = [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(recordLayer_)) getReceiveLimit];
        if (buf == nil || buf->size_ < receiveLimit) {
          buf = [IOSByteArray newArrayWithLength:receiveLimit];
        }
        jint received = [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(recordLayer_)) receiveWithByteArray:buf withInt:0 withInt:receiveLimit withInt:readTimeoutMillis];
        if (received < 0) {
          break;
        }
        jboolean resentOutbound = OrgSpongycastleCryptoTlsDTLSReliableHandshake_processRecordWithInt_withInt_withByteArray_withInt_withInt_(self, OrgSpongycastleCryptoTlsDTLSReliableHandshake_MAX_RECEIVE_AHEAD, [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(recordLayer_)) getReadEpoch], buf, 0, received);
        if (resentOutbound) {
          readTimeoutMillis = OrgSpongycastleCryptoTlsDTLSReliableHandshake_backOffWithInt_(self, readTimeoutMillis);
        }
      }
    }
    @catch (JavaIoIOException *e) {
    }
    OrgSpongycastleCryptoTlsDTLSReliableHandshake_resendOutboundFlight(self);
    readTimeoutMillis = OrgSpongycastleCryptoTlsDTLSReliableHandshake_backOffWithInt_(self, readTimeoutMillis);
  }
}

- (void)finish {
  id<OrgSpongycastleCryptoTlsDTLSHandshakeRetransmit> retransmit = nil;
  if (!sending_) {
    OrgSpongycastleCryptoTlsDTLSReliableHandshake_checkInboundFlight(self);
  }
  else {
    OrgSpongycastleCryptoTlsDTLSReliableHandshake_prepareInboundFlightWithJavaUtilHashtable_(self, nil);
    if (previousInboundFlight_ != nil) {
      retransmit = new_OrgSpongycastleCryptoTlsDTLSReliableHandshake_1_initWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_(self);
    }
  }
  [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(recordLayer_)) handshakeSuccessfulWithOrgSpongycastleCryptoTlsDTLSHandshakeRetransmit:retransmit];
}

- (void)resetHandshakeMessagesDigest {
  [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk(handshakeHash_)) reset];
}

- (jint)backOffWithInt:(jint)timeoutMillis {
  return OrgSpongycastleCryptoTlsDTLSReliableHandshake_backOffWithInt_(self, timeoutMillis);
}

- (void)checkInboundFlight {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_checkInboundFlight(self);
}

- (OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *)getPendingMessage {
  return OrgSpongycastleCryptoTlsDTLSReliableHandshake_getPendingMessage(self);
}

- (void)prepareInboundFlightWithJavaUtilHashtable:(JavaUtilHashtable *)nextFlight {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_prepareInboundFlightWithJavaUtilHashtable_(self, nextFlight);
}

- (jboolean)processRecordWithInt:(jint)windowSize
                         withInt:(jint)epoch
                   withByteArray:(IOSByteArray *)buf
                         withInt:(jint)off
                         withInt:(jint)len {
  return OrgSpongycastleCryptoTlsDTLSReliableHandshake_processRecordWithInt_withInt_withByteArray_withInt_withInt_(self, windowSize, epoch, buf, off, len);
}

- (void)resendOutboundFlight {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_resendOutboundFlight(self);
}

- (OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *)updateHandshakeMessagesDigestWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message:(OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *)message {
  return OrgSpongycastleCryptoTlsDTLSReliableHandshake_updateHandshakeMessagesDigestWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_(self, message);
}

- (void)writeMessageWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message:(OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *)message {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_writeMessageWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_(self, message);
}

- (void)writeHandshakeFragmentWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message:(OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *)message
                                                                                withInt:(jint)fragment_offset
                                                                                withInt:(jint)fragment_length {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_writeHandshakeFragmentWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_withInt_withInt_(self, message, fragment_offset, fragment_length);
}

+ (jboolean)checkAllWithJavaUtilHashtable:(JavaUtilHashtable *)inboundFlight {
  return OrgSpongycastleCryptoTlsDTLSReliableHandshake_checkAllWithJavaUtilHashtable_(inboundFlight);
}

+ (void)resetAllWithJavaUtilHashtable:(JavaUtilHashtable *)inboundFlight {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_resetAllWithJavaUtilHashtable_(inboundFlight);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsHandshakeHash;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsHandshakeHash;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, 3, -1, -1, -1 },
    { NULL, "[B", 0x0, 4, 5, 3, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message;", 0x0, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message;", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 10, 11, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message;", 0x2, 12, 13, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 13, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, 3, -1, -1, -1 },
    { NULL, "Z", 0xa, 17, 9, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 18, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsContext:withOrgSpongycastleCryptoTlsDTLSRecordLayer:);
  methods[1].selector = @selector(notifyHelloComplete);
  methods[2].selector = @selector(getHandshakeHash);
  methods[3].selector = @selector(prepareToFinish);
  methods[4].selector = @selector(sendMessageWithShort:withByteArray:);
  methods[5].selector = @selector(receiveMessageBodyWithShort:);
  methods[6].selector = @selector(receiveMessage);
  methods[7].selector = @selector(finish);
  methods[8].selector = @selector(resetHandshakeMessagesDigest);
  methods[9].selector = @selector(backOffWithInt:);
  methods[10].selector = @selector(checkInboundFlight);
  methods[11].selector = @selector(getPendingMessage);
  methods[12].selector = @selector(prepareInboundFlightWithJavaUtilHashtable:);
  methods[13].selector = @selector(processRecordWithInt:withInt:withByteArray:withInt:withInt:);
  methods[14].selector = @selector(resendOutboundFlight);
  methods[15].selector = @selector(updateHandshakeMessagesDigestWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message:);
  methods[16].selector = @selector(writeMessageWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message:);
  methods[17].selector = @selector(writeHandshakeFragmentWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message:withInt:withInt:);
  methods[18].selector = @selector(checkAllWithJavaUtilHashtable:);
  methods[19].selector = @selector(resetAllWithJavaUtilHashtable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_RECEIVE_AHEAD", "I", .constantValue.asInt = OrgSpongycastleCryptoTlsDTLSReliableHandshake_MAX_RECEIVE_AHEAD, 0x1a, -1, -1, -1, -1 },
    { "MESSAGE_HEADER_LENGTH", "I", .constantValue.asInt = OrgSpongycastleCryptoTlsDTLSReliableHandshake_MESSAGE_HEADER_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "recordLayer_", "LOrgSpongycastleCryptoTlsDTLSRecordLayer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "handshakeHash_", "LOrgSpongycastleCryptoTlsTlsHandshakeHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentInboundFlight_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "previousInboundFlight_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "outboundFlight_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sending_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "message_seq_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "next_receive_seq_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsTlsContext;LOrgSpongycastleCryptoTlsDTLSRecordLayer;", "sendMessage", "S[B", "LJavaIoIOException;", "receiveMessageBody", "S", "backOff", "I", "prepareInboundFlight", "LJavaUtilHashtable;", "processRecord", "II[BII", "updateHandshakeMessagesDigest", "LOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message;", "writeMessage", "writeHandshakeFragment", "LOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message;II", "checkAll", "resetAll", "LOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message;LOrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDTLSReliableHandshake = { "DTLSReliableHandshake", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x0, 20, 10, -1, 19, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDTLSReliableHandshake;
}

@end

void OrgSpongycastleCryptoTlsDTLSReliableHandshake_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsDTLSRecordLayer_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self, id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsDTLSRecordLayer *transport) {
  NSObject_init(self);
  self->currentInboundFlight_ = new_JavaUtilHashtable_init();
  self->previousInboundFlight_ = nil;
  self->outboundFlight_ = new_JavaUtilVector_init();
  self->sending_ = true;
  self->message_seq_ = 0;
  self->next_receive_seq_ = 0;
  self->recordLayer_ = transport;
  self->handshakeHash_ = new_OrgSpongycastleCryptoTlsDeferredHash_init();
  [self->handshakeHash_ init__WithOrgSpongycastleCryptoTlsTlsContext:context];
}

OrgSpongycastleCryptoTlsDTLSReliableHandshake *new_OrgSpongycastleCryptoTlsDTLSReliableHandshake_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsDTLSRecordLayer_(id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsDTLSRecordLayer *transport) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDTLSReliableHandshake, initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsDTLSRecordLayer_, context, transport)
}

OrgSpongycastleCryptoTlsDTLSReliableHandshake *create_OrgSpongycastleCryptoTlsDTLSReliableHandshake_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsDTLSRecordLayer_(id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsDTLSRecordLayer *transport) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDTLSReliableHandshake, initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsDTLSRecordLayer_, context, transport)
}

jint OrgSpongycastleCryptoTlsDTLSReliableHandshake_backOffWithInt_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self, jint timeoutMillis) {
  return JavaLangMath_minWithInt_withInt_(timeoutMillis * 2, 60000);
}

void OrgSpongycastleCryptoTlsDTLSReliableHandshake_checkInboundFlight(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self) {
  id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(self->currentInboundFlight_)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    JavaLangInteger *key = (JavaLangInteger *) cast_chk([e nextElement], [JavaLangInteger class]);
    if ([((JavaLangInteger *) nil_chk(key)) intValue] >= self->next_receive_seq_) {
    }
  }
}

OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *OrgSpongycastleCryptoTlsDTLSReliableHandshake_getPendingMessage(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self) {
  OrgSpongycastleCryptoTlsDTLSReassembler *next = (OrgSpongycastleCryptoTlsDTLSReassembler *) cast_chk([((JavaUtilHashtable *) nil_chk(self->currentInboundFlight_)) getWithId:OrgSpongycastleUtilIntegers_valueOfWithInt_(self->next_receive_seq_)], [OrgSpongycastleCryptoTlsDTLSReassembler class]);
  if (next != nil) {
    IOSByteArray *body = [next getBodyIfComplete];
    if (body != nil) {
      self->previousInboundFlight_ = nil;
      return OrgSpongycastleCryptoTlsDTLSReliableHandshake_updateHandshakeMessagesDigestWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_(self, new_OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_initWithInt_withShort_withByteArray_(self->next_receive_seq_++, [next getMsgType], body));
    }
  }
  return nil;
}

void OrgSpongycastleCryptoTlsDTLSReliableHandshake_prepareInboundFlightWithJavaUtilHashtable_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self, JavaUtilHashtable *nextFlight) {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_resetAllWithJavaUtilHashtable_(self->currentInboundFlight_);
  self->previousInboundFlight_ = self->currentInboundFlight_;
  self->currentInboundFlight_ = nextFlight;
}

jboolean OrgSpongycastleCryptoTlsDTLSReliableHandshake_processRecordWithInt_withInt_withByteArray_withInt_withInt_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self, jint windowSize, jint epoch, IOSByteArray *buf, jint off, jint len) {
  jboolean checkPreviousFlight = false;
  while (len >= OrgSpongycastleCryptoTlsDTLSReliableHandshake_MESSAGE_HEADER_LENGTH) {
    jint fragment_length = OrgSpongycastleCryptoTlsTlsUtils_readUint24WithByteArray_withInt_(buf, off + 9);
    jint message_length = fragment_length + OrgSpongycastleCryptoTlsDTLSReliableHandshake_MESSAGE_HEADER_LENGTH;
    if (len < message_length) {
      break;
    }
    jint length = OrgSpongycastleCryptoTlsTlsUtils_readUint24WithByteArray_withInt_(buf, off + 1);
    jint fragment_offset = OrgSpongycastleCryptoTlsTlsUtils_readUint24WithByteArray_withInt_(buf, off + 6);
    if (fragment_offset + fragment_length > length) {
      break;
    }
    jshort msg_type = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithByteArray_withInt_(buf, off + 0);
    jint expectedEpoch = msg_type == OrgSpongycastleCryptoTlsHandshakeType_finished ? 1 : 0;
    if (epoch != expectedEpoch) {
      break;
    }
    jint message_seq = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithByteArray_withInt_(buf, off + 4);
    if (message_seq >= (self->next_receive_seq_ + windowSize)) {
    }
    else if (message_seq >= self->next_receive_seq_) {
      OrgSpongycastleCryptoTlsDTLSReassembler *reassembler = (OrgSpongycastleCryptoTlsDTLSReassembler *) cast_chk([((JavaUtilHashtable *) nil_chk(self->currentInboundFlight_)) getWithId:OrgSpongycastleUtilIntegers_valueOfWithInt_(message_seq)], [OrgSpongycastleCryptoTlsDTLSReassembler class]);
      if (reassembler == nil) {
        reassembler = new_OrgSpongycastleCryptoTlsDTLSReassembler_initWithShort_withInt_(msg_type, length);
        (void) [((JavaUtilHashtable *) nil_chk(self->currentInboundFlight_)) putWithId:OrgSpongycastleUtilIntegers_valueOfWithInt_(message_seq) withId:reassembler];
      }
      [reassembler contributeFragmentWithShort:msg_type withInt:length withByteArray:buf withInt:off + OrgSpongycastleCryptoTlsDTLSReliableHandshake_MESSAGE_HEADER_LENGTH withInt:fragment_offset withInt:fragment_length];
    }
    else if (self->previousInboundFlight_ != nil) {
      OrgSpongycastleCryptoTlsDTLSReassembler *reassembler = (OrgSpongycastleCryptoTlsDTLSReassembler *) cast_chk([self->previousInboundFlight_ getWithId:OrgSpongycastleUtilIntegers_valueOfWithInt_(message_seq)], [OrgSpongycastleCryptoTlsDTLSReassembler class]);
      if (reassembler != nil) {
        [reassembler contributeFragmentWithShort:msg_type withInt:length withByteArray:buf withInt:off + OrgSpongycastleCryptoTlsDTLSReliableHandshake_MESSAGE_HEADER_LENGTH withInt:fragment_offset withInt:fragment_length];
        checkPreviousFlight = true;
      }
    }
    off += message_length;
    len -= message_length;
  }
  jboolean result = checkPreviousFlight && OrgSpongycastleCryptoTlsDTLSReliableHandshake_checkAllWithJavaUtilHashtable_(self->previousInboundFlight_);
  if (result) {
    OrgSpongycastleCryptoTlsDTLSReliableHandshake_resendOutboundFlight(self);
    OrgSpongycastleCryptoTlsDTLSReliableHandshake_resetAllWithJavaUtilHashtable_(self->previousInboundFlight_);
  }
  return result;
}

void OrgSpongycastleCryptoTlsDTLSReliableHandshake_resendOutboundFlight(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self) {
  [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(self->recordLayer_)) resetWriteEpoch];
  for (jint i = 0; i < [((JavaUtilVector *) nil_chk(self->outboundFlight_)) size]; ++i) {
    OrgSpongycastleCryptoTlsDTLSReliableHandshake_writeMessageWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_(self, (OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) cast_chk([((JavaUtilVector *) nil_chk(self->outboundFlight_)) elementAtWithInt:i], [OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message class]));
  }
}

OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *OrgSpongycastleCryptoTlsDTLSReliableHandshake_updateHandshakeMessagesDigestWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self, OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *message) {
  if ([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(message)) getType] != OrgSpongycastleCryptoTlsHandshakeType_hello_request) {
    IOSByteArray *body = [message getBody];
    IOSByteArray *buf = [IOSByteArray newArrayWithLength:OrgSpongycastleCryptoTlsDTLSReliableHandshake_MESSAGE_HEADER_LENGTH];
    OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withByteArray_withInt_([message getType], buf, 0);
    OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withByteArray_withInt_(((IOSByteArray *) nil_chk(body))->size_, buf, 1);
    OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withByteArray_withInt_([message getSeq], buf, 4);
    OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withByteArray_withInt_(0, buf, 6);
    OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withByteArray_withInt_(body->size_, buf, 9);
    [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk(self->handshakeHash_)) updateWithByteArray:buf withInt:0 withInt:buf->size_];
    [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk(self->handshakeHash_)) updateWithByteArray:body withInt:0 withInt:body->size_];
  }
  return message;
}

void OrgSpongycastleCryptoTlsDTLSReliableHandshake_writeMessageWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self, OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *message) {
  jint sendLimit = [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(self->recordLayer_)) getSendLimit];
  jint fragmentLimit = sendLimit - OrgSpongycastleCryptoTlsDTLSReliableHandshake_MESSAGE_HEADER_LENGTH;
  if (fragmentLimit < 1) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  jint length = ((IOSByteArray *) nil_chk([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(message)) getBody]))->size_;
  jint fragment_offset = 0;
  do {
    jint fragment_length = JavaLangMath_minWithInt_withInt_(length - fragment_offset, fragmentLimit);
    OrgSpongycastleCryptoTlsDTLSReliableHandshake_writeHandshakeFragmentWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_withInt_withInt_(self, message, fragment_offset, fragment_length);
    fragment_offset += fragment_length;
  }
  while (fragment_offset < length);
}

void OrgSpongycastleCryptoTlsDTLSReliableHandshake_writeHandshakeFragmentWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_withInt_withInt_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *self, OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *message, jint fragment_offset, jint fragment_length) {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer *fragment = new_OrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer_initWithInt_(OrgSpongycastleCryptoTlsDTLSReliableHandshake_MESSAGE_HEADER_LENGTH + fragment_length);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_([((OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *) nil_chk(message)) getType], fragment);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withJavaIoOutputStream_(((IOSByteArray *) nil_chk([message getBody]))->size_, fragment);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_([message getSeq], fragment);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withJavaIoOutputStream_(fragment_offset, fragment);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withJavaIoOutputStream_(fragment_length, fragment);
  [fragment writeWithByteArray:[message getBody] withInt:fragment_offset withInt:fragment_length];
  [fragment sendToRecordLayerWithOrgSpongycastleCryptoTlsDTLSRecordLayer:self->recordLayer_];
}

jboolean OrgSpongycastleCryptoTlsDTLSReliableHandshake_checkAllWithJavaUtilHashtable_(JavaUtilHashtable *inboundFlight) {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_initialize();
  id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(inboundFlight)) elements];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    if ([((OrgSpongycastleCryptoTlsDTLSReassembler *) nil_chk(((OrgSpongycastleCryptoTlsDTLSReassembler *) cast_chk([e nextElement], [OrgSpongycastleCryptoTlsDTLSReassembler class])))) getBodyIfComplete] == nil) {
      return false;
    }
  }
  return true;
}

void OrgSpongycastleCryptoTlsDTLSReliableHandshake_resetAllWithJavaUtilHashtable_(JavaUtilHashtable *inboundFlight) {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_initialize();
  id<JavaUtilEnumeration> e = [((JavaUtilHashtable *) nil_chk(inboundFlight)) elements];
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    [((OrgSpongycastleCryptoTlsDTLSReassembler *) nil_chk(((OrgSpongycastleCryptoTlsDTLSReassembler *) cast_chk([e nextElement], [OrgSpongycastleCryptoTlsDTLSReassembler class])))) reset];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDTLSReliableHandshake)

@implementation OrgSpongycastleCryptoTlsDTLSReliableHandshake_1

- (instancetype)initWithOrgSpongycastleCryptoTlsDTLSReliableHandshake:(OrgSpongycastleCryptoTlsDTLSReliableHandshake *)outer$ {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_1_initWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_(self, outer$);
  return self;
}

- (void)receivedHandshakeRecordWithInt:(jint)epoch
                         withByteArray:(IOSByteArray *)buf
                               withInt:(jint)off
                               withInt:(jint)len {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_processRecordWithInt_withInt_withByteArray_withInt_withInt_(this$0_, 0, epoch, buf, off, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoTlsDTLSReliableHandshake:);
  methods[1].selector = @selector(receivedHandshakeRecordWithInt:withByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgSpongycastleCryptoTlsDTLSReliableHandshake;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "receivedHandshakeRecord", "I[BII", "LJavaIoIOException;", "LOrgSpongycastleCryptoTlsDTLSReliableHandshake;", "finish" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDTLSReliableHandshake_1 = { "", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x8010, 2, 1, 3, -1, 4, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDTLSReliableHandshake_1;
}

@end

void OrgSpongycastleCryptoTlsDTLSReliableHandshake_1_initWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_(OrgSpongycastleCryptoTlsDTLSReliableHandshake_1 *self, OrgSpongycastleCryptoTlsDTLSReliableHandshake *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

OrgSpongycastleCryptoTlsDTLSReliableHandshake_1 *new_OrgSpongycastleCryptoTlsDTLSReliableHandshake_1_initWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *outer$) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDTLSReliableHandshake_1, initWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_, outer$)
}

OrgSpongycastleCryptoTlsDTLSReliableHandshake_1 *create_OrgSpongycastleCryptoTlsDTLSReliableHandshake_1_initWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_(OrgSpongycastleCryptoTlsDTLSReliableHandshake *outer$) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDTLSReliableHandshake_1, initWithOrgSpongycastleCryptoTlsDTLSReliableHandshake_, outer$)
}

@implementation OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message

- (instancetype)initWithInt:(jint)message_seq
                  withShort:(jshort)msg_type
              withByteArray:(IOSByteArray *)body {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_initWithInt_withShort_withByteArray_(self, message_seq, msg_type, body);
  return self;
}

- (jint)getSeq {
  return message_seq_;
}

- (jshort)getType {
  return msg_type_;
}

- (IOSByteArray *)getBody {
  return body_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withShort:withByteArray:);
  methods[1].selector = @selector(getSeq);
  methods[2].selector = @selector(getType);
  methods[3].selector = @selector(getBody);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "message_seq_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "msg_type_", "S", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "body_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IS[B", "LOrgSpongycastleCryptoTlsDTLSReliableHandshake;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message = { "Message", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x8, 4, 3, 1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message;
}

@end

void OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_initWithInt_withShort_withByteArray_(OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *self, jint message_seq, jshort msg_type, IOSByteArray *body) {
  NSObject_init(self);
  self->message_seq_ = message_seq;
  self->msg_type_ = msg_type;
  self->body_ = body;
}

OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *new_OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_initWithInt_withShort_withByteArray_(jint message_seq, jshort msg_type, IOSByteArray *body) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message, initWithInt_withShort_withByteArray_, message_seq, msg_type, body)
}

OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message *create_OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message_initWithInt_withShort_withByteArray_(jint message_seq, jshort msg_type, IOSByteArray *body) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message, initWithInt_withShort_withByteArray_, message_seq, msg_type, body)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDTLSReliableHandshake_Message)

@implementation OrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer

- (instancetype)initWithInt:(jint)size {
  OrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer_initWithInt_(self, size);
  return self;
}

- (void)sendToRecordLayerWithOrgSpongycastleCryptoTlsDTLSRecordLayer:(OrgSpongycastleCryptoTlsDTLSRecordLayer *)recordLayer {
  [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(recordLayer)) sendWithByteArray:buf_ withInt:0 withInt:count_];
  buf_ = nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(sendToRecordLayerWithOrgSpongycastleCryptoTlsDTLSRecordLayer:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "sendToRecordLayer", "LOrgSpongycastleCryptoTlsDTLSRecordLayer;", "LJavaIoIOException;", "LOrgSpongycastleCryptoTlsDTLSReliableHandshake;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer = { "RecordLayerBuffer", "org.spongycastle.crypto.tls", ptrTable, methods, NULL, 7, 0x8, 2, 0, 4, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer;
}

@end

void OrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer_initWithInt_(OrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer *self, jint size) {
  JavaIoByteArrayOutputStream_initWithInt_(self, size);
}

OrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer *new_OrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer, initWithInt_, size)
}

OrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer *create_OrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer, initWithInt_, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDTLSReliableHandshake_RecordLayerBuffer)
