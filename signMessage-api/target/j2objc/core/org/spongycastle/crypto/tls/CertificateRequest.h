//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/CertificateRequest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsCertificateRequest")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsCertificateRequest
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsCertificateRequest 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsCertificateRequest 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsCertificateRequest

#if !defined (OrgSpongycastleCryptoTlsCertificateRequest_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsCertificateRequest || defined(INCLUDE_OrgSpongycastleCryptoTlsCertificateRequest))
#define OrgSpongycastleCryptoTlsCertificateRequest_

@class IOSShortArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaUtilVector;
@protocol OrgSpongycastleCryptoTlsTlsContext;

@interface OrgSpongycastleCryptoTlsCertificateRequest : NSObject {
 @public
  IOSShortArray *certificateTypes_;
  JavaUtilVector *supportedSignatureAlgorithms_;
  JavaUtilVector *certificateAuthorities_;
}

#pragma mark Public

- (instancetype)initWithShortArray:(IOSShortArray *)certificateTypes
                withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
                withJavaUtilVector:(JavaUtilVector *)certificateAuthorities;

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (JavaUtilVector *)getCertificateAuthorities;

- (IOSShortArray *)getCertificateTypes;

- (JavaUtilVector *)getSupportedSignatureAlgorithms;

+ (OrgSpongycastleCryptoTlsCertificateRequest *)parseWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                      withJavaIoInputStream:(JavaIoInputStream *)input;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsCertificateRequest)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsCertificateRequest, certificateTypes_, IOSShortArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsCertificateRequest, supportedSignatureAlgorithms_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsCertificateRequest, certificateAuthorities_, JavaUtilVector *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsCertificateRequest_initWithShortArray_withJavaUtilVector_withJavaUtilVector_(OrgSpongycastleCryptoTlsCertificateRequest *self, IOSShortArray *certificateTypes, JavaUtilVector *supportedSignatureAlgorithms, JavaUtilVector *certificateAuthorities);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsCertificateRequest *new_OrgSpongycastleCryptoTlsCertificateRequest_initWithShortArray_withJavaUtilVector_withJavaUtilVector_(IOSShortArray *certificateTypes, JavaUtilVector *supportedSignatureAlgorithms, JavaUtilVector *certificateAuthorities) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsCertificateRequest *create_OrgSpongycastleCryptoTlsCertificateRequest_initWithShortArray_withJavaUtilVector_withJavaUtilVector_(IOSShortArray *certificateTypes, JavaUtilVector *supportedSignatureAlgorithms, JavaUtilVector *certificateAuthorities);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsCertificateRequest *OrgSpongycastleCryptoTlsCertificateRequest_parseWithOrgSpongycastleCryptoTlsTlsContext_withJavaIoInputStream_(id<OrgSpongycastleCryptoTlsTlsContext> context, JavaIoInputStream *input);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsCertificateRequest)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsCertificateRequest")
