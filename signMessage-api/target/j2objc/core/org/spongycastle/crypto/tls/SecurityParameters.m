//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/SecurityParameters.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/tls/CompressionMethod.h"
#include "org/spongycastle/crypto/tls/SecurityParameters.h"
#include "org/spongycastle/util/Arrays.h"

@implementation OrgSpongycastleCryptoTlsSecurityParameters

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsSecurityParameters_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)clear {
  if (self->masterSecret_ != nil) {
    OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(self->masterSecret_, (jbyte) 0);
    self->masterSecret_ = nil;
  }
}

- (jint)getEntity {
  return entity_;
}

- (jint)getCipherSuite {
  return cipherSuite_;
}

- (jshort)getCompressionAlgorithm {
  return compressionAlgorithm_;
}

- (jint)getPrfAlgorithm {
  return prfAlgorithm_;
}

- (jint)getVerifyDataLength {
  return verifyDataLength_;
}

- (IOSByteArray *)getMasterSecret {
  return masterSecret_;
}

- (IOSByteArray *)getClientRandom {
  return clientRandom_;
}

- (IOSByteArray *)getServerRandom {
  return serverRandom_;
}

- (IOSByteArray *)getSessionHash {
  return sessionHash_;
}

- (IOSByteArray *)getPskIdentity {
  return pskIdentity_;
}

- (IOSByteArray *)getPSKIdentity {
  return pskIdentity_;
}

- (IOSByteArray *)getSRPIdentity {
  return srpIdentity_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(getEntity);
  methods[3].selector = @selector(getCipherSuite);
  methods[4].selector = @selector(getCompressionAlgorithm);
  methods[5].selector = @selector(getPrfAlgorithm);
  methods[6].selector = @selector(getVerifyDataLength);
  methods[7].selector = @selector(getMasterSecret);
  methods[8].selector = @selector(getClientRandom);
  methods[9].selector = @selector(getServerRandom);
  methods[10].selector = @selector(getSessionHash);
  methods[11].selector = @selector(getPskIdentity);
  methods[12].selector = @selector(getPSKIdentity);
  methods[13].selector = @selector(getSRPIdentity);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "entity_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cipherSuite_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "compressionAlgorithm_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "prfAlgorithm_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "verifyDataLength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "masterSecret_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "clientRandom_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "serverRandom_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sessionHash_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pskIdentity_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "srpIdentity_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxFragmentLength_", "S", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "truncatedHMac_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "encryptThenMAC_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "extendedMasterSecret_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsSecurityParameters = { "SecurityParameters", "org.spongycastle.crypto.tls", NULL, methods, fields, 7, 0x1, 14, 15, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsSecurityParameters;
}

@end

void OrgSpongycastleCryptoTlsSecurityParameters_init(OrgSpongycastleCryptoTlsSecurityParameters *self) {
  NSObject_init(self);
  self->entity_ = -1;
  self->cipherSuite_ = -1;
  self->compressionAlgorithm_ = OrgSpongycastleCryptoTlsCompressionMethod__null;
  self->prfAlgorithm_ = -1;
  self->verifyDataLength_ = -1;
  self->masterSecret_ = nil;
  self->clientRandom_ = nil;
  self->serverRandom_ = nil;
  self->sessionHash_ = nil;
  self->pskIdentity_ = nil;
  self->srpIdentity_ = nil;
  self->maxFragmentLength_ = -1;
  self->truncatedHMac_ = false;
  self->encryptThenMAC_ = false;
  self->extendedMasterSecret_ = false;
}

OrgSpongycastleCryptoTlsSecurityParameters *new_OrgSpongycastleCryptoTlsSecurityParameters_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsSecurityParameters, init)
}

OrgSpongycastleCryptoTlsSecurityParameters *create_OrgSpongycastleCryptoTlsSecurityParameters_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsSecurityParameters, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsSecurityParameters)
