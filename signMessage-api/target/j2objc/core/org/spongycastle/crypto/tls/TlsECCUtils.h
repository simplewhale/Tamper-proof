//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsECCUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsECCUtils")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsTlsECCUtils
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsECCUtils 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsECCUtils 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsTlsECCUtils

#if !defined (OrgSpongycastleCryptoTlsTlsECCUtils_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsECCUtils || defined(INCLUDE_OrgSpongycastleCryptoTlsTlsECCUtils))
#define OrgSpongycastleCryptoTlsTlsECCUtils_

@class IOSByteArray;
@class IOSIntArray;
@class IOSShortArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaLangInteger;
@class JavaMathBigInteger;
@class JavaSecuritySecureRandom;
@class JavaUtilHashtable;
@class OrgSpongycastleCryptoAsymmetricCipherKeyPair;
@class OrgSpongycastleCryptoParamsECDomainParameters;
@class OrgSpongycastleCryptoParamsECPrivateKeyParameters;
@class OrgSpongycastleCryptoParamsECPublicKeyParameters;
@class OrgSpongycastleMathEcECCurve;
@class OrgSpongycastleMathEcECFieldElement;
@class OrgSpongycastleMathEcECPoint;

@interface OrgSpongycastleCryptoTlsTlsECCUtils : NSObject

#pragma mark Public

- (instancetype)init;

+ (void)addSupportedEllipticCurvesExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                                    withIntArray:(IOSIntArray *)namedCurves;

+ (void)addSupportedPointFormatsExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                                withShortArray:(IOSShortArray *)ecPointFormats;

+ (jboolean)areOnSameCurveWithOrgSpongycastleCryptoParamsECDomainParameters:(OrgSpongycastleCryptoParamsECDomainParameters *)a
                          withOrgSpongycastleCryptoParamsECDomainParameters:(OrgSpongycastleCryptoParamsECDomainParameters *)b;

+ (IOSByteArray *)calculateECDHBasicAgreementWithOrgSpongycastleCryptoParamsECPublicKeyParameters:(OrgSpongycastleCryptoParamsECPublicKeyParameters *)publicKey
                                            withOrgSpongycastleCryptoParamsECPrivateKeyParameters:(OrgSpongycastleCryptoParamsECPrivateKeyParameters *)privateKey;

+ (jboolean)containsECCCipherSuitesWithIntArray:(IOSIntArray *)cipherSuites;

+ (IOSByteArray *)createSupportedEllipticCurvesExtensionWithIntArray:(IOSIntArray *)namedCurves;

+ (IOSByteArray *)createSupportedPointFormatsExtensionWithShortArray:(IOSShortArray *)ecPointFormats;

+ (JavaMathBigInteger *)deserializeECFieldElementWithInt:(jint)fieldSize
                                           withByteArray:(IOSByteArray *)encoding;

+ (OrgSpongycastleMathEcECPoint *)deserializeECPointWithShortArray:(IOSShortArray *)ecPointFormats
                                  withOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)curve
                                                     withByteArray:(IOSByteArray *)encoding;

+ (OrgSpongycastleCryptoParamsECPublicKeyParameters *)deserializeECPublicKeyWithShortArray:(IOSShortArray *)ecPointFormats
                                         withOrgSpongycastleCryptoParamsECDomainParameters:(OrgSpongycastleCryptoParamsECDomainParameters *)curve_params
                                                                             withByteArray:(IOSByteArray *)encoding;

+ (OrgSpongycastleCryptoAsymmetricCipherKeyPair *)generateECKeyPairWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                              withOrgSpongycastleCryptoParamsECDomainParameters:(OrgSpongycastleCryptoParamsECDomainParameters *)ecParams;

+ (OrgSpongycastleCryptoParamsECPrivateKeyParameters *)generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                                                                       withShortArray:(IOSShortArray *)ecPointFormats
                                                                    withOrgSpongycastleCryptoParamsECDomainParameters:(OrgSpongycastleCryptoParamsECDomainParameters *)ecParams
                                                                                               withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (NSString *)getNameOfNamedCurveWithInt:(jint)namedCurve;

+ (OrgSpongycastleCryptoParamsECDomainParameters *)getParametersForNamedCurveWithInt:(jint)namedCurve;

+ (IOSIntArray *)getSupportedEllipticCurvesExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (IOSShortArray *)getSupportedPointFormatsExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jboolean)hasAnySupportedNamedCurves;

+ (jboolean)isCompressionPreferredWithShortArray:(IOSShortArray *)ecPointFormats
                                       withShort:(jshort)compressionFormat;

+ (jboolean)isECCCipherSuiteWithInt:(jint)cipherSuite;

+ (jboolean)isSupportedNamedCurveWithInt:(jint)namedCurve;

+ (jint)readECExponentWithInt:(jint)fieldSize
        withJavaIoInputStream:(JavaIoInputStream *)input;

+ (JavaMathBigInteger *)readECFieldElementWithInt:(jint)fieldSize
                            withJavaIoInputStream:(JavaIoInputStream *)input;

+ (JavaMathBigInteger *)readECParameterWithJavaIoInputStream:(JavaIoInputStream *)input;

+ (OrgSpongycastleCryptoParamsECDomainParameters *)readECParametersWithIntArray:(IOSIntArray *)namedCurves
                                                                 withShortArray:(IOSShortArray *)ecPointFormats
                                                          withJavaIoInputStream:(JavaIoInputStream *)input;

+ (IOSIntArray *)readSupportedEllipticCurvesExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (IOSShortArray *)readSupportedPointFormatsExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (IOSByteArray *)serializeECFieldElementWithInt:(jint)fieldSize
                          withJavaMathBigInteger:(JavaMathBigInteger *)x;

+ (IOSByteArray *)serializeECPointWithShortArray:(IOSShortArray *)ecPointFormats
                withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)point;

+ (IOSByteArray *)serializeECPublicKeyWithShortArray:(IOSShortArray *)ecPointFormats
withOrgSpongycastleCryptoParamsECPublicKeyParameters:(OrgSpongycastleCryptoParamsECPublicKeyParameters *)keyParameters;

+ (OrgSpongycastleCryptoParamsECPublicKeyParameters *)validateECPublicKeyWithOrgSpongycastleCryptoParamsECPublicKeyParameters:(OrgSpongycastleCryptoParamsECPublicKeyParameters *)key;

+ (void)writeECExponentWithInt:(jint)k
        withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeECFieldElementWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)x
                                            withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeECFieldElementWithInt:(jint)fieldSize
            withJavaMathBigInteger:(JavaMathBigInteger *)x
            withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeECParameterWithJavaMathBigInteger:(JavaMathBigInteger *)x
                        withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeECPointWithShortArray:(IOSShortArray *)ecPointFormats
  withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)point
            withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeExplicitECParametersWithShortArray:(IOSShortArray *)ecPointFormats
withOrgSpongycastleCryptoParamsECDomainParameters:(OrgSpongycastleCryptoParamsECDomainParameters *)ecParameters
                         withJavaIoOutputStream:(JavaIoOutputStream *)output;

+ (void)writeNamedECParametersWithInt:(jint)namedCurve
               withJavaIoOutputStream:(JavaIoOutputStream *)output;

#pragma mark Package-Private

+ (OrgSpongycastleCryptoParamsECPrivateKeyParameters *)generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                                                                                         withIntArray:(IOSIntArray *)namedCurves
                                                                                                       withShortArray:(IOSShortArray *)ecPointFormats
                                                                                               withJavaIoOutputStream:(JavaIoOutputStream *)output;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleCryptoTlsTlsECCUtils)

inline JavaLangInteger *OrgSpongycastleCryptoTlsTlsECCUtils_get_EXT_elliptic_curves(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *OrgSpongycastleCryptoTlsTlsECCUtils_EXT_elliptic_curves;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsECCUtils, EXT_elliptic_curves, JavaLangInteger *)

inline JavaLangInteger *OrgSpongycastleCryptoTlsTlsECCUtils_get_EXT_ec_point_formats(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *OrgSpongycastleCryptoTlsTlsECCUtils_EXT_ec_point_formats;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsECCUtils, EXT_ec_point_formats, JavaLangInteger *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsECCUtils_init(OrgSpongycastleCryptoTlsTlsECCUtils *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsECCUtils *new_OrgSpongycastleCryptoTlsTlsECCUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsECCUtils *create_OrgSpongycastleCryptoTlsTlsECCUtils_init(void);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsECCUtils_addSupportedEllipticCurvesExtensionWithJavaUtilHashtable_withIntArray_(JavaUtilHashtable *extensions, IOSIntArray *namedCurves);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsECCUtils_addSupportedPointFormatsExtensionWithJavaUtilHashtable_withShortArray_(JavaUtilHashtable *extensions, IOSShortArray *ecPointFormats);

FOUNDATION_EXPORT IOSIntArray *OrgSpongycastleCryptoTlsTlsECCUtils_getSupportedEllipticCurvesExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT IOSShortArray *OrgSpongycastleCryptoTlsTlsECCUtils_getSupportedPointFormatsExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsECCUtils_createSupportedEllipticCurvesExtensionWithIntArray_(IOSIntArray *namedCurves);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsECCUtils_createSupportedPointFormatsExtensionWithShortArray_(IOSShortArray *ecPointFormats);

FOUNDATION_EXPORT IOSIntArray *OrgSpongycastleCryptoTlsTlsECCUtils_readSupportedEllipticCurvesExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT IOSShortArray *OrgSpongycastleCryptoTlsTlsECCUtils_readSupportedPointFormatsExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT NSString *OrgSpongycastleCryptoTlsTlsECCUtils_getNameOfNamedCurveWithInt_(jint namedCurve);

FOUNDATION_EXPORT OrgSpongycastleCryptoParamsECDomainParameters *OrgSpongycastleCryptoTlsTlsECCUtils_getParametersForNamedCurveWithInt_(jint namedCurve);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsECCUtils_hasAnySupportedNamedCurves(void);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsECCUtils_containsECCCipherSuitesWithIntArray_(IOSIntArray *cipherSuites);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsECCUtils_isECCCipherSuiteWithInt_(jint cipherSuite);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsECCUtils_areOnSameCurveWithOrgSpongycastleCryptoParamsECDomainParameters_withOrgSpongycastleCryptoParamsECDomainParameters_(OrgSpongycastleCryptoParamsECDomainParameters *a, OrgSpongycastleCryptoParamsECDomainParameters *b);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsECCUtils_isSupportedNamedCurveWithInt_(jint namedCurve);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsECCUtils_isCompressionPreferredWithShortArray_withShort_(IOSShortArray *ecPointFormats, jshort compressionFormat);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsECCUtils_serializeECFieldElementWithInt_withJavaMathBigInteger_(jint fieldSize, JavaMathBigInteger *x);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsECCUtils_serializeECPointWithShortArray_withOrgSpongycastleMathEcECPoint_(IOSShortArray *ecPointFormats, OrgSpongycastleMathEcECPoint *point);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsECCUtils_serializeECPublicKeyWithShortArray_withOrgSpongycastleCryptoParamsECPublicKeyParameters_(IOSShortArray *ecPointFormats, OrgSpongycastleCryptoParamsECPublicKeyParameters *keyParameters);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECFieldElementWithInt_withByteArray_(jint fieldSize, IOSByteArray *encoding);

FOUNDATION_EXPORT OrgSpongycastleMathEcECPoint *OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECPointWithShortArray_withOrgSpongycastleMathEcECCurve_withByteArray_(IOSShortArray *ecPointFormats, OrgSpongycastleMathEcECCurve *curve, IOSByteArray *encoding);

FOUNDATION_EXPORT OrgSpongycastleCryptoParamsECPublicKeyParameters *OrgSpongycastleCryptoTlsTlsECCUtils_deserializeECPublicKeyWithShortArray_withOrgSpongycastleCryptoParamsECDomainParameters_withByteArray_(IOSShortArray *ecPointFormats, OrgSpongycastleCryptoParamsECDomainParameters *curve_params, IOSByteArray *encoding);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsECCUtils_calculateECDHBasicAgreementWithOrgSpongycastleCryptoParamsECPublicKeyParameters_withOrgSpongycastleCryptoParamsECPrivateKeyParameters_(OrgSpongycastleCryptoParamsECPublicKeyParameters *publicKey, OrgSpongycastleCryptoParamsECPrivateKeyParameters *privateKey);

FOUNDATION_EXPORT OrgSpongycastleCryptoAsymmetricCipherKeyPair *OrgSpongycastleCryptoTlsTlsECCUtils_generateECKeyPairWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoParamsECDomainParameters_(JavaSecuritySecureRandom *random, OrgSpongycastleCryptoParamsECDomainParameters *ecParams);

FOUNDATION_EXPORT OrgSpongycastleCryptoParamsECPrivateKeyParameters *OrgSpongycastleCryptoTlsTlsECCUtils_generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom_withShortArray_withOrgSpongycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(JavaSecuritySecureRandom *random, IOSShortArray *ecPointFormats, OrgSpongycastleCryptoParamsECDomainParameters *ecParams, JavaIoOutputStream *output);

FOUNDATION_EXPORT OrgSpongycastleCryptoParamsECPrivateKeyParameters *OrgSpongycastleCryptoTlsTlsECCUtils_generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom_withIntArray_withShortArray_withJavaIoOutputStream_(JavaSecuritySecureRandom *random, IOSIntArray *namedCurves, IOSShortArray *ecPointFormats, JavaIoOutputStream *output);

FOUNDATION_EXPORT OrgSpongycastleCryptoParamsECPublicKeyParameters *OrgSpongycastleCryptoTlsTlsECCUtils_validateECPublicKeyWithOrgSpongycastleCryptoParamsECPublicKeyParameters_(OrgSpongycastleCryptoParamsECPublicKeyParameters *key);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoTlsTlsECCUtils_readECExponentWithInt_withJavaIoInputStream_(jint fieldSize, JavaIoInputStream *input);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleCryptoTlsTlsECCUtils_readECFieldElementWithInt_withJavaIoInputStream_(jint fieldSize, JavaIoInputStream *input);

FOUNDATION_EXPORT JavaMathBigInteger *OrgSpongycastleCryptoTlsTlsECCUtils_readECParameterWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT OrgSpongycastleCryptoParamsECDomainParameters *OrgSpongycastleCryptoTlsTlsECCUtils_readECParametersWithIntArray_withShortArray_withJavaIoInputStream_(IOSIntArray *namedCurves, IOSShortArray *ecPointFormats, JavaIoInputStream *input);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsECCUtils_writeECExponentWithInt_withJavaIoOutputStream_(jint k, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsECCUtils_writeECFieldElementWithOrgSpongycastleMathEcECFieldElement_withJavaIoOutputStream_(OrgSpongycastleMathEcECFieldElement *x, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsECCUtils_writeECFieldElementWithInt_withJavaMathBigInteger_withJavaIoOutputStream_(jint fieldSize, JavaMathBigInteger *x, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsECCUtils_writeECParameterWithJavaMathBigInteger_withJavaIoOutputStream_(JavaMathBigInteger *x, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsECCUtils_writeExplicitECParametersWithShortArray_withOrgSpongycastleCryptoParamsECDomainParameters_withJavaIoOutputStream_(IOSShortArray *ecPointFormats, OrgSpongycastleCryptoParamsECDomainParameters *ecParameters, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsECCUtils_writeECPointWithShortArray_withOrgSpongycastleMathEcECPoint_withJavaIoOutputStream_(IOSShortArray *ecPointFormats, OrgSpongycastleMathEcECPoint *point, JavaIoOutputStream *output);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsECCUtils_writeNamedECParametersWithInt_withJavaIoOutputStream_(jint namedCurve, JavaIoOutputStream *output);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsTlsECCUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsECCUtils")
