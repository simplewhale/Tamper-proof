//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsBlockCipher.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"
#include "org/spongycastle/crypto/prng/RandomGenerator.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/ProtocolVersion.h"
#include "org/spongycastle/crypto/tls/SecurityParameters.h"
#include "org/spongycastle/crypto/tls/TlsBlockCipher.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsMac.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/util/Arrays.h"

@implementation OrgSpongycastleCryptoTlsTlsBlockCipher

- (OrgSpongycastleCryptoTlsTlsMac *)getWriteMac {
  return writeMac_;
}

- (OrgSpongycastleCryptoTlsTlsMac *)getReadMac {
  return readMac_;
}

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                      withOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)clientWriteCipher
                      withOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)serverWriteCipher
                           withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)clientWriteDigest
                           withOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)serverWriteDigest
                                                   withInt:(jint)cipherKeySize {
  OrgSpongycastleCryptoTlsTlsBlockCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withInt_(self, context, clientWriteCipher, serverWriteCipher, clientWriteDigest, serverWriteDigest, cipherKeySize);
  return self;
}

- (jint)getPlaintextLimitWithInt:(jint)ciphertextLimit {
  jint blockSize = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(encryptCipher_)) getBlockSize];
  jint macSize = [((OrgSpongycastleCryptoTlsTlsMac *) nil_chk(writeMac_)) getSize];
  jint plaintextLimit = ciphertextLimit;
  if (useExplicitIV_) {
    plaintextLimit -= blockSize;
  }
  if (encryptThenMAC_) {
    plaintextLimit -= macSize;
    plaintextLimit -= plaintextLimit % blockSize;
  }
  else {
    plaintextLimit -= plaintextLimit % blockSize;
    plaintextLimit -= macSize;
  }
  --plaintextLimit;
  return plaintextLimit;
}

- (IOSByteArray *)encodePlaintextWithLong:(jlong)seqNo
                                withShort:(jshort)type
                            withByteArray:(IOSByteArray *)plaintext
                                  withInt:(jint)offset
                                  withInt:(jint)len {
  jint blockSize = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(encryptCipher_)) getBlockSize];
  jint macSize = [((OrgSpongycastleCryptoTlsTlsMac *) nil_chk(writeMac_)) getSize];
  OrgSpongycastleCryptoTlsProtocolVersion *version_ = [((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getServerVersion];
  jint enc_input_length = len;
  if (!encryptThenMAC_) {
    enc_input_length += macSize;
  }
  jint padding_length = blockSize - 1 - (enc_input_length % blockSize);
  if (encryptThenMAC_ || !((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecurityParameters]))->truncatedHMac_) {
    if (![((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(version_)) isDTLS] && ![version_ isSSL]) {
      jint maxExtraPadBlocks = (255 - padding_length) / blockSize;
      jint actualExtraPadBlocks = [self chooseExtraPadBlocksWithJavaSecuritySecureRandom:[((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecureRandom] withInt:maxExtraPadBlocks];
      padding_length += actualExtraPadBlocks * blockSize;
    }
  }
  jint totalSize = len + macSize + padding_length + 1;
  if (useExplicitIV_) {
    totalSize += blockSize;
  }
  IOSByteArray *outBuf = [IOSByteArray newArrayWithLength:totalSize];
  jint outOff = 0;
  if (useExplicitIV_) {
    IOSByteArray *explicitIV = [IOSByteArray newArrayWithLength:blockSize];
    [((id<OrgSpongycastleCryptoPrngRandomGenerator>) nil_chk([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getNonceRandomGenerator])) nextBytesWithByteArray:explicitIV];
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(encryptCipher_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsParametersWithIV_initWithOrgSpongycastleCryptoCipherParameters_withByteArray_(nil, explicitIV)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(explicitIV, 0, outBuf, outOff, blockSize);
    outOff += blockSize;
  }
  jint blocks_start = outOff;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(plaintext, offset, outBuf, outOff, len);
  outOff += len;
  if (!encryptThenMAC_) {
    IOSByteArray *mac = [((OrgSpongycastleCryptoTlsTlsMac *) nil_chk(writeMac_)) calculateMacWithLong:seqNo withShort:type withByteArray:plaintext withInt:offset withInt:len];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mac, 0, outBuf, outOff, ((IOSByteArray *) nil_chk(mac))->size_);
    outOff += mac->size_;
  }
  for (jint i = 0; i <= padding_length; i++) {
    *IOSByteArray_GetRef(outBuf, outOff++) = (jbyte) padding_length;
  }
  for (jint i = blocks_start; i < outOff; i += blockSize) {
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(encryptCipher_)) processBlockWithByteArray:outBuf withInt:i withByteArray:outBuf withInt:i];
  }
  if (encryptThenMAC_) {
    IOSByteArray *mac = [((OrgSpongycastleCryptoTlsTlsMac *) nil_chk(writeMac_)) calculateMacWithLong:seqNo withShort:type withByteArray:outBuf withInt:0 withInt:outOff];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mac, 0, outBuf, outOff, ((IOSByteArray *) nil_chk(mac))->size_);
    outOff += mac->size_;
  }
  return outBuf;
}

- (IOSByteArray *)decodeCiphertextWithLong:(jlong)seqNo
                                 withShort:(jshort)type
                             withByteArray:(IOSByteArray *)ciphertext
                                   withInt:(jint)offset
                                   withInt:(jint)len {
  jint blockSize = [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(decryptCipher_)) getBlockSize];
  jint macSize = [((OrgSpongycastleCryptoTlsTlsMac *) nil_chk(readMac_)) getSize];
  jint minLen = blockSize;
  if (encryptThenMAC_) {
    minLen += macSize;
  }
  else {
    minLen = JavaLangMath_maxWithInt_withInt_(minLen, macSize + 1);
  }
  if (useExplicitIV_) {
    minLen += blockSize;
  }
  if (len < minLen) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  jint blocks_length = len;
  if (encryptThenMAC_) {
    blocks_length -= macSize;
  }
  if (blocks_length % blockSize != 0) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decryption_failed);
  }
  if (encryptThenMAC_) {
    jint end = offset + len;
    IOSByteArray *receivedMac = OrgSpongycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(ciphertext, end - macSize, end);
    IOSByteArray *calculatedMac = [((OrgSpongycastleCryptoTlsTlsMac *) nil_chk(readMac_)) calculateMacWithLong:seqNo withShort:type withByteArray:ciphertext withInt:offset withInt:len - macSize];
    jboolean badMac = !OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(calculatedMac, receivedMac);
    if (badMac) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_bad_record_mac);
    }
  }
  if (useExplicitIV_) {
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(decryptCipher_)) init__WithBoolean:false withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsParametersWithIV_initWithOrgSpongycastleCryptoCipherParameters_withByteArray_withInt_withInt_(nil, ciphertext, offset, blockSize)];
    offset += blockSize;
    blocks_length -= blockSize;
  }
  for (jint i = 0; i < blocks_length; i += blockSize) {
    [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(decryptCipher_)) processBlockWithByteArray:ciphertext withInt:offset + i withByteArray:ciphertext withInt:offset + i];
  }
  jint totalPad = [self checkPaddingConstantTimeWithByteArray:ciphertext withInt:offset withInt:blocks_length withInt:blockSize withInt:encryptThenMAC_ ? 0 : macSize];
  jboolean badMac = totalPad == 0;
  jint dec_output_length = blocks_length - totalPad;
  if (!encryptThenMAC_) {
    dec_output_length -= macSize;
    jint macInputLen = dec_output_length;
    jint macOff = offset + macInputLen;
    IOSByteArray *receivedMac = OrgSpongycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(ciphertext, macOff, macOff + macSize);
    IOSByteArray *calculatedMac = [((OrgSpongycastleCryptoTlsTlsMac *) nil_chk(readMac_)) calculateMacConstantTimeWithLong:seqNo withShort:type withByteArray:ciphertext withInt:offset withInt:macInputLen withInt:blocks_length - macSize withByteArray:randomData_];
    badMac |= !OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(calculatedMac, receivedMac);
  }
  if (badMac) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_bad_record_mac);
  }
  return OrgSpongycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(ciphertext, offset, offset + dec_output_length);
}

- (jint)checkPaddingConstantTimeWithByteArray:(IOSByteArray *)buf
                                      withInt:(jint)off
                                      withInt:(jint)len
                                      withInt:(jint)blockSize
                                      withInt:(jint)macSize {
  jint end = off + len;
  jbyte lastByte = IOSByteArray_Get(nil_chk(buf), end - 1);
  jint padlen = lastByte & (jint) 0xff;
  jint totalPad = padlen + 1;
  jint dummyIndex = 0;
  jbyte padDiff = 0;
  if ((OrgSpongycastleCryptoTlsTlsUtils_isSSLWithOrgSpongycastleCryptoTlsTlsContext_(context_) && totalPad > blockSize) || (macSize + totalPad > len)) {
    totalPad = 0;
  }
  else {
    jint padPos = end - totalPad;
    do {
      padDiff |= (IOSByteArray_Get(buf, padPos++) ^ lastByte);
    }
    while (padPos < end);
    dummyIndex = totalPad;
    if (padDiff != 0) {
      totalPad = 0;
    }
  }
  {
    IOSByteArray *dummyPad = randomData_;
    while (dummyIndex < 256) {
      padDiff |= (IOSByteArray_Get(nil_chk(dummyPad), dummyIndex++) ^ lastByte);
    }
    *IOSByteArray_GetRef(nil_chk(dummyPad), 0) ^= padDiff;
  }
  return totalPad;
}

- (jint)chooseExtraPadBlocksWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)r
                                                 withInt:(jint)max {
  jint x = [((JavaSecuritySecureRandom *) nil_chk(r)) nextInt];
  jint n = [self lowestBitSetWithInt:x];
  return JavaLangMath_minWithInt_withInt_(n, max);
}

- (jint)lowestBitSetWithInt:(jint)x {
  if (x == 0) {
    return 32;
  }
  jint n = 0;
  while ((x & 1) == 0) {
    ++n;
    JreRShiftAssignInt(&x, 1);
  }
  return n;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgSpongycastleCryptoTlsTlsMac;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsMac;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 6, 5, 1, -1, -1, -1 },
    { NULL, "I", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 11, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWriteMac);
  methods[1].selector = @selector(getReadMac);
  methods[2].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsContext:withOrgSpongycastleCryptoBlockCipher:withOrgSpongycastleCryptoBlockCipher:withOrgSpongycastleCryptoDigest:withOrgSpongycastleCryptoDigest:withInt:);
  methods[3].selector = @selector(getPlaintextLimitWithInt:);
  methods[4].selector = @selector(encodePlaintextWithLong:withShort:withByteArray:withInt:withInt:);
  methods[5].selector = @selector(decodeCiphertextWithLong:withShort:withByteArray:withInt:withInt:);
  methods[6].selector = @selector(checkPaddingConstantTimeWithByteArray:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(chooseExtraPadBlocksWithJavaSecuritySecureRandom:withInt:);
  methods[8].selector = @selector(lowestBitSetWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "context_", "LOrgSpongycastleCryptoTlsTlsContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "randomData_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "useExplicitIV_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "encryptThenMAC_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "encryptCipher_", "LOrgSpongycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "decryptCipher_", "LOrgSpongycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "writeMac_", "LOrgSpongycastleCryptoTlsTlsMac;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "readMac_", "LOrgSpongycastleCryptoTlsTlsMac;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsTlsContext;LOrgSpongycastleCryptoBlockCipher;LOrgSpongycastleCryptoBlockCipher;LOrgSpongycastleCryptoDigest;LOrgSpongycastleCryptoDigest;I", "LJavaIoIOException;", "getPlaintextLimit", "I", "encodePlaintext", "JS[BII", "decodeCiphertext", "checkPaddingConstantTime", "[BIIII", "chooseExtraPadBlocks", "LJavaSecuritySecureRandom;I", "lowestBitSet" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsTlsBlockCipher = { "TlsBlockCipher", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 9, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsTlsBlockCipher;
}

@end

void OrgSpongycastleCryptoTlsTlsBlockCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withInt_(OrgSpongycastleCryptoTlsTlsBlockCipher *self, id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoBlockCipher> clientWriteCipher, id<OrgSpongycastleCryptoBlockCipher> serverWriteCipher, id<OrgSpongycastleCryptoDigest> clientWriteDigest, id<OrgSpongycastleCryptoDigest> serverWriteDigest, jint cipherKeySize) {
  NSObject_init(self);
  self->context_ = context;
  self->randomData_ = [IOSByteArray newArrayWithLength:256];
  [((id<OrgSpongycastleCryptoPrngRandomGenerator>) nil_chk([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context)) getNonceRandomGenerator])) nextBytesWithByteArray:self->randomData_];
  self->useExplicitIV_ = OrgSpongycastleCryptoTlsTlsUtils_isTLSv11WithOrgSpongycastleCryptoTlsTlsContext_(context);
  self->encryptThenMAC_ = ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk([context getSecurityParameters]))->encryptThenMAC_;
  jint key_block_size = (2 * cipherKeySize) + [((id<OrgSpongycastleCryptoDigest>) nil_chk(clientWriteDigest)) getDigestSize] + [((id<OrgSpongycastleCryptoDigest>) nil_chk(serverWriteDigest)) getDigestSize];
  if (!self->useExplicitIV_) {
    key_block_size += [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(clientWriteCipher)) getBlockSize] + [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(serverWriteCipher)) getBlockSize];
  }
  IOSByteArray *key_block = OrgSpongycastleCryptoTlsTlsUtils_calculateKeyBlockWithOrgSpongycastleCryptoTlsTlsContext_withInt_(context, key_block_size);
  jint offset = 0;
  OrgSpongycastleCryptoTlsTlsMac *clientWriteMac = new_OrgSpongycastleCryptoTlsTlsMac_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoDigest_withByteArray_withInt_withInt_(context, clientWriteDigest, key_block, offset, [clientWriteDigest getDigestSize]);
  offset += [clientWriteDigest getDigestSize];
  OrgSpongycastleCryptoTlsTlsMac *serverWriteMac = new_OrgSpongycastleCryptoTlsTlsMac_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoDigest_withByteArray_withInt_withInt_(context, serverWriteDigest, key_block, offset, [serverWriteDigest getDigestSize]);
  offset += [serverWriteDigest getDigestSize];
  OrgSpongycastleCryptoParamsKeyParameter *client_write_key = new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(key_block, offset, cipherKeySize);
  offset += cipherKeySize;
  OrgSpongycastleCryptoParamsKeyParameter *server_write_key = new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(key_block, offset, cipherKeySize);
  offset += cipherKeySize;
  IOSByteArray *client_write_IV;
  IOSByteArray *server_write_IV;
  if (self->useExplicitIV_) {
    client_write_IV = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(clientWriteCipher)) getBlockSize]];
    server_write_IV = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(serverWriteCipher)) getBlockSize]];
  }
  else {
    client_write_IV = OrgSpongycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(key_block, offset, offset + [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(clientWriteCipher)) getBlockSize]);
    offset += [clientWriteCipher getBlockSize];
    server_write_IV = OrgSpongycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(key_block, offset, offset + [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(serverWriteCipher)) getBlockSize]);
    offset += [serverWriteCipher getBlockSize];
  }
  if (offset != key_block_size) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  id<OrgSpongycastleCryptoCipherParameters> encryptParams;
  id<OrgSpongycastleCryptoCipherParameters> decryptParams;
  if ([context isServer]) {
    self->writeMac_ = serverWriteMac;
    self->readMac_ = clientWriteMac;
    self->encryptCipher_ = serverWriteCipher;
    self->decryptCipher_ = clientWriteCipher;
    encryptParams = new_OrgSpongycastleCryptoParamsParametersWithIV_initWithOrgSpongycastleCryptoCipherParameters_withByteArray_(server_write_key, server_write_IV);
    decryptParams = new_OrgSpongycastleCryptoParamsParametersWithIV_initWithOrgSpongycastleCryptoCipherParameters_withByteArray_(client_write_key, client_write_IV);
  }
  else {
    self->writeMac_ = clientWriteMac;
    self->readMac_ = serverWriteMac;
    self->encryptCipher_ = clientWriteCipher;
    self->decryptCipher_ = serverWriteCipher;
    encryptParams = new_OrgSpongycastleCryptoParamsParametersWithIV_initWithOrgSpongycastleCryptoCipherParameters_withByteArray_(client_write_key, client_write_IV);
    decryptParams = new_OrgSpongycastleCryptoParamsParametersWithIV_initWithOrgSpongycastleCryptoCipherParameters_withByteArray_(server_write_key, server_write_IV);
  }
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->encryptCipher_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:encryptParams];
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(self->decryptCipher_)) init__WithBoolean:false withOrgSpongycastleCryptoCipherParameters:decryptParams];
}

OrgSpongycastleCryptoTlsTlsBlockCipher *new_OrgSpongycastleCryptoTlsTlsBlockCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withInt_(id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoBlockCipher> clientWriteCipher, id<OrgSpongycastleCryptoBlockCipher> serverWriteCipher, id<OrgSpongycastleCryptoDigest> clientWriteDigest, id<OrgSpongycastleCryptoDigest> serverWriteDigest, jint cipherKeySize) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsTlsBlockCipher, initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withInt_, context, clientWriteCipher, serverWriteCipher, clientWriteDigest, serverWriteDigest, cipherKeySize)
}

OrgSpongycastleCryptoTlsTlsBlockCipher *create_OrgSpongycastleCryptoTlsTlsBlockCipher_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withInt_(id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoBlockCipher> clientWriteCipher, id<OrgSpongycastleCryptoBlockCipher> serverWriteCipher, id<OrgSpongycastleCryptoDigest> clientWriteDigest, id<OrgSpongycastleCryptoDigest> serverWriteDigest, jint cipherKeySize) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsTlsBlockCipher, initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoBlockCipher_withOrgSpongycastleCryptoDigest_withOrgSpongycastleCryptoDigest_withInt_, context, clientWriteCipher, serverWriteCipher, clientWriteDigest, serverWriteDigest, cipherKeySize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsTlsBlockCipher)
