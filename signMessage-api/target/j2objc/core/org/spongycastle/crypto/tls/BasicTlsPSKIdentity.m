//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/BasicTlsPSKIdentity.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/tls/BasicTlsPSKIdentity.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/Strings.h"

@implementation OrgSpongycastleCryptoTlsBasicTlsPSKIdentity

- (instancetype)initWithByteArray:(IOSByteArray *)identity
                    withByteArray:(IOSByteArray *)psk {
  OrgSpongycastleCryptoTlsBasicTlsPSKIdentity_initWithByteArray_withByteArray_(self, identity, psk);
  return self;
}

- (instancetype)initWithNSString:(NSString *)identity
                   withByteArray:(IOSByteArray *)psk {
  OrgSpongycastleCryptoTlsBasicTlsPSKIdentity_initWithNSString_withByteArray_(self, identity, psk);
  return self;
}

- (void)skipIdentityHint {
}

- (void)notifyIdentityHintWithByteArray:(IOSByteArray *)psk_identity_hint {
}

- (IOSByteArray *)getPSKIdentity {
  return identity_;
}

- (IOSByteArray *)getPSK {
  return psk_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withByteArray:);
  methods[1].selector = @selector(initWithNSString:withByteArray:);
  methods[2].selector = @selector(skipIdentityHint);
  methods[3].selector = @selector(notifyIdentityHintWithByteArray:);
  methods[4].selector = @selector(getPSKIdentity);
  methods[5].selector = @selector(getPSK);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "identity_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "psk_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[B[B", "LNSString;[B", "notifyIdentityHint", "[B" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsBasicTlsPSKIdentity = { "BasicTlsPSKIdentity", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsBasicTlsPSKIdentity;
}

@end

void OrgSpongycastleCryptoTlsBasicTlsPSKIdentity_initWithByteArray_withByteArray_(OrgSpongycastleCryptoTlsBasicTlsPSKIdentity *self, IOSByteArray *identity, IOSByteArray *psk) {
  NSObject_init(self);
  self->identity_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(identity);
  self->psk_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(psk);
}

OrgSpongycastleCryptoTlsBasicTlsPSKIdentity *new_OrgSpongycastleCryptoTlsBasicTlsPSKIdentity_initWithByteArray_withByteArray_(IOSByteArray *identity, IOSByteArray *psk) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsBasicTlsPSKIdentity, initWithByteArray_withByteArray_, identity, psk)
}

OrgSpongycastleCryptoTlsBasicTlsPSKIdentity *create_OrgSpongycastleCryptoTlsBasicTlsPSKIdentity_initWithByteArray_withByteArray_(IOSByteArray *identity, IOSByteArray *psk) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsBasicTlsPSKIdentity, initWithByteArray_withByteArray_, identity, psk)
}

void OrgSpongycastleCryptoTlsBasicTlsPSKIdentity_initWithNSString_withByteArray_(OrgSpongycastleCryptoTlsBasicTlsPSKIdentity *self, NSString *identity, IOSByteArray *psk) {
  NSObject_init(self);
  self->identity_ = OrgSpongycastleUtilStrings_toUTF8ByteArrayWithNSString_(identity);
  self->psk_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(psk);
}

OrgSpongycastleCryptoTlsBasicTlsPSKIdentity *new_OrgSpongycastleCryptoTlsBasicTlsPSKIdentity_initWithNSString_withByteArray_(NSString *identity, IOSByteArray *psk) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsBasicTlsPSKIdentity, initWithNSString_withByteArray_, identity, psk)
}

OrgSpongycastleCryptoTlsBasicTlsPSKIdentity *create_OrgSpongycastleCryptoTlsBasicTlsPSKIdentity_initWithNSString_withByteArray_(NSString *identity, IOSByteArray *psk) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsBasicTlsPSKIdentity, initWithNSString_withByteArray_, identity, psk)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsBasicTlsPSKIdentity)
