//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DefaultTlsSignerCredentials.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials

#if !defined (OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials || defined(INCLUDE_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials))
#define OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_

#define RESTRICT_OrgSpongycastleCryptoTlsAbstractTlsSignerCredentials 1
#define INCLUDE_OrgSpongycastleCryptoTlsAbstractTlsSignerCredentials 1
#include "org/spongycastle/crypto/tls/AbstractTlsSignerCredentials.h"

@class IOSByteArray;
@class OrgSpongycastleCryptoParamsAsymmetricKeyParameter;
@class OrgSpongycastleCryptoTlsCertificate;
@class OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;
@protocol OrgSpongycastleCryptoTlsTlsContext;
@protocol OrgSpongycastleCryptoTlsTlsSigner;

@interface OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials : OrgSpongycastleCryptoTlsAbstractTlsSignerCredentials {
 @public
  id<OrgSpongycastleCryptoTlsTlsContext> context_;
  OrgSpongycastleCryptoTlsCertificate *certificate_;
  OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey_;
  OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm_;
  id<OrgSpongycastleCryptoTlsTlsSigner> signer_;
}

#pragma mark Public

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                   withOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)certificate
     withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:(OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)privateKey;

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                   withOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)certificate
     withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:(OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)privateKey
     withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)signatureAndHashAlgorithm;

- (IOSByteArray *)generateCertificateSignatureWithByteArray:(IOSByteArray *)hash_;

- (OrgSpongycastleCryptoTlsCertificate *)getCertificate;

- (OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)getSignatureAndHashAlgorithm;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials, context_, id<OrgSpongycastleCryptoTlsTlsContext>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials, certificate_, OrgSpongycastleCryptoTlsCertificate *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials, privateKey_, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials, signatureAndHashAlgorithm_, OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials, signer_, id<OrgSpongycastleCryptoTlsTlsSigner>)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials *self, id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials *new_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials *create_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials *self, id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey, OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials *new_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey, OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials *create_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey, OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials")
