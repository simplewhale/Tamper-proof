//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsProtocol.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsProtocol")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsTlsProtocol
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsProtocol 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsProtocol 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsTlsProtocol

#if !defined (OrgSpongycastleCryptoTlsTlsProtocol_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsProtocol || defined(INCLUDE_OrgSpongycastleCryptoTlsTlsProtocol))
#define OrgSpongycastleCryptoTlsTlsProtocol_

@class IOSByteArray;
@class IOSIntArray;
@class IOSShortArray;
@class JavaIoByteArrayInputStream;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaLangInteger;
@class JavaLangThrowable;
@class JavaSecuritySecureRandom;
@class JavaUtilHashtable;
@class JavaUtilVector;
@class OrgSpongycastleCryptoTlsAbstractTlsContext;
@class OrgSpongycastleCryptoTlsByteQueueInputStream;
@class OrgSpongycastleCryptoTlsByteQueueOutputStream;
@class OrgSpongycastleCryptoTlsCertificate;
@class OrgSpongycastleCryptoTlsRecordStream;
@class OrgSpongycastleCryptoTlsSecurityParameters;
@class OrgSpongycastleCryptoTlsSessionParameters;
@protocol OrgSpongycastleCryptoPrngRandomGenerator;
@protocol OrgSpongycastleCryptoTlsTlsContext;
@protocol OrgSpongycastleCryptoTlsTlsHandshakeHash;
@protocol OrgSpongycastleCryptoTlsTlsKeyExchange;
@protocol OrgSpongycastleCryptoTlsTlsPeer;
@protocol OrgSpongycastleCryptoTlsTlsSession;

@interface OrgSpongycastleCryptoTlsTlsProtocol : NSObject {
 @public
  OrgSpongycastleCryptoTlsRecordStream *recordStream_;
  JavaSecuritySecureRandom *secureRandom_;
  id<OrgSpongycastleCryptoTlsTlsSession> tlsSession_;
  OrgSpongycastleCryptoTlsSessionParameters *sessionParameters_;
  OrgSpongycastleCryptoTlsSecurityParameters *securityParameters_;
  OrgSpongycastleCryptoTlsCertificate *peerCertificate_;
  IOSIntArray *offeredCipherSuites_;
  IOSShortArray *offeredCompressionMethods_;
  JavaUtilHashtable *clientExtensions_;
  JavaUtilHashtable *serverExtensions_;
  jshort connection_state_;
  jboolean resumedSession_;
  jboolean receivedChangeCipherSpec_;
  jboolean secure_renegotiation_;
  jboolean allowCertificateStatus_;
  jboolean expectSessionTicket_;
  jboolean blocking_;
  OrgSpongycastleCryptoTlsByteQueueInputStream *inputBuffers_;
  OrgSpongycastleCryptoTlsByteQueueOutputStream *outputBuffer_;
}

#pragma mark Public

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)input
                   withJavaIoOutputStream:(JavaIoOutputStream *)output
             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

- (void)close;

- (void)closeInput;

- (jint)getAvailableInputBytes;

- (jint)getAvailableOutputBytes;

- (JavaIoInputStream *)getInputStream;

- (JavaIoOutputStream *)getOutputStream;

- (jboolean)isClosed;

- (void)offerInputWithByteArray:(IOSByteArray *)input;

- (void)offerOutputWithByteArray:(IOSByteArray *)buffer
                         withInt:(jint)offset
                         withInt:(jint)length;

- (jint)readInputWithByteArray:(IOSByteArray *)buffer
                       withInt:(jint)offset
                       withInt:(jint)length;

- (jint)readOutputWithByteArray:(IOSByteArray *)buffer
                        withInt:(jint)offset
                        withInt:(jint)length;

#pragma mark Protected

- (jint)applicationDataAvailable;

- (void)applyMaxFragmentLengthExtension;

+ (void)assertEmptyWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)blockForHandshake;

- (void)checkReceivedChangeCipherSpecWithBoolean:(jboolean)expected;

- (void)cleanupHandshake;

- (void)completeHandshake;

+ (IOSByteArray *)createRandomBlockWithBoolean:(jboolean)useGMTUnixTime
  withOrgSpongycastleCryptoPrngRandomGenerator:(id<OrgSpongycastleCryptoPrngRandomGenerator>)randomGenerator;

+ (IOSByteArray *)createRenegotiationInfoWithByteArray:(IOSByteArray *)renegotiated_connection;

- (IOSByteArray *)createVerifyDataWithBoolean:(jboolean)isServer;

+ (void)establishMasterSecretWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                         withOrgSpongycastleCryptoTlsTlsKeyExchange:(id<OrgSpongycastleCryptoTlsTlsKeyExchange>)keyExchange;

- (void)flush;

- (id<OrgSpongycastleCryptoTlsTlsContext>)getContext;

+ (IOSByteArray *)getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                             withOrgSpongycastleCryptoTlsTlsHandshakeHash:(id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)handshakeHash
                                                            withByteArray:(IOSByteArray *)sslSender;

- (id<OrgSpongycastleCryptoTlsTlsPeer>)getPeer;

+ (jint)getPRFAlgorithmWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                      withInt:(jint)ciphersuite;

- (void)handleAlertMessageWithShort:(jshort)alertLevel
                          withShort:(jshort)alertDescription;

- (void)handleAlertWarningMessageWithShort:(jshort)alertDescription;

- (void)handleChangeCipherSpecMessage;

- (void)handleCloseWithBoolean:(jboolean)user_canceled;

- (void)handleExceptionWithShort:(jshort)alertDescription
                    withNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause;

- (void)handleFailure;

- (void)handleHandshakeMessageWithShort:(jshort)type
         withJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)invalidateSession;

- (void)processFinishedMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (jshort)processMaxFragmentLengthExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)clientExtensions
                                           withJavaUtilHashtable:(JavaUtilHashtable *)serverExtensions
                                                       withShort:(jshort)alertDescription;

- (void)processRecordWithShort:(jshort)protocol
                 withByteArray:(IOSByteArray *)buf
                       withInt:(jint)off
                       withInt:(jint)len;

- (void)raiseAlertFatalWithShort:(jshort)alertDescription
                    withNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause;

- (void)raiseAlertWarningWithShort:(jshort)alertDescription
                      withNSString:(NSString *)message;

- (jint)readApplicationDataWithByteArray:(IOSByteArray *)buf
                                 withInt:(jint)offset
                                 withInt:(jint)len;

+ (JavaUtilHashtable *)readExtensionsWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)input;

+ (JavaUtilVector *)readSupplementalDataMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)input;

- (void)refuseRenegotiation;

- (void)safeCheckRecordHeaderWithByteArray:(IOSByteArray *)recordHeader;

- (void)safeReadRecord;

- (void)safeWriteRecordWithShort:(jshort)type
                   withByteArray:(IOSByteArray *)buf
                         withInt:(jint)offset
                         withInt:(jint)len;

- (void)sendCertificateMessageWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)certificate;

- (void)sendChangeCipherSpecMessage;

- (void)sendFinishedMessage;

- (void)sendSupplementalDataMessageWithJavaUtilVector:(JavaUtilVector *)supplementalData;

- (void)setAppDataSplitModeWithInt:(jint)appDataSplitMode;

- (void)writeDataWithByteArray:(IOSByteArray *)buf
                       withInt:(jint)offset
                       withInt:(jint)len;

+ (void)writeExtensionsWithJavaIoOutputStream:(JavaIoOutputStream *)output
                        withJavaUtilHashtable:(JavaUtilHashtable *)extensions;

- (void)writeHandshakeMessageWithByteArray:(IOSByteArray *)buf
                                   withInt:(jint)off
                                   withInt:(jint)len;

+ (void)writeSelectedExtensionsWithJavaIoOutputStream:(JavaIoOutputStream *)output
                                withJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                          withBoolean:(jboolean)selectEmpty;

+ (void)writeSupplementalDataWithJavaIoOutputStream:(JavaIoOutputStream *)output
                                 withJavaUtilVector:(JavaUtilVector *)supplementalData;

#pragma mark Package-Private

- (OrgSpongycastleCryptoTlsAbstractTlsContext *)getContextAdmin;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleCryptoTlsTlsProtocol)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, recordStream_, OrgSpongycastleCryptoTlsRecordStream *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, secureRandom_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, tlsSession_, id<OrgSpongycastleCryptoTlsTlsSession>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, sessionParameters_, OrgSpongycastleCryptoTlsSessionParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, securityParameters_, OrgSpongycastleCryptoTlsSecurityParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, peerCertificate_, OrgSpongycastleCryptoTlsCertificate *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, offeredCipherSuites_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, offeredCompressionMethods_, IOSShortArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, clientExtensions_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, serverExtensions_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, inputBuffers_, OrgSpongycastleCryptoTlsByteQueueInputStream *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, outputBuffer_, OrgSpongycastleCryptoTlsByteQueueOutputStream *)

inline JavaLangInteger *OrgSpongycastleCryptoTlsTlsProtocol_get_EXT_RenegotiationInfo(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *OrgSpongycastleCryptoTlsTlsProtocol_EXT_RenegotiationInfo;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsProtocol, EXT_RenegotiationInfo, JavaLangInteger *)

inline JavaLangInteger *OrgSpongycastleCryptoTlsTlsProtocol_get_EXT_SessionTicket(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *OrgSpongycastleCryptoTlsTlsProtocol_EXT_SessionTicket;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsProtocol, EXT_SessionTicket, JavaLangInteger *)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_START(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_START 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_START, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_CLIENT_HELLO(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_HELLO 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_CLIENT_HELLO, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_SERVER_HELLO(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_HELLO 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_SERVER_HELLO, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_SERVER_SUPPLEMENTAL_DATA(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_SUPPLEMENTAL_DATA 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_SERVER_SUPPLEMENTAL_DATA, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_SERVER_CERTIFICATE(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_CERTIFICATE 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_SERVER_CERTIFICATE, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_CERTIFICATE_STATUS(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_CERTIFICATE_STATUS 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_CERTIFICATE_STATUS, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_SERVER_KEY_EXCHANGE(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_KEY_EXCHANGE 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_SERVER_KEY_EXCHANGE, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_CERTIFICATE_REQUEST(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_CERTIFICATE_REQUEST 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_CERTIFICATE_REQUEST, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_SERVER_HELLO_DONE(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_HELLO_DONE 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_SERVER_HELLO_DONE, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_CLIENT_SUPPLEMENTAL_DATA(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_SUPPLEMENTAL_DATA 9
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_CLIENT_SUPPLEMENTAL_DATA, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_CLIENT_CERTIFICATE(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_CERTIFICATE 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_CLIENT_CERTIFICATE, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_CLIENT_KEY_EXCHANGE(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_KEY_EXCHANGE 11
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_CLIENT_KEY_EXCHANGE, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_CERTIFICATE_VERIFY(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_CERTIFICATE_VERIFY 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_CERTIFICATE_VERIFY, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_CLIENT_FINISHED(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_FINISHED 13
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_CLIENT_FINISHED, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_SERVER_SESSION_TICKET(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_SESSION_TICKET 14
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_SERVER_SESSION_TICKET, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_SERVER_FINISHED(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_FINISHED 15
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_SERVER_FINISHED, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_CS_END(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_CS_END 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, CS_END, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_ADS_MODE_1_Nsub1(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_ADS_MODE_1_Nsub1 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, ADS_MODE_1_Nsub1, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_ADS_MODE_0_N(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_ADS_MODE_0_N 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, ADS_MODE_0_N, jshort)

inline jshort OrgSpongycastleCryptoTlsTlsProtocol_get_ADS_MODE_0_N_FIRSTONLY(void);
#define OrgSpongycastleCryptoTlsTlsProtocol_ADS_MODE_0_N_FIRSTONLY 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsTlsProtocol, ADS_MODE_0_N_FIRSTONLY, jshort)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(OrgSpongycastleCryptoTlsTlsProtocol *self, JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsProtocol_initWithJavaSecuritySecureRandom_(OrgSpongycastleCryptoTlsTlsProtocol *self, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *buf);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsProtocol_createRandomBlockWithBoolean_withOrgSpongycastleCryptoPrngRandomGenerator_(jboolean useGMTUnixTime, id<OrgSpongycastleCryptoPrngRandomGenerator> randomGenerator);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsProtocol_createRenegotiationInfoWithByteArray_(IOSByteArray *renegotiated_connection);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsProtocol_establishMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsKeyExchange_(id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoTlsTlsKeyExchange> keyExchange);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsProtocol_getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsHandshakeHash_withByteArray_(id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoTlsTlsHandshakeHash> handshakeHash, IOSByteArray *sslSender);

FOUNDATION_EXPORT JavaUtilHashtable *OrgSpongycastleCryptoTlsTlsProtocol_readExtensionsWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *input);

FOUNDATION_EXPORT JavaUtilVector *OrgSpongycastleCryptoTlsTlsProtocol_readSupplementalDataMessageWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *input);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsProtocol_writeExtensionsWithJavaIoOutputStream_withJavaUtilHashtable_(JavaIoOutputStream *output, JavaUtilHashtable *extensions);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsProtocol_writeSelectedExtensionsWithJavaIoOutputStream_withJavaUtilHashtable_withBoolean_(JavaIoOutputStream *output, JavaUtilHashtable *extensions, jboolean selectEmpty);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsProtocol_writeSupplementalDataWithJavaIoOutputStream_withJavaUtilVector_(JavaIoOutputStream *output, JavaUtilVector *supplementalData);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoTlsTlsProtocol_getPRFAlgorithmWithOrgSpongycastleCryptoTlsTlsContext_withInt_(id<OrgSpongycastleCryptoTlsTlsContext> context, jint ciphersuite);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsTlsProtocol)

#endif

#if !defined (OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsProtocol || defined(INCLUDE_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage))
#define OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_

#define RESTRICT_JavaIoByteArrayOutputStream 1
#define INCLUDE_JavaIoByteArrayOutputStream 1
#include "java/io/ByteArrayOutputStream.h"

@class OrgSpongycastleCryptoTlsTlsProtocol;

@interface OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage : JavaIoByteArrayOutputStream

#pragma mark Package-Private

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsProtocol:(OrgSpongycastleCryptoTlsTlsProtocol *)outer$
                                                  withShort:(jshort)handshakeType;

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsProtocol:(OrgSpongycastleCryptoTlsTlsProtocol *)outer$
                                                  withShort:(jshort)handshakeType
                                                    withInt:(jint)length;

- (void)writeToRecordStream;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_(OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *self, OrgSpongycastleCryptoTlsTlsProtocol *outer$, jshort handshakeType);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *new_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_(OrgSpongycastleCryptoTlsTlsProtocol *outer$, jshort handshakeType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *create_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_(OrgSpongycastleCryptoTlsTlsProtocol *outer$, jshort handshakeType);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_withInt_(OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *self, OrgSpongycastleCryptoTlsTlsProtocol *outer$, jshort handshakeType, jint length);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *new_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_withInt_(OrgSpongycastleCryptoTlsTlsProtocol *outer$, jshort handshakeType, jint length) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *create_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_withInt_(OrgSpongycastleCryptoTlsTlsProtocol *outer$, jshort handshakeType, jint length);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsProtocol")
