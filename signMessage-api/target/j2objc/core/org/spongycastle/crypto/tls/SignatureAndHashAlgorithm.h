//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/SignatureAndHashAlgorithm.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm

#if !defined (OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm || defined(INCLUDE_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm))
#define OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_

@class JavaIoInputStream;
@class JavaIoOutputStream;

@interface OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm : NSObject {
 @public
  jshort hash__;
  jshort signature_;
}

#pragma mark Public

- (instancetype)initWithShort:(jshort)hash_
                    withShort:(jshort)signature;

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (jboolean)isEqual:(id)obj;

- (jshort)getHash;

- (jshort)getSignature;

- (NSUInteger)hash;

+ (OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)parseWithJavaIoInputStream:(JavaIoInputStream *)input;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_initWithShort_withShort_(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *self, jshort hash_, jshort signature);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *new_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_initWithShort_withShort_(jshort hash_, jshort signature) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *create_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_initWithShort_withShort_(jshort hash_, jshort signature);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_parseWithJavaIoInputStream_(JavaIoInputStream *input);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm")
