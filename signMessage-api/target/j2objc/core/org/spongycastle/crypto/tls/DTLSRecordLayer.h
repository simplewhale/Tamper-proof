//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DTLSRecordLayer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSRecordLayer")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsDTLSRecordLayer
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSRecordLayer 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSRecordLayer 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsDTLSRecordLayer

#if !defined (OrgSpongycastleCryptoTlsDTLSRecordLayer_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSRecordLayer || defined(INCLUDE_OrgSpongycastleCryptoTlsDTLSRecordLayer))
#define OrgSpongycastleCryptoTlsDTLSRecordLayer_

#define RESTRICT_OrgSpongycastleCryptoTlsDatagramTransport 1
#define INCLUDE_OrgSpongycastleCryptoTlsDatagramTransport 1
#include "org/spongycastle/crypto/tls/DatagramTransport.h"

@class IOSByteArray;
@class OrgSpongycastleCryptoTlsProtocolVersion;
@protocol OrgSpongycastleCryptoTlsDTLSHandshakeRetransmit;
@protocol OrgSpongycastleCryptoTlsTlsCipher;
@protocol OrgSpongycastleCryptoTlsTlsContext;
@protocol OrgSpongycastleCryptoTlsTlsPeer;

@interface OrgSpongycastleCryptoTlsDTLSRecordLayer : NSObject < OrgSpongycastleCryptoTlsDatagramTransport >

#pragma mark Public

- (void)close;

- (jint)getReceiveLimit;

- (jint)getSendLimit;

- (jint)receiveWithByteArray:(IOSByteArray *)buf
                     withInt:(jint)off
                     withInt:(jint)len
                     withInt:(jint)waitMillis;

- (void)sendWithByteArray:(IOSByteArray *)buf
                  withInt:(jint)off
                  withInt:(jint)len;

#pragma mark Package-Private

- (instancetype)initWithOrgSpongycastleCryptoTlsDatagramTransport:(id<OrgSpongycastleCryptoTlsDatagramTransport>)transport
                           withOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                              withOrgSpongycastleCryptoTlsTlsPeer:(id<OrgSpongycastleCryptoTlsTlsPeer>)peer
                                                        withShort:(jshort)contentType;

- (void)failWithShort:(jshort)alertDescription;

- (void)failed;

- (jint)getReadEpoch;

- (OrgSpongycastleCryptoTlsProtocolVersion *)getReadVersion;

- (void)handshakeSuccessfulWithOrgSpongycastleCryptoTlsDTLSHandshakeRetransmit:(id<OrgSpongycastleCryptoTlsDTLSHandshakeRetransmit>)retransmit;

- (void)initPendingEpochWithOrgSpongycastleCryptoTlsTlsCipher:(id<OrgSpongycastleCryptoTlsTlsCipher>)pendingCipher OBJC_METHOD_FAMILY_NONE;

- (void)resetWriteEpoch;

- (void)setPlaintextLimitWithInt:(jint)plaintextLimit;

- (void)setReadVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)readVersion;

- (void)setWriteVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)writeVersion;

- (void)warnWithShort:(jshort)alertDescription
         withNSString:(NSString *)message;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsDTLSRecordLayer)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsDTLSRecordLayer_initWithOrgSpongycastleCryptoTlsDatagramTransport_withOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsPeer_withShort_(OrgSpongycastleCryptoTlsDTLSRecordLayer *self, id<OrgSpongycastleCryptoTlsDatagramTransport> transport, id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoTlsTlsPeer> peer, jshort contentType);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsDTLSRecordLayer *new_OrgSpongycastleCryptoTlsDTLSRecordLayer_initWithOrgSpongycastleCryptoTlsDatagramTransport_withOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsPeer_withShort_(id<OrgSpongycastleCryptoTlsDatagramTransport> transport, id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoTlsTlsPeer> peer, jshort contentType) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsDTLSRecordLayer *create_OrgSpongycastleCryptoTlsDTLSRecordLayer_initWithOrgSpongycastleCryptoTlsDatagramTransport_withOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsPeer_withShort_(id<OrgSpongycastleCryptoTlsDatagramTransport> transport, id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoTlsTlsPeer> peer, jshort contentType);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsDTLSRecordLayer)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsDTLSRecordLayer")
