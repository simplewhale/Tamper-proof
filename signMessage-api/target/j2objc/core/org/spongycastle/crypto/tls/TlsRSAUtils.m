//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsRSAUtils.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/InvalidCipherTextException.h"
#include "org/spongycastle/crypto/encodings/PKCS1Encoding.h"
#include "org/spongycastle/crypto/engines/RSABlindedEngine.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/crypto/params/RSAKeyParameters.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/ProtocolVersion.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsRSAUtils.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/util/Arrays.h"

@implementation OrgSpongycastleCryptoTlsTlsRSAUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsTlsRSAUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)generateEncryptedPreMasterSecretWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                         withOrgSpongycastleCryptoParamsRSAKeyParameters:(OrgSpongycastleCryptoParamsRSAKeyParameters *)rsaServerPublicKey
                                                                  withJavaIoOutputStream:(JavaIoOutputStream *)output {
  return OrgSpongycastleCryptoTlsTlsRSAUtils_generateEncryptedPreMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoParamsRSAKeyParameters_withJavaIoOutputStream_(context, rsaServerPublicKey, output);
}

+ (IOSByteArray *)safeDecryptPreMasterSecretWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                   withOrgSpongycastleCryptoParamsRSAKeyParameters:(OrgSpongycastleCryptoParamsRSAKeyParameters *)rsaServerPrivateKey
                                                                     withByteArray:(IOSByteArray *)encryptedPreMasterSecret {
  return OrgSpongycastleCryptoTlsTlsRSAUtils_safeDecryptPreMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoParamsRSAKeyParameters_withByteArray_(context, rsaServerPrivateKey, encryptedPreMasterSecret);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateEncryptedPreMasterSecretWithOrgSpongycastleCryptoTlsTlsContext:withOrgSpongycastleCryptoParamsRSAKeyParameters:withJavaIoOutputStream:);
  methods[2].selector = @selector(safeDecryptPreMasterSecretWithOrgSpongycastleCryptoTlsTlsContext:withOrgSpongycastleCryptoParamsRSAKeyParameters:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "generateEncryptedPreMasterSecret", "LOrgSpongycastleCryptoTlsTlsContext;LOrgSpongycastleCryptoParamsRSAKeyParameters;LJavaIoOutputStream;", "LJavaIoIOException;", "safeDecryptPreMasterSecret", "LOrgSpongycastleCryptoTlsTlsContext;LOrgSpongycastleCryptoParamsRSAKeyParameters;[B" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsTlsRSAUtils = { "TlsRSAUtils", "org.spongycastle.crypto.tls", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsTlsRSAUtils;
}

@end

void OrgSpongycastleCryptoTlsTlsRSAUtils_init(OrgSpongycastleCryptoTlsTlsRSAUtils *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoTlsTlsRSAUtils *new_OrgSpongycastleCryptoTlsTlsRSAUtils_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsTlsRSAUtils, init)
}

OrgSpongycastleCryptoTlsTlsRSAUtils *create_OrgSpongycastleCryptoTlsTlsRSAUtils_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsTlsRSAUtils, init)
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsRSAUtils_generateEncryptedPreMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoParamsRSAKeyParameters_withJavaIoOutputStream_(id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoParamsRSAKeyParameters *rsaServerPublicKey, JavaIoOutputStream *output) {
  OrgSpongycastleCryptoTlsTlsRSAUtils_initialize();
  IOSByteArray *premasterSecret = [IOSByteArray newArrayWithLength:48];
  [((JavaSecuritySecureRandom *) nil_chk([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context)) getSecureRandom])) nextBytesWithByteArray:premasterSecret];
  OrgSpongycastleCryptoTlsTlsUtils_writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion_withByteArray_withInt_([context getClientVersion], premasterSecret, 0);
  OrgSpongycastleCryptoEncodingsPKCS1Encoding *encoding = new_OrgSpongycastleCryptoEncodingsPKCS1Encoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_(new_OrgSpongycastleCryptoEnginesRSABlindedEngine_init());
  [encoding init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsParametersWithRandom_initWithOrgSpongycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(rsaServerPublicKey, [context getSecureRandom])];
  @try {
    IOSByteArray *encryptedPreMasterSecret = [encoding processBlockWithByteArray:premasterSecret withInt:0 withInt:premasterSecret->size_];
    if (OrgSpongycastleCryptoTlsTlsUtils_isSSLWithOrgSpongycastleCryptoTlsTlsContext_(context)) {
      [((JavaIoOutputStream *) nil_chk(output)) writeWithByteArray:encryptedPreMasterSecret];
    }
    else {
      OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(encryptedPreMasterSecret, output);
    }
  }
  @catch (OrgSpongycastleCryptoInvalidCipherTextException *e) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_internal_error, e);
  }
  return premasterSecret;
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsRSAUtils_safeDecryptPreMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoParamsRSAKeyParameters_withByteArray_(id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoParamsRSAKeyParameters *rsaServerPrivateKey, IOSByteArray *encryptedPreMasterSecret) {
  OrgSpongycastleCryptoTlsTlsRSAUtils_initialize();
  OrgSpongycastleCryptoTlsProtocolVersion *clientVersion = [((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context)) getClientVersion];
  jboolean versionNumberCheckDisabled = false;
  IOSByteArray *fallback = [IOSByteArray newArrayWithLength:48];
  [((JavaSecuritySecureRandom *) nil_chk([context getSecureRandom])) nextBytesWithByteArray:fallback];
  IOSByteArray *M = OrgSpongycastleUtilArrays_cloneWithByteArray_(fallback);
  @try {
    OrgSpongycastleCryptoEncodingsPKCS1Encoding *encoding = new_OrgSpongycastleCryptoEncodingsPKCS1Encoding_initWithOrgSpongycastleCryptoAsymmetricBlockCipher_withByteArray_(new_OrgSpongycastleCryptoEnginesRSABlindedEngine_init(), fallback);
    [encoding init__WithBoolean:false withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsParametersWithRandom_initWithOrgSpongycastleCryptoCipherParameters_withJavaSecuritySecureRandom_(rsaServerPrivateKey, [context getSecureRandom])];
    M = [encoding processBlockWithByteArray:encryptedPreMasterSecret withInt:0 withInt:((IOSByteArray *) nil_chk(encryptedPreMasterSecret))->size_];
  }
  @catch (JavaLangException *e) {
  }
  if (versionNumberCheckDisabled && [((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(clientVersion)) isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:JreLoadStatic(OrgSpongycastleCryptoTlsProtocolVersion, TLSv10)]) {
  }
  else {
    jint correct = ([((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(clientVersion)) getMajorVersion] ^ (IOSByteArray_Get(nil_chk(M), 0) & (jint) 0xff)) | ([clientVersion getMinorVersion] ^ (IOSByteArray_Get(M, 1) & (jint) 0xff));
    correct |= JreRShift32(correct, 1);
    correct |= JreRShift32(correct, 2);
    correct |= JreRShift32(correct, 4);
    jint mask = ~((correct & 1) - 1);
    for (jint i = 0; i < 48; i++) {
      *IOSByteArray_GetRef(M, i) = (jbyte) ((IOSByteArray_Get(M, i) & (~mask)) | (IOSByteArray_Get(fallback, i) & mask));
    }
  }
  return M;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsTlsRSAUtils)
