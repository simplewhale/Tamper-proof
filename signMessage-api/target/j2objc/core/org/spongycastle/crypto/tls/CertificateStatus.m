//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/CertificateStatus.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "org/spongycastle/asn1/ASN1Encoding.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/ocsp/OCSPResponse.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/CertificateStatus.h"
#include "org/spongycastle/crypto/tls/CertificateStatusType.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

@implementation OrgSpongycastleCryptoTlsCertificateStatus

- (instancetype)initWithShort:(jshort)statusType
                       withId:(id)response {
  OrgSpongycastleCryptoTlsCertificateStatus_initWithShort_withId_(self, statusType, response);
  return self;
}

- (jshort)getStatusType {
  return statusType_;
}

- (id)getResponse {
  return response_;
}

- (OrgSpongycastleAsn1OcspOCSPResponse *)getOCSPResponse {
  if (!OrgSpongycastleCryptoTlsCertificateStatus_isCorrectTypeWithShort_withId_(OrgSpongycastleCryptoTlsCertificateStatusType_ocsp, response_)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"'response' is not an OCSPResponse");
  }
  return (OrgSpongycastleAsn1OcspOCSPResponse *) cast_chk(response_, [OrgSpongycastleAsn1OcspOCSPResponse class]);
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(statusType_, output);
  {
    IOSByteArray *derEncoding;
    switch (statusType_) {
      case OrgSpongycastleCryptoTlsCertificateStatusType_ocsp:
      derEncoding = [((OrgSpongycastleAsn1OcspOCSPResponse *) nil_chk(((OrgSpongycastleAsn1OcspOCSPResponse *) cast_chk(response_, [OrgSpongycastleAsn1OcspOCSPResponse class])))) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
      OrgSpongycastleCryptoTlsTlsUtils_writeOpaque24WithByteArray_withJavaIoOutputStream_(derEncoding, output);
      break;
      default:
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
    }
  }
}

+ (OrgSpongycastleCryptoTlsCertificateStatus *)parseWithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsCertificateStatus_parseWithJavaIoInputStream_(input);
}

+ (jboolean)isCorrectTypeWithShort:(jshort)statusType
                            withId:(id)response {
  return OrgSpongycastleCryptoTlsCertificateStatus_isCorrectTypeWithShort_withId_(statusType, response);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1OcspOCSPResponse;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsCertificateStatus;", 0x9, 4, 5, 3, -1, -1, -1 },
    { NULL, "Z", 0xc, 6, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithShort:withId:);
  methods[1].selector = @selector(getStatusType);
  methods[2].selector = @selector(getResponse);
  methods[3].selector = @selector(getOCSPResponse);
  methods[4].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[5].selector = @selector(parseWithJavaIoInputStream:);
  methods[6].selector = @selector(isCorrectTypeWithShort:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "statusType_", "S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "response_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "SLNSObject;", "encode", "LJavaIoOutputStream;", "LJavaIoIOException;", "parse", "LJavaIoInputStream;", "isCorrectType" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsCertificateStatus = { "CertificateStatus", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsCertificateStatus;
}

@end

void OrgSpongycastleCryptoTlsCertificateStatus_initWithShort_withId_(OrgSpongycastleCryptoTlsCertificateStatus *self, jshort statusType, id response) {
  NSObject_init(self);
  if (!OrgSpongycastleCryptoTlsCertificateStatus_isCorrectTypeWithShort_withId_(statusType, response)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'response' is not an instance of the correct type");
  }
  self->statusType_ = statusType;
  self->response_ = response;
}

OrgSpongycastleCryptoTlsCertificateStatus *new_OrgSpongycastleCryptoTlsCertificateStatus_initWithShort_withId_(jshort statusType, id response) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsCertificateStatus, initWithShort_withId_, statusType, response)
}

OrgSpongycastleCryptoTlsCertificateStatus *create_OrgSpongycastleCryptoTlsCertificateStatus_initWithShort_withId_(jshort statusType, id response) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsCertificateStatus, initWithShort_withId_, statusType, response)
}

OrgSpongycastleCryptoTlsCertificateStatus *OrgSpongycastleCryptoTlsCertificateStatus_parseWithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsCertificateStatus_initialize();
  jshort status_type = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
  id response;
  switch (status_type) {
    case OrgSpongycastleCryptoTlsCertificateStatusType_ocsp:
    {
      IOSByteArray *derEncoding = OrgSpongycastleCryptoTlsTlsUtils_readOpaque24WithJavaIoInputStream_(input);
      response = OrgSpongycastleAsn1OcspOCSPResponse_getInstanceWithId_(OrgSpongycastleCryptoTlsTlsUtils_readDERObjectWithByteArray_(derEncoding));
      break;
    }
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  return new_OrgSpongycastleCryptoTlsCertificateStatus_initWithShort_withId_(status_type, response);
}

jboolean OrgSpongycastleCryptoTlsCertificateStatus_isCorrectTypeWithShort_withId_(jshort statusType, id response) {
  OrgSpongycastleCryptoTlsCertificateStatus_initialize();
  switch (statusType) {
    case OrgSpongycastleCryptoTlsCertificateStatusType_ocsp:
    return [response isKindOfClass:[OrgSpongycastleAsn1OcspOCSPResponse class]];
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'statusType' is an unsupported CertificateStatusType");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsCertificateStatus)
