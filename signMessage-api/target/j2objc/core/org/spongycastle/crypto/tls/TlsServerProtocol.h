//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsServerProtocol.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsServerProtocol")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsTlsServerProtocol
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsServerProtocol 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsServerProtocol 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsTlsServerProtocol

#if !defined (OrgSpongycastleCryptoTlsTlsServerProtocol_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsServerProtocol || defined(INCLUDE_OrgSpongycastleCryptoTlsTlsServerProtocol))
#define OrgSpongycastleCryptoTlsTlsServerProtocol_

#define RESTRICT_OrgSpongycastleCryptoTlsTlsProtocol 1
#define INCLUDE_OrgSpongycastleCryptoTlsTlsProtocol 1
#include "org/spongycastle/crypto/tls/TlsProtocol.h"

@class IOSByteArray;
@class JavaIoByteArrayInputStream;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaSecuritySecureRandom;
@class OrgSpongycastleCryptoTlsAbstractTlsContext;
@class OrgSpongycastleCryptoTlsCertificate;
@class OrgSpongycastleCryptoTlsCertificateRequest;
@class OrgSpongycastleCryptoTlsCertificateStatus;
@class OrgSpongycastleCryptoTlsNewSessionTicket;
@class OrgSpongycastleCryptoTlsTlsServerContextImpl;
@protocol OrgSpongycastleCryptoTlsTlsContext;
@protocol OrgSpongycastleCryptoTlsTlsCredentials;
@protocol OrgSpongycastleCryptoTlsTlsHandshakeHash;
@protocol OrgSpongycastleCryptoTlsTlsKeyExchange;
@protocol OrgSpongycastleCryptoTlsTlsPeer;
@protocol OrgSpongycastleCryptoTlsTlsServer;

@interface OrgSpongycastleCryptoTlsTlsServerProtocol : OrgSpongycastleCryptoTlsTlsProtocol {
 @public
  id<OrgSpongycastleCryptoTlsTlsServer> tlsServer_;
  OrgSpongycastleCryptoTlsTlsServerContextImpl *tlsServerContext_;
  id<OrgSpongycastleCryptoTlsTlsKeyExchange> keyExchange_;
  id<OrgSpongycastleCryptoTlsTlsCredentials> serverCredentials_;
  OrgSpongycastleCryptoTlsCertificateRequest *certificateRequest_;
  jshort clientCertificateType_;
  id<OrgSpongycastleCryptoTlsTlsHandshakeHash> prepareFinishHash_;
}

#pragma mark Public

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)input
                   withJavaIoOutputStream:(JavaIoOutputStream *)output
             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom;

- (void)acceptWithOrgSpongycastleCryptoTlsTlsServer:(id<OrgSpongycastleCryptoTlsTlsServer>)tlsServer;

#pragma mark Protected

- (void)cleanupHandshake;

- (jboolean)expectCertificateVerifyMessage;

- (id<OrgSpongycastleCryptoTlsTlsContext>)getContext;

- (id<OrgSpongycastleCryptoTlsTlsPeer>)getPeer;

- (void)handleAlertWarningMessageWithShort:(jshort)alertDescription;

- (void)handleHandshakeMessageWithShort:(jshort)type
         withJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)notifyClientCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)clientCertificate;

- (void)receiveCertificateMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)receiveCertificateVerifyMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)receiveClientHelloMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)receiveClientKeyExchangeMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf;

- (void)sendCertificateRequestMessageWithOrgSpongycastleCryptoTlsCertificateRequest:(OrgSpongycastleCryptoTlsCertificateRequest *)certificateRequest;

- (void)sendCertificateStatusMessageWithOrgSpongycastleCryptoTlsCertificateStatus:(OrgSpongycastleCryptoTlsCertificateStatus *)certificateStatus;

- (void)sendNewSessionTicketMessageWithOrgSpongycastleCryptoTlsNewSessionTicket:(OrgSpongycastleCryptoTlsNewSessionTicket *)newSessionTicket;

- (void)sendServerHelloDoneMessage;

- (void)sendServerHelloMessage;

- (void)sendServerKeyExchangeMessageWithByteArray:(IOSByteArray *)serverKeyExchange;

#pragma mark Package-Private

- (OrgSpongycastleCryptoTlsAbstractTlsContext *)getContextAdmin;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsTlsServerProtocol)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsServerProtocol, tlsServer_, id<OrgSpongycastleCryptoTlsTlsServer>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsServerProtocol, tlsServerContext_, OrgSpongycastleCryptoTlsTlsServerContextImpl *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsServerProtocol, keyExchange_, id<OrgSpongycastleCryptoTlsTlsKeyExchange>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsServerProtocol, serverCredentials_, id<OrgSpongycastleCryptoTlsTlsCredentials>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsServerProtocol, certificateRequest_, OrgSpongycastleCryptoTlsCertificateRequest *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsServerProtocol, prepareFinishHash_, id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsServerProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(OrgSpongycastleCryptoTlsTlsServerProtocol *self, JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsServerProtocol *new_OrgSpongycastleCryptoTlsTlsServerProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsServerProtocol *create_OrgSpongycastleCryptoTlsTlsServerProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsServerProtocol_initWithJavaSecuritySecureRandom_(OrgSpongycastleCryptoTlsTlsServerProtocol *self, JavaSecuritySecureRandom *secureRandom);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsServerProtocol *new_OrgSpongycastleCryptoTlsTlsServerProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsServerProtocol *create_OrgSpongycastleCryptoTlsTlsServerProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsTlsServerProtocol)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsServerProtocol")
