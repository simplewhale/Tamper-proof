//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/ExtensionType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsExtensionType")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsExtensionType
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsExtensionType 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsExtensionType 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsExtensionType

#if !defined (OrgSpongycastleCryptoTlsExtensionType_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsExtensionType || defined(INCLUDE_OrgSpongycastleCryptoTlsExtensionType))
#define OrgSpongycastleCryptoTlsExtensionType_

@interface OrgSpongycastleCryptoTlsExtensionType : NSObject

#pragma mark Public

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsExtensionType)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_server_name(void);
#define OrgSpongycastleCryptoTlsExtensionType_server_name 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, server_name, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_max_fragment_length(void);
#define OrgSpongycastleCryptoTlsExtensionType_max_fragment_length 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, max_fragment_length, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_client_certificate_url(void);
#define OrgSpongycastleCryptoTlsExtensionType_client_certificate_url 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, client_certificate_url, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_trusted_ca_keys(void);
#define OrgSpongycastleCryptoTlsExtensionType_trusted_ca_keys 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, trusted_ca_keys, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_truncated_hmac(void);
#define OrgSpongycastleCryptoTlsExtensionType_truncated_hmac 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, truncated_hmac, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_status_request(void);
#define OrgSpongycastleCryptoTlsExtensionType_status_request 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, status_request, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_user_mapping(void);
#define OrgSpongycastleCryptoTlsExtensionType_user_mapping 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, user_mapping, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_client_authz(void);
#define OrgSpongycastleCryptoTlsExtensionType_client_authz 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, client_authz, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_server_authz(void);
#define OrgSpongycastleCryptoTlsExtensionType_server_authz 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, server_authz, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_cert_type(void);
#define OrgSpongycastleCryptoTlsExtensionType_cert_type 9
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, cert_type, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_supported_groups(void);
#define OrgSpongycastleCryptoTlsExtensionType_supported_groups 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, supported_groups, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_elliptic_curves(void);
#define OrgSpongycastleCryptoTlsExtensionType_elliptic_curves 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, elliptic_curves, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_ec_point_formats(void);
#define OrgSpongycastleCryptoTlsExtensionType_ec_point_formats 11
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, ec_point_formats, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_srp(void);
#define OrgSpongycastleCryptoTlsExtensionType_srp 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, srp, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_signature_algorithms(void);
#define OrgSpongycastleCryptoTlsExtensionType_signature_algorithms 13
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, signature_algorithms, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_use_srtp(void);
#define OrgSpongycastleCryptoTlsExtensionType_use_srtp 14
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, use_srtp, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_heartbeat(void);
#define OrgSpongycastleCryptoTlsExtensionType_heartbeat 15
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, heartbeat, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_application_layer_protocol_negotiation(void);
#define OrgSpongycastleCryptoTlsExtensionType_application_layer_protocol_negotiation 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, application_layer_protocol_negotiation, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_status_request_v2(void);
#define OrgSpongycastleCryptoTlsExtensionType_status_request_v2 17
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, status_request_v2, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_signed_certificate_timestamp(void);
#define OrgSpongycastleCryptoTlsExtensionType_signed_certificate_timestamp 18
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, signed_certificate_timestamp, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_client_certificate_type(void);
#define OrgSpongycastleCryptoTlsExtensionType_client_certificate_type 19
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, client_certificate_type, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_server_certificate_type(void);
#define OrgSpongycastleCryptoTlsExtensionType_server_certificate_type 20
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, server_certificate_type, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_padding(void);
#define OrgSpongycastleCryptoTlsExtensionType_padding 21
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, padding, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_encrypt_then_mac(void);
#define OrgSpongycastleCryptoTlsExtensionType_encrypt_then_mac 22
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, encrypt_then_mac, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_extended_master_secret(void);
#define OrgSpongycastleCryptoTlsExtensionType_extended_master_secret 23
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, extended_master_secret, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_DRAFT_token_binding(void);
#define OrgSpongycastleCryptoTlsExtensionType_DRAFT_token_binding 24
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, DRAFT_token_binding, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_cached_info(void);
#define OrgSpongycastleCryptoTlsExtensionType_cached_info 25
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, cached_info, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_session_ticket(void);
#define OrgSpongycastleCryptoTlsExtensionType_session_ticket 35
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, session_ticket, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_negotiated_ff_dhe_groups(void);
#define OrgSpongycastleCryptoTlsExtensionType_negotiated_ff_dhe_groups 101
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, negotiated_ff_dhe_groups, jint)

inline jint OrgSpongycastleCryptoTlsExtensionType_get_renegotiation_info(void);
#define OrgSpongycastleCryptoTlsExtensionType_renegotiation_info 65281
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsExtensionType, renegotiation_info, jint)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsExtensionType_init(OrgSpongycastleCryptoTlsExtensionType *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsExtensionType *new_OrgSpongycastleCryptoTlsExtensionType_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsExtensionType *create_OrgSpongycastleCryptoTlsExtensionType_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsExtensionType)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsExtensionType")
