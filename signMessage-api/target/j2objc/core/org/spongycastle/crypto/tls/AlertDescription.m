//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/AlertDescription.java
//

#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"

@implementation OrgSpongycastleCryptoTlsAlertDescription

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsAlertDescription_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)getNameWithShort:(jshort)alertDescription {
  return OrgSpongycastleCryptoTlsAlertDescription_getNameWithShort_(alertDescription);
}

+ (NSString *)getTextWithShort:(jshort)alertDescription {
  return OrgSpongycastleCryptoTlsAlertDescription_getTextWithShort_(alertDescription);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getNameWithShort:);
  methods[2].selector = @selector(getTextWithShort:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "close_notify", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_close_notify, 0x19, -1, -1, -1, -1 },
    { "unexpected_message", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_unexpected_message, 0x19, -1, -1, -1, -1 },
    { "bad_record_mac", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_bad_record_mac, 0x19, -1, -1, -1, -1 },
    { "decryption_failed", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_decryption_failed, 0x19, -1, -1, -1, -1 },
    { "record_overflow", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_record_overflow, 0x19, -1, -1, -1, -1 },
    { "decompression_failure", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_decompression_failure, 0x19, -1, -1, -1, -1 },
    { "handshake_failure", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_handshake_failure, 0x19, -1, -1, -1, -1 },
    { "no_certificate", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_no_certificate, 0x19, -1, -1, -1, -1 },
    { "bad_certificate", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_bad_certificate, 0x19, -1, -1, -1, -1 },
    { "unsupported_certificate", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_unsupported_certificate, 0x19, -1, -1, -1, -1 },
    { "certificate_revoked", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_certificate_revoked, 0x19, -1, -1, -1, -1 },
    { "certificate_expired", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_certificate_expired, 0x19, -1, -1, -1, -1 },
    { "certificate_unknown", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_certificate_unknown, 0x19, -1, -1, -1, -1 },
    { "illegal_parameter", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter, 0x19, -1, -1, -1, -1 },
    { "unknown_ca", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_unknown_ca, 0x19, -1, -1, -1, -1 },
    { "access_denied", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_access_denied, 0x19, -1, -1, -1, -1 },
    { "decode_error", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_decode_error, 0x19, -1, -1, -1, -1 },
    { "decrypt_error", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_decrypt_error, 0x19, -1, -1, -1, -1 },
    { "export_restriction", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_export_restriction, 0x19, -1, -1, -1, -1 },
    { "protocol_version", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_protocol_version, 0x19, -1, -1, -1, -1 },
    { "insufficient_security", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_insufficient_security, 0x19, -1, -1, -1, -1 },
    { "internal_error", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_internal_error, 0x19, -1, -1, -1, -1 },
    { "user_canceled", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_user_canceled, 0x19, -1, -1, -1, -1 },
    { "no_renegotiation", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_no_renegotiation, 0x19, -1, -1, -1, -1 },
    { "unsupported_extension", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_unsupported_extension, 0x19, -1, -1, -1, -1 },
    { "certificate_unobtainable", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_certificate_unobtainable, 0x19, -1, -1, -1, -1 },
    { "unrecognized_name", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_unrecognized_name, 0x19, -1, -1, -1, -1 },
    { "bad_certificate_status_response", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_bad_certificate_status_response, 0x19, -1, -1, -1, -1 },
    { "bad_certificate_hash_value", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_bad_certificate_hash_value, 0x19, -1, -1, -1, -1 },
    { "unknown_psk_identity", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_unknown_psk_identity, 0x19, -1, -1, -1, -1 },
    { "inappropriate_fallback", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsAlertDescription_inappropriate_fallback, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getName", "S", "getText" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsAlertDescription = { "AlertDescription", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 3, 31, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsAlertDescription;
}

@end

void OrgSpongycastleCryptoTlsAlertDescription_init(OrgSpongycastleCryptoTlsAlertDescription *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoTlsAlertDescription *new_OrgSpongycastleCryptoTlsAlertDescription_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsAlertDescription, init)
}

OrgSpongycastleCryptoTlsAlertDescription *create_OrgSpongycastleCryptoTlsAlertDescription_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsAlertDescription, init)
}

NSString *OrgSpongycastleCryptoTlsAlertDescription_getNameWithShort_(jshort alertDescription) {
  OrgSpongycastleCryptoTlsAlertDescription_initialize();
  switch (alertDescription) {
    case OrgSpongycastleCryptoTlsAlertDescription_close_notify:
    return @"close_notify";
    case OrgSpongycastleCryptoTlsAlertDescription_unexpected_message:
    return @"unexpected_message";
    case OrgSpongycastleCryptoTlsAlertDescription_bad_record_mac:
    return @"bad_record_mac";
    case OrgSpongycastleCryptoTlsAlertDescription_decryption_failed:
    return @"decryption_failed";
    case OrgSpongycastleCryptoTlsAlertDescription_record_overflow:
    return @"record_overflow";
    case OrgSpongycastleCryptoTlsAlertDescription_decompression_failure:
    return @"decompression_failure";
    case OrgSpongycastleCryptoTlsAlertDescription_handshake_failure:
    return @"handshake_failure";
    case OrgSpongycastleCryptoTlsAlertDescription_no_certificate:
    return @"no_certificate";
    case OrgSpongycastleCryptoTlsAlertDescription_bad_certificate:
    return @"bad_certificate";
    case OrgSpongycastleCryptoTlsAlertDescription_unsupported_certificate:
    return @"unsupported_certificate";
    case OrgSpongycastleCryptoTlsAlertDescription_certificate_revoked:
    return @"certificate_revoked";
    case OrgSpongycastleCryptoTlsAlertDescription_certificate_expired:
    return @"certificate_expired";
    case OrgSpongycastleCryptoTlsAlertDescription_certificate_unknown:
    return @"certificate_unknown";
    case OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter:
    return @"illegal_parameter";
    case OrgSpongycastleCryptoTlsAlertDescription_unknown_ca:
    return @"unknown_ca";
    case OrgSpongycastleCryptoTlsAlertDescription_access_denied:
    return @"access_denied";
    case OrgSpongycastleCryptoTlsAlertDescription_decode_error:
    return @"decode_error";
    case OrgSpongycastleCryptoTlsAlertDescription_decrypt_error:
    return @"decrypt_error";
    case OrgSpongycastleCryptoTlsAlertDescription_export_restriction:
    return @"export_restriction";
    case OrgSpongycastleCryptoTlsAlertDescription_protocol_version:
    return @"protocol_version";
    case OrgSpongycastleCryptoTlsAlertDescription_insufficient_security:
    return @"insufficient_security";
    case OrgSpongycastleCryptoTlsAlertDescription_internal_error:
    return @"internal_error";
    case OrgSpongycastleCryptoTlsAlertDescription_user_canceled:
    return @"user_canceled";
    case OrgSpongycastleCryptoTlsAlertDescription_no_renegotiation:
    return @"no_renegotiation";
    case OrgSpongycastleCryptoTlsAlertDescription_unsupported_extension:
    return @"unsupported_extension";
    case OrgSpongycastleCryptoTlsAlertDescription_certificate_unobtainable:
    return @"certificate_unobtainable";
    case OrgSpongycastleCryptoTlsAlertDescription_unrecognized_name:
    return @"unrecognized_name";
    case OrgSpongycastleCryptoTlsAlertDescription_bad_certificate_status_response:
    return @"bad_certificate_status_response";
    case OrgSpongycastleCryptoTlsAlertDescription_bad_certificate_hash_value:
    return @"bad_certificate_hash_value";
    case OrgSpongycastleCryptoTlsAlertDescription_unknown_psk_identity:
    return @"unknown_psk_identity";
    case OrgSpongycastleCryptoTlsAlertDescription_inappropriate_fallback:
    return @"inappropriate_fallback";
    default:
    return @"UNKNOWN";
  }
}

NSString *OrgSpongycastleCryptoTlsAlertDescription_getTextWithShort_(jshort alertDescription) {
  OrgSpongycastleCryptoTlsAlertDescription_initialize();
  return JreStrcat("$CSC", OrgSpongycastleCryptoTlsAlertDescription_getNameWithShort_(alertDescription), '(', alertDescription, ')');
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsAlertDescription)
