//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/Chacha20Poly1305.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/Mac.h"
#include "org/spongycastle/crypto/StreamCipher.h"
#include "org/spongycastle/crypto/engines/ChaCha7539Engine.h"
#include "org/spongycastle/crypto/macs/Poly1305.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/Chacha20Poly1305.h"
#include "org/spongycastle/crypto/tls/ProtocolVersion.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/Pack.h"

inline IOSByteArray *OrgSpongycastleCryptoTlsChacha20Poly1305_get_ZEROES(void);
static IOSByteArray *OrgSpongycastleCryptoTlsChacha20Poly1305_ZEROES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsChacha20Poly1305, ZEROES, IOSByteArray *)

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoTlsChacha20Poly1305)

@implementation OrgSpongycastleCryptoTlsChacha20Poly1305

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context {
  OrgSpongycastleCryptoTlsChacha20Poly1305_initWithOrgSpongycastleCryptoTlsTlsContext_(self, context);
  return self;
}

- (jint)getPlaintextLimitWithInt:(jint)ciphertextLimit {
  return ciphertextLimit - 16;
}

- (IOSByteArray *)encodePlaintextWithLong:(jlong)seqNo
                                withShort:(jshort)type
                            withByteArray:(IOSByteArray *)plaintext
                                  withInt:(jint)offset
                                  withInt:(jint)len {
  OrgSpongycastleCryptoParamsKeyParameter *macKey = [self initRecordWithOrgSpongycastleCryptoStreamCipher:encryptCipher_ withBoolean:true withLong:seqNo withByteArray:encryptIV_];
  IOSByteArray *output = [IOSByteArray newArrayWithLength:len + 16];
  [((OrgSpongycastleCryptoEnginesChaCha7539Engine *) nil_chk(encryptCipher_)) processBytesWithByteArray:plaintext withInt:offset withInt:len withByteArray:output withInt:0];
  IOSByteArray *additionalData = [self getAdditionalDataWithLong:seqNo withShort:type withInt:len];
  IOSByteArray *mac = [self calculateRecordMACWithOrgSpongycastleCryptoParamsKeyParameter:macKey withByteArray:additionalData withByteArray:output withInt:0 withInt:len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mac, 0, output, len, ((IOSByteArray *) nil_chk(mac))->size_);
  return output;
}

- (IOSByteArray *)decodeCiphertextWithLong:(jlong)seqNo
                                 withShort:(jshort)type
                             withByteArray:(IOSByteArray *)ciphertext
                                   withInt:(jint)offset
                                   withInt:(jint)len {
  if ([self getPlaintextLimitWithInt:len] < 0) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  OrgSpongycastleCryptoParamsKeyParameter *macKey = [self initRecordWithOrgSpongycastleCryptoStreamCipher:decryptCipher_ withBoolean:false withLong:seqNo withByteArray:decryptIV_];
  jint plaintextLength = len - 16;
  IOSByteArray *additionalData = [self getAdditionalDataWithLong:seqNo withShort:type withInt:plaintextLength];
  IOSByteArray *calculatedMAC = [self calculateRecordMACWithOrgSpongycastleCryptoParamsKeyParameter:macKey withByteArray:additionalData withByteArray:ciphertext withInt:offset withInt:plaintextLength];
  IOSByteArray *receivedMAC = OrgSpongycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(ciphertext, offset + plaintextLength, offset + len);
  if (!OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(calculatedMAC, receivedMAC)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_bad_record_mac);
  }
  IOSByteArray *output = [IOSByteArray newArrayWithLength:plaintextLength];
  [((OrgSpongycastleCryptoEnginesChaCha7539Engine *) nil_chk(decryptCipher_)) processBytesWithByteArray:ciphertext withInt:offset withInt:plaintextLength withByteArray:output withInt:0];
  return output;
}

- (OrgSpongycastleCryptoParamsKeyParameter *)initRecordWithOrgSpongycastleCryptoStreamCipher:(id<OrgSpongycastleCryptoStreamCipher>)cipher
                                                                                 withBoolean:(jboolean)forEncryption
                                                                                    withLong:(jlong)seqNo
                                                                               withByteArray:(IOSByteArray *)iv {
  IOSByteArray *nonce = [self calculateNonceWithLong:seqNo withByteArray:iv];
  [((id<OrgSpongycastleCryptoStreamCipher>) nil_chk(cipher)) init__WithBoolean:forEncryption withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsParametersWithIV_initWithOrgSpongycastleCryptoCipherParameters_withByteArray_(nil, nonce)];
  return [self generateRecordMACKeyWithOrgSpongycastleCryptoStreamCipher:cipher];
}

- (IOSByteArray *)calculateNonceWithLong:(jlong)seqNo
                           withByteArray:(IOSByteArray *)iv {
  IOSByteArray *nonce = [IOSByteArray newArrayWithLength:12];
  OrgSpongycastleCryptoTlsTlsUtils_writeUint64WithLong_withByteArray_withInt_(seqNo, nonce, 4);
  for (jint i = 0; i < 12; ++i) {
    *IOSByteArray_GetRef(nonce, i) ^= IOSByteArray_Get(nil_chk(iv), i);
  }
  return nonce;
}

- (OrgSpongycastleCryptoParamsKeyParameter *)generateRecordMACKeyWithOrgSpongycastleCryptoStreamCipher:(id<OrgSpongycastleCryptoStreamCipher>)cipher {
  IOSByteArray *firstBlock = [IOSByteArray newArrayWithLength:64];
  [((id<OrgSpongycastleCryptoStreamCipher>) nil_chk(cipher)) processBytesWithByteArray:firstBlock withInt:0 withInt:firstBlock->size_ withByteArray:firstBlock withInt:0];
  OrgSpongycastleCryptoParamsKeyParameter *macKey = new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(firstBlock, 0, 32);
  OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(firstBlock, (jbyte) 0);
  return macKey;
}

- (IOSByteArray *)calculateRecordMACWithOrgSpongycastleCryptoParamsKeyParameter:(OrgSpongycastleCryptoParamsKeyParameter *)macKey
                                                                  withByteArray:(IOSByteArray *)additionalData
                                                                  withByteArray:(IOSByteArray *)buf
                                                                        withInt:(jint)off
                                                                        withInt:(jint)len {
  id<OrgSpongycastleCryptoMac> mac = new_OrgSpongycastleCryptoMacsPoly1305_init();
  [mac init__WithOrgSpongycastleCryptoCipherParameters:macKey];
  [self updateRecordMACTextWithOrgSpongycastleCryptoMac:mac withByteArray:additionalData withInt:0 withInt:((IOSByteArray *) nil_chk(additionalData))->size_];
  [self updateRecordMACTextWithOrgSpongycastleCryptoMac:mac withByteArray:buf withInt:off withInt:len];
  [self updateRecordMACLengthWithOrgSpongycastleCryptoMac:mac withInt:additionalData->size_];
  [self updateRecordMACLengthWithOrgSpongycastleCryptoMac:mac withInt:len];
  IOSByteArray *output = [IOSByteArray newArrayWithLength:[mac getMacSize]];
  [mac doFinalWithByteArray:output withInt:0];
  return output;
}

- (void)updateRecordMACLengthWithOrgSpongycastleCryptoMac:(id<OrgSpongycastleCryptoMac>)mac
                                                  withInt:(jint)len {
  IOSByteArray *longLen = OrgSpongycastleUtilPack_longToLittleEndianWithLong_(len & (jlong) 0xFFFFFFFFLL);
  [((id<OrgSpongycastleCryptoMac>) nil_chk(mac)) updateWithByteArray:longLen withInt:0 withInt:((IOSByteArray *) nil_chk(longLen))->size_];
}

- (void)updateRecordMACTextWithOrgSpongycastleCryptoMac:(id<OrgSpongycastleCryptoMac>)mac
                                          withByteArray:(IOSByteArray *)buf
                                                withInt:(jint)off
                                                withInt:(jint)len {
  [((id<OrgSpongycastleCryptoMac>) nil_chk(mac)) updateWithByteArray:buf withInt:off withInt:len];
  jint partial = len % 16;
  if (partial != 0) {
    [mac updateWithByteArray:OrgSpongycastleCryptoTlsChacha20Poly1305_ZEROES withInt:0 withInt:16 - partial];
  }
}

- (IOSByteArray *)getAdditionalDataWithLong:(jlong)seqNo
                                  withShort:(jshort)type
                                    withInt:(jint)len {
  IOSByteArray *additional_data = [IOSByteArray newArrayWithLength:13];
  OrgSpongycastleCryptoTlsTlsUtils_writeUint64WithLong_withByteArray_withInt_(seqNo, additional_data, 0);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withByteArray_withInt_(type, additional_data, 8);
  OrgSpongycastleCryptoTlsTlsUtils_writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion_withByteArray_withInt_([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getServerVersion], additional_data, 9);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withByteArray_withInt_(len, additional_data, 11);
  return additional_data;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 6, 5, 1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsKeyParameter;", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsKeyParameter;", 0x4, 11, 12, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 17, 18, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, 19, 20, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsContext:);
  methods[1].selector = @selector(getPlaintextLimitWithInt:);
  methods[2].selector = @selector(encodePlaintextWithLong:withShort:withByteArray:withInt:withInt:);
  methods[3].selector = @selector(decodeCiphertextWithLong:withShort:withByteArray:withInt:withInt:);
  methods[4].selector = @selector(initRecordWithOrgSpongycastleCryptoStreamCipher:withBoolean:withLong:withByteArray:);
  methods[5].selector = @selector(calculateNonceWithLong:withByteArray:);
  methods[6].selector = @selector(generateRecordMACKeyWithOrgSpongycastleCryptoStreamCipher:);
  methods[7].selector = @selector(calculateRecordMACWithOrgSpongycastleCryptoParamsKeyParameter:withByteArray:withByteArray:withInt:withInt:);
  methods[8].selector = @selector(updateRecordMACLengthWithOrgSpongycastleCryptoMac:withInt:);
  methods[9].selector = @selector(updateRecordMACTextWithOrgSpongycastleCryptoMac:withByteArray:withInt:withInt:);
  methods[10].selector = @selector(getAdditionalDataWithLong:withShort:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZEROES", "[B", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "context_", "LOrgSpongycastleCryptoTlsTlsContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "encryptCipher_", "LOrgSpongycastleCryptoEnginesChaCha7539Engine;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "decryptCipher_", "LOrgSpongycastleCryptoEnginesChaCha7539Engine;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "encryptIV_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "decryptIV_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsTlsContext;", "LJavaIoIOException;", "getPlaintextLimit", "I", "encodePlaintext", "JS[BII", "decodeCiphertext", "initRecord", "LOrgSpongycastleCryptoStreamCipher;ZJ[B", "calculateNonce", "J[B", "generateRecordMACKey", "LOrgSpongycastleCryptoStreamCipher;", "calculateRecordMAC", "LOrgSpongycastleCryptoParamsKeyParameter;[B[BII", "updateRecordMACLength", "LOrgSpongycastleCryptoMac;I", "updateRecordMACText", "LOrgSpongycastleCryptoMac;[BII", "getAdditionalData", "JSI", &OrgSpongycastleCryptoTlsChacha20Poly1305_ZEROES };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsChacha20Poly1305 = { "Chacha20Poly1305", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 11, 6, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsChacha20Poly1305;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoTlsChacha20Poly1305 class]) {
    OrgSpongycastleCryptoTlsChacha20Poly1305_ZEROES = [IOSByteArray newArrayWithLength:15];
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoTlsChacha20Poly1305)
  }
}

@end

void OrgSpongycastleCryptoTlsChacha20Poly1305_initWithOrgSpongycastleCryptoTlsTlsContext_(OrgSpongycastleCryptoTlsChacha20Poly1305 *self, id<OrgSpongycastleCryptoTlsTlsContext> context) {
  NSObject_init(self);
  if (!OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_(context)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  self->context_ = context;
  jint cipherKeySize = 32;
  jint fixed_iv_length = 12;
  jint key_block_size = (2 * cipherKeySize) + (2 * fixed_iv_length);
  IOSByteArray *key_block = OrgSpongycastleCryptoTlsTlsUtils_calculateKeyBlockWithOrgSpongycastleCryptoTlsTlsContext_withInt_(context, key_block_size);
  jint offset = 0;
  OrgSpongycastleCryptoParamsKeyParameter *client_write_key = new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(key_block, offset, cipherKeySize);
  offset += cipherKeySize;
  OrgSpongycastleCryptoParamsKeyParameter *server_write_key = new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_withInt_withInt_(key_block, offset, cipherKeySize);
  offset += cipherKeySize;
  IOSByteArray *client_write_IV = OrgSpongycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(key_block, offset, offset + fixed_iv_length);
  offset += fixed_iv_length;
  IOSByteArray *server_write_IV = OrgSpongycastleUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(key_block, offset, offset + fixed_iv_length);
  offset += fixed_iv_length;
  if (offset != key_block_size) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  self->encryptCipher_ = new_OrgSpongycastleCryptoEnginesChaCha7539Engine_init();
  self->decryptCipher_ = new_OrgSpongycastleCryptoEnginesChaCha7539Engine_init();
  OrgSpongycastleCryptoParamsKeyParameter *encryptKey;
  OrgSpongycastleCryptoParamsKeyParameter *decryptKey;
  if ([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context)) isServer]) {
    encryptKey = server_write_key;
    decryptKey = client_write_key;
    self->encryptIV_ = server_write_IV;
    self->decryptIV_ = client_write_IV;
  }
  else {
    encryptKey = client_write_key;
    decryptKey = server_write_key;
    self->encryptIV_ = client_write_IV;
    self->decryptIV_ = server_write_IV;
  }
  [((OrgSpongycastleCryptoEnginesChaCha7539Engine *) nil_chk(self->encryptCipher_)) init__WithBoolean:true withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsParametersWithIV_initWithOrgSpongycastleCryptoCipherParameters_withByteArray_(encryptKey, self->encryptIV_)];
  [((OrgSpongycastleCryptoEnginesChaCha7539Engine *) nil_chk(self->decryptCipher_)) init__WithBoolean:false withOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsParametersWithIV_initWithOrgSpongycastleCryptoCipherParameters_withByteArray_(decryptKey, self->decryptIV_)];
}

OrgSpongycastleCryptoTlsChacha20Poly1305 *new_OrgSpongycastleCryptoTlsChacha20Poly1305_initWithOrgSpongycastleCryptoTlsTlsContext_(id<OrgSpongycastleCryptoTlsTlsContext> context) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsChacha20Poly1305, initWithOrgSpongycastleCryptoTlsTlsContext_, context)
}

OrgSpongycastleCryptoTlsChacha20Poly1305 *create_OrgSpongycastleCryptoTlsChacha20Poly1305_initWithOrgSpongycastleCryptoTlsTlsContext_(id<OrgSpongycastleCryptoTlsTlsContext> context) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsChacha20Poly1305, initWithOrgSpongycastleCryptoTlsTlsContext_, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsChacha20Poly1305)
