//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/HandshakeType.java
//

#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/tls/HandshakeType.h"

@implementation OrgSpongycastleCryptoTlsHandshakeType

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsHandshakeType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hello_request", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHandshakeType_hello_request, 0x19, -1, -1, -1, -1 },
    { "client_hello", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHandshakeType_client_hello, 0x19, -1, -1, -1, -1 },
    { "server_hello", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHandshakeType_server_hello, 0x19, -1, -1, -1, -1 },
    { "certificate", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHandshakeType_certificate, 0x19, -1, -1, -1, -1 },
    { "server_key_exchange", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHandshakeType_server_key_exchange, 0x19, -1, -1, -1, -1 },
    { "certificate_request", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHandshakeType_certificate_request, 0x19, -1, -1, -1, -1 },
    { "server_hello_done", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHandshakeType_server_hello_done, 0x19, -1, -1, -1, -1 },
    { "certificate_verify", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHandshakeType_certificate_verify, 0x19, -1, -1, -1, -1 },
    { "client_key_exchange", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHandshakeType_client_key_exchange, 0x19, -1, -1, -1, -1 },
    { "finished", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHandshakeType_finished, 0x19, -1, -1, -1, -1 },
    { "certificate_url", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHandshakeType_certificate_url, 0x19, -1, -1, -1, -1 },
    { "certificate_status", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHandshakeType_certificate_status, 0x19, -1, -1, -1, -1 },
    { "hello_verify_request", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHandshakeType_hello_verify_request, 0x19, -1, -1, -1, -1 },
    { "supplemental_data", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHandshakeType_supplemental_data, 0x19, -1, -1, -1, -1 },
    { "session_ticket", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsHandshakeType_session_ticket, 0x19, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsHandshakeType = { "HandshakeType", "org.spongycastle.crypto.tls", NULL, methods, fields, 7, 0x1, 1, 15, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsHandshakeType;
}

@end

void OrgSpongycastleCryptoTlsHandshakeType_init(OrgSpongycastleCryptoTlsHandshakeType *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoTlsHandshakeType *new_OrgSpongycastleCryptoTlsHandshakeType_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsHandshakeType, init)
}

OrgSpongycastleCryptoTlsHandshakeType *create_OrgSpongycastleCryptoTlsHandshakeType_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsHandshakeType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsHandshakeType)
