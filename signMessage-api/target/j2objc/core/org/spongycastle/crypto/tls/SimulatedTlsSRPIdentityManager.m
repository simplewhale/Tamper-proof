//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/SimulatedTlsSRPIdentityManager.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/Mac.h"
#include "org/spongycastle/crypto/agreement/srp/SRP6VerifierGenerator.h"
#include "org/spongycastle/crypto/macs/HMac.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/SRP6GroupParameters.h"
#include "org/spongycastle/crypto/tls/HashAlgorithm.h"
#include "org/spongycastle/crypto/tls/SimulatedTlsSRPIdentityManager.h"
#include "org/spongycastle/crypto/tls/TlsSRPLoginParameters.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/util/Strings.h"

inline IOSByteArray *OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_get_PREFIX_PASSWORD(void);
static IOSByteArray *OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_PASSWORD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager, PREFIX_PASSWORD, IOSByteArray *)

inline IOSByteArray *OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_get_PREFIX_SALT(void);
static IOSByteArray *OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_SALT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager, PREFIX_SALT, IOSByteArray *)

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager)

@implementation OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager

+ (OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager *)getRFC5054DefaultWithOrgSpongycastleCryptoParamsSRP6GroupParameters:(OrgSpongycastleCryptoParamsSRP6GroupParameters *)group
                                                                                                                  withByteArray:(IOSByteArray *)seedKey {
  return OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_getRFC5054DefaultWithOrgSpongycastleCryptoParamsSRP6GroupParameters_withByteArray_(group, seedKey);
}

- (instancetype)initWithOrgSpongycastleCryptoParamsSRP6GroupParameters:(OrgSpongycastleCryptoParamsSRP6GroupParameters *)group
            withOrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator:(OrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator *)verifierGenerator
                                          withOrgSpongycastleCryptoMac:(id<OrgSpongycastleCryptoMac>)mac {
  OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_initWithOrgSpongycastleCryptoParamsSRP6GroupParameters_withOrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator_withOrgSpongycastleCryptoMac_(self, group, verifierGenerator, mac);
  return self;
}

- (OrgSpongycastleCryptoTlsTlsSRPLoginParameters *)getLoginParametersWithByteArray:(IOSByteArray *)identity {
  [((id<OrgSpongycastleCryptoMac>) nil_chk(mac_)) updateWithByteArray:OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_SALT withInt:0 withInt:((IOSByteArray *) nil_chk(OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_SALT))->size_];
  [((id<OrgSpongycastleCryptoMac>) nil_chk(mac_)) updateWithByteArray:identity withInt:0 withInt:((IOSByteArray *) nil_chk(identity))->size_];
  IOSByteArray *salt = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoMac>) nil_chk(mac_)) getMacSize]];
  [((id<OrgSpongycastleCryptoMac>) nil_chk(mac_)) doFinalWithByteArray:salt withInt:0];
  [((id<OrgSpongycastleCryptoMac>) nil_chk(mac_)) updateWithByteArray:OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_PASSWORD withInt:0 withInt:((IOSByteArray *) nil_chk(OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_PASSWORD))->size_];
  [((id<OrgSpongycastleCryptoMac>) nil_chk(mac_)) updateWithByteArray:identity withInt:0 withInt:identity->size_];
  IOSByteArray *password = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoMac>) nil_chk(mac_)) getMacSize]];
  [((id<OrgSpongycastleCryptoMac>) nil_chk(mac_)) doFinalWithByteArray:password withInt:0];
  JavaMathBigInteger *verifier = [((OrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator *) nil_chk(verifierGenerator_)) generateVerifierWithByteArray:salt withByteArray:identity withByteArray:password];
  return new_OrgSpongycastleCryptoTlsTlsSRPLoginParameters_initWithOrgSpongycastleCryptoParamsSRP6GroupParameters_withJavaMathBigInteger_withByteArray_(group_, verifier, salt);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsSRPLoginParameters;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getRFC5054DefaultWithOrgSpongycastleCryptoParamsSRP6GroupParameters:withByteArray:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoParamsSRP6GroupParameters:withOrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator:withOrgSpongycastleCryptoMac:);
  methods[2].selector = @selector(getLoginParametersWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX_PASSWORD", "[B", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "PREFIX_SALT", "[B", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "group_", "LOrgSpongycastleCryptoParamsSRP6GroupParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "verifierGenerator_", "LOrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mac_", "LOrgSpongycastleCryptoMac;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getRFC5054Default", "LOrgSpongycastleCryptoParamsSRP6GroupParameters;[B", "LOrgSpongycastleCryptoParamsSRP6GroupParameters;LOrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator;LOrgSpongycastleCryptoMac;", "getLoginParameters", "[B", &OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_PASSWORD, &OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_SALT };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager = { "SimulatedTlsSRPIdentityManager", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 3, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager class]) {
    OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_PASSWORD = OrgSpongycastleUtilStrings_toByteArrayWithNSString_(@"password");
    OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_PREFIX_SALT = OrgSpongycastleUtilStrings_toByteArrayWithNSString_(@"salt");
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager)
  }
}

@end

OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager *OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_getRFC5054DefaultWithOrgSpongycastleCryptoParamsSRP6GroupParameters_withByteArray_(OrgSpongycastleCryptoParamsSRP6GroupParameters *group, IOSByteArray *seedKey) {
  OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_initialize();
  OrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator *verifierGenerator = new_OrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator_init();
  [verifierGenerator init__WithOrgSpongycastleCryptoParamsSRP6GroupParameters:group withOrgSpongycastleCryptoDigest:OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsHashAlgorithm_sha1)];
  OrgSpongycastleCryptoMacsHMac *mac = new_OrgSpongycastleCryptoMacsHMac_initWithOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsHashAlgorithm_sha1));
  [mac init__WithOrgSpongycastleCryptoCipherParameters:new_OrgSpongycastleCryptoParamsKeyParameter_initWithByteArray_(seedKey)];
  return new_OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_initWithOrgSpongycastleCryptoParamsSRP6GroupParameters_withOrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator_withOrgSpongycastleCryptoMac_(group, verifierGenerator, mac);
}

void OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_initWithOrgSpongycastleCryptoParamsSRP6GroupParameters_withOrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator_withOrgSpongycastleCryptoMac_(OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager *self, OrgSpongycastleCryptoParamsSRP6GroupParameters *group, OrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator *verifierGenerator, id<OrgSpongycastleCryptoMac> mac) {
  NSObject_init(self);
  self->group_ = group;
  self->verifierGenerator_ = verifierGenerator;
  self->mac_ = mac;
}

OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager *new_OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_initWithOrgSpongycastleCryptoParamsSRP6GroupParameters_withOrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator_withOrgSpongycastleCryptoMac_(OrgSpongycastleCryptoParamsSRP6GroupParameters *group, OrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator *verifierGenerator, id<OrgSpongycastleCryptoMac> mac) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager, initWithOrgSpongycastleCryptoParamsSRP6GroupParameters_withOrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator_withOrgSpongycastleCryptoMac_, group, verifierGenerator, mac)
}

OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager *create_OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager_initWithOrgSpongycastleCryptoParamsSRP6GroupParameters_withOrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator_withOrgSpongycastleCryptoMac_(OrgSpongycastleCryptoParamsSRP6GroupParameters *group, OrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator *verifierGenerator, id<OrgSpongycastleCryptoMac> mac) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager, initWithOrgSpongycastleCryptoParamsSRP6GroupParameters_withOrgSpongycastleCryptoAgreementSrpSRP6VerifierGenerator_withOrgSpongycastleCryptoMac_, group, verifierGenerator, mac)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsSimulatedTlsSRPIdentityManager)
