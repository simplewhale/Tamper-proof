//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DefaultTlsServer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Vector.h"
#include "org/spongycastle/crypto/agreement/DHStandardGroups.h"
#include "org/spongycastle/crypto/params/DHParameters.h"
#include "org/spongycastle/crypto/tls/AbstractTlsServer.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/CipherSuite.h"
#include "org/spongycastle/crypto/tls/DefaultTlsServer.h"
#include "org/spongycastle/crypto/tls/KeyExchangeAlgorithm.h"
#include "org/spongycastle/crypto/tls/TlsCipherFactory.h"
#include "org/spongycastle/crypto/tls/TlsCredentials.h"
#include "org/spongycastle/crypto/tls/TlsDHEKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsDHKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsECDHEKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsECDHKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsEncryptionCredentials.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsRSAKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsSignerCredentials.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

@implementation OrgSpongycastleCryptoTlsDefaultTlsServer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsDefaultTlsServer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsCipherFactory:(id<OrgSpongycastleCryptoTlsTlsCipherFactory>)cipherFactory {
  OrgSpongycastleCryptoTlsDefaultTlsServer_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_(self, cipherFactory);
  return self;
}

- (id<OrgSpongycastleCryptoTlsTlsSignerCredentials>)getDSASignerCredentials {
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
}

- (id<OrgSpongycastleCryptoTlsTlsSignerCredentials>)getECDSASignerCredentials {
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
}

- (id<OrgSpongycastleCryptoTlsTlsEncryptionCredentials>)getRSAEncryptionCredentials {
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
}

- (id<OrgSpongycastleCryptoTlsTlsSignerCredentials>)getRSASignerCredentials {
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
}

- (OrgSpongycastleCryptoParamsDHParameters *)getDHParameters {
  return JreLoadStatic(OrgSpongycastleCryptoAgreementDHStandardGroups, rfc7919_ffdhe2048);
}

- (IOSIntArray *)getCipherSuites {
  return [IOSIntArray newArrayWithInts:(jint[]){ OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CBC_SHA, OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CBC_SHA, OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_GCM_SHA384, OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_GCM_SHA256, OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CBC_SHA256, OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CBC_SHA256, OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CBC_SHA, OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CBC_SHA } count:18];
}

- (id<OrgSpongycastleCryptoTlsTlsCredentials>)getCredentials {
  jint keyExchangeAlgorithm = OrgSpongycastleCryptoTlsTlsUtils_getKeyExchangeAlgorithmWithInt_(selectedCipherSuite_);
  switch (keyExchangeAlgorithm) {
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_DSS:
    return [self getDSASignerCredentials];
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_anon:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDH_anon:
    return nil;
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_ECDSA:
    return [self getECDSASignerCredentials];
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_RSA:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_RSA:
    return [self getRSASignerCredentials];
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_RSA:
    return [self getRSAEncryptionCredentials];
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

- (id<OrgSpongycastleCryptoTlsTlsKeyExchange>)getKeyExchange {
  jint keyExchangeAlgorithm = OrgSpongycastleCryptoTlsTlsUtils_getKeyExchangeAlgorithmWithInt_(selectedCipherSuite_);
  switch (keyExchangeAlgorithm) {
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_anon:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_DSS:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_RSA:
    return [self createDHKeyExchangeWithInt:keyExchangeAlgorithm];
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_DSS:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_RSA:
    return [self createDHEKeyExchangeWithInt:keyExchangeAlgorithm];
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDH_anon:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDH_ECDSA:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDH_RSA:
    return [self createECDHKeyExchangeWithInt:keyExchangeAlgorithm];
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_ECDSA:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_ECDHE_RSA:
    return [self createECDHEKeyExchangeWithInt:keyExchangeAlgorithm];
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_RSA:
    return [self createRSAKeyExchange];
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

- (id<OrgSpongycastleCryptoTlsTlsKeyExchange>)createDHKeyExchangeWithInt:(jint)keyExchange {
  return new_OrgSpongycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoParamsDHParameters_(keyExchange, supportedSignatureAlgorithms_, [self getDHParameters]);
}

- (id<OrgSpongycastleCryptoTlsTlsKeyExchange>)createDHEKeyExchangeWithInt:(jint)keyExchange {
  return new_OrgSpongycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoParamsDHParameters_(keyExchange, supportedSignatureAlgorithms_, [self getDHParameters]);
}

- (id<OrgSpongycastleCryptoTlsTlsKeyExchange>)createECDHKeyExchangeWithInt:(jint)keyExchange {
  return new_OrgSpongycastleCryptoTlsTlsECDHKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(keyExchange, supportedSignatureAlgorithms_, namedCurves_, clientECPointFormats_, serverECPointFormats_);
}

- (id<OrgSpongycastleCryptoTlsTlsKeyExchange>)createECDHEKeyExchangeWithInt:(jint)keyExchange {
  return new_OrgSpongycastleCryptoTlsTlsECDHEKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(keyExchange, supportedSignatureAlgorithms_, namedCurves_, clientECPointFormats_, serverECPointFormats_);
}

- (id<OrgSpongycastleCryptoTlsTlsKeyExchange>)createRSAKeyExchange {
  return new_OrgSpongycastleCryptoTlsTlsRSAKeyExchange_initWithJavaUtilVector_(supportedSignatureAlgorithms_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsSignerCredentials;", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsSignerCredentials;", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsEncryptionCredentials;", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsSignerCredentials;", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsDHParameters;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsCredentials;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsKeyExchange;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsKeyExchange;", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsKeyExchange;", 0x4, 4, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsKeyExchange;", 0x4, 5, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsKeyExchange;", 0x4, 6, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsKeyExchange;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsCipherFactory:);
  methods[2].selector = @selector(getDSASignerCredentials);
  methods[3].selector = @selector(getECDSASignerCredentials);
  methods[4].selector = @selector(getRSAEncryptionCredentials);
  methods[5].selector = @selector(getRSASignerCredentials);
  methods[6].selector = @selector(getDHParameters);
  methods[7].selector = @selector(getCipherSuites);
  methods[8].selector = @selector(getCredentials);
  methods[9].selector = @selector(getKeyExchange);
  methods[10].selector = @selector(createDHKeyExchangeWithInt:);
  methods[11].selector = @selector(createDHEKeyExchangeWithInt:);
  methods[12].selector = @selector(createECDHKeyExchangeWithInt:);
  methods[13].selector = @selector(createECDHEKeyExchangeWithInt:);
  methods[14].selector = @selector(createRSAKeyExchange);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsTlsCipherFactory;", "LJavaIoIOException;", "createDHKeyExchange", "I", "createDHEKeyExchange", "createECDHKeyExchange", "createECDHEKeyExchange" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDefaultTlsServer = { "DefaultTlsServer", "org.spongycastle.crypto.tls", ptrTable, methods, NULL, 7, 0x401, 15, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDefaultTlsServer;
}

@end

void OrgSpongycastleCryptoTlsDefaultTlsServer_init(OrgSpongycastleCryptoTlsDefaultTlsServer *self) {
  OrgSpongycastleCryptoTlsAbstractTlsServer_init(self);
}

void OrgSpongycastleCryptoTlsDefaultTlsServer_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_(OrgSpongycastleCryptoTlsDefaultTlsServer *self, id<OrgSpongycastleCryptoTlsTlsCipherFactory> cipherFactory) {
  OrgSpongycastleCryptoTlsAbstractTlsServer_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_(self, cipherFactory);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDefaultTlsServer)
