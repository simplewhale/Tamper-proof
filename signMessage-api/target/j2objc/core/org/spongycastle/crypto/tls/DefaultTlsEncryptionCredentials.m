//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DefaultTlsEncryptionCredentials.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/RSAKeyParameters.h"
#include "org/spongycastle/crypto/tls/AbstractTlsEncryptionCredentials.h"
#include "org/spongycastle/crypto/tls/Certificate.h"
#include "org/spongycastle/crypto/tls/DefaultTlsEncryptionCredentials.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsRSAUtils.h"

@implementation OrgSpongycastleCryptoTlsDefaultTlsEncryptionCredentials

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                   withOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)certificate
     withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:(OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)privateKey {
  OrgSpongycastleCryptoTlsDefaultTlsEncryptionCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(self, context, certificate, privateKey);
  return self;
}

- (OrgSpongycastleCryptoTlsCertificate *)getCertificate {
  return certificate_;
}

- (IOSByteArray *)decryptPreMasterSecretWithByteArray:(IOSByteArray *)encryptedPreMasterSecret {
  return OrgSpongycastleCryptoTlsTlsRSAUtils_safeDecryptPreMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoParamsRSAKeyParameters_withByteArray_(context_, (OrgSpongycastleCryptoParamsRSAKeyParameters *) cast_chk(privateKey_, [OrgSpongycastleCryptoParamsRSAKeyParameters class]), encryptedPreMasterSecret);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsCertificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsContext:withOrgSpongycastleCryptoTlsCertificate:withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:);
  methods[1].selector = @selector(getCertificate);
  methods[2].selector = @selector(decryptPreMasterSecretWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "context_", "LOrgSpongycastleCryptoTlsTlsContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "certificate_", "LOrgSpongycastleCryptoTlsCertificate;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "privateKey_", "LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsTlsContext;LOrgSpongycastleCryptoTlsCertificate;LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", "decryptPreMasterSecret", "[B", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDefaultTlsEncryptionCredentials = { "DefaultTlsEncryptionCredentials", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 3, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDefaultTlsEncryptionCredentials;
}

@end

void OrgSpongycastleCryptoTlsDefaultTlsEncryptionCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(OrgSpongycastleCryptoTlsDefaultTlsEncryptionCredentials *self, id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey) {
  OrgSpongycastleCryptoTlsAbstractTlsEncryptionCredentials_init(self);
  if (certificate == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'certificate' cannot be null");
  }
  if ([certificate isEmpty]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'certificate' cannot be empty");
  }
  if (privateKey == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'privateKey' cannot be null");
  }
  if (![privateKey isPrivate]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'privateKey' must be private");
  }
  if ([privateKey isKindOfClass:[OrgSpongycastleCryptoParamsRSAKeyParameters class]]) {
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"'privateKey' type not supported: ", [[privateKey java_getClass] getName]));
  }
  self->context_ = context;
  self->certificate_ = certificate;
  self->privateKey_ = privateKey;
}

OrgSpongycastleCryptoTlsDefaultTlsEncryptionCredentials *new_OrgSpongycastleCryptoTlsDefaultTlsEncryptionCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDefaultTlsEncryptionCredentials, initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_, context, certificate, privateKey)
}

OrgSpongycastleCryptoTlsDefaultTlsEncryptionCredentials *create_OrgSpongycastleCryptoTlsDefaultTlsEncryptionCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDefaultTlsEncryptionCredentials, initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_, context, certificate, privateKey)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDefaultTlsEncryptionCredentials)
