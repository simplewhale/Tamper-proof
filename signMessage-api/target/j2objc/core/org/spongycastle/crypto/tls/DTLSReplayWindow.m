//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DTLSReplayWindow.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/crypto/tls/DTLSReplayWindow.h"

@interface OrgSpongycastleCryptoTlsDTLSReplayWindow () {
 @public
  jlong latestConfirmedSeq_;
  jlong bitmap_;
}

@end

inline jlong OrgSpongycastleCryptoTlsDTLSReplayWindow_get_VALID_SEQ_MASK(void);
#define OrgSpongycastleCryptoTlsDTLSReplayWindow_VALID_SEQ_MASK 281474976710655LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsDTLSReplayWindow, VALID_SEQ_MASK, jlong)

inline jlong OrgSpongycastleCryptoTlsDTLSReplayWindow_get_WINDOW_SIZE(void);
#define OrgSpongycastleCryptoTlsDTLSReplayWindow_WINDOW_SIZE 64LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsDTLSReplayWindow, WINDOW_SIZE, jlong)

@implementation OrgSpongycastleCryptoTlsDTLSReplayWindow

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsDTLSReplayWindow_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)shouldDiscardWithLong:(jlong)seq {
  if ((seq & OrgSpongycastleCryptoTlsDTLSReplayWindow_VALID_SEQ_MASK) != seq) {
    return true;
  }
  if (seq <= latestConfirmedSeq_) {
    jlong diff = latestConfirmedSeq_ - seq;
    if (diff >= OrgSpongycastleCryptoTlsDTLSReplayWindow_WINDOW_SIZE) {
      return true;
    }
    if ((bitmap_ & (JreLShift64(1LL, diff))) != 0) {
      return true;
    }
  }
  return false;
}

- (void)reportAuthenticatedWithLong:(jlong)seq {
  if ((seq & OrgSpongycastleCryptoTlsDTLSReplayWindow_VALID_SEQ_MASK) != seq) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'seq' out of range");
  }
  if (seq <= latestConfirmedSeq_) {
    jlong diff = latestConfirmedSeq_ - seq;
    if (diff < OrgSpongycastleCryptoTlsDTLSReplayWindow_WINDOW_SIZE) {
      bitmap_ |= (JreLShift64(1LL, diff));
    }
  }
  else {
    jlong diff = seq - latestConfirmedSeq_;
    if (diff >= OrgSpongycastleCryptoTlsDTLSReplayWindow_WINDOW_SIZE) {
      bitmap_ = 1;
    }
    else {
      JreLShiftAssignLong(&bitmap_, (jint) diff);
      bitmap_ |= 1;
    }
    latestConfirmedSeq_ = seq;
  }
}

- (void)reset {
  latestConfirmedSeq_ = -1;
  bitmap_ = 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(shouldDiscardWithLong:);
  methods[2].selector = @selector(reportAuthenticatedWithLong:);
  methods[3].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VALID_SEQ_MASK", "J", .constantValue.asLong = OrgSpongycastleCryptoTlsDTLSReplayWindow_VALID_SEQ_MASK, 0x1a, -1, -1, -1, -1 },
    { "WINDOW_SIZE", "J", .constantValue.asLong = OrgSpongycastleCryptoTlsDTLSReplayWindow_WINDOW_SIZE, 0x1a, -1, -1, -1, -1 },
    { "latestConfirmedSeq_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bitmap_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "shouldDiscard", "J", "reportAuthenticated" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDTLSReplayWindow = { "DTLSReplayWindow", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x0, 4, 4, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDTLSReplayWindow;
}

@end

void OrgSpongycastleCryptoTlsDTLSReplayWindow_init(OrgSpongycastleCryptoTlsDTLSReplayWindow *self) {
  NSObject_init(self);
  self->latestConfirmedSeq_ = -1;
  self->bitmap_ = 0;
}

OrgSpongycastleCryptoTlsDTLSReplayWindow *new_OrgSpongycastleCryptoTlsDTLSReplayWindow_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDTLSReplayWindow, init)
}

OrgSpongycastleCryptoTlsDTLSReplayWindow *create_OrgSpongycastleCryptoTlsDTLSReplayWindow_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDTLSReplayWindow, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDTLSReplayWindow)
