//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/AbstractTlsServer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsAbstractTlsServer")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsAbstractTlsServer
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsAbstractTlsServer 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsAbstractTlsServer 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsAbstractTlsServer

#if !defined (OrgSpongycastleCryptoTlsAbstractTlsServer_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsAbstractTlsServer || defined(INCLUDE_OrgSpongycastleCryptoTlsAbstractTlsServer))
#define OrgSpongycastleCryptoTlsAbstractTlsServer_

#define RESTRICT_OrgSpongycastleCryptoTlsAbstractTlsPeer 1
#define INCLUDE_OrgSpongycastleCryptoTlsAbstractTlsPeer 1
#include "org/spongycastle/crypto/tls/AbstractTlsPeer.h"

#define RESTRICT_OrgSpongycastleCryptoTlsTlsServer 1
#define INCLUDE_OrgSpongycastleCryptoTlsTlsServer 1
#include "org/spongycastle/crypto/tls/TlsServer.h"

@class IOSIntArray;
@class IOSShortArray;
@class JavaUtilHashtable;
@class JavaUtilVector;
@class OrgSpongycastleCryptoTlsCertificate;
@class OrgSpongycastleCryptoTlsCertificateRequest;
@class OrgSpongycastleCryptoTlsCertificateStatus;
@class OrgSpongycastleCryptoTlsNewSessionTicket;
@class OrgSpongycastleCryptoTlsProtocolVersion;
@protocol OrgSpongycastleCryptoTlsTlsCipher;
@protocol OrgSpongycastleCryptoTlsTlsCipherFactory;
@protocol OrgSpongycastleCryptoTlsTlsCompression;
@protocol OrgSpongycastleCryptoTlsTlsServerContext;

@interface OrgSpongycastleCryptoTlsAbstractTlsServer : OrgSpongycastleCryptoTlsAbstractTlsPeer < OrgSpongycastleCryptoTlsTlsServer > {
 @public
  id<OrgSpongycastleCryptoTlsTlsCipherFactory> cipherFactory_;
  id<OrgSpongycastleCryptoTlsTlsServerContext> context_;
  OrgSpongycastleCryptoTlsProtocolVersion *clientVersion_;
  IOSIntArray *offeredCipherSuites_;
  IOSShortArray *offeredCompressionMethods_;
  JavaUtilHashtable *clientExtensions_;
  jboolean encryptThenMACOffered_;
  jshort maxFragmentLengthOffered_;
  jboolean truncatedHMacOffered_;
  JavaUtilVector *supportedSignatureAlgorithms_;
  jboolean eccCipherSuitesOffered_;
  IOSIntArray *namedCurves_;
  IOSShortArray *clientECPointFormats_;
  IOSShortArray *serverECPointFormats_;
  OrgSpongycastleCryptoTlsProtocolVersion *serverVersion_;
  jint selectedCipherSuite_;
  jshort selectedCompressionMethod_;
  JavaUtilHashtable *serverExtensions_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsCipherFactory:(id<OrgSpongycastleCryptoTlsTlsCipherFactory>)cipherFactory;

- (OrgSpongycastleCryptoTlsCertificateRequest *)getCertificateRequest;

- (OrgSpongycastleCryptoTlsCertificateStatus *)getCertificateStatus;

- (id<OrgSpongycastleCryptoTlsTlsCipher>)getCipher;

- (id<OrgSpongycastleCryptoTlsTlsCompression>)getCompression;

- (OrgSpongycastleCryptoTlsNewSessionTicket *)getNewSessionTicket;

- (jint)getSelectedCipherSuite;

- (jshort)getSelectedCompressionMethod;

- (JavaUtilHashtable *)getServerExtensions;

- (JavaUtilVector *)getServerSupplementalData;

- (OrgSpongycastleCryptoTlsProtocolVersion *)getServerVersion;

- (void)init__WithOrgSpongycastleCryptoTlsTlsServerContext:(id<OrgSpongycastleCryptoTlsTlsServerContext>)context OBJC_METHOD_FAMILY_NONE;

- (void)notifyClientCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)clientCertificate;

- (void)notifyClientVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)clientVersion;

- (void)notifyFallbackWithBoolean:(jboolean)isFallback;

- (void)notifyOfferedCipherSuitesWithIntArray:(IOSIntArray *)offeredCipherSuites;

- (void)notifyOfferedCompressionMethodsWithShortArray:(IOSShortArray *)offeredCompressionMethods;

- (void)processClientExtensionsWithJavaUtilHashtable:(JavaUtilHashtable *)clientExtensions;

- (void)processClientSupplementalDataWithJavaUtilVector:(JavaUtilVector *)clientSupplementalData;

#pragma mark Protected

- (jboolean)allowEncryptThenMAC;

- (jboolean)allowTruncatedHMac;

- (JavaUtilHashtable *)checkServerExtensions;

- (IOSIntArray *)getCipherSuites;

- (IOSShortArray *)getCompressionMethods;

- (OrgSpongycastleCryptoTlsProtocolVersion *)getMaximumVersion;

- (OrgSpongycastleCryptoTlsProtocolVersion *)getMinimumVersion;

- (jboolean)supportsClientECCCapabilitiesWithIntArray:(IOSIntArray *)namedCurves
                                       withShortArray:(IOSShortArray *)ecPointFormats;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsAbstractTlsServer)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsServer, cipherFactory_, id<OrgSpongycastleCryptoTlsTlsCipherFactory>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsServer, context_, id<OrgSpongycastleCryptoTlsTlsServerContext>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsServer, clientVersion_, OrgSpongycastleCryptoTlsProtocolVersion *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsServer, offeredCipherSuites_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsServer, offeredCompressionMethods_, IOSShortArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsServer, clientExtensions_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsServer, supportedSignatureAlgorithms_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsServer, namedCurves_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsServer, clientECPointFormats_, IOSShortArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsServer, serverECPointFormats_, IOSShortArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsServer, serverVersion_, OrgSpongycastleCryptoTlsProtocolVersion *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsServer, serverExtensions_, JavaUtilHashtable *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsAbstractTlsServer_init(OrgSpongycastleCryptoTlsAbstractTlsServer *self);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsAbstractTlsServer_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_(OrgSpongycastleCryptoTlsAbstractTlsServer *self, id<OrgSpongycastleCryptoTlsTlsCipherFactory> cipherFactory);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsAbstractTlsServer)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsAbstractTlsServer")
