//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/AbstractTlsClient.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsAbstractTlsClient")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsAbstractTlsClient
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsAbstractTlsClient 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsAbstractTlsClient 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsAbstractTlsClient

#if !defined (OrgSpongycastleCryptoTlsAbstractTlsClient_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsAbstractTlsClient || defined(INCLUDE_OrgSpongycastleCryptoTlsAbstractTlsClient))
#define OrgSpongycastleCryptoTlsAbstractTlsClient_

#define RESTRICT_OrgSpongycastleCryptoTlsAbstractTlsPeer 1
#define INCLUDE_OrgSpongycastleCryptoTlsAbstractTlsPeer 1
#include "org/spongycastle/crypto/tls/AbstractTlsPeer.h"

#define RESTRICT_OrgSpongycastleCryptoTlsTlsClient 1
#define INCLUDE_OrgSpongycastleCryptoTlsTlsClient 1
#include "org/spongycastle/crypto/tls/TlsClient.h"

@class IOSByteArray;
@class IOSIntArray;
@class IOSShortArray;
@class JavaLangInteger;
@class JavaUtilHashtable;
@class JavaUtilVector;
@class OrgSpongycastleCryptoTlsNewSessionTicket;
@class OrgSpongycastleCryptoTlsProtocolVersion;
@protocol OrgSpongycastleCryptoTlsTlsCipher;
@protocol OrgSpongycastleCryptoTlsTlsCipherFactory;
@protocol OrgSpongycastleCryptoTlsTlsClientContext;
@protocol OrgSpongycastleCryptoTlsTlsCompression;
@protocol OrgSpongycastleCryptoTlsTlsSession;

@interface OrgSpongycastleCryptoTlsAbstractTlsClient : OrgSpongycastleCryptoTlsAbstractTlsPeer < OrgSpongycastleCryptoTlsTlsClient > {
 @public
  id<OrgSpongycastleCryptoTlsTlsCipherFactory> cipherFactory_;
  id<OrgSpongycastleCryptoTlsTlsClientContext> context_;
  JavaUtilVector *supportedSignatureAlgorithms_;
  IOSIntArray *namedCurves_;
  IOSShortArray *clientECPointFormats_;
  IOSShortArray *serverECPointFormats_;
  jint selectedCipherSuite_;
  jshort selectedCompressionMethod_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsCipherFactory:(id<OrgSpongycastleCryptoTlsTlsCipherFactory>)cipherFactory;

- (id<OrgSpongycastleCryptoTlsTlsCipher>)getCipher;

- (JavaUtilHashtable *)getClientExtensions;

- (OrgSpongycastleCryptoTlsProtocolVersion *)getClientHelloRecordLayerVersion;

- (JavaUtilVector *)getClientSupplementalData;

- (OrgSpongycastleCryptoTlsProtocolVersion *)getClientVersion;

- (id<OrgSpongycastleCryptoTlsTlsCompression>)getCompression;

- (IOSShortArray *)getCompressionMethods;

- (OrgSpongycastleCryptoTlsProtocolVersion *)getMinimumVersion;

- (id<OrgSpongycastleCryptoTlsTlsSession>)getSessionToResume;

- (void)init__WithOrgSpongycastleCryptoTlsTlsClientContext:(id<OrgSpongycastleCryptoTlsTlsClientContext>)context OBJC_METHOD_FAMILY_NONE;

- (jboolean)isFallback;

- (void)notifyNewSessionTicketWithOrgSpongycastleCryptoTlsNewSessionTicket:(OrgSpongycastleCryptoTlsNewSessionTicket *)newSessionTicket;

- (void)notifySelectedCipherSuiteWithInt:(jint)selectedCipherSuite;

- (void)notifySelectedCompressionMethodWithShort:(jshort)selectedCompressionMethod;

- (void)notifyServerVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)serverVersion;

- (void)notifySessionIDWithByteArray:(IOSByteArray *)sessionID;

- (void)processServerExtensionsWithJavaUtilHashtable:(JavaUtilHashtable *)serverExtensions;

- (void)processServerSupplementalDataWithJavaUtilVector:(JavaUtilVector *)serverSupplementalData;

#pragma mark Protected

- (jboolean)allowUnexpectedServerExtensionWithJavaLangInteger:(JavaLangInteger *)extensionType
                                                withByteArray:(IOSByteArray *)extensionData;

- (void)checkForUnexpectedServerExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)serverExtensions
                                           withJavaLangInteger:(JavaLangInteger *)extensionType;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsAbstractTlsClient)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsClient, cipherFactory_, id<OrgSpongycastleCryptoTlsTlsCipherFactory>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsClient, context_, id<OrgSpongycastleCryptoTlsTlsClientContext>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsClient, supportedSignatureAlgorithms_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsClient, namedCurves_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsClient, clientECPointFormats_, IOSShortArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsAbstractTlsClient, serverECPointFormats_, IOSShortArray *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsAbstractTlsClient_init(OrgSpongycastleCryptoTlsAbstractTlsClient *self);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsAbstractTlsClient_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_(OrgSpongycastleCryptoTlsAbstractTlsClient *self, id<OrgSpongycastleCryptoTlsTlsCipherFactory> cipherFactory);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsAbstractTlsClient)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsAbstractTlsClient")
