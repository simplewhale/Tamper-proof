//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DefaultTlsAgreementCredentials.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/BasicAgreement.h"
#include "org/spongycastle/crypto/agreement/DHBasicAgreement.h"
#include "org/spongycastle/crypto/agreement/ECDHBasicAgreement.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/DHPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/tls/AbstractTlsAgreementCredentials.h"
#include "org/spongycastle/crypto/tls/Certificate.h"
#include "org/spongycastle/crypto/tls/DefaultTlsAgreementCredentials.h"
#include "org/spongycastle/util/BigIntegers.h"

@implementation OrgSpongycastleCryptoTlsDefaultTlsAgreementCredentials

- (instancetype)initWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)certificate
      withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:(OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)privateKey {
  OrgSpongycastleCryptoTlsDefaultTlsAgreementCredentials_initWithOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(self, certificate, privateKey);
  return self;
}

- (OrgSpongycastleCryptoTlsCertificate *)getCertificate {
  return certificate_;
}

- (IOSByteArray *)generateAgreementWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter:(OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)peerPublicKey {
  [((id<OrgSpongycastleCryptoBasicAgreement>) nil_chk(basicAgreement_)) init__WithOrgSpongycastleCryptoCipherParameters:privateKey_];
  JavaMathBigInteger *agreementValue = [((id<OrgSpongycastleCryptoBasicAgreement>) nil_chk(basicAgreement_)) calculateAgreementWithOrgSpongycastleCryptoCipherParameters:peerPublicKey];
  if (truncateAgreement_) {
    return OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(agreementValue);
  }
  return OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_([((id<OrgSpongycastleCryptoBasicAgreement>) nil_chk(basicAgreement_)) getFieldSize], agreementValue);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsCertificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoTlsCertificate:withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:);
  methods[1].selector = @selector(getCertificate);
  methods[2].selector = @selector(generateAgreementWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "certificate_", "LOrgSpongycastleCryptoTlsCertificate;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "privateKey_", "LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "basicAgreement_", "LOrgSpongycastleCryptoBasicAgreement;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "truncateAgreement_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsCertificate;LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", "generateAgreement", "LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDefaultTlsAgreementCredentials = { "DefaultTlsAgreementCredentials", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 3, 4, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDefaultTlsAgreementCredentials;
}

@end

void OrgSpongycastleCryptoTlsDefaultTlsAgreementCredentials_initWithOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(OrgSpongycastleCryptoTlsDefaultTlsAgreementCredentials *self, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey) {
  OrgSpongycastleCryptoTlsAbstractTlsAgreementCredentials_init(self);
  if (certificate == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'certificate' cannot be null");
  }
  if ([certificate isEmpty]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'certificate' cannot be empty");
  }
  if (privateKey == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'privateKey' cannot be null");
  }
  if (![privateKey isPrivate]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'privateKey' must be private");
  }
  if ([privateKey isKindOfClass:[OrgSpongycastleCryptoParamsDHPrivateKeyParameters class]]) {
    self->basicAgreement_ = new_OrgSpongycastleCryptoAgreementDHBasicAgreement_init();
    self->truncateAgreement_ = true;
  }
  else if ([privateKey isKindOfClass:[OrgSpongycastleCryptoParamsECPrivateKeyParameters class]]) {
    self->basicAgreement_ = new_OrgSpongycastleCryptoAgreementECDHBasicAgreement_init();
    self->truncateAgreement_ = false;
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"'privateKey' type not supported: ", [[privateKey java_getClass] getName]));
  }
  self->certificate_ = certificate;
  self->privateKey_ = privateKey;
}

OrgSpongycastleCryptoTlsDefaultTlsAgreementCredentials *new_OrgSpongycastleCryptoTlsDefaultTlsAgreementCredentials_initWithOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDefaultTlsAgreementCredentials, initWithOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_, certificate, privateKey)
}

OrgSpongycastleCryptoTlsDefaultTlsAgreementCredentials *create_OrgSpongycastleCryptoTlsDefaultTlsAgreementCredentials_initWithOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDefaultTlsAgreementCredentials, initWithOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_, certificate, privateKey)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDefaultTlsAgreementCredentials)
