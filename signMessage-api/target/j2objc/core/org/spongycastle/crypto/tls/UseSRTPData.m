//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/UseSRTPData.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/crypto/tls/UseSRTPData.h"

@implementation OrgSpongycastleCryptoTlsUseSRTPData

- (instancetype)initWithIntArray:(IOSIntArray *)protectionProfiles
                   withByteArray:(IOSByteArray *)mki {
  OrgSpongycastleCryptoTlsUseSRTPData_initWithIntArray_withByteArray_(self, protectionProfiles, mki);
  return self;
}

- (IOSIntArray *)getProtectionProfiles {
  return protectionProfiles_;
}

- (IOSByteArray *)getMki {
  return mki_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIntArray:withByteArray:);
  methods[1].selector = @selector(getProtectionProfiles);
  methods[2].selector = @selector(getMki);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "protectionProfiles_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mki_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[I[B" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsUseSRTPData = { "UseSRTPData", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsUseSRTPData;
}

@end

void OrgSpongycastleCryptoTlsUseSRTPData_initWithIntArray_withByteArray_(OrgSpongycastleCryptoTlsUseSRTPData *self, IOSIntArray *protectionProfiles, IOSByteArray *mki) {
  NSObject_init(self);
  if (protectionProfiles == nil || protectionProfiles->size_ < 1 || protectionProfiles->size_ >= (JreLShift32(1, 15))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'protectionProfiles' must have length from 1 to (2^15 - 1)");
  }
  if (mki == nil) {
    mki = JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES);
  }
  else if (mki->size_ > 255) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'mki' cannot be longer than 255 bytes");
  }
  self->protectionProfiles_ = protectionProfiles;
  self->mki_ = mki;
}

OrgSpongycastleCryptoTlsUseSRTPData *new_OrgSpongycastleCryptoTlsUseSRTPData_initWithIntArray_withByteArray_(IOSIntArray *protectionProfiles, IOSByteArray *mki) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsUseSRTPData, initWithIntArray_withByteArray_, protectionProfiles, mki)
}

OrgSpongycastleCryptoTlsUseSRTPData *create_OrgSpongycastleCryptoTlsUseSRTPData_initWithIntArray_withByteArray_(IOSIntArray *protectionProfiles, IOSByteArray *mki) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsUseSRTPData, initWithIntArray_withByteArray_, protectionProfiles, mki)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsUseSRTPData)
