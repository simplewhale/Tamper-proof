//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/CertificateURL.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Vector.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/CertChainType.h"
#include "org/spongycastle/crypto/tls/CertificateURL.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/crypto/tls/URLAndHash.h"

@implementation OrgSpongycastleCryptoTlsCertificateURL

- (instancetype)initWithShort:(jshort)type
           withJavaUtilVector:(JavaUtilVector *)urlAndHashList {
  OrgSpongycastleCryptoTlsCertificateURL_initWithShort_withJavaUtilVector_(self, type, urlAndHashList);
  return self;
}

- (jshort)getType {
  return type_;
}

- (JavaUtilVector *)getURLAndHashList {
  return urlAndHashList_;
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(self->type_, output);
  OrgSpongycastleCryptoTlsCertificateURL_ListBuffer16 *buf = new_OrgSpongycastleCryptoTlsCertificateURL_ListBuffer16_initWithOrgSpongycastleCryptoTlsCertificateURL_(self);
  for (jint i = 0; i < [((JavaUtilVector *) nil_chk(self->urlAndHashList_)) size]; ++i) {
    OrgSpongycastleCryptoTlsURLAndHash *urlAndHash = (OrgSpongycastleCryptoTlsURLAndHash *) cast_chk([((JavaUtilVector *) nil_chk(self->urlAndHashList_)) elementAtWithInt:i], [OrgSpongycastleCryptoTlsURLAndHash class]);
    [((OrgSpongycastleCryptoTlsURLAndHash *) nil_chk(urlAndHash)) encodeWithJavaIoOutputStream:buf];
  }
  [buf encodeToWithJavaIoOutputStream:output];
}

+ (OrgSpongycastleCryptoTlsCertificateURL *)parseWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                                  withJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsCertificateURL_parseWithOrgSpongycastleCryptoTlsTlsContext_withJavaIoInputStream_(context, input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsCertificateURL;", 0x9, 4, 5, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithShort:withJavaUtilVector:);
  methods[1].selector = @selector(getType);
  methods[2].selector = @selector(getURLAndHashList);
  methods[3].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[4].selector = @selector(parseWithOrgSpongycastleCryptoTlsTlsContext:withJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "urlAndHashList_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "SLJavaUtilVector;", "encode", "LJavaIoOutputStream;", "LJavaIoIOException;", "parse", "LOrgSpongycastleCryptoTlsTlsContext;LJavaIoInputStream;", "LOrgSpongycastleCryptoTlsCertificateURL_ListBuffer16;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsCertificateURL = { "CertificateURL", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, 6, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsCertificateURL;
}

@end

void OrgSpongycastleCryptoTlsCertificateURL_initWithShort_withJavaUtilVector_(OrgSpongycastleCryptoTlsCertificateURL *self, jshort type, JavaUtilVector *urlAndHashList) {
  NSObject_init(self);
  if (!OrgSpongycastleCryptoTlsCertChainType_isValidWithShort_(type)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'type' is not a valid CertChainType value");
  }
  if (urlAndHashList == nil || [urlAndHashList isEmpty]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'urlAndHashList' must have length > 0");
  }
  self->type_ = type;
  self->urlAndHashList_ = urlAndHashList;
}

OrgSpongycastleCryptoTlsCertificateURL *new_OrgSpongycastleCryptoTlsCertificateURL_initWithShort_withJavaUtilVector_(jshort type, JavaUtilVector *urlAndHashList) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsCertificateURL, initWithShort_withJavaUtilVector_, type, urlAndHashList)
}

OrgSpongycastleCryptoTlsCertificateURL *create_OrgSpongycastleCryptoTlsCertificateURL_initWithShort_withJavaUtilVector_(jshort type, JavaUtilVector *urlAndHashList) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsCertificateURL, initWithShort_withJavaUtilVector_, type, urlAndHashList)
}

OrgSpongycastleCryptoTlsCertificateURL *OrgSpongycastleCryptoTlsCertificateURL_parseWithOrgSpongycastleCryptoTlsTlsContext_withJavaIoInputStream_(id<OrgSpongycastleCryptoTlsTlsContext> context, JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsCertificateURL_initialize();
  jshort type = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
  if (!OrgSpongycastleCryptoTlsCertChainType_isValidWithShort_(type)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  jint totalLength = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(input);
  if (totalLength < 1) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  IOSByteArray *urlAndHashListData = OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(totalLength, input);
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(urlAndHashListData);
  JavaUtilVector *url_and_hash_list = new_JavaUtilVector_init();
  while ([buf available] > 0) {
    OrgSpongycastleCryptoTlsURLAndHash *url_and_hash = OrgSpongycastleCryptoTlsURLAndHash_parseWithOrgSpongycastleCryptoTlsTlsContext_withJavaIoInputStream_(context, buf);
    [url_and_hash_list addElementWithId:url_and_hash];
  }
  return new_OrgSpongycastleCryptoTlsCertificateURL_initWithShort_withJavaUtilVector_(type, url_and_hash_list);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsCertificateURL)

@implementation OrgSpongycastleCryptoTlsCertificateURL_ListBuffer16

- (instancetype)initWithOrgSpongycastleCryptoTlsCertificateURL:(OrgSpongycastleCryptoTlsCertificateURL *)outer$ {
  OrgSpongycastleCryptoTlsCertificateURL_ListBuffer16_initWithOrgSpongycastleCryptoTlsCertificateURL_(self, outer$);
  return self;
}

- (void)encodeToWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  jint length = count_ - 2;
  OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithInt_(length);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withByteArray_withInt_(length, buf_, 0);
  [((JavaIoOutputStream *) nil_chk(output)) writeWithByteArray:buf_ withInt:0 withInt:count_];
  buf_ = nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoTlsCertificateURL:);
  methods[1].selector = @selector(encodeToWithJavaIoOutputStream:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoIOException;", "encodeTo", "LJavaIoOutputStream;", "LOrgSpongycastleCryptoTlsCertificateURL;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsCertificateURL_ListBuffer16 = { "ListBuffer16", "org.spongycastle.crypto.tls", ptrTable, methods, NULL, 7, 0x0, 2, 0, 3, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsCertificateURL_ListBuffer16;
}

@end

void OrgSpongycastleCryptoTlsCertificateURL_ListBuffer16_initWithOrgSpongycastleCryptoTlsCertificateURL_(OrgSpongycastleCryptoTlsCertificateURL_ListBuffer16 *self, OrgSpongycastleCryptoTlsCertificateURL *outer$) {
  JavaIoByteArrayOutputStream_init(self);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(0, self);
}

OrgSpongycastleCryptoTlsCertificateURL_ListBuffer16 *new_OrgSpongycastleCryptoTlsCertificateURL_ListBuffer16_initWithOrgSpongycastleCryptoTlsCertificateURL_(OrgSpongycastleCryptoTlsCertificateURL *outer$) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsCertificateURL_ListBuffer16, initWithOrgSpongycastleCryptoTlsCertificateURL_, outer$)
}

OrgSpongycastleCryptoTlsCertificateURL_ListBuffer16 *create_OrgSpongycastleCryptoTlsCertificateURL_ListBuffer16_initWithOrgSpongycastleCryptoTlsCertificateURL_(OrgSpongycastleCryptoTlsCertificateURL *outer$) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsCertificateURL_ListBuffer16, initWithOrgSpongycastleCryptoTlsCertificateURL_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsCertificateURL_ListBuffer16)
