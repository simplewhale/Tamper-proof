//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/CertificateStatusRequest.java
//

#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/CertificateStatusRequest.h"
#include "org/spongycastle/crypto/tls/CertificateStatusType.h"
#include "org/spongycastle/crypto/tls/OCSPStatusRequest.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

@implementation OrgSpongycastleCryptoTlsCertificateStatusRequest

- (instancetype)initWithShort:(jshort)statusType
                       withId:(id)request {
  OrgSpongycastleCryptoTlsCertificateStatusRequest_initWithShort_withId_(self, statusType, request);
  return self;
}

- (jshort)getStatusType {
  return statusType_;
}

- (id)getRequest {
  return request_;
}

- (OrgSpongycastleCryptoTlsOCSPStatusRequest *)getOCSPStatusRequest {
  if (!OrgSpongycastleCryptoTlsCertificateStatusRequest_isCorrectTypeWithShort_withId_(OrgSpongycastleCryptoTlsCertificateStatusType_ocsp, request_)) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"'request' is not an OCSPStatusRequest");
  }
  return (OrgSpongycastleCryptoTlsOCSPStatusRequest *) cast_chk(request_, [OrgSpongycastleCryptoTlsOCSPStatusRequest class]);
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(statusType_, output);
  switch (statusType_) {
    case OrgSpongycastleCryptoTlsCertificateStatusType_ocsp:
    [((OrgSpongycastleCryptoTlsOCSPStatusRequest *) nil_chk(((OrgSpongycastleCryptoTlsOCSPStatusRequest *) cast_chk(request_, [OrgSpongycastleCryptoTlsOCSPStatusRequest class])))) encodeWithJavaIoOutputStream:output];
    break;
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

+ (OrgSpongycastleCryptoTlsCertificateStatusRequest *)parseWithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsCertificateStatusRequest_parseWithJavaIoInputStream_(input);
}

+ (jboolean)isCorrectTypeWithShort:(jshort)statusType
                            withId:(id)request {
  return OrgSpongycastleCryptoTlsCertificateStatusRequest_isCorrectTypeWithShort_withId_(statusType, request);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsOCSPStatusRequest;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsCertificateStatusRequest;", 0x9, 4, 5, 3, -1, -1, -1 },
    { NULL, "Z", 0xc, 6, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithShort:withId:);
  methods[1].selector = @selector(getStatusType);
  methods[2].selector = @selector(getRequest);
  methods[3].selector = @selector(getOCSPStatusRequest);
  methods[4].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[5].selector = @selector(parseWithJavaIoInputStream:);
  methods[6].selector = @selector(isCorrectTypeWithShort:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "statusType_", "S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "request_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "SLNSObject;", "encode", "LJavaIoOutputStream;", "LJavaIoIOException;", "parse", "LJavaIoInputStream;", "isCorrectType" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsCertificateStatusRequest = { "CertificateStatusRequest", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsCertificateStatusRequest;
}

@end

void OrgSpongycastleCryptoTlsCertificateStatusRequest_initWithShort_withId_(OrgSpongycastleCryptoTlsCertificateStatusRequest *self, jshort statusType, id request) {
  NSObject_init(self);
  if (!OrgSpongycastleCryptoTlsCertificateStatusRequest_isCorrectTypeWithShort_withId_(statusType, request)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'request' is not an instance of the correct type");
  }
  self->statusType_ = statusType;
  self->request_ = request;
}

OrgSpongycastleCryptoTlsCertificateStatusRequest *new_OrgSpongycastleCryptoTlsCertificateStatusRequest_initWithShort_withId_(jshort statusType, id request) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsCertificateStatusRequest, initWithShort_withId_, statusType, request)
}

OrgSpongycastleCryptoTlsCertificateStatusRequest *create_OrgSpongycastleCryptoTlsCertificateStatusRequest_initWithShort_withId_(jshort statusType, id request) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsCertificateStatusRequest, initWithShort_withId_, statusType, request)
}

OrgSpongycastleCryptoTlsCertificateStatusRequest *OrgSpongycastleCryptoTlsCertificateStatusRequest_parseWithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsCertificateStatusRequest_initialize();
  jshort status_type = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
  id result;
  switch (status_type) {
    case OrgSpongycastleCryptoTlsCertificateStatusType_ocsp:
    result = OrgSpongycastleCryptoTlsOCSPStatusRequest_parseWithJavaIoInputStream_(input);
    break;
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  return new_OrgSpongycastleCryptoTlsCertificateStatusRequest_initWithShort_withId_(status_type, result);
}

jboolean OrgSpongycastleCryptoTlsCertificateStatusRequest_isCorrectTypeWithShort_withId_(jshort statusType, id request) {
  OrgSpongycastleCryptoTlsCertificateStatusRequest_initialize();
  switch (statusType) {
    case OrgSpongycastleCryptoTlsCertificateStatusType_ocsp:
    return [request isKindOfClass:[OrgSpongycastleCryptoTlsOCSPStatusRequest class]];
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'statusType' is an unsupported CertificateStatusType");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsCertificateStatusRequest)
