//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsSessionImpl.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/crypto/tls/SessionParameters.h"
#include "org/spongycastle/crypto/tls/TlsSessionImpl.h"
#include "org/spongycastle/util/Arrays.h"

@implementation OrgSpongycastleCryptoTlsTlsSessionImpl

- (instancetype)initWithByteArray:(IOSByteArray *)sessionID
withOrgSpongycastleCryptoTlsSessionParameters:(OrgSpongycastleCryptoTlsSessionParameters *)sessionParameters {
  OrgSpongycastleCryptoTlsTlsSessionImpl_initWithByteArray_withOrgSpongycastleCryptoTlsSessionParameters_(self, sessionID, sessionParameters);
  return self;
}

- (OrgSpongycastleCryptoTlsSessionParameters *)exportSessionParameters {
  @synchronized(self) {
    return self->sessionParameters_ == nil ? nil : [self->sessionParameters_ copy__];
  }
}

- (IOSByteArray *)getSessionID {
  @synchronized(self) {
    return sessionID_;
  }
}

- (void)invalidate {
  @synchronized(self) {
    if (self->sessionParameters_ != nil) {
      [self->sessionParameters_ clear];
      self->sessionParameters_ = nil;
    }
  }
}

- (jboolean)isResumable {
  @synchronized(self) {
    return self->sessionParameters_ != nil;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsSessionParameters;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withOrgSpongycastleCryptoTlsSessionParameters:);
  methods[1].selector = @selector(exportSessionParameters);
  methods[2].selector = @selector(getSessionID);
  methods[3].selector = @selector(invalidate);
  methods[4].selector = @selector(isResumable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sessionID_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sessionParameters_", "LOrgSpongycastleCryptoTlsSessionParameters;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BLOrgSpongycastleCryptoTlsSessionParameters;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsTlsSessionImpl = { "TlsSessionImpl", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x0, 5, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsTlsSessionImpl;
}

@end

void OrgSpongycastleCryptoTlsTlsSessionImpl_initWithByteArray_withOrgSpongycastleCryptoTlsSessionParameters_(OrgSpongycastleCryptoTlsTlsSessionImpl *self, IOSByteArray *sessionID, OrgSpongycastleCryptoTlsSessionParameters *sessionParameters) {
  NSObject_init(self);
  if (sessionID == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'sessionID' cannot be null");
  }
  if (sessionID->size_ < 1 || sessionID->size_ > 32) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'sessionID' must have length between 1 and 32 bytes, inclusive");
  }
  self->sessionID_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(sessionID);
  self->sessionParameters_ = sessionParameters;
}

OrgSpongycastleCryptoTlsTlsSessionImpl *new_OrgSpongycastleCryptoTlsTlsSessionImpl_initWithByteArray_withOrgSpongycastleCryptoTlsSessionParameters_(IOSByteArray *sessionID, OrgSpongycastleCryptoTlsSessionParameters *sessionParameters) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsTlsSessionImpl, initWithByteArray_withOrgSpongycastleCryptoTlsSessionParameters_, sessionID, sessionParameters)
}

OrgSpongycastleCryptoTlsTlsSessionImpl *create_OrgSpongycastleCryptoTlsTlsSessionImpl_initWithByteArray_withOrgSpongycastleCryptoTlsSessionParameters_(IOSByteArray *sessionID, OrgSpongycastleCryptoTlsSessionParameters *sessionParameters) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsTlsSessionImpl, initWithByteArray_withOrgSpongycastleCryptoTlsSessionParameters_, sessionID, sessionParameters)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsTlsSessionImpl)
