//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsDHKeyExchange.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "java/util/Vector.h"
#include "org/spongycastle/asn1/x509/Certificate.h"
#include "org/spongycastle/asn1/x509/KeyUsage.h"
#include "org/spongycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/DHParameters.h"
#include "org/spongycastle/crypto/params/DHPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/DHPublicKeyParameters.h"
#include "org/spongycastle/crypto/tls/AbstractTlsKeyExchange.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/Certificate.h"
#include "org/spongycastle/crypto/tls/CertificateRequest.h"
#include "org/spongycastle/crypto/tls/ClientCertificateType.h"
#include "org/spongycastle/crypto/tls/KeyExchangeAlgorithm.h"
#include "org/spongycastle/crypto/tls/ServerDHParams.h"
#include "org/spongycastle/crypto/tls/TlsAgreementCredentials.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsCredentials.h"
#include "org/spongycastle/crypto/tls/TlsDHKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsDHUtils.h"
#include "org/spongycastle/crypto/tls/TlsDSSSigner.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsRSASigner.h"
#include "org/spongycastle/crypto/tls/TlsSigner.h"
#include "org/spongycastle/crypto/tls/TlsSignerCredentials.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/crypto/util/PublicKeyFactory.h"

@implementation OrgSpongycastleCryptoTlsTlsDHKeyExchange

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
withOrgSpongycastleCryptoParamsDHParameters:(OrgSpongycastleCryptoParamsDHParameters *)dhParameters {
  OrgSpongycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoParamsDHParameters_(self, keyExchange, supportedSignatureAlgorithms, dhParameters);
  return self;
}

- (void)init__WithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context {
  [super init__WithOrgSpongycastleCryptoTlsTlsContext:context];
  if (self->tlsSigner_ != nil) {
    [self->tlsSigner_ init__WithOrgSpongycastleCryptoTlsTlsContext:context];
  }
}

- (void)skipServerCredentials {
  if (keyExchange_ != OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_anon) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
}

- (void)processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)serverCertificate {
  if (keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_anon) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
  if ([((OrgSpongycastleCryptoTlsCertificate *) nil_chk(serverCertificate)) isEmpty]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_bad_certificate);
  }
  OrgSpongycastleAsn1X509Certificate *x509Cert = [serverCertificate getCertificateAtWithInt:0];
  OrgSpongycastleAsn1X509SubjectPublicKeyInfo *keyInfo = [((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Cert)) getSubjectPublicKeyInfo];
  @try {
    self->serverPublicKey_ = OrgSpongycastleCryptoUtilPublicKeyFactory_createKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(keyInfo);
  }
  @catch (JavaLangRuntimeException *e) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_unsupported_certificate, e);
  }
  if (tlsSigner_ == nil) {
    @try {
      self->dhAgreePublicKey_ = OrgSpongycastleCryptoTlsTlsDHUtils_validateDHPublicKeyWithOrgSpongycastleCryptoParamsDHPublicKeyParameters_((OrgSpongycastleCryptoParamsDHPublicKeyParameters *) cast_chk(self->serverPublicKey_, [OrgSpongycastleCryptoParamsDHPublicKeyParameters class]));
      self->dhParameters_ = [self validateDHParametersWithOrgSpongycastleCryptoParamsDHParameters:[((OrgSpongycastleCryptoParamsDHPublicKeyParameters *) nil_chk(dhAgreePublicKey_)) getParameters]];
    }
    @catch (JavaLangClassCastException *e) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_certificate_unknown, e);
    }
    OrgSpongycastleCryptoTlsTlsUtils_validateKeyUsageWithOrgSpongycastleAsn1X509Certificate_withInt_(x509Cert, OrgSpongycastleAsn1X509KeyUsage_keyAgreement);
  }
  else {
    if (![tlsSigner_ isValidPublicKeyWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter:self->serverPublicKey_]) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_certificate_unknown);
    }
    OrgSpongycastleCryptoTlsTlsUtils_validateKeyUsageWithOrgSpongycastleAsn1X509Certificate_withInt_(x509Cert, OrgSpongycastleAsn1X509KeyUsage_digitalSignature);
  }
  [super processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:serverCertificate];
}

- (jboolean)requiresServerKeyExchange {
  switch (keyExchange_) {
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_anon:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_DSS:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_RSA:
    return true;
    default:
    return false;
  }
}

- (IOSByteArray *)generateServerKeyExchange {
  if (![self requiresServerKeyExchange]) {
    return nil;
  }
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  self->dhAgreePrivateKey_ = OrgSpongycastleCryptoTlsTlsDHUtils_generateEphemeralServerKeyExchangeWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoParamsDHParameters_withJavaIoOutputStream_([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecureRandom], self->dhParameters_, buf);
  return [buf toByteArray];
}

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input {
  if (![self requiresServerKeyExchange]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
  OrgSpongycastleCryptoTlsServerDHParams *dhParams = OrgSpongycastleCryptoTlsServerDHParams_parseWithJavaIoInputStream_(input);
  self->dhAgreePublicKey_ = OrgSpongycastleCryptoTlsTlsDHUtils_validateDHPublicKeyWithOrgSpongycastleCryptoParamsDHPublicKeyParameters_([((OrgSpongycastleCryptoTlsServerDHParams *) nil_chk(dhParams)) getPublicKey]);
  self->dhParameters_ = [self validateDHParametersWithOrgSpongycastleCryptoParamsDHParameters:[((OrgSpongycastleCryptoParamsDHPublicKeyParameters *) nil_chk(dhAgreePublicKey_)) getParameters]];
}

- (void)validateCertificateRequestWithOrgSpongycastleCryptoTlsCertificateRequest:(OrgSpongycastleCryptoTlsCertificateRequest *)certificateRequest {
  if (keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_anon) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_handshake_failure);
  }
  IOSShortArray *types = [((OrgSpongycastleCryptoTlsCertificateRequest *) nil_chk(certificateRequest)) getCertificateTypes];
  for (jint i = 0; i < ((IOSShortArray *) nil_chk(types))->size_; ++i) {
    switch (IOSShortArray_Get(types, i)) {
      case OrgSpongycastleCryptoTlsClientCertificateType_rsa_sign:
      case OrgSpongycastleCryptoTlsClientCertificateType_dss_sign:
      case OrgSpongycastleCryptoTlsClientCertificateType_rsa_fixed_dh:
      case OrgSpongycastleCryptoTlsClientCertificateType_dss_fixed_dh:
      case OrgSpongycastleCryptoTlsClientCertificateType_ecdsa_sign:
      break;
      default:
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
  }
}

- (void)processClientCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:(id<OrgSpongycastleCryptoTlsTlsCredentials>)clientCredentials {
  if (keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_anon) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  if ([OrgSpongycastleCryptoTlsTlsAgreementCredentials_class_() isInstance:clientCredentials]) {
    self->agreementCredentials_ = (id<OrgSpongycastleCryptoTlsTlsAgreementCredentials>) cast_check(clientCredentials, OrgSpongycastleCryptoTlsTlsAgreementCredentials_class_());
  }
  else if ([OrgSpongycastleCryptoTlsTlsSignerCredentials_class_() isInstance:clientCredentials]) {
  }
  else {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

- (void)generateClientKeyExchangeWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  if (agreementCredentials_ == nil) {
    self->dhAgreePrivateKey_ = OrgSpongycastleCryptoTlsTlsDHUtils_generateEphemeralClientKeyExchangeWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoParamsDHParameters_withJavaIoOutputStream_([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecureRandom], dhParameters_, output);
  }
}

- (void)processClientCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)clientCertificate {
  if (keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_anon) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
}

- (void)processClientKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input {
  if (dhAgreePublicKey_ != nil) {
    return;
  }
  JavaMathBigInteger *Yc = OrgSpongycastleCryptoTlsTlsDHUtils_readDHParameterWithJavaIoInputStream_(input);
  self->dhAgreePublicKey_ = OrgSpongycastleCryptoTlsTlsDHUtils_validateDHPublicKeyWithOrgSpongycastleCryptoParamsDHPublicKeyParameters_(new_OrgSpongycastleCryptoParamsDHPublicKeyParameters_initWithJavaMathBigInteger_withOrgSpongycastleCryptoParamsDHParameters_(Yc, dhParameters_));
}

- (IOSByteArray *)generatePremasterSecret {
  if (agreementCredentials_ != nil) {
    return [agreementCredentials_ generateAgreementWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter:dhAgreePublicKey_];
  }
  if (dhAgreePrivateKey_ != nil) {
    return OrgSpongycastleCryptoTlsTlsDHUtils_calculateDHBasicAgreementWithOrgSpongycastleCryptoParamsDHPublicKeyParameters_withOrgSpongycastleCryptoParamsDHPrivateKeyParameters_(dhAgreePublicKey_, dhAgreePrivateKey_);
  }
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
}

- (jint)getMinimumPrimeBits {
  return 1024;
}

- (OrgSpongycastleCryptoParamsDHParameters *)validateDHParametersWithOrgSpongycastleCryptoParamsDHParameters:(OrgSpongycastleCryptoParamsDHParameters *)params {
  if ([((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsDHParameters *) nil_chk(params)) getP])) bitLength] < [self getMinimumPrimeBits]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_insufficient_security);
  }
  return OrgSpongycastleCryptoTlsTlsDHUtils_validateDHParametersWithOrgSpongycastleCryptoParamsDHParameters_(params);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 7, 3, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoParamsDHParameters;", 0x4, 16, 17, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withJavaUtilVector:withOrgSpongycastleCryptoParamsDHParameters:);
  methods[1].selector = @selector(init__WithOrgSpongycastleCryptoTlsTlsContext:);
  methods[2].selector = @selector(skipServerCredentials);
  methods[3].selector = @selector(processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:);
  methods[4].selector = @selector(requiresServerKeyExchange);
  methods[5].selector = @selector(generateServerKeyExchange);
  methods[6].selector = @selector(processServerKeyExchangeWithJavaIoInputStream:);
  methods[7].selector = @selector(validateCertificateRequestWithOrgSpongycastleCryptoTlsCertificateRequest:);
  methods[8].selector = @selector(processClientCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:);
  methods[9].selector = @selector(generateClientKeyExchangeWithJavaIoOutputStream:);
  methods[10].selector = @selector(processClientCertificateWithOrgSpongycastleCryptoTlsCertificate:);
  methods[11].selector = @selector(processClientKeyExchangeWithJavaIoInputStream:);
  methods[12].selector = @selector(generatePremasterSecret);
  methods[13].selector = @selector(getMinimumPrimeBits);
  methods[14].selector = @selector(validateDHParametersWithOrgSpongycastleCryptoParamsDHParameters:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tlsSigner_", "LOrgSpongycastleCryptoTlsTlsSigner;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "dhParameters_", "LOrgSpongycastleCryptoParamsDHParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverPublicKey_", "LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "agreementCredentials_", "LOrgSpongycastleCryptoTlsTlsAgreementCredentials;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "dhAgreePrivateKey_", "LOrgSpongycastleCryptoParamsDHPrivateKeyParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "dhAgreePublicKey_", "LOrgSpongycastleCryptoParamsDHPublicKeyParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILJavaUtilVector;LOrgSpongycastleCryptoParamsDHParameters;", "init", "LOrgSpongycastleCryptoTlsTlsContext;", "LJavaIoIOException;", "processServerCertificate", "LOrgSpongycastleCryptoTlsCertificate;", "processServerKeyExchange", "LJavaIoInputStream;", "validateCertificateRequest", "LOrgSpongycastleCryptoTlsCertificateRequest;", "processClientCredentials", "LOrgSpongycastleCryptoTlsTlsCredentials;", "generateClientKeyExchange", "LJavaIoOutputStream;", "processClientCertificate", "processClientKeyExchange", "validateDHParameters", "LOrgSpongycastleCryptoParamsDHParameters;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsTlsDHKeyExchange = { "TlsDHKeyExchange", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 15, 6, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsTlsDHKeyExchange;
}

@end

void OrgSpongycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoParamsDHParameters_(OrgSpongycastleCryptoTlsTlsDHKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, OrgSpongycastleCryptoParamsDHParameters *dhParameters) {
  OrgSpongycastleCryptoTlsAbstractTlsKeyExchange_initWithInt_withJavaUtilVector_(self, keyExchange, supportedSignatureAlgorithms);
  switch (keyExchange) {
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_anon:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_RSA:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DH_DSS:
    self->tlsSigner_ = nil;
    break;
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_RSA:
    self->tlsSigner_ = new_OrgSpongycastleCryptoTlsTlsRSASigner_init();
    break;
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_DHE_DSS:
    self->tlsSigner_ = new_OrgSpongycastleCryptoTlsTlsDSSSigner_init();
    break;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported key exchange algorithm");
  }
  self->dhParameters_ = dhParameters;
}

OrgSpongycastleCryptoTlsTlsDHKeyExchange *new_OrgSpongycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, OrgSpongycastleCryptoParamsDHParameters *dhParameters) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsTlsDHKeyExchange, initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoParamsDHParameters_, keyExchange, supportedSignatureAlgorithms, dhParameters)
}

OrgSpongycastleCryptoTlsTlsDHKeyExchange *create_OrgSpongycastleCryptoTlsTlsDHKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, OrgSpongycastleCryptoParamsDHParameters *dhParameters) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsTlsDHKeyExchange, initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoParamsDHParameters_, keyExchange, supportedSignatureAlgorithms, dhParameters)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsTlsDHKeyExchange)
