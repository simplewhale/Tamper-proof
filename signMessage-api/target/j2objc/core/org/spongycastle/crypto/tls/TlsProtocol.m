//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsProtocol.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/security/SecureRandom.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/prng/RandomGenerator.h"
#include "org/spongycastle/crypto/tls/AbstractTlsContext.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/AlertLevel.h"
#include "org/spongycastle/crypto/tls/ByteQueue.h"
#include "org/spongycastle/crypto/tls/ByteQueueInputStream.h"
#include "org/spongycastle/crypto/tls/ByteQueueOutputStream.h"
#include "org/spongycastle/crypto/tls/Certificate.h"
#include "org/spongycastle/crypto/tls/ChangeCipherSpec.h"
#include "org/spongycastle/crypto/tls/CipherSuite.h"
#include "org/spongycastle/crypto/tls/ContentType.h"
#include "org/spongycastle/crypto/tls/ExporterLabel.h"
#include "org/spongycastle/crypto/tls/ExtensionType.h"
#include "org/spongycastle/crypto/tls/HandshakeType.h"
#include "org/spongycastle/crypto/tls/MaxFragmentLength.h"
#include "org/spongycastle/crypto/tls/PRFAlgorithm.h"
#include "org/spongycastle/crypto/tls/ProtocolVersion.h"
#include "org/spongycastle/crypto/tls/RecordStream.h"
#include "org/spongycastle/crypto/tls/SecurityParameters.h"
#include "org/spongycastle/crypto/tls/SessionParameters.h"
#include "org/spongycastle/crypto/tls/SupplementalDataEntry.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsExtensionsUtils.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlertReceived.h"
#include "org/spongycastle/crypto/tls/TlsHandshakeHash.h"
#include "org/spongycastle/crypto/tls/TlsInputStream.h"
#include "org/spongycastle/crypto/tls/TlsKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsNoCloseNotifyException.h"
#include "org/spongycastle/crypto/tls/TlsOutputStream.h"
#include "org/spongycastle/crypto/tls/TlsPeer.h"
#include "org/spongycastle/crypto/tls/TlsProtocol.h"
#include "org/spongycastle/crypto/tls/TlsSession.h"
#include "org/spongycastle/crypto/tls/TlsSessionImpl.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/Integers.h"

@interface OrgSpongycastleCryptoTlsTlsProtocol () {
 @public
  OrgSpongycastleCryptoTlsByteQueue *applicationDataQueue_;
  OrgSpongycastleCryptoTlsByteQueue *alertQueue_;
  OrgSpongycastleCryptoTlsByteQueue *handshakeQueue_;
  OrgSpongycastleCryptoTlsTlsInputStream *tlsInputStream_;
  OrgSpongycastleCryptoTlsTlsOutputStream *tlsOutputStream_;
  volatile_jboolean closed_;
  volatile_jboolean failedWithError_;
  volatile_jboolean appDataReady_;
  volatile_jboolean appDataSplitEnabled_;
  volatile_jint appDataSplitMode_;
  IOSByteArray *expected_verify_data_;
}

- (void)processHandshakeQueueWithOrgSpongycastleCryptoTlsByteQueue:(OrgSpongycastleCryptoTlsByteQueue *)queue;

- (void)processApplicationDataQueue;

- (void)processAlertQueue;

- (void)processChangeCipherSpecWithByteArray:(IOSByteArray *)buf
                                     withInt:(jint)off
                                     withInt:(jint)len;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, applicationDataQueue_, OrgSpongycastleCryptoTlsByteQueue *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, alertQueue_, OrgSpongycastleCryptoTlsByteQueue *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, handshakeQueue_, OrgSpongycastleCryptoTlsByteQueue *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, tlsInputStream_, OrgSpongycastleCryptoTlsTlsInputStream *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, tlsOutputStream_, OrgSpongycastleCryptoTlsTlsOutputStream *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsProtocol, expected_verify_data_, IOSByteArray *)

__attribute__((unused)) static void OrgSpongycastleCryptoTlsTlsProtocol_processHandshakeQueueWithOrgSpongycastleCryptoTlsByteQueue_(OrgSpongycastleCryptoTlsTlsProtocol *self, OrgSpongycastleCryptoTlsByteQueue *queue);

__attribute__((unused)) static void OrgSpongycastleCryptoTlsTlsProtocol_processApplicationDataQueue(OrgSpongycastleCryptoTlsTlsProtocol *self);

__attribute__((unused)) static void OrgSpongycastleCryptoTlsTlsProtocol_processAlertQueue(OrgSpongycastleCryptoTlsTlsProtocol *self);

__attribute__((unused)) static void OrgSpongycastleCryptoTlsTlsProtocol_processChangeCipherSpecWithByteArray_withInt_withInt_(OrgSpongycastleCryptoTlsTlsProtocol *self, IOSByteArray *buf, jint off, jint len);

@interface OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage () {
 @public
  OrgSpongycastleCryptoTlsTlsProtocol *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoTlsTlsProtocol)

JavaLangInteger *OrgSpongycastleCryptoTlsTlsProtocol_EXT_RenegotiationInfo;
JavaLangInteger *OrgSpongycastleCryptoTlsTlsProtocol_EXT_SessionTicket;

@implementation OrgSpongycastleCryptoTlsTlsProtocol

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)input
                   withJavaIoOutputStream:(JavaIoOutputStream *)output
             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  OrgSpongycastleCryptoTlsTlsProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(self, input, output, secureRandom);
  return self;
}

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  OrgSpongycastleCryptoTlsTlsProtocol_initWithJavaSecuritySecureRandom_(self, secureRandom);
  return self;
}

- (id<OrgSpongycastleCryptoTlsTlsContext>)getContext {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgSpongycastleCryptoTlsAbstractTlsContext *)getContextAdmin {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgSpongycastleCryptoTlsTlsPeer>)getPeer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)handleAlertMessageWithShort:(jshort)alertLevel
                          withShort:(jshort)alertDescription {
  [((id<OrgSpongycastleCryptoTlsTlsPeer>) nil_chk([self getPeer])) notifyAlertReceivedWithShort:alertLevel withShort:alertDescription];
  if (alertLevel == OrgSpongycastleCryptoTlsAlertLevel_warning) {
    [self handleAlertWarningMessageWithShort:alertDescription];
  }
  else {
    [self handleFailure];
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlertReceived_initWithShort_(alertDescription);
  }
}

- (void)handleAlertWarningMessageWithShort:(jshort)alertDescription {
  if (alertDescription == OrgSpongycastleCryptoTlsAlertDescription_close_notify) {
    if (!JreLoadVolatileBoolean(&appDataReady_)) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_handshake_failure);
    }
    [self handleCloseWithBoolean:false];
  }
}

- (void)handleChangeCipherSpecMessage {
}

- (void)handleCloseWithBoolean:(jboolean)user_canceled {
  if (!JreLoadVolatileBoolean(&closed_)) {
    JreAssignVolatileBoolean(&self->closed_, true);
    if (user_canceled && !JreLoadVolatileBoolean(&appDataReady_)) {
      [self raiseAlertWarningWithShort:OrgSpongycastleCryptoTlsAlertDescription_user_canceled withNSString:@"User canceled handshake"];
    }
    [self raiseAlertWarningWithShort:OrgSpongycastleCryptoTlsAlertDescription_close_notify withNSString:@"Connection closed"];
    [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) safeClose];
    if (!JreLoadVolatileBoolean(&appDataReady_)) {
      [self cleanupHandshake];
    }
  }
}

- (void)handleExceptionWithShort:(jshort)alertDescription
                    withNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause {
  if (!JreLoadVolatileBoolean(&closed_)) {
    [self raiseAlertFatalWithShort:alertDescription withNSString:message withJavaLangThrowable:cause];
    [self handleFailure];
  }
}

- (void)handleFailure {
  JreAssignVolatileBoolean(&self->closed_, true);
  JreAssignVolatileBoolean(&self->failedWithError_, true);
  [self invalidateSession];
  [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) safeClose];
  if (!JreLoadVolatileBoolean(&appDataReady_)) {
    [self cleanupHandshake];
  }
}

- (void)handleHandshakeMessageWithShort:(jshort)type
         withJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)applyMaxFragmentLengthExtension {
  if (((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters_))->maxFragmentLength_ >= 0) {
    if (!OrgSpongycastleCryptoTlsMaxFragmentLength_isValidWithShort_(securityParameters_->maxFragmentLength_)) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
    }
    jint plainTextLimit = JreLShift32(1, (8 + ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters_))->maxFragmentLength_));
    [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) setPlaintextLimitWithInt:plainTextLimit];
  }
}

- (void)checkReceivedChangeCipherSpecWithBoolean:(jboolean)expected {
  if (expected != receivedChangeCipherSpec_) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
}

- (void)cleanupHandshake {
  if (self->expected_verify_data_ != nil) {
    OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(self->expected_verify_data_, (jbyte) 0);
    self->expected_verify_data_ = nil;
  }
  [((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(self->securityParameters_)) clear];
  self->peerCertificate_ = nil;
  self->offeredCipherSuites_ = nil;
  self->offeredCompressionMethods_ = nil;
  self->clientExtensions_ = nil;
  self->serverExtensions_ = nil;
  self->resumedSession_ = false;
  self->receivedChangeCipherSpec_ = false;
  self->secure_renegotiation_ = false;
  self->allowCertificateStatus_ = false;
  self->expectSessionTicket_ = false;
}

- (void)blockForHandshake {
  if (blocking_) {
    while (self->connection_state_ != OrgSpongycastleCryptoTlsTlsProtocol_CS_END) {
      if (JreLoadVolatileBoolean(&self->closed_)) {
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
      }
      [self safeReadRecord];
    }
  }
}

- (void)completeHandshake {
  @try {
    self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_END;
    [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(self->alertQueue_)) shrink];
    [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(self->handshakeQueue_)) shrink];
    [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(self->recordStream_)) finaliseHandshake];
    JreAssignVolatileBoolean(&self->appDataSplitEnabled_, !OrgSpongycastleCryptoTlsTlsUtils_isTLSv11WithOrgSpongycastleCryptoTlsTlsContext_([self getContext]));
    if (!JreLoadVolatileBoolean(&appDataReady_)) {
      JreAssignVolatileBoolean(&self->appDataReady_, true);
      if (blocking_) {
        self->tlsInputStream_ = new_OrgSpongycastleCryptoTlsTlsInputStream_initWithOrgSpongycastleCryptoTlsTlsProtocol_(self);
        self->tlsOutputStream_ = new_OrgSpongycastleCryptoTlsTlsOutputStream_initWithOrgSpongycastleCryptoTlsTlsProtocol_(self);
      }
    }
    if (self->tlsSession_ != nil) {
      if (self->sessionParameters_ == nil) {
        self->sessionParameters_ = [((OrgSpongycastleCryptoTlsSessionParameters_Builder *) nil_chk([((OrgSpongycastleCryptoTlsSessionParameters_Builder *) nil_chk([((OrgSpongycastleCryptoTlsSessionParameters_Builder *) nil_chk([((OrgSpongycastleCryptoTlsSessionParameters_Builder *) nil_chk([((OrgSpongycastleCryptoTlsSessionParameters_Builder *) nil_chk([((OrgSpongycastleCryptoTlsSessionParameters_Builder *) nil_chk([((OrgSpongycastleCryptoTlsSessionParameters_Builder *) nil_chk([new_OrgSpongycastleCryptoTlsSessionParameters_Builder_init() setCipherSuiteWithInt:[((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(self->securityParameters_)) getCipherSuite]])) setCompressionAlgorithmWithShort:[((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(self->securityParameters_)) getCompressionAlgorithm]])) setMasterSecretWithByteArray:[((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(self->securityParameters_)) getMasterSecret]])) setPeerCertificateWithOrgSpongycastleCryptoTlsCertificate:self->peerCertificate_])) setPSKIdentityWithByteArray:[((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(self->securityParameters_)) getPSKIdentity]])) setSRPIdentityWithByteArray:[((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(self->securityParameters_)) getSRPIdentity]])) setServerExtensionsWithJavaUtilHashtable:self->serverExtensions_])) build];
        self->tlsSession_ = new_OrgSpongycastleCryptoTlsTlsSessionImpl_initWithByteArray_withOrgSpongycastleCryptoTlsSessionParameters_([((id<OrgSpongycastleCryptoTlsTlsSession>) nil_chk(self->tlsSession_)) getSessionID], self->sessionParameters_);
      }
      [((OrgSpongycastleCryptoTlsAbstractTlsContext *) nil_chk([self getContextAdmin])) setResumableSessionWithOrgSpongycastleCryptoTlsTlsSession:self->tlsSession_];
    }
    [((id<OrgSpongycastleCryptoTlsTlsPeer>) nil_chk([self getPeer])) notifyHandshakeComplete];
  }
  @finally {
    [self cleanupHandshake];
  }
}

- (void)processRecordWithShort:(jshort)protocol
                 withByteArray:(IOSByteArray *)buf
                       withInt:(jint)off
                       withInt:(jint)len {
  switch (protocol) {
    case OrgSpongycastleCryptoTlsContentType_alert:
    {
      [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(alertQueue_)) addDataWithByteArray:buf withInt:off withInt:len];
      OrgSpongycastleCryptoTlsTlsProtocol_processAlertQueue(self);
      break;
    }
    case OrgSpongycastleCryptoTlsContentType_application_data:
    {
      if (!JreLoadVolatileBoolean(&appDataReady_)) {
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
      }
      [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(applicationDataQueue_)) addDataWithByteArray:buf withInt:off withInt:len];
      OrgSpongycastleCryptoTlsTlsProtocol_processApplicationDataQueue(self);
      break;
    }
    case OrgSpongycastleCryptoTlsContentType_change_cipher_spec:
    {
      OrgSpongycastleCryptoTlsTlsProtocol_processChangeCipherSpecWithByteArray_withInt_withInt_(self, buf, off, len);
      break;
    }
    case OrgSpongycastleCryptoTlsContentType_handshake:
    {
      if ([((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(handshakeQueue_)) available] > 0) {
        [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(handshakeQueue_)) addDataWithByteArray:buf withInt:off withInt:len];
        OrgSpongycastleCryptoTlsTlsProtocol_processHandshakeQueueWithOrgSpongycastleCryptoTlsByteQueue_(self, handshakeQueue_);
      }
      else {
        OrgSpongycastleCryptoTlsByteQueue *tmpQueue = new_OrgSpongycastleCryptoTlsByteQueue_initWithByteArray_withInt_withInt_(buf, off, len);
        OrgSpongycastleCryptoTlsTlsProtocol_processHandshakeQueueWithOrgSpongycastleCryptoTlsByteQueue_(self, tmpQueue);
        jint remaining = [tmpQueue available];
        if (remaining > 0) {
          [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(handshakeQueue_)) addDataWithByteArray:buf withInt:off + len - remaining withInt:remaining];
        }
      }
      break;
    }
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

- (void)processHandshakeQueueWithOrgSpongycastleCryptoTlsByteQueue:(OrgSpongycastleCryptoTlsByteQueue *)queue {
  OrgSpongycastleCryptoTlsTlsProtocol_processHandshakeQueueWithOrgSpongycastleCryptoTlsByteQueue_(self, queue);
}

- (void)processApplicationDataQueue {
  OrgSpongycastleCryptoTlsTlsProtocol_processApplicationDataQueue(self);
}

- (void)processAlertQueue {
  OrgSpongycastleCryptoTlsTlsProtocol_processAlertQueue(self);
}

- (void)processChangeCipherSpecWithByteArray:(IOSByteArray *)buf
                                     withInt:(jint)off
                                     withInt:(jint)len {
  OrgSpongycastleCryptoTlsTlsProtocol_processChangeCipherSpecWithByteArray_withInt_withInt_(self, buf, off, len);
}

- (jint)applicationDataAvailable {
  return [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(applicationDataQueue_)) available];
}

- (jint)readApplicationDataWithByteArray:(IOSByteArray *)buf
                                 withInt:(jint)offset
                                 withInt:(jint)len {
  if (len < 1) {
    return 0;
  }
  while ([((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(applicationDataQueue_)) available] == 0) {
    if (JreLoadVolatileBoolean(&self->closed_)) {
      if (JreLoadVolatileBoolean(&self->failedWithError_)) {
        @throw new_JavaIoIOException_initWithNSString_(@"Cannot read application data on failed TLS connection");
      }
      if (!JreLoadVolatileBoolean(&appDataReady_)) {
        @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot read application data until initial handshake completed.");
      }
      return -1;
    }
    [self safeReadRecord];
  }
  len = JavaLangMath_minWithInt_withInt_(len, [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(applicationDataQueue_)) available]);
  [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(applicationDataQueue_)) removeDataWithByteArray:buf withInt:offset withInt:len withInt:0];
  return len;
}

- (void)safeCheckRecordHeaderWithByteArray:(IOSByteArray *)recordHeader {
  @try {
    [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) checkRecordHeaderWithByteArray:recordHeader];
  }
  @catch (OrgSpongycastleCryptoTlsTlsFatalAlert *e) {
    [self handleExceptionWithShort:[e getAlertDescription] withNSString:@"Failed to read record" withJavaLangThrowable:e];
    @throw e;
  }
  @catch (JavaIoIOException *e) {
    [self handleExceptionWithShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error withNSString:@"Failed to read record" withJavaLangThrowable:e];
    @throw e;
  }
  @catch (JavaLangRuntimeException *e) {
    [self handleExceptionWithShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error withNSString:@"Failed to read record" withJavaLangThrowable:e];
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_internal_error, e);
  }
}

- (void)safeReadRecord {
  @try {
    if ([((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) readRecord]) {
      return;
    }
    if (!JreLoadVolatileBoolean(&appDataReady_)) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_handshake_failure);
    }
  }
  @catch (OrgSpongycastleCryptoTlsTlsFatalAlertReceived *e) {
    @throw e;
  }
  @catch (OrgSpongycastleCryptoTlsTlsFatalAlert *e) {
    [self handleExceptionWithShort:[e getAlertDescription] withNSString:@"Failed to read record" withJavaLangThrowable:e];
    @throw e;
  }
  @catch (JavaIoIOException *e) {
    [self handleExceptionWithShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error withNSString:@"Failed to read record" withJavaLangThrowable:e];
    @throw e;
  }
  @catch (JavaLangRuntimeException *e) {
    [self handleExceptionWithShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error withNSString:@"Failed to read record" withJavaLangThrowable:e];
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_internal_error, e);
  }
  [self handleFailure];
  @throw new_OrgSpongycastleCryptoTlsTlsNoCloseNotifyException_init();
}

- (void)safeWriteRecordWithShort:(jshort)type
                   withByteArray:(IOSByteArray *)buf
                         withInt:(jint)offset
                         withInt:(jint)len {
  @try {
    [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) writeRecordWithShort:type withByteArray:buf withInt:offset withInt:len];
  }
  @catch (OrgSpongycastleCryptoTlsTlsFatalAlert *e) {
    [self handleExceptionWithShort:[e getAlertDescription] withNSString:@"Failed to write record" withJavaLangThrowable:e];
    @throw e;
  }
  @catch (JavaIoIOException *e) {
    [self handleExceptionWithShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error withNSString:@"Failed to write record" withJavaLangThrowable:e];
    @throw e;
  }
  @catch (JavaLangRuntimeException *e) {
    [self handleExceptionWithShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error withNSString:@"Failed to write record" withJavaLangThrowable:e];
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_internal_error, e);
  }
}

- (void)writeDataWithByteArray:(IOSByteArray *)buf
                       withInt:(jint)offset
                       withInt:(jint)len {
  if (JreLoadVolatileBoolean(&self->closed_)) {
    @throw new_JavaIoIOException_initWithNSString_(@"Cannot write application data on closed/failed TLS connection");
  }
  while (len > 0) {
    if (JreLoadVolatileBoolean(&self->appDataSplitEnabled_)) {
      switch (JreLoadVolatileInt(&appDataSplitMode_)) {
        case OrgSpongycastleCryptoTlsTlsProtocol_ADS_MODE_0_N_FIRSTONLY:
        JreAssignVolatileBoolean(&self->appDataSplitEnabled_, false);
        case OrgSpongycastleCryptoTlsTlsProtocol_ADS_MODE_0_N:
        [self safeWriteRecordWithShort:OrgSpongycastleCryptoTlsContentType_application_data withByteArray:JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES) withInt:0 withInt:0];
        break;
        case OrgSpongycastleCryptoTlsTlsProtocol_ADS_MODE_1_Nsub1:
        default:
        [self safeWriteRecordWithShort:OrgSpongycastleCryptoTlsContentType_application_data withByteArray:buf withInt:offset withInt:1];
        ++offset;
        --len;
        break;
      }
    }
    if (len > 0) {
      jint toWrite = JavaLangMath_minWithInt_withInt_(len, [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) getPlaintextLimit]);
      [self safeWriteRecordWithShort:OrgSpongycastleCryptoTlsContentType_application_data withByteArray:buf withInt:offset withInt:toWrite];
      offset += toWrite;
      len -= toWrite;
    }
  }
}

- (void)setAppDataSplitModeWithInt:(jint)appDataSplitMode {
  if (appDataSplitMode < OrgSpongycastleCryptoTlsTlsProtocol_ADS_MODE_1_Nsub1 || appDataSplitMode > OrgSpongycastleCryptoTlsTlsProtocol_ADS_MODE_0_N_FIRSTONLY) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Illegal appDataSplitMode mode: ", appDataSplitMode));
  }
  JreAssignVolatileInt(&self->appDataSplitMode_, appDataSplitMode);
}

- (void)writeHandshakeMessageWithByteArray:(IOSByteArray *)buf
                                   withInt:(jint)off
                                   withInt:(jint)len {
  if (len < 4) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  jshort type = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithByteArray_withInt_(buf, off);
  if (type != OrgSpongycastleCryptoTlsHandshakeType_hello_request) {
    [((JavaIoOutputStream *) nil_chk([((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) getHandshakeHashUpdater])) writeWithByteArray:buf withInt:off withInt:len];
  }
  jint total = 0;
  do {
    jint toWrite = JavaLangMath_minWithInt_withInt_(len - total, [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) getPlaintextLimit]);
    [self safeWriteRecordWithShort:OrgSpongycastleCryptoTlsContentType_handshake withByteArray:buf withInt:off + total withInt:toWrite];
    total += toWrite;
  }
  while (total < len);
}

- (JavaIoOutputStream *)getOutputStream {
  if (!blocking_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot use OutputStream in non-blocking mode! Use offerOutput() instead.");
  }
  return self->tlsOutputStream_;
}

- (JavaIoInputStream *)getInputStream {
  if (!blocking_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot use InputStream in non-blocking mode! Use offerInput() instead.");
  }
  return self->tlsInputStream_;
}

- (void)closeInput {
  if (blocking_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot use closeInput() in blocking mode!");
  }
  if (JreLoadVolatileBoolean(&closed_)) {
    return;
  }
  if ([((OrgSpongycastleCryptoTlsByteQueueInputStream *) nil_chk(inputBuffers_)) available] > 0) {
    @throw new_JavaIoEOFException_init();
  }
  if (!JreLoadVolatileBoolean(&appDataReady_)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_handshake_failure);
  }
  @throw new_OrgSpongycastleCryptoTlsTlsNoCloseNotifyException_init();
}

- (void)offerInputWithByteArray:(IOSByteArray *)input {
  if (blocking_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot use offerInput() in blocking mode! Use getInputStream() instead.");
  }
  if (JreLoadVolatileBoolean(&closed_)) {
    @throw new_JavaIoIOException_initWithNSString_(@"Connection is closed, cannot accept any more input");
  }
  [((OrgSpongycastleCryptoTlsByteQueueInputStream *) nil_chk(inputBuffers_)) addBytesWithByteArray:input];
  while ([((OrgSpongycastleCryptoTlsByteQueueInputStream *) nil_chk(inputBuffers_)) available] >= OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_SIZE) {
    IOSByteArray *recordHeader = [IOSByteArray newArrayWithLength:OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_SIZE];
    [((OrgSpongycastleCryptoTlsByteQueueInputStream *) nil_chk(inputBuffers_)) peekWithByteArray:recordHeader];
    jint totalLength = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithByteArray_withInt_(recordHeader, OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_LENGTH_OFFSET) + OrgSpongycastleCryptoTlsRecordStream_TLS_HEADER_SIZE;
    if ([((OrgSpongycastleCryptoTlsByteQueueInputStream *) nil_chk(inputBuffers_)) available] < totalLength) {
      [self safeCheckRecordHeaderWithByteArray:recordHeader];
      break;
    }
    [self safeReadRecord];
    if (JreLoadVolatileBoolean(&closed_)) {
      if (connection_state_ != OrgSpongycastleCryptoTlsTlsProtocol_CS_END) {
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
      }
      break;
    }
  }
}

- (jint)getAvailableInputBytes {
  if (blocking_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot use getAvailableInputBytes() in blocking mode! Use getInputStream().available() instead.");
  }
  return [self applicationDataAvailable];
}

- (jint)readInputWithByteArray:(IOSByteArray *)buffer
                       withInt:(jint)offset
                       withInt:(jint)length {
  if (blocking_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot use readInput() in blocking mode! Use getInputStream() instead.");
  }
  @try {
    return [self readApplicationDataWithByteArray:buffer withInt:offset withInt:JavaLangMath_minWithInt_withInt_(length, [self applicationDataAvailable])];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangRuntimeException_initWithNSString_([e description]);
  }
}

- (void)offerOutputWithByteArray:(IOSByteArray *)buffer
                         withInt:(jint)offset
                         withInt:(jint)length {
  if (blocking_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot use offerOutput() in blocking mode! Use getOutputStream() instead.");
  }
  if (!JreLoadVolatileBoolean(&appDataReady_)) {
    @throw new_JavaIoIOException_initWithNSString_(@"Application data cannot be sent until the handshake is complete!");
  }
  [self writeDataWithByteArray:buffer withInt:offset withInt:length];
}

- (jint)getAvailableOutputBytes {
  if (blocking_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot use getAvailableOutputBytes() in blocking mode! Use getOutputStream() instead.");
  }
  return [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk([((OrgSpongycastleCryptoTlsByteQueueOutputStream *) nil_chk(outputBuffer_)) getBuffer])) available];
}

- (jint)readOutputWithByteArray:(IOSByteArray *)buffer
                        withInt:(jint)offset
                        withInt:(jint)length {
  if (blocking_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Cannot use readOutput() in blocking mode! Use getOutputStream() instead.");
  }
  jint bytesToRead = JavaLangMath_minWithInt_withInt_([self getAvailableOutputBytes], length);
  [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk([((OrgSpongycastleCryptoTlsByteQueueOutputStream *) nil_chk(outputBuffer_)) getBuffer])) removeDataWithByteArray:buffer withInt:offset withInt:bytesToRead withInt:0];
  return bytesToRead;
}

- (void)invalidateSession {
  if (self->sessionParameters_ != nil) {
    [self->sessionParameters_ clear];
    self->sessionParameters_ = nil;
  }
  if (self->tlsSession_ != nil) {
    [self->tlsSession_ invalidate];
    self->tlsSession_ = nil;
  }
}

- (void)processFinishedMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf {
  if (expected_verify_data_ == nil) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  IOSByteArray *verify_data = OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(expected_verify_data_->size_, buf);
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  if (!OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(expected_verify_data_, verify_data)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decrypt_error);
  }
}

- (void)raiseAlertFatalWithShort:(jshort)alertDescription
                    withNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)cause {
  [((id<OrgSpongycastleCryptoTlsTlsPeer>) nil_chk([self getPeer])) notifyAlertRaisedWithShort:OrgSpongycastleCryptoTlsAlertLevel_fatal withShort:alertDescription withNSString:message withJavaLangThrowable:cause];
  IOSByteArray *alert = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) OrgSpongycastleCryptoTlsAlertLevel_fatal, (jbyte) alertDescription } count:2];
  @try {
    [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) writeRecordWithShort:OrgSpongycastleCryptoTlsContentType_alert withByteArray:alert withInt:0 withInt:2];
  }
  @catch (JavaLangException *e) {
  }
}

- (void)raiseAlertWarningWithShort:(jshort)alertDescription
                      withNSString:(NSString *)message {
  [((id<OrgSpongycastleCryptoTlsTlsPeer>) nil_chk([self getPeer])) notifyAlertRaisedWithShort:OrgSpongycastleCryptoTlsAlertLevel_warning withShort:alertDescription withNSString:message withJavaLangThrowable:nil];
  IOSByteArray *alert = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) OrgSpongycastleCryptoTlsAlertLevel_warning, (jbyte) alertDescription } count:2];
  [self safeWriteRecordWithShort:OrgSpongycastleCryptoTlsContentType_alert withByteArray:alert withInt:0 withInt:2];
}

- (void)sendCertificateMessageWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)certificate {
  if (certificate == nil) {
    certificate = JreLoadStatic(OrgSpongycastleCryptoTlsCertificate, EMPTY_CHAIN);
  }
  if ([((OrgSpongycastleCryptoTlsCertificate *) nil_chk(certificate)) isEmpty]) {
    id<OrgSpongycastleCryptoTlsTlsContext> context = [self getContext];
    if (![((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context)) isServer]) {
      OrgSpongycastleCryptoTlsProtocolVersion *serverVersion = [((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk([self getContext])) getServerVersion];
      if ([((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(serverVersion)) isSSL]) {
        NSString *errorMessage = JreStrcat("$$", [serverVersion description], @" client didn't provide credentials");
        [self raiseAlertWarningWithShort:OrgSpongycastleCryptoTlsAlertDescription_no_certificate withNSString:errorMessage];
        return;
      }
    }
  }
  OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *message = new_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_(self, OrgSpongycastleCryptoTlsHandshakeType_certificate);
  [certificate encodeWithJavaIoOutputStream:message];
  [message writeToRecordStream];
}

- (void)sendChangeCipherSpecMessage {
  IOSByteArray *message = [IOSByteArray newArrayWithBytes:(jbyte[]){ 1 } count:1];
  [self safeWriteRecordWithShort:OrgSpongycastleCryptoTlsContentType_change_cipher_spec withByteArray:message withInt:0 withInt:message->size_];
  [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) sentWriteCipherSpec];
}

- (void)sendFinishedMessage {
  IOSByteArray *verify_data = [self createVerifyDataWithBoolean:[((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk([self getContext])) isServer]];
  OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *message = new_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_withInt_(self, OrgSpongycastleCryptoTlsHandshakeType_finished, ((IOSByteArray *) nil_chk(verify_data))->size_);
  [message writeWithByteArray:verify_data];
  [message writeToRecordStream];
}

- (void)sendSupplementalDataMessageWithJavaUtilVector:(JavaUtilVector *)supplementalData {
  OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *message = new_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_(self, OrgSpongycastleCryptoTlsHandshakeType_supplemental_data);
  OrgSpongycastleCryptoTlsTlsProtocol_writeSupplementalDataWithJavaIoOutputStream_withJavaUtilVector_(message, supplementalData);
  [message writeToRecordStream];
}

- (IOSByteArray *)createVerifyDataWithBoolean:(jboolean)isServer {
  id<OrgSpongycastleCryptoTlsTlsContext> context = [self getContext];
  NSString *asciiLabel = isServer ? OrgSpongycastleCryptoTlsExporterLabel_server_finished : OrgSpongycastleCryptoTlsExporterLabel_client_finished;
  IOSByteArray *sslSender = isServer ? JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, SSL_SERVER) : JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, SSL_CLIENT);
  IOSByteArray *hash_ = OrgSpongycastleCryptoTlsTlsProtocol_getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsHandshakeHash_withByteArray_(context, [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) getHandshakeHash], sslSender);
  return OrgSpongycastleCryptoTlsTlsUtils_calculateVerifyDataWithOrgSpongycastleCryptoTlsTlsContext_withNSString_withByteArray_(context, asciiLabel, hash_);
}

- (void)close {
  [self handleCloseWithBoolean:true];
}

- (void)flush {
  [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) flush];
}

- (jboolean)isClosed {
  return JreLoadVolatileBoolean(&closed_);
}

- (jshort)processMaxFragmentLengthExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)clientExtensions
                                           withJavaUtilHashtable:(JavaUtilHashtable *)serverExtensions
                                                       withShort:(jshort)alertDescription {
  jshort maxFragmentLength = OrgSpongycastleCryptoTlsTlsExtensionsUtils_getMaxFragmentLengthExtensionWithJavaUtilHashtable_(serverExtensions);
  if (maxFragmentLength >= 0) {
    if (!OrgSpongycastleCryptoTlsMaxFragmentLength_isValidWithShort_(maxFragmentLength) || (!self->resumedSession_ && maxFragmentLength != OrgSpongycastleCryptoTlsTlsExtensionsUtils_getMaxFragmentLengthExtensionWithJavaUtilHashtable_(clientExtensions))) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(alertDescription);
    }
  }
  return maxFragmentLength;
}

- (void)refuseRenegotiation {
  if (OrgSpongycastleCryptoTlsTlsUtils_isSSLWithOrgSpongycastleCryptoTlsTlsContext_([self getContext])) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_handshake_failure);
  }
  [self raiseAlertWarningWithShort:OrgSpongycastleCryptoTlsAlertDescription_no_renegotiation withNSString:@"Renegotiation not supported"];
}

+ (void)assertEmptyWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf {
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
}

+ (IOSByteArray *)createRandomBlockWithBoolean:(jboolean)useGMTUnixTime
  withOrgSpongycastleCryptoPrngRandomGenerator:(id<OrgSpongycastleCryptoPrngRandomGenerator>)randomGenerator {
  return OrgSpongycastleCryptoTlsTlsProtocol_createRandomBlockWithBoolean_withOrgSpongycastleCryptoPrngRandomGenerator_(useGMTUnixTime, randomGenerator);
}

+ (IOSByteArray *)createRenegotiationInfoWithByteArray:(IOSByteArray *)renegotiated_connection {
  return OrgSpongycastleCryptoTlsTlsProtocol_createRenegotiationInfoWithByteArray_(renegotiated_connection);
}

+ (void)establishMasterSecretWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                         withOrgSpongycastleCryptoTlsTlsKeyExchange:(id<OrgSpongycastleCryptoTlsTlsKeyExchange>)keyExchange {
  OrgSpongycastleCryptoTlsTlsProtocol_establishMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsKeyExchange_(context, keyExchange);
}

+ (IOSByteArray *)getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                             withOrgSpongycastleCryptoTlsTlsHandshakeHash:(id<OrgSpongycastleCryptoTlsTlsHandshakeHash>)handshakeHash
                                                            withByteArray:(IOSByteArray *)sslSender {
  return OrgSpongycastleCryptoTlsTlsProtocol_getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsHandshakeHash_withByteArray_(context, handshakeHash, sslSender);
}

+ (JavaUtilHashtable *)readExtensionsWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsProtocol_readExtensionsWithJavaIoByteArrayInputStream_(input);
}

+ (JavaUtilVector *)readSupplementalDataMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)input {
  return OrgSpongycastleCryptoTlsTlsProtocol_readSupplementalDataMessageWithJavaIoByteArrayInputStream_(input);
}

+ (void)writeExtensionsWithJavaIoOutputStream:(JavaIoOutputStream *)output
                        withJavaUtilHashtable:(JavaUtilHashtable *)extensions {
  OrgSpongycastleCryptoTlsTlsProtocol_writeExtensionsWithJavaIoOutputStream_withJavaUtilHashtable_(output, extensions);
}

+ (void)writeSelectedExtensionsWithJavaIoOutputStream:(JavaIoOutputStream *)output
                                withJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                          withBoolean:(jboolean)selectEmpty {
  OrgSpongycastleCryptoTlsTlsProtocol_writeSelectedExtensionsWithJavaIoOutputStream_withJavaUtilHashtable_withBoolean_(output, extensions, selectEmpty);
}

+ (void)writeSupplementalDataWithJavaIoOutputStream:(JavaIoOutputStream *)output
                                 withJavaUtilVector:(JavaUtilVector *)supplementalData {
  OrgSpongycastleCryptoTlsTlsProtocol_writeSupplementalDataWithJavaIoOutputStream_withJavaUtilVector_(output, supplementalData);
}

+ (jint)getPRFAlgorithmWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                      withInt:(jint)ciphersuite {
  return OrgSpongycastleCryptoTlsTlsProtocol_getPRFAlgorithmWithOrgSpongycastleCryptoTlsTlsContext_withInt_(context, ciphersuite);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsContext;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsAbstractTlsContext;", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsPeer;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 11, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 8, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 15, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, 4, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, 4, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 20, 19, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 21, 22, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 23, 15, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 24, 19, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 27, 19, 4, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 22, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 29, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 19, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 31, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 32, 33, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 34, 10, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 35, 36, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 37, 38, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 39, 40, 4, -1, -1, -1 },
    { NULL, "[B", 0x4, 41, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x4, 42, 43, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0xc, 44, 33, 4, -1, -1, -1 },
    { NULL, "[B", 0xc, 45, 46, -1, -1, -1, -1 },
    { NULL, "[B", 0xc, 47, 22, 4, -1, -1, -1 },
    { NULL, "V", 0xc, 48, 49, 4, -1, -1, -1 },
    { NULL, "[B", 0xc, 50, 51, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashtable;", 0xc, 52, 33, 4, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0xc, 53, 33, 4, -1, -1, -1 },
    { NULL, "V", 0xc, 54, 55, 4, -1, -1, -1 },
    { NULL, "V", 0xc, 56, 57, 4, -1, -1, -1 },
    { NULL, "V", 0xc, 58, 59, 4, -1, -1, -1 },
    { NULL, "I", 0xc, 60, 61, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:withJavaIoOutputStream:withJavaSecuritySecureRandom:);
  methods[1].selector = @selector(initWithJavaSecuritySecureRandom:);
  methods[2].selector = @selector(getContext);
  methods[3].selector = @selector(getContextAdmin);
  methods[4].selector = @selector(getPeer);
  methods[5].selector = @selector(handleAlertMessageWithShort:withShort:);
  methods[6].selector = @selector(handleAlertWarningMessageWithShort:);
  methods[7].selector = @selector(handleChangeCipherSpecMessage);
  methods[8].selector = @selector(handleCloseWithBoolean:);
  methods[9].selector = @selector(handleExceptionWithShort:withNSString:withJavaLangThrowable:);
  methods[10].selector = @selector(handleFailure);
  methods[11].selector = @selector(handleHandshakeMessageWithShort:withJavaIoByteArrayInputStream:);
  methods[12].selector = @selector(applyMaxFragmentLengthExtension);
  methods[13].selector = @selector(checkReceivedChangeCipherSpecWithBoolean:);
  methods[14].selector = @selector(cleanupHandshake);
  methods[15].selector = @selector(blockForHandshake);
  methods[16].selector = @selector(completeHandshake);
  methods[17].selector = @selector(processRecordWithShort:withByteArray:withInt:withInt:);
  methods[18].selector = @selector(processHandshakeQueueWithOrgSpongycastleCryptoTlsByteQueue:);
  methods[19].selector = @selector(processApplicationDataQueue);
  methods[20].selector = @selector(processAlertQueue);
  methods[21].selector = @selector(processChangeCipherSpecWithByteArray:withInt:withInt:);
  methods[22].selector = @selector(applicationDataAvailable);
  methods[23].selector = @selector(readApplicationDataWithByteArray:withInt:withInt:);
  methods[24].selector = @selector(safeCheckRecordHeaderWithByteArray:);
  methods[25].selector = @selector(safeReadRecord);
  methods[26].selector = @selector(safeWriteRecordWithShort:withByteArray:withInt:withInt:);
  methods[27].selector = @selector(writeDataWithByteArray:withInt:withInt:);
  methods[28].selector = @selector(setAppDataSplitModeWithInt:);
  methods[29].selector = @selector(writeHandshakeMessageWithByteArray:withInt:withInt:);
  methods[30].selector = @selector(getOutputStream);
  methods[31].selector = @selector(getInputStream);
  methods[32].selector = @selector(closeInput);
  methods[33].selector = @selector(offerInputWithByteArray:);
  methods[34].selector = @selector(getAvailableInputBytes);
  methods[35].selector = @selector(readInputWithByteArray:withInt:withInt:);
  methods[36].selector = @selector(offerOutputWithByteArray:withInt:withInt:);
  methods[37].selector = @selector(getAvailableOutputBytes);
  methods[38].selector = @selector(readOutputWithByteArray:withInt:withInt:);
  methods[39].selector = @selector(invalidateSession);
  methods[40].selector = @selector(processFinishedMessageWithJavaIoByteArrayInputStream:);
  methods[41].selector = @selector(raiseAlertFatalWithShort:withNSString:withJavaLangThrowable:);
  methods[42].selector = @selector(raiseAlertWarningWithShort:withNSString:);
  methods[43].selector = @selector(sendCertificateMessageWithOrgSpongycastleCryptoTlsCertificate:);
  methods[44].selector = @selector(sendChangeCipherSpecMessage);
  methods[45].selector = @selector(sendFinishedMessage);
  methods[46].selector = @selector(sendSupplementalDataMessageWithJavaUtilVector:);
  methods[47].selector = @selector(createVerifyDataWithBoolean:);
  methods[48].selector = @selector(close);
  methods[49].selector = @selector(flush);
  methods[50].selector = @selector(isClosed);
  methods[51].selector = @selector(processMaxFragmentLengthExtensionWithJavaUtilHashtable:withJavaUtilHashtable:withShort:);
  methods[52].selector = @selector(refuseRenegotiation);
  methods[53].selector = @selector(assertEmptyWithJavaIoByteArrayInputStream:);
  methods[54].selector = @selector(createRandomBlockWithBoolean:withOrgSpongycastleCryptoPrngRandomGenerator:);
  methods[55].selector = @selector(createRenegotiationInfoWithByteArray:);
  methods[56].selector = @selector(establishMasterSecretWithOrgSpongycastleCryptoTlsTlsContext:withOrgSpongycastleCryptoTlsTlsKeyExchange:);
  methods[57].selector = @selector(getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext:withOrgSpongycastleCryptoTlsTlsHandshakeHash:withByteArray:);
  methods[58].selector = @selector(readExtensionsWithJavaIoByteArrayInputStream:);
  methods[59].selector = @selector(readSupplementalDataMessageWithJavaIoByteArrayInputStream:);
  methods[60].selector = @selector(writeExtensionsWithJavaIoOutputStream:withJavaUtilHashtable:);
  methods[61].selector = @selector(writeSelectedExtensionsWithJavaIoOutputStream:withJavaUtilHashtable:withBoolean:);
  methods[62].selector = @selector(writeSupplementalDataWithJavaIoOutputStream:withJavaUtilVector:);
  methods[63].selector = @selector(getPRFAlgorithmWithOrgSpongycastleCryptoTlsTlsContext:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EXT_RenegotiationInfo", "LJavaLangInteger;", .constantValue.asLong = 0, 0x1c, -1, 62, -1, -1 },
    { "EXT_SessionTicket", "LJavaLangInteger;", .constantValue.asLong = 0, 0x1c, -1, 63, -1, -1 },
    { "CS_START", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_START, 0x1c, -1, -1, -1, -1 },
    { "CS_CLIENT_HELLO", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_HELLO, 0x1c, -1, -1, -1, -1 },
    { "CS_SERVER_HELLO", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_HELLO, 0x1c, -1, -1, -1, -1 },
    { "CS_SERVER_SUPPLEMENTAL_DATA", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_SUPPLEMENTAL_DATA, 0x1c, -1, -1, -1, -1 },
    { "CS_SERVER_CERTIFICATE", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_CERTIFICATE, 0x1c, -1, -1, -1, -1 },
    { "CS_CERTIFICATE_STATUS", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_CERTIFICATE_STATUS, 0x1c, -1, -1, -1, -1 },
    { "CS_SERVER_KEY_EXCHANGE", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_KEY_EXCHANGE, 0x1c, -1, -1, -1, -1 },
    { "CS_CERTIFICATE_REQUEST", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_CERTIFICATE_REQUEST, 0x1c, -1, -1, -1, -1 },
    { "CS_SERVER_HELLO_DONE", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_HELLO_DONE, 0x1c, -1, -1, -1, -1 },
    { "CS_CLIENT_SUPPLEMENTAL_DATA", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_SUPPLEMENTAL_DATA, 0x1c, -1, -1, -1, -1 },
    { "CS_CLIENT_CERTIFICATE", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_CERTIFICATE, 0x1c, -1, -1, -1, -1 },
    { "CS_CLIENT_KEY_EXCHANGE", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_KEY_EXCHANGE, 0x1c, -1, -1, -1, -1 },
    { "CS_CERTIFICATE_VERIFY", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_CERTIFICATE_VERIFY, 0x1c, -1, -1, -1, -1 },
    { "CS_CLIENT_FINISHED", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_FINISHED, 0x1c, -1, -1, -1, -1 },
    { "CS_SERVER_SESSION_TICKET", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_SESSION_TICKET, 0x1c, -1, -1, -1, -1 },
    { "CS_SERVER_FINISHED", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_FINISHED, 0x1c, -1, -1, -1, -1 },
    { "CS_END", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_CS_END, 0x1c, -1, -1, -1, -1 },
    { "ADS_MODE_1_Nsub1", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_ADS_MODE_1_Nsub1, 0x1c, -1, -1, -1, -1 },
    { "ADS_MODE_0_N", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_ADS_MODE_0_N, 0x1c, -1, -1, -1, -1 },
    { "ADS_MODE_0_N_FIRSTONLY", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsTlsProtocol_ADS_MODE_0_N_FIRSTONLY, 0x1c, -1, -1, -1, -1 },
    { "applicationDataQueue_", "LOrgSpongycastleCryptoTlsByteQueue;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "alertQueue_", "LOrgSpongycastleCryptoTlsByteQueue;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "handshakeQueue_", "LOrgSpongycastleCryptoTlsByteQueue;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "recordStream_", "LOrgSpongycastleCryptoTlsRecordStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "secureRandom_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "tlsInputStream_", "LOrgSpongycastleCryptoTlsTlsInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tlsOutputStream_", "LOrgSpongycastleCryptoTlsTlsOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "failedWithError_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "appDataReady_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "appDataSplitEnabled_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "appDataSplitMode_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "expected_verify_data_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tlsSession_", "LOrgSpongycastleCryptoTlsTlsSession;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sessionParameters_", "LOrgSpongycastleCryptoTlsSessionParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "securityParameters_", "LOrgSpongycastleCryptoTlsSecurityParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "peerCertificate_", "LOrgSpongycastleCryptoTlsCertificate;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "offeredCipherSuites_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "offeredCompressionMethods_", "[S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "clientExtensions_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverExtensions_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "connection_state_", "S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "resumedSession_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "receivedChangeCipherSpec_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "secure_renegotiation_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "allowCertificateStatus_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "expectSessionTicket_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "blocking_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "inputBuffers_", "LOrgSpongycastleCryptoTlsByteQueueInputStream;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "outputBuffer_", "LOrgSpongycastleCryptoTlsByteQueueOutputStream;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;LJavaIoOutputStream;LJavaSecuritySecureRandom;", "LJavaSecuritySecureRandom;", "handleAlertMessage", "SS", "LJavaIoIOException;", "handleAlertWarningMessage", "S", "handleClose", "Z", "handleException", "SLNSString;LJavaLangThrowable;", "handleHandshakeMessage", "SLJavaIoByteArrayInputStream;", "checkReceivedChangeCipherSpec", "processRecord", "S[BII", "processHandshakeQueue", "LOrgSpongycastleCryptoTlsByteQueue;", "processChangeCipherSpec", "[BII", "readApplicationData", "safeCheckRecordHeader", "[B", "safeWriteRecord", "writeData", "setAppDataSplitMode", "I", "writeHandshakeMessage", "offerInput", "readInput", "offerOutput", "readOutput", "processFinishedMessage", "LJavaIoByteArrayInputStream;", "raiseAlertFatal", "raiseAlertWarning", "SLNSString;", "sendCertificateMessage", "LOrgSpongycastleCryptoTlsCertificate;", "sendSupplementalDataMessage", "LJavaUtilVector;", "createVerifyData", "processMaxFragmentLengthExtension", "LJavaUtilHashtable;LJavaUtilHashtable;S", "assertEmpty", "createRandomBlock", "ZLOrgSpongycastleCryptoPrngRandomGenerator;", "createRenegotiationInfo", "establishMasterSecret", "LOrgSpongycastleCryptoTlsTlsContext;LOrgSpongycastleCryptoTlsTlsKeyExchange;", "getCurrentPRFHash", "LOrgSpongycastleCryptoTlsTlsContext;LOrgSpongycastleCryptoTlsTlsHandshakeHash;[B", "readExtensions", "readSupplementalDataMessage", "writeExtensions", "LJavaIoOutputStream;LJavaUtilHashtable;", "writeSelectedExtensions", "LJavaIoOutputStream;LJavaUtilHashtable;Z", "writeSupplementalData", "LJavaIoOutputStream;LJavaUtilVector;", "getPRFAlgorithm", "LOrgSpongycastleCryptoTlsTlsContext;I", &OrgSpongycastleCryptoTlsTlsProtocol_EXT_RenegotiationInfo, &OrgSpongycastleCryptoTlsTlsProtocol_EXT_SessionTicket, "LOrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsTlsProtocol = { "TlsProtocol", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x401, 64, 52, -1, 64, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsTlsProtocol;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoTlsTlsProtocol class]) {
    OrgSpongycastleCryptoTlsTlsProtocol_EXT_RenegotiationInfo = OrgSpongycastleUtilIntegers_valueOfWithInt_(OrgSpongycastleCryptoTlsExtensionType_renegotiation_info);
    OrgSpongycastleCryptoTlsTlsProtocol_EXT_SessionTicket = OrgSpongycastleUtilIntegers_valueOfWithInt_(OrgSpongycastleCryptoTlsExtensionType_session_ticket);
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoTlsTlsProtocol)
  }
}

@end

void OrgSpongycastleCryptoTlsTlsProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(OrgSpongycastleCryptoTlsTlsProtocol *self, JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom) {
  NSObject_init(self);
  self->applicationDataQueue_ = new_OrgSpongycastleCryptoTlsByteQueue_initWithInt_(0);
  self->alertQueue_ = new_OrgSpongycastleCryptoTlsByteQueue_initWithInt_(2);
  self->handshakeQueue_ = new_OrgSpongycastleCryptoTlsByteQueue_initWithInt_(0);
  self->tlsInputStream_ = nil;
  self->tlsOutputStream_ = nil;
  JreAssignVolatileBoolean(&self->closed_, false);
  JreAssignVolatileBoolean(&self->failedWithError_, false);
  JreAssignVolatileBoolean(&self->appDataReady_, false);
  JreAssignVolatileBoolean(&self->appDataSplitEnabled_, true);
  JreAssignVolatileInt(&self->appDataSplitMode_, OrgSpongycastleCryptoTlsTlsProtocol_ADS_MODE_1_Nsub1);
  self->expected_verify_data_ = nil;
  self->tlsSession_ = nil;
  self->sessionParameters_ = nil;
  self->securityParameters_ = nil;
  self->peerCertificate_ = nil;
  self->offeredCipherSuites_ = nil;
  self->offeredCompressionMethods_ = nil;
  self->clientExtensions_ = nil;
  self->serverExtensions_ = nil;
  self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_START;
  self->resumedSession_ = false;
  self->receivedChangeCipherSpec_ = false;
  self->secure_renegotiation_ = false;
  self->allowCertificateStatus_ = false;
  self->expectSessionTicket_ = false;
  self->blocking_ = true;
  self->recordStream_ = new_OrgSpongycastleCryptoTlsRecordStream_initWithOrgSpongycastleCryptoTlsTlsProtocol_withJavaIoInputStream_withJavaIoOutputStream_(self, input, output);
  self->secureRandom_ = secureRandom;
}

void OrgSpongycastleCryptoTlsTlsProtocol_initWithJavaSecuritySecureRandom_(OrgSpongycastleCryptoTlsTlsProtocol *self, JavaSecuritySecureRandom *secureRandom) {
  NSObject_init(self);
  self->applicationDataQueue_ = new_OrgSpongycastleCryptoTlsByteQueue_initWithInt_(0);
  self->alertQueue_ = new_OrgSpongycastleCryptoTlsByteQueue_initWithInt_(2);
  self->handshakeQueue_ = new_OrgSpongycastleCryptoTlsByteQueue_initWithInt_(0);
  self->tlsInputStream_ = nil;
  self->tlsOutputStream_ = nil;
  JreAssignVolatileBoolean(&self->closed_, false);
  JreAssignVolatileBoolean(&self->failedWithError_, false);
  JreAssignVolatileBoolean(&self->appDataReady_, false);
  JreAssignVolatileBoolean(&self->appDataSplitEnabled_, true);
  JreAssignVolatileInt(&self->appDataSplitMode_, OrgSpongycastleCryptoTlsTlsProtocol_ADS_MODE_1_Nsub1);
  self->expected_verify_data_ = nil;
  self->tlsSession_ = nil;
  self->sessionParameters_ = nil;
  self->securityParameters_ = nil;
  self->peerCertificate_ = nil;
  self->offeredCipherSuites_ = nil;
  self->offeredCompressionMethods_ = nil;
  self->clientExtensions_ = nil;
  self->serverExtensions_ = nil;
  self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_START;
  self->resumedSession_ = false;
  self->receivedChangeCipherSpec_ = false;
  self->secure_renegotiation_ = false;
  self->allowCertificateStatus_ = false;
  self->expectSessionTicket_ = false;
  self->blocking_ = false;
  self->inputBuffers_ = new_OrgSpongycastleCryptoTlsByteQueueInputStream_init();
  self->outputBuffer_ = new_OrgSpongycastleCryptoTlsByteQueueOutputStream_init();
  self->recordStream_ = new_OrgSpongycastleCryptoTlsRecordStream_initWithOrgSpongycastleCryptoTlsTlsProtocol_withJavaIoInputStream_withJavaIoOutputStream_(self, self->inputBuffers_, self->outputBuffer_);
  self->secureRandom_ = secureRandom;
}

void OrgSpongycastleCryptoTlsTlsProtocol_processHandshakeQueueWithOrgSpongycastleCryptoTlsByteQueue_(OrgSpongycastleCryptoTlsTlsProtocol *self, OrgSpongycastleCryptoTlsByteQueue *queue) {
  while ([((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(queue)) available] >= 4) {
    IOSByteArray *beginning = [IOSByteArray newArrayWithLength:4];
    [queue readWithByteArray:beginning withInt:0 withInt:4 withInt:0];
    jshort type = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithByteArray_withInt_(beginning, 0);
    jint length = OrgSpongycastleCryptoTlsTlsUtils_readUint24WithByteArray_withInt_(beginning, 1);
    jint totalLength = 4 + length;
    if ([queue available] < totalLength) {
      break;
    }
    [self checkReceivedChangeCipherSpecWithBoolean:self->connection_state_ == OrgSpongycastleCryptoTlsTlsProtocol_CS_END || type == OrgSpongycastleCryptoTlsHandshakeType_finished];
    switch (type) {
      case OrgSpongycastleCryptoTlsHandshakeType_hello_request:
      break;
      case OrgSpongycastleCryptoTlsHandshakeType_finished:
      {
        id<OrgSpongycastleCryptoTlsTlsContext> ctx = [self getContext];
        if (self->expected_verify_data_ == nil && [((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(ctx)) getSecurityParameters])) getMasterSecret] != nil) {
          self->expected_verify_data_ = [self createVerifyDataWithBoolean:![((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(ctx)) isServer]];
        }
      }
      default:
      [queue copyToWithJavaIoOutputStream:[((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(self->recordStream_)) getHandshakeHashUpdater] withInt:totalLength];
      break;
    }
    [queue removeDataWithInt:4];
    JavaIoByteArrayInputStream *buf = [queue readFromWithInt:length];
    [self handleHandshakeMessageWithShort:type withJavaIoByteArrayInputStream:buf];
  }
}

void OrgSpongycastleCryptoTlsTlsProtocol_processApplicationDataQueue(OrgSpongycastleCryptoTlsTlsProtocol *self) {
}

void OrgSpongycastleCryptoTlsTlsProtocol_processAlertQueue(OrgSpongycastleCryptoTlsTlsProtocol *self) {
  while ([((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(self->alertQueue_)) available] >= 2) {
    IOSByteArray *alert = [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(self->alertQueue_)) removeDataWithInt:2 withInt:0];
    jshort alertLevel = IOSByteArray_Get(nil_chk(alert), 0);
    jshort alertDescription = IOSByteArray_Get(alert, 1);
    [self handleAlertMessageWithShort:alertLevel withShort:alertDescription];
  }
}

void OrgSpongycastleCryptoTlsTlsProtocol_processChangeCipherSpecWithByteArray_withInt_withInt_(OrgSpongycastleCryptoTlsTlsProtocol *self, IOSByteArray *buf, jint off, jint len) {
  for (jint i = 0; i < len; ++i) {
    jshort message = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithByteArray_withInt_(buf, off + i);
    if (message != OrgSpongycastleCryptoTlsChangeCipherSpec_change_cipher_spec) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
    }
    if (self->receivedChangeCipherSpec_ || [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(self->alertQueue_)) available] > 0 || [((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(self->handshakeQueue_)) available] > 0) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
    }
    [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(self->recordStream_)) receivedReadCipherSpec];
    self->receivedChangeCipherSpec_ = true;
    [self handleChangeCipherSpecMessage];
  }
}

void OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *buf) {
  OrgSpongycastleCryptoTlsTlsProtocol_initialize();
  if ([((JavaIoByteArrayInputStream *) nil_chk(buf)) available] > 0) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsProtocol_createRandomBlockWithBoolean_withOrgSpongycastleCryptoPrngRandomGenerator_(jboolean useGMTUnixTime, id<OrgSpongycastleCryptoPrngRandomGenerator> randomGenerator) {
  OrgSpongycastleCryptoTlsTlsProtocol_initialize();
  IOSByteArray *result = [IOSByteArray newArrayWithLength:32];
  [((id<OrgSpongycastleCryptoPrngRandomGenerator>) nil_chk(randomGenerator)) nextBytesWithByteArray:result];
  if (useGMTUnixTime) {
    OrgSpongycastleCryptoTlsTlsUtils_writeGMTUnixTimeWithByteArray_withInt_(result, 0);
  }
  return result;
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsProtocol_createRenegotiationInfoWithByteArray_(IOSByteArray *renegotiated_connection) {
  OrgSpongycastleCryptoTlsTlsProtocol_initialize();
  return OrgSpongycastleCryptoTlsTlsUtils_encodeOpaque8WithByteArray_(renegotiated_connection);
}

void OrgSpongycastleCryptoTlsTlsProtocol_establishMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsKeyExchange_(id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoTlsTlsKeyExchange> keyExchange) {
  OrgSpongycastleCryptoTlsTlsProtocol_initialize();
  IOSByteArray *pre_master_secret = [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(keyExchange)) generatePremasterSecret];
  @try {
    ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context)) getSecurityParameters]))->masterSecret_ = OrgSpongycastleCryptoTlsTlsUtils_calculateMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withByteArray_(context, pre_master_secret);
  }
  @finally {
    if (pre_master_secret != nil) {
      OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(pre_master_secret, (jbyte) 0);
    }
  }
}

IOSByteArray *OrgSpongycastleCryptoTlsTlsProtocol_getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsHandshakeHash_withByteArray_(id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoTlsTlsHandshakeHash> handshakeHash, IOSByteArray *sslSender) {
  OrgSpongycastleCryptoTlsTlsProtocol_initialize();
  id<OrgSpongycastleCryptoDigest> d = [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk(handshakeHash)) forkPRFHash];
  if (sslSender != nil && OrgSpongycastleCryptoTlsTlsUtils_isSSLWithOrgSpongycastleCryptoTlsTlsContext_(context)) {
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(d)) updateWithByteArray:sslSender withInt:0 withInt:sslSender->size_];
  }
  IOSByteArray *bs = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(d)) getDigestSize]];
  [d doFinalWithByteArray:bs withInt:0];
  return bs;
}

JavaUtilHashtable *OrgSpongycastleCryptoTlsTlsProtocol_readExtensionsWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *input) {
  OrgSpongycastleCryptoTlsTlsProtocol_initialize();
  if ([((JavaIoByteArrayInputStream *) nil_chk(input)) available] < 1) {
    return nil;
  }
  IOSByteArray *extBytes = OrgSpongycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(input);
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(input);
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(extBytes);
  JavaUtilHashtable *extensions = new_JavaUtilHashtable_init();
  while ([buf available] > 0) {
    JavaLangInteger *extension_type = OrgSpongycastleUtilIntegers_valueOfWithInt_(OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(buf));
    IOSByteArray *extension_data = OrgSpongycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(buf);
    if (nil != [extensions putWithId:extension_type withId:extension_data]) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
  }
  return extensions;
}

JavaUtilVector *OrgSpongycastleCryptoTlsTlsProtocol_readSupplementalDataMessageWithJavaIoByteArrayInputStream_(JavaIoByteArrayInputStream *input) {
  OrgSpongycastleCryptoTlsTlsProtocol_initialize();
  IOSByteArray *supp_data = OrgSpongycastleCryptoTlsTlsUtils_readOpaque24WithJavaIoInputStream_(input);
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(input);
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(supp_data);
  JavaUtilVector *supplementalData = new_JavaUtilVector_init();
  while ([buf available] > 0) {
    jint supp_data_type = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(buf);
    IOSByteArray *data = OrgSpongycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(buf);
    [supplementalData addElementWithId:new_OrgSpongycastleCryptoTlsSupplementalDataEntry_initWithInt_withByteArray_(supp_data_type, data)];
  }
  return supplementalData;
}

void OrgSpongycastleCryptoTlsTlsProtocol_writeExtensionsWithJavaIoOutputStream_withJavaUtilHashtable_(JavaIoOutputStream *output, JavaUtilHashtable *extensions) {
  OrgSpongycastleCryptoTlsTlsProtocol_initialize();
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  OrgSpongycastleCryptoTlsTlsProtocol_writeSelectedExtensionsWithJavaIoOutputStream_withJavaUtilHashtable_withBoolean_(buf, extensions, true);
  OrgSpongycastleCryptoTlsTlsProtocol_writeSelectedExtensionsWithJavaIoOutputStream_withJavaUtilHashtable_withBoolean_(buf, extensions, false);
  IOSByteArray *extBytes = [buf toByteArray];
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(extBytes, output);
}

void OrgSpongycastleCryptoTlsTlsProtocol_writeSelectedExtensionsWithJavaIoOutputStream_withJavaUtilHashtable_withBoolean_(JavaIoOutputStream *output, JavaUtilHashtable *extensions, jboolean selectEmpty) {
  OrgSpongycastleCryptoTlsTlsProtocol_initialize();
  id<JavaUtilEnumeration> keys = [((JavaUtilHashtable *) nil_chk(extensions)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(keys)) hasMoreElements]) {
    JavaLangInteger *key = (JavaLangInteger *) cast_chk([keys nextElement], [JavaLangInteger class]);
    jint extension_type = [((JavaLangInteger *) nil_chk(key)) intValue];
    IOSByteArray *extension_data = (IOSByteArray *) cast_chk([extensions getWithId:key], [IOSByteArray class]);
    if (selectEmpty == (((IOSByteArray *) nil_chk(extension_data))->size_ == 0)) {
      OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithInt_(extension_type);
      OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(extension_type, output);
      OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(extension_data, output);
    }
  }
}

void OrgSpongycastleCryptoTlsTlsProtocol_writeSupplementalDataWithJavaIoOutputStream_withJavaUtilVector_(JavaIoOutputStream *output, JavaUtilVector *supplementalData) {
  OrgSpongycastleCryptoTlsTlsProtocol_initialize();
  JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
  for (jint i = 0; i < [((JavaUtilVector *) nil_chk(supplementalData)) size]; ++i) {
    OrgSpongycastleCryptoTlsSupplementalDataEntry *entry_ = (OrgSpongycastleCryptoTlsSupplementalDataEntry *) cast_chk([supplementalData elementAtWithInt:i], [OrgSpongycastleCryptoTlsSupplementalDataEntry class]);
    jint supp_data_type = [((OrgSpongycastleCryptoTlsSupplementalDataEntry *) nil_chk(entry_)) getDataType];
    OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithInt_(supp_data_type);
    OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(supp_data_type, buf);
    OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_([entry_ getData], buf);
  }
  IOSByteArray *supp_data = [buf toByteArray];
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque24WithByteArray_withJavaIoOutputStream_(supp_data, output);
}

jint OrgSpongycastleCryptoTlsTlsProtocol_getPRFAlgorithmWithOrgSpongycastleCryptoTlsTlsContext_withInt_(id<OrgSpongycastleCryptoTlsTlsContext> context, jint ciphersuite) {
  OrgSpongycastleCryptoTlsTlsProtocol_initialize();
  jboolean isTLSv12 = OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_(context);
  switch (ciphersuite) {
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_PSK_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_PSK_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_RSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_RSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_DHE_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_DHE_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_PSK_WITH_AES_128_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_PSK_WITH_AES_256_OCB:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_DRAFT_TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CCM:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_CCM_8:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_NULL_SHA256:
    {
      if (isTLSv12) {
        return OrgSpongycastleCryptoTlsPRFAlgorithm_tls_prf_sha256;
      }
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_AES_256_GCM_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384:
    {
      if (isTLSv12) {
        return OrgSpongycastleCryptoTlsPRFAlgorithm_tls_prf_sha384;
      }
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_DHE_PSK_WITH_NULL_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_ECDHE_PSK_WITH_NULL_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_PSK_WITH_NULL_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384:
    case OrgSpongycastleCryptoTlsCipherSuite_TLS_RSA_PSK_WITH_NULL_SHA384:
    {
      if (isTLSv12) {
        return OrgSpongycastleCryptoTlsPRFAlgorithm_tls_prf_sha384;
      }
      return OrgSpongycastleCryptoTlsPRFAlgorithm_tls_prf_legacy;
    }
    default:
    {
      if (isTLSv12) {
        return OrgSpongycastleCryptoTlsPRFAlgorithm_tls_prf_sha256;
      }
      return OrgSpongycastleCryptoTlsPRFAlgorithm_tls_prf_legacy;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsTlsProtocol)

@implementation OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsProtocol:(OrgSpongycastleCryptoTlsTlsProtocol *)outer$
                                                  withShort:(jshort)handshakeType {
  OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_(self, outer$, handshakeType);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsProtocol:(OrgSpongycastleCryptoTlsTlsProtocol *)outer$
                                                  withShort:(jshort)handshakeType
                                                    withInt:(jint)length {
  OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_withInt_(self, outer$, handshakeType, length);
  return self;
}

- (void)writeToRecordStream {
  jint length = count_ - 4;
  OrgSpongycastleCryptoTlsTlsUtils_checkUint24WithInt_(length);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withByteArray_withInt_(length, buf_, 1);
  [this$0_ writeHandshakeMessageWithByteArray:buf_ withInt:0 withInt:count_];
  buf_ = nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, 1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsProtocol:withShort:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsProtocol:withShort:withInt:);
  methods[2].selector = @selector(writeToRecordStream);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgSpongycastleCryptoTlsTlsProtocol;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "S", "LJavaIoIOException;", "SI", "LOrgSpongycastleCryptoTlsTlsProtocol;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage = { "HandshakeMessage", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x0, 3, 1, 3, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage;
}

@end

void OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_(OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *self, OrgSpongycastleCryptoTlsTlsProtocol *outer$, jshort handshakeType) {
  OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_withInt_(self, outer$, handshakeType, 60);
}

OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *new_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_(OrgSpongycastleCryptoTlsTlsProtocol *outer$, jshort handshakeType) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage, initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_, outer$, handshakeType)
}

OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *create_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_(OrgSpongycastleCryptoTlsTlsProtocol *outer$, jshort handshakeType) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage, initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_, outer$, handshakeType)
}

void OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_withInt_(OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *self, OrgSpongycastleCryptoTlsTlsProtocol *outer$, jshort handshakeType, jint length) {
  self->this$0_ = outer$;
  JavaIoByteArrayOutputStream_initWithInt_(self, length + 4);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(handshakeType, self);
  self->count_ += 3;
}

OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *new_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_withInt_(OrgSpongycastleCryptoTlsTlsProtocol *outer$, jshort handshakeType, jint length) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage, initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_withInt_, outer$, handshakeType, length)
}

OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *create_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_withInt_(OrgSpongycastleCryptoTlsTlsProtocol *outer$, jshort handshakeType, jint length) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage, initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_withInt_, outer$, handshakeType, length)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage)
