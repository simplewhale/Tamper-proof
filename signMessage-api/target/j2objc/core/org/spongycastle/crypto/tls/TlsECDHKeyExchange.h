//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsECDHKeyExchange.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsECDHKeyExchange")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsTlsECDHKeyExchange
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsECDHKeyExchange 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsECDHKeyExchange 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsTlsECDHKeyExchange

#if !defined (OrgSpongycastleCryptoTlsTlsECDHKeyExchange_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsECDHKeyExchange || defined(INCLUDE_OrgSpongycastleCryptoTlsTlsECDHKeyExchange))
#define OrgSpongycastleCryptoTlsTlsECDHKeyExchange_

#define RESTRICT_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange 1
#define INCLUDE_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange 1
#include "org/spongycastle/crypto/tls/AbstractTlsKeyExchange.h"

@class IOSByteArray;
@class IOSIntArray;
@class IOSShortArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaUtilVector;
@class OrgSpongycastleCryptoParamsAsymmetricKeyParameter;
@class OrgSpongycastleCryptoParamsECPrivateKeyParameters;
@class OrgSpongycastleCryptoParamsECPublicKeyParameters;
@class OrgSpongycastleCryptoTlsCertificate;
@class OrgSpongycastleCryptoTlsCertificateRequest;
@protocol OrgSpongycastleCryptoTlsTlsAgreementCredentials;
@protocol OrgSpongycastleCryptoTlsTlsContext;
@protocol OrgSpongycastleCryptoTlsTlsCredentials;
@protocol OrgSpongycastleCryptoTlsTlsSigner;

@interface OrgSpongycastleCryptoTlsTlsECDHKeyExchange : OrgSpongycastleCryptoTlsAbstractTlsKeyExchange {
 @public
  id<OrgSpongycastleCryptoTlsTlsSigner> tlsSigner_;
  IOSIntArray *namedCurves_;
  IOSShortArray *clientECPointFormats_;
  IOSShortArray *serverECPointFormats_;
  OrgSpongycastleCryptoParamsAsymmetricKeyParameter *serverPublicKey_;
  id<OrgSpongycastleCryptoTlsTlsAgreementCredentials> agreementCredentials_;
  OrgSpongycastleCryptoParamsECPrivateKeyParameters *ecAgreePrivateKey_;
  OrgSpongycastleCryptoParamsECPublicKeyParameters *ecAgreePublicKey_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
               withIntArray:(IOSIntArray *)namedCurves
             withShortArray:(IOSShortArray *)clientECPointFormats
             withShortArray:(IOSShortArray *)serverECPointFormats;

- (void)generateClientKeyExchangeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (IOSByteArray *)generatePremasterSecret;

- (IOSByteArray *)generateServerKeyExchange;

- (void)init__WithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context OBJC_METHOD_FAMILY_NONE;

- (void)processClientCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)clientCertificate;

- (void)processClientCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:(id<OrgSpongycastleCryptoTlsTlsCredentials>)clientCredentials;

- (void)processClientKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (void)processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)serverCertificate;

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (jboolean)requiresServerKeyExchange;

- (void)skipServerCredentials;

- (void)validateCertificateRequestWithOrgSpongycastleCryptoTlsCertificateRequest:(OrgSpongycastleCryptoTlsCertificateRequest *)certificateRequest;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithInt:(jint)arg0
         withJavaUtilVector:(JavaUtilVector *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsTlsECDHKeyExchange)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsECDHKeyExchange, tlsSigner_, id<OrgSpongycastleCryptoTlsTlsSigner>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsECDHKeyExchange, namedCurves_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsECDHKeyExchange, clientECPointFormats_, IOSShortArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsECDHKeyExchange, serverECPointFormats_, IOSShortArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsECDHKeyExchange, serverPublicKey_, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsECDHKeyExchange, agreementCredentials_, id<OrgSpongycastleCryptoTlsTlsAgreementCredentials>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsECDHKeyExchange, ecAgreePrivateKey_, OrgSpongycastleCryptoParamsECPrivateKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsECDHKeyExchange, ecAgreePublicKey_, OrgSpongycastleCryptoParamsECPublicKeyParameters *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsECDHKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(OrgSpongycastleCryptoTlsTlsECDHKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsECDHKeyExchange *new_OrgSpongycastleCryptoTlsTlsECDHKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsECDHKeyExchange *create_OrgSpongycastleCryptoTlsTlsECDHKeyExchange_initWithInt_withJavaUtilVector_withIntArray_withShortArray_withShortArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSIntArray *namedCurves, IOSShortArray *clientECPointFormats, IOSShortArray *serverECPointFormats);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsTlsECDHKeyExchange)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsECDHKeyExchange")
