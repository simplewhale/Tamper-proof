//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/AbstractTlsServer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"
#include "org/spongycastle/crypto/tls/AbstractTlsPeer.h"
#include "org/spongycastle/crypto/tls/AbstractTlsServer.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/Certificate.h"
#include "org/spongycastle/crypto/tls/CertificateRequest.h"
#include "org/spongycastle/crypto/tls/CertificateStatus.h"
#include "org/spongycastle/crypto/tls/CompressionMethod.h"
#include "org/spongycastle/crypto/tls/DefaultTlsCipherFactory.h"
#include "org/spongycastle/crypto/tls/ECPointFormat.h"
#include "org/spongycastle/crypto/tls/MaxFragmentLength.h"
#include "org/spongycastle/crypto/tls/NamedCurve.h"
#include "org/spongycastle/crypto/tls/NewSessionTicket.h"
#include "org/spongycastle/crypto/tls/ProtocolVersion.h"
#include "org/spongycastle/crypto/tls/TlsCipher.h"
#include "org/spongycastle/crypto/tls/TlsCipherFactory.h"
#include "org/spongycastle/crypto/tls/TlsCompression.h"
#include "org/spongycastle/crypto/tls/TlsECCUtils.h"
#include "org/spongycastle/crypto/tls/TlsExtensionsUtils.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsNullCompression.h"
#include "org/spongycastle/crypto/tls/TlsServerContext.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/util/Arrays.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation OrgSpongycastleCryptoTlsAbstractTlsServer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsAbstractTlsServer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsCipherFactory:(id<OrgSpongycastleCryptoTlsTlsCipherFactory>)cipherFactory {
  OrgSpongycastleCryptoTlsAbstractTlsServer_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_(self, cipherFactory);
  return self;
}

- (jboolean)allowEncryptThenMAC {
  return true;
}

- (jboolean)allowTruncatedHMac {
  return false;
}

- (JavaUtilHashtable *)checkServerExtensions {
  return self->serverExtensions_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_ensureExtensionsInitialisedWithJavaUtilHashtable_(self->serverExtensions_);
}

- (IOSIntArray *)getCipherSuites {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSShortArray *)getCompressionMethods {
  return [IOSShortArray newArrayWithShorts:(jshort[]){ OrgSpongycastleCryptoTlsCompressionMethod__null } count:1];
}

- (OrgSpongycastleCryptoTlsProtocolVersion *)getMaximumVersion {
  return JreLoadStatic(OrgSpongycastleCryptoTlsProtocolVersion, TLSv11);
}

- (OrgSpongycastleCryptoTlsProtocolVersion *)getMinimumVersion {
  return JreLoadStatic(OrgSpongycastleCryptoTlsProtocolVersion, TLSv10);
}

- (jboolean)supportsClientECCCapabilitiesWithIntArray:(IOSIntArray *)namedCurves
                                       withShortArray:(IOSShortArray *)ecPointFormats {
  if (namedCurves == nil) {
    return OrgSpongycastleCryptoTlsTlsECCUtils_hasAnySupportedNamedCurves();
  }
  for (jint i = 0; i < namedCurves->size_; ++i) {
    jint namedCurve = IOSIntArray_Get(namedCurves, i);
    if (OrgSpongycastleCryptoTlsNamedCurve_isValidWithInt_(namedCurve) && (!OrgSpongycastleCryptoTlsNamedCurve_refersToASpecificNamedCurveWithInt_(namedCurve) || OrgSpongycastleCryptoTlsTlsECCUtils_isSupportedNamedCurveWithInt_(namedCurve))) {
      return true;
    }
  }
  return false;
}

- (void)init__WithOrgSpongycastleCryptoTlsTlsServerContext:(id<OrgSpongycastleCryptoTlsTlsServerContext>)context {
  self->context_ = context;
}

- (void)notifyClientVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)clientVersion {
  self->clientVersion_ = clientVersion;
}

- (void)notifyFallbackWithBoolean:(jboolean)isFallback {
  if (isFallback && [((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk([self getMaximumVersion])) isLaterVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:clientVersion_]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_inappropriate_fallback);
  }
}

- (void)notifyOfferedCipherSuitesWithIntArray:(IOSIntArray *)offeredCipherSuites {
  self->offeredCipherSuites_ = offeredCipherSuites;
  self->eccCipherSuitesOffered_ = OrgSpongycastleCryptoTlsTlsECCUtils_containsECCCipherSuitesWithIntArray_(self->offeredCipherSuites_);
}

- (void)notifyOfferedCompressionMethodsWithShortArray:(IOSShortArray *)offeredCompressionMethods {
  self->offeredCompressionMethods_ = offeredCompressionMethods;
}

- (void)processClientExtensionsWithJavaUtilHashtable:(JavaUtilHashtable *)clientExtensions {
  self->clientExtensions_ = clientExtensions;
  if (clientExtensions != nil) {
    self->encryptThenMACOffered_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_hasEncryptThenMACExtensionWithJavaUtilHashtable_(clientExtensions);
    self->maxFragmentLengthOffered_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_getMaxFragmentLengthExtensionWithJavaUtilHashtable_(clientExtensions);
    if (maxFragmentLengthOffered_ >= 0 && !OrgSpongycastleCryptoTlsMaxFragmentLength_isValidWithShort_(maxFragmentLengthOffered_)) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
    self->truncatedHMacOffered_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_hasTruncatedHMacExtensionWithJavaUtilHashtable_(clientExtensions);
    self->supportedSignatureAlgorithms_ = OrgSpongycastleCryptoTlsTlsUtils_getSignatureAlgorithmsExtensionWithJavaUtilHashtable_(clientExtensions);
    if (self->supportedSignatureAlgorithms_ != nil) {
      if (!OrgSpongycastleCryptoTlsTlsUtils_isSignatureAlgorithmsExtensionAllowedWithOrgSpongycastleCryptoTlsProtocolVersion_(clientVersion_)) {
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
      }
    }
    self->namedCurves_ = OrgSpongycastleCryptoTlsTlsECCUtils_getSupportedEllipticCurvesExtensionWithJavaUtilHashtable_(clientExtensions);
    self->clientECPointFormats_ = OrgSpongycastleCryptoTlsTlsECCUtils_getSupportedPointFormatsExtensionWithJavaUtilHashtable_(clientExtensions);
  }
}

- (OrgSpongycastleCryptoTlsProtocolVersion *)getServerVersion {
  if ([((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk([self getMinimumVersion])) isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:clientVersion_]) {
    OrgSpongycastleCryptoTlsProtocolVersion *maximumVersion = [self getMaximumVersion];
    if ([((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(clientVersion_)) isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:maximumVersion]) {
      return serverVersion_ = clientVersion_;
    }
    if ([((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(clientVersion_)) isLaterVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:maximumVersion]) {
      return serverVersion_ = maximumVersion;
    }
  }
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_protocol_version);
}

- (jint)getSelectedCipherSuite {
  JavaUtilVector *sigAlgs = OrgSpongycastleCryptoTlsTlsUtils_getUsableSignatureAlgorithmsWithJavaUtilVector_(supportedSignatureAlgorithms_);
  jboolean eccCipherSuitesEnabled = [self supportsClientECCCapabilitiesWithIntArray:self->namedCurves_ withShortArray:self->clientECPointFormats_];
  IOSIntArray *cipherSuites = [self getCipherSuites];
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(cipherSuites))->size_; ++i) {
    jint cipherSuite = IOSIntArray_Get(cipherSuites, i);
    if (OrgSpongycastleUtilArrays_containsWithIntArray_withInt_(self->offeredCipherSuites_, cipherSuite) && (eccCipherSuitesEnabled || !OrgSpongycastleCryptoTlsTlsECCUtils_isECCCipherSuiteWithInt_(cipherSuite)) && OrgSpongycastleCryptoTlsTlsUtils_isValidCipherSuiteForVersionWithInt_withOrgSpongycastleCryptoTlsProtocolVersion_(cipherSuite, serverVersion_) && OrgSpongycastleCryptoTlsTlsUtils_isValidCipherSuiteForSignatureAlgorithmsWithInt_withJavaUtilVector_(cipherSuite, sigAlgs)) {
      return self->selectedCipherSuite_ = cipherSuite;
    }
  }
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_handshake_failure);
}

- (jshort)getSelectedCompressionMethod {
  IOSShortArray *compressionMethods = [self getCompressionMethods];
  for (jint i = 0; i < ((IOSShortArray *) nil_chk(compressionMethods))->size_; ++i) {
    if (OrgSpongycastleUtilArrays_containsWithShortArray_withShort_(offeredCompressionMethods_, IOSShortArray_Get(compressionMethods, i))) {
      return self->selectedCompressionMethod_ = IOSShortArray_Get(compressionMethods, i);
    }
  }
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_handshake_failure);
}

- (JavaUtilHashtable *)getServerExtensions {
  if (self->encryptThenMACOffered_ && [self allowEncryptThenMAC]) {
    if (OrgSpongycastleCryptoTlsTlsUtils_isBlockCipherSuiteWithInt_(self->selectedCipherSuite_)) {
      OrgSpongycastleCryptoTlsTlsExtensionsUtils_addEncryptThenMACExtensionWithJavaUtilHashtable_([self checkServerExtensions]);
    }
  }
  if (self->maxFragmentLengthOffered_ >= 0 && OrgSpongycastleCryptoTlsMaxFragmentLength_isValidWithShort_(maxFragmentLengthOffered_)) {
    OrgSpongycastleCryptoTlsTlsExtensionsUtils_addMaxFragmentLengthExtensionWithJavaUtilHashtable_withShort_([self checkServerExtensions], self->maxFragmentLengthOffered_);
  }
  if (self->truncatedHMacOffered_ && [self allowTruncatedHMac]) {
    OrgSpongycastleCryptoTlsTlsExtensionsUtils_addTruncatedHMacExtensionWithJavaUtilHashtable_([self checkServerExtensions]);
  }
  if (self->clientECPointFormats_ != nil && OrgSpongycastleCryptoTlsTlsECCUtils_isECCCipherSuiteWithInt_(self->selectedCipherSuite_)) {
    self->serverECPointFormats_ = [IOSShortArray newArrayWithShorts:(jshort[]){ OrgSpongycastleCryptoTlsECPointFormat_uncompressed, OrgSpongycastleCryptoTlsECPointFormat_ansiX962_compressed_prime, OrgSpongycastleCryptoTlsECPointFormat_ansiX962_compressed_char2 } count:3];
    OrgSpongycastleCryptoTlsTlsECCUtils_addSupportedPointFormatsExtensionWithJavaUtilHashtable_withShortArray_([self checkServerExtensions], serverECPointFormats_);
  }
  return serverExtensions_;
}

- (JavaUtilVector *)getServerSupplementalData {
  return nil;
}

- (OrgSpongycastleCryptoTlsCertificateStatus *)getCertificateStatus {
  return nil;
}

- (OrgSpongycastleCryptoTlsCertificateRequest *)getCertificateRequest {
  return nil;
}

- (void)processClientSupplementalDataWithJavaUtilVector:(JavaUtilVector *)clientSupplementalData {
  if (clientSupplementalData != nil) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
}

- (void)notifyClientCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)clientCertificate {
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
}

- (id<OrgSpongycastleCryptoTlsTlsCompression>)getCompression {
  switch (selectedCompressionMethod_) {
    case OrgSpongycastleCryptoTlsCompressionMethod__null:
    return new_OrgSpongycastleCryptoTlsTlsNullCompression_init();
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

- (id<OrgSpongycastleCryptoTlsTlsCipher>)getCipher {
  jint encryptionAlgorithm = OrgSpongycastleCryptoTlsTlsUtils_getEncryptionAlgorithmWithInt_(selectedCipherSuite_);
  jint macAlgorithm = OrgSpongycastleCryptoTlsTlsUtils_getMACAlgorithmWithInt_(selectedCipherSuite_);
  return [((id<OrgSpongycastleCryptoTlsTlsCipherFactory>) nil_chk(cipherFactory_)) createCipherWithOrgSpongycastleCryptoTlsTlsContext:context_ withInt:encryptionAlgorithm withInt:macAlgorithm];
}

- (OrgSpongycastleCryptoTlsNewSessionTicket *)getNewSessionTicket {
  return new_OrgSpongycastleCryptoTlsNewSessionTicket_initWithLong_withByteArray_(0LL, JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashtable;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "[S", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsProtocolVersion;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsProtocolVersion;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 7, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsProtocolVersion;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LJavaUtilHashtable;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsCertificateStatus;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsCertificateRequest;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, 7, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsCompression;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsCipher;", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsNewSessionTicket;", 0x1, -1, -1, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsCipherFactory:);
  methods[2].selector = @selector(allowEncryptThenMAC);
  methods[3].selector = @selector(allowTruncatedHMac);
  methods[4].selector = @selector(checkServerExtensions);
  methods[5].selector = @selector(getCipherSuites);
  methods[6].selector = @selector(getCompressionMethods);
  methods[7].selector = @selector(getMaximumVersion);
  methods[8].selector = @selector(getMinimumVersion);
  methods[9].selector = @selector(supportsClientECCCapabilitiesWithIntArray:withShortArray:);
  methods[10].selector = @selector(init__WithOrgSpongycastleCryptoTlsTlsServerContext:);
  methods[11].selector = @selector(notifyClientVersionWithOrgSpongycastleCryptoTlsProtocolVersion:);
  methods[12].selector = @selector(notifyFallbackWithBoolean:);
  methods[13].selector = @selector(notifyOfferedCipherSuitesWithIntArray:);
  methods[14].selector = @selector(notifyOfferedCompressionMethodsWithShortArray:);
  methods[15].selector = @selector(processClientExtensionsWithJavaUtilHashtable:);
  methods[16].selector = @selector(getServerVersion);
  methods[17].selector = @selector(getSelectedCipherSuite);
  methods[18].selector = @selector(getSelectedCompressionMethod);
  methods[19].selector = @selector(getServerExtensions);
  methods[20].selector = @selector(getServerSupplementalData);
  methods[21].selector = @selector(getCertificateStatus);
  methods[22].selector = @selector(getCertificateRequest);
  methods[23].selector = @selector(processClientSupplementalDataWithJavaUtilVector:);
  methods[24].selector = @selector(notifyClientCertificateWithOrgSpongycastleCryptoTlsCertificate:);
  methods[25].selector = @selector(getCompression);
  methods[26].selector = @selector(getCipher);
  methods[27].selector = @selector(getNewSessionTicket);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cipherFactory_", "LOrgSpongycastleCryptoTlsTlsCipherFactory;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "context_", "LOrgSpongycastleCryptoTlsTlsServerContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "clientVersion_", "LOrgSpongycastleCryptoTlsProtocolVersion;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "offeredCipherSuites_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "offeredCompressionMethods_", "[S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "clientExtensions_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "encryptThenMACOffered_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "maxFragmentLengthOffered_", "S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "truncatedHMacOffered_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "supportedSignatureAlgorithms_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "eccCipherSuitesOffered_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "namedCurves_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "clientECPointFormats_", "[S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverECPointFormats_", "[S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverVersion_", "LOrgSpongycastleCryptoTlsProtocolVersion;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "selectedCipherSuite_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "selectedCompressionMethod_", "S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverExtensions_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsTlsCipherFactory;", "supportsClientECCCapabilities", "[I[S", "init", "LOrgSpongycastleCryptoTlsTlsServerContext;", "notifyClientVersion", "LOrgSpongycastleCryptoTlsProtocolVersion;", "LJavaIoIOException;", "notifyFallback", "Z", "notifyOfferedCipherSuites", "[I", "notifyOfferedCompressionMethods", "[S", "processClientExtensions", "LJavaUtilHashtable;", "processClientSupplementalData", "LJavaUtilVector;", "notifyClientCertificate", "LOrgSpongycastleCryptoTlsCertificate;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsAbstractTlsServer = { "AbstractTlsServer", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x401, 28, 18, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsAbstractTlsServer;
}

@end

void OrgSpongycastleCryptoTlsAbstractTlsServer_init(OrgSpongycastleCryptoTlsAbstractTlsServer *self) {
  OrgSpongycastleCryptoTlsAbstractTlsServer_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_(self, new_OrgSpongycastleCryptoTlsDefaultTlsCipherFactory_init());
}

void OrgSpongycastleCryptoTlsAbstractTlsServer_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_(OrgSpongycastleCryptoTlsAbstractTlsServer *self, id<OrgSpongycastleCryptoTlsTlsCipherFactory> cipherFactory) {
  OrgSpongycastleCryptoTlsAbstractTlsPeer_init(self);
  self->cipherFactory_ = cipherFactory;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsAbstractTlsServer)
