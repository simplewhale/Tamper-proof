//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/SRPTlsServer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"
#include "org/spongycastle/crypto/tls/AbstractTlsServer.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/CipherSuite.h"
#include "org/spongycastle/crypto/tls/DefaultTlsCipherFactory.h"
#include "org/spongycastle/crypto/tls/KeyExchangeAlgorithm.h"
#include "org/spongycastle/crypto/tls/SRPTlsServer.h"
#include "org/spongycastle/crypto/tls/TlsCipherFactory.h"
#include "org/spongycastle/crypto/tls/TlsCredentials.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsSRPIdentityManager.h"
#include "org/spongycastle/crypto/tls/TlsSRPKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsSRPLoginParameters.h"
#include "org/spongycastle/crypto/tls/TlsSRPUtils.h"
#include "org/spongycastle/crypto/tls/TlsSignerCredentials.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

@implementation OrgSpongycastleCryptoTlsSRPTlsServer

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsSRPIdentityManager:(id<OrgSpongycastleCryptoTlsTlsSRPIdentityManager>)srpIdentityManager {
  OrgSpongycastleCryptoTlsSRPTlsServer_initWithOrgSpongycastleCryptoTlsTlsSRPIdentityManager_(self, srpIdentityManager);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsCipherFactory:(id<OrgSpongycastleCryptoTlsTlsCipherFactory>)cipherFactory
               withOrgSpongycastleCryptoTlsTlsSRPIdentityManager:(id<OrgSpongycastleCryptoTlsTlsSRPIdentityManager>)srpIdentityManager {
  OrgSpongycastleCryptoTlsSRPTlsServer_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_withOrgSpongycastleCryptoTlsTlsSRPIdentityManager_(self, cipherFactory, srpIdentityManager);
  return self;
}

- (id<OrgSpongycastleCryptoTlsTlsSignerCredentials>)getDSASignerCredentials {
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
}

- (id<OrgSpongycastleCryptoTlsTlsSignerCredentials>)getRSASignerCredentials {
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
}

- (IOSIntArray *)getCipherSuites {
  return [IOSIntArray newArrayWithInts:(jint[]){ OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA, OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA, OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA, OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA, OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_WITH_AES_256_CBC_SHA, OrgSpongycastleCryptoTlsCipherSuite_TLS_SRP_SHA_WITH_AES_128_CBC_SHA } count:6];
}

- (void)processClientExtensionsWithJavaUtilHashtable:(JavaUtilHashtable *)clientExtensions {
  [super processClientExtensionsWithJavaUtilHashtable:clientExtensions];
  self->srpIdentity_ = OrgSpongycastleCryptoTlsTlsSRPUtils_getSRPExtensionWithJavaUtilHashtable_(clientExtensions);
}

- (jint)getSelectedCipherSuite {
  jint cipherSuite = [super getSelectedCipherSuite];
  if (OrgSpongycastleCryptoTlsTlsSRPUtils_isSRPCipherSuiteWithInt_(cipherSuite)) {
    if (srpIdentity_ != nil) {
      self->loginParameters_ = [((id<OrgSpongycastleCryptoTlsTlsSRPIdentityManager>) nil_chk(srpIdentityManager_)) getLoginParametersWithByteArray:srpIdentity_];
    }
    if (loginParameters_ == nil) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unknown_psk_identity);
    }
  }
  return cipherSuite;
}

- (id<OrgSpongycastleCryptoTlsTlsCredentials>)getCredentials {
  jint keyExchangeAlgorithm = OrgSpongycastleCryptoTlsTlsUtils_getKeyExchangeAlgorithmWithInt_(selectedCipherSuite_);
  switch (keyExchangeAlgorithm) {
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_SRP:
    return nil;
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_SRP_DSS:
    return [self getDSASignerCredentials];
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_SRP_RSA:
    return [self getRSASignerCredentials];
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

- (id<OrgSpongycastleCryptoTlsTlsKeyExchange>)getKeyExchange {
  jint keyExchangeAlgorithm = OrgSpongycastleCryptoTlsTlsUtils_getKeyExchangeAlgorithmWithInt_(selectedCipherSuite_);
  switch (keyExchangeAlgorithm) {
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_SRP:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_SRP_DSS:
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_SRP_RSA:
    return [self createSRPKeyExchangeWithInt:keyExchangeAlgorithm];
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

- (id<OrgSpongycastleCryptoTlsTlsKeyExchange>)createSRPKeyExchangeWithInt:(jint)keyExchange {
  return new_OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withByteArray_withOrgSpongycastleCryptoTlsTlsSRPLoginParameters_(keyExchange, supportedSignatureAlgorithms_, srpIdentity_, loginParameters_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsSignerCredentials;", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsSignerCredentials;", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "[I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsCredentials;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsKeyExchange;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsKeyExchange;", 0x4, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsSRPIdentityManager:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsCipherFactory:withOrgSpongycastleCryptoTlsTlsSRPIdentityManager:);
  methods[2].selector = @selector(getDSASignerCredentials);
  methods[3].selector = @selector(getRSASignerCredentials);
  methods[4].selector = @selector(getCipherSuites);
  methods[5].selector = @selector(processClientExtensionsWithJavaUtilHashtable:);
  methods[6].selector = @selector(getSelectedCipherSuite);
  methods[7].selector = @selector(getCredentials);
  methods[8].selector = @selector(getKeyExchange);
  methods[9].selector = @selector(createSRPKeyExchangeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "srpIdentityManager_", "LOrgSpongycastleCryptoTlsTlsSRPIdentityManager;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "srpIdentity_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "loginParameters_", "LOrgSpongycastleCryptoTlsTlsSRPLoginParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsTlsSRPIdentityManager;", "LOrgSpongycastleCryptoTlsTlsCipherFactory;LOrgSpongycastleCryptoTlsTlsSRPIdentityManager;", "LJavaIoIOException;", "processClientExtensions", "LJavaUtilHashtable;", "createSRPKeyExchange", "I" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsSRPTlsServer = { "SRPTlsServer", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsSRPTlsServer;
}

@end

void OrgSpongycastleCryptoTlsSRPTlsServer_initWithOrgSpongycastleCryptoTlsTlsSRPIdentityManager_(OrgSpongycastleCryptoTlsSRPTlsServer *self, id<OrgSpongycastleCryptoTlsTlsSRPIdentityManager> srpIdentityManager) {
  OrgSpongycastleCryptoTlsSRPTlsServer_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_withOrgSpongycastleCryptoTlsTlsSRPIdentityManager_(self, new_OrgSpongycastleCryptoTlsDefaultTlsCipherFactory_init(), srpIdentityManager);
}

OrgSpongycastleCryptoTlsSRPTlsServer *new_OrgSpongycastleCryptoTlsSRPTlsServer_initWithOrgSpongycastleCryptoTlsTlsSRPIdentityManager_(id<OrgSpongycastleCryptoTlsTlsSRPIdentityManager> srpIdentityManager) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsSRPTlsServer, initWithOrgSpongycastleCryptoTlsTlsSRPIdentityManager_, srpIdentityManager)
}

OrgSpongycastleCryptoTlsSRPTlsServer *create_OrgSpongycastleCryptoTlsSRPTlsServer_initWithOrgSpongycastleCryptoTlsTlsSRPIdentityManager_(id<OrgSpongycastleCryptoTlsTlsSRPIdentityManager> srpIdentityManager) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsSRPTlsServer, initWithOrgSpongycastleCryptoTlsTlsSRPIdentityManager_, srpIdentityManager)
}

void OrgSpongycastleCryptoTlsSRPTlsServer_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_withOrgSpongycastleCryptoTlsTlsSRPIdentityManager_(OrgSpongycastleCryptoTlsSRPTlsServer *self, id<OrgSpongycastleCryptoTlsTlsCipherFactory> cipherFactory, id<OrgSpongycastleCryptoTlsTlsSRPIdentityManager> srpIdentityManager) {
  OrgSpongycastleCryptoTlsAbstractTlsServer_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_(self, cipherFactory);
  self->srpIdentity_ = nil;
  self->loginParameters_ = nil;
  self->srpIdentityManager_ = srpIdentityManager;
}

OrgSpongycastleCryptoTlsSRPTlsServer *new_OrgSpongycastleCryptoTlsSRPTlsServer_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_withOrgSpongycastleCryptoTlsTlsSRPIdentityManager_(id<OrgSpongycastleCryptoTlsTlsCipherFactory> cipherFactory, id<OrgSpongycastleCryptoTlsTlsSRPIdentityManager> srpIdentityManager) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsSRPTlsServer, initWithOrgSpongycastleCryptoTlsTlsCipherFactory_withOrgSpongycastleCryptoTlsTlsSRPIdentityManager_, cipherFactory, srpIdentityManager)
}

OrgSpongycastleCryptoTlsSRPTlsServer *create_OrgSpongycastleCryptoTlsSRPTlsServer_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_withOrgSpongycastleCryptoTlsTlsSRPIdentityManager_(id<OrgSpongycastleCryptoTlsTlsCipherFactory> cipherFactory, id<OrgSpongycastleCryptoTlsTlsSRPIdentityManager> srpIdentityManager) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsSRPTlsServer, initWithOrgSpongycastleCryptoTlsTlsCipherFactory_withOrgSpongycastleCryptoTlsTlsSRPIdentityManager_, cipherFactory, srpIdentityManager)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsSRPTlsServer)
