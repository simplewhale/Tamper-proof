//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsExtensionsUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsExtensionsUtils")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsTlsExtensionsUtils
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsExtensionsUtils 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsExtensionsUtils 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsTlsExtensionsUtils

#if !defined (OrgSpongycastleCryptoTlsTlsExtensionsUtils_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsExtensionsUtils || defined(INCLUDE_OrgSpongycastleCryptoTlsTlsExtensionsUtils))
#define OrgSpongycastleCryptoTlsTlsExtensionsUtils_

@class IOSByteArray;
@class JavaLangInteger;
@class JavaUtilHashtable;
@class OrgSpongycastleCryptoTlsCertificateStatusRequest;
@class OrgSpongycastleCryptoTlsHeartbeatExtension;
@class OrgSpongycastleCryptoTlsServerNameList;

@interface OrgSpongycastleCryptoTlsTlsExtensionsUtils : NSObject

#pragma mark Public

- (instancetype)init;

+ (void)addEncryptThenMACExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (void)addExtendedMasterSecretExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (void)addHeartbeatExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
    withOrgSpongycastleCryptoTlsHeartbeatExtension:(OrgSpongycastleCryptoTlsHeartbeatExtension *)heartbeatExtension;

+ (void)addMaxFragmentLengthExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                                 withShort:(jshort)maxFragmentLength;

+ (void)addPaddingExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
                                         withInt:(jint)dataLength;

+ (void)addServerNameExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
         withOrgSpongycastleCryptoTlsServerNameList:(OrgSpongycastleCryptoTlsServerNameList *)serverNameList;

+ (void)addStatusRequestExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions
  withOrgSpongycastleCryptoTlsCertificateStatusRequest:(OrgSpongycastleCryptoTlsCertificateStatusRequest *)statusRequest;

+ (void)addTruncatedHMacExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (IOSByteArray *)createEmptyExtensionData;

+ (IOSByteArray *)createEncryptThenMACExtension;

+ (IOSByteArray *)createExtendedMasterSecretExtension;

+ (IOSByteArray *)createHeartbeatExtensionWithOrgSpongycastleCryptoTlsHeartbeatExtension:(OrgSpongycastleCryptoTlsHeartbeatExtension *)heartbeatExtension;

+ (IOSByteArray *)createMaxFragmentLengthExtensionWithShort:(jshort)maxFragmentLength;

+ (IOSByteArray *)createPaddingExtensionWithInt:(jint)dataLength;

+ (IOSByteArray *)createServerNameExtensionWithOrgSpongycastleCryptoTlsServerNameList:(OrgSpongycastleCryptoTlsServerNameList *)serverNameList;

+ (IOSByteArray *)createStatusRequestExtensionWithOrgSpongycastleCryptoTlsCertificateStatusRequest:(OrgSpongycastleCryptoTlsCertificateStatusRequest *)statusRequest;

+ (IOSByteArray *)createTruncatedHMacExtension;

+ (JavaUtilHashtable *)ensureExtensionsInitialisedWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (OrgSpongycastleCryptoTlsHeartbeatExtension *)getHeartbeatExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jshort)getMaxFragmentLengthExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jint)getPaddingExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (OrgSpongycastleCryptoTlsServerNameList *)getServerNameExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (OrgSpongycastleCryptoTlsCertificateStatusRequest *)getStatusRequestExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jboolean)hasEncryptThenMACExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jboolean)hasExtendedMasterSecretExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jboolean)hasTruncatedHMacExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)extensions;

+ (jboolean)readEncryptThenMACExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (jboolean)readExtendedMasterSecretExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (OrgSpongycastleCryptoTlsHeartbeatExtension *)readHeartbeatExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (jshort)readMaxFragmentLengthExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (jint)readPaddingExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (OrgSpongycastleCryptoTlsServerNameList *)readServerNameExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (OrgSpongycastleCryptoTlsCertificateStatusRequest *)readStatusRequestExtensionWithByteArray:(IOSByteArray *)extensionData;

+ (jboolean)readTruncatedHMacExtensionWithByteArray:(IOSByteArray *)extensionData;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleCryptoTlsTlsExtensionsUtils)

inline JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_get_EXT_encrypt_then_mac(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_EXT_encrypt_then_mac;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsExtensionsUtils, EXT_encrypt_then_mac, JavaLangInteger *)

inline JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_get_EXT_extended_master_secret(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_EXT_extended_master_secret;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsExtensionsUtils, EXT_extended_master_secret, JavaLangInteger *)

inline JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_get_EXT_heartbeat(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_EXT_heartbeat;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsExtensionsUtils, EXT_heartbeat, JavaLangInteger *)

inline JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_get_EXT_max_fragment_length(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_EXT_max_fragment_length;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsExtensionsUtils, EXT_max_fragment_length, JavaLangInteger *)

inline JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_get_EXT_padding(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_EXT_padding;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsExtensionsUtils, EXT_padding, JavaLangInteger *)

inline JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_get_EXT_server_name(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_EXT_server_name;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsExtensionsUtils, EXT_server_name, JavaLangInteger *)

inline JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_get_EXT_status_request(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_EXT_status_request;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsExtensionsUtils, EXT_status_request, JavaLangInteger *)

inline JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_get_EXT_truncated_hmac(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangInteger *OrgSpongycastleCryptoTlsTlsExtensionsUtils_EXT_truncated_hmac;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsTlsExtensionsUtils, EXT_truncated_hmac, JavaLangInteger *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsExtensionsUtils_init(OrgSpongycastleCryptoTlsTlsExtensionsUtils *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsExtensionsUtils *new_OrgSpongycastleCryptoTlsTlsExtensionsUtils_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsExtensionsUtils *create_OrgSpongycastleCryptoTlsTlsExtensionsUtils_init(void);

FOUNDATION_EXPORT JavaUtilHashtable *OrgSpongycastleCryptoTlsTlsExtensionsUtils_ensureExtensionsInitialisedWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsExtensionsUtils_addEncryptThenMACExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsExtensionsUtils_addExtendedMasterSecretExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsExtensionsUtils_addHeartbeatExtensionWithJavaUtilHashtable_withOrgSpongycastleCryptoTlsHeartbeatExtension_(JavaUtilHashtable *extensions, OrgSpongycastleCryptoTlsHeartbeatExtension *heartbeatExtension);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsExtensionsUtils_addMaxFragmentLengthExtensionWithJavaUtilHashtable_withShort_(JavaUtilHashtable *extensions, jshort maxFragmentLength);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsExtensionsUtils_addPaddingExtensionWithJavaUtilHashtable_withInt_(JavaUtilHashtable *extensions, jint dataLength);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsExtensionsUtils_addServerNameExtensionWithJavaUtilHashtable_withOrgSpongycastleCryptoTlsServerNameList_(JavaUtilHashtable *extensions, OrgSpongycastleCryptoTlsServerNameList *serverNameList);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsExtensionsUtils_addStatusRequestExtensionWithJavaUtilHashtable_withOrgSpongycastleCryptoTlsCertificateStatusRequest_(JavaUtilHashtable *extensions, OrgSpongycastleCryptoTlsCertificateStatusRequest *statusRequest);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsExtensionsUtils_addTruncatedHMacExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsHeartbeatExtension *OrgSpongycastleCryptoTlsTlsExtensionsUtils_getHeartbeatExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT jshort OrgSpongycastleCryptoTlsTlsExtensionsUtils_getMaxFragmentLengthExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoTlsTlsExtensionsUtils_getPaddingExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsServerNameList *OrgSpongycastleCryptoTlsTlsExtensionsUtils_getServerNameExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsCertificateStatusRequest *OrgSpongycastleCryptoTlsTlsExtensionsUtils_getStatusRequestExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsExtensionsUtils_hasEncryptThenMACExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsExtensionsUtils_hasExtendedMasterSecretExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsExtensionsUtils_hasTruncatedHMacExtensionWithJavaUtilHashtable_(JavaUtilHashtable *extensions);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsExtensionsUtils_createEmptyExtensionData(void);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsExtensionsUtils_createEncryptThenMACExtension(void);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsExtensionsUtils_createExtendedMasterSecretExtension(void);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsExtensionsUtils_createHeartbeatExtensionWithOrgSpongycastleCryptoTlsHeartbeatExtension_(OrgSpongycastleCryptoTlsHeartbeatExtension *heartbeatExtension);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsExtensionsUtils_createMaxFragmentLengthExtensionWithShort_(jshort maxFragmentLength);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsExtensionsUtils_createPaddingExtensionWithInt_(jint dataLength);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsExtensionsUtils_createServerNameExtensionWithOrgSpongycastleCryptoTlsServerNameList_(OrgSpongycastleCryptoTlsServerNameList *serverNameList);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsExtensionsUtils_createStatusRequestExtensionWithOrgSpongycastleCryptoTlsCertificateStatusRequest_(OrgSpongycastleCryptoTlsCertificateStatusRequest *statusRequest);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleCryptoTlsTlsExtensionsUtils_createTruncatedHMacExtension(void);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsExtensionsUtils_readEncryptThenMACExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsExtensionsUtils_readExtendedMasterSecretExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsHeartbeatExtension *OrgSpongycastleCryptoTlsTlsExtensionsUtils_readHeartbeatExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT jshort OrgSpongycastleCryptoTlsTlsExtensionsUtils_readMaxFragmentLengthExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoTlsTlsExtensionsUtils_readPaddingExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsServerNameList *OrgSpongycastleCryptoTlsTlsExtensionsUtils_readServerNameExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsCertificateStatusRequest *OrgSpongycastleCryptoTlsTlsExtensionsUtils_readStatusRequestExtensionWithByteArray_(IOSByteArray *extensionData);

FOUNDATION_EXPORT jboolean OrgSpongycastleCryptoTlsTlsExtensionsUtils_readTruncatedHMacExtensionWithByteArray_(IOSByteArray *extensionData);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsTlsExtensionsUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsExtensionsUtils")
