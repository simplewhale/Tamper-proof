//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/SessionParameters.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Hashtable.h"
#include "org/spongycastle/crypto/tls/Certificate.h"
#include "org/spongycastle/crypto/tls/SessionParameters.h"
#include "org/spongycastle/crypto/tls/TlsProtocol.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleCryptoTlsSessionParameters () {
 @public
  jint cipherSuite_;
  jshort compressionAlgorithm_;
  IOSByteArray *masterSecret_;
  OrgSpongycastleCryptoTlsCertificate *peerCertificate_;
  IOSByteArray *pskIdentity_;
  IOSByteArray *srpIdentity_;
  IOSByteArray *encodedServerExtensions_;
}

- (instancetype)initWithInt:(jint)cipherSuite
                  withShort:(jshort)compressionAlgorithm
              withByteArray:(IOSByteArray *)masterSecret
withOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)peerCertificate
              withByteArray:(IOSByteArray *)pskIdentity
              withByteArray:(IOSByteArray *)srpIdentity
              withByteArray:(IOSByteArray *)encodedServerExtensions;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsSessionParameters, masterSecret_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsSessionParameters, peerCertificate_, OrgSpongycastleCryptoTlsCertificate *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsSessionParameters, pskIdentity_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsSessionParameters, srpIdentity_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsSessionParameters, encodedServerExtensions_, IOSByteArray *)

__attribute__((unused)) static void OrgSpongycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withOrgSpongycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_(OrgSpongycastleCryptoTlsSessionParameters *self, jint cipherSuite, jshort compressionAlgorithm, IOSByteArray *masterSecret, OrgSpongycastleCryptoTlsCertificate *peerCertificate, IOSByteArray *pskIdentity, IOSByteArray *srpIdentity, IOSByteArray *encodedServerExtensions);

__attribute__((unused)) static OrgSpongycastleCryptoTlsSessionParameters *new_OrgSpongycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withOrgSpongycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_(jint cipherSuite, jshort compressionAlgorithm, IOSByteArray *masterSecret, OrgSpongycastleCryptoTlsCertificate *peerCertificate, IOSByteArray *pskIdentity, IOSByteArray *srpIdentity, IOSByteArray *encodedServerExtensions) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleCryptoTlsSessionParameters *create_OrgSpongycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withOrgSpongycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_(jint cipherSuite, jshort compressionAlgorithm, IOSByteArray *masterSecret, OrgSpongycastleCryptoTlsCertificate *peerCertificate, IOSByteArray *pskIdentity, IOSByteArray *srpIdentity, IOSByteArray *encodedServerExtensions);

@interface OrgSpongycastleCryptoTlsSessionParameters_Builder () {
 @public
  jint cipherSuite_;
  jshort compressionAlgorithm_;
  IOSByteArray *masterSecret_;
  OrgSpongycastleCryptoTlsCertificate *peerCertificate_;
  IOSByteArray *pskIdentity_;
  IOSByteArray *srpIdentity_;
  IOSByteArray *encodedServerExtensions_;
}

- (void)validateWithBoolean:(jboolean)condition
               withNSString:(NSString *)parameter;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsSessionParameters_Builder, masterSecret_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsSessionParameters_Builder, peerCertificate_, OrgSpongycastleCryptoTlsCertificate *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsSessionParameters_Builder, pskIdentity_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsSessionParameters_Builder, srpIdentity_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsSessionParameters_Builder, encodedServerExtensions_, IOSByteArray *)

__attribute__((unused)) static void OrgSpongycastleCryptoTlsSessionParameters_Builder_validateWithBoolean_withNSString_(OrgSpongycastleCryptoTlsSessionParameters_Builder *self, jboolean condition, NSString *parameter);

@implementation OrgSpongycastleCryptoTlsSessionParameters

- (instancetype)initWithInt:(jint)cipherSuite
                  withShort:(jshort)compressionAlgorithm
              withByteArray:(IOSByteArray *)masterSecret
withOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)peerCertificate
              withByteArray:(IOSByteArray *)pskIdentity
              withByteArray:(IOSByteArray *)srpIdentity
              withByteArray:(IOSByteArray *)encodedServerExtensions {
  OrgSpongycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withOrgSpongycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_(self, cipherSuite, compressionAlgorithm, masterSecret, peerCertificate, pskIdentity, srpIdentity, encodedServerExtensions);
  return self;
}

- (void)clear {
  if (self->masterSecret_ != nil) {
    OrgSpongycastleUtilArrays_fillWithByteArray_withByte_(self->masterSecret_, (jbyte) 0);
  }
}

- (OrgSpongycastleCryptoTlsSessionParameters *)copy__ {
  return new_OrgSpongycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withOrgSpongycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_(cipherSuite_, compressionAlgorithm_, masterSecret_, peerCertificate_, pskIdentity_, srpIdentity_, encodedServerExtensions_);
}

- (jint)getCipherSuite {
  return cipherSuite_;
}

- (jshort)getCompressionAlgorithm {
  return compressionAlgorithm_;
}

- (IOSByteArray *)getMasterSecret {
  return masterSecret_;
}

- (OrgSpongycastleCryptoTlsCertificate *)getPeerCertificate {
  return peerCertificate_;
}

- (IOSByteArray *)getPskIdentity {
  return pskIdentity_;
}

- (IOSByteArray *)getPSKIdentity {
  return pskIdentity_;
}

- (IOSByteArray *)getSRPIdentity {
  return srpIdentity_;
}

- (JavaUtilHashtable *)readServerExtensions {
  if (encodedServerExtensions_ == nil) {
    return nil;
  }
  JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(encodedServerExtensions_);
  return OrgSpongycastleCryptoTlsTlsProtocol_readExtensionsWithJavaIoByteArrayInputStream_(buf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsSessionParameters;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsCertificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashtable;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withShort:withByteArray:withOrgSpongycastleCryptoTlsCertificate:withByteArray:withByteArray:withByteArray:);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(copy__);
  methods[3].selector = @selector(getCipherSuite);
  methods[4].selector = @selector(getCompressionAlgorithm);
  methods[5].selector = @selector(getMasterSecret);
  methods[6].selector = @selector(getPeerCertificate);
  methods[7].selector = @selector(getPskIdentity);
  methods[8].selector = @selector(getPSKIdentity);
  methods[9].selector = @selector(getSRPIdentity);
  methods[10].selector = @selector(readServerExtensions);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cipherSuite_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "compressionAlgorithm_", "S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "masterSecret_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "peerCertificate_", "LOrgSpongycastleCryptoTlsCertificate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pskIdentity_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "srpIdentity_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encodedServerExtensions_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IS[BLOrgSpongycastleCryptoTlsCertificate;[B[B[B", "copy", "LJavaIoIOException;", "LOrgSpongycastleCryptoTlsSessionParameters_Builder;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsSessionParameters = { "SessionParameters", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x11, 11, 7, -1, 3, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsSessionParameters;
}

@end

void OrgSpongycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withOrgSpongycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_(OrgSpongycastleCryptoTlsSessionParameters *self, jint cipherSuite, jshort compressionAlgorithm, IOSByteArray *masterSecret, OrgSpongycastleCryptoTlsCertificate *peerCertificate, IOSByteArray *pskIdentity, IOSByteArray *srpIdentity, IOSByteArray *encodedServerExtensions) {
  NSObject_init(self);
  self->pskIdentity_ = nil;
  self->srpIdentity_ = nil;
  self->cipherSuite_ = cipherSuite;
  self->compressionAlgorithm_ = compressionAlgorithm;
  self->masterSecret_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(masterSecret);
  self->peerCertificate_ = peerCertificate;
  self->pskIdentity_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(pskIdentity);
  self->srpIdentity_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(srpIdentity);
  self->encodedServerExtensions_ = encodedServerExtensions;
}

OrgSpongycastleCryptoTlsSessionParameters *new_OrgSpongycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withOrgSpongycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_(jint cipherSuite, jshort compressionAlgorithm, IOSByteArray *masterSecret, OrgSpongycastleCryptoTlsCertificate *peerCertificate, IOSByteArray *pskIdentity, IOSByteArray *srpIdentity, IOSByteArray *encodedServerExtensions) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsSessionParameters, initWithInt_withShort_withByteArray_withOrgSpongycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_, cipherSuite, compressionAlgorithm, masterSecret, peerCertificate, pskIdentity, srpIdentity, encodedServerExtensions)
}

OrgSpongycastleCryptoTlsSessionParameters *create_OrgSpongycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withOrgSpongycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_(jint cipherSuite, jshort compressionAlgorithm, IOSByteArray *masterSecret, OrgSpongycastleCryptoTlsCertificate *peerCertificate, IOSByteArray *pskIdentity, IOSByteArray *srpIdentity, IOSByteArray *encodedServerExtensions) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsSessionParameters, initWithInt_withShort_withByteArray_withOrgSpongycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_, cipherSuite, compressionAlgorithm, masterSecret, peerCertificate, pskIdentity, srpIdentity, encodedServerExtensions)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsSessionParameters)

@implementation OrgSpongycastleCryptoTlsSessionParameters_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsSessionParameters_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgSpongycastleCryptoTlsSessionParameters *)build {
  OrgSpongycastleCryptoTlsSessionParameters_Builder_validateWithBoolean_withNSString_(self, self->cipherSuite_ >= 0, @"cipherSuite");
  OrgSpongycastleCryptoTlsSessionParameters_Builder_validateWithBoolean_withNSString_(self, self->compressionAlgorithm_ >= 0, @"compressionAlgorithm");
  OrgSpongycastleCryptoTlsSessionParameters_Builder_validateWithBoolean_withNSString_(self, self->masterSecret_ != nil, @"masterSecret");
  return new_OrgSpongycastleCryptoTlsSessionParameters_initWithInt_withShort_withByteArray_withOrgSpongycastleCryptoTlsCertificate_withByteArray_withByteArray_withByteArray_(cipherSuite_, compressionAlgorithm_, masterSecret_, peerCertificate_, pskIdentity_, srpIdentity_, encodedServerExtensions_);
}

- (OrgSpongycastleCryptoTlsSessionParameters_Builder *)setCipherSuiteWithInt:(jint)cipherSuite {
  self->cipherSuite_ = cipherSuite;
  return self;
}

- (OrgSpongycastleCryptoTlsSessionParameters_Builder *)setCompressionAlgorithmWithShort:(jshort)compressionAlgorithm {
  self->compressionAlgorithm_ = compressionAlgorithm;
  return self;
}

- (OrgSpongycastleCryptoTlsSessionParameters_Builder *)setMasterSecretWithByteArray:(IOSByteArray *)masterSecret {
  self->masterSecret_ = masterSecret;
  return self;
}

- (OrgSpongycastleCryptoTlsSessionParameters_Builder *)setPeerCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)peerCertificate {
  self->peerCertificate_ = peerCertificate;
  return self;
}

- (OrgSpongycastleCryptoTlsSessionParameters_Builder *)setPskIdentityWithByteArray:(IOSByteArray *)pskIdentity {
  self->pskIdentity_ = pskIdentity;
  return self;
}

- (OrgSpongycastleCryptoTlsSessionParameters_Builder *)setPSKIdentityWithByteArray:(IOSByteArray *)pskIdentity {
  self->pskIdentity_ = pskIdentity;
  return self;
}

- (OrgSpongycastleCryptoTlsSessionParameters_Builder *)setSRPIdentityWithByteArray:(IOSByteArray *)srpIdentity {
  self->srpIdentity_ = srpIdentity;
  return self;
}

- (OrgSpongycastleCryptoTlsSessionParameters_Builder *)setServerExtensionsWithJavaUtilHashtable:(JavaUtilHashtable *)serverExtensions {
  if (serverExtensions == nil) {
    encodedServerExtensions_ = nil;
  }
  else {
    JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
    OrgSpongycastleCryptoTlsTlsProtocol_writeExtensionsWithJavaIoOutputStream_withJavaUtilHashtable_(buf, serverExtensions);
    encodedServerExtensions_ = [buf toByteArray];
  }
  return self;
}

- (void)validateWithBoolean:(jboolean)condition
               withNSString:(NSString *)parameter {
  OrgSpongycastleCryptoTlsSessionParameters_Builder_validateWithBoolean_withNSString_(self, condition, parameter);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsSessionParameters;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsSessionParameters_Builder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsSessionParameters_Builder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsSessionParameters_Builder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsSessionParameters_Builder;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsSessionParameters_Builder;", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsSessionParameters_Builder;", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsSessionParameters_Builder;", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsSessionParameters_Builder;", 0x1, 11, 12, 13, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(build);
  methods[2].selector = @selector(setCipherSuiteWithInt:);
  methods[3].selector = @selector(setCompressionAlgorithmWithShort:);
  methods[4].selector = @selector(setMasterSecretWithByteArray:);
  methods[5].selector = @selector(setPeerCertificateWithOrgSpongycastleCryptoTlsCertificate:);
  methods[6].selector = @selector(setPskIdentityWithByteArray:);
  methods[7].selector = @selector(setPSKIdentityWithByteArray:);
  methods[8].selector = @selector(setSRPIdentityWithByteArray:);
  methods[9].selector = @selector(setServerExtensionsWithJavaUtilHashtable:);
  methods[10].selector = @selector(validateWithBoolean:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cipherSuite_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "compressionAlgorithm_", "S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "masterSecret_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "peerCertificate_", "LOrgSpongycastleCryptoTlsCertificate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pskIdentity_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "srpIdentity_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encodedServerExtensions_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setCipherSuite", "I", "setCompressionAlgorithm", "S", "setMasterSecret", "[B", "setPeerCertificate", "LOrgSpongycastleCryptoTlsCertificate;", "setPskIdentity", "setPSKIdentity", "setSRPIdentity", "setServerExtensions", "LJavaUtilHashtable;", "LJavaIoIOException;", "validate", "ZLNSString;", "LOrgSpongycastleCryptoTlsSessionParameters;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsSessionParameters_Builder = { "Builder", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x19, 11, 7, 16, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsSessionParameters_Builder;
}

@end

void OrgSpongycastleCryptoTlsSessionParameters_Builder_init(OrgSpongycastleCryptoTlsSessionParameters_Builder *self) {
  NSObject_init(self);
  self->cipherSuite_ = -1;
  self->compressionAlgorithm_ = -1;
  self->masterSecret_ = nil;
  self->peerCertificate_ = nil;
  self->pskIdentity_ = nil;
  self->srpIdentity_ = nil;
  self->encodedServerExtensions_ = nil;
}

OrgSpongycastleCryptoTlsSessionParameters_Builder *new_OrgSpongycastleCryptoTlsSessionParameters_Builder_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsSessionParameters_Builder, init)
}

OrgSpongycastleCryptoTlsSessionParameters_Builder *create_OrgSpongycastleCryptoTlsSessionParameters_Builder_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsSessionParameters_Builder, init)
}

void OrgSpongycastleCryptoTlsSessionParameters_Builder_validateWithBoolean_withNSString_(OrgSpongycastleCryptoTlsSessionParameters_Builder *self, jboolean condition, NSString *parameter) {
  if (!condition) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"Required session parameter '", parameter, @"' not configured"));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsSessionParameters_Builder)
