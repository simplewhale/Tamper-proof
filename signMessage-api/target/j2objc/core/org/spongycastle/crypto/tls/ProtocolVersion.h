//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/ProtocolVersion.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsProtocolVersion")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsProtocolVersion
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsProtocolVersion 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsProtocolVersion 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsProtocolVersion

#if !defined (OrgSpongycastleCryptoTlsProtocolVersion_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsProtocolVersion || defined(INCLUDE_OrgSpongycastleCryptoTlsProtocolVersion))
#define OrgSpongycastleCryptoTlsProtocolVersion_

@interface OrgSpongycastleCryptoTlsProtocolVersion : NSObject

#pragma mark Public

- (jboolean)isEqual:(id)other;

- (jboolean)equalsWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)other;

+ (OrgSpongycastleCryptoTlsProtocolVersion *)getWithInt:(jint)major
                                                withInt:(jint)minor;

- (OrgSpongycastleCryptoTlsProtocolVersion *)getEquivalentTLSVersion;

- (jint)getFullVersion;

- (jint)getMajorVersion;

- (jint)getMinorVersion;

- (NSUInteger)hash;

- (jboolean)isDTLS;

- (jboolean)isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)version_;

- (jboolean)isLaterVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)version_;

- (jboolean)isSSL;

- (jboolean)isTLS;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleCryptoTlsProtocolVersion)

inline OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_get_SSLv3(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_SSLv3;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsProtocolVersion, SSLv3, OrgSpongycastleCryptoTlsProtocolVersion *)

inline OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_get_TLSv10(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_TLSv10;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsProtocolVersion, TLSv10, OrgSpongycastleCryptoTlsProtocolVersion *)

inline OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_get_TLSv11(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_TLSv11;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsProtocolVersion, TLSv11, OrgSpongycastleCryptoTlsProtocolVersion *)

inline OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_get_TLSv12(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_TLSv12;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsProtocolVersion, TLSv12, OrgSpongycastleCryptoTlsProtocolVersion *)

inline OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_get_DTLSv10(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_DTLSv10;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsProtocolVersion, DTLSv10, OrgSpongycastleCryptoTlsProtocolVersion *)

inline OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_get_DTLSv12(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_DTLSv12;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoTlsProtocolVersion, DTLSv12, OrgSpongycastleCryptoTlsProtocolVersion *)

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsProtocolVersion *OrgSpongycastleCryptoTlsProtocolVersion_getWithInt_withInt_(jint major, jint minor);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsProtocolVersion)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsProtocolVersion")
