//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsRSAKeyExchange.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsRSAKeyExchange")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsTlsRSAKeyExchange
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsRSAKeyExchange 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsRSAKeyExchange 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsTlsRSAKeyExchange

#if !defined (OrgSpongycastleCryptoTlsTlsRSAKeyExchange_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsRSAKeyExchange || defined(INCLUDE_OrgSpongycastleCryptoTlsTlsRSAKeyExchange))
#define OrgSpongycastleCryptoTlsTlsRSAKeyExchange_

#define RESTRICT_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange 1
#define INCLUDE_OrgSpongycastleCryptoTlsAbstractTlsKeyExchange 1
#include "org/spongycastle/crypto/tls/AbstractTlsKeyExchange.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaUtilVector;
@class OrgSpongycastleCryptoParamsAsymmetricKeyParameter;
@class OrgSpongycastleCryptoParamsRSAKeyParameters;
@class OrgSpongycastleCryptoTlsCertificate;
@class OrgSpongycastleCryptoTlsCertificateRequest;
@protocol OrgSpongycastleCryptoTlsTlsCredentials;
@protocol OrgSpongycastleCryptoTlsTlsEncryptionCredentials;

@interface OrgSpongycastleCryptoTlsTlsRSAKeyExchange : OrgSpongycastleCryptoTlsAbstractTlsKeyExchange {
 @public
  OrgSpongycastleCryptoParamsAsymmetricKeyParameter *serverPublicKey_;
  OrgSpongycastleCryptoParamsRSAKeyParameters *rsaServerPublicKey_;
  id<OrgSpongycastleCryptoTlsTlsEncryptionCredentials> serverCredentials_;
  IOSByteArray *premasterSecret_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms;

- (void)generateClientKeyExchangeWithJavaIoOutputStream:(JavaIoOutputStream *)output;

- (IOSByteArray *)generatePremasterSecret;

- (void)processClientCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:(id<OrgSpongycastleCryptoTlsTlsCredentials>)clientCredentials;

- (void)processClientKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

- (void)processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)serverCertificate;

- (void)processServerCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:(id<OrgSpongycastleCryptoTlsTlsCredentials>)serverCredentials;

- (void)skipServerCredentials;

- (void)validateCertificateRequestWithOrgSpongycastleCryptoTlsCertificateRequest:(OrgSpongycastleCryptoTlsCertificateRequest *)certificateRequest;

#pragma mark Protected

- (OrgSpongycastleCryptoParamsRSAKeyParameters *)validateRSAPublicKeyWithOrgSpongycastleCryptoParamsRSAKeyParameters:(OrgSpongycastleCryptoParamsRSAKeyParameters *)key;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithInt:(jint)arg0
         withJavaUtilVector:(JavaUtilVector *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsTlsRSAKeyExchange)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsRSAKeyExchange, serverPublicKey_, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsRSAKeyExchange, rsaServerPublicKey_, OrgSpongycastleCryptoParamsRSAKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsRSAKeyExchange, serverCredentials_, id<OrgSpongycastleCryptoTlsTlsEncryptionCredentials>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsRSAKeyExchange, premasterSecret_, IOSByteArray *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsRSAKeyExchange_initWithJavaUtilVector_(OrgSpongycastleCryptoTlsTlsRSAKeyExchange *self, JavaUtilVector *supportedSignatureAlgorithms);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsRSAKeyExchange *new_OrgSpongycastleCryptoTlsTlsRSAKeyExchange_initWithJavaUtilVector_(JavaUtilVector *supportedSignatureAlgorithms) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsRSAKeyExchange *create_OrgSpongycastleCryptoTlsTlsRSAKeyExchange_initWithJavaUtilVector_(JavaUtilVector *supportedSignatureAlgorithms);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsTlsRSAKeyExchange)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsRSAKeyExchange")
