//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/HeartbeatExtension.java
//

#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/HeartbeatExtension.h"
#include "org/spongycastle/crypto/tls/HeartbeatMode.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

@implementation OrgSpongycastleCryptoTlsHeartbeatExtension

- (instancetype)initWithShort:(jshort)mode {
  OrgSpongycastleCryptoTlsHeartbeatExtension_initWithShort_(self, mode);
  return self;
}

- (jshort)getMode {
  return mode_;
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(mode_, output);
}

+ (OrgSpongycastleCryptoTlsHeartbeatExtension *)parseWithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsHeartbeatExtension_parseWithJavaIoInputStream_(input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsHeartbeatExtension;", 0x9, 4, 5, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithShort:);
  methods[1].selector = @selector(getMode);
  methods[2].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[3].selector = @selector(parseWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mode_", "S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "S", "encode", "LJavaIoOutputStream;", "LJavaIoIOException;", "parse", "LJavaIoInputStream;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsHeartbeatExtension = { "HeartbeatExtension", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsHeartbeatExtension;
}

@end

void OrgSpongycastleCryptoTlsHeartbeatExtension_initWithShort_(OrgSpongycastleCryptoTlsHeartbeatExtension *self, jshort mode) {
  NSObject_init(self);
  if (!OrgSpongycastleCryptoTlsHeartbeatMode_isValidWithShort_(mode)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'mode' is not a valid HeartbeatMode value");
  }
  self->mode_ = mode;
}

OrgSpongycastleCryptoTlsHeartbeatExtension *new_OrgSpongycastleCryptoTlsHeartbeatExtension_initWithShort_(jshort mode) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsHeartbeatExtension, initWithShort_, mode)
}

OrgSpongycastleCryptoTlsHeartbeatExtension *create_OrgSpongycastleCryptoTlsHeartbeatExtension_initWithShort_(jshort mode) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsHeartbeatExtension, initWithShort_, mode)
}

OrgSpongycastleCryptoTlsHeartbeatExtension *OrgSpongycastleCryptoTlsHeartbeatExtension_parseWithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsHeartbeatExtension_initialize();
  jshort mode = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
  if (!OrgSpongycastleCryptoTlsHeartbeatMode_isValidWithShort_(mode)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  return new_OrgSpongycastleCryptoTlsHeartbeatExtension_initWithShort_(mode);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsHeartbeatExtension)
