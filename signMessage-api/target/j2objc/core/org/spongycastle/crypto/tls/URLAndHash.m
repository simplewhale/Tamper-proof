//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/URLAndHash.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/crypto/tls/URLAndHash.h"
#include "org/spongycastle/util/Strings.h"

@implementation OrgSpongycastleCryptoTlsURLAndHash

- (instancetype)initWithNSString:(NSString *)url
                   withByteArray:(IOSByteArray *)sha1Hash {
  OrgSpongycastleCryptoTlsURLAndHash_initWithNSString_withByteArray_(self, url, sha1Hash);
  return self;
}

- (NSString *)getURL {
  return url_;
}

- (IOSByteArray *)getSHA1Hash {
  return sha1Hash_;
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  IOSByteArray *urlEncoding = OrgSpongycastleUtilStrings_toByteArrayWithNSString_(self->url_);
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(urlEncoding, output);
  if (self->sha1Hash_ == nil) {
    OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithInt_withJavaIoOutputStream_(0, output);
  }
  else {
    OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithInt_withJavaIoOutputStream_(1, output);
    [((JavaIoOutputStream *) nil_chk(output)) writeWithByteArray:self->sha1Hash_];
  }
}

+ (OrgSpongycastleCryptoTlsURLAndHash *)parseWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                                                              withJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsURLAndHash_parseWithOrgSpongycastleCryptoTlsTlsContext_withJavaIoInputStream_(context, input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsURLAndHash;", 0x9, 4, 5, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withByteArray:);
  methods[1].selector = @selector(getURL);
  methods[2].selector = @selector(getSHA1Hash);
  methods[3].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[4].selector = @selector(parseWithOrgSpongycastleCryptoTlsTlsContext:withJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "url_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sha1Hash_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[B", "encode", "LJavaIoOutputStream;", "LJavaIoIOException;", "parse", "LOrgSpongycastleCryptoTlsTlsContext;LJavaIoInputStream;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsURLAndHash = { "URLAndHash", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsURLAndHash;
}

@end

void OrgSpongycastleCryptoTlsURLAndHash_initWithNSString_withByteArray_(OrgSpongycastleCryptoTlsURLAndHash *self, NSString *url, IOSByteArray *sha1Hash) {
  NSObject_init(self);
  if (url == nil || [url java_length] < 1 || [url java_length] >= (JreLShift32(1, 16))) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'url' must have length from 1 to (2^16 - 1)");
  }
  if (sha1Hash != nil && sha1Hash->size_ != 20) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'sha1Hash' must have length == 20, if present");
  }
  self->url_ = url;
  self->sha1Hash_ = sha1Hash;
}

OrgSpongycastleCryptoTlsURLAndHash *new_OrgSpongycastleCryptoTlsURLAndHash_initWithNSString_withByteArray_(NSString *url, IOSByteArray *sha1Hash) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsURLAndHash, initWithNSString_withByteArray_, url, sha1Hash)
}

OrgSpongycastleCryptoTlsURLAndHash *create_OrgSpongycastleCryptoTlsURLAndHash_initWithNSString_withByteArray_(NSString *url, IOSByteArray *sha1Hash) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsURLAndHash, initWithNSString_withByteArray_, url, sha1Hash)
}

OrgSpongycastleCryptoTlsURLAndHash *OrgSpongycastleCryptoTlsURLAndHash_parseWithOrgSpongycastleCryptoTlsTlsContext_withJavaIoInputStream_(id<OrgSpongycastleCryptoTlsTlsContext> context, JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsURLAndHash_initialize();
  IOSByteArray *urlEncoding = OrgSpongycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(input);
  if (((IOSByteArray *) nil_chk(urlEncoding))->size_ < 1) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  NSString *url = OrgSpongycastleUtilStrings_fromByteArrayWithByteArray_(urlEncoding);
  IOSByteArray *sha1Hash = nil;
  jshort padding = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
  switch (padding) {
    case 0:
    if (OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_(context)) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
    }
    break;
    case 1:
    sha1Hash = OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(20, input);
    break;
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  return new_OrgSpongycastleCryptoTlsURLAndHash_initWithNSString_withByteArray_(url, sha1Hash);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsURLAndHash)
