//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/OCSPStatusRequest.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/util/Vector.h"
#include "org/spongycastle/asn1/ASN1Encoding.h"
#include "org/spongycastle/asn1/ASN1Primitive.h"
#include "org/spongycastle/asn1/ocsp/ResponderID.h"
#include "org/spongycastle/asn1/x509/Extensions.h"
#include "org/spongycastle/crypto/tls/OCSPStatusRequest.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/util/io/Streams.h"

@implementation OrgSpongycastleCryptoTlsOCSPStatusRequest

- (instancetype)initWithJavaUtilVector:(JavaUtilVector *)responderIDList
 withOrgSpongycastleAsn1X509Extensions:(OrgSpongycastleAsn1X509Extensions *)requestExtensions {
  OrgSpongycastleCryptoTlsOCSPStatusRequest_initWithJavaUtilVector_withOrgSpongycastleAsn1X509Extensions_(self, responderIDList, requestExtensions);
  return self;
}

- (JavaUtilVector *)getResponderIDList {
  return responderIDList_;
}

- (OrgSpongycastleAsn1X509Extensions *)getRequestExtensions {
  return requestExtensions_;
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  if (responderIDList_ == nil || [responderIDList_ isEmpty]) {
    OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(0, output);
  }
  else {
    JavaIoByteArrayOutputStream *buf = new_JavaIoByteArrayOutputStream_init();
    for (jint i = 0; i < [((JavaUtilVector *) nil_chk(responderIDList_)) size]; ++i) {
      OrgSpongycastleAsn1OcspResponderID *responderID = (OrgSpongycastleAsn1OcspResponderID *) cast_chk([((JavaUtilVector *) nil_chk(responderIDList_)) elementAtWithInt:i], [OrgSpongycastleAsn1OcspResponderID class]);
      IOSByteArray *derEncoding = [((OrgSpongycastleAsn1OcspResponderID *) nil_chk(responderID)) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
      OrgSpongycastleCryptoTlsTlsUtils_writeOpaque16WithByteArray_withJavaIoOutputStream_(derEncoding, buf);
    }
    OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithInt_([buf size]);
    OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_([buf size], output);
    OrgSpongycastleUtilIoStreams_writeBufToWithJavaIoByteArrayOutputStream_withJavaIoOutputStream_(buf, output);
  }
  if (requestExtensions_ == nil) {
    OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(0, output);
  }
  else {
    IOSByteArray *derEncoding = [requestExtensions_ getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
    OrgSpongycastleCryptoTlsTlsUtils_checkUint16WithInt_(((IOSByteArray *) nil_chk(derEncoding))->size_);
    OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(derEncoding->size_, output);
    [((JavaIoOutputStream *) nil_chk(output)) writeWithByteArray:derEncoding];
  }
}

+ (OrgSpongycastleCryptoTlsOCSPStatusRequest *)parseWithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsOCSPStatusRequest_parseWithJavaIoInputStream_(input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509Extensions;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsOCSPStatusRequest;", 0x9, 4, 5, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilVector:withOrgSpongycastleAsn1X509Extensions:);
  methods[1].selector = @selector(getResponderIDList);
  methods[2].selector = @selector(getRequestExtensions);
  methods[3].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[4].selector = @selector(parseWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "responderIDList_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "requestExtensions_", "LOrgSpongycastleAsn1X509Extensions;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilVector;LOrgSpongycastleAsn1X509Extensions;", "encode", "LJavaIoOutputStream;", "LJavaIoIOException;", "parse", "LJavaIoInputStream;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsOCSPStatusRequest = { "OCSPStatusRequest", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsOCSPStatusRequest;
}

@end

void OrgSpongycastleCryptoTlsOCSPStatusRequest_initWithJavaUtilVector_withOrgSpongycastleAsn1X509Extensions_(OrgSpongycastleCryptoTlsOCSPStatusRequest *self, JavaUtilVector *responderIDList, OrgSpongycastleAsn1X509Extensions *requestExtensions) {
  NSObject_init(self);
  self->responderIDList_ = responderIDList;
  self->requestExtensions_ = requestExtensions;
}

OrgSpongycastleCryptoTlsOCSPStatusRequest *new_OrgSpongycastleCryptoTlsOCSPStatusRequest_initWithJavaUtilVector_withOrgSpongycastleAsn1X509Extensions_(JavaUtilVector *responderIDList, OrgSpongycastleAsn1X509Extensions *requestExtensions) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsOCSPStatusRequest, initWithJavaUtilVector_withOrgSpongycastleAsn1X509Extensions_, responderIDList, requestExtensions)
}

OrgSpongycastleCryptoTlsOCSPStatusRequest *create_OrgSpongycastleCryptoTlsOCSPStatusRequest_initWithJavaUtilVector_withOrgSpongycastleAsn1X509Extensions_(JavaUtilVector *responderIDList, OrgSpongycastleAsn1X509Extensions *requestExtensions) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsOCSPStatusRequest, initWithJavaUtilVector_withOrgSpongycastleAsn1X509Extensions_, responderIDList, requestExtensions)
}

OrgSpongycastleCryptoTlsOCSPStatusRequest *OrgSpongycastleCryptoTlsOCSPStatusRequest_parseWithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsOCSPStatusRequest_initialize();
  JavaUtilVector *responderIDList = new_JavaUtilVector_init();
  {
    jint length = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(input);
    if (length > 0) {
      IOSByteArray *data = OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(length, input);
      JavaIoByteArrayInputStream *buf = new_JavaIoByteArrayInputStream_initWithByteArray_(data);
      do {
        IOSByteArray *derEncoding = OrgSpongycastleCryptoTlsTlsUtils_readOpaque16WithJavaIoInputStream_(buf);
        OrgSpongycastleAsn1OcspResponderID *responderID = OrgSpongycastleAsn1OcspResponderID_getInstanceWithId_(OrgSpongycastleCryptoTlsTlsUtils_readDERObjectWithByteArray_(derEncoding));
        [responderIDList addElementWithId:responderID];
      }
      while ([buf available] > 0);
    }
  }
  OrgSpongycastleAsn1X509Extensions *requestExtensions = nil;
  {
    jint length = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(input);
    if (length > 0) {
      IOSByteArray *derEncoding = OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(length, input);
      requestExtensions = OrgSpongycastleAsn1X509Extensions_getInstanceWithId_(OrgSpongycastleCryptoTlsTlsUtils_readDERObjectWithByteArray_(derEncoding));
    }
  }
  return new_OrgSpongycastleCryptoTlsOCSPStatusRequest_initWithJavaUtilVector_withOrgSpongycastleAsn1X509Extensions_(responderIDList, requestExtensions);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsOCSPStatusRequest)
