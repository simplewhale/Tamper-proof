//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/AbstractTlsClient.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"
#include "org/spongycastle/crypto/tls/AbstractTlsClient.h"
#include "org/spongycastle/crypto/tls/AbstractTlsPeer.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/CompressionMethod.h"
#include "org/spongycastle/crypto/tls/DefaultTlsCipherFactory.h"
#include "org/spongycastle/crypto/tls/ECPointFormat.h"
#include "org/spongycastle/crypto/tls/ExtensionType.h"
#include "org/spongycastle/crypto/tls/NamedCurve.h"
#include "org/spongycastle/crypto/tls/NewSessionTicket.h"
#include "org/spongycastle/crypto/tls/ProtocolVersion.h"
#include "org/spongycastle/crypto/tls/TlsCipher.h"
#include "org/spongycastle/crypto/tls/TlsCipherFactory.h"
#include "org/spongycastle/crypto/tls/TlsClientContext.h"
#include "org/spongycastle/crypto/tls/TlsCompression.h"
#include "org/spongycastle/crypto/tls/TlsECCUtils.h"
#include "org/spongycastle/crypto/tls/TlsExtensionsUtils.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsNullCompression.h"
#include "org/spongycastle/crypto/tls/TlsSession.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation OrgSpongycastleCryptoTlsAbstractTlsClient

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsAbstractTlsClient_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsCipherFactory:(id<OrgSpongycastleCryptoTlsTlsCipherFactory>)cipherFactory {
  OrgSpongycastleCryptoTlsAbstractTlsClient_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_(self, cipherFactory);
  return self;
}

- (jboolean)allowUnexpectedServerExtensionWithJavaLangInteger:(JavaLangInteger *)extensionType
                                                withByteArray:(IOSByteArray *)extensionData {
  switch ([((JavaLangInteger *) nil_chk(extensionType)) intValue]) {
    case OrgSpongycastleCryptoTlsExtensionType_elliptic_curves:
    (void) OrgSpongycastleCryptoTlsTlsECCUtils_readSupportedEllipticCurvesExtensionWithByteArray_(extensionData);
    return true;
    default:
    return false;
  }
}

- (void)checkForUnexpectedServerExtensionWithJavaUtilHashtable:(JavaUtilHashtable *)serverExtensions
                                           withJavaLangInteger:(JavaLangInteger *)extensionType {
  IOSByteArray *extensionData = OrgSpongycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(serverExtensions, extensionType);
  if (extensionData != nil && ![self allowUnexpectedServerExtensionWithJavaLangInteger:extensionType withByteArray:extensionData]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
}

- (void)init__WithOrgSpongycastleCryptoTlsTlsClientContext:(id<OrgSpongycastleCryptoTlsTlsClientContext>)context {
  self->context_ = context;
}

- (id<OrgSpongycastleCryptoTlsTlsSession>)getSessionToResume {
  return nil;
}

- (OrgSpongycastleCryptoTlsProtocolVersion *)getClientHelloRecordLayerVersion {
  return [self getClientVersion];
}

- (OrgSpongycastleCryptoTlsProtocolVersion *)getClientVersion {
  return JreLoadStatic(OrgSpongycastleCryptoTlsProtocolVersion, TLSv12);
}

- (jboolean)isFallback {
  return false;
}

- (JavaUtilHashtable *)getClientExtensions {
  JavaUtilHashtable *clientExtensions = nil;
  OrgSpongycastleCryptoTlsProtocolVersion *clientVersion = [((id<OrgSpongycastleCryptoTlsTlsClientContext>) nil_chk(context_)) getClientVersion];
  if (OrgSpongycastleCryptoTlsTlsUtils_isSignatureAlgorithmsExtensionAllowedWithOrgSpongycastleCryptoTlsProtocolVersion_(clientVersion)) {
    self->supportedSignatureAlgorithms_ = OrgSpongycastleCryptoTlsTlsUtils_getDefaultSupportedSignatureAlgorithms();
    clientExtensions = OrgSpongycastleCryptoTlsTlsExtensionsUtils_ensureExtensionsInitialisedWithJavaUtilHashtable_(clientExtensions);
    OrgSpongycastleCryptoTlsTlsUtils_addSignatureAlgorithmsExtensionWithJavaUtilHashtable_withJavaUtilVector_(clientExtensions, supportedSignatureAlgorithms_);
  }
  if (OrgSpongycastleCryptoTlsTlsECCUtils_containsECCCipherSuitesWithIntArray_([self getCipherSuites])) {
    self->namedCurves_ = [IOSIntArray newArrayWithInts:(jint[]){ OrgSpongycastleCryptoTlsNamedCurve_secp256r1, OrgSpongycastleCryptoTlsNamedCurve_secp384r1 } count:2];
    self->clientECPointFormats_ = [IOSShortArray newArrayWithShorts:(jshort[]){ OrgSpongycastleCryptoTlsECPointFormat_uncompressed, OrgSpongycastleCryptoTlsECPointFormat_ansiX962_compressed_prime, OrgSpongycastleCryptoTlsECPointFormat_ansiX962_compressed_char2 } count:3];
    clientExtensions = OrgSpongycastleCryptoTlsTlsExtensionsUtils_ensureExtensionsInitialisedWithJavaUtilHashtable_(clientExtensions);
    OrgSpongycastleCryptoTlsTlsECCUtils_addSupportedEllipticCurvesExtensionWithJavaUtilHashtable_withIntArray_(clientExtensions, namedCurves_);
    OrgSpongycastleCryptoTlsTlsECCUtils_addSupportedPointFormatsExtensionWithJavaUtilHashtable_withShortArray_(clientExtensions, clientECPointFormats_);
  }
  return clientExtensions;
}

- (OrgSpongycastleCryptoTlsProtocolVersion *)getMinimumVersion {
  return JreLoadStatic(OrgSpongycastleCryptoTlsProtocolVersion, TLSv10);
}

- (void)notifyServerVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)serverVersion {
  if (![((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk([self getMinimumVersion])) isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:serverVersion]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_protocol_version);
  }
}

- (IOSShortArray *)getCompressionMethods {
  return [IOSShortArray newArrayWithShorts:(jshort[]){ OrgSpongycastleCryptoTlsCompressionMethod__null } count:1];
}

- (void)notifySessionIDWithByteArray:(IOSByteArray *)sessionID {
}

- (void)notifySelectedCipherSuiteWithInt:(jint)selectedCipherSuite {
  self->selectedCipherSuite_ = selectedCipherSuite;
}

- (void)notifySelectedCompressionMethodWithShort:(jshort)selectedCompressionMethod {
  self->selectedCompressionMethod_ = selectedCompressionMethod;
}

- (void)processServerExtensionsWithJavaUtilHashtable:(JavaUtilHashtable *)serverExtensions {
  if (serverExtensions != nil) {
    [self checkForUnexpectedServerExtensionWithJavaUtilHashtable:serverExtensions withJavaLangInteger:JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EXT_signature_algorithms)];
    [self checkForUnexpectedServerExtensionWithJavaUtilHashtable:serverExtensions withJavaLangInteger:JreLoadStatic(OrgSpongycastleCryptoTlsTlsECCUtils, EXT_elliptic_curves)];
    if (OrgSpongycastleCryptoTlsTlsECCUtils_isECCCipherSuiteWithInt_(self->selectedCipherSuite_)) {
      self->serverECPointFormats_ = OrgSpongycastleCryptoTlsTlsECCUtils_getSupportedPointFormatsExtensionWithJavaUtilHashtable_(serverExtensions);
    }
    else {
      [self checkForUnexpectedServerExtensionWithJavaUtilHashtable:serverExtensions withJavaLangInteger:JreLoadStatic(OrgSpongycastleCryptoTlsTlsECCUtils, EXT_ec_point_formats)];
    }
    [self checkForUnexpectedServerExtensionWithJavaUtilHashtable:serverExtensions withJavaLangInteger:JreLoadStatic(OrgSpongycastleCryptoTlsTlsExtensionsUtils, EXT_padding)];
  }
}

- (void)processServerSupplementalDataWithJavaUtilVector:(JavaUtilVector *)serverSupplementalData {
  if (serverSupplementalData != nil) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
}

- (JavaUtilVector *)getClientSupplementalData {
  return nil;
}

- (id<OrgSpongycastleCryptoTlsTlsCompression>)getCompression {
  switch (selectedCompressionMethod_) {
    case OrgSpongycastleCryptoTlsCompressionMethod__null:
    return new_OrgSpongycastleCryptoTlsTlsNullCompression_init();
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
}

- (id<OrgSpongycastleCryptoTlsTlsCipher>)getCipher {
  jint encryptionAlgorithm = OrgSpongycastleCryptoTlsTlsUtils_getEncryptionAlgorithmWithInt_(selectedCipherSuite_);
  jint macAlgorithm = OrgSpongycastleCryptoTlsTlsUtils_getMACAlgorithmWithInt_(selectedCipherSuite_);
  return [((id<OrgSpongycastleCryptoTlsTlsCipherFactory>) nil_chk(cipherFactory_)) createCipherWithOrgSpongycastleCryptoTlsTlsContext:context_ withInt:encryptionAlgorithm withInt:macAlgorithm];
}

- (void)notifyNewSessionTicketWithOrgSpongycastleCryptoTlsNewSessionTicket:(OrgSpongycastleCryptoTlsNewSessionTicket *)newSessionTicket {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsSession;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsProtocolVersion;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsProtocolVersion;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashtable;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsProtocolVersion;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 3, -1, -1, -1 },
    { NULL, "[S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, 3, -1, -1, -1 },
    { NULL, "LJavaUtilVector;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsCompression;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsCipher;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsCipherFactory:);
  methods[2].selector = @selector(allowUnexpectedServerExtensionWithJavaLangInteger:withByteArray:);
  methods[3].selector = @selector(checkForUnexpectedServerExtensionWithJavaUtilHashtable:withJavaLangInteger:);
  methods[4].selector = @selector(init__WithOrgSpongycastleCryptoTlsTlsClientContext:);
  methods[5].selector = @selector(getSessionToResume);
  methods[6].selector = @selector(getClientHelloRecordLayerVersion);
  methods[7].selector = @selector(getClientVersion);
  methods[8].selector = @selector(isFallback);
  methods[9].selector = @selector(getClientExtensions);
  methods[10].selector = @selector(getMinimumVersion);
  methods[11].selector = @selector(notifyServerVersionWithOrgSpongycastleCryptoTlsProtocolVersion:);
  methods[12].selector = @selector(getCompressionMethods);
  methods[13].selector = @selector(notifySessionIDWithByteArray:);
  methods[14].selector = @selector(notifySelectedCipherSuiteWithInt:);
  methods[15].selector = @selector(notifySelectedCompressionMethodWithShort:);
  methods[16].selector = @selector(processServerExtensionsWithJavaUtilHashtable:);
  methods[17].selector = @selector(processServerSupplementalDataWithJavaUtilVector:);
  methods[18].selector = @selector(getClientSupplementalData);
  methods[19].selector = @selector(getCompression);
  methods[20].selector = @selector(getCipher);
  methods[21].selector = @selector(notifyNewSessionTicketWithOrgSpongycastleCryptoTlsNewSessionTicket:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cipherFactory_", "LOrgSpongycastleCryptoTlsTlsCipherFactory;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "context_", "LOrgSpongycastleCryptoTlsTlsClientContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "supportedSignatureAlgorithms_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "namedCurves_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "clientECPointFormats_", "[S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverECPointFormats_", "[S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "selectedCipherSuite_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "selectedCompressionMethod_", "S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsTlsCipherFactory;", "allowUnexpectedServerExtension", "LJavaLangInteger;[B", "LJavaIoIOException;", "checkForUnexpectedServerExtension", "LJavaUtilHashtable;LJavaLangInteger;", "init", "LOrgSpongycastleCryptoTlsTlsClientContext;", "notifyServerVersion", "LOrgSpongycastleCryptoTlsProtocolVersion;", "notifySessionID", "[B", "notifySelectedCipherSuite", "I", "notifySelectedCompressionMethod", "S", "processServerExtensions", "LJavaUtilHashtable;", "processServerSupplementalData", "LJavaUtilVector;", "notifyNewSessionTicket", "LOrgSpongycastleCryptoTlsNewSessionTicket;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsAbstractTlsClient = { "AbstractTlsClient", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x401, 22, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsAbstractTlsClient;
}

@end

void OrgSpongycastleCryptoTlsAbstractTlsClient_init(OrgSpongycastleCryptoTlsAbstractTlsClient *self) {
  OrgSpongycastleCryptoTlsAbstractTlsClient_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_(self, new_OrgSpongycastleCryptoTlsDefaultTlsCipherFactory_init());
}

void OrgSpongycastleCryptoTlsAbstractTlsClient_initWithOrgSpongycastleCryptoTlsTlsCipherFactory_(OrgSpongycastleCryptoTlsAbstractTlsClient *self, id<OrgSpongycastleCryptoTlsTlsCipherFactory> cipherFactory) {
  OrgSpongycastleCryptoTlsAbstractTlsPeer_init(self);
  self->cipherFactory_ = cipherFactory;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsAbstractTlsClient)
