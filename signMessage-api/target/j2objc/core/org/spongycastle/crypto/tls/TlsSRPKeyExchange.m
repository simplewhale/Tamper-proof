//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsSRPKeyExchange.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "java/util/Vector.h"
#include "org/spongycastle/asn1/x509/Certificate.h"
#include "org/spongycastle/asn1/x509/KeyUsage.h"
#include "org/spongycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/spongycastle/crypto/CryptoException.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/Signer.h"
#include "org/spongycastle/crypto/agreement/srp/SRP6Client.h"
#include "org/spongycastle/crypto/agreement/srp/SRP6Server.h"
#include "org/spongycastle/crypto/agreement/srp/SRP6Util.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/SRP6GroupParameters.h"
#include "org/spongycastle/crypto/tls/AbstractTlsKeyExchange.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/Certificate.h"
#include "org/spongycastle/crypto/tls/CertificateRequest.h"
#include "org/spongycastle/crypto/tls/DefaultTlsSRPGroupVerifier.h"
#include "org/spongycastle/crypto/tls/DigestInputBuffer.h"
#include "org/spongycastle/crypto/tls/DigitallySigned.h"
#include "org/spongycastle/crypto/tls/HashAlgorithm.h"
#include "org/spongycastle/crypto/tls/KeyExchangeAlgorithm.h"
#include "org/spongycastle/crypto/tls/SecurityParameters.h"
#include "org/spongycastle/crypto/tls/ServerSRPParams.h"
#include "org/spongycastle/crypto/tls/SignatureAndHashAlgorithm.h"
#include "org/spongycastle/crypto/tls/SignerInputBuffer.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsCredentials.h"
#include "org/spongycastle/crypto/tls/TlsDSSSigner.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsRSASigner.h"
#include "org/spongycastle/crypto/tls/TlsSRPGroupVerifier.h"
#include "org/spongycastle/crypto/tls/TlsSRPKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsSRPLoginParameters.h"
#include "org/spongycastle/crypto/tls/TlsSRPUtils.h"
#include "org/spongycastle/crypto/tls/TlsSigner.h"
#include "org/spongycastle/crypto/tls/TlsSignerCredentials.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/crypto/util/PublicKeyFactory.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/BigIntegers.h"
#include "org/spongycastle/util/io/TeeInputStream.h"

@implementation OrgSpongycastleCryptoTlsTlsSRPKeyExchange

+ (id<OrgSpongycastleCryptoTlsTlsSigner>)createSignerWithInt:(jint)keyExchange {
  return OrgSpongycastleCryptoTlsTlsSRPKeyExchange_createSignerWithInt_(keyExchange);
}

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
              withByteArray:(IOSByteArray *)identity
              withByteArray:(IOSByteArray *)password {
  OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withByteArray_withByteArray_(self, keyExchange, supportedSignatureAlgorithms, identity, password);
  return self;
}

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
withOrgSpongycastleCryptoTlsTlsSRPGroupVerifier:(id<OrgSpongycastleCryptoTlsTlsSRPGroupVerifier>)groupVerifier
              withByteArray:(IOSByteArray *)identity
              withByteArray:(IOSByteArray *)password {
  OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(self, keyExchange, supportedSignatureAlgorithms, groupVerifier, identity, password);
  return self;
}

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
              withByteArray:(IOSByteArray *)identity
withOrgSpongycastleCryptoTlsTlsSRPLoginParameters:(OrgSpongycastleCryptoTlsTlsSRPLoginParameters *)loginParameters {
  OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withByteArray_withOrgSpongycastleCryptoTlsTlsSRPLoginParameters_(self, keyExchange, supportedSignatureAlgorithms, identity, loginParameters);
  return self;
}

- (void)init__WithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context {
  [super init__WithOrgSpongycastleCryptoTlsTlsContext:context];
  if (self->tlsSigner_ != nil) {
    [self->tlsSigner_ init__WithOrgSpongycastleCryptoTlsTlsContext:context];
  }
}

- (void)skipServerCredentials {
  if (tlsSigner_ != nil) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
}

- (void)processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)serverCertificate {
  if (tlsSigner_ == nil) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
  if ([((OrgSpongycastleCryptoTlsCertificate *) nil_chk(serverCertificate)) isEmpty]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_bad_certificate);
  }
  OrgSpongycastleAsn1X509Certificate *x509Cert = [serverCertificate getCertificateAtWithInt:0];
  OrgSpongycastleAsn1X509SubjectPublicKeyInfo *keyInfo = [((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Cert)) getSubjectPublicKeyInfo];
  @try {
    self->serverPublicKey_ = OrgSpongycastleCryptoUtilPublicKeyFactory_createKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(keyInfo);
  }
  @catch (JavaLangRuntimeException *e) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_unsupported_certificate, e);
  }
  if (![((id<OrgSpongycastleCryptoTlsTlsSigner>) nil_chk(tlsSigner_)) isValidPublicKeyWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter:self->serverPublicKey_]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_certificate_unknown);
  }
  OrgSpongycastleCryptoTlsTlsUtils_validateKeyUsageWithOrgSpongycastleAsn1X509Certificate_withInt_(x509Cert, OrgSpongycastleAsn1X509KeyUsage_digitalSignature);
  [super processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:serverCertificate];
}

- (void)processServerCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:(id<OrgSpongycastleCryptoTlsTlsCredentials>)serverCredentials {
  if ((keyExchange_ == OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_SRP) || !([OrgSpongycastleCryptoTlsTlsSignerCredentials_class_() isInstance:serverCredentials])) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  [self processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:[((id<OrgSpongycastleCryptoTlsTlsCredentials>) nil_chk(serverCredentials)) getCertificate]];
  self->serverCredentials_ = (id<OrgSpongycastleCryptoTlsTlsSignerCredentials>) cast_check(serverCredentials, OrgSpongycastleCryptoTlsTlsSignerCredentials_class_());
}

- (jboolean)requiresServerKeyExchange {
  return true;
}

- (IOSByteArray *)generateServerKeyExchange {
  [((OrgSpongycastleCryptoAgreementSrpSRP6Server *) nil_chk(srpServer_)) init__WithOrgSpongycastleCryptoParamsSRP6GroupParameters:srpGroup_ withJavaMathBigInteger:srpVerifier_ withOrgSpongycastleCryptoDigest:OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsHashAlgorithm_sha1) withJavaSecuritySecureRandom:[((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecureRandom]];
  JavaMathBigInteger *B = [((OrgSpongycastleCryptoAgreementSrpSRP6Server *) nil_chk(srpServer_)) generateServerCredentials];
  OrgSpongycastleCryptoTlsServerSRPParams *srpParams = new_OrgSpongycastleCryptoTlsServerSRPParams_initWithJavaMathBigInteger_withJavaMathBigInteger_withByteArray_withJavaMathBigInteger_([((OrgSpongycastleCryptoParamsSRP6GroupParameters *) nil_chk(srpGroup_)) getN], [((OrgSpongycastleCryptoParamsSRP6GroupParameters *) nil_chk(srpGroup_)) getG], srpSalt_, B);
  OrgSpongycastleCryptoTlsDigestInputBuffer *buf = new_OrgSpongycastleCryptoTlsDigestInputBuffer_init();
  [srpParams encodeWithJavaIoOutputStream:buf];
  if (serverCredentials_ != nil) {
    OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm = OrgSpongycastleCryptoTlsTlsUtils_getSignatureAndHashAlgorithmWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsSignerCredentials_(context_, serverCredentials_);
    id<OrgSpongycastleCryptoDigest> d = OrgSpongycastleCryptoTlsTlsUtils_createHashWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(signatureAndHashAlgorithm);
    OrgSpongycastleCryptoTlsSecurityParameters *securityParameters = [((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecurityParameters];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(d)) updateWithByteArray:((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters))->clientRandom_ withInt:0 withInt:((IOSByteArray *) nil_chk(securityParameters->clientRandom_))->size_];
    [d updateWithByteArray:securityParameters->serverRandom_ withInt:0 withInt:((IOSByteArray *) nil_chk(securityParameters->serverRandom_))->size_];
    [buf updateDigestWithOrgSpongycastleCryptoDigest:d];
    IOSByteArray *hash_ = [IOSByteArray newArrayWithLength:[d getDigestSize]];
    [d doFinalWithByteArray:hash_ withInt:0];
    IOSByteArray *signature = [((id<OrgSpongycastleCryptoTlsTlsSignerCredentials>) nil_chk(serverCredentials_)) generateCertificateSignatureWithByteArray:hash_];
    OrgSpongycastleCryptoTlsDigitallySigned *signed_params = new_OrgSpongycastleCryptoTlsDigitallySigned_initWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_withByteArray_(signatureAndHashAlgorithm, signature);
    [signed_params encodeWithJavaIoOutputStream:buf];
  }
  return [buf toByteArray];
}

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input {
  OrgSpongycastleCryptoTlsSecurityParameters *securityParameters = [((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecurityParameters];
  OrgSpongycastleCryptoTlsSignerInputBuffer *buf = nil;
  JavaIoInputStream *teeIn = input;
  if (tlsSigner_ != nil) {
    buf = new_OrgSpongycastleCryptoTlsSignerInputBuffer_init();
    teeIn = new_OrgSpongycastleUtilIoTeeInputStream_initWithJavaIoInputStream_withJavaIoOutputStream_(input, buf);
  }
  OrgSpongycastleCryptoTlsServerSRPParams *srpParams = OrgSpongycastleCryptoTlsServerSRPParams_parseWithJavaIoInputStream_(teeIn);
  if (buf != nil) {
    OrgSpongycastleCryptoTlsDigitallySigned *signed_params = [self parseSignatureWithJavaIoInputStream:input];
    id<OrgSpongycastleCryptoSigner> signer = [self initVerifyerWithOrgSpongycastleCryptoTlsTlsSigner:tlsSigner_ withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:[((OrgSpongycastleCryptoTlsDigitallySigned *) nil_chk(signed_params)) getAlgorithm] withOrgSpongycastleCryptoTlsSecurityParameters:securityParameters];
    [buf updateSignerWithOrgSpongycastleCryptoSigner:signer];
    if (![((id<OrgSpongycastleCryptoSigner>) nil_chk(signer)) verifySignatureWithByteArray:[signed_params getSignature]]) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decrypt_error);
    }
  }
  self->srpGroup_ = new_OrgSpongycastleCryptoParamsSRP6GroupParameters_initWithJavaMathBigInteger_withJavaMathBigInteger_([((OrgSpongycastleCryptoTlsServerSRPParams *) nil_chk(srpParams)) getN], [srpParams getG]);
  if (![((id<OrgSpongycastleCryptoTlsTlsSRPGroupVerifier>) nil_chk(groupVerifier_)) acceptWithOrgSpongycastleCryptoParamsSRP6GroupParameters:srpGroup_]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_insufficient_security);
  }
  self->srpSalt_ = [srpParams getS];
  @try {
    self->srpPeerCredentials_ = OrgSpongycastleCryptoAgreementSrpSRP6Util_validatePublicValueWithJavaMathBigInteger_withJavaMathBigInteger_([((OrgSpongycastleCryptoParamsSRP6GroupParameters *) nil_chk(srpGroup_)) getN], [srpParams getB]);
  }
  @catch (OrgSpongycastleCryptoCryptoException *e) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter, e);
  }
  [((OrgSpongycastleCryptoAgreementSrpSRP6Client *) nil_chk(self->srpClient_)) init__WithOrgSpongycastleCryptoParamsSRP6GroupParameters:srpGroup_ withOrgSpongycastleCryptoDigest:OrgSpongycastleCryptoTlsTlsUtils_createHashWithShort_(OrgSpongycastleCryptoTlsHashAlgorithm_sha1) withJavaSecuritySecureRandom:[((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecureRandom]];
}

- (void)validateCertificateRequestWithOrgSpongycastleCryptoTlsCertificateRequest:(OrgSpongycastleCryptoTlsCertificateRequest *)certificateRequest {
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
}

- (void)processClientCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:(id<OrgSpongycastleCryptoTlsTlsCredentials>)clientCredentials {
  @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
}

- (void)generateClientKeyExchangeWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  JavaMathBigInteger *A = [((OrgSpongycastleCryptoAgreementSrpSRP6Client *) nil_chk(srpClient_)) generateClientCredentialsWithByteArray:srpSalt_ withByteArray:identity_ withByteArray:password_];
  OrgSpongycastleCryptoTlsTlsSRPUtils_writeSRPParameterWithJavaMathBigInteger_withJavaIoOutputStream_(A, output);
  ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecurityParameters]))->srpIdentity_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(identity_);
}

- (void)processClientKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input {
  @try {
    self->srpPeerCredentials_ = OrgSpongycastleCryptoAgreementSrpSRP6Util_validatePublicValueWithJavaMathBigInteger_withJavaMathBigInteger_([((OrgSpongycastleCryptoParamsSRP6GroupParameters *) nil_chk(srpGroup_)) getN], OrgSpongycastleCryptoTlsTlsSRPUtils_readSRPParameterWithJavaIoInputStream_(input));
  }
  @catch (OrgSpongycastleCryptoCryptoException *e) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter, e);
  }
  ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk([((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk(context_)) getSecurityParameters]))->srpIdentity_ = OrgSpongycastleUtilArrays_cloneWithByteArray_(identity_);
}

- (IOSByteArray *)generatePremasterSecret {
  @try {
    JavaMathBigInteger *S = srpServer_ != nil ? [srpServer_ calculateSecretWithJavaMathBigInteger:srpPeerCredentials_] : [((OrgSpongycastleCryptoAgreementSrpSRP6Client *) nil_chk(srpClient_)) calculateSecretWithJavaMathBigInteger:srpPeerCredentials_];
    return OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(S);
  }
  @catch (OrgSpongycastleCryptoCryptoException *e) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter, e);
  }
}

- (id<OrgSpongycastleCryptoSigner>)initVerifyerWithOrgSpongycastleCryptoTlsTlsSigner:(id<OrgSpongycastleCryptoTlsTlsSigner>)tlsSigner
                               withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                      withOrgSpongycastleCryptoTlsSecurityParameters:(OrgSpongycastleCryptoTlsSecurityParameters *)securityParameters {
  id<OrgSpongycastleCryptoSigner> signer = [((id<OrgSpongycastleCryptoTlsTlsSigner>) nil_chk(tlsSigner)) createVerifyerWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:algorithm withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:self->serverPublicKey_];
  [((id<OrgSpongycastleCryptoSigner>) nil_chk(signer)) updateWithByteArray:((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters))->clientRandom_ withInt:0 withInt:((IOSByteArray *) nil_chk(securityParameters->clientRandom_))->size_];
  [signer updateWithByteArray:securityParameters->serverRandom_ withInt:0 withInt:((IOSByteArray *) nil_chk(securityParameters->serverRandom_))->size_];
  return signer;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgSpongycastleCryptoTlsTlsSigner;", 0xc, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, 7, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 11, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, 7, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 13, 7, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoSigner;", 0x4, 20, 21, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(createSignerWithInt:);
  methods[1].selector = @selector(initWithInt:withJavaUtilVector:withByteArray:withByteArray:);
  methods[2].selector = @selector(initWithInt:withJavaUtilVector:withOrgSpongycastleCryptoTlsTlsSRPGroupVerifier:withByteArray:withByteArray:);
  methods[3].selector = @selector(initWithInt:withJavaUtilVector:withByteArray:withOrgSpongycastleCryptoTlsTlsSRPLoginParameters:);
  methods[4].selector = @selector(init__WithOrgSpongycastleCryptoTlsTlsContext:);
  methods[5].selector = @selector(skipServerCredentials);
  methods[6].selector = @selector(processServerCertificateWithOrgSpongycastleCryptoTlsCertificate:);
  methods[7].selector = @selector(processServerCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:);
  methods[8].selector = @selector(requiresServerKeyExchange);
  methods[9].selector = @selector(generateServerKeyExchange);
  methods[10].selector = @selector(processServerKeyExchangeWithJavaIoInputStream:);
  methods[11].selector = @selector(validateCertificateRequestWithOrgSpongycastleCryptoTlsCertificateRequest:);
  methods[12].selector = @selector(processClientCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:);
  methods[13].selector = @selector(generateClientKeyExchangeWithJavaIoOutputStream:);
  methods[14].selector = @selector(processClientKeyExchangeWithJavaIoInputStream:);
  methods[15].selector = @selector(generatePremasterSecret);
  methods[16].selector = @selector(initVerifyerWithOrgSpongycastleCryptoTlsTlsSigner:withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:withOrgSpongycastleCryptoTlsSecurityParameters:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tlsSigner_", "LOrgSpongycastleCryptoTlsTlsSigner;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "groupVerifier_", "LOrgSpongycastleCryptoTlsTlsSRPGroupVerifier;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "identity_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "password_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverPublicKey_", "LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "srpGroup_", "LOrgSpongycastleCryptoParamsSRP6GroupParameters;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "srpClient_", "LOrgSpongycastleCryptoAgreementSrpSRP6Client;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "srpServer_", "LOrgSpongycastleCryptoAgreementSrpSRP6Server;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "srpPeerCredentials_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "srpVerifier_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "srpSalt_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverCredentials_", "LOrgSpongycastleCryptoTlsTlsSignerCredentials;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "createSigner", "I", "ILJavaUtilVector;[B[B", "ILJavaUtilVector;LOrgSpongycastleCryptoTlsTlsSRPGroupVerifier;[B[B", "ILJavaUtilVector;[BLOrgSpongycastleCryptoTlsTlsSRPLoginParameters;", "init", "LOrgSpongycastleCryptoTlsTlsContext;", "LJavaIoIOException;", "processServerCertificate", "LOrgSpongycastleCryptoTlsCertificate;", "processServerCredentials", "LOrgSpongycastleCryptoTlsTlsCredentials;", "processServerKeyExchange", "LJavaIoInputStream;", "validateCertificateRequest", "LOrgSpongycastleCryptoTlsCertificateRequest;", "processClientCredentials", "generateClientKeyExchange", "LJavaIoOutputStream;", "processClientKeyExchange", "initVerifyer", "LOrgSpongycastleCryptoTlsTlsSigner;LOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;LOrgSpongycastleCryptoTlsSecurityParameters;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsTlsSRPKeyExchange = { "TlsSRPKeyExchange", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 17, 12, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsTlsSRPKeyExchange;
}

@end

id<OrgSpongycastleCryptoTlsTlsSigner> OrgSpongycastleCryptoTlsTlsSRPKeyExchange_createSignerWithInt_(jint keyExchange) {
  OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initialize();
  switch (keyExchange) {
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_SRP:
    return nil;
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_SRP_RSA:
    return new_OrgSpongycastleCryptoTlsTlsRSASigner_init();
    case OrgSpongycastleCryptoTlsKeyExchangeAlgorithm_SRP_DSS:
    return new_OrgSpongycastleCryptoTlsTlsDSSSigner_init();
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unsupported key exchange algorithm");
  }
}

void OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withByteArray_withByteArray_(OrgSpongycastleCryptoTlsTlsSRPKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSByteArray *identity, IOSByteArray *password) {
  OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(self, keyExchange, supportedSignatureAlgorithms, new_OrgSpongycastleCryptoTlsDefaultTlsSRPGroupVerifier_init(), identity, password);
}

OrgSpongycastleCryptoTlsTlsSRPKeyExchange *new_OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withByteArray_withByteArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSByteArray *identity, IOSByteArray *password) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, initWithInt_withJavaUtilVector_withByteArray_withByteArray_, keyExchange, supportedSignatureAlgorithms, identity, password)
}

OrgSpongycastleCryptoTlsTlsSRPKeyExchange *create_OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withByteArray_withByteArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSByteArray *identity, IOSByteArray *password) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, initWithInt_withJavaUtilVector_withByteArray_withByteArray_, keyExchange, supportedSignatureAlgorithms, identity, password)
}

void OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(OrgSpongycastleCryptoTlsTlsSRPKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<OrgSpongycastleCryptoTlsTlsSRPGroupVerifier> groupVerifier, IOSByteArray *identity, IOSByteArray *password) {
  OrgSpongycastleCryptoTlsAbstractTlsKeyExchange_initWithInt_withJavaUtilVector_(self, keyExchange, supportedSignatureAlgorithms);
  self->serverPublicKey_ = nil;
  self->srpGroup_ = nil;
  self->srpClient_ = nil;
  self->srpServer_ = nil;
  self->srpPeerCredentials_ = nil;
  self->srpVerifier_ = nil;
  self->srpSalt_ = nil;
  self->serverCredentials_ = nil;
  self->tlsSigner_ = OrgSpongycastleCryptoTlsTlsSRPKeyExchange_createSignerWithInt_(keyExchange);
  self->groupVerifier_ = groupVerifier;
  self->identity_ = identity;
  self->password_ = password;
  self->srpClient_ = new_OrgSpongycastleCryptoAgreementSrpSRP6Client_init();
}

OrgSpongycastleCryptoTlsTlsSRPKeyExchange *new_OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<OrgSpongycastleCryptoTlsTlsSRPGroupVerifier> groupVerifier, IOSByteArray *identity, IOSByteArray *password) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_, keyExchange, supportedSignatureAlgorithms, groupVerifier, identity, password)
}

OrgSpongycastleCryptoTlsTlsSRPKeyExchange *create_OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, id<OrgSpongycastleCryptoTlsTlsSRPGroupVerifier> groupVerifier, IOSByteArray *identity, IOSByteArray *password) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoTlsTlsSRPGroupVerifier_withByteArray_withByteArray_, keyExchange, supportedSignatureAlgorithms, groupVerifier, identity, password)
}

void OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withByteArray_withOrgSpongycastleCryptoTlsTlsSRPLoginParameters_(OrgSpongycastleCryptoTlsTlsSRPKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSByteArray *identity, OrgSpongycastleCryptoTlsTlsSRPLoginParameters *loginParameters) {
  OrgSpongycastleCryptoTlsAbstractTlsKeyExchange_initWithInt_withJavaUtilVector_(self, keyExchange, supportedSignatureAlgorithms);
  self->serverPublicKey_ = nil;
  self->srpGroup_ = nil;
  self->srpClient_ = nil;
  self->srpServer_ = nil;
  self->srpPeerCredentials_ = nil;
  self->srpVerifier_ = nil;
  self->srpSalt_ = nil;
  self->serverCredentials_ = nil;
  self->tlsSigner_ = OrgSpongycastleCryptoTlsTlsSRPKeyExchange_createSignerWithInt_(keyExchange);
  self->identity_ = identity;
  self->srpServer_ = new_OrgSpongycastleCryptoAgreementSrpSRP6Server_init();
  self->srpGroup_ = [((OrgSpongycastleCryptoTlsTlsSRPLoginParameters *) nil_chk(loginParameters)) getGroup];
  self->srpVerifier_ = [loginParameters getVerifier];
  self->srpSalt_ = [loginParameters getSalt];
}

OrgSpongycastleCryptoTlsTlsSRPKeyExchange *new_OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withByteArray_withOrgSpongycastleCryptoTlsTlsSRPLoginParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSByteArray *identity, OrgSpongycastleCryptoTlsTlsSRPLoginParameters *loginParameters) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, initWithInt_withJavaUtilVector_withByteArray_withOrgSpongycastleCryptoTlsTlsSRPLoginParameters_, keyExchange, supportedSignatureAlgorithms, identity, loginParameters)
}

OrgSpongycastleCryptoTlsTlsSRPKeyExchange *create_OrgSpongycastleCryptoTlsTlsSRPKeyExchange_initWithInt_withJavaUtilVector_withByteArray_withOrgSpongycastleCryptoTlsTlsSRPLoginParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, IOSByteArray *identity, OrgSpongycastleCryptoTlsTlsSRPLoginParameters *loginParameters) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsTlsSRPKeyExchange, initWithInt_withJavaUtilVector_withByteArray_withOrgSpongycastleCryptoTlsTlsSRPLoginParameters_, keyExchange, supportedSignatureAlgorithms, identity, loginParameters)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsTlsSRPKeyExchange)
