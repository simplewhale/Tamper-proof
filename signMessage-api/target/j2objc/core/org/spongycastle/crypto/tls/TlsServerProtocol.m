//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsServerProtocol.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/security/SecureRandom.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"
#include "org/spongycastle/asn1/x509/Certificate.h"
#include "org/spongycastle/asn1/x509/SubjectPublicKeyInfo.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/prng/RandomGenerator.h"
#include "org/spongycastle/crypto/tls/AbstractTlsContext.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/Certificate.h"
#include "org/spongycastle/crypto/tls/CertificateRequest.h"
#include "org/spongycastle/crypto/tls/CertificateStatus.h"
#include "org/spongycastle/crypto/tls/CipherSuite.h"
#include "org/spongycastle/crypto/tls/ConnectionEnd.h"
#include "org/spongycastle/crypto/tls/DigitallySigned.h"
#include "org/spongycastle/crypto/tls/HandshakeType.h"
#include "org/spongycastle/crypto/tls/NewSessionTicket.h"
#include "org/spongycastle/crypto/tls/ProtocolVersion.h"
#include "org/spongycastle/crypto/tls/RecordStream.h"
#include "org/spongycastle/crypto/tls/SecurityParameters.h"
#include "org/spongycastle/crypto/tls/SignatureAndHashAlgorithm.h"
#include "org/spongycastle/crypto/tls/TlsCipher.h"
#include "org/spongycastle/crypto/tls/TlsCompression.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsCredentials.h"
#include "org/spongycastle/crypto/tls/TlsExtensionsUtils.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsHandshakeHash.h"
#include "org/spongycastle/crypto/tls/TlsKeyExchange.h"
#include "org/spongycastle/crypto/tls/TlsPeer.h"
#include "org/spongycastle/crypto/tls/TlsProtocol.h"
#include "org/spongycastle/crypto/tls/TlsServer.h"
#include "org/spongycastle/crypto/tls/TlsServerContextImpl.h"
#include "org/spongycastle/crypto/tls/TlsServerProtocol.h"
#include "org/spongycastle/crypto/tls/TlsSigner.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"
#include "org/spongycastle/crypto/util/PublicKeyFactory.h"
#include "org/spongycastle/util/Arrays.h"

@implementation OrgSpongycastleCryptoTlsTlsServerProtocol

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)input
                   withJavaIoOutputStream:(JavaIoOutputStream *)output
             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  OrgSpongycastleCryptoTlsTlsServerProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(self, input, output, secureRandom);
  return self;
}

- (instancetype)initWithJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)secureRandom {
  OrgSpongycastleCryptoTlsTlsServerProtocol_initWithJavaSecuritySecureRandom_(self, secureRandom);
  return self;
}

- (void)acceptWithOrgSpongycastleCryptoTlsTlsServer:(id<OrgSpongycastleCryptoTlsTlsServer>)tlsServer {
  if (tlsServer == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'tlsServer' cannot be null");
  }
  if (self->tlsServer_ != nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"'accept' can only be called once");
  }
  self->tlsServer_ = tlsServer;
  self->securityParameters_ = new_OrgSpongycastleCryptoTlsSecurityParameters_init();
  self->securityParameters_->entity_ = OrgSpongycastleCryptoTlsConnectionEnd_server;
  self->tlsServerContext_ = new_OrgSpongycastleCryptoTlsTlsServerContextImpl_initWithJavaSecuritySecureRandom_withOrgSpongycastleCryptoTlsSecurityParameters_(secureRandom_, securityParameters_);
  ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(self->securityParameters_))->serverRandom_ = OrgSpongycastleCryptoTlsTlsProtocol_createRandomBlockWithBoolean_withOrgSpongycastleCryptoPrngRandomGenerator_([tlsServer shouldUseGMTUnixTime], [((OrgSpongycastleCryptoTlsTlsServerContextImpl *) nil_chk(tlsServerContext_)) getNonceRandomGenerator]);
  [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(self->tlsServer_)) init__WithOrgSpongycastleCryptoTlsTlsServerContext:tlsServerContext_];
  [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(self->recordStream_)) init__WithOrgSpongycastleCryptoTlsTlsContext:tlsServerContext_];
  [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(self->recordStream_)) setRestrictReadVersionWithBoolean:false];
  [self blockForHandshake];
}

- (void)cleanupHandshake {
  [super cleanupHandshake];
  self->keyExchange_ = nil;
  self->serverCredentials_ = nil;
  self->certificateRequest_ = nil;
  self->prepareFinishHash_ = nil;
}

- (id<OrgSpongycastleCryptoTlsTlsContext>)getContext {
  return tlsServerContext_;
}

- (OrgSpongycastleCryptoTlsAbstractTlsContext *)getContextAdmin {
  return tlsServerContext_;
}

- (id<OrgSpongycastleCryptoTlsTlsPeer>)getPeer {
  return tlsServer_;
}

- (void)handleHandshakeMessageWithShort:(jshort)type
         withJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf {
  switch (type) {
    case OrgSpongycastleCryptoTlsHandshakeType_client_hello:
    {
      switch (self->connection_state_) {
        case OrgSpongycastleCryptoTlsTlsProtocol_CS_START:
        {
          [self receiveClientHelloMessageWithJavaIoByteArrayInputStream:buf];
          self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_HELLO;
          [self sendServerHelloMessage];
          self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_HELLO;
          [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) notifyHelloComplete];
          JavaUtilVector *serverSupplementalData = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) getServerSupplementalData];
          if (serverSupplementalData != nil) {
            [self sendSupplementalDataMessageWithJavaUtilVector:serverSupplementalData];
          }
          self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_SUPPLEMENTAL_DATA;
          self->keyExchange_ = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) getKeyExchange];
          [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(self->keyExchange_)) init__WithOrgSpongycastleCryptoTlsTlsContext:[self getContext]];
          self->serverCredentials_ = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) getCredentials];
          OrgSpongycastleCryptoTlsCertificate *serverCertificate = nil;
          if (self->serverCredentials_ == nil) {
            [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(self->keyExchange_)) skipServerCredentials];
          }
          else {
            [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(self->keyExchange_)) processServerCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:self->serverCredentials_];
            serverCertificate = [((id<OrgSpongycastleCryptoTlsTlsCredentials>) nil_chk(self->serverCredentials_)) getCertificate];
            [self sendCertificateMessageWithOrgSpongycastleCryptoTlsCertificate:serverCertificate];
          }
          self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_CERTIFICATE;
          if (serverCertificate == nil || [serverCertificate isEmpty]) {
            self->allowCertificateStatus_ = false;
          }
          if (self->allowCertificateStatus_) {
            OrgSpongycastleCryptoTlsCertificateStatus *certificateStatus = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) getCertificateStatus];
            if (certificateStatus != nil) {
              [self sendCertificateStatusMessageWithOrgSpongycastleCryptoTlsCertificateStatus:certificateStatus];
            }
          }
          self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_CERTIFICATE_STATUS;
          IOSByteArray *serverKeyExchange = [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(self->keyExchange_)) generateServerKeyExchange];
          if (serverKeyExchange != nil) {
            [self sendServerKeyExchangeMessageWithByteArray:serverKeyExchange];
          }
          self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_KEY_EXCHANGE;
          if (self->serverCredentials_ != nil) {
            self->certificateRequest_ = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) getCertificateRequest];
            if (self->certificateRequest_ != nil) {
              if (OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_([self getContext]) != ([((OrgSpongycastleCryptoTlsCertificateRequest *) nil_chk(certificateRequest_)) getSupportedSignatureAlgorithms] != nil)) {
                @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
              }
              [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(self->keyExchange_)) validateCertificateRequestWithOrgSpongycastleCryptoTlsCertificateRequest:certificateRequest_];
              [self sendCertificateRequestMessageWithOrgSpongycastleCryptoTlsCertificateRequest:certificateRequest_];
              OrgSpongycastleCryptoTlsTlsUtils_trackHashAlgorithmsWithOrgSpongycastleCryptoTlsTlsHandshakeHash_withJavaUtilVector_([((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(self->recordStream_)) getHandshakeHash], [((OrgSpongycastleCryptoTlsCertificateRequest *) nil_chk(self->certificateRequest_)) getSupportedSignatureAlgorithms]);
            }
          }
          self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_CERTIFICATE_REQUEST;
          [self sendServerHelloDoneMessage];
          self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_HELLO_DONE;
          [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk([((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(self->recordStream_)) getHandshakeHash])) sealHashAlgorithms];
          break;
        }
        case OrgSpongycastleCryptoTlsTlsProtocol_CS_END:
        {
          [self refuseRenegotiation];
          break;
        }
        default:
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
      }
      break;
    }
    case OrgSpongycastleCryptoTlsHandshakeType_supplemental_data:
    {
      switch (self->connection_state_) {
        case OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_HELLO_DONE:
        {
          [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) processClientSupplementalDataWithJavaUtilVector:OrgSpongycastleCryptoTlsTlsProtocol_readSupplementalDataMessageWithJavaIoByteArrayInputStream_(buf)];
          self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_SUPPLEMENTAL_DATA;
          break;
        }
        default:
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
      }
      break;
    }
    case OrgSpongycastleCryptoTlsHandshakeType_certificate:
    {
      switch (self->connection_state_) {
        case OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_HELLO_DONE:
        {
          [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) processClientSupplementalDataWithJavaUtilVector:nil];
        }
        case OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_SUPPLEMENTAL_DATA:
        {
          if (self->certificateRequest_ == nil) {
            @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
          }
          [self receiveCertificateMessageWithJavaIoByteArrayInputStream:buf];
          self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_CERTIFICATE;
          break;
        }
        default:
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
      }
      break;
    }
    case OrgSpongycastleCryptoTlsHandshakeType_client_key_exchange:
    {
      switch (self->connection_state_) {
        case OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_HELLO_DONE:
        {
          [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) processClientSupplementalDataWithJavaUtilVector:nil];
        }
        case OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_SUPPLEMENTAL_DATA:
        {
          if (self->certificateRequest_ == nil) {
            [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(self->keyExchange_)) skipClientCredentials];
          }
          else {
            if (OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_([self getContext])) {
              @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
            }
            else if (OrgSpongycastleCryptoTlsTlsUtils_isSSLWithOrgSpongycastleCryptoTlsTlsContext_([self getContext])) {
              if (self->peerCertificate_ == nil) {
                @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
              }
            }
            else {
              [self notifyClientCertificateWithOrgSpongycastleCryptoTlsCertificate:JreLoadStatic(OrgSpongycastleCryptoTlsCertificate, EMPTY_CHAIN)];
            }
          }
        }
        case OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_CERTIFICATE:
        {
          [self receiveClientKeyExchangeMessageWithJavaIoByteArrayInputStream:buf];
          self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_KEY_EXCHANGE;
          break;
        }
        default:
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
      }
      break;
    }
    case OrgSpongycastleCryptoTlsHandshakeType_certificate_verify:
    {
      switch (self->connection_state_) {
        case OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_KEY_EXCHANGE:
        {
          if (![self expectCertificateVerifyMessage]) {
            @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
          }
          [self receiveCertificateVerifyMessageWithJavaIoByteArrayInputStream:buf];
          self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_CERTIFICATE_VERIFY;
          break;
        }
        default:
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
      }
      break;
    }
    case OrgSpongycastleCryptoTlsHandshakeType_finished:
    {
      switch (self->connection_state_) {
        case OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_KEY_EXCHANGE:
        {
          if ([self expectCertificateVerifyMessage]) {
            @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
          }
        }
        case OrgSpongycastleCryptoTlsTlsProtocol_CS_CERTIFICATE_VERIFY:
        {
          [self processFinishedMessageWithJavaIoByteArrayInputStream:buf];
          self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_FINISHED;
          if (self->expectSessionTicket_) {
            [self sendNewSessionTicketMessageWithOrgSpongycastleCryptoTlsNewSessionTicket:[((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) getNewSessionTicket]];
            [self sendChangeCipherSpecMessage];
          }
          self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_SESSION_TICKET;
          [self sendFinishedMessage];
          self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_FINISHED;
          [self completeHandshake];
          break;
        }
        default:
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
      }
      break;
    }
    case OrgSpongycastleCryptoTlsHandshakeType_hello_request:
    case OrgSpongycastleCryptoTlsHandshakeType_hello_verify_request:
    case OrgSpongycastleCryptoTlsHandshakeType_server_hello:
    case OrgSpongycastleCryptoTlsHandshakeType_server_key_exchange:
    case OrgSpongycastleCryptoTlsHandshakeType_certificate_request:
    case OrgSpongycastleCryptoTlsHandshakeType_server_hello_done:
    case OrgSpongycastleCryptoTlsHandshakeType_session_ticket:
    default:
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
}

- (void)handleAlertWarningMessageWithShort:(jshort)alertDescription {
  [super handleAlertWarningMessageWithShort:alertDescription];
  switch (alertDescription) {
    case OrgSpongycastleCryptoTlsAlertDescription_no_certificate:
    {
      if (OrgSpongycastleCryptoTlsTlsUtils_isSSLWithOrgSpongycastleCryptoTlsTlsContext_([self getContext]) && self->certificateRequest_ != nil) {
        switch (self->connection_state_) {
          case OrgSpongycastleCryptoTlsTlsProtocol_CS_SERVER_HELLO_DONE:
          {
            [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) processClientSupplementalDataWithJavaUtilVector:nil];
          }
          case OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_SUPPLEMENTAL_DATA:
          {
            [self notifyClientCertificateWithOrgSpongycastleCryptoTlsCertificate:JreLoadStatic(OrgSpongycastleCryptoTlsCertificate, EMPTY_CHAIN)];
            self->connection_state_ = OrgSpongycastleCryptoTlsTlsProtocol_CS_CLIENT_CERTIFICATE;
            return;
          }
        }
      }
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
    }
  }
}

- (void)notifyClientCertificateWithOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)clientCertificate {
  if (certificateRequest_ == nil) {
    @throw new_JavaLangIllegalStateException_init();
  }
  if (peerCertificate_ != nil) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_unexpected_message);
  }
  self->peerCertificate_ = clientCertificate;
  if ([((OrgSpongycastleCryptoTlsCertificate *) nil_chk(clientCertificate)) isEmpty]) {
    [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(self->keyExchange_)) skipClientCredentials];
  }
  else {
    self->clientCertificateType_ = OrgSpongycastleCryptoTlsTlsUtils_getClientCertificateTypeWithOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoTlsCertificate_(clientCertificate, [((id<OrgSpongycastleCryptoTlsTlsCredentials>) nil_chk(self->serverCredentials_)) getCertificate]);
    [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(self->keyExchange_)) processClientCertificateWithOrgSpongycastleCryptoTlsCertificate:clientCertificate];
  }
  [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(self->tlsServer_)) notifyClientCertificateWithOrgSpongycastleCryptoTlsCertificate:clientCertificate];
}

- (void)receiveCertificateMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf {
  OrgSpongycastleCryptoTlsCertificate *clientCertificate = OrgSpongycastleCryptoTlsCertificate_parseWithJavaIoInputStream_(buf);
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  [self notifyClientCertificateWithOrgSpongycastleCryptoTlsCertificate:clientCertificate];
}

- (void)receiveCertificateVerifyMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf {
  if (certificateRequest_ == nil) {
    @throw new_JavaLangIllegalStateException_init();
  }
  OrgSpongycastleCryptoTlsDigitallySigned *clientCertificateVerify = OrgSpongycastleCryptoTlsDigitallySigned_parseWithOrgSpongycastleCryptoTlsTlsContext_withJavaIoInputStream_([self getContext], buf);
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  @try {
    OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAlgorithm = [((OrgSpongycastleCryptoTlsDigitallySigned *) nil_chk(clientCertificateVerify)) getAlgorithm];
    IOSByteArray *hash_;
    if (OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_([self getContext])) {
      OrgSpongycastleCryptoTlsTlsUtils_verifySupportedSignatureAlgorithmWithJavaUtilVector_withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_([((OrgSpongycastleCryptoTlsCertificateRequest *) nil_chk(certificateRequest_)) getSupportedSignatureAlgorithms], signatureAlgorithm);
      hash_ = [((id<OrgSpongycastleCryptoTlsTlsHandshakeHash>) nil_chk(prepareFinishHash_)) getFinalHashWithShort:[((OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *) nil_chk(signatureAlgorithm)) getHash]];
    }
    else {
      hash_ = [((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters_)) getSessionHash];
    }
    OrgSpongycastleAsn1X509Certificate *x509Cert = [((OrgSpongycastleCryptoTlsCertificate *) nil_chk(peerCertificate_)) getCertificateAtWithInt:0];
    OrgSpongycastleAsn1X509SubjectPublicKeyInfo *keyInfo = [((OrgSpongycastleAsn1X509Certificate *) nil_chk(x509Cert)) getSubjectPublicKeyInfo];
    OrgSpongycastleCryptoParamsAsymmetricKeyParameter *publicKey = OrgSpongycastleCryptoUtilPublicKeyFactory_createKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_(keyInfo);
    id<OrgSpongycastleCryptoTlsTlsSigner> tlsSigner = OrgSpongycastleCryptoTlsTlsUtils_createTlsSignerWithShort_(clientCertificateType_);
    [((id<OrgSpongycastleCryptoTlsTlsSigner>) nil_chk(tlsSigner)) init__WithOrgSpongycastleCryptoTlsTlsContext:[self getContext]];
    if (![tlsSigner verifyRawSignatureWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:signatureAlgorithm withByteArray:[clientCertificateVerify getSignature] withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:publicKey withByteArray:hash_]) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decrypt_error);
    }
  }
  @catch (OrgSpongycastleCryptoTlsTlsFatalAlert *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_decrypt_error, e);
  }
}

- (void)receiveClientHelloMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf {
  OrgSpongycastleCryptoTlsProtocolVersion *client_version = OrgSpongycastleCryptoTlsTlsUtils_readVersionWithJavaIoInputStream_(buf);
  [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) setWriteVersionWithOrgSpongycastleCryptoTlsProtocolVersion:client_version];
  if ([((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(client_version)) isDTLS]) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  IOSByteArray *client_random = OrgSpongycastleCryptoTlsTlsUtils_readFullyWithInt_withJavaIoInputStream_(32, buf);
  IOSByteArray *sessionID = OrgSpongycastleCryptoTlsTlsUtils_readOpaque8WithJavaIoInputStream_(buf);
  if (((IOSByteArray *) nil_chk(sessionID))->size_ > 32) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  jint cipher_suites_length = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithJavaIoInputStream_(buf);
  if (cipher_suites_length < 2 || (cipher_suites_length & 1) != 0) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_decode_error);
  }
  self->offeredCipherSuites_ = OrgSpongycastleCryptoTlsTlsUtils_readUint16ArrayWithInt_withJavaIoInputStream_(cipher_suites_length / 2, buf);
  jint compression_methods_length = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(buf);
  if (compression_methods_length < 1) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_illegal_parameter);
  }
  self->offeredCompressionMethods_ = OrgSpongycastleCryptoTlsTlsUtils_readUint8ArrayWithInt_withJavaIoInputStream_(compression_methods_length, buf);
  self->clientExtensions_ = OrgSpongycastleCryptoTlsTlsProtocol_readExtensionsWithJavaIoByteArrayInputStream_(buf);
  ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(self->securityParameters_))->extendedMasterSecret_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_hasExtendedMasterSecretExtensionWithJavaUtilHashtable_(clientExtensions_);
  [((OrgSpongycastleCryptoTlsAbstractTlsContext *) nil_chk([self getContextAdmin])) setClientVersionWithOrgSpongycastleCryptoTlsProtocolVersion:client_version];
  [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) notifyClientVersionWithOrgSpongycastleCryptoTlsProtocolVersion:client_version];
  [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) notifyFallbackWithBoolean:OrgSpongycastleUtilArrays_containsWithIntArray_withInt_(offeredCipherSuites_, OrgSpongycastleCryptoTlsCipherSuite_TLS_FALLBACK_SCSV)];
  ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters_))->clientRandom_ = client_random;
  [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) notifyOfferedCipherSuitesWithIntArray:offeredCipherSuites_];
  [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) notifyOfferedCompressionMethodsWithShortArray:offeredCompressionMethods_];
  {
    if (OrgSpongycastleUtilArrays_containsWithIntArray_withInt_(offeredCipherSuites_, OrgSpongycastleCryptoTlsCipherSuite_TLS_EMPTY_RENEGOTIATION_INFO_SCSV)) {
      self->secure_renegotiation_ = true;
    }
    IOSByteArray *renegExtData = OrgSpongycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(clientExtensions_, JreLoadStatic(OrgSpongycastleCryptoTlsTlsProtocol, EXT_RenegotiationInfo));
    if (renegExtData != nil) {
      self->secure_renegotiation_ = true;
      if (!OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(renegExtData, OrgSpongycastleCryptoTlsTlsProtocol_createRenegotiationInfoWithByteArray_(JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES)))) {
        @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_handshake_failure);
      }
    }
  }
  [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) notifySecureRenegotiationWithBoolean:self->secure_renegotiation_];
  if (clientExtensions_ != nil) {
    OrgSpongycastleCryptoTlsTlsExtensionsUtils_getPaddingExtensionWithJavaUtilHashtable_(clientExtensions_);
    [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) processClientExtensionsWithJavaUtilHashtable:clientExtensions_];
  }
}

- (void)receiveClientKeyExchangeMessageWithJavaIoByteArrayInputStream:(JavaIoByteArrayInputStream *)buf {
  [((id<OrgSpongycastleCryptoTlsTlsKeyExchange>) nil_chk(keyExchange_)) processClientKeyExchangeWithJavaIoInputStream:buf];
  OrgSpongycastleCryptoTlsTlsProtocol_assertEmptyWithJavaIoByteArrayInputStream_(buf);
  if (OrgSpongycastleCryptoTlsTlsUtils_isSSLWithOrgSpongycastleCryptoTlsTlsContext_([self getContext])) {
    OrgSpongycastleCryptoTlsTlsProtocol_establishMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsKeyExchange_([self getContext], keyExchange_);
  }
  self->prepareFinishHash_ = [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) prepareToFinish];
  ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(self->securityParameters_))->sessionHash_ = OrgSpongycastleCryptoTlsTlsProtocol_getCurrentPRFHashWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsHandshakeHash_withByteArray_([self getContext], prepareFinishHash_, nil);
  if (!OrgSpongycastleCryptoTlsTlsUtils_isSSLWithOrgSpongycastleCryptoTlsTlsContext_([self getContext])) {
    OrgSpongycastleCryptoTlsTlsProtocol_establishMasterSecretWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsKeyExchange_([self getContext], keyExchange_);
  }
  [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) setPendingConnectionStateWithOrgSpongycastleCryptoTlsTlsCompression:[((id<OrgSpongycastleCryptoTlsTlsPeer>) nil_chk([self getPeer])) getCompression] withOrgSpongycastleCryptoTlsTlsCipher:[((id<OrgSpongycastleCryptoTlsTlsPeer>) nil_chk([self getPeer])) getCipher]];
  if (!expectSessionTicket_) {
    [self sendChangeCipherSpecMessage];
  }
}

- (void)sendCertificateRequestMessageWithOrgSpongycastleCryptoTlsCertificateRequest:(OrgSpongycastleCryptoTlsCertificateRequest *)certificateRequest {
  OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *message = new_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_(self, OrgSpongycastleCryptoTlsHandshakeType_certificate_request);
  [((OrgSpongycastleCryptoTlsCertificateRequest *) nil_chk(certificateRequest)) encodeWithJavaIoOutputStream:message];
  [message writeToRecordStream];
}

- (void)sendCertificateStatusMessageWithOrgSpongycastleCryptoTlsCertificateStatus:(OrgSpongycastleCryptoTlsCertificateStatus *)certificateStatus {
  OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *message = new_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_(self, OrgSpongycastleCryptoTlsHandshakeType_certificate_status);
  [((OrgSpongycastleCryptoTlsCertificateStatus *) nil_chk(certificateStatus)) encodeWithJavaIoOutputStream:message];
  [message writeToRecordStream];
}

- (void)sendNewSessionTicketMessageWithOrgSpongycastleCryptoTlsNewSessionTicket:(OrgSpongycastleCryptoTlsNewSessionTicket *)newSessionTicket {
  if (newSessionTicket == nil) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *message = new_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_(self, OrgSpongycastleCryptoTlsHandshakeType_session_ticket);
  [newSessionTicket encodeWithJavaIoOutputStream:message];
  [message writeToRecordStream];
}

- (void)sendServerHelloMessage {
  OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *message = new_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_(self, OrgSpongycastleCryptoTlsHandshakeType_server_hello);
  {
    OrgSpongycastleCryptoTlsProtocolVersion *server_version = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) getServerVersion];
    if (![((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(server_version)) isEqualOrEarlierVersionOfWithOrgSpongycastleCryptoTlsProtocolVersion:[((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk([self getContext])) getClientVersion]]) {
      @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
    }
    [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) setReadVersionWithOrgSpongycastleCryptoTlsProtocolVersion:server_version];
    [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) setWriteVersionWithOrgSpongycastleCryptoTlsProtocolVersion:server_version];
    [((OrgSpongycastleCryptoTlsRecordStream *) nil_chk(recordStream_)) setRestrictReadVersionWithBoolean:true];
    [((OrgSpongycastleCryptoTlsAbstractTlsContext *) nil_chk([self getContextAdmin])) setServerVersionWithOrgSpongycastleCryptoTlsProtocolVersion:server_version];
    OrgSpongycastleCryptoTlsTlsUtils_writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion_withJavaIoOutputStream_(server_version, message);
  }
  [message writeWithByteArray:((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(self->securityParameters_))->serverRandom_];
  OrgSpongycastleCryptoTlsTlsUtils_writeOpaque8WithByteArray_withJavaIoOutputStream_(JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES), message);
  jint selectedCipherSuite = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) getSelectedCipherSuite];
  if (!OrgSpongycastleUtilArrays_containsWithIntArray_withInt_(offeredCipherSuites_, selectedCipherSuite) || selectedCipherSuite == OrgSpongycastleCryptoTlsCipherSuite_TLS_NULL_WITH_NULL_NULL || OrgSpongycastleCryptoTlsCipherSuite_isSCSVWithInt_(selectedCipherSuite) || !OrgSpongycastleCryptoTlsTlsUtils_isValidCipherSuiteForVersionWithInt_withOrgSpongycastleCryptoTlsProtocolVersion_(selectedCipherSuite, [((id<OrgSpongycastleCryptoTlsTlsContext>) nil_chk([self getContext])) getServerVersion])) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters_))->cipherSuite_ = selectedCipherSuite;
  jshort selectedCompressionMethod = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) getSelectedCompressionMethod];
  if (!OrgSpongycastleUtilArrays_containsWithShortArray_withShort_(offeredCompressionMethods_, selectedCompressionMethod)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters_))->compressionAlgorithm_ = selectedCompressionMethod;
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withJavaIoOutputStream_(selectedCipherSuite, message);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_(selectedCompressionMethod, message);
  self->serverExtensions_ = [((id<OrgSpongycastleCryptoTlsTlsServer>) nil_chk(tlsServer_)) getServerExtensions];
  if (self->secure_renegotiation_) {
    IOSByteArray *renegExtData = OrgSpongycastleCryptoTlsTlsUtils_getExtensionDataWithJavaUtilHashtable_withJavaLangInteger_(self->serverExtensions_, JreLoadStatic(OrgSpongycastleCryptoTlsTlsProtocol, EXT_RenegotiationInfo));
    jboolean noRenegExt = nil == renegExtData;
    if (noRenegExt) {
      self->serverExtensions_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_ensureExtensionsInitialisedWithJavaUtilHashtable_(serverExtensions_);
      (void) [((JavaUtilHashtable *) nil_chk(self->serverExtensions_)) putWithId:JreLoadStatic(OrgSpongycastleCryptoTlsTlsProtocol, EXT_RenegotiationInfo) withId:OrgSpongycastleCryptoTlsTlsProtocol_createRenegotiationInfoWithByteArray_(JreLoadStatic(OrgSpongycastleCryptoTlsTlsUtils, EMPTY_BYTES))];
    }
  }
  if (((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters_))->extendedMasterSecret_) {
    self->serverExtensions_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_ensureExtensionsInitialisedWithJavaUtilHashtable_(serverExtensions_);
    OrgSpongycastleCryptoTlsTlsExtensionsUtils_addExtendedMasterSecretExtensionWithJavaUtilHashtable_(serverExtensions_);
  }
  if (self->serverExtensions_ != nil) {
    ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(self->securityParameters_))->encryptThenMAC_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_hasEncryptThenMACExtensionWithJavaUtilHashtable_(serverExtensions_);
    ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(self->securityParameters_))->maxFragmentLength_ = [self processMaxFragmentLengthExtensionWithJavaUtilHashtable:clientExtensions_ withJavaUtilHashtable:serverExtensions_ withShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error];
    ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(self->securityParameters_))->truncatedHMac_ = OrgSpongycastleCryptoTlsTlsExtensionsUtils_hasTruncatedHMacExtensionWithJavaUtilHashtable_(serverExtensions_);
    self->allowCertificateStatus_ = (!resumedSession_ && OrgSpongycastleCryptoTlsTlsUtils_hasExpectedEmptyExtensionDataWithJavaUtilHashtable_withJavaLangInteger_withShort_(serverExtensions_, JreLoadStatic(OrgSpongycastleCryptoTlsTlsExtensionsUtils, EXT_status_request), OrgSpongycastleCryptoTlsAlertDescription_internal_error));
    self->expectSessionTicket_ = (!resumedSession_ && OrgSpongycastleCryptoTlsTlsUtils_hasExpectedEmptyExtensionDataWithJavaUtilHashtable_withJavaLangInteger_withShort_(serverExtensions_, JreLoadStatic(OrgSpongycastleCryptoTlsTlsProtocol, EXT_SessionTicket), OrgSpongycastleCryptoTlsAlertDescription_internal_error));
    OrgSpongycastleCryptoTlsTlsProtocol_writeExtensionsWithJavaIoOutputStream_withJavaUtilHashtable_(message, serverExtensions_);
  }
  ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters_))->prfAlgorithm_ = OrgSpongycastleCryptoTlsTlsProtocol_getPRFAlgorithmWithOrgSpongycastleCryptoTlsTlsContext_withInt_([self getContext], [((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters_)) getCipherSuite]);
  ((OrgSpongycastleCryptoTlsSecurityParameters *) nil_chk(securityParameters_))->verifyDataLength_ = 12;
  [self applyMaxFragmentLengthExtension];
  [message writeToRecordStream];
}

- (void)sendServerHelloDoneMessage {
  IOSByteArray *message = [IOSByteArray newArrayWithLength:4];
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withByteArray_withInt_(OrgSpongycastleCryptoTlsHandshakeType_server_hello_done, message, 0);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint24WithInt_withByteArray_withInt_(0, message, 1);
  [self writeHandshakeMessageWithByteArray:message withInt:0 withInt:message->size_];
}

- (void)sendServerKeyExchangeMessageWithByteArray:(IOSByteArray *)serverKeyExchange {
  OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage *message = new_OrgSpongycastleCryptoTlsTlsProtocol_HandshakeMessage_initWithOrgSpongycastleCryptoTlsTlsProtocol_withShort_withInt_(self, OrgSpongycastleCryptoTlsHandshakeType_server_key_exchange, ((IOSByteArray *) nil_chk(serverKeyExchange))->size_);
  [message writeWithByteArray:serverKeyExchange];
  [message writeToRecordStream];
}

- (jboolean)expectCertificateVerifyMessage {
  return clientCertificateType_ >= 0 && OrgSpongycastleCryptoTlsTlsUtils_hasSigningCapabilityWithShort_(clientCertificateType_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsContext;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsAbstractTlsContext;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsTlsPeer;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 15, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 16, 17, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 18, 19, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 20, 21, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x4, 22, 23, 4, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:withJavaIoOutputStream:withJavaSecuritySecureRandom:);
  methods[1].selector = @selector(initWithJavaSecuritySecureRandom:);
  methods[2].selector = @selector(acceptWithOrgSpongycastleCryptoTlsTlsServer:);
  methods[3].selector = @selector(cleanupHandshake);
  methods[4].selector = @selector(getContext);
  methods[5].selector = @selector(getContextAdmin);
  methods[6].selector = @selector(getPeer);
  methods[7].selector = @selector(handleHandshakeMessageWithShort:withJavaIoByteArrayInputStream:);
  methods[8].selector = @selector(handleAlertWarningMessageWithShort:);
  methods[9].selector = @selector(notifyClientCertificateWithOrgSpongycastleCryptoTlsCertificate:);
  methods[10].selector = @selector(receiveCertificateMessageWithJavaIoByteArrayInputStream:);
  methods[11].selector = @selector(receiveCertificateVerifyMessageWithJavaIoByteArrayInputStream:);
  methods[12].selector = @selector(receiveClientHelloMessageWithJavaIoByteArrayInputStream:);
  methods[13].selector = @selector(receiveClientKeyExchangeMessageWithJavaIoByteArrayInputStream:);
  methods[14].selector = @selector(sendCertificateRequestMessageWithOrgSpongycastleCryptoTlsCertificateRequest:);
  methods[15].selector = @selector(sendCertificateStatusMessageWithOrgSpongycastleCryptoTlsCertificateStatus:);
  methods[16].selector = @selector(sendNewSessionTicketMessageWithOrgSpongycastleCryptoTlsNewSessionTicket:);
  methods[17].selector = @selector(sendServerHelloMessage);
  methods[18].selector = @selector(sendServerHelloDoneMessage);
  methods[19].selector = @selector(sendServerKeyExchangeMessageWithByteArray:);
  methods[20].selector = @selector(expectCertificateVerifyMessage);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tlsServer_", "LOrgSpongycastleCryptoTlsTlsServer;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "tlsServerContext_", "LOrgSpongycastleCryptoTlsTlsServerContextImpl;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "keyExchange_", "LOrgSpongycastleCryptoTlsTlsKeyExchange;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "serverCredentials_", "LOrgSpongycastleCryptoTlsTlsCredentials;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "certificateRequest_", "LOrgSpongycastleCryptoTlsCertificateRequest;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "clientCertificateType_", "S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "prepareFinishHash_", "LOrgSpongycastleCryptoTlsTlsHandshakeHash;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;LJavaIoOutputStream;LJavaSecuritySecureRandom;", "LJavaSecuritySecureRandom;", "accept", "LOrgSpongycastleCryptoTlsTlsServer;", "LJavaIoIOException;", "handleHandshakeMessage", "SLJavaIoByteArrayInputStream;", "handleAlertWarningMessage", "S", "notifyClientCertificate", "LOrgSpongycastleCryptoTlsCertificate;", "receiveCertificateMessage", "LJavaIoByteArrayInputStream;", "receiveCertificateVerifyMessage", "receiveClientHelloMessage", "receiveClientKeyExchangeMessage", "sendCertificateRequestMessage", "LOrgSpongycastleCryptoTlsCertificateRequest;", "sendCertificateStatusMessage", "LOrgSpongycastleCryptoTlsCertificateStatus;", "sendNewSessionTicketMessage", "LOrgSpongycastleCryptoTlsNewSessionTicket;", "sendServerKeyExchangeMessage", "[B" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsTlsServerProtocol = { "TlsServerProtocol", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 21, 7, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsTlsServerProtocol;
}

@end

void OrgSpongycastleCryptoTlsTlsServerProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(OrgSpongycastleCryptoTlsTlsServerProtocol *self, JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom) {
  OrgSpongycastleCryptoTlsTlsProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(self, input, output, secureRandom);
  self->tlsServer_ = nil;
  self->tlsServerContext_ = nil;
  self->keyExchange_ = nil;
  self->serverCredentials_ = nil;
  self->certificateRequest_ = nil;
  self->clientCertificateType_ = -1;
  self->prepareFinishHash_ = nil;
}

OrgSpongycastleCryptoTlsTlsServerProtocol *new_OrgSpongycastleCryptoTlsTlsServerProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsTlsServerProtocol, initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_, input, output, secureRandom)
}

OrgSpongycastleCryptoTlsTlsServerProtocol *create_OrgSpongycastleCryptoTlsTlsServerProtocol_initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_(JavaIoInputStream *input, JavaIoOutputStream *output, JavaSecuritySecureRandom *secureRandom) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsTlsServerProtocol, initWithJavaIoInputStream_withJavaIoOutputStream_withJavaSecuritySecureRandom_, input, output, secureRandom)
}

void OrgSpongycastleCryptoTlsTlsServerProtocol_initWithJavaSecuritySecureRandom_(OrgSpongycastleCryptoTlsTlsServerProtocol *self, JavaSecuritySecureRandom *secureRandom) {
  OrgSpongycastleCryptoTlsTlsProtocol_initWithJavaSecuritySecureRandom_(self, secureRandom);
  self->tlsServer_ = nil;
  self->tlsServerContext_ = nil;
  self->keyExchange_ = nil;
  self->serverCredentials_ = nil;
  self->certificateRequest_ = nil;
  self->clientCertificateType_ = -1;
  self->prepareFinishHash_ = nil;
}

OrgSpongycastleCryptoTlsTlsServerProtocol *new_OrgSpongycastleCryptoTlsTlsServerProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsTlsServerProtocol, initWithJavaSecuritySecureRandom_, secureRandom)
}

OrgSpongycastleCryptoTlsTlsServerProtocol *create_OrgSpongycastleCryptoTlsTlsServerProtocol_initWithJavaSecuritySecureRandom_(JavaSecuritySecureRandom *secureRandom) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsTlsServerProtocol, initWithJavaSecuritySecureRandom_, secureRandom)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsTlsServerProtocol)
