//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/SignatureAndHashAlgorithm.java
//

#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/crypto/tls/SignatureAlgorithm.h"
#include "org/spongycastle/crypto/tls/SignatureAndHashAlgorithm.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

@implementation OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm

- (instancetype)initWithShort:(jshort)hash_
                    withShort:(jshort)signature {
  OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_initWithShort_withShort_(self, hash_, signature);
  return self;
}

- (jshort)getHash {
  return hash__;
}

- (jshort)getSignature {
  return signature_;
}

- (jboolean)isEqual:(id)obj {
  if (!([obj isKindOfClass:[OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm class]])) {
    return false;
  }
  OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *other = (OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *) cast_chk(obj, [OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm class]);
  return [((OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *) nil_chk(other)) getHash] == [self getHash] && [other getSignature] == [self getSignature];
}

- (NSUInteger)hash {
  return (JreLShift32([self getHash], 16)) | [self getSignature];
}

- (void)encodeWithJavaIoOutputStream:(JavaIoOutputStream *)output {
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_([self getHash], output);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withJavaIoOutputStream_([self getSignature], output);
}

+ (OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)parseWithJavaIoInputStream:(JavaIoInputStream *)input {
  return OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_parseWithJavaIoInputStream_(input);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;", 0x9, 7, 8, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithShort:withShort:);
  methods[1].selector = @selector(getHash);
  methods[2].selector = @selector(getSignature);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(encodeWithJavaIoOutputStream:);
  methods[6].selector = @selector(parseWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hash__", "S", .constantValue.asLong = 0, 0x4, 9, -1, -1, -1 },
    { "signature_", "S", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "SS", "equals", "LNSObject;", "hashCode", "encode", "LJavaIoOutputStream;", "LJavaIoIOException;", "parse", "LJavaIoInputStream;", "hash" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm = { "SignatureAndHashAlgorithm", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;
}

@end

void OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_initWithShort_withShort_(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *self, jshort hash_, jshort signature) {
  NSObject_init(self);
  if (!OrgSpongycastleCryptoTlsTlsUtils_isValidUint8WithShort_(hash_)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'hash' should be a uint8");
  }
  if (!OrgSpongycastleCryptoTlsTlsUtils_isValidUint8WithShort_(signature)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'signature' should be a uint8");
  }
  if (signature == OrgSpongycastleCryptoTlsSignatureAlgorithm_anonymous) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'signature' MUST NOT be \"anonymous\"");
  }
  self->hash__ = hash_;
  self->signature_ = signature;
}

OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *new_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_initWithShort_withShort_(jshort hash_, jshort signature) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm, initWithShort_withShort_, hash_, signature)
}

OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *create_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_initWithShort_withShort_(jshort hash_, jshort signature) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm, initWithShort_withShort_, hash_, signature)
}

OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_parseWithJavaIoInputStream_(JavaIoInputStream *input) {
  OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_initialize();
  jshort hash_ = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
  jshort signature = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithJavaIoInputStream_(input);
  return new_OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_initWithShort_withShort_(hash_, signature);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm)
