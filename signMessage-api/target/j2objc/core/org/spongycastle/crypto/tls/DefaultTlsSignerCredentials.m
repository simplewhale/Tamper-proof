//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DefaultTlsSignerCredentials.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/crypto/CryptoException.h"
#include "org/spongycastle/crypto/params/AsymmetricKeyParameter.h"
#include "org/spongycastle/crypto/params/DSAPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/RSAKeyParameters.h"
#include "org/spongycastle/crypto/tls/AbstractTlsSignerCredentials.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/Certificate.h"
#include "org/spongycastle/crypto/tls/DefaultTlsSignerCredentials.h"
#include "org/spongycastle/crypto/tls/SignatureAndHashAlgorithm.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsDSSSigner.h"
#include "org/spongycastle/crypto/tls/TlsECDSASigner.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsRSASigner.h"
#include "org/spongycastle/crypto/tls/TlsSigner.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

@implementation OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                   withOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)certificate
     withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:(OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)privateKey {
  OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(self, context, certificate, privateKey);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                   withOrgSpongycastleCryptoTlsCertificate:(OrgSpongycastleCryptoTlsCertificate *)certificate
     withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:(OrgSpongycastleCryptoParamsAsymmetricKeyParameter *)privateKey
     withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)signatureAndHashAlgorithm {
  OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(self, context, certificate, privateKey, signatureAndHashAlgorithm);
  return self;
}

- (OrgSpongycastleCryptoTlsCertificate *)getCertificate {
  return certificate_;
}

- (IOSByteArray *)generateCertificateSignatureWithByteArray:(IOSByteArray *)hash_ {
  @try {
    if (OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_(context_)) {
      return [((id<OrgSpongycastleCryptoTlsTlsSigner>) nil_chk(signer_)) generateRawSignatureWithOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:signatureAndHashAlgorithm_ withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:privateKey_ withByteArray:hash_];
    }
    else {
      return [((id<OrgSpongycastleCryptoTlsTlsSigner>) nil_chk(signer_)) generateRawSignatureWithOrgSpongycastleCryptoParamsAsymmetricKeyParameter:privateKey_ withByteArray:hash_];
    }
  }
  @catch (OrgSpongycastleCryptoCryptoException *e) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_internal_error, e);
  }
}

- (OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)getSignatureAndHashAlgorithm {
  return signatureAndHashAlgorithm_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsCertificate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsContext:withOrgSpongycastleCryptoTlsCertificate:withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoTlsTlsContext:withOrgSpongycastleCryptoTlsCertificate:withOrgSpongycastleCryptoParamsAsymmetricKeyParameter:withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:);
  methods[2].selector = @selector(getCertificate);
  methods[3].selector = @selector(generateCertificateSignatureWithByteArray:);
  methods[4].selector = @selector(getSignatureAndHashAlgorithm);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "context_", "LOrgSpongycastleCryptoTlsTlsContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "certificate_", "LOrgSpongycastleCryptoTlsCertificate;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "privateKey_", "LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "signatureAndHashAlgorithm_", "LOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "signer_", "LOrgSpongycastleCryptoTlsTlsSigner;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsTlsContext;LOrgSpongycastleCryptoTlsCertificate;LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;", "LOrgSpongycastleCryptoTlsTlsContext;LOrgSpongycastleCryptoTlsCertificate;LOrgSpongycastleCryptoParamsAsymmetricKeyParameter;LOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;", "generateCertificateSignature", "[B", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials = { "DefaultTlsSignerCredentials", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 5, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials;
}

@end

void OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials *self, id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey) {
  OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(self, context, certificate, privateKey, nil);
}

OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials *new_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials, initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_, context, certificate, privateKey)
}

OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials *create_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_(id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials, initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_, context, certificate, privateKey)
}

void OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials *self, id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey, OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm) {
  OrgSpongycastleCryptoTlsAbstractTlsSignerCredentials_init(self);
  if (certificate == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'certificate' cannot be null");
  }
  if ([certificate isEmpty]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'certificate' cannot be empty");
  }
  if (privateKey == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'privateKey' cannot be null");
  }
  if (![privateKey isPrivate]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'privateKey' must be private");
  }
  if (OrgSpongycastleCryptoTlsTlsUtils_isTLSv12WithOrgSpongycastleCryptoTlsTlsContext_(context) && signatureAndHashAlgorithm == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"'signatureAndHashAlgorithm' cannot be null for (D)TLS 1.2+");
  }
  if ([privateKey isKindOfClass:[OrgSpongycastleCryptoParamsRSAKeyParameters class]]) {
    self->signer_ = new_OrgSpongycastleCryptoTlsTlsRSASigner_init();
  }
  else if ([privateKey isKindOfClass:[OrgSpongycastleCryptoParamsDSAPrivateKeyParameters class]]) {
    self->signer_ = new_OrgSpongycastleCryptoTlsTlsDSSSigner_init();
  }
  else if ([privateKey isKindOfClass:[OrgSpongycastleCryptoParamsECPrivateKeyParameters class]]) {
    self->signer_ = new_OrgSpongycastleCryptoTlsTlsECDSASigner_init();
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"'privateKey' type not supported: ", [[privateKey java_getClass] getName]));
  }
  [self->signer_ init__WithOrgSpongycastleCryptoTlsTlsContext:context];
  self->context_ = context;
  self->certificate_ = certificate;
  self->privateKey_ = privateKey;
  self->signatureAndHashAlgorithm_ = signatureAndHashAlgorithm;
}

OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials *new_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey, OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials, initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_, context, certificate, privateKey, signatureAndHashAlgorithm)
}

OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials *create_OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials_initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_(id<OrgSpongycastleCryptoTlsTlsContext> context, OrgSpongycastleCryptoTlsCertificate *certificate, OrgSpongycastleCryptoParamsAsymmetricKeyParameter *privateKey, OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *signatureAndHashAlgorithm) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials, initWithOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsCertificate_withOrgSpongycastleCryptoParamsAsymmetricKeyParameter_withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm_, context, certificate, privateKey, signatureAndHashAlgorithm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDefaultTlsSignerCredentials)
