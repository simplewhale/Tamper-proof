//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DTLSRecordLayer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/AlertLevel.h"
#include "org/spongycastle/crypto/tls/ByteQueue.h"
#include "org/spongycastle/crypto/tls/ChangeCipherSpec.h"
#include "org/spongycastle/crypto/tls/ContentType.h"
#include "org/spongycastle/crypto/tls/DTLSEpoch.h"
#include "org/spongycastle/crypto/tls/DTLSHandshakeRetransmit.h"
#include "org/spongycastle/crypto/tls/DTLSRecordLayer.h"
#include "org/spongycastle/crypto/tls/DTLSReplayWindow.h"
#include "org/spongycastle/crypto/tls/DatagramTransport.h"
#include "org/spongycastle/crypto/tls/HandshakeType.h"
#include "org/spongycastle/crypto/tls/ProtocolVersion.h"
#include "org/spongycastle/crypto/tls/TlsCipher.h"
#include "org/spongycastle/crypto/tls/TlsContext.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"
#include "org/spongycastle/crypto/tls/TlsNullCipher.h"
#include "org/spongycastle/crypto/tls/TlsPeer.h"
#include "org/spongycastle/crypto/tls/TlsUtils.h"

@interface OrgSpongycastleCryptoTlsDTLSRecordLayer () {
 @public
  id<OrgSpongycastleCryptoTlsDatagramTransport> transport_;
  id<OrgSpongycastleCryptoTlsTlsContext> context_;
  id<OrgSpongycastleCryptoTlsTlsPeer> peer_;
  OrgSpongycastleCryptoTlsByteQueue *recordQueue_;
  volatile_jboolean closed_;
  volatile_jboolean failed_;
  volatile_id readVersion_;
  volatile_id writeVersion_;
  volatile_jboolean inHandshake_;
  volatile_jint plaintextLimit_;
  OrgSpongycastleCryptoTlsDTLSEpoch *currentEpoch_;
  OrgSpongycastleCryptoTlsDTLSEpoch *pendingEpoch_;
  OrgSpongycastleCryptoTlsDTLSEpoch *readEpoch_;
  OrgSpongycastleCryptoTlsDTLSEpoch *writeEpoch_;
  id<OrgSpongycastleCryptoTlsDTLSHandshakeRetransmit> retransmit_;
  OrgSpongycastleCryptoTlsDTLSEpoch *retransmitEpoch_;
  jlong retransmitExpiry_;
}

- (void)closeTransport;

- (void)raiseAlertWithShort:(jshort)alertLevel
                  withShort:(jshort)alertDescription
               withNSString:(NSString *)message
      withJavaLangThrowable:(JavaLangThrowable *)cause;

- (jint)receiveRecordWithByteArray:(IOSByteArray *)buf
                           withInt:(jint)off
                           withInt:(jint)len
                           withInt:(jint)waitMillis;

- (void)sendRecordWithShort:(jshort)contentType
              withByteArray:(IOSByteArray *)buf
                    withInt:(jint)off
                    withInt:(jint)len;

+ (jlong)getMacSequenceNumberWithInt:(jint)epoch
                            withLong:(jlong)sequence_number;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSRecordLayer, transport_, id<OrgSpongycastleCryptoTlsDatagramTransport>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSRecordLayer, context_, id<OrgSpongycastleCryptoTlsTlsContext>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSRecordLayer, peer_, id<OrgSpongycastleCryptoTlsTlsPeer>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSRecordLayer, recordQueue_, OrgSpongycastleCryptoTlsByteQueue *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSRecordLayer, readVersion_, OrgSpongycastleCryptoTlsProtocolVersion *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSRecordLayer, writeVersion_, OrgSpongycastleCryptoTlsProtocolVersion *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSRecordLayer, currentEpoch_, OrgSpongycastleCryptoTlsDTLSEpoch *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSRecordLayer, pendingEpoch_, OrgSpongycastleCryptoTlsDTLSEpoch *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSRecordLayer, readEpoch_, OrgSpongycastleCryptoTlsDTLSEpoch *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSRecordLayer, writeEpoch_, OrgSpongycastleCryptoTlsDTLSEpoch *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSRecordLayer, retransmit_, id<OrgSpongycastleCryptoTlsDTLSHandshakeRetransmit>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSRecordLayer, retransmitEpoch_, OrgSpongycastleCryptoTlsDTLSEpoch *)

inline jint OrgSpongycastleCryptoTlsDTLSRecordLayer_get_RECORD_HEADER_LENGTH(void);
#define OrgSpongycastleCryptoTlsDTLSRecordLayer_RECORD_HEADER_LENGTH 13
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsDTLSRecordLayer, RECORD_HEADER_LENGTH, jint)

inline jint OrgSpongycastleCryptoTlsDTLSRecordLayer_get_MAX_FRAGMENT_LENGTH(void);
#define OrgSpongycastleCryptoTlsDTLSRecordLayer_MAX_FRAGMENT_LENGTH 16384
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsDTLSRecordLayer, MAX_FRAGMENT_LENGTH, jint)

inline jlong OrgSpongycastleCryptoTlsDTLSRecordLayer_get_TCP_MSL(void);
#define OrgSpongycastleCryptoTlsDTLSRecordLayer_TCP_MSL 120000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsDTLSRecordLayer, TCP_MSL, jlong)

inline jlong OrgSpongycastleCryptoTlsDTLSRecordLayer_get_RETRANSMIT_TIMEOUT(void);
#define OrgSpongycastleCryptoTlsDTLSRecordLayer_RETRANSMIT_TIMEOUT 240000LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsDTLSRecordLayer, RETRANSMIT_TIMEOUT, jlong)

__attribute__((unused)) static void OrgSpongycastleCryptoTlsDTLSRecordLayer_closeTransport(OrgSpongycastleCryptoTlsDTLSRecordLayer *self);

__attribute__((unused)) static void OrgSpongycastleCryptoTlsDTLSRecordLayer_raiseAlertWithShort_withShort_withNSString_withJavaLangThrowable_(OrgSpongycastleCryptoTlsDTLSRecordLayer *self, jshort alertLevel, jshort alertDescription, NSString *message, JavaLangThrowable *cause);

__attribute__((unused)) static jint OrgSpongycastleCryptoTlsDTLSRecordLayer_receiveRecordWithByteArray_withInt_withInt_withInt_(OrgSpongycastleCryptoTlsDTLSRecordLayer *self, IOSByteArray *buf, jint off, jint len, jint waitMillis);

__attribute__((unused)) static void OrgSpongycastleCryptoTlsDTLSRecordLayer_sendRecordWithShort_withByteArray_withInt_withInt_(OrgSpongycastleCryptoTlsDTLSRecordLayer *self, jshort contentType, IOSByteArray *buf, jint off, jint len);

__attribute__((unused)) static jlong OrgSpongycastleCryptoTlsDTLSRecordLayer_getMacSequenceNumberWithInt_withLong_(jint epoch, jlong sequence_number);

@implementation OrgSpongycastleCryptoTlsDTLSRecordLayer

- (instancetype)initWithOrgSpongycastleCryptoTlsDatagramTransport:(id<OrgSpongycastleCryptoTlsDatagramTransport>)transport
                           withOrgSpongycastleCryptoTlsTlsContext:(id<OrgSpongycastleCryptoTlsTlsContext>)context
                              withOrgSpongycastleCryptoTlsTlsPeer:(id<OrgSpongycastleCryptoTlsTlsPeer>)peer
                                                        withShort:(jshort)contentType {
  OrgSpongycastleCryptoTlsDTLSRecordLayer_initWithOrgSpongycastleCryptoTlsDatagramTransport_withOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsPeer_withShort_(self, transport, context, peer, contentType);
  return self;
}

- (void)setPlaintextLimitWithInt:(jint)plaintextLimit {
  JreAssignVolatileInt(&self->plaintextLimit_, plaintextLimit);
}

- (jint)getReadEpoch {
  return [((OrgSpongycastleCryptoTlsDTLSEpoch *) nil_chk(readEpoch_)) getEpoch];
}

- (OrgSpongycastleCryptoTlsProtocolVersion *)getReadVersion {
  return JreLoadVolatileId(&readVersion_);
}

- (void)setReadVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)readVersion {
  (void) JreVolatileStrongAssign(&self->readVersion_, readVersion);
}

- (void)setWriteVersionWithOrgSpongycastleCryptoTlsProtocolVersion:(OrgSpongycastleCryptoTlsProtocolVersion *)writeVersion {
  (void) JreVolatileStrongAssign(&self->writeVersion_, writeVersion);
}

- (void)initPendingEpochWithOrgSpongycastleCryptoTlsTlsCipher:(id<OrgSpongycastleCryptoTlsTlsCipher>)pendingCipher {
  if (pendingEpoch_ != nil) {
    @throw new_JavaLangIllegalStateException_init();
  }
  self->pendingEpoch_ = new_OrgSpongycastleCryptoTlsDTLSEpoch_initWithInt_withOrgSpongycastleCryptoTlsTlsCipher_([((OrgSpongycastleCryptoTlsDTLSEpoch *) nil_chk(writeEpoch_)) getEpoch] + 1, pendingCipher);
}

- (void)handshakeSuccessfulWithOrgSpongycastleCryptoTlsDTLSHandshakeRetransmit:(id<OrgSpongycastleCryptoTlsDTLSHandshakeRetransmit>)retransmit {
  if (readEpoch_ == currentEpoch_ || writeEpoch_ == currentEpoch_) {
    @throw new_JavaLangIllegalStateException_init();
  }
  if (retransmit != nil) {
    self->retransmit_ = retransmit;
    self->retransmitEpoch_ = currentEpoch_;
    self->retransmitExpiry_ = JavaLangSystem_currentTimeMillis() + OrgSpongycastleCryptoTlsDTLSRecordLayer_RETRANSMIT_TIMEOUT;
  }
  JreAssignVolatileBoolean(&self->inHandshake_, false);
  self->currentEpoch_ = pendingEpoch_;
  self->pendingEpoch_ = nil;
}

- (void)resetWriteEpoch {
  if (retransmitEpoch_ != nil) {
    self->writeEpoch_ = retransmitEpoch_;
  }
  else {
    self->writeEpoch_ = currentEpoch_;
  }
}

- (jint)getReceiveLimit {
  return JavaLangMath_minWithInt_withInt_(JreLoadVolatileInt(&self->plaintextLimit_), [((id<OrgSpongycastleCryptoTlsTlsCipher>) nil_chk([((OrgSpongycastleCryptoTlsDTLSEpoch *) nil_chk(readEpoch_)) getCipher])) getPlaintextLimitWithInt:[((id<OrgSpongycastleCryptoTlsDatagramTransport>) nil_chk(transport_)) getReceiveLimit] - OrgSpongycastleCryptoTlsDTLSRecordLayer_RECORD_HEADER_LENGTH]);
}

- (jint)getSendLimit {
  return JavaLangMath_minWithInt_withInt_(JreLoadVolatileInt(&self->plaintextLimit_), [((id<OrgSpongycastleCryptoTlsTlsCipher>) nil_chk([((OrgSpongycastleCryptoTlsDTLSEpoch *) nil_chk(writeEpoch_)) getCipher])) getPlaintextLimitWithInt:[((id<OrgSpongycastleCryptoTlsDatagramTransport>) nil_chk(transport_)) getSendLimit] - OrgSpongycastleCryptoTlsDTLSRecordLayer_RECORD_HEADER_LENGTH]);
}

- (jint)receiveWithByteArray:(IOSByteArray *)buf
                     withInt:(jint)off
                     withInt:(jint)len
                     withInt:(jint)waitMillis {
  IOSByteArray *record = nil;
  for (; ; ) {
    jint receiveLimit = JavaLangMath_minWithInt_withInt_(len, [self getReceiveLimit]) + OrgSpongycastleCryptoTlsDTLSRecordLayer_RECORD_HEADER_LENGTH;
    if (record == nil || record->size_ < receiveLimit) {
      record = [IOSByteArray newArrayWithLength:receiveLimit];
    }
    @try {
      if (retransmit_ != nil && JavaLangSystem_currentTimeMillis() > retransmitExpiry_) {
        retransmit_ = nil;
        retransmitEpoch_ = nil;
      }
      jint received = OrgSpongycastleCryptoTlsDTLSRecordLayer_receiveRecordWithByteArray_withInt_withInt_withInt_(self, record, 0, receiveLimit, waitMillis);
      if (received < 0) {
        return received;
      }
      if (received < OrgSpongycastleCryptoTlsDTLSRecordLayer_RECORD_HEADER_LENGTH) {
        continue;
      }
      jint length = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithByteArray_withInt_(record, 11);
      if (received != (length + OrgSpongycastleCryptoTlsDTLSRecordLayer_RECORD_HEADER_LENGTH)) {
        continue;
      }
      jshort type = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithByteArray_withInt_(record, 0);
      switch (type) {
        case OrgSpongycastleCryptoTlsContentType_alert:
        case OrgSpongycastleCryptoTlsContentType_application_data:
        case OrgSpongycastleCryptoTlsContentType_change_cipher_spec:
        case OrgSpongycastleCryptoTlsContentType_handshake:
        case OrgSpongycastleCryptoTlsContentType_heartbeat:
        break;
        default:
        continue;
      }
      jint epoch = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithByteArray_withInt_(record, 3);
      OrgSpongycastleCryptoTlsDTLSEpoch *recordEpoch = nil;
      if (epoch == [((OrgSpongycastleCryptoTlsDTLSEpoch *) nil_chk(readEpoch_)) getEpoch]) {
        recordEpoch = readEpoch_;
      }
      else if (type == OrgSpongycastleCryptoTlsContentType_handshake && retransmitEpoch_ != nil && epoch == [retransmitEpoch_ getEpoch]) {
        recordEpoch = retransmitEpoch_;
      }
      if (recordEpoch == nil) {
        continue;
      }
      jlong seq = OrgSpongycastleCryptoTlsTlsUtils_readUint48WithByteArray_withInt_(record, 5);
      if ([((OrgSpongycastleCryptoTlsDTLSReplayWindow *) nil_chk([recordEpoch getReplayWindow])) shouldDiscardWithLong:seq]) {
        continue;
      }
      OrgSpongycastleCryptoTlsProtocolVersion *version_ = OrgSpongycastleCryptoTlsTlsUtils_readVersionWithByteArray_withInt_(record, 1);
      if (![((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(version_)) isDTLS]) {
        continue;
      }
      if (JreLoadVolatileId(&readVersion_) != nil && ![((OrgSpongycastleCryptoTlsProtocolVersion *) nil_chk(JreLoadVolatileId(&readVersion_))) equalsWithOrgSpongycastleCryptoTlsProtocolVersion:version_]) {
        continue;
      }
      IOSByteArray *plaintext = [((id<OrgSpongycastleCryptoTlsTlsCipher>) nil_chk([recordEpoch getCipher])) decodeCiphertextWithLong:OrgSpongycastleCryptoTlsDTLSRecordLayer_getMacSequenceNumberWithInt_withLong_([recordEpoch getEpoch], seq) withShort:type withByteArray:record withInt:OrgSpongycastleCryptoTlsDTLSRecordLayer_RECORD_HEADER_LENGTH withInt:received - OrgSpongycastleCryptoTlsDTLSRecordLayer_RECORD_HEADER_LENGTH];
      [((OrgSpongycastleCryptoTlsDTLSReplayWindow *) nil_chk([recordEpoch getReplayWindow])) reportAuthenticatedWithLong:seq];
      if (((IOSByteArray *) nil_chk(plaintext))->size_ > JreLoadVolatileInt(&self->plaintextLimit_)) {
        continue;
      }
      if (JreLoadVolatileId(&readVersion_) == nil) {
        (void) JreVolatileStrongAssign(&readVersion_, version_);
      }
      switch (type) {
        case OrgSpongycastleCryptoTlsContentType_alert:
        {
          if (plaintext->size_ == 2) {
            jshort alertLevel = IOSByteArray_Get(plaintext, 0);
            jshort alertDescription = IOSByteArray_Get(plaintext, 1);
            [((id<OrgSpongycastleCryptoTlsTlsPeer>) nil_chk(peer_)) notifyAlertReceivedWithShort:alertLevel withShort:alertDescription];
            if (alertLevel == OrgSpongycastleCryptoTlsAlertLevel_fatal) {
              [self failed];
              @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(alertDescription);
            }
            if (alertDescription == OrgSpongycastleCryptoTlsAlertDescription_close_notify) {
              OrgSpongycastleCryptoTlsDTLSRecordLayer_closeTransport(self);
            }
          }
          continue;
        }
        case OrgSpongycastleCryptoTlsContentType_application_data:
        {
          if (JreLoadVolatileBoolean(&inHandshake_)) {
            continue;
          }
          break;
        }
        case OrgSpongycastleCryptoTlsContentType_change_cipher_spec:
        {
          for (jint i = 0; i < plaintext->size_; ++i) {
            jshort message = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithByteArray_withInt_(plaintext, i);
            if (message != OrgSpongycastleCryptoTlsChangeCipherSpec_change_cipher_spec) {
              continue;
            }
            if (pendingEpoch_ != nil) {
              readEpoch_ = pendingEpoch_;
            }
          }
          continue;
        }
        case OrgSpongycastleCryptoTlsContentType_handshake:
        {
          if (!JreLoadVolatileBoolean(&inHandshake_)) {
            if (retransmit_ != nil) {
              [retransmit_ receivedHandshakeRecordWithInt:epoch withByteArray:plaintext withInt:0 withInt:plaintext->size_];
            }
            continue;
          }
          break;
        }
        case OrgSpongycastleCryptoTlsContentType_heartbeat:
        {
          continue;
        }
      }
      if (!JreLoadVolatileBoolean(&inHandshake_) && retransmit_ != nil) {
        self->retransmit_ = nil;
        self->retransmitEpoch_ = nil;
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(plaintext, 0, buf, off, plaintext->size_);
      return plaintext->size_;
    }
    @catch (JavaIoIOException *e) {
      @throw e;
    }
  }
}

- (void)sendWithByteArray:(IOSByteArray *)buf
                  withInt:(jint)off
                  withInt:(jint)len {
  jshort contentType = OrgSpongycastleCryptoTlsContentType_application_data;
  if (JreLoadVolatileBoolean(&self->inHandshake_) || self->writeEpoch_ == self->retransmitEpoch_) {
    contentType = OrgSpongycastleCryptoTlsContentType_handshake;
    jshort handshakeType = OrgSpongycastleCryptoTlsTlsUtils_readUint8WithByteArray_withInt_(buf, off);
    if (handshakeType == OrgSpongycastleCryptoTlsHandshakeType_finished) {
      OrgSpongycastleCryptoTlsDTLSEpoch *nextEpoch = nil;
      if (JreLoadVolatileBoolean(&self->inHandshake_)) {
        nextEpoch = pendingEpoch_;
      }
      else if (self->writeEpoch_ == self->retransmitEpoch_) {
        nextEpoch = currentEpoch_;
      }
      if (nextEpoch == nil) {
        @throw new_JavaLangIllegalStateException_init();
      }
      IOSByteArray *data = [IOSByteArray newArrayWithBytes:(jbyte[]){ 1 } count:1];
      OrgSpongycastleCryptoTlsDTLSRecordLayer_sendRecordWithShort_withByteArray_withInt_withInt_(self, OrgSpongycastleCryptoTlsContentType_change_cipher_spec, data, 0, data->size_);
      writeEpoch_ = nextEpoch;
    }
  }
  OrgSpongycastleCryptoTlsDTLSRecordLayer_sendRecordWithShort_withByteArray_withInt_withInt_(self, contentType, buf, off, len);
}

- (void)close {
  if (!JreLoadVolatileBoolean(&closed_)) {
    if (JreLoadVolatileBoolean(&inHandshake_)) {
      [self warnWithShort:OrgSpongycastleCryptoTlsAlertDescription_user_canceled withNSString:@"User canceled handshake"];
    }
    OrgSpongycastleCryptoTlsDTLSRecordLayer_closeTransport(self);
  }
}

- (void)failWithShort:(jshort)alertDescription {
  if (!JreLoadVolatileBoolean(&closed_)) {
    @try {
      OrgSpongycastleCryptoTlsDTLSRecordLayer_raiseAlertWithShort_withShort_withNSString_withJavaLangThrowable_(self, OrgSpongycastleCryptoTlsAlertLevel_fatal, alertDescription, nil, nil);
    }
    @catch (JavaLangException *e) {
    }
    JreAssignVolatileBoolean(&failed_, true);
    OrgSpongycastleCryptoTlsDTLSRecordLayer_closeTransport(self);
  }
}

- (void)failed {
  if (!JreLoadVolatileBoolean(&closed_)) {
    JreAssignVolatileBoolean(&failed_, true);
    OrgSpongycastleCryptoTlsDTLSRecordLayer_closeTransport(self);
  }
}

- (void)warnWithShort:(jshort)alertDescription
         withNSString:(NSString *)message {
  OrgSpongycastleCryptoTlsDTLSRecordLayer_raiseAlertWithShort_withShort_withNSString_withJavaLangThrowable_(self, OrgSpongycastleCryptoTlsAlertLevel_warning, alertDescription, message, nil);
}

- (void)closeTransport {
  OrgSpongycastleCryptoTlsDTLSRecordLayer_closeTransport(self);
}

- (void)raiseAlertWithShort:(jshort)alertLevel
                  withShort:(jshort)alertDescription
               withNSString:(NSString *)message
      withJavaLangThrowable:(JavaLangThrowable *)cause {
  OrgSpongycastleCryptoTlsDTLSRecordLayer_raiseAlertWithShort_withShort_withNSString_withJavaLangThrowable_(self, alertLevel, alertDescription, message, cause);
}

- (jint)receiveRecordWithByteArray:(IOSByteArray *)buf
                           withInt:(jint)off
                           withInt:(jint)len
                           withInt:(jint)waitMillis {
  return OrgSpongycastleCryptoTlsDTLSRecordLayer_receiveRecordWithByteArray_withInt_withInt_withInt_(self, buf, off, len, waitMillis);
}

- (void)sendRecordWithShort:(jshort)contentType
              withByteArray:(IOSByteArray *)buf
                    withInt:(jint)off
                    withInt:(jint)len {
  OrgSpongycastleCryptoTlsDTLSRecordLayer_sendRecordWithShort_withByteArray_withInt_withInt_(self, contentType, buf, off, len);
}

+ (jlong)getMacSequenceNumberWithInt:(jint)epoch
                            withLong:(jlong)sequence_number {
  return OrgSpongycastleCryptoTlsDTLSRecordLayer_getMacSequenceNumberWithInt_withLong_(epoch, sequence_number);
}

- (void)__javaClone:(OrgSpongycastleCryptoTlsDTLSRecordLayer *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&readVersion_, &original->readVersion_);
  JreCloneVolatileStrong(&writeVersion_, &original->writeVersion_);
}

- (void)dealloc {
  JreReleaseVolatile(&readVersion_);
  JreReleaseVolatile(&writeVersion_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoTlsProtocolVersion;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 10, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 10, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, 10, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 10, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, 10, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, 10, -1, -1, -1 },
    { NULL, "I", 0x2, 21, 12, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, 10, -1, -1, -1 },
    { NULL, "J", 0xa, 24, 25, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoTlsDatagramTransport:withOrgSpongycastleCryptoTlsTlsContext:withOrgSpongycastleCryptoTlsTlsPeer:withShort:);
  methods[1].selector = @selector(setPlaintextLimitWithInt:);
  methods[2].selector = @selector(getReadEpoch);
  methods[3].selector = @selector(getReadVersion);
  methods[4].selector = @selector(setReadVersionWithOrgSpongycastleCryptoTlsProtocolVersion:);
  methods[5].selector = @selector(setWriteVersionWithOrgSpongycastleCryptoTlsProtocolVersion:);
  methods[6].selector = @selector(initPendingEpochWithOrgSpongycastleCryptoTlsTlsCipher:);
  methods[7].selector = @selector(handshakeSuccessfulWithOrgSpongycastleCryptoTlsDTLSHandshakeRetransmit:);
  methods[8].selector = @selector(resetWriteEpoch);
  methods[9].selector = @selector(getReceiveLimit);
  methods[10].selector = @selector(getSendLimit);
  methods[11].selector = @selector(receiveWithByteArray:withInt:withInt:withInt:);
  methods[12].selector = @selector(sendWithByteArray:withInt:withInt:);
  methods[13].selector = @selector(close);
  methods[14].selector = @selector(failWithShort:);
  methods[15].selector = @selector(failed);
  methods[16].selector = @selector(warnWithShort:withNSString:);
  methods[17].selector = @selector(closeTransport);
  methods[18].selector = @selector(raiseAlertWithShort:withShort:withNSString:withJavaLangThrowable:);
  methods[19].selector = @selector(receiveRecordWithByteArray:withInt:withInt:withInt:);
  methods[20].selector = @selector(sendRecordWithShort:withByteArray:withInt:withInt:);
  methods[21].selector = @selector(getMacSequenceNumberWithInt:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "RECORD_HEADER_LENGTH", "I", .constantValue.asInt = OrgSpongycastleCryptoTlsDTLSRecordLayer_RECORD_HEADER_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "MAX_FRAGMENT_LENGTH", "I", .constantValue.asInt = OrgSpongycastleCryptoTlsDTLSRecordLayer_MAX_FRAGMENT_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "TCP_MSL", "J", .constantValue.asLong = OrgSpongycastleCryptoTlsDTLSRecordLayer_TCP_MSL, 0x1a, -1, -1, -1, -1 },
    { "RETRANSMIT_TIMEOUT", "J", .constantValue.asLong = OrgSpongycastleCryptoTlsDTLSRecordLayer_RETRANSMIT_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "transport_", "LOrgSpongycastleCryptoTlsDatagramTransport;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "context_", "LOrgSpongycastleCryptoTlsTlsContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "peer_", "LOrgSpongycastleCryptoTlsTlsPeer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "recordQueue_", "LOrgSpongycastleCryptoTlsByteQueue;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "failed_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "readVersion_", "LOrgSpongycastleCryptoTlsProtocolVersion;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "writeVersion_", "LOrgSpongycastleCryptoTlsProtocolVersion;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "inHandshake_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "plaintextLimit_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "currentEpoch_", "LOrgSpongycastleCryptoTlsDTLSEpoch;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pendingEpoch_", "LOrgSpongycastleCryptoTlsDTLSEpoch;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readEpoch_", "LOrgSpongycastleCryptoTlsDTLSEpoch;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeEpoch_", "LOrgSpongycastleCryptoTlsDTLSEpoch;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "retransmit_", "LOrgSpongycastleCryptoTlsDTLSHandshakeRetransmit;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "retransmitEpoch_", "LOrgSpongycastleCryptoTlsDTLSEpoch;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "retransmitExpiry_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsDatagramTransport;LOrgSpongycastleCryptoTlsTlsContext;LOrgSpongycastleCryptoTlsTlsPeer;S", "setPlaintextLimit", "I", "setReadVersion", "LOrgSpongycastleCryptoTlsProtocolVersion;", "setWriteVersion", "initPendingEpoch", "LOrgSpongycastleCryptoTlsTlsCipher;", "handshakeSuccessful", "LOrgSpongycastleCryptoTlsDTLSHandshakeRetransmit;", "LJavaIoIOException;", "receive", "[BIII", "send", "[BII", "fail", "S", "warn", "SLNSString;", "raiseAlert", "SSLNSString;LJavaLangThrowable;", "receiveRecord", "sendRecord", "S[BII", "getMacSequenceNumber", "IJ" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDTLSRecordLayer = { "DTLSRecordLayer", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x0, 22, 21, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDTLSRecordLayer;
}

@end

void OrgSpongycastleCryptoTlsDTLSRecordLayer_initWithOrgSpongycastleCryptoTlsDatagramTransport_withOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsPeer_withShort_(OrgSpongycastleCryptoTlsDTLSRecordLayer *self, id<OrgSpongycastleCryptoTlsDatagramTransport> transport, id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoTlsTlsPeer> peer, jshort contentType) {
  NSObject_init(self);
  self->recordQueue_ = new_OrgSpongycastleCryptoTlsByteQueue_init();
  JreAssignVolatileBoolean(&self->closed_, false);
  JreAssignVolatileBoolean(&self->failed_, false);
  (void) JreVolatileStrongAssign(&self->readVersion_, nil);
  (void) JreVolatileStrongAssign(&self->writeVersion_, nil);
  self->retransmit_ = nil;
  self->retransmitEpoch_ = nil;
  self->retransmitExpiry_ = 0;
  self->transport_ = transport;
  self->context_ = context;
  self->peer_ = peer;
  JreAssignVolatileBoolean(&self->inHandshake_, true);
  self->currentEpoch_ = new_OrgSpongycastleCryptoTlsDTLSEpoch_initWithInt_withOrgSpongycastleCryptoTlsTlsCipher_(0, new_OrgSpongycastleCryptoTlsTlsNullCipher_initWithOrgSpongycastleCryptoTlsTlsContext_(context));
  self->pendingEpoch_ = nil;
  self->readEpoch_ = self->currentEpoch_;
  self->writeEpoch_ = self->currentEpoch_;
  [self setPlaintextLimitWithInt:OrgSpongycastleCryptoTlsDTLSRecordLayer_MAX_FRAGMENT_LENGTH];
}

OrgSpongycastleCryptoTlsDTLSRecordLayer *new_OrgSpongycastleCryptoTlsDTLSRecordLayer_initWithOrgSpongycastleCryptoTlsDatagramTransport_withOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsPeer_withShort_(id<OrgSpongycastleCryptoTlsDatagramTransport> transport, id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoTlsTlsPeer> peer, jshort contentType) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDTLSRecordLayer, initWithOrgSpongycastleCryptoTlsDatagramTransport_withOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsPeer_withShort_, transport, context, peer, contentType)
}

OrgSpongycastleCryptoTlsDTLSRecordLayer *create_OrgSpongycastleCryptoTlsDTLSRecordLayer_initWithOrgSpongycastleCryptoTlsDatagramTransport_withOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsPeer_withShort_(id<OrgSpongycastleCryptoTlsDatagramTransport> transport, id<OrgSpongycastleCryptoTlsTlsContext> context, id<OrgSpongycastleCryptoTlsTlsPeer> peer, jshort contentType) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDTLSRecordLayer, initWithOrgSpongycastleCryptoTlsDatagramTransport_withOrgSpongycastleCryptoTlsTlsContext_withOrgSpongycastleCryptoTlsTlsPeer_withShort_, transport, context, peer, contentType)
}

void OrgSpongycastleCryptoTlsDTLSRecordLayer_closeTransport(OrgSpongycastleCryptoTlsDTLSRecordLayer *self) {
  if (!JreLoadVolatileBoolean(&self->closed_)) {
    @try {
      if (!JreLoadVolatileBoolean(&self->failed_)) {
        [self warnWithShort:OrgSpongycastleCryptoTlsAlertDescription_close_notify withNSString:nil];
      }
      [((id<OrgSpongycastleCryptoTlsDatagramTransport>) nil_chk(self->transport_)) close];
    }
    @catch (JavaLangException *e) {
    }
    JreAssignVolatileBoolean(&self->closed_, true);
  }
}

void OrgSpongycastleCryptoTlsDTLSRecordLayer_raiseAlertWithShort_withShort_withNSString_withJavaLangThrowable_(OrgSpongycastleCryptoTlsDTLSRecordLayer *self, jshort alertLevel, jshort alertDescription, NSString *message, JavaLangThrowable *cause) {
  [((id<OrgSpongycastleCryptoTlsTlsPeer>) nil_chk(self->peer_)) notifyAlertRaisedWithShort:alertLevel withShort:alertDescription withNSString:message withJavaLangThrowable:cause];
  IOSByteArray *error = [IOSByteArray newArrayWithLength:2];
  *IOSByteArray_GetRef(error, 0) = (jbyte) alertLevel;
  *IOSByteArray_GetRef(error, 1) = (jbyte) alertDescription;
  OrgSpongycastleCryptoTlsDTLSRecordLayer_sendRecordWithShort_withByteArray_withInt_withInt_(self, OrgSpongycastleCryptoTlsContentType_alert, error, 0, 2);
}

jint OrgSpongycastleCryptoTlsDTLSRecordLayer_receiveRecordWithByteArray_withInt_withInt_withInt_(OrgSpongycastleCryptoTlsDTLSRecordLayer *self, IOSByteArray *buf, jint off, jint len, jint waitMillis) {
  if ([((OrgSpongycastleCryptoTlsByteQueue *) nil_chk(self->recordQueue_)) available] > 0) {
    jint length = 0;
    if ([self->recordQueue_ available] >= OrgSpongycastleCryptoTlsDTLSRecordLayer_RECORD_HEADER_LENGTH) {
      IOSByteArray *lengthBytes = [IOSByteArray newArrayWithLength:2];
      [self->recordQueue_ readWithByteArray:lengthBytes withInt:0 withInt:2 withInt:11];
      length = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithByteArray_withInt_(lengthBytes, 0);
    }
    jint received = JavaLangMath_minWithInt_withInt_([self->recordQueue_ available], OrgSpongycastleCryptoTlsDTLSRecordLayer_RECORD_HEADER_LENGTH + length);
    [self->recordQueue_ removeDataWithByteArray:buf withInt:off withInt:received withInt:0];
    return received;
  }
  jint received = [((id<OrgSpongycastleCryptoTlsDatagramTransport>) nil_chk(self->transport_)) receiveWithByteArray:buf withInt:off withInt:len withInt:waitMillis];
  if (received >= OrgSpongycastleCryptoTlsDTLSRecordLayer_RECORD_HEADER_LENGTH) {
    jint fragmentLength = OrgSpongycastleCryptoTlsTlsUtils_readUint16WithByteArray_withInt_(buf, off + 11);
    jint recordLength = OrgSpongycastleCryptoTlsDTLSRecordLayer_RECORD_HEADER_LENGTH + fragmentLength;
    if (received > recordLength) {
      [self->recordQueue_ addDataWithByteArray:buf withInt:off + recordLength withInt:received - recordLength];
      received = recordLength;
    }
  }
  return received;
}

void OrgSpongycastleCryptoTlsDTLSRecordLayer_sendRecordWithShort_withByteArray_withInt_withInt_(OrgSpongycastleCryptoTlsDTLSRecordLayer *self, jshort contentType, IOSByteArray *buf, jint off, jint len) {
  if (JreLoadVolatileId(&self->writeVersion_) == nil) {
    return;
  }
  if (len > JreLoadVolatileInt(&self->plaintextLimit_)) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  if (len < 1 && contentType != OrgSpongycastleCryptoTlsContentType_application_data) {
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_(OrgSpongycastleCryptoTlsAlertDescription_internal_error);
  }
  jint recordEpoch = [((OrgSpongycastleCryptoTlsDTLSEpoch *) nil_chk(self->writeEpoch_)) getEpoch];
  jlong recordSequenceNumber = [((OrgSpongycastleCryptoTlsDTLSEpoch *) nil_chk(self->writeEpoch_)) allocateSequenceNumber];
  IOSByteArray *ciphertext = [((id<OrgSpongycastleCryptoTlsTlsCipher>) nil_chk([((OrgSpongycastleCryptoTlsDTLSEpoch *) nil_chk(self->writeEpoch_)) getCipher])) encodePlaintextWithLong:OrgSpongycastleCryptoTlsDTLSRecordLayer_getMacSequenceNumberWithInt_withLong_(recordEpoch, recordSequenceNumber) withShort:contentType withByteArray:buf withInt:off withInt:len];
  IOSByteArray *record = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(ciphertext))->size_ + OrgSpongycastleCryptoTlsDTLSRecordLayer_RECORD_HEADER_LENGTH];
  OrgSpongycastleCryptoTlsTlsUtils_writeUint8WithShort_withByteArray_withInt_(contentType, record, 0);
  OrgSpongycastleCryptoTlsTlsUtils_writeVersionWithOrgSpongycastleCryptoTlsProtocolVersion_withByteArray_withInt_(JreLoadVolatileId(&self->writeVersion_), record, 1);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withByteArray_withInt_(recordEpoch, record, 3);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint48WithLong_withByteArray_withInt_(recordSequenceNumber, record, 5);
  OrgSpongycastleCryptoTlsTlsUtils_writeUint16WithInt_withByteArray_withInt_(ciphertext->size_, record, 11);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(ciphertext, 0, record, OrgSpongycastleCryptoTlsDTLSRecordLayer_RECORD_HEADER_LENGTH, ciphertext->size_);
  [((id<OrgSpongycastleCryptoTlsDatagramTransport>) nil_chk(self->transport_)) sendWithByteArray:record withInt:0 withInt:record->size_];
}

jlong OrgSpongycastleCryptoTlsDTLSRecordLayer_getMacSequenceNumberWithInt_withLong_(jint epoch, jlong sequence_number) {
  OrgSpongycastleCryptoTlsDTLSRecordLayer_initialize();
  return (JreLShift64((epoch & (jlong) 0xFFFFFFFFLL), 48)) | sequence_number;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDTLSRecordLayer)
