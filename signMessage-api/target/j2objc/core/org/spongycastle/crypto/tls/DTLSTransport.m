//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/DTLSTransport.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/RuntimeException.h"
#include "org/spongycastle/crypto/tls/AlertDescription.h"
#include "org/spongycastle/crypto/tls/DTLSRecordLayer.h"
#include "org/spongycastle/crypto/tls/DTLSTransport.h"
#include "org/spongycastle/crypto/tls/TlsFatalAlert.h"

@interface OrgSpongycastleCryptoTlsDTLSTransport () {
 @public
  OrgSpongycastleCryptoTlsDTLSRecordLayer *recordLayer_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsDTLSTransport, recordLayer_, OrgSpongycastleCryptoTlsDTLSRecordLayer *)

@implementation OrgSpongycastleCryptoTlsDTLSTransport

- (instancetype)initWithOrgSpongycastleCryptoTlsDTLSRecordLayer:(OrgSpongycastleCryptoTlsDTLSRecordLayer *)recordLayer {
  OrgSpongycastleCryptoTlsDTLSTransport_initWithOrgSpongycastleCryptoTlsDTLSRecordLayer_(self, recordLayer);
  return self;
}

- (jint)getReceiveLimit {
  return [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(recordLayer_)) getReceiveLimit];
}

- (jint)getSendLimit {
  return [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(recordLayer_)) getSendLimit];
}

- (jint)receiveWithByteArray:(IOSByteArray *)buf
                     withInt:(jint)off
                     withInt:(jint)len
                     withInt:(jint)waitMillis {
  @try {
    return [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(recordLayer_)) receiveWithByteArray:buf withInt:off withInt:len withInt:waitMillis];
  }
  @catch (OrgSpongycastleCryptoTlsTlsFatalAlert *fatalAlert) {
    [recordLayer_ failWithShort:[fatalAlert getAlertDescription]];
    @throw fatalAlert;
  }
  @catch (JavaIoIOException *e) {
    [recordLayer_ failWithShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error];
    @throw e;
  }
  @catch (JavaLangRuntimeException *e) {
    [recordLayer_ failWithShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error];
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_internal_error, e);
  }
}

- (void)sendWithByteArray:(IOSByteArray *)buf
                  withInt:(jint)off
                  withInt:(jint)len {
  @try {
    [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(recordLayer_)) sendWithByteArray:buf withInt:off withInt:len];
  }
  @catch (OrgSpongycastleCryptoTlsTlsFatalAlert *fatalAlert) {
    [recordLayer_ failWithShort:[fatalAlert getAlertDescription]];
    @throw fatalAlert;
  }
  @catch (JavaIoIOException *e) {
    [recordLayer_ failWithShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error];
    @throw e;
  }
  @catch (JavaLangRuntimeException *e) {
    [recordLayer_ failWithShort:OrgSpongycastleCryptoTlsAlertDescription_internal_error];
    @throw new_OrgSpongycastleCryptoTlsTlsFatalAlert_initWithShort_withJavaLangThrowable_(OrgSpongycastleCryptoTlsAlertDescription_internal_error, e);
  }
}

- (void)close {
  [((OrgSpongycastleCryptoTlsDTLSRecordLayer *) nil_chk(recordLayer_)) close];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoTlsDTLSRecordLayer:);
  methods[1].selector = @selector(getReceiveLimit);
  methods[2].selector = @selector(getSendLimit);
  methods[3].selector = @selector(receiveWithByteArray:withInt:withInt:withInt:);
  methods[4].selector = @selector(sendWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "recordLayer_", "LOrgSpongycastleCryptoTlsDTLSRecordLayer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoTlsDTLSRecordLayer;", "LJavaIoIOException;", "receive", "[BIII", "send", "[BII" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsDTLSTransport = { "DTLSTransport", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsDTLSTransport;
}

@end

void OrgSpongycastleCryptoTlsDTLSTransport_initWithOrgSpongycastleCryptoTlsDTLSRecordLayer_(OrgSpongycastleCryptoTlsDTLSTransport *self, OrgSpongycastleCryptoTlsDTLSRecordLayer *recordLayer) {
  NSObject_init(self);
  self->recordLayer_ = recordLayer;
}

OrgSpongycastleCryptoTlsDTLSTransport *new_OrgSpongycastleCryptoTlsDTLSTransport_initWithOrgSpongycastleCryptoTlsDTLSRecordLayer_(OrgSpongycastleCryptoTlsDTLSRecordLayer *recordLayer) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsDTLSTransport, initWithOrgSpongycastleCryptoTlsDTLSRecordLayer_, recordLayer)
}

OrgSpongycastleCryptoTlsDTLSTransport *create_OrgSpongycastleCryptoTlsDTLSTransport_initWithOrgSpongycastleCryptoTlsDTLSRecordLayer_(OrgSpongycastleCryptoTlsDTLSRecordLayer *recordLayer) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsDTLSTransport, initWithOrgSpongycastleCryptoTlsDTLSRecordLayer_, recordLayer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsDTLSTransport)
