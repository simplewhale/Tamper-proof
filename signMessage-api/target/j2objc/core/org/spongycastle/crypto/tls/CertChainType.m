//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/CertChainType.java
//

#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/tls/CertChainType.h"

@implementation OrgSpongycastleCryptoTlsCertChainType

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoTlsCertChainType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isValidWithShort:(jshort)certChainType {
  return OrgSpongycastleCryptoTlsCertChainType_isValidWithShort_(certChainType);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isValidWithShort:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "individual_certs", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsCertChainType_individual_certs, 0x19, -1, -1, -1, -1 },
    { "pkipath", "S", .constantValue.asShort = OrgSpongycastleCryptoTlsCertChainType_pkipath, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isValid", "S" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoTlsCertChainType = { "CertChainType", "org.spongycastle.crypto.tls", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoTlsCertChainType;
}

@end

void OrgSpongycastleCryptoTlsCertChainType_init(OrgSpongycastleCryptoTlsCertChainType *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoTlsCertChainType *new_OrgSpongycastleCryptoTlsCertChainType_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoTlsCertChainType, init)
}

OrgSpongycastleCryptoTlsCertChainType *create_OrgSpongycastleCryptoTlsCertChainType_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoTlsCertChainType, init)
}

jboolean OrgSpongycastleCryptoTlsCertChainType_isValidWithShort_(jshort certChainType) {
  OrgSpongycastleCryptoTlsCertChainType_initialize();
  return certChainType >= OrgSpongycastleCryptoTlsCertChainType_individual_certs && certChainType <= OrgSpongycastleCryptoTlsCertChainType_pkipath;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoTlsCertChainType)
