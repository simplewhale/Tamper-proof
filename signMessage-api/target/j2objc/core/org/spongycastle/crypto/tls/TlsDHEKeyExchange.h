//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/TlsDHEKeyExchange.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsDHEKeyExchange")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsTlsDHEKeyExchange
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsDHEKeyExchange 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsDHEKeyExchange 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsTlsDHEKeyExchange

#if !defined (OrgSpongycastleCryptoTlsTlsDHEKeyExchange_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsDHEKeyExchange || defined(INCLUDE_OrgSpongycastleCryptoTlsTlsDHEKeyExchange))
#define OrgSpongycastleCryptoTlsTlsDHEKeyExchange_

#define RESTRICT_OrgSpongycastleCryptoTlsTlsDHKeyExchange 1
#define INCLUDE_OrgSpongycastleCryptoTlsTlsDHKeyExchange 1
#include "org/spongycastle/crypto/tls/TlsDHKeyExchange.h"

@class IOSByteArray;
@class JavaIoInputStream;
@class JavaUtilVector;
@class OrgSpongycastleCryptoParamsDHParameters;
@class OrgSpongycastleCryptoTlsSecurityParameters;
@class OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm;
@protocol OrgSpongycastleCryptoSigner;
@protocol OrgSpongycastleCryptoTlsTlsCredentials;
@protocol OrgSpongycastleCryptoTlsTlsSigner;
@protocol OrgSpongycastleCryptoTlsTlsSignerCredentials;

@interface OrgSpongycastleCryptoTlsTlsDHEKeyExchange : OrgSpongycastleCryptoTlsTlsDHKeyExchange {
 @public
  id<OrgSpongycastleCryptoTlsTlsSignerCredentials> serverCredentials_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)keyExchange
         withJavaUtilVector:(JavaUtilVector *)supportedSignatureAlgorithms
withOrgSpongycastleCryptoParamsDHParameters:(OrgSpongycastleCryptoParamsDHParameters *)dhParameters;

- (IOSByteArray *)generateServerKeyExchange;

- (void)processServerCredentialsWithOrgSpongycastleCryptoTlsTlsCredentials:(id<OrgSpongycastleCryptoTlsTlsCredentials>)serverCredentials;

- (void)processServerKeyExchangeWithJavaIoInputStream:(JavaIoInputStream *)input;

#pragma mark Protected

- (id<OrgSpongycastleCryptoSigner>)initVerifyerWithOrgSpongycastleCryptoTlsTlsSigner:(id<OrgSpongycastleCryptoTlsTlsSigner>)tlsSigner
                               withOrgSpongycastleCryptoTlsSignatureAndHashAlgorithm:(OrgSpongycastleCryptoTlsSignatureAndHashAlgorithm *)algorithm
                                      withOrgSpongycastleCryptoTlsSecurityParameters:(OrgSpongycastleCryptoTlsSecurityParameters *)securityParameters OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsTlsDHEKeyExchange)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoTlsTlsDHEKeyExchange, serverCredentials_, id<OrgSpongycastleCryptoTlsTlsSignerCredentials>)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoParamsDHParameters_(OrgSpongycastleCryptoTlsTlsDHEKeyExchange *self, jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, OrgSpongycastleCryptoParamsDHParameters *dhParameters);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsDHEKeyExchange *new_OrgSpongycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, OrgSpongycastleCryptoParamsDHParameters *dhParameters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsTlsDHEKeyExchange *create_OrgSpongycastleCryptoTlsTlsDHEKeyExchange_initWithInt_withJavaUtilVector_withOrgSpongycastleCryptoParamsDHParameters_(jint keyExchange, JavaUtilVector *supportedSignatureAlgorithms, OrgSpongycastleCryptoParamsDHParameters *dhParameters);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsTlsDHEKeyExchange)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsTlsDHEKeyExchange")
