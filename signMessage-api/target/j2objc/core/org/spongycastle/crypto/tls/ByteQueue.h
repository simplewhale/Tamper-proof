//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/ByteQueue.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsByteQueue")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsByteQueue
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsByteQueue 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsByteQueue 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsByteQueue

#if !defined (OrgSpongycastleCryptoTlsByteQueue_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsByteQueue || defined(INCLUDE_OrgSpongycastleCryptoTlsByteQueue))
#define OrgSpongycastleCryptoTlsByteQueue_

@class IOSByteArray;
@class JavaIoByteArrayInputStream;
@class JavaIoOutputStream;

@interface OrgSpongycastleCryptoTlsByteQueue : NSObject

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithByteArray:(IOSByteArray *)buf
                          withInt:(jint)off
                          withInt:(jint)len;

- (instancetype)initWithInt:(jint)capacity;

- (void)addDataWithByteArray:(IOSByteArray *)buf
                     withInt:(jint)off
                     withInt:(jint)len;

- (jint)available;

- (void)copyToWithJavaIoOutputStream:(JavaIoOutputStream *)output
                             withInt:(jint)length OBJC_METHOD_FAMILY_NONE;

+ (jint)nextTwoPowWithInt:(jint)i;

- (void)readWithByteArray:(IOSByteArray *)buf
                  withInt:(jint)offset
                  withInt:(jint)len
                  withInt:(jint)skip;

- (JavaIoByteArrayInputStream *)readFromWithInt:(jint)length;

- (void)removeDataWithByteArray:(IOSByteArray *)buf
                        withInt:(jint)off
                        withInt:(jint)len
                        withInt:(jint)skip;

- (void)removeDataWithInt:(jint)i;

- (IOSByteArray *)removeDataWithInt:(jint)len
                            withInt:(jint)skip;

- (void)shrink;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsByteQueue)

FOUNDATION_EXPORT jint OrgSpongycastleCryptoTlsByteQueue_nextTwoPowWithInt_(jint i);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsByteQueue_init(OrgSpongycastleCryptoTlsByteQueue *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsByteQueue *new_OrgSpongycastleCryptoTlsByteQueue_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsByteQueue *create_OrgSpongycastleCryptoTlsByteQueue_init(void);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsByteQueue_initWithInt_(OrgSpongycastleCryptoTlsByteQueue *self, jint capacity);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsByteQueue *new_OrgSpongycastleCryptoTlsByteQueue_initWithInt_(jint capacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsByteQueue *create_OrgSpongycastleCryptoTlsByteQueue_initWithInt_(jint capacity);

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsByteQueue_initWithByteArray_withInt_withInt_(OrgSpongycastleCryptoTlsByteQueue *self, IOSByteArray *buf, jint off, jint len);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsByteQueue *new_OrgSpongycastleCryptoTlsByteQueue_initWithByteArray_withInt_withInt_(IOSByteArray *buf, jint off, jint len) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsByteQueue *create_OrgSpongycastleCryptoTlsByteQueue_initWithByteArray_withInt_withInt_(IOSByteArray *buf, jint off, jint len);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsByteQueue)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsByteQueue")
