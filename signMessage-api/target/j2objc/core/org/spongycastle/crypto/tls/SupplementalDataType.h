//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/tls/SupplementalDataType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsSupplementalDataType")
#ifdef RESTRICT_OrgSpongycastleCryptoTlsSupplementalDataType
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsSupplementalDataType 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoTlsSupplementalDataType 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoTlsSupplementalDataType

#if !defined (OrgSpongycastleCryptoTlsSupplementalDataType_) && (INCLUDE_ALL_OrgSpongycastleCryptoTlsSupplementalDataType || defined(INCLUDE_OrgSpongycastleCryptoTlsSupplementalDataType))
#define OrgSpongycastleCryptoTlsSupplementalDataType_

@interface OrgSpongycastleCryptoTlsSupplementalDataType : NSObject

#pragma mark Public

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoTlsSupplementalDataType)

inline jint OrgSpongycastleCryptoTlsSupplementalDataType_get_user_mapping_data(void);
#define OrgSpongycastleCryptoTlsSupplementalDataType_user_mapping_data 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoTlsSupplementalDataType, user_mapping_data, jint)

FOUNDATION_EXPORT void OrgSpongycastleCryptoTlsSupplementalDataType_init(OrgSpongycastleCryptoTlsSupplementalDataType *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsSupplementalDataType *new_OrgSpongycastleCryptoTlsSupplementalDataType_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoTlsSupplementalDataType *create_OrgSpongycastleCryptoTlsSupplementalDataType_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoTlsSupplementalDataType)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoTlsSupplementalDataType")
