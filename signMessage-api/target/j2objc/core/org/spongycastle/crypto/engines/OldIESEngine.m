//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/OldIESEngine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/BasicAgreement.h"
#include "org/spongycastle/crypto/BufferedBlockCipher.h"
#include "org/spongycastle/crypto/DerivationFunction.h"
#include "org/spongycastle/crypto/Mac.h"
#include "org/spongycastle/crypto/engines/IESEngine.h"
#include "org/spongycastle/crypto/engines/OldIESEngine.h"
#include "org/spongycastle/util/Pack.h"

@implementation OrgSpongycastleCryptoEnginesOldIESEngine

- (instancetype)initWithOrgSpongycastleCryptoBasicAgreement:(id<OrgSpongycastleCryptoBasicAgreement>)agree
                withOrgSpongycastleCryptoDerivationFunction:(id<OrgSpongycastleCryptoDerivationFunction>)kdf
                               withOrgSpongycastleCryptoMac:(id<OrgSpongycastleCryptoMac>)mac {
  OrgSpongycastleCryptoEnginesOldIESEngine_initWithOrgSpongycastleCryptoBasicAgreement_withOrgSpongycastleCryptoDerivationFunction_withOrgSpongycastleCryptoMac_(self, agree, kdf, mac);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoBasicAgreement:(id<OrgSpongycastleCryptoBasicAgreement>)agree
                withOrgSpongycastleCryptoDerivationFunction:(id<OrgSpongycastleCryptoDerivationFunction>)kdf
                               withOrgSpongycastleCryptoMac:(id<OrgSpongycastleCryptoMac>)mac
               withOrgSpongycastleCryptoBufferedBlockCipher:(OrgSpongycastleCryptoBufferedBlockCipher *)cipher {
  OrgSpongycastleCryptoEnginesOldIESEngine_initWithOrgSpongycastleCryptoBasicAgreement_withOrgSpongycastleCryptoDerivationFunction_withOrgSpongycastleCryptoMac_withOrgSpongycastleCryptoBufferedBlockCipher_(self, agree, kdf, mac, cipher);
  return self;
}

- (IOSByteArray *)getLengthTagWithByteArray:(IOSByteArray *)p2 {
  IOSByteArray *L2 = [IOSByteArray newArrayWithLength:4];
  if (p2 != nil) {
    OrgSpongycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(p2->size_ * 8, L2, 0);
  }
  return L2;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoBasicAgreement:withOrgSpongycastleCryptoDerivationFunction:withOrgSpongycastleCryptoMac:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoBasicAgreement:withOrgSpongycastleCryptoDerivationFunction:withOrgSpongycastleCryptoMac:withOrgSpongycastleCryptoBufferedBlockCipher:);
  methods[2].selector = @selector(getLengthTagWithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoBasicAgreement;LOrgSpongycastleCryptoDerivationFunction;LOrgSpongycastleCryptoMac;", "LOrgSpongycastleCryptoBasicAgreement;LOrgSpongycastleCryptoDerivationFunction;LOrgSpongycastleCryptoMac;LOrgSpongycastleCryptoBufferedBlockCipher;", "getLengthTag", "[B" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesOldIESEngine = { "OldIESEngine", "org.spongycastle.crypto.engines", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesOldIESEngine;
}

@end

void OrgSpongycastleCryptoEnginesOldIESEngine_initWithOrgSpongycastleCryptoBasicAgreement_withOrgSpongycastleCryptoDerivationFunction_withOrgSpongycastleCryptoMac_(OrgSpongycastleCryptoEnginesOldIESEngine *self, id<OrgSpongycastleCryptoBasicAgreement> agree, id<OrgSpongycastleCryptoDerivationFunction> kdf, id<OrgSpongycastleCryptoMac> mac) {
  OrgSpongycastleCryptoEnginesIESEngine_initWithOrgSpongycastleCryptoBasicAgreement_withOrgSpongycastleCryptoDerivationFunction_withOrgSpongycastleCryptoMac_(self, agree, kdf, mac);
}

OrgSpongycastleCryptoEnginesOldIESEngine *new_OrgSpongycastleCryptoEnginesOldIESEngine_initWithOrgSpongycastleCryptoBasicAgreement_withOrgSpongycastleCryptoDerivationFunction_withOrgSpongycastleCryptoMac_(id<OrgSpongycastleCryptoBasicAgreement> agree, id<OrgSpongycastleCryptoDerivationFunction> kdf, id<OrgSpongycastleCryptoMac> mac) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesOldIESEngine, initWithOrgSpongycastleCryptoBasicAgreement_withOrgSpongycastleCryptoDerivationFunction_withOrgSpongycastleCryptoMac_, agree, kdf, mac)
}

OrgSpongycastleCryptoEnginesOldIESEngine *create_OrgSpongycastleCryptoEnginesOldIESEngine_initWithOrgSpongycastleCryptoBasicAgreement_withOrgSpongycastleCryptoDerivationFunction_withOrgSpongycastleCryptoMac_(id<OrgSpongycastleCryptoBasicAgreement> agree, id<OrgSpongycastleCryptoDerivationFunction> kdf, id<OrgSpongycastleCryptoMac> mac) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesOldIESEngine, initWithOrgSpongycastleCryptoBasicAgreement_withOrgSpongycastleCryptoDerivationFunction_withOrgSpongycastleCryptoMac_, agree, kdf, mac)
}

void OrgSpongycastleCryptoEnginesOldIESEngine_initWithOrgSpongycastleCryptoBasicAgreement_withOrgSpongycastleCryptoDerivationFunction_withOrgSpongycastleCryptoMac_withOrgSpongycastleCryptoBufferedBlockCipher_(OrgSpongycastleCryptoEnginesOldIESEngine *self, id<OrgSpongycastleCryptoBasicAgreement> agree, id<OrgSpongycastleCryptoDerivationFunction> kdf, id<OrgSpongycastleCryptoMac> mac, OrgSpongycastleCryptoBufferedBlockCipher *cipher) {
  OrgSpongycastleCryptoEnginesIESEngine_initWithOrgSpongycastleCryptoBasicAgreement_withOrgSpongycastleCryptoDerivationFunction_withOrgSpongycastleCryptoMac_withOrgSpongycastleCryptoBufferedBlockCipher_(self, agree, kdf, mac, cipher);
}

OrgSpongycastleCryptoEnginesOldIESEngine *new_OrgSpongycastleCryptoEnginesOldIESEngine_initWithOrgSpongycastleCryptoBasicAgreement_withOrgSpongycastleCryptoDerivationFunction_withOrgSpongycastleCryptoMac_withOrgSpongycastleCryptoBufferedBlockCipher_(id<OrgSpongycastleCryptoBasicAgreement> agree, id<OrgSpongycastleCryptoDerivationFunction> kdf, id<OrgSpongycastleCryptoMac> mac, OrgSpongycastleCryptoBufferedBlockCipher *cipher) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesOldIESEngine, initWithOrgSpongycastleCryptoBasicAgreement_withOrgSpongycastleCryptoDerivationFunction_withOrgSpongycastleCryptoMac_withOrgSpongycastleCryptoBufferedBlockCipher_, agree, kdf, mac, cipher)
}

OrgSpongycastleCryptoEnginesOldIESEngine *create_OrgSpongycastleCryptoEnginesOldIESEngine_initWithOrgSpongycastleCryptoBasicAgreement_withOrgSpongycastleCryptoDerivationFunction_withOrgSpongycastleCryptoMac_withOrgSpongycastleCryptoBufferedBlockCipher_(id<OrgSpongycastleCryptoBasicAgreement> agree, id<OrgSpongycastleCryptoDerivationFunction> kdf, id<OrgSpongycastleCryptoMac> mac, OrgSpongycastleCryptoBufferedBlockCipher *cipher) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesOldIESEngine, initWithOrgSpongycastleCryptoBasicAgreement_withOrgSpongycastleCryptoDerivationFunction_withOrgSpongycastleCryptoMac_withOrgSpongycastleCryptoBufferedBlockCipher_, agree, kdf, mac, cipher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesOldIESEngine)
