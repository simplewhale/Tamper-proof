//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/XTEAEngine.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/OutputLengthException.h"
#include "org/spongycastle/crypto/engines/XTEAEngine.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"

@interface OrgSpongycastleCryptoEnginesXTEAEngine () {
 @public
  IOSIntArray *_S_;
  IOSIntArray *_sum0_;
  IOSIntArray *_sum1_;
  jboolean _initialised_;
  jboolean _forEncryption_;
}

- (void)setKeyWithByteArray:(IOSByteArray *)key;

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (jint)bytesToIntWithByteArray:(IOSByteArray *)inArg
                        withInt:(jint)inOff;

- (void)unpackIntWithInt:(jint)v
           withByteArray:(IOSByteArray *)outArg
                 withInt:(jint)outOff;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesXTEAEngine, _S_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesXTEAEngine, _sum0_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesXTEAEngine, _sum1_, IOSIntArray *)

inline jint OrgSpongycastleCryptoEnginesXTEAEngine_get_rounds(void);
#define OrgSpongycastleCryptoEnginesXTEAEngine_rounds 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoEnginesXTEAEngine, rounds, jint)

inline jint OrgSpongycastleCryptoEnginesXTEAEngine_get_block_size(void);
#define OrgSpongycastleCryptoEnginesXTEAEngine_block_size 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoEnginesXTEAEngine, block_size, jint)

inline jint OrgSpongycastleCryptoEnginesXTEAEngine_get_delta(void);
#define OrgSpongycastleCryptoEnginesXTEAEngine_delta -1640531527
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoEnginesXTEAEngine, delta, jint)

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesXTEAEngine_setKeyWithByteArray_(OrgSpongycastleCryptoEnginesXTEAEngine *self, IOSByteArray *key);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesXTEAEngine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesXTEAEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesXTEAEngine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesXTEAEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesXTEAEngine_bytesToIntWithByteArray_withInt_(OrgSpongycastleCryptoEnginesXTEAEngine *self, IOSByteArray *inArg, jint inOff);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesXTEAEngine_unpackIntWithInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesXTEAEngine *self, jint v, IOSByteArray *outArg, jint outOff);

@implementation OrgSpongycastleCryptoEnginesXTEAEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesXTEAEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getAlgorithmName {
  return @"XTEA";
}

- (jint)getBlockSize {
  return OrgSpongycastleCryptoEnginesXTEAEngine_block_size;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  if (!([params isKindOfClass:[OrgSpongycastleCryptoParamsKeyParameter class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid parameter passed to TEA init - ", [[((id<OrgSpongycastleCryptoCipherParameters>) nil_chk(params)) java_getClass] getName]));
  }
  _forEncryption_ = forEncryption;
  _initialised_ = true;
  OrgSpongycastleCryptoParamsKeyParameter *p = (OrgSpongycastleCryptoParamsKeyParameter *) cast_chk(params, [OrgSpongycastleCryptoParamsKeyParameter class]);
  OrgSpongycastleCryptoEnginesXTEAEngine_setKeyWithByteArray_(self, [((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(p)) getKey]);
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (!_initialised_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", [self getAlgorithmName], @" not initialised"));
  }
  if ((inOff + OrgSpongycastleCryptoEnginesXTEAEngine_block_size) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + OrgSpongycastleCryptoEnginesXTEAEngine_block_size) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  return (_forEncryption_) ? OrgSpongycastleCryptoEnginesXTEAEngine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff) : OrgSpongycastleCryptoEnginesXTEAEngine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (void)reset {
}

- (void)setKeyWithByteArray:(IOSByteArray *)key {
  OrgSpongycastleCryptoEnginesXTEAEngine_setKeyWithByteArray_(self, key);
}

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return OrgSpongycastleCryptoEnginesXTEAEngine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return OrgSpongycastleCryptoEnginesXTEAEngine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (jint)bytesToIntWithByteArray:(IOSByteArray *)inArg
                        withInt:(jint)inOff {
  return OrgSpongycastleCryptoEnginesXTEAEngine_bytesToIntWithByteArray_withInt_(self, inArg, inOff);
}

- (void)unpackIntWithInt:(jint)v
           withByteArray:(IOSByteArray *)outArg
                 withInt:(jint)outOff {
  OrgSpongycastleCryptoEnginesXTEAEngine_unpackIntWithInt_withByteArray_withInt_(self, v, outArg, outOff);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAlgorithmName);
  methods[2].selector = @selector(getBlockSize);
  methods[3].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(setKeyWithByteArray:);
  methods[7].selector = @selector(encryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[8].selector = @selector(decryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[9].selector = @selector(bytesToIntWithByteArray:withInt:);
  methods[10].selector = @selector(unpackIntWithInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rounds", "I", .constantValue.asInt = OrgSpongycastleCryptoEnginesXTEAEngine_rounds, 0x1a, -1, -1, -1, -1 },
    { "block_size", "I", .constantValue.asInt = OrgSpongycastleCryptoEnginesXTEAEngine_block_size, 0x1a, -1, -1, -1, -1 },
    { "delta", "I", .constantValue.asInt = OrgSpongycastleCryptoEnginesXTEAEngine_delta, 0x1a, -1, -1, -1, -1 },
    { "_S_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sum0_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_sum1_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_initialised_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;", "processBlock", "[BI[BI", "setKey", "[B", "encryptBlock", "decryptBlock", "bytesToInt", "[BI", "unpackInt", "I[BI" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesXTEAEngine = { "XTEAEngine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 11, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesXTEAEngine;
}

@end

void OrgSpongycastleCryptoEnginesXTEAEngine_init(OrgSpongycastleCryptoEnginesXTEAEngine *self) {
  NSObject_init(self);
  self->_S_ = [IOSIntArray newArrayWithLength:4];
  self->_sum0_ = [IOSIntArray newArrayWithLength:32];
  self->_sum1_ = [IOSIntArray newArrayWithLength:32];
  self->_initialised_ = false;
}

OrgSpongycastleCryptoEnginesXTEAEngine *new_OrgSpongycastleCryptoEnginesXTEAEngine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesXTEAEngine, init)
}

OrgSpongycastleCryptoEnginesXTEAEngine *create_OrgSpongycastleCryptoEnginesXTEAEngine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesXTEAEngine, init)
}

void OrgSpongycastleCryptoEnginesXTEAEngine_setKeyWithByteArray_(OrgSpongycastleCryptoEnginesXTEAEngine *self, IOSByteArray *key) {
  if (((IOSByteArray *) nil_chk(key))->size_ != 16) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Key size must be 128 bits.");
  }
  jint i;
  jint j;
  for (i = j = 0; i < 4; i++, j += 4) {
    *IOSIntArray_GetRef(nil_chk(self->_S_), i) = OrgSpongycastleCryptoEnginesXTEAEngine_bytesToIntWithByteArray_withInt_(self, key, j);
  }
  for (i = j = 0; i < OrgSpongycastleCryptoEnginesXTEAEngine_rounds; i++) {
    *IOSIntArray_GetRef(nil_chk(self->_sum0_), i) = (j + IOSIntArray_Get(nil_chk(self->_S_), j & 3));
    j += OrgSpongycastleCryptoEnginesXTEAEngine_delta;
    *IOSIntArray_GetRef(nil_chk(self->_sum1_), i) = (j + IOSIntArray_Get(self->_S_, (JreURShift32(j, 11)) & 3));
  }
}

jint OrgSpongycastleCryptoEnginesXTEAEngine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesXTEAEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  jint v0 = OrgSpongycastleCryptoEnginesXTEAEngine_bytesToIntWithByteArray_withInt_(self, inArg, inOff);
  jint v1 = OrgSpongycastleCryptoEnginesXTEAEngine_bytesToIntWithByteArray_withInt_(self, inArg, inOff + 4);
  for (jint i = 0; i < OrgSpongycastleCryptoEnginesXTEAEngine_rounds; i++) {
    v0 += ((JreLShift32(v1, 4) ^ JreURShift32(v1, 5)) + v1) ^ IOSIntArray_Get(nil_chk(self->_sum0_), i);
    v1 += ((JreLShift32(v0, 4) ^ JreURShift32(v0, 5)) + v0) ^ IOSIntArray_Get(nil_chk(self->_sum1_), i);
  }
  OrgSpongycastleCryptoEnginesXTEAEngine_unpackIntWithInt_withByteArray_withInt_(self, v0, outArg, outOff);
  OrgSpongycastleCryptoEnginesXTEAEngine_unpackIntWithInt_withByteArray_withInt_(self, v1, outArg, outOff + 4);
  return OrgSpongycastleCryptoEnginesXTEAEngine_block_size;
}

jint OrgSpongycastleCryptoEnginesXTEAEngine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesXTEAEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  jint v0 = OrgSpongycastleCryptoEnginesXTEAEngine_bytesToIntWithByteArray_withInt_(self, inArg, inOff);
  jint v1 = OrgSpongycastleCryptoEnginesXTEAEngine_bytesToIntWithByteArray_withInt_(self, inArg, inOff + 4);
  for (jint i = OrgSpongycastleCryptoEnginesXTEAEngine_rounds - 1; i >= 0; i--) {
    v1 -= ((JreLShift32(v0, 4) ^ JreURShift32(v0, 5)) + v0) ^ IOSIntArray_Get(nil_chk(self->_sum1_), i);
    v0 -= ((JreLShift32(v1, 4) ^ JreURShift32(v1, 5)) + v1) ^ IOSIntArray_Get(nil_chk(self->_sum0_), i);
  }
  OrgSpongycastleCryptoEnginesXTEAEngine_unpackIntWithInt_withByteArray_withInt_(self, v0, outArg, outOff);
  OrgSpongycastleCryptoEnginesXTEAEngine_unpackIntWithInt_withByteArray_withInt_(self, v1, outArg, outOff + 4);
  return OrgSpongycastleCryptoEnginesXTEAEngine_block_size;
}

jint OrgSpongycastleCryptoEnginesXTEAEngine_bytesToIntWithByteArray_withInt_(OrgSpongycastleCryptoEnginesXTEAEngine *self, IOSByteArray *inArg, jint inOff) {
  jint unseq$1 = inOff++;
  jint unseq$2 = inOff++;
  jint unseq$3 = inOff++;
  return (JreLShift32((IOSByteArray_Get(nil_chk(inArg), unseq$1)), 24)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$2) & 255), 16)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$3) & 255), 8)) | ((IOSByteArray_Get(inArg, inOff) & 255));
}

void OrgSpongycastleCryptoEnginesXTEAEngine_unpackIntWithInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesXTEAEngine *self, jint v, IOSByteArray *outArg, jint outOff) {
  *IOSByteArray_GetRef(nil_chk(outArg), outOff++) = (jbyte) (JreURShift32(v, 24));
  *IOSByteArray_GetRef(outArg, outOff++) = (jbyte) (JreURShift32(v, 16));
  *IOSByteArray_GetRef(outArg, outOff++) = (jbyte) (JreURShift32(v, 8));
  *IOSByteArray_GetRef(outArg, outOff) = (jbyte) v;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesXTEAEngine)
