//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/SkipjackEngine.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoEnginesSkipjackEngine")
#ifdef RESTRICT_OrgSpongycastleCryptoEnginesSkipjackEngine
#define INCLUDE_ALL_OrgSpongycastleCryptoEnginesSkipjackEngine 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoEnginesSkipjackEngine 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoEnginesSkipjackEngine

#if !defined (OrgSpongycastleCryptoEnginesSkipjackEngine_) && (INCLUDE_ALL_OrgSpongycastleCryptoEnginesSkipjackEngine || defined(INCLUDE_OrgSpongycastleCryptoEnginesSkipjackEngine))
#define OrgSpongycastleCryptoEnginesSkipjackEngine_

#define RESTRICT_OrgSpongycastleCryptoBlockCipher 1
#define INCLUDE_OrgSpongycastleCryptoBlockCipher 1
#include "org/spongycastle/crypto/BlockCipher.h"

@class IOSByteArray;
@class IOSShortArray;
@protocol OrgSpongycastleCryptoCipherParameters;

@interface OrgSpongycastleCryptoEnginesSkipjackEngine : NSObject < OrgSpongycastleCryptoBlockCipher >

#pragma mark Public

- (instancetype)init;

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (NSString *)getAlgorithmName;

- (jint)getBlockSize;

- (void)init__WithBoolean:(jboolean)encrypting
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (void)reset;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleCryptoEnginesSkipjackEngine)

inline jint OrgSpongycastleCryptoEnginesSkipjackEngine_get_BLOCK_SIZE(void);
#define OrgSpongycastleCryptoEnginesSkipjackEngine_BLOCK_SIZE 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoEnginesSkipjackEngine, BLOCK_SIZE, jint)

inline IOSShortArray *OrgSpongycastleCryptoEnginesSkipjackEngine_get_ftable(void);
inline IOSShortArray *OrgSpongycastleCryptoEnginesSkipjackEngine_set_ftable(IOSShortArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSShortArray *OrgSpongycastleCryptoEnginesSkipjackEngine_ftable;
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastleCryptoEnginesSkipjackEngine, ftable, IOSShortArray *)

FOUNDATION_EXPORT void OrgSpongycastleCryptoEnginesSkipjackEngine_init(OrgSpongycastleCryptoEnginesSkipjackEngine *self);

FOUNDATION_EXPORT OrgSpongycastleCryptoEnginesSkipjackEngine *new_OrgSpongycastleCryptoEnginesSkipjackEngine_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCryptoEnginesSkipjackEngine *create_OrgSpongycastleCryptoEnginesSkipjackEngine_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoEnginesSkipjackEngine)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoEnginesSkipjackEngine")
