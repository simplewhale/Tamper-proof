//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/SkipjackEngine.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/OutputLengthException.h"
#include "org/spongycastle/crypto/engines/SkipjackEngine.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"

@interface OrgSpongycastleCryptoEnginesSkipjackEngine () {
 @public
  IOSIntArray *key0_;
  IOSIntArray *key1_;
  IOSIntArray *key2_;
  IOSIntArray *key3_;
  jboolean encrypting_;
}

- (jint)gWithInt:(jint)k
         withInt:(jint)w;

- (jint)hWithInt:(jint)k
         withInt:(jint)w;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesSkipjackEngine, key0_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesSkipjackEngine, key1_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesSkipjackEngine, key2_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesSkipjackEngine, key3_, IOSIntArray *)

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesSkipjackEngine_gWithInt_withInt_(OrgSpongycastleCryptoEnginesSkipjackEngine *self, jint k, jint w);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesSkipjackEngine_hWithInt_withInt_(OrgSpongycastleCryptoEnginesSkipjackEngine *self, jint k, jint w);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoEnginesSkipjackEngine)

IOSShortArray *OrgSpongycastleCryptoEnginesSkipjackEngine_ftable;

@implementation OrgSpongycastleCryptoEnginesSkipjackEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesSkipjackEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)encrypting
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  if (!([params isKindOfClass:[OrgSpongycastleCryptoParamsKeyParameter class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid parameter passed to SKIPJACK init - ", [[((id<OrgSpongycastleCryptoCipherParameters>) nil_chk(params)) java_getClass] getName]));
  }
  IOSByteArray *keyBytes = [((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(((OrgSpongycastleCryptoParamsKeyParameter *) cast_chk(params, [OrgSpongycastleCryptoParamsKeyParameter class])))) getKey];
  self->encrypting_ = encrypting;
  self->key0_ = [IOSIntArray newArrayWithLength:32];
  self->key1_ = [IOSIntArray newArrayWithLength:32];
  self->key2_ = [IOSIntArray newArrayWithLength:32];
  self->key3_ = [IOSIntArray newArrayWithLength:32];
  for (jint i = 0; i < 32; i++) {
    *IOSIntArray_GetRef(key0_, i) = IOSByteArray_Get(nil_chk(keyBytes), (i * 4) % 10) & (jint) 0xff;
    *IOSIntArray_GetRef(key1_, i) = IOSByteArray_Get(keyBytes, (i * 4 + 1) % 10) & (jint) 0xff;
    *IOSIntArray_GetRef(key2_, i) = IOSByteArray_Get(keyBytes, (i * 4 + 2) % 10) & (jint) 0xff;
    *IOSIntArray_GetRef(key3_, i) = IOSByteArray_Get(keyBytes, (i * 4 + 3) % 10) & (jint) 0xff;
  }
}

- (NSString *)getAlgorithmName {
  return @"SKIPJACK";
}

- (jint)getBlockSize {
  return OrgSpongycastleCryptoEnginesSkipjackEngine_BLOCK_SIZE;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (key1_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"SKIPJACK engine not initialised");
  }
  if ((inOff + OrgSpongycastleCryptoEnginesSkipjackEngine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + OrgSpongycastleCryptoEnginesSkipjackEngine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  if (encrypting_) {
    [self encryptBlockWithByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff];
  }
  else {
    [self decryptBlockWithByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff];
  }
  return OrgSpongycastleCryptoEnginesSkipjackEngine_BLOCK_SIZE;
}

- (void)reset {
}

- (jint)gWithInt:(jint)k
         withInt:(jint)w {
  return OrgSpongycastleCryptoEnginesSkipjackEngine_gWithInt_withInt_(self, k, w);
}

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  jint w1 = (JreLShift32(IOSByteArray_Get(nil_chk(inArg), inOff + 0), 8)) + (IOSByteArray_Get(inArg, inOff + 1) & (jint) 0xff);
  jint w2 = (JreLShift32(IOSByteArray_Get(inArg, inOff + 2), 8)) + (IOSByteArray_Get(inArg, inOff + 3) & (jint) 0xff);
  jint w3 = (JreLShift32(IOSByteArray_Get(inArg, inOff + 4), 8)) + (IOSByteArray_Get(inArg, inOff + 5) & (jint) 0xff);
  jint w4 = (JreLShift32(IOSByteArray_Get(inArg, inOff + 6), 8)) + (IOSByteArray_Get(inArg, inOff + 7) & (jint) 0xff);
  jint k = 0;
  for (jint t = 0; t < 2; t++) {
    for (jint i = 0; i < 8; i++) {
      jint tmp = w4;
      w4 = w3;
      w3 = w2;
      w2 = OrgSpongycastleCryptoEnginesSkipjackEngine_gWithInt_withInt_(self, k, w1);
      w1 = w2 ^ tmp ^ (k + 1);
      k++;
    }
    for (jint i = 0; i < 8; i++) {
      jint tmp = w4;
      w4 = w3;
      w3 = w1 ^ w2 ^ (k + 1);
      w2 = OrgSpongycastleCryptoEnginesSkipjackEngine_gWithInt_withInt_(self, k, w1);
      w1 = tmp;
      k++;
    }
  }
  *IOSByteArray_GetRef(nil_chk(outArg), outOff + 0) = (jbyte) ((JreRShift32(w1, 8)));
  *IOSByteArray_GetRef(outArg, outOff + 1) = (jbyte) (w1);
  *IOSByteArray_GetRef(outArg, outOff + 2) = (jbyte) ((JreRShift32(w2, 8)));
  *IOSByteArray_GetRef(outArg, outOff + 3) = (jbyte) (w2);
  *IOSByteArray_GetRef(outArg, outOff + 4) = (jbyte) ((JreRShift32(w3, 8)));
  *IOSByteArray_GetRef(outArg, outOff + 5) = (jbyte) (w3);
  *IOSByteArray_GetRef(outArg, outOff + 6) = (jbyte) ((JreRShift32(w4, 8)));
  *IOSByteArray_GetRef(outArg, outOff + 7) = (jbyte) (w4);
  return OrgSpongycastleCryptoEnginesSkipjackEngine_BLOCK_SIZE;
}

- (jint)hWithInt:(jint)k
         withInt:(jint)w {
  return OrgSpongycastleCryptoEnginesSkipjackEngine_hWithInt_withInt_(self, k, w);
}

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  jint w2 = (JreLShift32(IOSByteArray_Get(nil_chk(inArg), inOff + 0), 8)) + (IOSByteArray_Get(inArg, inOff + 1) & (jint) 0xff);
  jint w1 = (JreLShift32(IOSByteArray_Get(inArg, inOff + 2), 8)) + (IOSByteArray_Get(inArg, inOff + 3) & (jint) 0xff);
  jint w4 = (JreLShift32(IOSByteArray_Get(inArg, inOff + 4), 8)) + (IOSByteArray_Get(inArg, inOff + 5) & (jint) 0xff);
  jint w3 = (JreLShift32(IOSByteArray_Get(inArg, inOff + 6), 8)) + (IOSByteArray_Get(inArg, inOff + 7) & (jint) 0xff);
  jint k = 31;
  for (jint t = 0; t < 2; t++) {
    for (jint i = 0; i < 8; i++) {
      jint tmp = w4;
      w4 = w3;
      w3 = w2;
      w2 = OrgSpongycastleCryptoEnginesSkipjackEngine_hWithInt_withInt_(self, k, w1);
      w1 = w2 ^ tmp ^ (k + 1);
      k--;
    }
    for (jint i = 0; i < 8; i++) {
      jint tmp = w4;
      w4 = w3;
      w3 = w1 ^ w2 ^ (k + 1);
      w2 = OrgSpongycastleCryptoEnginesSkipjackEngine_hWithInt_withInt_(self, k, w1);
      w1 = tmp;
      k--;
    }
  }
  *IOSByteArray_GetRef(nil_chk(outArg), outOff + 0) = (jbyte) ((JreRShift32(w2, 8)));
  *IOSByteArray_GetRef(outArg, outOff + 1) = (jbyte) (w2);
  *IOSByteArray_GetRef(outArg, outOff + 2) = (jbyte) ((JreRShift32(w1, 8)));
  *IOSByteArray_GetRef(outArg, outOff + 3) = (jbyte) (w1);
  *IOSByteArray_GetRef(outArg, outOff + 4) = (jbyte) ((JreRShift32(w4, 8)));
  *IOSByteArray_GetRef(outArg, outOff + 5) = (jbyte) (w4);
  *IOSByteArray_GetRef(outArg, outOff + 6) = (jbyte) ((JreRShift32(w3, 8)));
  *IOSByteArray_GetRef(outArg, outOff + 7) = (jbyte) (w3);
  return OrgSpongycastleCryptoEnginesSkipjackEngine_BLOCK_SIZE;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(getBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(gWithInt:withInt:);
  methods[7].selector = @selector(encryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[8].selector = @selector(hWithInt:withInt:);
  methods[9].selector = @selector(decryptBlockWithByteArray:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BLOCK_SIZE", "I", .constantValue.asInt = OrgSpongycastleCryptoEnginesSkipjackEngine_BLOCK_SIZE, 0x18, -1, -1, -1, -1 },
    { "ftable", "[S", .constantValue.asLong = 0, 0x8, -1, 9, -1, -1 },
    { "key0_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key1_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key2_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key3_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encrypting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;", "processBlock", "[BI[BI", "g", "II", "encryptBlock", "h", "decryptBlock", &OrgSpongycastleCryptoEnginesSkipjackEngine_ftable };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesSkipjackEngine = { "SkipjackEngine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 10, 7, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesSkipjackEngine;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoEnginesSkipjackEngine class]) {
    OrgSpongycastleCryptoEnginesSkipjackEngine_ftable = [IOSShortArray newArrayWithShorts:(jshort[]){ (jint) 0xa3, (jint) 0xd7, (jint) 0x09, (jint) 0x83, (jint) 0xf8, (jint) 0x48, (jint) 0xf6, (jint) 0xf4, (jint) 0xb3, (jint) 0x21, (jint) 0x15, (jint) 0x78, (jint) 0x99, (jint) 0xb1, (jint) 0xaf, (jint) 0xf9, (jint) 0xe7, (jint) 0x2d, (jint) 0x4d, (jint) 0x8a, (jint) 0xce, (jint) 0x4c, (jint) 0xca, (jint) 0x2e, (jint) 0x52, (jint) 0x95, (jint) 0xd9, (jint) 0x1e, (jint) 0x4e, (jint) 0x38, (jint) 0x44, (jint) 0x28, (jint) 0x0a, (jint) 0xdf, (jint) 0x02, (jint) 0xa0, (jint) 0x17, (jint) 0xf1, (jint) 0x60, (jint) 0x68, (jint) 0x12, (jint) 0xb7, (jint) 0x7a, (jint) 0xc3, (jint) 0xe9, (jint) 0xfa, (jint) 0x3d, (jint) 0x53, (jint) 0x96, (jint) 0x84, (jint) 0x6b, (jint) 0xba, (jint) 0xf2, (jint) 0x63, (jint) 0x9a, (jint) 0x19, (jint) 0x7c, (jint) 0xae, (jint) 0xe5, (jint) 0xf5, (jint) 0xf7, (jint) 0x16, (jint) 0x6a, (jint) 0xa2, (jint) 0x39, (jint) 0xb6, (jint) 0x7b, (jint) 0x0f, (jint) 0xc1, (jint) 0x93, (jint) 0x81, (jint) 0x1b, (jint) 0xee, (jint) 0xb4, (jint) 0x1a, (jint) 0xea, (jint) 0xd0, (jint) 0x91, (jint) 0x2f, (jint) 0xb8, (jint) 0x55, (jint) 0xb9, (jint) 0xda, (jint) 0x85, (jint) 0x3f, (jint) 0x41, (jint) 0xbf, (jint) 0xe0, (jint) 0x5a, (jint) 0x58, (jint) 0x80, (jint) 0x5f, (jint) 0x66, (jint) 0x0b, (jint) 0xd8, (jint) 0x90, (jint) 0x35, (jint) 0xd5, (jint) 0xc0, (jint) 0xa7, (jint) 0x33, (jint) 0x06, (jint) 0x65, (jint) 0x69, (jint) 0x45, (jint) 0x00, (jint) 0x94, (jint) 0x56, (jint) 0x6d, (jint) 0x98, (jint) 0x9b, (jint) 0x76, (jint) 0x97, (jint) 0xfc, (jint) 0xb2, (jint) 0xc2, (jint) 0xb0, (jint) 0xfe, (jint) 0xdb, (jint) 0x20, (jint) 0xe1, (jint) 0xeb, (jint) 0xd6, (jint) 0xe4, (jint) 0xdd, (jint) 0x47, (jint) 0x4a, (jint) 0x1d, (jint) 0x42, (jint) 0xed, (jint) 0x9e, (jint) 0x6e, (jint) 0x49, (jint) 0x3c, (jint) 0xcd, (jint) 0x43, (jint) 0x27, (jint) 0xd2, (jint) 0x07, (jint) 0xd4, (jint) 0xde, (jint) 0xc7, (jint) 0x67, (jint) 0x18, (jint) 0x89, (jint) 0xcb, (jint) 0x30, (jint) 0x1f, (jint) 0x8d, (jint) 0xc6, (jint) 0x8f, (jint) 0xaa, (jint) 0xc8, (jint) 0x74, (jint) 0xdc, (jint) 0xc9, (jint) 0x5d, (jint) 0x5c, (jint) 0x31, (jint) 0xa4, (jint) 0x70, (jint) 0x88, (jint) 0x61, (jint) 0x2c, (jint) 0x9f, (jint) 0x0d, (jint) 0x2b, (jint) 0x87, (jint) 0x50, (jint) 0x82, (jint) 0x54, (jint) 0x64, (jint) 0x26, (jint) 0x7d, (jint) 0x03, (jint) 0x40, (jint) 0x34, (jint) 0x4b, (jint) 0x1c, (jint) 0x73, (jint) 0xd1, (jint) 0xc4, (jint) 0xfd, (jint) 0x3b, (jint) 0xcc, (jint) 0xfb, (jint) 0x7f, (jint) 0xab, (jint) 0xe6, (jint) 0x3e, (jint) 0x5b, (jint) 0xa5, (jint) 0xad, (jint) 0x04, (jint) 0x23, (jint) 0x9c, (jint) 0x14, (jint) 0x51, (jint) 0x22, (jint) 0xf0, (jint) 0x29, (jint) 0x79, (jint) 0x71, (jint) 0x7e, (jint) 0xff, (jint) 0x8c, (jint) 0x0e, (jint) 0xe2, (jint) 0x0c, (jint) 0xef, (jint) 0xbc, (jint) 0x72, (jint) 0x75, (jint) 0x6f, (jint) 0x37, (jint) 0xa1, (jint) 0xec, (jint) 0xd3, (jint) 0x8e, (jint) 0x62, (jint) 0x8b, (jint) 0x86, (jint) 0x10, (jint) 0xe8, (jint) 0x08, (jint) 0x77, (jint) 0x11, (jint) 0xbe, (jint) 0x92, (jint) 0x4f, (jint) 0x24, (jint) 0xc5, (jint) 0x32, (jint) 0x36, (jint) 0x9d, (jint) 0xcf, (jint) 0xf3, (jint) 0xa6, (jint) 0xbb, (jint) 0xac, (jint) 0x5e, (jint) 0x6c, (jint) 0xa9, (jint) 0x13, (jint) 0x57, (jint) 0x25, (jint) 0xb5, (jint) 0xe3, (jint) 0xbd, (jint) 0xa8, (jint) 0x3a, (jint) 0x01, (jint) 0x05, (jint) 0x59, (jint) 0x2a, (jint) 0x46 } count:256];
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoEnginesSkipjackEngine)
  }
}

@end

void OrgSpongycastleCryptoEnginesSkipjackEngine_init(OrgSpongycastleCryptoEnginesSkipjackEngine *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoEnginesSkipjackEngine *new_OrgSpongycastleCryptoEnginesSkipjackEngine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesSkipjackEngine, init)
}

OrgSpongycastleCryptoEnginesSkipjackEngine *create_OrgSpongycastleCryptoEnginesSkipjackEngine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesSkipjackEngine, init)
}

jint OrgSpongycastleCryptoEnginesSkipjackEngine_gWithInt_withInt_(OrgSpongycastleCryptoEnginesSkipjackEngine *self, jint k, jint w) {
  jint g1;
  jint g2;
  jint g3;
  jint g4;
  jint g5;
  jint g6;
  g1 = (JreRShift32(w, 8)) & (jint) 0xff;
  g2 = w & (jint) 0xff;
  g3 = IOSShortArray_Get(nil_chk(OrgSpongycastleCryptoEnginesSkipjackEngine_ftable), g2 ^ IOSIntArray_Get(nil_chk(self->key0_), k)) ^ g1;
  g4 = IOSShortArray_Get(OrgSpongycastleCryptoEnginesSkipjackEngine_ftable, g3 ^ IOSIntArray_Get(nil_chk(self->key1_), k)) ^ g2;
  g5 = IOSShortArray_Get(OrgSpongycastleCryptoEnginesSkipjackEngine_ftable, g4 ^ IOSIntArray_Get(nil_chk(self->key2_), k)) ^ g3;
  g6 = IOSShortArray_Get(OrgSpongycastleCryptoEnginesSkipjackEngine_ftable, g5 ^ IOSIntArray_Get(nil_chk(self->key3_), k)) ^ g4;
  return ((JreLShift32(g5, 8)) + g6);
}

jint OrgSpongycastleCryptoEnginesSkipjackEngine_hWithInt_withInt_(OrgSpongycastleCryptoEnginesSkipjackEngine *self, jint k, jint w) {
  jint h1;
  jint h2;
  jint h3;
  jint h4;
  jint h5;
  jint h6;
  h1 = w & (jint) 0xff;
  h2 = (JreRShift32(w, 8)) & (jint) 0xff;
  h3 = IOSShortArray_Get(nil_chk(OrgSpongycastleCryptoEnginesSkipjackEngine_ftable), h2 ^ IOSIntArray_Get(nil_chk(self->key3_), k)) ^ h1;
  h4 = IOSShortArray_Get(OrgSpongycastleCryptoEnginesSkipjackEngine_ftable, h3 ^ IOSIntArray_Get(nil_chk(self->key2_), k)) ^ h2;
  h5 = IOSShortArray_Get(OrgSpongycastleCryptoEnginesSkipjackEngine_ftable, h4 ^ IOSIntArray_Get(nil_chk(self->key1_), k)) ^ h3;
  h6 = IOSShortArray_Get(OrgSpongycastleCryptoEnginesSkipjackEngine_ftable, h5 ^ IOSIntArray_Get(nil_chk(self->key0_), k)) ^ h4;
  return ((JreLShift32(h6, 8)) + h5);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesSkipjackEngine)
