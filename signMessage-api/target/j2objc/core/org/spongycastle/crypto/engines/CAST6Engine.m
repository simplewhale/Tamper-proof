//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/CAST6Engine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/engines/CAST5Engine.h"
#include "org/spongycastle/crypto/engines/CAST6Engine.h"

@interface OrgSpongycastleCryptoEnginesCAST6Engine () {
 @public
  IOSIntArray *_workingKey_CAST6Engine_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesCAST6Engine, _workingKey_CAST6Engine_, IOSIntArray *)

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesCAST6Engine_CAST_EncipherWithInt_withInt_withInt_withInt_withIntArray_(OrgSpongycastleCryptoEnginesCAST6Engine *self, jint A, jint B, jint C, jint D, IOSIntArray *result);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesCAST6Engine_CAST_DecipherWithInt_withInt_withInt_withInt_withIntArray_(OrgSpongycastleCryptoEnginesCAST6Engine *self, jint A, jint B, jint C, jint D, IOSIntArray *result);

@implementation OrgSpongycastleCryptoEnginesCAST6Engine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesCAST6Engine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getAlgorithmName {
  return @"CAST6";
}

- (void)reset {
}

- (jint)getBlockSize {
  return OrgSpongycastleCryptoEnginesCAST6Engine_BLOCK_SIZE;
}

- (void)setKeyWithByteArray:(IOSByteArray *)key {
  jint Cm = (jint) 0x5a827999;
  jint Mm = (jint) 0x6ed9eba1;
  jint Cr = 19;
  jint Mr = 17;
  for (jint i = 0; i < 24; i++) {
    for (jint j = 0; j < 8; j++) {
      *IOSIntArray_GetRef(nil_chk(_Tm_), i * 8 + j) = Cm;
      Cm = (Cm + Mm);
      *IOSIntArray_GetRef(nil_chk(_Tr_), i * 8 + j) = Cr;
      Cr = (Cr + Mr) & (jint) 0x1f;
    }
  }
  IOSByteArray *tmpKey = [IOSByteArray newArrayWithLength:64];
  jint length = ((IOSByteArray *) nil_chk(key))->size_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(key, 0, tmpKey, 0, length);
  for (jint i = 0; i < 8; i++) {
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), i) = [self BytesTo32bitsWithByteArray:tmpKey withInt:i * 4];
  }
  for (jint i = 0; i < 12; i++) {
    jint i2 = i * 2 * 8;
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 6) ^= [self F1WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 7) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2)];
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 5) ^= [self F2WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 6) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2 + 1) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2 + 1)];
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 4) ^= [self F3WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 5) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2 + 2) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2 + 2)];
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 3) ^= [self F1WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 4) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2 + 3) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2 + 3)];
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 2) ^= [self F2WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 3) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2 + 4) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2 + 4)];
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 1) ^= [self F3WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 2) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2 + 5) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2 + 5)];
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 0) ^= [self F1WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 1) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2 + 6) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2 + 6)];
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 7) ^= [self F2WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 0) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2 + 7) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2 + 7)];
    i2 = (i * 2 + 1) * 8;
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 6) ^= [self F1WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 7) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2)];
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 5) ^= [self F2WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 6) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2 + 1) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2 + 1)];
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 4) ^= [self F3WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 5) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2 + 2) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2 + 2)];
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 3) ^= [self F1WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 4) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2 + 3) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2 + 3)];
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 2) ^= [self F2WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 3) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2 + 4) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2 + 4)];
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 1) ^= [self F3WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 2) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2 + 5) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2 + 5)];
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 0) ^= [self F1WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 1) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2 + 6) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2 + 6)];
    *IOSIntArray_GetRef(nil_chk(_workingKey_CAST6Engine_), 7) ^= [self F2WithInt:IOSIntArray_Get(_workingKey_CAST6Engine_, 0) withInt:IOSIntArray_Get(nil_chk(_Tm_), i2 + 7) withInt:IOSIntArray_Get(nil_chk(_Tr_), i2 + 7)];
    *IOSIntArray_GetRef(nil_chk(_Kr_CAST6Engine_), i * 4) = IOSIntArray_Get(nil_chk(_workingKey_CAST6Engine_), 0) & (jint) 0x1f;
    *IOSIntArray_GetRef(_Kr_CAST6Engine_, i * 4 + 1) = IOSIntArray_Get(_workingKey_CAST6Engine_, 2) & (jint) 0x1f;
    *IOSIntArray_GetRef(_Kr_CAST6Engine_, i * 4 + 2) = IOSIntArray_Get(_workingKey_CAST6Engine_, 4) & (jint) 0x1f;
    *IOSIntArray_GetRef(_Kr_CAST6Engine_, i * 4 + 3) = IOSIntArray_Get(_workingKey_CAST6Engine_, 6) & (jint) 0x1f;
    *IOSIntArray_GetRef(nil_chk(_Km_CAST6Engine_), i * 4) = IOSIntArray_Get(_workingKey_CAST6Engine_, 7);
    *IOSIntArray_GetRef(_Km_CAST6Engine_, i * 4 + 1) = IOSIntArray_Get(_workingKey_CAST6Engine_, 5);
    *IOSIntArray_GetRef(_Km_CAST6Engine_, i * 4 + 2) = IOSIntArray_Get(_workingKey_CAST6Engine_, 3);
    *IOSIntArray_GetRef(_Km_CAST6Engine_, i * 4 + 3) = IOSIntArray_Get(_workingKey_CAST6Engine_, 1);
  }
}

- (jint)encryptBlockWithByteArray:(IOSByteArray *)src
                          withInt:(jint)srcIndex
                    withByteArray:(IOSByteArray *)dst
                          withInt:(jint)dstIndex {
  IOSIntArray *result = [IOSIntArray newArrayWithLength:4];
  jint A = [self BytesTo32bitsWithByteArray:src withInt:srcIndex];
  jint B = [self BytesTo32bitsWithByteArray:src withInt:srcIndex + 4];
  jint C = [self BytesTo32bitsWithByteArray:src withInt:srcIndex + 8];
  jint D = [self BytesTo32bitsWithByteArray:src withInt:srcIndex + 12];
  OrgSpongycastleCryptoEnginesCAST6Engine_CAST_EncipherWithInt_withInt_withInt_withInt_withIntArray_(self, A, B, C, D, result);
  [self Bits32ToBytesWithInt:IOSIntArray_Get(result, 0) withByteArray:dst withInt:dstIndex];
  [self Bits32ToBytesWithInt:IOSIntArray_Get(result, 1) withByteArray:dst withInt:dstIndex + 4];
  [self Bits32ToBytesWithInt:IOSIntArray_Get(result, 2) withByteArray:dst withInt:dstIndex + 8];
  [self Bits32ToBytesWithInt:IOSIntArray_Get(result, 3) withByteArray:dst withInt:dstIndex + 12];
  return OrgSpongycastleCryptoEnginesCAST6Engine_BLOCK_SIZE;
}

- (jint)decryptBlockWithByteArray:(IOSByteArray *)src
                          withInt:(jint)srcIndex
                    withByteArray:(IOSByteArray *)dst
                          withInt:(jint)dstIndex {
  IOSIntArray *result = [IOSIntArray newArrayWithLength:4];
  jint A = [self BytesTo32bitsWithByteArray:src withInt:srcIndex];
  jint B = [self BytesTo32bitsWithByteArray:src withInt:srcIndex + 4];
  jint C = [self BytesTo32bitsWithByteArray:src withInt:srcIndex + 8];
  jint D = [self BytesTo32bitsWithByteArray:src withInt:srcIndex + 12];
  OrgSpongycastleCryptoEnginesCAST6Engine_CAST_DecipherWithInt_withInt_withInt_withInt_withIntArray_(self, A, B, C, D, result);
  [self Bits32ToBytesWithInt:IOSIntArray_Get(result, 0) withByteArray:dst withInt:dstIndex];
  [self Bits32ToBytesWithInt:IOSIntArray_Get(result, 1) withByteArray:dst withInt:dstIndex + 4];
  [self Bits32ToBytesWithInt:IOSIntArray_Get(result, 2) withByteArray:dst withInt:dstIndex + 8];
  [self Bits32ToBytesWithInt:IOSIntArray_Get(result, 3) withByteArray:dst withInt:dstIndex + 12];
  return OrgSpongycastleCryptoEnginesCAST6Engine_BLOCK_SIZE;
}

- (void)CAST_EncipherWithInt:(jint)A
                     withInt:(jint)B
                     withInt:(jint)C
                     withInt:(jint)D
                withIntArray:(IOSIntArray *)result {
  OrgSpongycastleCryptoEnginesCAST6Engine_CAST_EncipherWithInt_withInt_withInt_withInt_withIntArray_(self, A, B, C, D, result);
}

- (void)CAST_DecipherWithInt:(jint)A
                     withInt:(jint)B
                     withInt:(jint)C
                     withInt:(jint)D
                withIntArray:(IOSIntArray *)result {
  OrgSpongycastleCryptoEnginesCAST6Engine_CAST_DecipherWithInt_withInt_withInt_withInt_withIntArray_(self, A, B, C, D, result);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 7, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAlgorithmName);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(getBlockSize);
  methods[4].selector = @selector(setKeyWithByteArray:);
  methods[5].selector = @selector(encryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[6].selector = @selector(decryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[7].selector = @selector(CAST_EncipherWithInt:withInt:withInt:withInt:withIntArray:);
  methods[8].selector = @selector(CAST_DecipherWithInt:withInt:withInt:withInt:withIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ROUNDS", "I", .constantValue.asInt = OrgSpongycastleCryptoEnginesCAST6Engine_ROUNDS, 0x1c, -1, -1, -1, -1 },
    { "BLOCK_SIZE", "I", .constantValue.asInt = OrgSpongycastleCryptoEnginesCAST6Engine_BLOCK_SIZE, 0x1c, -1, -1, -1, -1 },
    { "_Kr_CAST6Engine_", "[I", .constantValue.asLong = 0, 0x4, 8, -1, -1, -1 },
    { "_Km_CAST6Engine_", "[I", .constantValue.asLong = 0, 0x4, 9, -1, -1, -1 },
    { "_Tr_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_Tm_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_workingKey_CAST6Engine_", "[I", .constantValue.asLong = 0, 0x2, 10, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setKey", "[B", "encryptBlock", "[BI[BI", "decryptBlock", "CAST_Encipher", "IIII[I", "CAST_Decipher", "_Kr", "_Km", "_workingKey" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesCAST6Engine = { "CAST6Engine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x11, 9, 7, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesCAST6Engine;
}

@end

void OrgSpongycastleCryptoEnginesCAST6Engine_init(OrgSpongycastleCryptoEnginesCAST6Engine *self) {
  OrgSpongycastleCryptoEnginesCAST5Engine_init(self);
  self->_Kr_CAST6Engine_ = [IOSIntArray newArrayWithLength:OrgSpongycastleCryptoEnginesCAST6Engine_ROUNDS * 4];
  self->_Km_CAST6Engine_ = [IOSIntArray newArrayWithLength:OrgSpongycastleCryptoEnginesCAST6Engine_ROUNDS * 4];
  self->_Tr_ = [IOSIntArray newArrayWithLength:24 * 8];
  self->_Tm_ = [IOSIntArray newArrayWithLength:24 * 8];
  self->_workingKey_CAST6Engine_ = [IOSIntArray newArrayWithLength:8];
}

OrgSpongycastleCryptoEnginesCAST6Engine *new_OrgSpongycastleCryptoEnginesCAST6Engine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesCAST6Engine, init)
}

OrgSpongycastleCryptoEnginesCAST6Engine *create_OrgSpongycastleCryptoEnginesCAST6Engine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesCAST6Engine, init)
}

void OrgSpongycastleCryptoEnginesCAST6Engine_CAST_EncipherWithInt_withInt_withInt_withInt_withIntArray_(OrgSpongycastleCryptoEnginesCAST6Engine *self, jint A, jint B, jint C, jint D, IOSIntArray *result) {
  jint x;
  for (jint i = 0; i < 6; i++) {
    x = i * 4;
    C ^= [self F1WithInt:D withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x)];
    B ^= [self F2WithInt:C withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x + 1) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x + 1)];
    A ^= [self F3WithInt:B withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x + 2) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x + 2)];
    D ^= [self F1WithInt:A withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x + 3) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x + 3)];
  }
  for (jint i = 6; i < 12; i++) {
    x = i * 4;
    D ^= [self F1WithInt:A withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x + 3) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x + 3)];
    A ^= [self F3WithInt:B withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x + 2) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x + 2)];
    B ^= [self F2WithInt:C withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x + 1) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x + 1)];
    C ^= [self F1WithInt:D withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x)];
  }
  *IOSIntArray_GetRef(nil_chk(result), 0) = A;
  *IOSIntArray_GetRef(result, 1) = B;
  *IOSIntArray_GetRef(result, 2) = C;
  *IOSIntArray_GetRef(result, 3) = D;
}

void OrgSpongycastleCryptoEnginesCAST6Engine_CAST_DecipherWithInt_withInt_withInt_withInt_withIntArray_(OrgSpongycastleCryptoEnginesCAST6Engine *self, jint A, jint B, jint C, jint D, IOSIntArray *result) {
  jint x;
  for (jint i = 0; i < 6; i++) {
    x = (11 - i) * 4;
    C ^= [self F1WithInt:D withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x)];
    B ^= [self F2WithInt:C withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x + 1) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x + 1)];
    A ^= [self F3WithInt:B withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x + 2) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x + 2)];
    D ^= [self F1WithInt:A withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x + 3) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x + 3)];
  }
  for (jint i = 6; i < 12; i++) {
    x = (11 - i) * 4;
    D ^= [self F1WithInt:A withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x + 3) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x + 3)];
    A ^= [self F3WithInt:B withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x + 2) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x + 2)];
    B ^= [self F2WithInt:C withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x + 1) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x + 1)];
    C ^= [self F1WithInt:D withInt:IOSIntArray_Get(nil_chk(self->_Km_CAST6Engine_), x) withInt:IOSIntArray_Get(nil_chk(self->_Kr_CAST6Engine_), x)];
  }
  *IOSIntArray_GetRef(nil_chk(result), 0) = A;
  *IOSIntArray_GetRef(result, 1) = B;
  *IOSIntArray_GetRef(result, 2) = C;
  *IOSIntArray_GetRef(result, 3) = D;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesCAST6Engine)
