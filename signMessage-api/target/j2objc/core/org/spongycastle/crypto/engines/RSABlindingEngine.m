//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/RSABlindingEngine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/engines/RSABlindingEngine.h"
#include "org/spongycastle/crypto/engines/RSACoreEngine.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/crypto/params/RSABlindingParameters.h"
#include "org/spongycastle/crypto/params/RSAKeyParameters.h"

@interface OrgSpongycastleCryptoEnginesRSABlindingEngine () {
 @public
  OrgSpongycastleCryptoEnginesRSACoreEngine *core_;
  OrgSpongycastleCryptoParamsRSAKeyParameters *key_;
  JavaMathBigInteger *blindingFactor_;
  jboolean forEncryption_;
}

- (JavaMathBigInteger *)blindMessageWithJavaMathBigInteger:(JavaMathBigInteger *)msg;

- (JavaMathBigInteger *)unblindMessageWithJavaMathBigInteger:(JavaMathBigInteger *)blindedMsg;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesRSABlindingEngine, core_, OrgSpongycastleCryptoEnginesRSACoreEngine *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesRSABlindingEngine, key_, OrgSpongycastleCryptoParamsRSAKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesRSABlindingEngine, blindingFactor_, JavaMathBigInteger *)

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleCryptoEnginesRSABlindingEngine_blindMessageWithJavaMathBigInteger_(OrgSpongycastleCryptoEnginesRSABlindingEngine *self, JavaMathBigInteger *msg);

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleCryptoEnginesRSABlindingEngine_unblindMessageWithJavaMathBigInteger_(OrgSpongycastleCryptoEnginesRSABlindingEngine *self, JavaMathBigInteger *blindedMsg);

@implementation OrgSpongycastleCryptoEnginesRSABlindingEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesRSABlindingEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  OrgSpongycastleCryptoParamsRSABlindingParameters *p;
  if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
    OrgSpongycastleCryptoParamsParametersWithRandom *rParam = (OrgSpongycastleCryptoParamsParametersWithRandom *) param;
    p = (OrgSpongycastleCryptoParamsRSABlindingParameters *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getParameters], [OrgSpongycastleCryptoParamsRSABlindingParameters class]);
  }
  else {
    p = (OrgSpongycastleCryptoParamsRSABlindingParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsRSABlindingParameters class]);
  }
  [((OrgSpongycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) init__WithBoolean:forEncryption withOrgSpongycastleCryptoCipherParameters:[((OrgSpongycastleCryptoParamsRSABlindingParameters *) nil_chk(p)) getPublicKey]];
  self->forEncryption_ = forEncryption;
  self->key_ = [p getPublicKey];
  self->blindingFactor_ = [p getBlindingFactor];
}

- (jint)getInputBlockSize {
  return [((OrgSpongycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) getInputBlockSize];
}

- (jint)getOutputBlockSize {
  return [((OrgSpongycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) getOutputBlockSize];
}

- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen {
  JavaMathBigInteger *msg = [((OrgSpongycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) convertInputWithByteArray:inArg withInt:inOff withInt:inLen];
  if (forEncryption_) {
    msg = OrgSpongycastleCryptoEnginesRSABlindingEngine_blindMessageWithJavaMathBigInteger_(self, msg);
  }
  else {
    msg = OrgSpongycastleCryptoEnginesRSABlindingEngine_unblindMessageWithJavaMathBigInteger_(self, msg);
  }
  return [((OrgSpongycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) convertOutputWithJavaMathBigInteger:msg];
}

- (JavaMathBigInteger *)blindMessageWithJavaMathBigInteger:(JavaMathBigInteger *)msg {
  return OrgSpongycastleCryptoEnginesRSABlindingEngine_blindMessageWithJavaMathBigInteger_(self, msg);
}

- (JavaMathBigInteger *)unblindMessageWithJavaMathBigInteger:(JavaMathBigInteger *)blindedMsg {
  return OrgSpongycastleCryptoEnginesRSABlindingEngine_unblindMessageWithJavaMathBigInteger_(self, blindedMsg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, 6, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getInputBlockSize);
  methods[3].selector = @selector(getOutputBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(blindMessageWithJavaMathBigInteger:);
  methods[6].selector = @selector(unblindMessageWithJavaMathBigInteger:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "core_", "LOrgSpongycastleCryptoEnginesRSACoreEngine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "LOrgSpongycastleCryptoParamsRSAKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blindingFactor_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;", "processBlock", "[BII", "blindMessage", "LJavaMathBigInteger;", "unblindMessage" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesRSABlindingEngine = { "RSABlindingEngine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 7, 4, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesRSABlindingEngine;
}

@end

void OrgSpongycastleCryptoEnginesRSABlindingEngine_init(OrgSpongycastleCryptoEnginesRSABlindingEngine *self) {
  NSObject_init(self);
  self->core_ = new_OrgSpongycastleCryptoEnginesRSACoreEngine_init();
}

OrgSpongycastleCryptoEnginesRSABlindingEngine *new_OrgSpongycastleCryptoEnginesRSABlindingEngine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesRSABlindingEngine, init)
}

OrgSpongycastleCryptoEnginesRSABlindingEngine *create_OrgSpongycastleCryptoEnginesRSABlindingEngine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesRSABlindingEngine, init)
}

JavaMathBigInteger *OrgSpongycastleCryptoEnginesRSABlindingEngine_blindMessageWithJavaMathBigInteger_(OrgSpongycastleCryptoEnginesRSABlindingEngine *self, JavaMathBigInteger *msg) {
  JavaMathBigInteger *blindMsg = self->blindingFactor_;
  blindMsg = [((JavaMathBigInteger *) nil_chk(msg)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(blindMsg)) modPowWithJavaMathBigInteger:[((OrgSpongycastleCryptoParamsRSAKeyParameters *) nil_chk(self->key_)) getExponent] withJavaMathBigInteger:[((OrgSpongycastleCryptoParamsRSAKeyParameters *) nil_chk(self->key_)) getModulus]]];
  blindMsg = [((JavaMathBigInteger *) nil_chk(blindMsg)) modWithJavaMathBigInteger:[((OrgSpongycastleCryptoParamsRSAKeyParameters *) nil_chk(self->key_)) getModulus]];
  return blindMsg;
}

JavaMathBigInteger *OrgSpongycastleCryptoEnginesRSABlindingEngine_unblindMessageWithJavaMathBigInteger_(OrgSpongycastleCryptoEnginesRSABlindingEngine *self, JavaMathBigInteger *blindedMsg) {
  JavaMathBigInteger *m = [((OrgSpongycastleCryptoParamsRSAKeyParameters *) nil_chk(self->key_)) getModulus];
  JavaMathBigInteger *msg = blindedMsg;
  JavaMathBigInteger *blindFactorInverse = [((JavaMathBigInteger *) nil_chk(self->blindingFactor_)) modInverseWithJavaMathBigInteger:m];
  msg = [((JavaMathBigInteger *) nil_chk(msg)) multiplyWithJavaMathBigInteger:blindFactorInverse];
  msg = [((JavaMathBigInteger *) nil_chk(msg)) modWithJavaMathBigInteger:m];
  return msg;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesRSABlindingEngine)
