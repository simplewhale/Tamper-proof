//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/NoekeonEngine.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/OutputLengthException.h"
#include "org/spongycastle/crypto/engines/NoekeonEngine.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"

@interface OrgSpongycastleCryptoEnginesNoekeonEngine () {
 @public
  IOSIntArray *state_;
  IOSIntArray *subKeys_;
  IOSIntArray *decryptKeys_;
  jboolean _initialised_;
  jboolean _forEncryption_;
}

- (void)setKeyWithByteArray:(IOSByteArray *)key;

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (void)gammaWithIntArray:(IOSIntArray *)a;

- (void)thetaWithIntArray:(IOSIntArray *)a
             withIntArray:(IOSIntArray *)k;

- (void)pi1WithIntArray:(IOSIntArray *)a;

- (void)pi2WithIntArray:(IOSIntArray *)a;

- (jint)bytesToIntBigWithByteArray:(IOSByteArray *)inArg
                           withInt:(jint)off;

- (void)intToBytesBigWithInt:(jint)x
               withByteArray:(IOSByteArray *)outArg
                     withInt:(jint)off;

- (jint)rotlWithInt:(jint)x
            withInt:(jint)y;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesNoekeonEngine, state_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesNoekeonEngine, subKeys_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesNoekeonEngine, decryptKeys_, IOSIntArray *)

inline jint OrgSpongycastleCryptoEnginesNoekeonEngine_get_genericSize(void);
#define OrgSpongycastleCryptoEnginesNoekeonEngine_genericSize 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoEnginesNoekeonEngine, genericSize, jint)

inline IOSIntArray *OrgSpongycastleCryptoEnginesNoekeonEngine_get_nullVector(void);
static IOSIntArray *OrgSpongycastleCryptoEnginesNoekeonEngine_nullVector;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesNoekeonEngine, nullVector, IOSIntArray *)

inline IOSIntArray *OrgSpongycastleCryptoEnginesNoekeonEngine_get_roundConstants(void);
static IOSIntArray *OrgSpongycastleCryptoEnginesNoekeonEngine_roundConstants;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesNoekeonEngine, roundConstants, IOSIntArray *)

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesNoekeonEngine_setKeyWithByteArray_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSByteArray *key);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesNoekeonEngine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesNoekeonEngine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesNoekeonEngine_gammaWithIntArray_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSIntArray *a);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesNoekeonEngine_thetaWithIntArray_withIntArray_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSIntArray *a, IOSIntArray *k);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesNoekeonEngine_pi1WithIntArray_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSIntArray *a);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesNoekeonEngine_pi2WithIntArray_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSIntArray *a);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesNoekeonEngine_bytesToIntBigWithByteArray_withInt_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSByteArray *inArg, jint off);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesNoekeonEngine_intToBytesBigWithInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, jint x, IOSByteArray *outArg, jint off);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesNoekeonEngine_rotlWithInt_withInt_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, jint x, jint y);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoEnginesNoekeonEngine)

@implementation OrgSpongycastleCryptoEnginesNoekeonEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesNoekeonEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getAlgorithmName {
  return @"Noekeon";
}

- (jint)getBlockSize {
  return OrgSpongycastleCryptoEnginesNoekeonEngine_genericSize;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  if (!([params isKindOfClass:[OrgSpongycastleCryptoParamsKeyParameter class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid parameter passed to Noekeon init - ", [[((id<OrgSpongycastleCryptoCipherParameters>) nil_chk(params)) java_getClass] getName]));
  }
  _forEncryption_ = forEncryption;
  _initialised_ = true;
  OrgSpongycastleCryptoParamsKeyParameter *p = (OrgSpongycastleCryptoParamsKeyParameter *) cast_chk(params, [OrgSpongycastleCryptoParamsKeyParameter class]);
  OrgSpongycastleCryptoEnginesNoekeonEngine_setKeyWithByteArray_(self, [((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(p)) getKey]);
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (!_initialised_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", [self getAlgorithmName], @" not initialised"));
  }
  if ((inOff + OrgSpongycastleCryptoEnginesNoekeonEngine_genericSize) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + OrgSpongycastleCryptoEnginesNoekeonEngine_genericSize) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  return (_forEncryption_) ? OrgSpongycastleCryptoEnginesNoekeonEngine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff) : OrgSpongycastleCryptoEnginesNoekeonEngine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (void)reset {
}

- (void)setKeyWithByteArray:(IOSByteArray *)key {
  OrgSpongycastleCryptoEnginesNoekeonEngine_setKeyWithByteArray_(self, key);
}

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return OrgSpongycastleCryptoEnginesNoekeonEngine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return OrgSpongycastleCryptoEnginesNoekeonEngine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (void)gammaWithIntArray:(IOSIntArray *)a {
  OrgSpongycastleCryptoEnginesNoekeonEngine_gammaWithIntArray_(self, a);
}

- (void)thetaWithIntArray:(IOSIntArray *)a
             withIntArray:(IOSIntArray *)k {
  OrgSpongycastleCryptoEnginesNoekeonEngine_thetaWithIntArray_withIntArray_(self, a, k);
}

- (void)pi1WithIntArray:(IOSIntArray *)a {
  OrgSpongycastleCryptoEnginesNoekeonEngine_pi1WithIntArray_(self, a);
}

- (void)pi2WithIntArray:(IOSIntArray *)a {
  OrgSpongycastleCryptoEnginesNoekeonEngine_pi2WithIntArray_(self, a);
}

- (jint)bytesToIntBigWithByteArray:(IOSByteArray *)inArg
                           withInt:(jint)off {
  return OrgSpongycastleCryptoEnginesNoekeonEngine_bytesToIntBigWithByteArray_withInt_(self, inArg, off);
}

- (void)intToBytesBigWithInt:(jint)x
               withByteArray:(IOSByteArray *)outArg
                     withInt:(jint)off {
  OrgSpongycastleCryptoEnginesNoekeonEngine_intToBytesBigWithInt_withByteArray_withInt_(self, x, outArg, off);
}

- (jint)rotlWithInt:(jint)x
            withInt:(jint)y {
  return OrgSpongycastleCryptoEnginesNoekeonEngine_rotlWithInt_withInt_(self, x, y);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 18, 19, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAlgorithmName);
  methods[2].selector = @selector(getBlockSize);
  methods[3].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(setKeyWithByteArray:);
  methods[7].selector = @selector(encryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[8].selector = @selector(decryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[9].selector = @selector(gammaWithIntArray:);
  methods[10].selector = @selector(thetaWithIntArray:withIntArray:);
  methods[11].selector = @selector(pi1WithIntArray:);
  methods[12].selector = @selector(pi2WithIntArray:);
  methods[13].selector = @selector(bytesToIntBigWithByteArray:withInt:);
  methods[14].selector = @selector(intToBytesBigWithInt:withByteArray:withInt:);
  methods[15].selector = @selector(rotlWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "genericSize", "I", .constantValue.asInt = OrgSpongycastleCryptoEnginesNoekeonEngine_genericSize, 0x1a, -1, -1, -1, -1 },
    { "nullVector", "[I", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "roundConstants", "[I", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "state_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "subKeys_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "decryptKeys_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_initialised_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;", "processBlock", "[BI[BI", "setKey", "[B", "encryptBlock", "decryptBlock", "gamma", "[I", "theta", "[I[I", "pi1", "pi2", "bytesToIntBig", "[BI", "intToBytesBig", "I[BI", "rotl", "II", &OrgSpongycastleCryptoEnginesNoekeonEngine_nullVector, &OrgSpongycastleCryptoEnginesNoekeonEngine_roundConstants };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesNoekeonEngine = { "NoekeonEngine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 16, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesNoekeonEngine;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoEnginesNoekeonEngine class]) {
    OrgSpongycastleCryptoEnginesNoekeonEngine_nullVector = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x00, (jint) 0x00, (jint) 0x00, (jint) 0x00 } count:4];
    OrgSpongycastleCryptoEnginesNoekeonEngine_roundConstants = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x80, (jint) 0x1b, (jint) 0x36, (jint) 0x6c, (jint) 0xd8, (jint) 0xab, (jint) 0x4d, (jint) 0x9a, (jint) 0x2f, (jint) 0x5e, (jint) 0xbc, (jint) 0x63, (jint) 0xc6, (jint) 0x97, (jint) 0x35, (jint) 0x6a, (jint) 0xd4 } count:17];
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoEnginesNoekeonEngine)
  }
}

@end

void OrgSpongycastleCryptoEnginesNoekeonEngine_init(OrgSpongycastleCryptoEnginesNoekeonEngine *self) {
  NSObject_init(self);
  self->state_ = [IOSIntArray newArrayWithLength:4];
  self->subKeys_ = [IOSIntArray newArrayWithLength:4];
  self->decryptKeys_ = [IOSIntArray newArrayWithLength:4];
  self->_initialised_ = false;
}

OrgSpongycastleCryptoEnginesNoekeonEngine *new_OrgSpongycastleCryptoEnginesNoekeonEngine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesNoekeonEngine, init)
}

OrgSpongycastleCryptoEnginesNoekeonEngine *create_OrgSpongycastleCryptoEnginesNoekeonEngine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesNoekeonEngine, init)
}

void OrgSpongycastleCryptoEnginesNoekeonEngine_setKeyWithByteArray_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSByteArray *key) {
  *IOSIntArray_GetRef(nil_chk(self->subKeys_), 0) = OrgSpongycastleCryptoEnginesNoekeonEngine_bytesToIntBigWithByteArray_withInt_(self, key, 0);
  *IOSIntArray_GetRef(nil_chk(self->subKeys_), 1) = OrgSpongycastleCryptoEnginesNoekeonEngine_bytesToIntBigWithByteArray_withInt_(self, key, 4);
  *IOSIntArray_GetRef(nil_chk(self->subKeys_), 2) = OrgSpongycastleCryptoEnginesNoekeonEngine_bytesToIntBigWithByteArray_withInt_(self, key, 8);
  *IOSIntArray_GetRef(nil_chk(self->subKeys_), 3) = OrgSpongycastleCryptoEnginesNoekeonEngine_bytesToIntBigWithByteArray_withInt_(self, key, 12);
}

jint OrgSpongycastleCryptoEnginesNoekeonEngine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  *IOSIntArray_GetRef(nil_chk(self->state_), 0) = OrgSpongycastleCryptoEnginesNoekeonEngine_bytesToIntBigWithByteArray_withInt_(self, inArg, inOff);
  *IOSIntArray_GetRef(nil_chk(self->state_), 1) = OrgSpongycastleCryptoEnginesNoekeonEngine_bytesToIntBigWithByteArray_withInt_(self, inArg, inOff + 4);
  *IOSIntArray_GetRef(nil_chk(self->state_), 2) = OrgSpongycastleCryptoEnginesNoekeonEngine_bytesToIntBigWithByteArray_withInt_(self, inArg, inOff + 8);
  *IOSIntArray_GetRef(nil_chk(self->state_), 3) = OrgSpongycastleCryptoEnginesNoekeonEngine_bytesToIntBigWithByteArray_withInt_(self, inArg, inOff + 12);
  jint i;
  for (i = 0; i < OrgSpongycastleCryptoEnginesNoekeonEngine_genericSize; i++) {
    *IOSIntArray_GetRef(nil_chk(self->state_), 0) ^= IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoEnginesNoekeonEngine_roundConstants), i);
    OrgSpongycastleCryptoEnginesNoekeonEngine_thetaWithIntArray_withIntArray_(self, self->state_, self->subKeys_);
    OrgSpongycastleCryptoEnginesNoekeonEngine_pi1WithIntArray_(self, self->state_);
    OrgSpongycastleCryptoEnginesNoekeonEngine_gammaWithIntArray_(self, self->state_);
    OrgSpongycastleCryptoEnginesNoekeonEngine_pi2WithIntArray_(self, self->state_);
  }
  *IOSIntArray_GetRef(nil_chk(self->state_), 0) ^= IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoEnginesNoekeonEngine_roundConstants), i);
  OrgSpongycastleCryptoEnginesNoekeonEngine_thetaWithIntArray_withIntArray_(self, self->state_, self->subKeys_);
  OrgSpongycastleCryptoEnginesNoekeonEngine_intToBytesBigWithInt_withByteArray_withInt_(self, IOSIntArray_Get(nil_chk(self->state_), 0), outArg, outOff);
  OrgSpongycastleCryptoEnginesNoekeonEngine_intToBytesBigWithInt_withByteArray_withInt_(self, IOSIntArray_Get(nil_chk(self->state_), 1), outArg, outOff + 4);
  OrgSpongycastleCryptoEnginesNoekeonEngine_intToBytesBigWithInt_withByteArray_withInt_(self, IOSIntArray_Get(nil_chk(self->state_), 2), outArg, outOff + 8);
  OrgSpongycastleCryptoEnginesNoekeonEngine_intToBytesBigWithInt_withByteArray_withInt_(self, IOSIntArray_Get(nil_chk(self->state_), 3), outArg, outOff + 12);
  return OrgSpongycastleCryptoEnginesNoekeonEngine_genericSize;
}

jint OrgSpongycastleCryptoEnginesNoekeonEngine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  *IOSIntArray_GetRef(nil_chk(self->state_), 0) = OrgSpongycastleCryptoEnginesNoekeonEngine_bytesToIntBigWithByteArray_withInt_(self, inArg, inOff);
  *IOSIntArray_GetRef(nil_chk(self->state_), 1) = OrgSpongycastleCryptoEnginesNoekeonEngine_bytesToIntBigWithByteArray_withInt_(self, inArg, inOff + 4);
  *IOSIntArray_GetRef(nil_chk(self->state_), 2) = OrgSpongycastleCryptoEnginesNoekeonEngine_bytesToIntBigWithByteArray_withInt_(self, inArg, inOff + 8);
  *IOSIntArray_GetRef(nil_chk(self->state_), 3) = OrgSpongycastleCryptoEnginesNoekeonEngine_bytesToIntBigWithByteArray_withInt_(self, inArg, inOff + 12);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->subKeys_, 0, self->decryptKeys_, 0, ((IOSIntArray *) nil_chk(self->subKeys_))->size_);
  OrgSpongycastleCryptoEnginesNoekeonEngine_thetaWithIntArray_withIntArray_(self, self->decryptKeys_, OrgSpongycastleCryptoEnginesNoekeonEngine_nullVector);
  jint i;
  for (i = OrgSpongycastleCryptoEnginesNoekeonEngine_genericSize; i > 0; i--) {
    OrgSpongycastleCryptoEnginesNoekeonEngine_thetaWithIntArray_withIntArray_(self, self->state_, self->decryptKeys_);
    *IOSIntArray_GetRef(nil_chk(self->state_), 0) ^= IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoEnginesNoekeonEngine_roundConstants), i);
    OrgSpongycastleCryptoEnginesNoekeonEngine_pi1WithIntArray_(self, self->state_);
    OrgSpongycastleCryptoEnginesNoekeonEngine_gammaWithIntArray_(self, self->state_);
    OrgSpongycastleCryptoEnginesNoekeonEngine_pi2WithIntArray_(self, self->state_);
  }
  OrgSpongycastleCryptoEnginesNoekeonEngine_thetaWithIntArray_withIntArray_(self, self->state_, self->decryptKeys_);
  *IOSIntArray_GetRef(nil_chk(self->state_), 0) ^= IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoEnginesNoekeonEngine_roundConstants), i);
  OrgSpongycastleCryptoEnginesNoekeonEngine_intToBytesBigWithInt_withByteArray_withInt_(self, IOSIntArray_Get(self->state_, 0), outArg, outOff);
  OrgSpongycastleCryptoEnginesNoekeonEngine_intToBytesBigWithInt_withByteArray_withInt_(self, IOSIntArray_Get(nil_chk(self->state_), 1), outArg, outOff + 4);
  OrgSpongycastleCryptoEnginesNoekeonEngine_intToBytesBigWithInt_withByteArray_withInt_(self, IOSIntArray_Get(nil_chk(self->state_), 2), outArg, outOff + 8);
  OrgSpongycastleCryptoEnginesNoekeonEngine_intToBytesBigWithInt_withByteArray_withInt_(self, IOSIntArray_Get(nil_chk(self->state_), 3), outArg, outOff + 12);
  return OrgSpongycastleCryptoEnginesNoekeonEngine_genericSize;
}

void OrgSpongycastleCryptoEnginesNoekeonEngine_gammaWithIntArray_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSIntArray *a) {
  *IOSIntArray_GetRef(nil_chk(a), 1) ^= ~IOSIntArray_Get(a, 3) & ~IOSIntArray_Get(a, 2);
  *IOSIntArray_GetRef(a, 0) ^= IOSIntArray_Get(a, 2) & IOSIntArray_Get(a, 1);
  jint tmp = IOSIntArray_Get(a, 3);
  *IOSIntArray_GetRef(a, 3) = IOSIntArray_Get(a, 0);
  *IOSIntArray_GetRef(a, 0) = tmp;
  *IOSIntArray_GetRef(a, 2) ^= IOSIntArray_Get(a, 0) ^ IOSIntArray_Get(a, 1) ^ IOSIntArray_Get(a, 3);
  *IOSIntArray_GetRef(a, 1) ^= ~IOSIntArray_Get(a, 3) & ~IOSIntArray_Get(a, 2);
  *IOSIntArray_GetRef(a, 0) ^= IOSIntArray_Get(a, 2) & IOSIntArray_Get(a, 1);
}

void OrgSpongycastleCryptoEnginesNoekeonEngine_thetaWithIntArray_withIntArray_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSIntArray *a, IOSIntArray *k) {
  jint tmp;
  tmp = IOSIntArray_Get(nil_chk(a), 0) ^ IOSIntArray_Get(a, 2);
  tmp ^= OrgSpongycastleCryptoEnginesNoekeonEngine_rotlWithInt_withInt_(self, tmp, 8) ^ OrgSpongycastleCryptoEnginesNoekeonEngine_rotlWithInt_withInt_(self, tmp, 24);
  *IOSIntArray_GetRef(a, 1) ^= tmp;
  *IOSIntArray_GetRef(a, 3) ^= tmp;
  for (jint i = 0; i < 4; i++) {
    *IOSIntArray_GetRef(a, i) ^= IOSIntArray_Get(nil_chk(k), i);
  }
  tmp = IOSIntArray_Get(a, 1) ^ IOSIntArray_Get(a, 3);
  tmp ^= OrgSpongycastleCryptoEnginesNoekeonEngine_rotlWithInt_withInt_(self, tmp, 8) ^ OrgSpongycastleCryptoEnginesNoekeonEngine_rotlWithInt_withInt_(self, tmp, 24);
  *IOSIntArray_GetRef(a, 0) ^= tmp;
  *IOSIntArray_GetRef(a, 2) ^= tmp;
}

void OrgSpongycastleCryptoEnginesNoekeonEngine_pi1WithIntArray_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSIntArray *a) {
  *IOSIntArray_GetRef(nil_chk(a), 1) = OrgSpongycastleCryptoEnginesNoekeonEngine_rotlWithInt_withInt_(self, IOSIntArray_Get(a, 1), 1);
  *IOSIntArray_GetRef(a, 2) = OrgSpongycastleCryptoEnginesNoekeonEngine_rotlWithInt_withInt_(self, IOSIntArray_Get(a, 2), 5);
  *IOSIntArray_GetRef(a, 3) = OrgSpongycastleCryptoEnginesNoekeonEngine_rotlWithInt_withInt_(self, IOSIntArray_Get(a, 3), 2);
}

void OrgSpongycastleCryptoEnginesNoekeonEngine_pi2WithIntArray_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSIntArray *a) {
  *IOSIntArray_GetRef(nil_chk(a), 1) = OrgSpongycastleCryptoEnginesNoekeonEngine_rotlWithInt_withInt_(self, IOSIntArray_Get(a, 1), 31);
  *IOSIntArray_GetRef(a, 2) = OrgSpongycastleCryptoEnginesNoekeonEngine_rotlWithInt_withInt_(self, IOSIntArray_Get(a, 2), 27);
  *IOSIntArray_GetRef(a, 3) = OrgSpongycastleCryptoEnginesNoekeonEngine_rotlWithInt_withInt_(self, IOSIntArray_Get(a, 3), 30);
}

jint OrgSpongycastleCryptoEnginesNoekeonEngine_bytesToIntBigWithByteArray_withInt_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, IOSByteArray *inArg, jint off) {
  jint unseq$1 = off++;
  jint unseq$2 = off++;
  jint unseq$3 = off++;
  return (JreLShift32((IOSByteArray_Get(nil_chk(inArg), unseq$1)), 24)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$2) & (jint) 0xff), 16)) | (JreLShift32((IOSByteArray_Get(inArg, unseq$3) & (jint) 0xff), 8)) | (IOSByteArray_Get(inArg, off) & (jint) 0xff);
}

void OrgSpongycastleCryptoEnginesNoekeonEngine_intToBytesBigWithInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, jint x, IOSByteArray *outArg, jint off) {
  *IOSByteArray_GetRef(nil_chk(outArg), off++) = (jbyte) (JreURShift32(x, 24));
  *IOSByteArray_GetRef(outArg, off++) = (jbyte) (JreURShift32(x, 16));
  *IOSByteArray_GetRef(outArg, off++) = (jbyte) (JreURShift32(x, 8));
  *IOSByteArray_GetRef(outArg, off) = (jbyte) x;
}

jint OrgSpongycastleCryptoEnginesNoekeonEngine_rotlWithInt_withInt_(OrgSpongycastleCryptoEnginesNoekeonEngine *self, jint x, jint y) {
  return (JreLShift32(x, y)) | (JreURShift32(x, (32 - y)));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesNoekeonEngine)
