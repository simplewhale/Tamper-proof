//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/DSTU7624WrapEngine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/InvalidCipherTextException.h"
#include "org/spongycastle/crypto/engines/DSTU7624Engine.h"
#include "org/spongycastle/crypto/engines/DSTU7624WrapEngine.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleCryptoEnginesDSTU7624WrapEngine () {
 @public
  jboolean forWrapping_;
  OrgSpongycastleCryptoEnginesDSTU7624Engine *engine_;
  IOSByteArray *B_;
  IOSByteArray *intArray_;
  IOSByteArray *checkSumArray_;
  IOSByteArray *zeroArray_;
  JavaUtilArrayList *Btemp_;
}

- (void)intToBytesWithInt:(jint)number
            withByteArray:(IOSByteArray *)outBytes
                  withInt:(jint)outOff;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesDSTU7624WrapEngine, engine_, OrgSpongycastleCryptoEnginesDSTU7624Engine *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesDSTU7624WrapEngine, B_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesDSTU7624WrapEngine, intArray_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesDSTU7624WrapEngine, checkSumArray_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesDSTU7624WrapEngine, zeroArray_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesDSTU7624WrapEngine, Btemp_, JavaUtilArrayList *)

inline jint OrgSpongycastleCryptoEnginesDSTU7624WrapEngine_get_BYTES_IN_INTEGER(void);
#define OrgSpongycastleCryptoEnginesDSTU7624WrapEngine_BYTES_IN_INTEGER 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoEnginesDSTU7624WrapEngine, BYTES_IN_INTEGER, jint)

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesDSTU7624WrapEngine_intToBytesWithInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesDSTU7624WrapEngine *self, jint number, IOSByteArray *outBytes, jint outOff);

@implementation OrgSpongycastleCryptoEnginesDSTU7624WrapEngine

- (instancetype)initWithInt:(jint)blockBitLength {
  OrgSpongycastleCryptoEnginesDSTU7624WrapEngine_initWithInt_(self, blockBitLength);
  return self;
}

- (void)init__WithBoolean:(jboolean)forWrapping
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
    param = [((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithRandom *) param))) getParameters];
  }
  self->forWrapping_ = forWrapping;
  if ([param isKindOfClass:[OrgSpongycastleCryptoParamsKeyParameter class]]) {
    [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) init__WithBoolean:forWrapping withOrgSpongycastleCryptoCipherParameters:param];
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid parameters passed to DSTU7624WrapEngine");
  }
}

- (NSString *)getAlgorithmName {
  return @"DSTU7624WrapEngine";
}

- (IOSByteArray *)wrapWithByteArray:(IOSByteArray *)inArg
                            withInt:(jint)inOff
                            withInt:(jint)inLen {
  if (!forWrapping_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"not set for wrapping");
  }
  if ((inLen % [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize]) != 0) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(JreStrcat("$I$", @"wrap data must be a multiple of ", [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize], @" bytes"));
  }
  if (inOff + inLen > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  jint n = 2 * (1 + inLen / [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize]);
  jint V = (n - 1) * 6;
  IOSByteArray *wrappedBuffer = [IOSByteArray newArrayWithLength:inLen + [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize]];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, wrappedBuffer, 0, inLen);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(wrappedBuffer, 0, B_, 0, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
  [((JavaUtilArrayList *) nil_chk(Btemp_)) clear];
  jint bHalfBlocksLen = wrappedBuffer->size_ - [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2;
  jint bufOff = [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2;
  while (bHalfBlocksLen != 0) {
    IOSByteArray *temp = [IOSByteArray newArrayWithLength:[((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(wrappedBuffer, bufOff, temp, 0, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
    [((JavaUtilArrayList *) nil_chk(Btemp_)) addWithId:temp];
    bHalfBlocksLen -= [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2;
    bufOff += [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2;
  }
  for (jint j = 0; j < V; j++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(B_, 0, wrappedBuffer, 0, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((JavaUtilArrayList *) nil_chk(Btemp_)) getWithInt:0], 0, wrappedBuffer, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
    [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) processBlockWithByteArray:wrappedBuffer withInt:0 withByteArray:wrappedBuffer withInt:0];
    OrgSpongycastleCryptoEnginesDSTU7624WrapEngine_intToBytesWithInt_withByteArray_withInt_(self, j + 1, intArray_, 0);
    for (jint byteNum = 0; byteNum < OrgSpongycastleCryptoEnginesDSTU7624WrapEngine_BYTES_IN_INTEGER; byteNum++) {
      *IOSByteArray_GetRef(wrappedBuffer, byteNum + [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2) ^= IOSByteArray_Get(nil_chk(intArray_), byteNum);
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(wrappedBuffer, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2, B_, 0, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
    for (jint i = 2; i < n; i++) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((JavaUtilArrayList *) nil_chk(Btemp_)) getWithInt:i - 1], 0, [((JavaUtilArrayList *) nil_chk(Btemp_)) getWithInt:i - 2], 0, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(wrappedBuffer, 0, [((JavaUtilArrayList *) nil_chk(Btemp_)) getWithInt:n - 2], 0, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(B_, 0, wrappedBuffer, 0, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
  bufOff = [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2;
  for (jint i = 0; i < n - 1; i++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((JavaUtilArrayList *) nil_chk(Btemp_)) getWithInt:i], 0, wrappedBuffer, bufOff, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
    bufOff += [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2;
  }
  return wrappedBuffer;
}

- (IOSByteArray *)unwrapWithByteArray:(IOSByteArray *)inArg
                              withInt:(jint)inOff
                              withInt:(jint)inLen {
  if (forWrapping_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"not set for unwrapping");
  }
  if ((inLen % [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize]) != 0) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(JreStrcat("$I$", @"unwrap data must be a multiple of ", [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize], @" bytes"));
  }
  jint n = 2 * inLen / [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize];
  jint V = (n - 1) * 6;
  IOSByteArray *buffer = [IOSByteArray newArrayWithLength:inLen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, buffer, 0, inLen);
  IOSByteArray *B = [IOSByteArray newArrayWithLength:[((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, B, 0, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
  [((JavaUtilArrayList *) nil_chk(Btemp_)) clear];
  jint bHalfBlocksLen = buffer->size_ - [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2;
  jint bufOff = [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2;
  while (bHalfBlocksLen != 0) {
    IOSByteArray *temp = [IOSByteArray newArrayWithLength:[((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, bufOff, temp, 0, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
    [((JavaUtilArrayList *) nil_chk(Btemp_)) addWithId:temp];
    bHalfBlocksLen -= [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2;
    bufOff += [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2;
  }
  for (jint j = 0; j < V; j++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((JavaUtilArrayList *) nil_chk(Btemp_)) getWithInt:n - 2], 0, buffer, 0, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(B, 0, buffer, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
    OrgSpongycastleCryptoEnginesDSTU7624WrapEngine_intToBytesWithInt_withByteArray_withInt_(self, V - j, intArray_, 0);
    for (jint byteNum = 0; byteNum < OrgSpongycastleCryptoEnginesDSTU7624WrapEngine_BYTES_IN_INTEGER; byteNum++) {
      *IOSByteArray_GetRef(buffer, byteNum + [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2) ^= IOSByteArray_Get(nil_chk(intArray_), byteNum);
    }
    [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) processBlockWithByteArray:buffer withInt:0 withByteArray:buffer withInt:0];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, B, 0, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
    for (jint i = 2; i < n; i++) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((JavaUtilArrayList *) nil_chk(Btemp_)) getWithInt:n - i - 1], 0, [((JavaUtilArrayList *) nil_chk(Btemp_)) getWithInt:n - i], 0, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2, [((JavaUtilArrayList *) nil_chk(Btemp_)) getWithInt:0], 0, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(B, 0, buffer, 0, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
  bufOff = [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2;
  for (jint i = 0; i < n - 1; i++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((JavaUtilArrayList *) nil_chk(Btemp_)) getWithInt:i], 0, buffer, bufOff, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2);
    bufOff += [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize] / 2;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, buffer->size_ - [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize], checkSumArray_, 0, [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize]);
  IOSByteArray *wrappedBuffer = [IOSByteArray newArrayWithLength:buffer->size_ - [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize]];
  if (!OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(checkSumArray_, zeroArray_)) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"checksum failed");
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, 0, wrappedBuffer, 0, buffer->size_ - [((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(engine_)) getBlockSize]);
  }
  return wrappedBuffer;
}

- (void)intToBytesWithInt:(jint)number
            withByteArray:(IOSByteArray *)outBytes
                  withInt:(jint)outOff {
  OrgSpongycastleCryptoEnginesDSTU7624WrapEngine_intToBytesWithInt_withByteArray_withInt_(self, number, outBytes, outOff);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 4, 6, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(wrapWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(unwrapWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(intToBytesWithInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BYTES_IN_INTEGER", "I", .constantValue.asInt = OrgSpongycastleCryptoEnginesDSTU7624WrapEngine_BYTES_IN_INTEGER, 0x1a, -1, -1, -1, -1 },
    { "forWrapping_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "engine_", "LOrgSpongycastleCryptoEnginesDSTU7624Engine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "B_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "intArray_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "checkSumArray_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zeroArray_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "Btemp_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "I", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "wrap", "[BII", "unwrap", "LOrgSpongycastleCryptoInvalidCipherTextException;", "intToBytes", "I[BI", "Ljava/util/ArrayList<[B>;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesDSTU7624WrapEngine = { "DSTU7624WrapEngine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 6, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesDSTU7624WrapEngine;
}

@end

void OrgSpongycastleCryptoEnginesDSTU7624WrapEngine_initWithInt_(OrgSpongycastleCryptoEnginesDSTU7624WrapEngine *self, jint blockBitLength) {
  NSObject_init(self);
  self->engine_ = new_OrgSpongycastleCryptoEnginesDSTU7624Engine_initWithInt_(blockBitLength);
  self->B_ = [IOSByteArray newArrayWithLength:[self->engine_ getBlockSize] / 2];
  self->checkSumArray_ = [IOSByteArray newArrayWithLength:[((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(self->engine_)) getBlockSize]];
  self->zeroArray_ = [IOSByteArray newArrayWithLength:[((OrgSpongycastleCryptoEnginesDSTU7624Engine *) nil_chk(self->engine_)) getBlockSize]];
  self->Btemp_ = new_JavaUtilArrayList_init();
  self->intArray_ = [IOSByteArray newArrayWithLength:OrgSpongycastleCryptoEnginesDSTU7624WrapEngine_BYTES_IN_INTEGER];
}

OrgSpongycastleCryptoEnginesDSTU7624WrapEngine *new_OrgSpongycastleCryptoEnginesDSTU7624WrapEngine_initWithInt_(jint blockBitLength) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesDSTU7624WrapEngine, initWithInt_, blockBitLength)
}

OrgSpongycastleCryptoEnginesDSTU7624WrapEngine *create_OrgSpongycastleCryptoEnginesDSTU7624WrapEngine_initWithInt_(jint blockBitLength) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesDSTU7624WrapEngine, initWithInt_, blockBitLength)
}

void OrgSpongycastleCryptoEnginesDSTU7624WrapEngine_intToBytesWithInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesDSTU7624WrapEngine *self, jint number, IOSByteArray *outBytes, jint outOff) {
  *IOSByteArray_GetRef(nil_chk(outBytes), outOff + 3) = (jbyte) (JreRShift32(number, 24));
  *IOSByteArray_GetRef(outBytes, outOff + 2) = (jbyte) (JreRShift32(number, 16));
  *IOSByteArray_GetRef(outBytes, outOff + 1) = (jbyte) (JreRShift32(number, 8));
  *IOSByteArray_GetRef(outBytes, outOff) = (jbyte) number;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesDSTU7624WrapEngine)
