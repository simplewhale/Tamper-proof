//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/ElGamalEngine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/engines/ElGamalEngine.h"
#include "org/spongycastle/crypto/params/ElGamalKeyParameters.h"
#include "org/spongycastle/crypto/params/ElGamalParameters.h"
#include "org/spongycastle/crypto/params/ElGamalPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ElGamalPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/util/BigIntegers.h"

@interface OrgSpongycastleCryptoEnginesElGamalEngine () {
 @public
  OrgSpongycastleCryptoParamsElGamalKeyParameters *key_;
  JavaSecuritySecureRandom *random_;
  jboolean forEncryption_;
  jint bitSize_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesElGamalEngine, key_, OrgSpongycastleCryptoParamsElGamalKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesElGamalEngine, random_, JavaSecuritySecureRandom *)

inline JavaMathBigInteger *OrgSpongycastleCryptoEnginesElGamalEngine_get_ZERO(void);
static JavaMathBigInteger *OrgSpongycastleCryptoEnginesElGamalEngine_ZERO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesElGamalEngine, ZERO, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoEnginesElGamalEngine_get_ONE(void);
static JavaMathBigInteger *OrgSpongycastleCryptoEnginesElGamalEngine_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesElGamalEngine, ONE, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgSpongycastleCryptoEnginesElGamalEngine_get_TWO(void);
static JavaMathBigInteger *OrgSpongycastleCryptoEnginesElGamalEngine_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesElGamalEngine, TWO, JavaMathBigInteger *)

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoEnginesElGamalEngine)

@implementation OrgSpongycastleCryptoEnginesElGamalEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesElGamalEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
    OrgSpongycastleCryptoParamsParametersWithRandom *p = (OrgSpongycastleCryptoParamsParametersWithRandom *) param;
    self->key_ = (OrgSpongycastleCryptoParamsElGamalKeyParameters *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(p)) getParameters], [OrgSpongycastleCryptoParamsElGamalKeyParameters class]);
    self->random_ = [p getRandom];
  }
  else {
    self->key_ = (OrgSpongycastleCryptoParamsElGamalKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsElGamalKeyParameters class]);
    self->random_ = new_JavaSecuritySecureRandom_init();
  }
  self->forEncryption_ = forEncryption;
  JavaMathBigInteger *p = [((OrgSpongycastleCryptoParamsElGamalParameters *) nil_chk([((OrgSpongycastleCryptoParamsElGamalKeyParameters *) nil_chk(key_)) getParameters])) getP];
  bitSize_ = [((JavaMathBigInteger *) nil_chk(p)) bitLength];
  if (forEncryption) {
    if (!([key_ isKindOfClass:[OrgSpongycastleCryptoParamsElGamalPublicKeyParameters class]])) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"ElGamalPublicKeyParameters are required for encryption.");
    }
  }
  else {
    if (!([key_ isKindOfClass:[OrgSpongycastleCryptoParamsElGamalPrivateKeyParameters class]])) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"ElGamalPrivateKeyParameters are required for decryption.");
    }
  }
}

- (jint)getInputBlockSize {
  if (forEncryption_) {
    return (bitSize_ - 1) / 8;
  }
  return 2 * ((bitSize_ + 7) / 8);
}

- (jint)getOutputBlockSize {
  if (forEncryption_) {
    return 2 * ((bitSize_ + 7) / 8);
  }
  return (bitSize_ - 1) / 8;
}

- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen {
  if (key_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"ElGamal engine not initialised");
  }
  jint maxLength = forEncryption_ ? (bitSize_ - 1 + 7) / 8 : [self getInputBlockSize];
  if (inLen > maxLength) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input too large for ElGamal cipher.\n");
  }
  JavaMathBigInteger *p = [((OrgSpongycastleCryptoParamsElGamalParameters *) nil_chk([((OrgSpongycastleCryptoParamsElGamalKeyParameters *) nil_chk(key_)) getParameters])) getP];
  if ([key_ isKindOfClass:[OrgSpongycastleCryptoParamsElGamalPrivateKeyParameters class]]) {
    IOSByteArray *in1 = [IOSByteArray newArrayWithLength:inLen / 2];
    IOSByteArray *in2 = [IOSByteArray newArrayWithLength:inLen / 2];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, in1, 0, in1->size_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff + in1->size_, in2, 0, in2->size_);
    JavaMathBigInteger *gamma = new_JavaMathBigInteger_initWithInt_withByteArray_(1, in1);
    JavaMathBigInteger *phi = new_JavaMathBigInteger_initWithInt_withByteArray_(1, in2);
    OrgSpongycastleCryptoParamsElGamalPrivateKeyParameters *priv = (OrgSpongycastleCryptoParamsElGamalPrivateKeyParameters *) key_;
    JavaMathBigInteger *m = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([gamma modPowWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(p)) subtractWithJavaMathBigInteger:OrgSpongycastleCryptoEnginesElGamalEngine_ONE])) subtractWithJavaMathBigInteger:[((OrgSpongycastleCryptoParamsElGamalPrivateKeyParameters *) nil_chk(priv)) getX]] withJavaMathBigInteger:p])) multiplyWithJavaMathBigInteger:phi])) modWithJavaMathBigInteger:p];
    return OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithJavaMathBigInteger_(m);
  }
  else {
    IOSByteArray *block;
    if (inOff != 0 || inLen != ((IOSByteArray *) nil_chk(inArg))->size_) {
      block = [IOSByteArray newArrayWithLength:inLen];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, block, 0, inLen);
    }
    else {
      block = inArg;
    }
    JavaMathBigInteger *input = new_JavaMathBigInteger_initWithInt_withByteArray_(1, block);
    if ([input compareToWithId:p] >= 0) {
      @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input too large for ElGamal cipher.\n");
    }
    OrgSpongycastleCryptoParamsElGamalPublicKeyParameters *pub = (OrgSpongycastleCryptoParamsElGamalPublicKeyParameters *) cast_chk(key_, [OrgSpongycastleCryptoParamsElGamalPublicKeyParameters class]);
    jint pBitLength = [((JavaMathBigInteger *) nil_chk(p)) bitLength];
    JavaMathBigInteger *k = new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(pBitLength, random_);
    while ([k isEqual:OrgSpongycastleCryptoEnginesElGamalEngine_ZERO] || ([k compareToWithId:[p subtractWithJavaMathBigInteger:OrgSpongycastleCryptoEnginesElGamalEngine_TWO]] > 0)) {
      k = new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(pBitLength, random_);
    }
    JavaMathBigInteger *g = [((OrgSpongycastleCryptoParamsElGamalParameters *) nil_chk([((OrgSpongycastleCryptoParamsElGamalKeyParameters *) nil_chk(key_)) getParameters])) getG];
    JavaMathBigInteger *gamma = [((JavaMathBigInteger *) nil_chk(g)) modPowWithJavaMathBigInteger:k withJavaMathBigInteger:p];
    JavaMathBigInteger *phi = [((JavaMathBigInteger *) nil_chk([input multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsElGamalPublicKeyParameters *) nil_chk(pub)) getY])) modPowWithJavaMathBigInteger:k withJavaMathBigInteger:p]])) modWithJavaMathBigInteger:p];
    IOSByteArray *out1 = [((JavaMathBigInteger *) nil_chk(gamma)) toByteArray];
    IOSByteArray *out2 = [((JavaMathBigInteger *) nil_chk(phi)) toByteArray];
    IOSByteArray *output = [IOSByteArray newArrayWithLength:[self getOutputBlockSize]];
    if (((IOSByteArray *) nil_chk(out1))->size_ > output->size_ / 2) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(out1, 1, output, output->size_ / 2 - (out1->size_ - 1), out1->size_ - 1);
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(out1, 0, output, output->size_ / 2 - out1->size_, out1->size_);
    }
    if (((IOSByteArray *) nil_chk(out2))->size_ > output->size_ / 2) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(out2, 1, output, output->size_ - (out2->size_ - 1), out2->size_ - 1);
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(out2, 0, output, output->size_ - out2->size_, out2->size_);
    }
    return output;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getInputBlockSize);
  methods[3].selector = @selector(getOutputBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LOrgSpongycastleCryptoParamsElGamalKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bitSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ZERO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "TWO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;", "processBlock", "[BII", &OrgSpongycastleCryptoEnginesElGamalEngine_ZERO, &OrgSpongycastleCryptoEnginesElGamalEngine_ONE, &OrgSpongycastleCryptoEnginesElGamalEngine_TWO };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesElGamalEngine = { "ElGamalEngine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 5, 7, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesElGamalEngine;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoEnginesElGamalEngine class]) {
    OrgSpongycastleCryptoEnginesElGamalEngine_ZERO = JavaMathBigInteger_valueOfWithLong_(0);
    OrgSpongycastleCryptoEnginesElGamalEngine_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    OrgSpongycastleCryptoEnginesElGamalEngine_TWO = JavaMathBigInteger_valueOfWithLong_(2);
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoEnginesElGamalEngine)
  }
}

@end

void OrgSpongycastleCryptoEnginesElGamalEngine_init(OrgSpongycastleCryptoEnginesElGamalEngine *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoEnginesElGamalEngine *new_OrgSpongycastleCryptoEnginesElGamalEngine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesElGamalEngine, init)
}

OrgSpongycastleCryptoEnginesElGamalEngine *create_OrgSpongycastleCryptoEnginesElGamalEngine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesElGamalEngine, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesElGamalEngine)
