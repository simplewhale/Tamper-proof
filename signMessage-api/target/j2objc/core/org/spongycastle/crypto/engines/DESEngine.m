//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/DESEngine.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/OutputLengthException.h"
#include "org/spongycastle/crypto/engines/DESEngine.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"

@interface OrgSpongycastleCryptoEnginesDESEngine () {
 @public
  IOSIntArray *workingKey_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesDESEngine, workingKey_, IOSIntArray *)

inline IOSShortArray *OrgSpongycastleCryptoEnginesDESEngine_get_bytebit(void);
static IOSShortArray *OrgSpongycastleCryptoEnginesDESEngine_bytebit;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesDESEngine, bytebit, IOSShortArray *)

inline IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_get_bigbyte(void);
static IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_bigbyte;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesDESEngine, bigbyte, IOSIntArray *)

inline IOSByteArray *OrgSpongycastleCryptoEnginesDESEngine_get_pc1(void);
static IOSByteArray *OrgSpongycastleCryptoEnginesDESEngine_pc1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesDESEngine, pc1, IOSByteArray *)

inline IOSByteArray *OrgSpongycastleCryptoEnginesDESEngine_get_totrot(void);
static IOSByteArray *OrgSpongycastleCryptoEnginesDESEngine_totrot;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesDESEngine, totrot, IOSByteArray *)

inline IOSByteArray *OrgSpongycastleCryptoEnginesDESEngine_get_pc2(void);
static IOSByteArray *OrgSpongycastleCryptoEnginesDESEngine_pc2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesDESEngine, pc2, IOSByteArray *)

inline IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_get_SP1(void);
static IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_SP1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesDESEngine, SP1, IOSIntArray *)

inline IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_get_SP2(void);
static IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_SP2;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesDESEngine, SP2, IOSIntArray *)

inline IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_get_SP3(void);
static IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_SP3;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesDESEngine, SP3, IOSIntArray *)

inline IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_get_SP4(void);
static IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_SP4;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesDESEngine, SP4, IOSIntArray *)

inline IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_get_SP5(void);
static IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_SP5;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesDESEngine, SP5, IOSIntArray *)

inline IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_get_SP6(void);
static IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_SP6;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesDESEngine, SP6, IOSIntArray *)

inline IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_get_SP7(void);
static IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_SP7;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesDESEngine, SP7, IOSIntArray *)

inline IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_get_SP8(void);
static IOSIntArray *OrgSpongycastleCryptoEnginesDESEngine_SP8;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesDESEngine, SP8, IOSIntArray *)

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoEnginesDESEngine)

@implementation OrgSpongycastleCryptoEnginesDESEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesDESEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)encrypting
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsKeyParameter class]]) {
    if (((IOSByteArray *) nil_chk([((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(((OrgSpongycastleCryptoParamsKeyParameter *) params))) getKey]))->size_ > 8) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"DES key too long - should be 8 bytes");
    }
    workingKey_ = [self generateWorkingKeyWithBoolean:encrypting withByteArray:[((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(((OrgSpongycastleCryptoParamsKeyParameter *) params))) getKey]];
    return;
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid parameter passed to DES init - ", [[((id<OrgSpongycastleCryptoCipherParameters>) nil_chk(params)) java_getClass] getName]));
}

- (NSString *)getAlgorithmName {
  return @"DES";
}

- (jint)getBlockSize {
  return OrgSpongycastleCryptoEnginesDESEngine_BLOCK_SIZE;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (workingKey_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"DES engine not initialised");
  }
  if ((inOff + OrgSpongycastleCryptoEnginesDESEngine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + OrgSpongycastleCryptoEnginesDESEngine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  [self desFuncWithIntArray:workingKey_ withByteArray:inArg withInt:inOff withByteArray:outArg withInt:outOff];
  return OrgSpongycastleCryptoEnginesDESEngine_BLOCK_SIZE;
}

- (void)reset {
}

- (IOSIntArray *)generateWorkingKeyWithBoolean:(jboolean)encrypting
                                 withByteArray:(IOSByteArray *)key {
  IOSIntArray *newKey = [IOSIntArray newArrayWithLength:32];
  IOSBooleanArray *pc1m = [IOSBooleanArray newArrayWithLength:56];
  IOSBooleanArray *pcr = [IOSBooleanArray newArrayWithLength:56];
  for (jint j = 0; j < 56; j++) {
    jint l = IOSByteArray_Get(nil_chk(OrgSpongycastleCryptoEnginesDESEngine_pc1), j);
    *IOSBooleanArray_GetRef(pc1m, j) = ((IOSByteArray_Get(nil_chk(key), JreURShift32(l, 3)) & IOSShortArray_Get(nil_chk(OrgSpongycastleCryptoEnginesDESEngine_bytebit), l & 07)) != 0);
  }
  for (jint i = 0; i < 16; i++) {
    jint l;
    jint m;
    jint n;
    if (encrypting) {
      m = JreLShift32(i, 1);
    }
    else {
      m = JreLShift32((15 - i), 1);
    }
    n = m + 1;
    *IOSIntArray_GetRef(newKey, m) = *IOSIntArray_GetRef(newKey, n) = 0;
    for (jint j = 0; j < 28; j++) {
      l = j + IOSByteArray_Get(nil_chk(OrgSpongycastleCryptoEnginesDESEngine_totrot), i);
      if (l < 28) {
        *IOSBooleanArray_GetRef(pcr, j) = IOSBooleanArray_Get(pc1m, l);
      }
      else {
        *IOSBooleanArray_GetRef(pcr, j) = IOSBooleanArray_Get(pc1m, l - 28);
      }
    }
    for (jint j = 28; j < 56; j++) {
      l = j + IOSByteArray_Get(nil_chk(OrgSpongycastleCryptoEnginesDESEngine_totrot), i);
      if (l < 56) {
        *IOSBooleanArray_GetRef(pcr, j) = IOSBooleanArray_Get(pc1m, l);
      }
      else {
        *IOSBooleanArray_GetRef(pcr, j) = IOSBooleanArray_Get(pc1m, l - 28);
      }
    }
    for (jint j = 0; j < 24; j++) {
      if (IOSBooleanArray_Get(pcr, IOSByteArray_Get(nil_chk(OrgSpongycastleCryptoEnginesDESEngine_pc2), j))) {
        *IOSIntArray_GetRef(newKey, m) |= IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoEnginesDESEngine_bigbyte), j);
      }
      if (IOSBooleanArray_Get(pcr, IOSByteArray_Get(OrgSpongycastleCryptoEnginesDESEngine_pc2, j + 24))) {
        *IOSIntArray_GetRef(newKey, n) |= IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoEnginesDESEngine_bigbyte), j);
      }
    }
  }
  for (jint i = 0; i != 32; i += 2) {
    jint i1;
    jint i2;
    i1 = IOSIntArray_Get(newKey, i);
    i2 = IOSIntArray_Get(newKey, i + 1);
    *IOSIntArray_GetRef(newKey, i) = (JreLShift32((i1 & (jint) 0x00fc0000), 6)) | (JreLShift32((i1 & (jint) 0x00000fc0), 10)) | (JreURShift32((i2 & (jint) 0x00fc0000), 10)) | (JreURShift32((i2 & (jint) 0x00000fc0), 6));
    *IOSIntArray_GetRef(newKey, i + 1) = (JreLShift32((i1 & (jint) 0x0003f000), 12)) | (JreLShift32((i1 & (jint) 0x0000003f), 16)) | (JreURShift32((i2 & (jint) 0x0003f000), 4)) | (i2 & (jint) 0x0000003f);
  }
  return newKey;
}

- (void)desFuncWithIntArray:(IOSIntArray *)wKey
              withByteArray:(IOSByteArray *)inArg
                    withInt:(jint)inOff
              withByteArray:(IOSByteArray *)outArg
                    withInt:(jint)outOff {
  jint work;
  jint right;
  jint left;
  left = JreLShift32((IOSByteArray_Get(nil_chk(inArg), inOff + 0) & (jint) 0xff), 24);
  left |= JreLShift32((IOSByteArray_Get(inArg, inOff + 1) & (jint) 0xff), 16);
  left |= JreLShift32((IOSByteArray_Get(inArg, inOff + 2) & (jint) 0xff), 8);
  left |= (IOSByteArray_Get(inArg, inOff + 3) & (jint) 0xff);
  right = JreLShift32((IOSByteArray_Get(inArg, inOff + 4) & (jint) 0xff), 24);
  right |= JreLShift32((IOSByteArray_Get(inArg, inOff + 5) & (jint) 0xff), 16);
  right |= JreLShift32((IOSByteArray_Get(inArg, inOff + 6) & (jint) 0xff), 8);
  right |= (IOSByteArray_Get(inArg, inOff + 7) & (jint) 0xff);
  work = ((JreURShift32(left, 4)) ^ right) & (jint) 0x0f0f0f0f;
  right ^= work;
  left ^= (JreLShift32(work, 4));
  work = ((JreURShift32(left, 16)) ^ right) & (jint) 0x0000ffff;
  right ^= work;
  left ^= (JreLShift32(work, 16));
  work = ((JreURShift32(right, 2)) ^ left) & (jint) 0x33333333;
  left ^= work;
  right ^= (JreLShift32(work, 2));
  work = ((JreURShift32(right, 8)) ^ left) & (jint) 0x00ff00ff;
  left ^= work;
  right ^= (JreLShift32(work, 8));
  right = ((JreLShift32(right, 1)) | ((JreURShift32(right, 31)) & 1)) & (jint) 0xffffffff;
  work = (left ^ right) & (jint) 0xaaaaaaaa;
  left ^= work;
  right ^= work;
  left = ((JreLShift32(left, 1)) | ((JreURShift32(left, 31)) & 1)) & (jint) 0xffffffff;
  for (jint round = 0; round < 8; round++) {
    jint fval;
    work = (JreLShift32(right, 28)) | (JreURShift32(right, 4));
    work ^= IOSIntArray_Get(nil_chk(wKey), round * 4 + 0);
    fval = IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoEnginesDESEngine_SP7), work & (jint) 0x3f);
    fval |= IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoEnginesDESEngine_SP5), (JreURShift32(work, 8)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoEnginesDESEngine_SP3), (JreURShift32(work, 16)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoEnginesDESEngine_SP1), (JreURShift32(work, 24)) & (jint) 0x3f);
    work = right ^ IOSIntArray_Get(wKey, round * 4 + 1);
    fval |= IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoEnginesDESEngine_SP8), work & (jint) 0x3f);
    fval |= IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoEnginesDESEngine_SP6), (JreURShift32(work, 8)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoEnginesDESEngine_SP4), (JreURShift32(work, 16)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(nil_chk(OrgSpongycastleCryptoEnginesDESEngine_SP2), (JreURShift32(work, 24)) & (jint) 0x3f);
    left ^= fval;
    work = (JreLShift32(left, 28)) | (JreURShift32(left, 4));
    work ^= IOSIntArray_Get(wKey, round * 4 + 2);
    fval = IOSIntArray_Get(OrgSpongycastleCryptoEnginesDESEngine_SP7, work & (jint) 0x3f);
    fval |= IOSIntArray_Get(OrgSpongycastleCryptoEnginesDESEngine_SP5, (JreURShift32(work, 8)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(OrgSpongycastleCryptoEnginesDESEngine_SP3, (JreURShift32(work, 16)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(OrgSpongycastleCryptoEnginesDESEngine_SP1, (JreURShift32(work, 24)) & (jint) 0x3f);
    work = left ^ IOSIntArray_Get(wKey, round * 4 + 3);
    fval |= IOSIntArray_Get(OrgSpongycastleCryptoEnginesDESEngine_SP8, work & (jint) 0x3f);
    fval |= IOSIntArray_Get(OrgSpongycastleCryptoEnginesDESEngine_SP6, (JreURShift32(work, 8)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(OrgSpongycastleCryptoEnginesDESEngine_SP4, (JreURShift32(work, 16)) & (jint) 0x3f);
    fval |= IOSIntArray_Get(OrgSpongycastleCryptoEnginesDESEngine_SP2, (JreURShift32(work, 24)) & (jint) 0x3f);
    right ^= fval;
  }
  right = (JreLShift32(right, 31)) | (JreURShift32(right, 1));
  work = (left ^ right) & (jint) 0xaaaaaaaa;
  left ^= work;
  right ^= work;
  left = (JreLShift32(left, 31)) | (JreURShift32(left, 1));
  work = ((JreURShift32(left, 8)) ^ right) & (jint) 0x00ff00ff;
  right ^= work;
  left ^= (JreLShift32(work, 8));
  work = ((JreURShift32(left, 2)) ^ right) & (jint) 0x33333333;
  right ^= work;
  left ^= (JreLShift32(work, 2));
  work = ((JreURShift32(right, 16)) ^ left) & (jint) 0x0000ffff;
  left ^= work;
  right ^= (JreLShift32(work, 16));
  work = ((JreURShift32(right, 4)) ^ left) & (jint) 0x0f0f0f0f;
  left ^= work;
  right ^= (JreLShift32(work, 4));
  *IOSByteArray_GetRef(nil_chk(outArg), outOff + 0) = (jbyte) ((JreURShift32(right, 24)) & (jint) 0xff);
  *IOSByteArray_GetRef(outArg, outOff + 1) = (jbyte) ((JreURShift32(right, 16)) & (jint) 0xff);
  *IOSByteArray_GetRef(outArg, outOff + 2) = (jbyte) ((JreURShift32(right, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(outArg, outOff + 3) = (jbyte) (right & (jint) 0xff);
  *IOSByteArray_GetRef(outArg, outOff + 4) = (jbyte) ((JreURShift32(left, 24)) & (jint) 0xff);
  *IOSByteArray_GetRef(outArg, outOff + 5) = (jbyte) ((JreURShift32(left, 16)) & (jint) 0xff);
  *IOSByteArray_GetRef(outArg, outOff + 6) = (jbyte) ((JreURShift32(left, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(outArg, outOff + 7) = (jbyte) (left & (jint) 0xff);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getAlgorithmName);
  methods[3].selector = @selector(getBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(generateWorkingKeyWithBoolean:withByteArray:);
  methods[7].selector = @selector(desFuncWithIntArray:withByteArray:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BLOCK_SIZE", "I", .constantValue.asInt = OrgSpongycastleCryptoEnginesDESEngine_BLOCK_SIZE, 0x1c, -1, -1, -1, -1 },
    { "workingKey_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bytebit", "[S", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "bigbyte", "[I", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "pc1", "[B", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "totrot", "[B", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "pc2", "[B", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "SP1", "[I", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "SP2", "[I", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "SP3", "[I", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "SP4", "[I", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "SP5", "[I", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "SP6", "[I", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "SP7", "[I", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "SP8", "[I", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;", "processBlock", "[BI[BI", "generateWorkingKey", "Z[B", "desFunc", "[I[BI[BI", &OrgSpongycastleCryptoEnginesDESEngine_bytebit, &OrgSpongycastleCryptoEnginesDESEngine_bigbyte, &OrgSpongycastleCryptoEnginesDESEngine_pc1, &OrgSpongycastleCryptoEnginesDESEngine_totrot, &OrgSpongycastleCryptoEnginesDESEngine_pc2, &OrgSpongycastleCryptoEnginesDESEngine_SP1, &OrgSpongycastleCryptoEnginesDESEngine_SP2, &OrgSpongycastleCryptoEnginesDESEngine_SP3, &OrgSpongycastleCryptoEnginesDESEngine_SP4, &OrgSpongycastleCryptoEnginesDESEngine_SP5, &OrgSpongycastleCryptoEnginesDESEngine_SP6, &OrgSpongycastleCryptoEnginesDESEngine_SP7, &OrgSpongycastleCryptoEnginesDESEngine_SP8 };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesDESEngine = { "DESEngine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 8, 15, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesDESEngine;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoEnginesDESEngine class]) {
    OrgSpongycastleCryptoEnginesDESEngine_bytebit = [IOSShortArray newArrayWithShorts:(jshort[]){ 0200, 0100, 040, 020, 010, 04, 02, 01 } count:8];
    OrgSpongycastleCryptoEnginesDESEngine_bigbyte = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x800000, (jint) 0x400000, (jint) 0x200000, (jint) 0x100000, (jint) 0x80000, (jint) 0x40000, (jint) 0x20000, (jint) 0x10000, (jint) 0x8000, (jint) 0x4000, (jint) 0x2000, (jint) 0x1000, (jint) 0x800, (jint) 0x400, (jint) 0x200, (jint) 0x100, (jint) 0x80, (jint) 0x40, (jint) 0x20, (jint) 0x10, (jint) 0x8, (jint) 0x4, (jint) 0x2, (jint) 0x1 } count:24];
    OrgSpongycastleCryptoEnginesDESEngine_pc1 = [IOSByteArray newArrayWithBytes:(jbyte[]){ 56, 48, 40, 32, 24, 16, 8, 0, 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 60, 52, 44, 36, 28, 20, 12, 4, 27, 19, 11, 3 } count:56];
    OrgSpongycastleCryptoEnginesDESEngine_totrot = [IOSByteArray newArrayWithBytes:(jbyte[]){ 1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28 } count:16];
    OrgSpongycastleCryptoEnginesDESEngine_pc2 = [IOSByteArray newArrayWithBytes:(jbyte[]){ 13, 16, 10, 23, 0, 4, 2, 27, 14, 5, 20, 9, 22, 18, 11, 3, 25, 7, 15, 6, 26, 19, 12, 1, 40, 51, 30, 36, 46, 54, 29, 39, 50, 44, 32, 47, 43, 48, 38, 55, 33, 52, 45, 41, 49, 35, 28, 31 } count:48];
    OrgSpongycastleCryptoEnginesDESEngine_SP1 = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x01010400, (jint) 0x00000000, (jint) 0x00010000, (jint) 0x01010404, (jint) 0x01010004, (jint) 0x00010404, (jint) 0x00000004, (jint) 0x00010000, (jint) 0x00000400, (jint) 0x01010400, (jint) 0x01010404, (jint) 0x00000400, (jint) 0x01000404, (jint) 0x01010004, (jint) 0x01000000, (jint) 0x00000004, (jint) 0x00000404, (jint) 0x01000400, (jint) 0x01000400, (jint) 0x00010400, (jint) 0x00010400, (jint) 0x01010000, (jint) 0x01010000, (jint) 0x01000404, (jint) 0x00010004, (jint) 0x01000004, (jint) 0x01000004, (jint) 0x00010004, (jint) 0x00000000, (jint) 0x00000404, (jint) 0x00010404, (jint) 0x01000000, (jint) 0x00010000, (jint) 0x01010404, (jint) 0x00000004, (jint) 0x01010000, (jint) 0x01010400, (jint) 0x01000000, (jint) 0x01000000, (jint) 0x00000400, (jint) 0x01010004, (jint) 0x00010000, (jint) 0x00010400, (jint) 0x01000004, (jint) 0x00000400, (jint) 0x00000004, (jint) 0x01000404, (jint) 0x00010404, (jint) 0x01010404, (jint) 0x00010004, (jint) 0x01010000, (jint) 0x01000404, (jint) 0x01000004, (jint) 0x00000404, (jint) 0x00010404, (jint) 0x01010400, (jint) 0x00000404, (jint) 0x01000400, (jint) 0x01000400, (jint) 0x00000000, (jint) 0x00010004, (jint) 0x00010400, (jint) 0x00000000, (jint) 0x01010004 } count:64];
    OrgSpongycastleCryptoEnginesDESEngine_SP2 = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x80108020, (jint) 0x80008000, (jint) 0x00008000, (jint) 0x00108020, (jint) 0x00100000, (jint) 0x00000020, (jint) 0x80100020, (jint) 0x80008020, (jint) 0x80000020, (jint) 0x80108020, (jint) 0x80108000, -0x7fffffff - 1, (jint) 0x80008000, (jint) 0x00100000, (jint) 0x00000020, (jint) 0x80100020, (jint) 0x00108000, (jint) 0x00100020, (jint) 0x80008020, (jint) 0x00000000, -0x7fffffff - 1, (jint) 0x00008000, (jint) 0x00108020, (jint) 0x80100000, (jint) 0x00100020, (jint) 0x80000020, (jint) 0x00000000, (jint) 0x00108000, (jint) 0x00008020, (jint) 0x80108000, (jint) 0x80100000, (jint) 0x00008020, (jint) 0x00000000, (jint) 0x00108020, (jint) 0x80100020, (jint) 0x00100000, (jint) 0x80008020, (jint) 0x80100000, (jint) 0x80108000, (jint) 0x00008000, (jint) 0x80100000, (jint) 0x80008000, (jint) 0x00000020, (jint) 0x80108020, (jint) 0x00108020, (jint) 0x00000020, (jint) 0x00008000, -0x7fffffff - 1, (jint) 0x00008020, (jint) 0x80108000, (jint) 0x00100000, (jint) 0x80000020, (jint) 0x00100020, (jint) 0x80008020, (jint) 0x80000020, (jint) 0x00100020, (jint) 0x00108000, (jint) 0x00000000, (jint) 0x80008000, (jint) 0x00008020, -0x7fffffff - 1, (jint) 0x80100020, (jint) 0x80108020, (jint) 0x00108000 } count:64];
    OrgSpongycastleCryptoEnginesDESEngine_SP3 = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x00000208, (jint) 0x08020200, (jint) 0x00000000, (jint) 0x08020008, (jint) 0x08000200, (jint) 0x00000000, (jint) 0x00020208, (jint) 0x08000200, (jint) 0x00020008, (jint) 0x08000008, (jint) 0x08000008, (jint) 0x00020000, (jint) 0x08020208, (jint) 0x00020008, (jint) 0x08020000, (jint) 0x00000208, (jint) 0x08000000, (jint) 0x00000008, (jint) 0x08020200, (jint) 0x00000200, (jint) 0x00020200, (jint) 0x08020000, (jint) 0x08020008, (jint) 0x00020208, (jint) 0x08000208, (jint) 0x00020200, (jint) 0x00020000, (jint) 0x08000208, (jint) 0x00000008, (jint) 0x08020208, (jint) 0x00000200, (jint) 0x08000000, (jint) 0x08020200, (jint) 0x08000000, (jint) 0x00020008, (jint) 0x00000208, (jint) 0x00020000, (jint) 0x08020200, (jint) 0x08000200, (jint) 0x00000000, (jint) 0x00000200, (jint) 0x00020008, (jint) 0x08020208, (jint) 0x08000200, (jint) 0x08000008, (jint) 0x00000200, (jint) 0x00000000, (jint) 0x08020008, (jint) 0x08000208, (jint) 0x00020000, (jint) 0x08000000, (jint) 0x08020208, (jint) 0x00000008, (jint) 0x00020208, (jint) 0x00020200, (jint) 0x08000008, (jint) 0x08020000, (jint) 0x08000208, (jint) 0x00000208, (jint) 0x08020000, (jint) 0x00020208, (jint) 0x00000008, (jint) 0x08020008, (jint) 0x00020200 } count:64];
    OrgSpongycastleCryptoEnginesDESEngine_SP4 = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x00802001, (jint) 0x00002081, (jint) 0x00002081, (jint) 0x00000080, (jint) 0x00802080, (jint) 0x00800081, (jint) 0x00800001, (jint) 0x00002001, (jint) 0x00000000, (jint) 0x00802000, (jint) 0x00802000, (jint) 0x00802081, (jint) 0x00000081, (jint) 0x00000000, (jint) 0x00800080, (jint) 0x00800001, (jint) 0x00000001, (jint) 0x00002000, (jint) 0x00800000, (jint) 0x00802001, (jint) 0x00000080, (jint) 0x00800000, (jint) 0x00002001, (jint) 0x00002080, (jint) 0x00800081, (jint) 0x00000001, (jint) 0x00002080, (jint) 0x00800080, (jint) 0x00002000, (jint) 0x00802080, (jint) 0x00802081, (jint) 0x00000081, (jint) 0x00800080, (jint) 0x00800001, (jint) 0x00802000, (jint) 0x00802081, (jint) 0x00000081, (jint) 0x00000000, (jint) 0x00000000, (jint) 0x00802000, (jint) 0x00002080, (jint) 0x00800080, (jint) 0x00800081, (jint) 0x00000001, (jint) 0x00802001, (jint) 0x00002081, (jint) 0x00002081, (jint) 0x00000080, (jint) 0x00802081, (jint) 0x00000081, (jint) 0x00000001, (jint) 0x00002000, (jint) 0x00800001, (jint) 0x00002001, (jint) 0x00802080, (jint) 0x00800081, (jint) 0x00002001, (jint) 0x00002080, (jint) 0x00800000, (jint) 0x00802001, (jint) 0x00000080, (jint) 0x00800000, (jint) 0x00002000, (jint) 0x00802080 } count:64];
    OrgSpongycastleCryptoEnginesDESEngine_SP5 = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x00000100, (jint) 0x02080100, (jint) 0x02080000, (jint) 0x42000100, (jint) 0x00080000, (jint) 0x00000100, (jint) 0x40000000, (jint) 0x02080000, (jint) 0x40080100, (jint) 0x00080000, (jint) 0x02000100, (jint) 0x40080100, (jint) 0x42000100, (jint) 0x42080000, (jint) 0x00080100, (jint) 0x40000000, (jint) 0x02000000, (jint) 0x40080000, (jint) 0x40080000, (jint) 0x00000000, (jint) 0x40000100, (jint) 0x42080100, (jint) 0x42080100, (jint) 0x02000100, (jint) 0x42080000, (jint) 0x40000100, (jint) 0x00000000, (jint) 0x42000000, (jint) 0x02080100, (jint) 0x02000000, (jint) 0x42000000, (jint) 0x00080100, (jint) 0x00080000, (jint) 0x42000100, (jint) 0x00000100, (jint) 0x02000000, (jint) 0x40000000, (jint) 0x02080000, (jint) 0x42000100, (jint) 0x40080100, (jint) 0x02000100, (jint) 0x40000000, (jint) 0x42080000, (jint) 0x02080100, (jint) 0x40080100, (jint) 0x00000100, (jint) 0x02000000, (jint) 0x42080000, (jint) 0x42080100, (jint) 0x00080100, (jint) 0x42000000, (jint) 0x42080100, (jint) 0x02080000, (jint) 0x00000000, (jint) 0x40080000, (jint) 0x42000000, (jint) 0x00080100, (jint) 0x02000100, (jint) 0x40000100, (jint) 0x00080000, (jint) 0x00000000, (jint) 0x40080000, (jint) 0x02080100, (jint) 0x40000100 } count:64];
    OrgSpongycastleCryptoEnginesDESEngine_SP6 = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x20000010, (jint) 0x20400000, (jint) 0x00004000, (jint) 0x20404010, (jint) 0x20400000, (jint) 0x00000010, (jint) 0x20404010, (jint) 0x00400000, (jint) 0x20004000, (jint) 0x00404010, (jint) 0x00400000, (jint) 0x20000010, (jint) 0x00400010, (jint) 0x20004000, (jint) 0x20000000, (jint) 0x00004010, (jint) 0x00000000, (jint) 0x00400010, (jint) 0x20004010, (jint) 0x00004000, (jint) 0x00404000, (jint) 0x20004010, (jint) 0x00000010, (jint) 0x20400010, (jint) 0x20400010, (jint) 0x00000000, (jint) 0x00404010, (jint) 0x20404000, (jint) 0x00004010, (jint) 0x00404000, (jint) 0x20404000, (jint) 0x20000000, (jint) 0x20004000, (jint) 0x00000010, (jint) 0x20400010, (jint) 0x00404000, (jint) 0x20404010, (jint) 0x00400000, (jint) 0x00004010, (jint) 0x20000010, (jint) 0x00400000, (jint) 0x20004000, (jint) 0x20000000, (jint) 0x00004010, (jint) 0x20000010, (jint) 0x20404010, (jint) 0x00404000, (jint) 0x20400000, (jint) 0x00404010, (jint) 0x20404000, (jint) 0x00000000, (jint) 0x20400010, (jint) 0x00000010, (jint) 0x00004000, (jint) 0x20400000, (jint) 0x00404010, (jint) 0x00004000, (jint) 0x00400010, (jint) 0x20004010, (jint) 0x00000000, (jint) 0x20404000, (jint) 0x20000000, (jint) 0x00400010, (jint) 0x20004010 } count:64];
    OrgSpongycastleCryptoEnginesDESEngine_SP7 = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x00200000, (jint) 0x04200002, (jint) 0x04000802, (jint) 0x00000000, (jint) 0x00000800, (jint) 0x04000802, (jint) 0x00200802, (jint) 0x04200800, (jint) 0x04200802, (jint) 0x00200000, (jint) 0x00000000, (jint) 0x04000002, (jint) 0x00000002, (jint) 0x04000000, (jint) 0x04200002, (jint) 0x00000802, (jint) 0x04000800, (jint) 0x00200802, (jint) 0x00200002, (jint) 0x04000800, (jint) 0x04000002, (jint) 0x04200000, (jint) 0x04200800, (jint) 0x00200002, (jint) 0x04200000, (jint) 0x00000800, (jint) 0x00000802, (jint) 0x04200802, (jint) 0x00200800, (jint) 0x00000002, (jint) 0x04000000, (jint) 0x00200800, (jint) 0x04000000, (jint) 0x00200800, (jint) 0x00200000, (jint) 0x04000802, (jint) 0x04000802, (jint) 0x04200002, (jint) 0x04200002, (jint) 0x00000002, (jint) 0x00200002, (jint) 0x04000000, (jint) 0x04000800, (jint) 0x00200000, (jint) 0x04200800, (jint) 0x00000802, (jint) 0x00200802, (jint) 0x04200800, (jint) 0x00000802, (jint) 0x04000002, (jint) 0x04200802, (jint) 0x04200000, (jint) 0x00200800, (jint) 0x00000000, (jint) 0x00000002, (jint) 0x04200802, (jint) 0x00000000, (jint) 0x00200802, (jint) 0x04200000, (jint) 0x00000800, (jint) 0x04000002, (jint) 0x04000800, (jint) 0x00000800, (jint) 0x00200002 } count:64];
    OrgSpongycastleCryptoEnginesDESEngine_SP8 = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x10001040, (jint) 0x00001000, (jint) 0x00040000, (jint) 0x10041040, (jint) 0x10000000, (jint) 0x10001040, (jint) 0x00000040, (jint) 0x10000000, (jint) 0x00040040, (jint) 0x10040000, (jint) 0x10041040, (jint) 0x00041000, (jint) 0x10041000, (jint) 0x00041040, (jint) 0x00001000, (jint) 0x00000040, (jint) 0x10040000, (jint) 0x10000040, (jint) 0x10001000, (jint) 0x00001040, (jint) 0x00041000, (jint) 0x00040040, (jint) 0x10040040, (jint) 0x10041000, (jint) 0x00001040, (jint) 0x00000000, (jint) 0x00000000, (jint) 0x10040040, (jint) 0x10000040, (jint) 0x10001000, (jint) 0x00041040, (jint) 0x00040000, (jint) 0x00041040, (jint) 0x00040000, (jint) 0x10041000, (jint) 0x00001000, (jint) 0x00000040, (jint) 0x10040040, (jint) 0x00001000, (jint) 0x00041040, (jint) 0x10001000, (jint) 0x00000040, (jint) 0x10000040, (jint) 0x10040000, (jint) 0x10040040, (jint) 0x10000000, (jint) 0x00040000, (jint) 0x10001040, (jint) 0x00000000, (jint) 0x10041040, (jint) 0x00040040, (jint) 0x10000040, (jint) 0x10040000, (jint) 0x10001000, (jint) 0x10001040, (jint) 0x00000000, (jint) 0x10041040, (jint) 0x00041000, (jint) 0x00041000, (jint) 0x00001040, (jint) 0x00001040, (jint) 0x00040040, (jint) 0x10000000, (jint) 0x10041000 } count:64];
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoEnginesDESEngine)
  }
}

@end

void OrgSpongycastleCryptoEnginesDESEngine_init(OrgSpongycastleCryptoEnginesDESEngine *self) {
  NSObject_init(self);
  self->workingKey_ = nil;
}

OrgSpongycastleCryptoEnginesDESEngine *new_OrgSpongycastleCryptoEnginesDESEngine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesDESEngine, init)
}

OrgSpongycastleCryptoEnginesDESEngine *create_OrgSpongycastleCryptoEnginesDESEngine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesDESEngine, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesDESEngine)
