//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/RC2Engine.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/OutputLengthException.h"
#include "org/spongycastle/crypto/engines/RC2Engine.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/RC2Parameters.h"

@interface OrgSpongycastleCryptoEnginesRC2Engine () {
 @public
  IOSIntArray *workingKey_;
  jboolean encrypting_;
}

- (IOSIntArray *)generateWorkingKeyWithByteArray:(IOSByteArray *)key
                                         withInt:(jint)bits;

- (jint)rotateWordLeftWithInt:(jint)x
                      withInt:(jint)y;

- (void)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (void)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesRC2Engine, workingKey_, IOSIntArray *)

inline IOSByteArray *OrgSpongycastleCryptoEnginesRC2Engine_get_piTable(void);
inline IOSByteArray *OrgSpongycastleCryptoEnginesRC2Engine_set_piTable(IOSByteArray *value);
static IOSByteArray *OrgSpongycastleCryptoEnginesRC2Engine_piTable;
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastleCryptoEnginesRC2Engine, piTable, IOSByteArray *)

inline jint OrgSpongycastleCryptoEnginesRC2Engine_get_BLOCK_SIZE(void);
#define OrgSpongycastleCryptoEnginesRC2Engine_BLOCK_SIZE 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoEnginesRC2Engine, BLOCK_SIZE, jint)

__attribute__((unused)) static IOSIntArray *OrgSpongycastleCryptoEnginesRC2Engine_generateWorkingKeyWithByteArray_withInt_(OrgSpongycastleCryptoEnginesRC2Engine *self, IOSByteArray *key, jint bits);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(OrgSpongycastleCryptoEnginesRC2Engine *self, jint x, jint y);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesRC2Engine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesRC2Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesRC2Engine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesRC2Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoEnginesRC2Engine)

@implementation OrgSpongycastleCryptoEnginesRC2Engine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesRC2Engine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSIntArray *)generateWorkingKeyWithByteArray:(IOSByteArray *)key
                                         withInt:(jint)bits {
  return OrgSpongycastleCryptoEnginesRC2Engine_generateWorkingKeyWithByteArray_withInt_(self, key, bits);
}

- (void)init__WithBoolean:(jboolean)encrypting
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  self->encrypting_ = encrypting;
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsRC2Parameters class]]) {
    OrgSpongycastleCryptoParamsRC2Parameters *param = (OrgSpongycastleCryptoParamsRC2Parameters *) params;
    workingKey_ = OrgSpongycastleCryptoEnginesRC2Engine_generateWorkingKeyWithByteArray_withInt_(self, [((OrgSpongycastleCryptoParamsRC2Parameters *) nil_chk(param)) getKey], [param getEffectiveKeyBits]);
  }
  else if ([params isKindOfClass:[OrgSpongycastleCryptoParamsKeyParameter class]]) {
    IOSByteArray *key = [((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(((OrgSpongycastleCryptoParamsKeyParameter *) params))) getKey];
    workingKey_ = OrgSpongycastleCryptoEnginesRC2Engine_generateWorkingKeyWithByteArray_withInt_(self, key, ((IOSByteArray *) nil_chk(key))->size_ * 8);
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid parameter passed to RC2 init - ", [[((id<OrgSpongycastleCryptoCipherParameters>) nil_chk(params)) java_getClass] getName]));
  }
}

- (void)reset {
}

- (NSString *)getAlgorithmName {
  return @"RC2";
}

- (jint)getBlockSize {
  return OrgSpongycastleCryptoEnginesRC2Engine_BLOCK_SIZE;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (workingKey_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"RC2 engine not initialised");
  }
  if ((inOff + OrgSpongycastleCryptoEnginesRC2Engine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + OrgSpongycastleCryptoEnginesRC2Engine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  if (encrypting_) {
    OrgSpongycastleCryptoEnginesRC2Engine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
  }
  else {
    OrgSpongycastleCryptoEnginesRC2Engine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
  }
  return OrgSpongycastleCryptoEnginesRC2Engine_BLOCK_SIZE;
}

- (jint)rotateWordLeftWithInt:(jint)x
                      withInt:(jint)y {
  return OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x, y);
}

- (void)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  OrgSpongycastleCryptoEnginesRC2Engine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (void)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  OrgSpongycastleCryptoEnginesRC2Engine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(generateWorkingKeyWithByteArray:withInt:);
  methods[2].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[3].selector = @selector(reset);
  methods[4].selector = @selector(getAlgorithmName);
  methods[5].selector = @selector(getBlockSize);
  methods[6].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[7].selector = @selector(rotateWordLeftWithInt:withInt:);
  methods[8].selector = @selector(encryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[9].selector = @selector(decryptBlockWithByteArray:withInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "piTable", "[B", .constantValue.asLong = 0, 0xa, -1, 10, -1, -1 },
    { "BLOCK_SIZE", "I", .constantValue.asInt = OrgSpongycastleCryptoEnginesRC2Engine_BLOCK_SIZE, 0x1a, -1, -1, -1, -1 },
    { "workingKey_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encrypting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "generateWorkingKey", "[BI", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "processBlock", "[BI[BI", "rotateWordLeft", "II", "encryptBlock", "decryptBlock", &OrgSpongycastleCryptoEnginesRC2Engine_piTable };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesRC2Engine = { "RC2Engine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 10, 4, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesRC2Engine;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoEnginesRC2Engine class]) {
    OrgSpongycastleCryptoEnginesRC2Engine_piTable = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0xd9, (jbyte) (jint) 0x78, (jbyte) (jint) 0xf9, (jbyte) (jint) 0xc4, (jbyte) (jint) 0x19, (jbyte) (jint) 0xdd, (jbyte) (jint) 0xb5, (jbyte) (jint) 0xed, (jbyte) (jint) 0x28, (jbyte) (jint) 0xe9, (jbyte) (jint) 0xfd, (jbyte) (jint) 0x79, (jbyte) (jint) 0x4a, (jbyte) (jint) 0xa0, (jbyte) (jint) 0xd8, (jbyte) (jint) 0x9d, (jbyte) (jint) 0xc6, (jbyte) (jint) 0x7e, (jbyte) (jint) 0x37, (jbyte) (jint) 0x83, (jbyte) (jint) 0x2b, (jbyte) (jint) 0x76, (jbyte) (jint) 0x53, (jbyte) (jint) 0x8e, (jbyte) (jint) 0x62, (jbyte) (jint) 0x4c, (jbyte) (jint) 0x64, (jbyte) (jint) 0x88, (jbyte) (jint) 0x44, (jbyte) (jint) 0x8b, (jbyte) (jint) 0xfb, (jbyte) (jint) 0xa2, (jbyte) (jint) 0x17, (jbyte) (jint) 0x9a, (jbyte) (jint) 0x59, (jbyte) (jint) 0xf5, (jbyte) (jint) 0x87, (jbyte) (jint) 0xb3, (jbyte) (jint) 0x4f, (jbyte) (jint) 0x13, (jbyte) (jint) 0x61, (jbyte) (jint) 0x45, (jbyte) (jint) 0x6d, (jbyte) (jint) 0x8d, (jbyte) (jint) 0x9, (jbyte) (jint) 0x81, (jbyte) (jint) 0x7d, (jbyte) (jint) 0x32, (jbyte) (jint) 0xbd, (jbyte) (jint) 0x8f, (jbyte) (jint) 0x40, (jbyte) (jint) 0xeb, (jbyte) (jint) 0x86, (jbyte) (jint) 0xb7, (jbyte) (jint) 0x7b, (jbyte) (jint) 0xb, (jbyte) (jint) 0xf0, (jbyte) (jint) 0x95, (jbyte) (jint) 0x21, (jbyte) (jint) 0x22, (jbyte) (jint) 0x5c, (jbyte) (jint) 0x6b, (jbyte) (jint) 0x4e, (jbyte) (jint) 0x82, (jbyte) (jint) 0x54, (jbyte) (jint) 0xd6, (jbyte) (jint) 0x65, (jbyte) (jint) 0x93, (jbyte) (jint) 0xce, (jbyte) (jint) 0x60, (jbyte) (jint) 0xb2, (jbyte) (jint) 0x1c, (jbyte) (jint) 0x73, (jbyte) (jint) 0x56, (jbyte) (jint) 0xc0, (jbyte) (jint) 0x14, (jbyte) (jint) 0xa7, (jbyte) (jint) 0x8c, (jbyte) (jint) 0xf1, (jbyte) (jint) 0xdc, (jbyte) (jint) 0x12, (jbyte) (jint) 0x75, (jbyte) (jint) 0xca, (jbyte) (jint) 0x1f, (jbyte) (jint) 0x3b, (jbyte) (jint) 0xbe, (jbyte) (jint) 0xe4, (jbyte) (jint) 0xd1, (jbyte) (jint) 0x42, (jbyte) (jint) 0x3d, (jbyte) (jint) 0xd4, (jbyte) (jint) 0x30, (jbyte) (jint) 0xa3, (jbyte) (jint) 0x3c, (jbyte) (jint) 0xb6, (jbyte) (jint) 0x26, (jbyte) (jint) 0x6f, (jbyte) (jint) 0xbf, (jbyte) (jint) 0xe, (jbyte) (jint) 0xda, (jbyte) (jint) 0x46, (jbyte) (jint) 0x69, (jbyte) (jint) 0x7, (jbyte) (jint) 0x57, (jbyte) (jint) 0x27, (jbyte) (jint) 0xf2, (jbyte) (jint) 0x1d, (jbyte) (jint) 0x9b, (jbyte) (jint) 0xbc, (jbyte) (jint) 0x94, (jbyte) (jint) 0x43, (jbyte) (jint) 0x3, (jbyte) (jint) 0xf8, (jbyte) (jint) 0x11, (jbyte) (jint) 0xc7, (jbyte) (jint) 0xf6, (jbyte) (jint) 0x90, (jbyte) (jint) 0xef, (jbyte) (jint) 0x3e, (jbyte) (jint) 0xe7, (jbyte) (jint) 0x6, (jbyte) (jint) 0xc3, (jbyte) (jint) 0xd5, (jbyte) (jint) 0x2f, (jbyte) (jint) 0xc8, (jbyte) (jint) 0x66, (jbyte) (jint) 0x1e, (jbyte) (jint) 0xd7, (jbyte) (jint) 0x8, (jbyte) (jint) 0xe8, (jbyte) (jint) 0xea, (jbyte) (jint) 0xde, (jbyte) (jint) 0x80, (jbyte) (jint) 0x52, (jbyte) (jint) 0xee, (jbyte) (jint) 0xf7, (jbyte) (jint) 0x84, (jbyte) (jint) 0xaa, (jbyte) (jint) 0x72, (jbyte) (jint) 0xac, (jbyte) (jint) 0x35, (jbyte) (jint) 0x4d, (jbyte) (jint) 0x6a, (jbyte) (jint) 0x2a, (jbyte) (jint) 0x96, (jbyte) (jint) 0x1a, (jbyte) (jint) 0xd2, (jbyte) (jint) 0x71, (jbyte) (jint) 0x5a, (jbyte) (jint) 0x15, (jbyte) (jint) 0x49, (jbyte) (jint) 0x74, (jbyte) (jint) 0x4b, (jbyte) (jint) 0x9f, (jbyte) (jint) 0xd0, (jbyte) (jint) 0x5e, (jbyte) (jint) 0x4, (jbyte) (jint) 0x18, (jbyte) (jint) 0xa4, (jbyte) (jint) 0xec, (jbyte) (jint) 0xc2, (jbyte) (jint) 0xe0, (jbyte) (jint) 0x41, (jbyte) (jint) 0x6e, (jbyte) (jint) 0xf, (jbyte) (jint) 0x51, (jbyte) (jint) 0xcb, (jbyte) (jint) 0xcc, (jbyte) (jint) 0x24, (jbyte) (jint) 0x91, (jbyte) (jint) 0xaf, (jbyte) (jint) 0x50, (jbyte) (jint) 0xa1, (jbyte) (jint) 0xf4, (jbyte) (jint) 0x70, (jbyte) (jint) 0x39, (jbyte) (jint) 0x99, (jbyte) (jint) 0x7c, (jbyte) (jint) 0x3a, (jbyte) (jint) 0x85, (jbyte) (jint) 0x23, (jbyte) (jint) 0xb8, (jbyte) (jint) 0xb4, (jbyte) (jint) 0x7a, (jbyte) (jint) 0xfc, (jbyte) (jint) 0x2, (jbyte) (jint) 0x36, (jbyte) (jint) 0x5b, (jbyte) (jint) 0x25, (jbyte) (jint) 0x55, (jbyte) (jint) 0x97, (jbyte) (jint) 0x31, (jbyte) (jint) 0x2d, (jbyte) (jint) 0x5d, (jbyte) (jint) 0xfa, (jbyte) (jint) 0x98, (jbyte) (jint) 0xe3, (jbyte) (jint) 0x8a, (jbyte) (jint) 0x92, (jbyte) (jint) 0xae, (jbyte) (jint) 0x5, (jbyte) (jint) 0xdf, (jbyte) (jint) 0x29, (jbyte) (jint) 0x10, (jbyte) (jint) 0x67, (jbyte) (jint) 0x6c, (jbyte) (jint) 0xba, (jbyte) (jint) 0xc9, (jbyte) (jint) 0xd3, (jbyte) (jint) 0x0, (jbyte) (jint) 0xe6, (jbyte) (jint) 0xcf, (jbyte) (jint) 0xe1, (jbyte) (jint) 0x9e, (jbyte) (jint) 0xa8, (jbyte) (jint) 0x2c, (jbyte) (jint) 0x63, (jbyte) (jint) 0x16, (jbyte) (jint) 0x1, (jbyte) (jint) 0x3f, (jbyte) (jint) 0x58, (jbyte) (jint) 0xe2, (jbyte) (jint) 0x89, (jbyte) (jint) 0xa9, (jbyte) (jint) 0xd, (jbyte) (jint) 0x38, (jbyte) (jint) 0x34, (jbyte) (jint) 0x1b, (jbyte) (jint) 0xab, (jbyte) (jint) 0x33, (jbyte) (jint) 0xff, (jbyte) (jint) 0xb0, (jbyte) (jint) 0xbb, (jbyte) (jint) 0x48, (jbyte) (jint) 0xc, (jbyte) (jint) 0x5f, (jbyte) (jint) 0xb9, (jbyte) (jint) 0xb1, (jbyte) (jint) 0xcd, (jbyte) (jint) 0x2e, (jbyte) (jint) 0xc5, (jbyte) (jint) 0xf3, (jbyte) (jint) 0xdb, (jbyte) (jint) 0x47, (jbyte) (jint) 0xe5, (jbyte) (jint) 0xa5, (jbyte) (jint) 0x9c, (jbyte) (jint) 0x77, (jbyte) (jint) 0xa, (jbyte) (jint) 0xa6, (jbyte) (jint) 0x20, (jbyte) (jint) 0x68, (jbyte) (jint) 0xfe, (jbyte) (jint) 0x7f, (jbyte) (jint) 0xc1, (jbyte) (jint) 0xad } count:256];
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoEnginesRC2Engine)
  }
}

@end

void OrgSpongycastleCryptoEnginesRC2Engine_init(OrgSpongycastleCryptoEnginesRC2Engine *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoEnginesRC2Engine *new_OrgSpongycastleCryptoEnginesRC2Engine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesRC2Engine, init)
}

OrgSpongycastleCryptoEnginesRC2Engine *create_OrgSpongycastleCryptoEnginesRC2Engine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesRC2Engine, init)
}

IOSIntArray *OrgSpongycastleCryptoEnginesRC2Engine_generateWorkingKeyWithByteArray_withInt_(OrgSpongycastleCryptoEnginesRC2Engine *self, IOSByteArray *key, jint bits) {
  jint x;
  IOSIntArray *xKey = [IOSIntArray newArrayWithLength:128];
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(key))->size_; i++) {
    *IOSIntArray_GetRef(xKey, i) = IOSByteArray_Get(key, i) & (jint) 0xff;
  }
  jint len = key->size_;
  if (len < 128) {
    jint index = 0;
    x = IOSIntArray_Get(xKey, len - 1);
    do {
      x = IOSByteArray_Get(nil_chk(OrgSpongycastleCryptoEnginesRC2Engine_piTable), (x + IOSIntArray_Get(xKey, index++)) & 255) & (jint) 0xff;
      *IOSIntArray_GetRef(xKey, len++) = x;
    }
    while (len < 128);
  }
  len = JreRShift32((bits + 7), 3);
  x = IOSByteArray_Get(nil_chk(OrgSpongycastleCryptoEnginesRC2Engine_piTable), IOSIntArray_Get(xKey, 128 - len) & (JreRShift32(255, (7 & -bits)))) & (jint) 0xff;
  *IOSIntArray_GetRef(xKey, 128 - len) = x;
  for (jint i = 128 - len - 1; i >= 0; i--) {
    x = IOSByteArray_Get(OrgSpongycastleCryptoEnginesRC2Engine_piTable, x ^ IOSIntArray_Get(xKey, i + len)) & (jint) 0xff;
    *IOSIntArray_GetRef(xKey, i) = x;
  }
  IOSIntArray *newKey = [IOSIntArray newArrayWithLength:64];
  for (jint i = 0; i != newKey->size_; i++) {
    *IOSIntArray_GetRef(newKey, i) = (IOSIntArray_Get(xKey, 2 * i) + (JreLShift32(IOSIntArray_Get(xKey, 2 * i + 1), 8)));
  }
  return newKey;
}

jint OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(OrgSpongycastleCryptoEnginesRC2Engine *self, jint x, jint y) {
  x &= (jint) 0xffff;
  return (JreLShift32(x, y)) | (JreRShift32(x, (16 - y)));
}

void OrgSpongycastleCryptoEnginesRC2Engine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesRC2Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  jint x76;
  jint x54;
  jint x32;
  jint x10;
  x76 = (JreLShift32((IOSByteArray_Get(nil_chk(inArg), inOff + 7) & (jint) 0xff), 8)) + (IOSByteArray_Get(inArg, inOff + 6) & (jint) 0xff);
  x54 = (JreLShift32((IOSByteArray_Get(inArg, inOff + 5) & (jint) 0xff), 8)) + (IOSByteArray_Get(inArg, inOff + 4) & (jint) 0xff);
  x32 = (JreLShift32((IOSByteArray_Get(inArg, inOff + 3) & (jint) 0xff), 8)) + (IOSByteArray_Get(inArg, inOff + 2) & (jint) 0xff);
  x10 = (JreLShift32((IOSByteArray_Get(inArg, inOff + 1) & (jint) 0xff), 8)) + (IOSByteArray_Get(inArg, inOff + 0) & (jint) 0xff);
  for (jint i = 0; i <= 16; i += 4) {
    x10 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x10 + (x32 & ~x76) + (x54 & x76) + IOSIntArray_Get(nil_chk(self->workingKey_), i), 1);
    x32 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x32 + (x54 & ~x10) + (x76 & x10) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 1), 2);
    x54 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x54 + (x76 & ~x32) + (x10 & x32) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 2), 3);
    x76 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x76 + (x10 & ~x54) + (x32 & x54) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 3), 5);
  }
  x10 += IOSIntArray_Get(nil_chk(self->workingKey_), x76 & 63);
  x32 += IOSIntArray_Get(self->workingKey_, x10 & 63);
  x54 += IOSIntArray_Get(self->workingKey_, x32 & 63);
  x76 += IOSIntArray_Get(self->workingKey_, x54 & 63);
  for (jint i = 20; i <= 40; i += 4) {
    x10 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x10 + (x32 & ~x76) + (x54 & x76) + IOSIntArray_Get(nil_chk(self->workingKey_), i), 1);
    x32 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x32 + (x54 & ~x10) + (x76 & x10) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 1), 2);
    x54 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x54 + (x76 & ~x32) + (x10 & x32) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 2), 3);
    x76 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x76 + (x10 & ~x54) + (x32 & x54) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 3), 5);
  }
  x10 += IOSIntArray_Get(nil_chk(self->workingKey_), x76 & 63);
  x32 += IOSIntArray_Get(self->workingKey_, x10 & 63);
  x54 += IOSIntArray_Get(self->workingKey_, x32 & 63);
  x76 += IOSIntArray_Get(self->workingKey_, x54 & 63);
  for (jint i = 44; i < 64; i += 4) {
    x10 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x10 + (x32 & ~x76) + (x54 & x76) + IOSIntArray_Get(nil_chk(self->workingKey_), i), 1);
    x32 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x32 + (x54 & ~x10) + (x76 & x10) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 1), 2);
    x54 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x54 + (x76 & ~x32) + (x10 & x32) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 2), 3);
    x76 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x76 + (x10 & ~x54) + (x32 & x54) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 3), 5);
  }
  *IOSByteArray_GetRef(nil_chk(outArg), outOff + 0) = (jbyte) x10;
  *IOSByteArray_GetRef(outArg, outOff + 1) = (jbyte) (JreRShift32(x10, 8));
  *IOSByteArray_GetRef(outArg, outOff + 2) = (jbyte) x32;
  *IOSByteArray_GetRef(outArg, outOff + 3) = (jbyte) (JreRShift32(x32, 8));
  *IOSByteArray_GetRef(outArg, outOff + 4) = (jbyte) x54;
  *IOSByteArray_GetRef(outArg, outOff + 5) = (jbyte) (JreRShift32(x54, 8));
  *IOSByteArray_GetRef(outArg, outOff + 6) = (jbyte) x76;
  *IOSByteArray_GetRef(outArg, outOff + 7) = (jbyte) (JreRShift32(x76, 8));
}

void OrgSpongycastleCryptoEnginesRC2Engine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesRC2Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  jint x76;
  jint x54;
  jint x32;
  jint x10;
  x76 = (JreLShift32((IOSByteArray_Get(nil_chk(inArg), inOff + 7) & (jint) 0xff), 8)) + (IOSByteArray_Get(inArg, inOff + 6) & (jint) 0xff);
  x54 = (JreLShift32((IOSByteArray_Get(inArg, inOff + 5) & (jint) 0xff), 8)) + (IOSByteArray_Get(inArg, inOff + 4) & (jint) 0xff);
  x32 = (JreLShift32((IOSByteArray_Get(inArg, inOff + 3) & (jint) 0xff), 8)) + (IOSByteArray_Get(inArg, inOff + 2) & (jint) 0xff);
  x10 = (JreLShift32((IOSByteArray_Get(inArg, inOff + 1) & (jint) 0xff), 8)) + (IOSByteArray_Get(inArg, inOff + 0) & (jint) 0xff);
  for (jint i = 60; i >= 44; i -= 4) {
    x76 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x76, 11) - ((x10 & ~x54) + (x32 & x54) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 3));
    x54 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x54, 13) - ((x76 & ~x32) + (x10 & x32) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 2));
    x32 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x32, 14) - ((x54 & ~x10) + (x76 & x10) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 1));
    x10 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x10, 15) - ((x32 & ~x76) + (x54 & x76) + IOSIntArray_Get(nil_chk(self->workingKey_), i));
  }
  x76 -= IOSIntArray_Get(nil_chk(self->workingKey_), x54 & 63);
  x54 -= IOSIntArray_Get(self->workingKey_, x32 & 63);
  x32 -= IOSIntArray_Get(self->workingKey_, x10 & 63);
  x10 -= IOSIntArray_Get(self->workingKey_, x76 & 63);
  for (jint i = 40; i >= 20; i -= 4) {
    x76 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x76, 11) - ((x10 & ~x54) + (x32 & x54) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 3));
    x54 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x54, 13) - ((x76 & ~x32) + (x10 & x32) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 2));
    x32 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x32, 14) - ((x54 & ~x10) + (x76 & x10) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 1));
    x10 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x10, 15) - ((x32 & ~x76) + (x54 & x76) + IOSIntArray_Get(nil_chk(self->workingKey_), i));
  }
  x76 -= IOSIntArray_Get(self->workingKey_, x54 & 63);
  x54 -= IOSIntArray_Get(self->workingKey_, x32 & 63);
  x32 -= IOSIntArray_Get(self->workingKey_, x10 & 63);
  x10 -= IOSIntArray_Get(self->workingKey_, x76 & 63);
  for (jint i = 16; i >= 0; i -= 4) {
    x76 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x76, 11) - ((x10 & ~x54) + (x32 & x54) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 3));
    x54 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x54, 13) - ((x76 & ~x32) + (x10 & x32) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 2));
    x32 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x32, 14) - ((x54 & ~x10) + (x76 & x10) + IOSIntArray_Get(nil_chk(self->workingKey_), i + 1));
    x10 = OrgSpongycastleCryptoEnginesRC2Engine_rotateWordLeftWithInt_withInt_(self, x10, 15) - ((x32 & ~x76) + (x54 & x76) + IOSIntArray_Get(nil_chk(self->workingKey_), i));
  }
  *IOSByteArray_GetRef(nil_chk(outArg), outOff + 0) = (jbyte) x10;
  *IOSByteArray_GetRef(outArg, outOff + 1) = (jbyte) (JreRShift32(x10, 8));
  *IOSByteArray_GetRef(outArg, outOff + 2) = (jbyte) x32;
  *IOSByteArray_GetRef(outArg, outOff + 3) = (jbyte) (JreRShift32(x32, 8));
  *IOSByteArray_GetRef(outArg, outOff + 4) = (jbyte) x54;
  *IOSByteArray_GetRef(outArg, outOff + 5) = (jbyte) (JreRShift32(x54, 8));
  *IOSByteArray_GetRef(outArg, outOff + 6) = (jbyte) x76;
  *IOSByteArray_GetRef(outArg, outOff + 7) = (jbyte) (JreRShift32(x76, 8));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesRC2Engine)
