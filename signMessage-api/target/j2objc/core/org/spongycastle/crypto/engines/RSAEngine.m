//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/RSAEngine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/math/BigInteger.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/engines/RSACoreEngine.h"
#include "org/spongycastle/crypto/engines/RSAEngine.h"

@interface OrgSpongycastleCryptoEnginesRSAEngine () {
 @public
  OrgSpongycastleCryptoEnginesRSACoreEngine *core_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesRSAEngine, core_, OrgSpongycastleCryptoEnginesRSACoreEngine *)

@implementation OrgSpongycastleCryptoEnginesRSAEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesRSAEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  if (core_ == nil) {
    core_ = new_OrgSpongycastleCryptoEnginesRSACoreEngine_init();
  }
  [core_ init__WithBoolean:forEncryption withOrgSpongycastleCryptoCipherParameters:param];
}

- (jint)getInputBlockSize {
  return [((OrgSpongycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) getInputBlockSize];
}

- (jint)getOutputBlockSize {
  return [((OrgSpongycastleCryptoEnginesRSACoreEngine *) nil_chk(core_)) getOutputBlockSize];
}

- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen {
  if (core_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"RSA engine not initialised");
  }
  return [core_ convertOutputWithJavaMathBigInteger:[core_ processBlockWithJavaMathBigInteger:[core_ convertInputWithByteArray:inArg withInt:inOff withInt:inLen]]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[2].selector = @selector(getInputBlockSize);
  methods[3].selector = @selector(getOutputBlockSize);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "core_", "LOrgSpongycastleCryptoEnginesRSACoreEngine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;", "processBlock", "[BII" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesRSAEngine = { "RSAEngine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesRSAEngine;
}

@end

void OrgSpongycastleCryptoEnginesRSAEngine_init(OrgSpongycastleCryptoEnginesRSAEngine *self) {
  NSObject_init(self);
}

OrgSpongycastleCryptoEnginesRSAEngine *new_OrgSpongycastleCryptoEnginesRSAEngine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesRSAEngine, init)
}

OrgSpongycastleCryptoEnginesRSAEngine *create_OrgSpongycastleCryptoEnginesRSAEngine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesRSAEngine, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesRSAEngine)
