//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/HC128Engine.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/OutputLengthException.h"
#include "org/spongycastle/crypto/engines/HC128Engine.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"

@interface OrgSpongycastleCryptoEnginesHC128Engine () {
 @public
  IOSIntArray *p_;
  IOSIntArray *q_;
  jint cnt_;
  IOSByteArray *key_;
  IOSByteArray *iv_;
  jboolean initialised_;
  IOSByteArray *buf_;
  jint idx_;
}

+ (jint)f1WithInt:(jint)x;

+ (jint)f2WithInt:(jint)x;

- (jint)g1WithInt:(jint)x
          withInt:(jint)y
          withInt:(jint)z;

- (jint)g2WithInt:(jint)x
          withInt:(jint)y
          withInt:(jint)z;

+ (jint)rotateLeftWithInt:(jint)x
                  withInt:(jint)bits;

+ (jint)rotateRightWithInt:(jint)x
                   withInt:(jint)bits;

- (jint)h1WithInt:(jint)x;

- (jint)h2WithInt:(jint)x;

+ (jint)mod1024WithInt:(jint)x;

+ (jint)mod512WithInt:(jint)x;

+ (jint)dimWithInt:(jint)x
           withInt:(jint)y;

- (jint)step;

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (jbyte)getByte;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesHC128Engine, p_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesHC128Engine, q_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesHC128Engine, key_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesHC128Engine, iv_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesHC128Engine, buf_, IOSByteArray *)

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesHC128Engine_f1WithInt_(jint x);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesHC128Engine_f2WithInt_(jint x);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesHC128Engine_g1WithInt_withInt_withInt_(OrgSpongycastleCryptoEnginesHC128Engine *self, jint x, jint y, jint z);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesHC128Engine_g2WithInt_withInt_withInt_(OrgSpongycastleCryptoEnginesHC128Engine *self, jint x, jint y, jint z);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesHC128Engine_rotateLeftWithInt_withInt_(jint x, jint bits);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesHC128Engine_rotateRightWithInt_withInt_(jint x, jint bits);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesHC128Engine_h1WithInt_(OrgSpongycastleCryptoEnginesHC128Engine *self, jint x);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesHC128Engine_h2WithInt_(OrgSpongycastleCryptoEnginesHC128Engine *self, jint x);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesHC128Engine_mod1024WithInt_(jint x);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesHC128Engine_mod512WithInt_(jint x);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesHC128Engine_dimWithInt_withInt_(jint x, jint y);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesHC128Engine_step(OrgSpongycastleCryptoEnginesHC128Engine *self);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesHC128Engine_init__(OrgSpongycastleCryptoEnginesHC128Engine *self);

__attribute__((unused)) static jbyte OrgSpongycastleCryptoEnginesHC128Engine_getByte(OrgSpongycastleCryptoEnginesHC128Engine *self);

@implementation OrgSpongycastleCryptoEnginesHC128Engine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesHC128Engine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)f1WithInt:(jint)x {
  return OrgSpongycastleCryptoEnginesHC128Engine_f1WithInt_(x);
}

+ (jint)f2WithInt:(jint)x {
  return OrgSpongycastleCryptoEnginesHC128Engine_f2WithInt_(x);
}

- (jint)g1WithInt:(jint)x
          withInt:(jint)y
          withInt:(jint)z {
  return OrgSpongycastleCryptoEnginesHC128Engine_g1WithInt_withInt_withInt_(self, x, y, z);
}

- (jint)g2WithInt:(jint)x
          withInt:(jint)y
          withInt:(jint)z {
  return OrgSpongycastleCryptoEnginesHC128Engine_g2WithInt_withInt_withInt_(self, x, y, z);
}

+ (jint)rotateLeftWithInt:(jint)x
                  withInt:(jint)bits {
  return OrgSpongycastleCryptoEnginesHC128Engine_rotateLeftWithInt_withInt_(x, bits);
}

+ (jint)rotateRightWithInt:(jint)x
                   withInt:(jint)bits {
  return OrgSpongycastleCryptoEnginesHC128Engine_rotateRightWithInt_withInt_(x, bits);
}

- (jint)h1WithInt:(jint)x {
  return OrgSpongycastleCryptoEnginesHC128Engine_h1WithInt_(self, x);
}

- (jint)h2WithInt:(jint)x {
  return OrgSpongycastleCryptoEnginesHC128Engine_h2WithInt_(self, x);
}

+ (jint)mod1024WithInt:(jint)x {
  return OrgSpongycastleCryptoEnginesHC128Engine_mod1024WithInt_(x);
}

+ (jint)mod512WithInt:(jint)x {
  return OrgSpongycastleCryptoEnginesHC128Engine_mod512WithInt_(x);
}

+ (jint)dimWithInt:(jint)x
           withInt:(jint)y {
  return OrgSpongycastleCryptoEnginesHC128Engine_dimWithInt_withInt_(x, y);
}

- (jint)step {
  return OrgSpongycastleCryptoEnginesHC128Engine_step(self);
}

- (void)init__ {
  OrgSpongycastleCryptoEnginesHC128Engine_init__(self);
}

- (NSString *)getAlgorithmName {
  return @"HC-128";
}

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  id<OrgSpongycastleCryptoCipherParameters> keyParam = params;
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithIV class]]) {
    iv_ = [((OrgSpongycastleCryptoParamsParametersWithIV *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithIV *) params))) getIV];
    keyParam = [((OrgSpongycastleCryptoParamsParametersWithIV *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithIV *) params))) getParameters];
  }
  else {
    iv_ = [IOSByteArray newArrayWithLength:0];
  }
  if ([keyParam isKindOfClass:[OrgSpongycastleCryptoParamsKeyParameter class]]) {
    key_ = [((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(((OrgSpongycastleCryptoParamsKeyParameter *) keyParam))) getKey];
    OrgSpongycastleCryptoEnginesHC128Engine_init__(self);
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid parameter passed to HC128 init - ", [[((id<OrgSpongycastleCryptoCipherParameters>) nil_chk(params)) java_getClass] getName]));
  }
  initialised_ = true;
}

- (jbyte)getByte {
  return OrgSpongycastleCryptoEnginesHC128Engine_getByte(self);
}

- (jint)processBytesWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                          withInt:(jint)len
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (!initialised_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", [self getAlgorithmName], @" not initialised"));
  }
  if ((inOff + len) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + len) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  for (jint i = 0; i < len; i++) {
    *IOSByteArray_GetRef(outArg, outOff + i) = (jbyte) (IOSByteArray_Get(inArg, inOff + i) ^ OrgSpongycastleCryptoEnginesHC128Engine_getByte(self));
  }
  return len;
}

- (void)reset {
  OrgSpongycastleCryptoEnginesHC128Engine_init__(self);
}

- (jbyte)returnByteWithByte:(jbyte)inArg {
  return (jbyte) (inArg ^ OrgSpongycastleCryptoEnginesHC128Engine_getByte(self));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 5, 4, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 8, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 9, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 10, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 11, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 12, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 13, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 16, -1, -1, -1 },
    { NULL, "B", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, 18, 19, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, 20, 21, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(f1WithInt:);
  methods[2].selector = @selector(f2WithInt:);
  methods[3].selector = @selector(g1WithInt:withInt:withInt:);
  methods[4].selector = @selector(g2WithInt:withInt:withInt:);
  methods[5].selector = @selector(rotateLeftWithInt:withInt:);
  methods[6].selector = @selector(rotateRightWithInt:withInt:);
  methods[7].selector = @selector(h1WithInt:);
  methods[8].selector = @selector(h2WithInt:);
  methods[9].selector = @selector(mod1024WithInt:);
  methods[10].selector = @selector(mod512WithInt:);
  methods[11].selector = @selector(dimWithInt:withInt:);
  methods[12].selector = @selector(step);
  methods[13].selector = @selector(init__);
  methods[14].selector = @selector(getAlgorithmName);
  methods[15].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[16].selector = @selector(getByte);
  methods[17].selector = @selector(processBytesWithByteArray:withInt:withInt:withByteArray:withInt:);
  methods[18].selector = @selector(reset);
  methods[19].selector = @selector(returnByteWithByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "p_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "q_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cnt_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "key_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iv_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "initialised_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "idx_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "f1", "I", "f2", "g1", "III", "g2", "rotateLeft", "II", "rotateRight", "h1", "h2", "mod1024", "mod512", "dim", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "LJavaLangIllegalArgumentException;", "processBytes", "[BII[BI", "LOrgSpongycastleCryptoDataLengthException;", "returnByte", "B" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesHC128Engine = { "HC128Engine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 20, 8, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesHC128Engine;
}

@end

void OrgSpongycastleCryptoEnginesHC128Engine_init(OrgSpongycastleCryptoEnginesHC128Engine *self) {
  NSObject_init(self);
  self->p_ = [IOSIntArray newArrayWithLength:512];
  self->q_ = [IOSIntArray newArrayWithLength:512];
  self->cnt_ = 0;
  self->buf_ = [IOSByteArray newArrayWithLength:4];
  self->idx_ = 0;
}

OrgSpongycastleCryptoEnginesHC128Engine *new_OrgSpongycastleCryptoEnginesHC128Engine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesHC128Engine, init)
}

OrgSpongycastleCryptoEnginesHC128Engine *create_OrgSpongycastleCryptoEnginesHC128Engine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesHC128Engine, init)
}

jint OrgSpongycastleCryptoEnginesHC128Engine_f1WithInt_(jint x) {
  OrgSpongycastleCryptoEnginesHC128Engine_initialize();
  return OrgSpongycastleCryptoEnginesHC128Engine_rotateRightWithInt_withInt_(x, 7) ^ OrgSpongycastleCryptoEnginesHC128Engine_rotateRightWithInt_withInt_(x, 18) ^ (JreURShift32(x, 3));
}

jint OrgSpongycastleCryptoEnginesHC128Engine_f2WithInt_(jint x) {
  OrgSpongycastleCryptoEnginesHC128Engine_initialize();
  return OrgSpongycastleCryptoEnginesHC128Engine_rotateRightWithInt_withInt_(x, 17) ^ OrgSpongycastleCryptoEnginesHC128Engine_rotateRightWithInt_withInt_(x, 19) ^ (JreURShift32(x, 10));
}

jint OrgSpongycastleCryptoEnginesHC128Engine_g1WithInt_withInt_withInt_(OrgSpongycastleCryptoEnginesHC128Engine *self, jint x, jint y, jint z) {
  return (OrgSpongycastleCryptoEnginesHC128Engine_rotateRightWithInt_withInt_(x, 10) ^ OrgSpongycastleCryptoEnginesHC128Engine_rotateRightWithInt_withInt_(z, 23)) + OrgSpongycastleCryptoEnginesHC128Engine_rotateRightWithInt_withInt_(y, 8);
}

jint OrgSpongycastleCryptoEnginesHC128Engine_g2WithInt_withInt_withInt_(OrgSpongycastleCryptoEnginesHC128Engine *self, jint x, jint y, jint z) {
  return (OrgSpongycastleCryptoEnginesHC128Engine_rotateLeftWithInt_withInt_(x, 10) ^ OrgSpongycastleCryptoEnginesHC128Engine_rotateLeftWithInt_withInt_(z, 23)) + OrgSpongycastleCryptoEnginesHC128Engine_rotateLeftWithInt_withInt_(y, 8);
}

jint OrgSpongycastleCryptoEnginesHC128Engine_rotateLeftWithInt_withInt_(jint x, jint bits) {
  OrgSpongycastleCryptoEnginesHC128Engine_initialize();
  return (JreLShift32(x, bits)) | (JreURShift32(x, -bits));
}

jint OrgSpongycastleCryptoEnginesHC128Engine_rotateRightWithInt_withInt_(jint x, jint bits) {
  OrgSpongycastleCryptoEnginesHC128Engine_initialize();
  return (JreURShift32(x, bits)) | (JreLShift32(x, -bits));
}

jint OrgSpongycastleCryptoEnginesHC128Engine_h1WithInt_(OrgSpongycastleCryptoEnginesHC128Engine *self, jint x) {
  return IOSIntArray_Get(nil_chk(self->q_), x & (jint) 0xFF) + IOSIntArray_Get(self->q_, ((JreRShift32(x, 16)) & (jint) 0xFF) + 256);
}

jint OrgSpongycastleCryptoEnginesHC128Engine_h2WithInt_(OrgSpongycastleCryptoEnginesHC128Engine *self, jint x) {
  return IOSIntArray_Get(nil_chk(self->p_), x & (jint) 0xFF) + IOSIntArray_Get(self->p_, ((JreRShift32(x, 16)) & (jint) 0xFF) + 256);
}

jint OrgSpongycastleCryptoEnginesHC128Engine_mod1024WithInt_(jint x) {
  OrgSpongycastleCryptoEnginesHC128Engine_initialize();
  return x & (jint) 0x3FF;
}

jint OrgSpongycastleCryptoEnginesHC128Engine_mod512WithInt_(jint x) {
  OrgSpongycastleCryptoEnginesHC128Engine_initialize();
  return x & (jint) 0x1FF;
}

jint OrgSpongycastleCryptoEnginesHC128Engine_dimWithInt_withInt_(jint x, jint y) {
  OrgSpongycastleCryptoEnginesHC128Engine_initialize();
  return OrgSpongycastleCryptoEnginesHC128Engine_mod512WithInt_(x - y);
}

jint OrgSpongycastleCryptoEnginesHC128Engine_step(OrgSpongycastleCryptoEnginesHC128Engine *self) {
  jint j = OrgSpongycastleCryptoEnginesHC128Engine_mod512WithInt_(self->cnt_);
  jint ret;
  if (self->cnt_ < 512) {
    *IOSIntArray_GetRef(nil_chk(self->p_), j) += OrgSpongycastleCryptoEnginesHC128Engine_g1WithInt_withInt_withInt_(self, IOSIntArray_Get(nil_chk(self->p_), OrgSpongycastleCryptoEnginesHC128Engine_dimWithInt_withInt_(j, 3)), IOSIntArray_Get(nil_chk(self->p_), OrgSpongycastleCryptoEnginesHC128Engine_dimWithInt_withInt_(j, 10)), IOSIntArray_Get(nil_chk(self->p_), OrgSpongycastleCryptoEnginesHC128Engine_dimWithInt_withInt_(j, 511)));
    ret = OrgSpongycastleCryptoEnginesHC128Engine_h1WithInt_(self, IOSIntArray_Get(nil_chk(self->p_), OrgSpongycastleCryptoEnginesHC128Engine_dimWithInt_withInt_(j, 12))) ^ IOSIntArray_Get(nil_chk(self->p_), j);
  }
  else {
    *IOSIntArray_GetRef(nil_chk(self->q_), j) += OrgSpongycastleCryptoEnginesHC128Engine_g2WithInt_withInt_withInt_(self, IOSIntArray_Get(nil_chk(self->q_), OrgSpongycastleCryptoEnginesHC128Engine_dimWithInt_withInt_(j, 3)), IOSIntArray_Get(nil_chk(self->q_), OrgSpongycastleCryptoEnginesHC128Engine_dimWithInt_withInt_(j, 10)), IOSIntArray_Get(nil_chk(self->q_), OrgSpongycastleCryptoEnginesHC128Engine_dimWithInt_withInt_(j, 511)));
    ret = OrgSpongycastleCryptoEnginesHC128Engine_h2WithInt_(self, IOSIntArray_Get(nil_chk(self->q_), OrgSpongycastleCryptoEnginesHC128Engine_dimWithInt_withInt_(j, 12))) ^ IOSIntArray_Get(nil_chk(self->q_), j);
  }
  self->cnt_ = OrgSpongycastleCryptoEnginesHC128Engine_mod1024WithInt_(self->cnt_ + 1);
  return ret;
}

void OrgSpongycastleCryptoEnginesHC128Engine_init__(OrgSpongycastleCryptoEnginesHC128Engine *self) {
  if (((IOSByteArray *) nil_chk(self->key_))->size_ != 16) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The key must be 128 bits long");
  }
  self->idx_ = 0;
  self->cnt_ = 0;
  IOSIntArray *w = [IOSIntArray newArrayWithLength:1280];
  for (jint i = 0; i < 16; i++) {
    *IOSIntArray_GetRef(w, JreRShift32(i, 2)) |= JreLShift32((IOSByteArray_Get(self->key_, i) & (jint) 0xff), (8 * (i & (jint) 0x3)));
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(w, 0, w, 4, 4);
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(self->iv_))->size_ && i < 16; i++) {
    *IOSIntArray_GetRef(w, (JreRShift32(i, 2)) + 8) |= JreLShift32((IOSByteArray_Get(self->iv_, i) & (jint) 0xff), (8 * (i & (jint) 0x3)));
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(w, 8, w, 12, 4);
  for (jint i = 16; i < 1280; i++) {
    *IOSIntArray_GetRef(w, i) = OrgSpongycastleCryptoEnginesHC128Engine_f2WithInt_(IOSIntArray_Get(w, i - 2)) + IOSIntArray_Get(w, i - 7) + OrgSpongycastleCryptoEnginesHC128Engine_f1WithInt_(IOSIntArray_Get(w, i - 15)) + IOSIntArray_Get(w, i - 16) + i;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(w, 256, self->p_, 0, 512);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(w, 768, self->q_, 0, 512);
  for (jint i = 0; i < 512; i++) {
    *IOSIntArray_GetRef(nil_chk(self->p_), i) = OrgSpongycastleCryptoEnginesHC128Engine_step(self);
  }
  for (jint i = 0; i < 512; i++) {
    *IOSIntArray_GetRef(nil_chk(self->q_), i) = OrgSpongycastleCryptoEnginesHC128Engine_step(self);
  }
  self->cnt_ = 0;
}

jbyte OrgSpongycastleCryptoEnginesHC128Engine_getByte(OrgSpongycastleCryptoEnginesHC128Engine *self) {
  if (self->idx_ == 0) {
    jint step = OrgSpongycastleCryptoEnginesHC128Engine_step(self);
    *IOSByteArray_GetRef(nil_chk(self->buf_), 0) = (jbyte) (step & (jint) 0xFF);
    JreRShiftAssignInt(&step, 8);
    *IOSByteArray_GetRef(self->buf_, 1) = (jbyte) (step & (jint) 0xFF);
    JreRShiftAssignInt(&step, 8);
    *IOSByteArray_GetRef(self->buf_, 2) = (jbyte) (step & (jint) 0xFF);
    JreRShiftAssignInt(&step, 8);
    *IOSByteArray_GetRef(self->buf_, 3) = (jbyte) (step & (jint) 0xFF);
  }
  jbyte ret = IOSByteArray_Get(nil_chk(self->buf_), self->idx_);
  self->idx_ = (self->idx_ + 1) & (jint) 0x3;
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesHC128Engine)
