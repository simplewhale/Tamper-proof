//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/SM2Engine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/InvalidCipherTextException.h"
#include "org/spongycastle/crypto/digests/SM3Digest.h"
#include "org/spongycastle/crypto/engines/SM2Engine.h"
#include "org/spongycastle/crypto/params/ECDomainParameters.h"
#include "org/spongycastle/crypto/params/ECKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/ECPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/math/ec/ECConstants.h"
#include "org/spongycastle/math/ec/ECCurve.h"
#include "org/spongycastle/math/ec/ECFieldElement.h"
#include "org/spongycastle/math/ec/ECPoint.h"
#include "org/spongycastle/util/Arrays.h"
#include "org/spongycastle/util/BigIntegers.h"

@interface OrgSpongycastleCryptoEnginesSM2Engine () {
 @public
  id<OrgSpongycastleCryptoDigest> digest_;
  jboolean forEncryption_;
  OrgSpongycastleCryptoParamsECKeyParameters *ecKey_;
  OrgSpongycastleCryptoParamsECDomainParameters *ecParams_;
  jint curveLength_;
  JavaSecuritySecureRandom *random_;
}

- (IOSByteArray *)encryptWithByteArray:(IOSByteArray *)inArg
                               withInt:(jint)inOff
                               withInt:(jint)inLen;

- (IOSByteArray *)decryptWithByteArray:(IOSByteArray *)inArg
                               withInt:(jint)inOff
                               withInt:(jint)inLen;

- (jboolean)notEncryptedWithByteArray:(IOSByteArray *)encData
                        withByteArray:(IOSByteArray *)inArg
                              withInt:(jint)inOff;

- (void)kdfWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
          withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)c1
                             withByteArray:(IOSByteArray *)encData;

- (void)xor__WithByteArray:(IOSByteArray *)data
             withByteArray:(IOSByteArray *)kdfOut
                   withInt:(jint)dOff
                   withInt:(jint)dRemaining;

- (JavaMathBigInteger *)nextK;

- (void)addFieldElementWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
               withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)v;

- (void)clearBlockWithByteArray:(IOSByteArray *)block;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesSM2Engine, digest_, id<OrgSpongycastleCryptoDigest>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesSM2Engine, ecKey_, OrgSpongycastleCryptoParamsECKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesSM2Engine, ecParams_, OrgSpongycastleCryptoParamsECDomainParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesSM2Engine, random_, JavaSecuritySecureRandom *)

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoEnginesSM2Engine_encryptWithByteArray_withInt_withInt_(OrgSpongycastleCryptoEnginesSM2Engine *self, IOSByteArray *inArg, jint inOff, jint inLen);

__attribute__((unused)) static IOSByteArray *OrgSpongycastleCryptoEnginesSM2Engine_decryptWithByteArray_withInt_withInt_(OrgSpongycastleCryptoEnginesSM2Engine *self, IOSByteArray *inArg, jint inOff, jint inLen);

__attribute__((unused)) static jboolean OrgSpongycastleCryptoEnginesSM2Engine_notEncryptedWithByteArray_withByteArray_withInt_(OrgSpongycastleCryptoEnginesSM2Engine *self, IOSByteArray *encData, IOSByteArray *inArg, jint inOff);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesSM2Engine_kdfWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_(OrgSpongycastleCryptoEnginesSM2Engine *self, id<OrgSpongycastleCryptoDigest> digest, OrgSpongycastleMathEcECPoint *c1, IOSByteArray *encData);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesSM2Engine_xor__WithByteArray_withByteArray_withInt_withInt_(OrgSpongycastleCryptoEnginesSM2Engine *self, IOSByteArray *data, IOSByteArray *kdfOut, jint dOff, jint dRemaining);

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleCryptoEnginesSM2Engine_nextK(OrgSpongycastleCryptoEnginesSM2Engine *self);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesSM2Engine_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(OrgSpongycastleCryptoEnginesSM2Engine *self, id<OrgSpongycastleCryptoDigest> digest, OrgSpongycastleMathEcECFieldElement *v);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesSM2Engine_clearBlockWithByteArray_(OrgSpongycastleCryptoEnginesSM2Engine *self, IOSByteArray *block);

@implementation OrgSpongycastleCryptoEnginesSM2Engine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesSM2Engine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest {
  OrgSpongycastleCryptoEnginesSM2Engine_initWithOrgSpongycastleCryptoDigest_(self, digest);
  return self;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  self->forEncryption_ = forEncryption;
  if (forEncryption) {
    OrgSpongycastleCryptoParamsParametersWithRandom *rParam = (OrgSpongycastleCryptoParamsParametersWithRandom *) cast_chk(param, [OrgSpongycastleCryptoParamsParametersWithRandom class]);
    ecKey_ = (OrgSpongycastleCryptoParamsECKeyParameters *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getParameters], [OrgSpongycastleCryptoParamsECKeyParameters class]);
    ecParams_ = [((OrgSpongycastleCryptoParamsECKeyParameters *) nil_chk(ecKey_)) getParameters];
    OrgSpongycastleMathEcECPoint *s = [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(((OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk(ecKey_, [OrgSpongycastleCryptoParamsECPublicKeyParameters class])))) getQ])) multiplyWithJavaMathBigInteger:[((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getH]];
    if ([((OrgSpongycastleMathEcECPoint *) nil_chk(s)) isInfinity]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"invalid key: [h]Q at infinity");
    }
    random_ = [rParam getRandom];
  }
  else {
    ecKey_ = (OrgSpongycastleCryptoParamsECKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsECKeyParameters class]);
    ecParams_ = [((OrgSpongycastleCryptoParamsECKeyParameters *) nil_chk(ecKey_)) getParameters];
  }
  curveLength_ = ([((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(ecParams_)) getCurve])) getFieldSize] + 7) / 8;
}

- (IOSByteArray *)processBlockWithByteArray:(IOSByteArray *)inArg
                                    withInt:(jint)inOff
                                    withInt:(jint)inLen {
  if (forEncryption_) {
    return OrgSpongycastleCryptoEnginesSM2Engine_encryptWithByteArray_withInt_withInt_(self, inArg, inOff, inLen);
  }
  else {
    return OrgSpongycastleCryptoEnginesSM2Engine_decryptWithByteArray_withInt_withInt_(self, inArg, inOff, inLen);
  }
}

- (IOSByteArray *)encryptWithByteArray:(IOSByteArray *)inArg
                               withInt:(jint)inOff
                               withInt:(jint)inLen {
  return OrgSpongycastleCryptoEnginesSM2Engine_encryptWithByteArray_withInt_withInt_(self, inArg, inOff, inLen);
}

- (IOSByteArray *)decryptWithByteArray:(IOSByteArray *)inArg
                               withInt:(jint)inOff
                               withInt:(jint)inLen {
  return OrgSpongycastleCryptoEnginesSM2Engine_decryptWithByteArray_withInt_withInt_(self, inArg, inOff, inLen);
}

- (jboolean)notEncryptedWithByteArray:(IOSByteArray *)encData
                        withByteArray:(IOSByteArray *)inArg
                              withInt:(jint)inOff {
  return OrgSpongycastleCryptoEnginesSM2Engine_notEncryptedWithByteArray_withByteArray_withInt_(self, encData, inArg, inOff);
}

- (void)kdfWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
          withOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)c1
                             withByteArray:(IOSByteArray *)encData {
  OrgSpongycastleCryptoEnginesSM2Engine_kdfWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_(self, digest, c1, encData);
}

- (void)xor__WithByteArray:(IOSByteArray *)data
             withByteArray:(IOSByteArray *)kdfOut
                   withInt:(jint)dOff
                   withInt:(jint)dRemaining {
  OrgSpongycastleCryptoEnginesSM2Engine_xor__WithByteArray_withByteArray_withInt_withInt_(self, data, kdfOut, dOff, dRemaining);
}

- (JavaMathBigInteger *)nextK {
  return OrgSpongycastleCryptoEnginesSM2Engine_nextK(self);
}

- (void)addFieldElementWithOrgSpongycastleCryptoDigest:(id<OrgSpongycastleCryptoDigest>)digest
               withOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)v {
  OrgSpongycastleCryptoEnginesSM2Engine_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, v);
}

- (void)clearBlockWithByteArray:(IOSByteArray *)block {
  OrgSpongycastleCryptoEnginesSM2Engine_clearBlockWithByteArray_(self, block);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "[B", 0x2, 6, 4, 5, -1, -1, -1 },
    { NULL, "[B", 0x2, 7, 4, 5, -1, -1, -1 },
    { NULL, "Z", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoDigest:);
  methods[2].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[3].selector = @selector(processBlockWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(encryptWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(decryptWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(notEncryptedWithByteArray:withByteArray:withInt:);
  methods[7].selector = @selector(kdfWithOrgSpongycastleCryptoDigest:withOrgSpongycastleMathEcECPoint:withByteArray:);
  methods[8].selector = @selector(xor__WithByteArray:withByteArray:withInt:withInt:);
  methods[9].selector = @selector(nextK);
  methods[10].selector = @selector(addFieldElementWithOrgSpongycastleCryptoDigest:withOrgSpongycastleMathEcECFieldElement:);
  methods[11].selector = @selector(clearBlockWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "digest_", "LOrgSpongycastleCryptoDigest;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ecKey_", "LOrgSpongycastleCryptoParamsECKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ecParams_", "LOrgSpongycastleCryptoParamsECDomainParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "curveLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoDigest;", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "processBlock", "[BII", "LOrgSpongycastleCryptoInvalidCipherTextException;", "encrypt", "decrypt", "notEncrypted", "[B[BI", "kdf", "LOrgSpongycastleCryptoDigest;LOrgSpongycastleMathEcECPoint;[B", "xor", "[B[BII", "addFieldElement", "LOrgSpongycastleCryptoDigest;LOrgSpongycastleMathEcECFieldElement;", "clearBlock", "[B" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesSM2Engine = { "SM2Engine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 12, 6, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesSM2Engine;
}

@end

void OrgSpongycastleCryptoEnginesSM2Engine_init(OrgSpongycastleCryptoEnginesSM2Engine *self) {
  OrgSpongycastleCryptoEnginesSM2Engine_initWithOrgSpongycastleCryptoDigest_(self, new_OrgSpongycastleCryptoDigestsSM3Digest_init());
}

OrgSpongycastleCryptoEnginesSM2Engine *new_OrgSpongycastleCryptoEnginesSM2Engine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesSM2Engine, init)
}

OrgSpongycastleCryptoEnginesSM2Engine *create_OrgSpongycastleCryptoEnginesSM2Engine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesSM2Engine, init)
}

void OrgSpongycastleCryptoEnginesSM2Engine_initWithOrgSpongycastleCryptoDigest_(OrgSpongycastleCryptoEnginesSM2Engine *self, id<OrgSpongycastleCryptoDigest> digest) {
  NSObject_init(self);
  self->digest_ = digest;
}

OrgSpongycastleCryptoEnginesSM2Engine *new_OrgSpongycastleCryptoEnginesSM2Engine_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesSM2Engine, initWithOrgSpongycastleCryptoDigest_, digest)
}

OrgSpongycastleCryptoEnginesSM2Engine *create_OrgSpongycastleCryptoEnginesSM2Engine_initWithOrgSpongycastleCryptoDigest_(id<OrgSpongycastleCryptoDigest> digest) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesSM2Engine, initWithOrgSpongycastleCryptoDigest_, digest)
}

IOSByteArray *OrgSpongycastleCryptoEnginesSM2Engine_encryptWithByteArray_withInt_withInt_(OrgSpongycastleCryptoEnginesSM2Engine *self, IOSByteArray *inArg, jint inOff, jint inLen) {
  IOSByteArray *c2 = [IOSByteArray newArrayWithLength:inLen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, c2, 0, c2->size_);
  IOSByteArray *c1;
  OrgSpongycastleMathEcECPoint *kPB;
  do {
    JavaMathBigInteger *k = OrgSpongycastleCryptoEnginesSM2Engine_nextK(self);
    OrgSpongycastleMathEcECPoint *c1P = [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getG])) multiplyWithJavaMathBigInteger:k])) normalize];
    c1 = [((OrgSpongycastleMathEcECPoint *) nil_chk(c1P)) getEncodedWithBoolean:false];
    kPB = [((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleMathEcECPoint *) nil_chk([((OrgSpongycastleCryptoParamsECPublicKeyParameters *) nil_chk(((OrgSpongycastleCryptoParamsECPublicKeyParameters *) cast_chk(self->ecKey_, [OrgSpongycastleCryptoParamsECPublicKeyParameters class])))) getQ])) multiplyWithJavaMathBigInteger:k])) normalize];
    OrgSpongycastleCryptoEnginesSM2Engine_kdfWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_(self, self->digest_, kPB, c2);
  }
  while (OrgSpongycastleCryptoEnginesSM2Engine_notEncryptedWithByteArray_withByteArray_withInt_(self, c2, inArg, inOff));
  IOSByteArray *c3 = [IOSByteArray newArrayWithLength:[((id<OrgSpongycastleCryptoDigest>) nil_chk(self->digest_)) getDigestSize]];
  OrgSpongycastleCryptoEnginesSM2Engine_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, self->digest_, [((OrgSpongycastleMathEcECPoint *) nil_chk(kPB)) getAffineXCoord]);
  [self->digest_ updateWithByteArray:inArg withInt:inOff withInt:inLen];
  OrgSpongycastleCryptoEnginesSM2Engine_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, self->digest_, [kPB getAffineYCoord]);
  [self->digest_ doFinalWithByteArray:c3 withInt:0];
  return OrgSpongycastleUtilArrays_concatenateWithByteArray_withByteArray_withByteArray_(c1, c2, c3);
}

IOSByteArray *OrgSpongycastleCryptoEnginesSM2Engine_decryptWithByteArray_withInt_withInt_(OrgSpongycastleCryptoEnginesSM2Engine *self, IOSByteArray *inArg, jint inOff, jint inLen) {
  IOSByteArray *c1 = [IOSByteArray newArrayWithLength:self->curveLength_ * 2 + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, c1, 0, c1->size_);
  OrgSpongycastleMathEcECPoint *c1P = [((OrgSpongycastleMathEcECCurve *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getCurve])) decodePointWithByteArray:c1];
  OrgSpongycastleMathEcECPoint *s = [((OrgSpongycastleMathEcECPoint *) nil_chk(c1P)) multiplyWithJavaMathBigInteger:[((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getH]];
  if ([((OrgSpongycastleMathEcECPoint *) nil_chk(s)) isInfinity]) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"[h]C1 at infinity");
  }
  c1P = [((OrgSpongycastleMathEcECPoint *) nil_chk([c1P multiplyWithJavaMathBigInteger:[((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) nil_chk(((OrgSpongycastleCryptoParamsECPrivateKeyParameters *) cast_chk(self->ecKey_, [OrgSpongycastleCryptoParamsECPrivateKeyParameters class])))) getD]])) normalize];
  IOSByteArray *c2 = [IOSByteArray newArrayWithLength:inLen - c1->size_ - [((id<OrgSpongycastleCryptoDigest>) nil_chk(self->digest_)) getDigestSize]];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff + c1->size_, c2, 0, c2->size_);
  OrgSpongycastleCryptoEnginesSM2Engine_kdfWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_(self, self->digest_, c1P, c2);
  IOSByteArray *c3 = [IOSByteArray newArrayWithLength:[self->digest_ getDigestSize]];
  OrgSpongycastleCryptoEnginesSM2Engine_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, self->digest_, [((OrgSpongycastleMathEcECPoint *) nil_chk(c1P)) getAffineXCoord]);
  [self->digest_ updateWithByteArray:c2 withInt:0 withInt:c2->size_];
  OrgSpongycastleCryptoEnginesSM2Engine_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, self->digest_, [c1P getAffineYCoord]);
  [self->digest_ doFinalWithByteArray:c3 withInt:0];
  jint check = 0;
  for (jint i = 0; i != c3->size_; i++) {
    check |= IOSByteArray_Get(c3, i) ^ IOSByteArray_Get(nil_chk(inArg), c1->size_ + c2->size_ + i);
  }
  OrgSpongycastleCryptoEnginesSM2Engine_clearBlockWithByteArray_(self, c1);
  OrgSpongycastleCryptoEnginesSM2Engine_clearBlockWithByteArray_(self, c3);
  if (check != 0) {
    OrgSpongycastleCryptoEnginesSM2Engine_clearBlockWithByteArray_(self, c2);
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"invalid cipher text");
  }
  return c2;
}

jboolean OrgSpongycastleCryptoEnginesSM2Engine_notEncryptedWithByteArray_withByteArray_withInt_(OrgSpongycastleCryptoEnginesSM2Engine *self, IOSByteArray *encData, IOSByteArray *inArg, jint inOff) {
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(encData))->size_; i++) {
    if (IOSByteArray_Get(encData, i) != IOSByteArray_Get(nil_chk(inArg), inOff)) {
      return false;
    }
  }
  return true;
}

void OrgSpongycastleCryptoEnginesSM2Engine_kdfWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECPoint_withByteArray_(OrgSpongycastleCryptoEnginesSM2Engine *self, id<OrgSpongycastleCryptoDigest> digest, OrgSpongycastleMathEcECPoint *c1, IOSByteArray *encData) {
  jint ct = 1;
  jint v = [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) getDigestSize];
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:[digest getDigestSize]];
  jint off = 0;
  for (jint i = 1; i <= ((((IOSByteArray *) nil_chk(encData))->size_ + v - 1) / v); i++) {
    OrgSpongycastleCryptoEnginesSM2Engine_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, [((OrgSpongycastleMathEcECPoint *) nil_chk(c1)) getAffineXCoord]);
    OrgSpongycastleCryptoEnginesSM2Engine_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(self, digest, [c1 getAffineYCoord]);
    [digest updateWithByte:(jbyte) (JreRShift32(ct, 24))];
    [digest updateWithByte:(jbyte) (JreRShift32(ct, 16))];
    [digest updateWithByte:(jbyte) (JreRShift32(ct, 8))];
    [digest updateWithByte:(jbyte) ct];
    [digest doFinalWithByteArray:buf withInt:0];
    if (off + buf->size_ < encData->size_) {
      OrgSpongycastleCryptoEnginesSM2Engine_xor__WithByteArray_withByteArray_withInt_withInt_(self, encData, buf, off, buf->size_);
    }
    else {
      OrgSpongycastleCryptoEnginesSM2Engine_xor__WithByteArray_withByteArray_withInt_withInt_(self, encData, buf, off, encData->size_ - off);
    }
    off += buf->size_;
    ct++;
  }
}

void OrgSpongycastleCryptoEnginesSM2Engine_xor__WithByteArray_withByteArray_withInt_withInt_(OrgSpongycastleCryptoEnginesSM2Engine *self, IOSByteArray *data, IOSByteArray *kdfOut, jint dOff, jint dRemaining) {
  for (jint i = 0; i != dRemaining; i++) {
    *IOSByteArray_GetRef(nil_chk(data), dOff + i) ^= IOSByteArray_Get(nil_chk(kdfOut), i);
  }
}

JavaMathBigInteger *OrgSpongycastleCryptoEnginesSM2Engine_nextK(OrgSpongycastleCryptoEnginesSM2Engine *self) {
  jint qBitLength = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getN])) bitLength];
  JavaMathBigInteger *k;
  do {
    k = new_JavaMathBigInteger_initWithInt_withJavaUtilRandom_(qBitLength, self->random_);
  }
  while ([k isEqual:JreLoadStatic(OrgSpongycastleMathEcECConstants, ZERO)] || [k compareToWithId:[((OrgSpongycastleCryptoParamsECDomainParameters *) nil_chk(self->ecParams_)) getN]] >= 0);
  return k;
}

void OrgSpongycastleCryptoEnginesSM2Engine_addFieldElementWithOrgSpongycastleCryptoDigest_withOrgSpongycastleMathEcECFieldElement_(OrgSpongycastleCryptoEnginesSM2Engine *self, id<OrgSpongycastleCryptoDigest> digest, OrgSpongycastleMathEcECFieldElement *v) {
  IOSByteArray *p = OrgSpongycastleUtilBigIntegers_asUnsignedByteArrayWithInt_withJavaMathBigInteger_(self->curveLength_, [((OrgSpongycastleMathEcECFieldElement *) nil_chk(v)) toBigInteger]);
  [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:p withInt:0 withInt:((IOSByteArray *) nil_chk(p))->size_];
}

void OrgSpongycastleCryptoEnginesSM2Engine_clearBlockWithByteArray_(OrgSpongycastleCryptoEnginesSM2Engine *self, IOSByteArray *block) {
  for (jint i = 0; i != ((IOSByteArray *) nil_chk(block))->size_; i++) {
    *IOSByteArray_GetRef(block, i) = 0;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesSM2Engine)
