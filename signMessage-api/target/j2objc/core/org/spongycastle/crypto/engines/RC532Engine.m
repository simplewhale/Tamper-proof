//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/RC532Engine.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/engines/RC532Engine.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/RC5Parameters.h"

@interface OrgSpongycastleCryptoEnginesRC532Engine () {
 @public
  jint _noRounds_;
  IOSIntArray *_S_;
  jboolean forEncryption_;
}

- (void)setKeyWithByteArray:(IOSByteArray *)key;

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (jint)rotateLeftWithInt:(jint)x
                  withInt:(jint)y;

- (jint)rotateRightWithInt:(jint)x
                   withInt:(jint)y;

- (jint)bytesToWordWithByteArray:(IOSByteArray *)src
                         withInt:(jint)srcOff;

- (void)wordToBytesWithInt:(jint)word
             withByteArray:(IOSByteArray *)dst
                   withInt:(jint)dstOff;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesRC532Engine, _S_, IOSIntArray *)

inline jint OrgSpongycastleCryptoEnginesRC532Engine_get_P32(void);
#define OrgSpongycastleCryptoEnginesRC532Engine_P32 -1209970333
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoEnginesRC532Engine, P32, jint)

inline jint OrgSpongycastleCryptoEnginesRC532Engine_get_Q32(void);
#define OrgSpongycastleCryptoEnginesRC532Engine_Q32 -1640531527
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoEnginesRC532Engine, Q32, jint)

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesRC532Engine_setKeyWithByteArray_(OrgSpongycastleCryptoEnginesRC532Engine *self, IOSByteArray *key);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesRC532Engine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesRC532Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesRC532Engine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesRC532Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesRC532Engine_rotateLeftWithInt_withInt_(OrgSpongycastleCryptoEnginesRC532Engine *self, jint x, jint y);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesRC532Engine_rotateRightWithInt_withInt_(OrgSpongycastleCryptoEnginesRC532Engine *self, jint x, jint y);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesRC532Engine_bytesToWordWithByteArray_withInt_(OrgSpongycastleCryptoEnginesRC532Engine *self, IOSByteArray *src, jint srcOff);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesRC532Engine_wordToBytesWithInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesRC532Engine *self, jint word, IOSByteArray *dst, jint dstOff);

@implementation OrgSpongycastleCryptoEnginesRC532Engine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesRC532Engine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getAlgorithmName {
  return @"RC5-32";
}

- (jint)getBlockSize {
  return 2 * 4;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  if ([params isKindOfClass:[OrgSpongycastleCryptoParamsRC5Parameters class]]) {
    OrgSpongycastleCryptoParamsRC5Parameters *p = (OrgSpongycastleCryptoParamsRC5Parameters *) params;
    _noRounds_ = [((OrgSpongycastleCryptoParamsRC5Parameters *) nil_chk(p)) getRounds];
    OrgSpongycastleCryptoEnginesRC532Engine_setKeyWithByteArray_(self, [p getKey]);
  }
  else if ([params isKindOfClass:[OrgSpongycastleCryptoParamsKeyParameter class]]) {
    OrgSpongycastleCryptoParamsKeyParameter *p = (OrgSpongycastleCryptoParamsKeyParameter *) params;
    OrgSpongycastleCryptoEnginesRC532Engine_setKeyWithByteArray_(self, [((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(p)) getKey]);
  }
  else {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"invalid parameter passed to RC532 init - ", [[((id<OrgSpongycastleCryptoCipherParameters>) nil_chk(params)) java_getClass] getName]));
  }
  self->forEncryption_ = forEncryption;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return (forEncryption_) ? OrgSpongycastleCryptoEnginesRC532Engine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff) : OrgSpongycastleCryptoEnginesRC532Engine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (void)reset {
}

- (void)setKeyWithByteArray:(IOSByteArray *)key {
  OrgSpongycastleCryptoEnginesRC532Engine_setKeyWithByteArray_(self, key);
}

- (jint)encryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return OrgSpongycastleCryptoEnginesRC532Engine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (jint)decryptBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  return OrgSpongycastleCryptoEnginesRC532Engine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (jint)rotateLeftWithInt:(jint)x
                  withInt:(jint)y {
  return OrgSpongycastleCryptoEnginesRC532Engine_rotateLeftWithInt_withInt_(self, x, y);
}

- (jint)rotateRightWithInt:(jint)x
                   withInt:(jint)y {
  return OrgSpongycastleCryptoEnginesRC532Engine_rotateRightWithInt_withInt_(self, x, y);
}

- (jint)bytesToWordWithByteArray:(IOSByteArray *)src
                         withInt:(jint)srcOff {
  return OrgSpongycastleCryptoEnginesRC532Engine_bytesToWordWithByteArray_withInt_(self, src, srcOff);
}

- (void)wordToBytesWithInt:(jint)word
             withByteArray:(IOSByteArray *)dst
                   withInt:(jint)dstOff {
  OrgSpongycastleCryptoEnginesRC532Engine_wordToBytesWithInt_withByteArray_withInt_(self, word, dst, dstOff);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 6, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAlgorithmName);
  methods[2].selector = @selector(getBlockSize);
  methods[3].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[4].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(setKeyWithByteArray:);
  methods[7].selector = @selector(encryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[8].selector = @selector(decryptBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[9].selector = @selector(rotateLeftWithInt:withInt:);
  methods[10].selector = @selector(rotateRightWithInt:withInt:);
  methods[11].selector = @selector(bytesToWordWithByteArray:withInt:);
  methods[12].selector = @selector(wordToBytesWithInt:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_noRounds_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_S_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "P32", "I", .constantValue.asInt = OrgSpongycastleCryptoEnginesRC532Engine_P32, 0x1a, -1, -1, -1, -1 },
    { "Q32", "I", .constantValue.asInt = OrgSpongycastleCryptoEnginesRC532Engine_Q32, 0x1a, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;", "processBlock", "[BI[BI", "setKey", "[B", "encryptBlock", "decryptBlock", "rotateLeft", "II", "rotateRight", "bytesToWord", "[BI", "wordToBytes", "I[BI" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesRC532Engine = { "RC532Engine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 13, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesRC532Engine;
}

@end

void OrgSpongycastleCryptoEnginesRC532Engine_init(OrgSpongycastleCryptoEnginesRC532Engine *self) {
  NSObject_init(self);
  self->_noRounds_ = 12;
  self->_S_ = nil;
}

OrgSpongycastleCryptoEnginesRC532Engine *new_OrgSpongycastleCryptoEnginesRC532Engine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesRC532Engine, init)
}

OrgSpongycastleCryptoEnginesRC532Engine *create_OrgSpongycastleCryptoEnginesRC532Engine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesRC532Engine, init)
}

void OrgSpongycastleCryptoEnginesRC532Engine_setKeyWithByteArray_(OrgSpongycastleCryptoEnginesRC532Engine *self, IOSByteArray *key) {
  IOSIntArray *L = [IOSIntArray newArrayWithLength:(((IOSByteArray *) nil_chk(key))->size_ + (4 - 1)) / 4];
  for (jint i = 0; i != key->size_; i++) {
    *IOSIntArray_GetRef(L, i / 4) += JreLShift32((IOSByteArray_Get(key, i) & (jint) 0xff), (8 * (i % 4)));
  }
  self->_S_ = [IOSIntArray newArrayWithLength:2 * (self->_noRounds_ + 1)];
  *IOSIntArray_GetRef(self->_S_, 0) = OrgSpongycastleCryptoEnginesRC532Engine_P32;
  for (jint i = 1; i < self->_S_->size_; i++) {
    *IOSIntArray_GetRef(self->_S_, i) = (IOSIntArray_Get(self->_S_, i - 1) + OrgSpongycastleCryptoEnginesRC532Engine_Q32);
  }
  jint iter;
  if (L->size_ > self->_S_->size_) {
    iter = 3 * L->size_;
  }
  else {
    iter = 3 * self->_S_->size_;
  }
  jint A = 0;
  jint B = 0;
  jint i = 0;
  jint j = 0;
  for (jint k = 0; k < iter; k++) {
    A = *IOSIntArray_GetRef(self->_S_, i) = OrgSpongycastleCryptoEnginesRC532Engine_rotateLeftWithInt_withInt_(self, IOSIntArray_Get(self->_S_, i) + A + B, 3);
    B = *IOSIntArray_GetRef(L, j) = OrgSpongycastleCryptoEnginesRC532Engine_rotateLeftWithInt_withInt_(self, IOSIntArray_Get(L, j) + A + B, A + B);
    i = (i + 1) % ((IOSIntArray *) nil_chk(self->_S_))->size_;
    j = (j + 1) % L->size_;
  }
}

jint OrgSpongycastleCryptoEnginesRC532Engine_encryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesRC532Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  jint A = OrgSpongycastleCryptoEnginesRC532Engine_bytesToWordWithByteArray_withInt_(self, inArg, inOff) + IOSIntArray_Get(nil_chk(self->_S_), 0);
  jint B = OrgSpongycastleCryptoEnginesRC532Engine_bytesToWordWithByteArray_withInt_(self, inArg, inOff + 4) + IOSIntArray_Get(nil_chk(self->_S_), 1);
  for (jint i = 1; i <= self->_noRounds_; i++) {
    A = OrgSpongycastleCryptoEnginesRC532Engine_rotateLeftWithInt_withInt_(self, A ^ B, B) + IOSIntArray_Get(nil_chk(self->_S_), 2 * i);
    B = OrgSpongycastleCryptoEnginesRC532Engine_rotateLeftWithInt_withInt_(self, B ^ A, A) + IOSIntArray_Get(nil_chk(self->_S_), 2 * i + 1);
  }
  OrgSpongycastleCryptoEnginesRC532Engine_wordToBytesWithInt_withByteArray_withInt_(self, A, outArg, outOff);
  OrgSpongycastleCryptoEnginesRC532Engine_wordToBytesWithInt_withByteArray_withInt_(self, B, outArg, outOff + 4);
  return 2 * 4;
}

jint OrgSpongycastleCryptoEnginesRC532Engine_decryptBlockWithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesRC532Engine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  jint A = OrgSpongycastleCryptoEnginesRC532Engine_bytesToWordWithByteArray_withInt_(self, inArg, inOff);
  jint B = OrgSpongycastleCryptoEnginesRC532Engine_bytesToWordWithByteArray_withInt_(self, inArg, inOff + 4);
  for (jint i = self->_noRounds_; i >= 1; i--) {
    B = OrgSpongycastleCryptoEnginesRC532Engine_rotateRightWithInt_withInt_(self, B - IOSIntArray_Get(nil_chk(self->_S_), 2 * i + 1), A) ^ A;
    A = OrgSpongycastleCryptoEnginesRC532Engine_rotateRightWithInt_withInt_(self, A - IOSIntArray_Get(nil_chk(self->_S_), 2 * i), B) ^ B;
  }
  OrgSpongycastleCryptoEnginesRC532Engine_wordToBytesWithInt_withByteArray_withInt_(self, A - IOSIntArray_Get(nil_chk(self->_S_), 0), outArg, outOff);
  OrgSpongycastleCryptoEnginesRC532Engine_wordToBytesWithInt_withByteArray_withInt_(self, B - IOSIntArray_Get(nil_chk(self->_S_), 1), outArg, outOff + 4);
  return 2 * 4;
}

jint OrgSpongycastleCryptoEnginesRC532Engine_rotateLeftWithInt_withInt_(OrgSpongycastleCryptoEnginesRC532Engine *self, jint x, jint y) {
  return ((JreLShift32(x, (y & (32 - 1)))) | (JreURShift32(x, (32 - (y & (32 - 1))))));
}

jint OrgSpongycastleCryptoEnginesRC532Engine_rotateRightWithInt_withInt_(OrgSpongycastleCryptoEnginesRC532Engine *self, jint x, jint y) {
  return ((JreURShift32(x, (y & (32 - 1)))) | (JreLShift32(x, (32 - (y & (32 - 1))))));
}

jint OrgSpongycastleCryptoEnginesRC532Engine_bytesToWordWithByteArray_withInt_(OrgSpongycastleCryptoEnginesRC532Engine *self, IOSByteArray *src, jint srcOff) {
  return (IOSByteArray_Get(nil_chk(src), srcOff) & (jint) 0xff) | (JreLShift32((IOSByteArray_Get(src, srcOff + 1) & (jint) 0xff), 8)) | (JreLShift32((IOSByteArray_Get(src, srcOff + 2) & (jint) 0xff), 16)) | (JreLShift32((IOSByteArray_Get(src, srcOff + 3) & (jint) 0xff), 24));
}

void OrgSpongycastleCryptoEnginesRC532Engine_wordToBytesWithInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesRC532Engine *self, jint word, IOSByteArray *dst, jint dstOff) {
  *IOSByteArray_GetRef(nil_chk(dst), dstOff) = (jbyte) word;
  *IOSByteArray_GetRef(dst, dstOff + 1) = (jbyte) (JreRShift32(word, 8));
  *IOSByteArray_GetRef(dst, dstOff + 2) = (jbyte) (JreRShift32(word, 16));
  *IOSByteArray_GetRef(dst, dstOff + 3) = (jbyte) (JreRShift32(word, 24));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesRC532Engine)
