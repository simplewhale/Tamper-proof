//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/CramerShoupCoreEngine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/Digest.h"
#include "org/spongycastle/crypto/engines/CramerShoupCiphertext.h"
#include "org/spongycastle/crypto/engines/CramerShoupCoreEngine.h"
#include "org/spongycastle/crypto/params/CramerShoupKeyParameters.h"
#include "org/spongycastle/crypto/params/CramerShoupParameters.h"
#include "org/spongycastle/crypto/params/CramerShoupPrivateKeyParameters.h"
#include "org/spongycastle/crypto/params/CramerShoupPublicKeyParameters.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/util/BigIntegers.h"

@interface OrgSpongycastleCryptoEnginesCramerShoupCoreEngine () {
 @public
  OrgSpongycastleCryptoParamsCramerShoupKeyParameters *key_;
  JavaSecuritySecureRandom *random_;
  jboolean forEncryption_;
  NSString *label_;
}

- (JavaMathBigInteger *)generateRandomElementWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                       withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random;

- (jboolean)isValidMessageWithJavaMathBigInteger:(JavaMathBigInteger *)m
                          withJavaMathBigInteger:(JavaMathBigInteger *)p;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine, key_, OrgSpongycastleCryptoParamsCramerShoupKeyParameters *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine, random_, JavaSecuritySecureRandom *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine, label_, NSString *)

inline JavaMathBigInteger *OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_get_ONE(void);
static JavaMathBigInteger *OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_ONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine, ONE, JavaMathBigInteger *)

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_generateRandomElementWithJavaMathBigInteger_withJavaSecuritySecureRandom_(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine *self, JavaMathBigInteger *p, JavaSecuritySecureRandom *random);

__attribute__((unused)) static jboolean OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_isValidMessageWithJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine *self, JavaMathBigInteger *m, JavaMathBigInteger *p);

inline jlong OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException_get_serialVersionUID(void);
#define OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException_serialVersionUID -6360977166495345076LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine)

@implementation OrgSpongycastleCryptoEnginesCramerShoupCoreEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param
             withNSString:(NSString *)label {
  [self init__WithBoolean:forEncryption withOrgSpongycastleCryptoCipherParameters:param];
  self->label_ = label;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  JavaSecuritySecureRandom *providedRandom = nil;
  if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
    OrgSpongycastleCryptoParamsParametersWithRandom *rParam = (OrgSpongycastleCryptoParamsParametersWithRandom *) param;
    key_ = (OrgSpongycastleCryptoParamsCramerShoupKeyParameters *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(rParam)) getParameters], [OrgSpongycastleCryptoParamsCramerShoupKeyParameters class]);
    providedRandom = [rParam getRandom];
  }
  else {
    key_ = (OrgSpongycastleCryptoParamsCramerShoupKeyParameters *) cast_chk(param, [OrgSpongycastleCryptoParamsCramerShoupKeyParameters class]);
  }
  self->random_ = [self initSecureRandomWithBoolean:forEncryption withJavaSecuritySecureRandom:providedRandom];
  self->forEncryption_ = forEncryption;
}

- (jint)getInputBlockSize {
  jint bitSize = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsCramerShoupParameters *) nil_chk([((OrgSpongycastleCryptoParamsCramerShoupKeyParameters *) nil_chk(key_)) getParameters])) getP])) bitLength];
  if (forEncryption_) {
    return (bitSize + 7) / 8 - 1;
  }
  else {
    return (bitSize + 7) / 8;
  }
}

- (jint)getOutputBlockSize {
  jint bitSize = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoParamsCramerShoupParameters *) nil_chk([((OrgSpongycastleCryptoParamsCramerShoupKeyParameters *) nil_chk(key_)) getParameters])) getP])) bitLength];
  if (forEncryption_) {
    return (bitSize + 7) / 8;
  }
  else {
    return (bitSize + 7) / 8 - 1;
  }
}

- (JavaMathBigInteger *)convertInputWithByteArray:(IOSByteArray *)inArg
                                          withInt:(jint)inOff
                                          withInt:(jint)inLen {
  if (inLen > ([self getInputBlockSize] + 1)) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input too large for Cramer Shoup cipher.");
  }
  else if (inLen == ([self getInputBlockSize] + 1) && forEncryption_) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input too large for Cramer Shoup cipher.");
  }
  IOSByteArray *block;
  if (inOff != 0 || inLen != ((IOSByteArray *) nil_chk(inArg))->size_) {
    block = [IOSByteArray newArrayWithLength:inLen];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, block, 0, inLen);
  }
  else {
    block = inArg;
  }
  JavaMathBigInteger *res = new_JavaMathBigInteger_initWithInt_withByteArray_(1, block);
  if ([res compareToWithId:[((OrgSpongycastleCryptoParamsCramerShoupParameters *) nil_chk([((OrgSpongycastleCryptoParamsCramerShoupKeyParameters *) nil_chk(key_)) getParameters])) getP]] >= 0) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input too large for Cramer Shoup cipher.");
  }
  return res;
}

- (IOSByteArray *)convertOutputWithJavaMathBigInteger:(JavaMathBigInteger *)result {
  IOSByteArray *output = [((JavaMathBigInteger *) nil_chk(result)) toByteArray];
  if (!forEncryption_) {
    if (IOSByteArray_Get(nil_chk(output), 0) == 0 && output->size_ > [self getOutputBlockSize]) {
      IOSByteArray *tmp = [IOSByteArray newArrayWithLength:output->size_ - 1];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(output, 1, tmp, 0, tmp->size_);
      return tmp;
    }
    if (output->size_ < [self getOutputBlockSize]) {
      IOSByteArray *tmp = [IOSByteArray newArrayWithLength:[self getOutputBlockSize]];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(output, 0, tmp, tmp->size_ - output->size_, output->size_);
      return tmp;
    }
  }
  else {
    if (IOSByteArray_Get(nil_chk(output), 0) == 0) {
      IOSByteArray *tmp = [IOSByteArray newArrayWithLength:output->size_ - 1];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(output, 1, tmp, 0, tmp->size_);
      return tmp;
    }
  }
  return output;
}

- (OrgSpongycastleCryptoEnginesCramerShoupCiphertext *)encryptBlockWithJavaMathBigInteger:(JavaMathBigInteger *)input {
  OrgSpongycastleCryptoEnginesCramerShoupCiphertext *result = nil;
  if (![((OrgSpongycastleCryptoParamsCramerShoupKeyParameters *) nil_chk(key_)) isPrivate] && self->forEncryption_ && [key_ isKindOfClass:[OrgSpongycastleCryptoParamsCramerShoupPublicKeyParameters class]]) {
    OrgSpongycastleCryptoParamsCramerShoupPublicKeyParameters *pk = (OrgSpongycastleCryptoParamsCramerShoupPublicKeyParameters *) cast_chk(key_, [OrgSpongycastleCryptoParamsCramerShoupPublicKeyParameters class]);
    JavaMathBigInteger *p = [((OrgSpongycastleCryptoParamsCramerShoupParameters *) nil_chk([((OrgSpongycastleCryptoParamsCramerShoupPublicKeyParameters *) nil_chk(pk)) getParameters])) getP];
    JavaMathBigInteger *g1 = [((OrgSpongycastleCryptoParamsCramerShoupParameters *) nil_chk([pk getParameters])) getG1];
    JavaMathBigInteger *g2 = [((OrgSpongycastleCryptoParamsCramerShoupParameters *) nil_chk([pk getParameters])) getG2];
    JavaMathBigInteger *h = [pk getH];
    if (!OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_isValidMessageWithJavaMathBigInteger_withJavaMathBigInteger_(self, input, p)) {
      return result;
    }
    JavaMathBigInteger *r = OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_generateRandomElementWithJavaMathBigInteger_withJavaSecuritySecureRandom_(self, p, random_);
    JavaMathBigInteger *u1;
    JavaMathBigInteger *u2;
    JavaMathBigInteger *v;
    JavaMathBigInteger *e;
    JavaMathBigInteger *a;
    u1 = [((JavaMathBigInteger *) nil_chk(g1)) modPowWithJavaMathBigInteger:r withJavaMathBigInteger:p];
    u2 = [((JavaMathBigInteger *) nil_chk(g2)) modPowWithJavaMathBigInteger:r withJavaMathBigInteger:p];
    e = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(h)) modPowWithJavaMathBigInteger:r withJavaMathBigInteger:p])) multiplyWithJavaMathBigInteger:input])) modWithJavaMathBigInteger:p];
    id<OrgSpongycastleCryptoDigest> digest = [((OrgSpongycastleCryptoParamsCramerShoupParameters *) nil_chk([pk getParameters])) getH];
    IOSByteArray *u1Bytes = [((JavaMathBigInteger *) nil_chk(u1)) toByteArray];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:u1Bytes withInt:0 withInt:((IOSByteArray *) nil_chk(u1Bytes))->size_];
    IOSByteArray *u2Bytes = [((JavaMathBigInteger *) nil_chk(u2)) toByteArray];
    [digest updateWithByteArray:u2Bytes withInt:0 withInt:((IOSByteArray *) nil_chk(u2Bytes))->size_];
    IOSByteArray *eBytes = [((JavaMathBigInteger *) nil_chk(e)) toByteArray];
    [digest updateWithByteArray:eBytes withInt:0 withInt:((IOSByteArray *) nil_chk(eBytes))->size_];
    if (self->label_ != nil) {
      IOSByteArray *lBytes = [self->label_ java_getBytes];
      [digest updateWithByteArray:lBytes withInt:0 withInt:((IOSByteArray *) nil_chk(lBytes))->size_];
    }
    IOSByteArray *out = [IOSByteArray newArrayWithLength:[digest getDigestSize]];
    [digest doFinalWithByteArray:out withInt:0];
    a = new_JavaMathBigInteger_initWithInt_withByteArray_(1, out);
    v = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([pk getC])) modPowWithJavaMathBigInteger:r withJavaMathBigInteger:p])) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([pk getD])) modPowWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(r)) multiplyWithJavaMathBigInteger:a] withJavaMathBigInteger:p]])) modWithJavaMathBigInteger:p];
    result = new_OrgSpongycastleCryptoEnginesCramerShoupCiphertext_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(u1, u2, e, v);
  }
  return result;
}

- (JavaMathBigInteger *)decryptBlockWithOrgSpongycastleCryptoEnginesCramerShoupCiphertext:(OrgSpongycastleCryptoEnginesCramerShoupCiphertext *)input {
  JavaMathBigInteger *result = nil;
  if ([((OrgSpongycastleCryptoParamsCramerShoupKeyParameters *) nil_chk(key_)) isPrivate] && !self->forEncryption_ && [key_ isKindOfClass:[OrgSpongycastleCryptoParamsCramerShoupPrivateKeyParameters class]]) {
    OrgSpongycastleCryptoParamsCramerShoupPrivateKeyParameters *sk = (OrgSpongycastleCryptoParamsCramerShoupPrivateKeyParameters *) cast_chk(key_, [OrgSpongycastleCryptoParamsCramerShoupPrivateKeyParameters class]);
    JavaMathBigInteger *p = [((OrgSpongycastleCryptoParamsCramerShoupParameters *) nil_chk([((OrgSpongycastleCryptoParamsCramerShoupPrivateKeyParameters *) nil_chk(sk)) getParameters])) getP];
    id<OrgSpongycastleCryptoDigest> digest = [((OrgSpongycastleCryptoParamsCramerShoupParameters *) nil_chk([sk getParameters])) getH];
    IOSByteArray *u1Bytes = [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleCryptoEnginesCramerShoupCiphertext *) nil_chk(input)) getU1])) toByteArray];
    [((id<OrgSpongycastleCryptoDigest>) nil_chk(digest)) updateWithByteArray:u1Bytes withInt:0 withInt:((IOSByteArray *) nil_chk(u1Bytes))->size_];
    IOSByteArray *u2Bytes = [((JavaMathBigInteger *) nil_chk([input getU2])) toByteArray];
    [digest updateWithByteArray:u2Bytes withInt:0 withInt:((IOSByteArray *) nil_chk(u2Bytes))->size_];
    IOSByteArray *eBytes = [((JavaMathBigInteger *) nil_chk([input getE])) toByteArray];
    [digest updateWithByteArray:eBytes withInt:0 withInt:((IOSByteArray *) nil_chk(eBytes))->size_];
    if (self->label_ != nil) {
      IOSByteArray *lBytes = [self->label_ java_getBytes];
      [digest updateWithByteArray:lBytes withInt:0 withInt:((IOSByteArray *) nil_chk(lBytes))->size_];
    }
    IOSByteArray *out = [IOSByteArray newArrayWithLength:[digest getDigestSize]];
    [digest doFinalWithByteArray:out withInt:0];
    JavaMathBigInteger *a = new_JavaMathBigInteger_initWithInt_withByteArray_(1, out);
    JavaMathBigInteger *v = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(input->u1_)) modPowWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([sk getX1])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([sk getY1])) multiplyWithJavaMathBigInteger:a]] withJavaMathBigInteger:p])) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(input->u2_)) modPowWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([sk getX2])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([sk getY2])) multiplyWithJavaMathBigInteger:a]] withJavaMathBigInteger:p]])) modWithJavaMathBigInteger:p];
    if ([((JavaMathBigInteger *) nil_chk(input->v_)) isEqual:v]) {
      result = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(input->e_)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(input->u1_)) modPowWithJavaMathBigInteger:[sk getZ] withJavaMathBigInteger:p])) modInverseWithJavaMathBigInteger:p]])) modWithJavaMathBigInteger:p];
    }
    else {
      @throw new_OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException_initWithNSString_(@"Sorry, that ciphertext is not correct");
    }
  }
  return result;
}

- (JavaMathBigInteger *)generateRandomElementWithJavaMathBigInteger:(JavaMathBigInteger *)p
                                       withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random {
  return OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_generateRandomElementWithJavaMathBigInteger_withJavaSecuritySecureRandom_(self, p, random);
}

- (jboolean)isValidMessageWithJavaMathBigInteger:(JavaMathBigInteger *)m
                          withJavaMathBigInteger:(JavaMathBigInteger *)p {
  return OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_isValidMessageWithJavaMathBigInteger_withJavaMathBigInteger_(self, m, p);
}

- (JavaSecuritySecureRandom *)initSecureRandomWithBoolean:(jboolean)needed
                             withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)provided {
  return !needed ? nil : (provided != nil) ? provided : new_JavaSecuritySecureRandom_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleCryptoEnginesCramerShoupCiphertext;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaSecuritySecureRandom;", 0x4, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:withNSString:);
  methods[2].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[3].selector = @selector(getInputBlockSize);
  methods[4].selector = @selector(getOutputBlockSize);
  methods[5].selector = @selector(convertInputWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(convertOutputWithJavaMathBigInteger:);
  methods[7].selector = @selector(encryptBlockWithJavaMathBigInteger:);
  methods[8].selector = @selector(decryptBlockWithOrgSpongycastleCryptoEnginesCramerShoupCiphertext:);
  methods[9].selector = @selector(generateRandomElementWithJavaMathBigInteger:withJavaSecuritySecureRandom:);
  methods[10].selector = @selector(isValidMessageWithJavaMathBigInteger:withJavaMathBigInteger:);
  methods[11].selector = @selector(initSecureRandomWithBoolean:withJavaSecuritySecureRandom:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ONE", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "key_", "LOrgSpongycastleCryptoParamsCramerShoupKeyParameters;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "random_", "LJavaSecuritySecureRandom;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forEncryption_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "label_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "ZLOrgSpongycastleCryptoCipherParameters;LNSString;", "ZLOrgSpongycastleCryptoCipherParameters;", "convertInput", "[BII", "convertOutput", "LJavaMathBigInteger;", "encryptBlock", "decryptBlock", "LOrgSpongycastleCryptoEnginesCramerShoupCiphertext;", "LOrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException;", "generateRandomElement", "LJavaMathBigInteger;LJavaSecuritySecureRandom;", "isValidMessage", "LJavaMathBigInteger;LJavaMathBigInteger;", "initSecureRandom", "ZLJavaSecuritySecureRandom;", &OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_ONE };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesCramerShoupCoreEngine = { "CramerShoupCoreEngine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 12, 5, -1, 10, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesCramerShoupCoreEngine;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoEnginesCramerShoupCoreEngine class]) {
    OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_ONE = JavaMathBigInteger_valueOfWithLong_(1);
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine)
  }
}

@end

void OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_init(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine *self) {
  NSObject_init(self);
  self->label_ = nil;
}

OrgSpongycastleCryptoEnginesCramerShoupCoreEngine *new_OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine, init)
}

OrgSpongycastleCryptoEnginesCramerShoupCoreEngine *create_OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine, init)
}

JavaMathBigInteger *OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_generateRandomElementWithJavaMathBigInteger_withJavaSecuritySecureRandom_(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine *self, JavaMathBigInteger *p, JavaSecuritySecureRandom *random) {
  return OrgSpongycastleUtilBigIntegers_createRandomInRangeWithJavaMathBigInteger_withJavaMathBigInteger_withJavaSecuritySecureRandom_(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_ONE, [((JavaMathBigInteger *) nil_chk(p)) subtractWithJavaMathBigInteger:OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_ONE], random);
}

jboolean OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_isValidMessageWithJavaMathBigInteger_withJavaMathBigInteger_(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine *self, JavaMathBigInteger *m, JavaMathBigInteger *p) {
  return [((JavaMathBigInteger *) nil_chk(m)) compareToWithId:p] < 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine)

@implementation OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException

- (instancetype)initWithNSString:(NSString *)msg {
  OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException_initWithNSString_(self, msg);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LOrgSpongycastleCryptoEnginesCramerShoupCoreEngine;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException = { "CramerShoupCiphertextException", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x9, 1, 1, 1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException;
}

@end

void OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException_initWithNSString_(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException *self, NSString *msg) {
  JavaLangException_initWithNSString_(self, msg);
}

OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException *new_OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException_initWithNSString_(NSString *msg) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException, initWithNSString_, msg)
}

OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException *create_OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException_initWithNSString_(NSString *msg) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException, initWithNSString_, msg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesCramerShoupCoreEngine_CramerShoupCiphertextException)
