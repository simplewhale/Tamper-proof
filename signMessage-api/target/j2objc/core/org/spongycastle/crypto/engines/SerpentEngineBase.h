//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/SerpentEngineBase.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgSpongycastleCryptoEnginesSerpentEngineBase")
#ifdef RESTRICT_OrgSpongycastleCryptoEnginesSerpentEngineBase
#define INCLUDE_ALL_OrgSpongycastleCryptoEnginesSerpentEngineBase 0
#else
#define INCLUDE_ALL_OrgSpongycastleCryptoEnginesSerpentEngineBase 1
#endif
#undef RESTRICT_OrgSpongycastleCryptoEnginesSerpentEngineBase

#if !defined (OrgSpongycastleCryptoEnginesSerpentEngineBase_) && (INCLUDE_ALL_OrgSpongycastleCryptoEnginesSerpentEngineBase || defined(INCLUDE_OrgSpongycastleCryptoEnginesSerpentEngineBase))
#define OrgSpongycastleCryptoEnginesSerpentEngineBase_

#define RESTRICT_OrgSpongycastleCryptoBlockCipher 1
#define INCLUDE_OrgSpongycastleCryptoBlockCipher 1
#include "org/spongycastle/crypto/BlockCipher.h"

@class IOSByteArray;
@class IOSIntArray;
@protocol OrgSpongycastleCryptoCipherParameters;

@interface OrgSpongycastleCryptoEnginesSerpentEngineBase : NSObject < OrgSpongycastleCryptoBlockCipher > {
 @public
  jboolean encrypting_;
  IOSIntArray *wKey_;
  jint X0_;
  jint X1_;
  jint X2_;
  jint X3_;
}

#pragma mark Public

- (NSString *)getAlgorithmName;

- (jint)getBlockSize;

- (void)init__WithBoolean:(jboolean)encrypting
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params OBJC_METHOD_FAMILY_NONE;

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff;

- (void)reset;

#pragma mark Protected

- (void)decryptBlockWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outOff;

- (void)encryptBlockWithByteArray:(IOSByteArray *)input
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)output
                          withInt:(jint)outOff;

- (void)ib0WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

- (void)ib1WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

- (void)ib2WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

- (void)ib3WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

- (void)ib4WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

- (void)ib5WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

- (void)ib6WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

- (void)ib7WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

- (void)inverseLT;

- (void)LT;

- (IOSIntArray *)makeWorkingKeyWithByteArray:(IOSByteArray *)key;

+ (jint)rotateLeftWithInt:(jint)x
                  withInt:(jint)bits;

+ (jint)rotateRightWithInt:(jint)x
                   withInt:(jint)bits;

- (void)sb0WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

- (void)sb1WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

- (void)sb2WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

- (void)sb3WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

- (void)sb4WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

- (void)sb5WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

- (void)sb6WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

- (void)sb7WithInt:(jint)a
           withInt:(jint)b
           withInt:(jint)c
           withInt:(jint)d;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCryptoEnginesSerpentEngineBase)

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesSerpentEngineBase, wKey_, IOSIntArray *)

inline jint OrgSpongycastleCryptoEnginesSerpentEngineBase_get_BLOCK_SIZE(void);
#define OrgSpongycastleCryptoEnginesSerpentEngineBase_BLOCK_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoEnginesSerpentEngineBase, BLOCK_SIZE, jint)

inline jint OrgSpongycastleCryptoEnginesSerpentEngineBase_get_ROUNDS(void);
#define OrgSpongycastleCryptoEnginesSerpentEngineBase_ROUNDS 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoEnginesSerpentEngineBase, ROUNDS, jint)

inline jint OrgSpongycastleCryptoEnginesSerpentEngineBase_get_PHI(void);
#define OrgSpongycastleCryptoEnginesSerpentEngineBase_PHI -1640531527
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoEnginesSerpentEngineBase, PHI, jint)

FOUNDATION_EXPORT void OrgSpongycastleCryptoEnginesSerpentEngineBase_init(OrgSpongycastleCryptoEnginesSerpentEngineBase *self);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoEnginesSerpentEngineBase_rotateLeftWithInt_withInt_(jint x, jint bits);

FOUNDATION_EXPORT jint OrgSpongycastleCryptoEnginesSerpentEngineBase_rotateRightWithInt_withInt_(jint x, jint bits);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCryptoEnginesSerpentEngineBase)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgSpongycastleCryptoEnginesSerpentEngineBase")
