//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/ChaCha7539Engine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "org/spongycastle/crypto/engines/ChaCha7539Engine.h"
#include "org/spongycastle/crypto/engines/ChaChaEngine.h"
#include "org/spongycastle/crypto/engines/Salsa20Engine.h"
#include "org/spongycastle/util/Pack.h"

@implementation OrgSpongycastleCryptoEnginesChaCha7539Engine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesChaCha7539Engine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getAlgorithmName {
  return JreStrcat("$I", @"ChaCha7539-", rounds_);
}

- (jint)getNonceSize {
  return 12;
}

- (void)advanceCounterWithLong:(jlong)diff {
  jint hi = (jint) (JreURShift64(diff, 32));
  jint lo = (jint) diff;
  if (hi > 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"attempt to increase counter past 2^32.");
  }
  jint oldState = IOSIntArray_Get(nil_chk(engineState_), 12);
  *IOSIntArray_GetRef(engineState_, 12) += lo;
  if (oldState != 0 && IOSIntArray_Get(engineState_, 12) < oldState) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"attempt to increase counter past 2^32.");
  }
}

- (void)advanceCounter {
  if (++(*IOSIntArray_GetRef(nil_chk(engineState_), 12)) == 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"attempt to increase counter past 2^32.");
  }
}

- (void)retreatCounterWithLong:(jlong)diff {
  jint hi = (jint) (JreURShift64(diff, 32));
  jint lo = (jint) diff;
  if (hi != 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"attempt to reduce counter past zero.");
  }
  if ((IOSIntArray_Get(nil_chk(engineState_), 12) & (jlong) 0xffffffffLL) >= (lo & (jlong) 0xffffffffLL)) {
    *IOSIntArray_GetRef(engineState_, 12) -= lo;
  }
  else {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"attempt to reduce counter past zero.");
  }
}

- (void)retreatCounter {
  if (IOSIntArray_Get(nil_chk(engineState_), 12) == 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"attempt to reduce counter past zero.");
  }
  --(*IOSIntArray_GetRef(engineState_, 12));
}

- (jlong)getCounter {
  return IOSIntArray_Get(nil_chk(engineState_), 12) & (jlong) 0xffffffffLL;
}

- (void)resetCounter {
  *IOSIntArray_GetRef(nil_chk(engineState_), 12) = 0;
}

- (void)setKeyWithByteArray:(IOSByteArray *)keyBytes
              withByteArray:(IOSByteArray *)ivBytes {
  if (keyBytes != nil) {
    if (keyBytes->size_ != 32) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", [self getAlgorithmName], @" requires 256 bit key"));
    }
    [self packTauOrSigmaWithInt:keyBytes->size_ withIntArray:engineState_ withInt:0];
    OrgSpongycastleUtilPack_littleEndianToIntWithByteArray_withInt_withIntArray_withInt_withInt_(keyBytes, 0, engineState_, 4, 8);
  }
  OrgSpongycastleUtilPack_littleEndianToIntWithByteArray_withInt_withIntArray_withInt_withInt_(ivBytes, 0, engineState_, 13, 3);
}

- (void)generateKeyStreamWithByteArray:(IOSByteArray *)output {
  OrgSpongycastleCryptoEnginesChaChaEngine_chachaCoreWithInt_withIntArray_withIntArray_(rounds_, engineState_, x_);
  OrgSpongycastleUtilPack_intToLittleEndianWithIntArray_withByteArray_withInt_(x_, output, 0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAlgorithmName);
  methods[2].selector = @selector(getNonceSize);
  methods[3].selector = @selector(advanceCounterWithLong:);
  methods[4].selector = @selector(advanceCounter);
  methods[5].selector = @selector(retreatCounterWithLong:);
  methods[6].selector = @selector(retreatCounter);
  methods[7].selector = @selector(getCounter);
  methods[8].selector = @selector(resetCounter);
  methods[9].selector = @selector(setKeyWithByteArray:withByteArray:);
  methods[10].selector = @selector(generateKeyStreamWithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "advanceCounter", "J", "retreatCounter", "setKey", "[B[B", "generateKeyStream", "[B" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesChaCha7539Engine = { "ChaCha7539Engine", "org.spongycastle.crypto.engines", ptrTable, methods, NULL, 7, 0x1, 11, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesChaCha7539Engine;
}

@end

void OrgSpongycastleCryptoEnginesChaCha7539Engine_init(OrgSpongycastleCryptoEnginesChaCha7539Engine *self) {
  OrgSpongycastleCryptoEnginesSalsa20Engine_init(self);
}

OrgSpongycastleCryptoEnginesChaCha7539Engine *new_OrgSpongycastleCryptoEnginesChaCha7539Engine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesChaCha7539Engine, init)
}

OrgSpongycastleCryptoEnginesChaCha7539Engine *create_OrgSpongycastleCryptoEnginesChaCha7539Engine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesChaCha7539Engine, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesChaCha7539Engine)
