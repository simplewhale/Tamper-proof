//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/RFC3394WrapEngine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "org/spongycastle/crypto/BlockCipher.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/InvalidCipherTextException.h"
#include "org/spongycastle/crypto/engines/RFC3394WrapEngine.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"
#include "org/spongycastle/crypto/params/ParametersWithIV.h"
#include "org/spongycastle/crypto/params/ParametersWithRandom.h"
#include "org/spongycastle/util/Arrays.h"

@interface OrgSpongycastleCryptoEnginesRFC3394WrapEngine () {
 @public
  id<OrgSpongycastleCryptoBlockCipher> engine_;
  jboolean wrapCipherMode_;
  OrgSpongycastleCryptoParamsKeyParameter *param_;
  jboolean forWrapping_;
  IOSByteArray *iv_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesRFC3394WrapEngine, engine_, id<OrgSpongycastleCryptoBlockCipher>)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesRFC3394WrapEngine, param_, OrgSpongycastleCryptoParamsKeyParameter *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesRFC3394WrapEngine, iv_, IOSByteArray *)

@implementation OrgSpongycastleCryptoEnginesRFC3394WrapEngine

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)engine {
  OrgSpongycastleCryptoEnginesRFC3394WrapEngine_initWithOrgSpongycastleCryptoBlockCipher_(self, engine);
  return self;
}

- (instancetype)initWithOrgSpongycastleCryptoBlockCipher:(id<OrgSpongycastleCryptoBlockCipher>)engine
                                             withBoolean:(jboolean)useReverseDirection {
  OrgSpongycastleCryptoEnginesRFC3394WrapEngine_initWithOrgSpongycastleCryptoBlockCipher_withBoolean_(self, engine, useReverseDirection);
  return self;
}

- (void)init__WithBoolean:(jboolean)forWrapping
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)param {
  self->forWrapping_ = forWrapping;
  if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithRandom class]]) {
    param = [((OrgSpongycastleCryptoParamsParametersWithRandom *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithRandom *) param))) getParameters];
  }
  if ([param isKindOfClass:[OrgSpongycastleCryptoParamsKeyParameter class]]) {
    self->param_ = (OrgSpongycastleCryptoParamsKeyParameter *) param;
  }
  else if ([param isKindOfClass:[OrgSpongycastleCryptoParamsParametersWithIV class]]) {
    self->iv_ = [((OrgSpongycastleCryptoParamsParametersWithIV *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithIV *) param))) getIV];
    self->param_ = (OrgSpongycastleCryptoParamsKeyParameter *) cast_chk([((OrgSpongycastleCryptoParamsParametersWithIV *) nil_chk(((OrgSpongycastleCryptoParamsParametersWithIV *) param))) getParameters], [OrgSpongycastleCryptoParamsKeyParameter class]);
    if (((IOSByteArray *) nil_chk(self->iv_))->size_ != 8) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"IV not equal to 8");
    }
  }
}

- (NSString *)getAlgorithmName {
  return [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) getAlgorithmName];
}

- (IOSByteArray *)wrapWithByteArray:(IOSByteArray *)inArg
                            withInt:(jint)inOff
                            withInt:(jint)inLen {
  if (!forWrapping_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"not set for wrapping");
  }
  jint n = inLen / 8;
  if ((n * 8) != inLen) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"wrap data must be a multiple of 8 bytes");
  }
  IOSByteArray *block = [IOSByteArray newArrayWithLength:inLen + ((IOSByteArray *) nil_chk(iv_))->size_];
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:8 + iv_->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(iv_, 0, block, 0, iv_->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, block, ((IOSByteArray *) nil_chk(iv_))->size_, inLen);
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) init__WithBoolean:wrapCipherMode_ withOrgSpongycastleCryptoCipherParameters:param_];
  for (jint j = 0; j != 6; j++) {
    for (jint i = 1; i <= n; i++) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, 0, buf, 0, ((IOSByteArray *) nil_chk(iv_))->size_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, 8 * i, buf, ((IOSByteArray *) nil_chk(iv_))->size_, 8);
      [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) processBlockWithByteArray:buf withInt:0 withByteArray:buf withInt:0];
      jint t = n * j + i;
      for (jint k = 1; t != 0; k++) {
        jbyte v = (jbyte) t;
        *IOSByteArray_GetRef(buf, ((IOSByteArray *) nil_chk(iv_))->size_ - k) ^= v;
        JreURShiftAssignInt(&t, 8);
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, 0, block, 0, 8);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, 8, block, 8 * i, 8);
    }
  }
  return block;
}

- (IOSByteArray *)unwrapWithByteArray:(IOSByteArray *)inArg
                              withInt:(jint)inOff
                              withInt:(jint)inLen {
  if (forWrapping_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"not set for unwrapping");
  }
  jint n = inLen / 8;
  if ((n * 8) != inLen) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"unwrap data must be a multiple of 8 bytes");
  }
  IOSByteArray *block = [IOSByteArray newArrayWithLength:inLen - ((IOSByteArray *) nil_chk(iv_))->size_];
  IOSByteArray *a = [IOSByteArray newArrayWithLength:iv_->size_];
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:8 + iv_->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff, a, 0, iv_->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(inArg, inOff + ((IOSByteArray *) nil_chk(iv_))->size_, block, 0, inLen - iv_->size_);
  [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) init__WithBoolean:!wrapCipherMode_ withOrgSpongycastleCryptoCipherParameters:param_];
  n = n - 1;
  for (jint j = 5; j >= 0; j--) {
    for (jint i = n; i >= 1; i--) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, buf, 0, ((IOSByteArray *) nil_chk(iv_))->size_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, 8 * (i - 1), buf, ((IOSByteArray *) nil_chk(iv_))->size_, 8);
      jint t = n * j + i;
      for (jint k = 1; t != 0; k++) {
        jbyte v = (jbyte) t;
        *IOSByteArray_GetRef(buf, ((IOSByteArray *) nil_chk(iv_))->size_ - k) ^= v;
        JreURShiftAssignInt(&t, 8);
      }
      [((id<OrgSpongycastleCryptoBlockCipher>) nil_chk(engine_)) processBlockWithByteArray:buf withInt:0 withByteArray:buf withInt:0];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, 0, a, 0, 8);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, 8, block, 8 * (i - 1), 8);
    }
  }
  if (!OrgSpongycastleUtilArrays_constantTimeAreEqualWithByteArray_withByteArray_(a, iv_)) {
    @throw new_OrgSpongycastleCryptoInvalidCipherTextException_initWithNSString_(@"checksum failed");
  }
  return block;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 6, 5, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:);
  methods[1].selector = @selector(initWithOrgSpongycastleCryptoBlockCipher:withBoolean:);
  methods[2].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[3].selector = @selector(getAlgorithmName);
  methods[4].selector = @selector(wrapWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(unwrapWithByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "engine_", "LOrgSpongycastleCryptoBlockCipher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "wrapCipherMode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "param_", "LOrgSpongycastleCryptoParamsKeyParameter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forWrapping_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iv_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleCryptoBlockCipher;", "LOrgSpongycastleCryptoBlockCipher;Z", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "wrap", "[BII", "unwrap", "LOrgSpongycastleCryptoInvalidCipherTextException;" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesRFC3394WrapEngine = { "RFC3394WrapEngine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 6, 5, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesRFC3394WrapEngine;
}

@end

void OrgSpongycastleCryptoEnginesRFC3394WrapEngine_initWithOrgSpongycastleCryptoBlockCipher_(OrgSpongycastleCryptoEnginesRFC3394WrapEngine *self, id<OrgSpongycastleCryptoBlockCipher> engine) {
  OrgSpongycastleCryptoEnginesRFC3394WrapEngine_initWithOrgSpongycastleCryptoBlockCipher_withBoolean_(self, engine, false);
}

OrgSpongycastleCryptoEnginesRFC3394WrapEngine *new_OrgSpongycastleCryptoEnginesRFC3394WrapEngine_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> engine) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesRFC3394WrapEngine, initWithOrgSpongycastleCryptoBlockCipher_, engine)
}

OrgSpongycastleCryptoEnginesRFC3394WrapEngine *create_OrgSpongycastleCryptoEnginesRFC3394WrapEngine_initWithOrgSpongycastleCryptoBlockCipher_(id<OrgSpongycastleCryptoBlockCipher> engine) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesRFC3394WrapEngine, initWithOrgSpongycastleCryptoBlockCipher_, engine)
}

void OrgSpongycastleCryptoEnginesRFC3394WrapEngine_initWithOrgSpongycastleCryptoBlockCipher_withBoolean_(OrgSpongycastleCryptoEnginesRFC3394WrapEngine *self, id<OrgSpongycastleCryptoBlockCipher> engine, jboolean useReverseDirection) {
  NSObject_init(self);
  self->iv_ = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) (jint) 0xa6, (jbyte) (jint) 0xa6, (jbyte) (jint) 0xa6, (jbyte) (jint) 0xa6, (jbyte) (jint) 0xa6, (jbyte) (jint) 0xa6, (jbyte) (jint) 0xa6, (jbyte) (jint) 0xa6 } count:8];
  self->engine_ = engine;
  self->wrapCipherMode_ = (useReverseDirection) ? false : true;
}

OrgSpongycastleCryptoEnginesRFC3394WrapEngine *new_OrgSpongycastleCryptoEnginesRFC3394WrapEngine_initWithOrgSpongycastleCryptoBlockCipher_withBoolean_(id<OrgSpongycastleCryptoBlockCipher> engine, jboolean useReverseDirection) {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesRFC3394WrapEngine, initWithOrgSpongycastleCryptoBlockCipher_withBoolean_, engine, useReverseDirection)
}

OrgSpongycastleCryptoEnginesRFC3394WrapEngine *create_OrgSpongycastleCryptoEnginesRFC3394WrapEngine_initWithOrgSpongycastleCryptoBlockCipher_withBoolean_(id<OrgSpongycastleCryptoBlockCipher> engine, jboolean useReverseDirection) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesRFC3394WrapEngine, initWithOrgSpongycastleCryptoBlockCipher_withBoolean_, engine, useReverseDirection)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesRFC3394WrapEngine)
