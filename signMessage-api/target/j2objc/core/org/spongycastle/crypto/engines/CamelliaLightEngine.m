//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/CamelliaLightEngine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "org/spongycastle/crypto/CipherParameters.h"
#include "org/spongycastle/crypto/DataLengthException.h"
#include "org/spongycastle/crypto/OutputLengthException.h"
#include "org/spongycastle/crypto/engines/CamelliaLightEngine.h"
#include "org/spongycastle/crypto/params/KeyParameter.h"

@interface OrgSpongycastleCryptoEnginesCamelliaLightEngine () {
 @public
  jboolean initialized_;
  jboolean _keyis128_;
  IOSIntArray *subkey_;
  IOSIntArray *kw_;
  IOSIntArray *ke_;
  IOSIntArray *state_;
}

+ (jint)rightRotateWithInt:(jint)x
                   withInt:(jint)s;

+ (jint)leftRotateWithInt:(jint)x
                  withInt:(jint)s;

+ (void)roldqWithInt:(jint)rot
        withIntArray:(IOSIntArray *)ki
             withInt:(jint)ioff
        withIntArray:(IOSIntArray *)ko
             withInt:(jint)ooff;

+ (void)decroldqWithInt:(jint)rot
           withIntArray:(IOSIntArray *)ki
                withInt:(jint)ioff
           withIntArray:(IOSIntArray *)ko
                withInt:(jint)ooff;

+ (void)roldqo32WithInt:(jint)rot
           withIntArray:(IOSIntArray *)ki
                withInt:(jint)ioff
           withIntArray:(IOSIntArray *)ko
                withInt:(jint)ooff;

+ (void)decroldqo32WithInt:(jint)rot
              withIntArray:(IOSIntArray *)ki
                   withInt:(jint)ioff
              withIntArray:(IOSIntArray *)ko
                   withInt:(jint)ooff;

- (jint)bytes2intWithByteArray:(IOSByteArray *)src
                       withInt:(jint)offset;

- (void)int2bytesWithInt:(jint)word
           withByteArray:(IOSByteArray *)dst
                 withInt:(jint)offset;

- (jbyte)lRot8WithByte:(jbyte)v
               withInt:(jint)rot;

- (jint)sbox2WithInt:(jint)x;

- (jint)sbox3WithInt:(jint)x;

- (jint)sbox4WithInt:(jint)x;

- (void)camelliaF2WithIntArray:(IOSIntArray *)s
                  withIntArray:(IOSIntArray *)skey
                       withInt:(jint)keyoff;

- (void)camelliaFLsWithIntArray:(IOSIntArray *)s
                   withIntArray:(IOSIntArray *)fkey
                        withInt:(jint)keyoff;

- (void)setKeyWithBoolean:(jboolean)forEncryption
            withByteArray:(IOSByteArray *)key;

- (jint)processBlock128WithByteArray:(IOSByteArray *)inArg
                             withInt:(jint)inOff
                       withByteArray:(IOSByteArray *)outArg
                             withInt:(jint)outOff;

- (jint)processBlock192or256WithByteArray:(IOSByteArray *)inArg
                                  withInt:(jint)inOff
                            withByteArray:(IOSByteArray *)outArg
                                  withInt:(jint)outOff;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesCamelliaLightEngine, subkey_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesCamelliaLightEngine, kw_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesCamelliaLightEngine, ke_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCryptoEnginesCamelliaLightEngine, state_, IOSIntArray *)

inline jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_get_BLOCK_SIZE(void);
#define OrgSpongycastleCryptoEnginesCamelliaLightEngine_BLOCK_SIZE 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoEnginesCamelliaLightEngine, BLOCK_SIZE, jint)

inline jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_get_MASK8(void);
#define OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8 255
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleCryptoEnginesCamelliaLightEngine, MASK8, jint)

inline IOSIntArray *OrgSpongycastleCryptoEnginesCamelliaLightEngine_get_SIGMA(void);
static IOSIntArray *OrgSpongycastleCryptoEnginesCamelliaLightEngine_SIGMA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesCamelliaLightEngine, SIGMA, IOSIntArray *)

inline IOSByteArray *OrgSpongycastleCryptoEnginesCamelliaLightEngine_get_SBOX1(void);
static IOSByteArray *OrgSpongycastleCryptoEnginesCamelliaLightEngine_SBOX1;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleCryptoEnginesCamelliaLightEngine, SBOX1, IOSByteArray *)

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_rightRotateWithInt_withInt_(jint x, jint s);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_leftRotateWithInt_withInt_(jint x, jint s);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(jint rot, IOSIntArray *ki, jint ioff, IOSIntArray *ko, jint ooff);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(jint rot, IOSIntArray *ki, jint ioff, IOSIntArray *ko, jint ooff);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(jint rot, IOSIntArray *ki, jint ioff, IOSIntArray *ko, jint ooff);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(jint rot, IOSIntArray *ki, jint ioff, IOSIntArray *ko, jint ooff);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, IOSByteArray *src, jint offset);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesCamelliaLightEngine_int2bytesWithInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, jint word, IOSByteArray *dst, jint offset);

__attribute__((unused)) static jbyte OrgSpongycastleCryptoEnginesCamelliaLightEngine_lRot8WithByte_withInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, jbyte v, jint rot);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox2WithInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, jint x);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox3WithInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, jint x);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox4WithInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, jint x);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, IOSIntArray *s, IOSIntArray *skey, jint keyoff);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaFLsWithIntArray_withIntArray_withInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, IOSIntArray *s, IOSIntArray *fkey, jint keyoff);

__attribute__((unused)) static void OrgSpongycastleCryptoEnginesCamelliaLightEngine_setKeyWithBoolean_withByteArray_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, jboolean forEncryption, IOSByteArray *key);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_processBlock128WithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

__attribute__((unused)) static jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_processBlock192or256WithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff);

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleCryptoEnginesCamelliaLightEngine)

@implementation OrgSpongycastleCryptoEnginesCamelliaLightEngine

+ (jint)rightRotateWithInt:(jint)x
                   withInt:(jint)s {
  return OrgSpongycastleCryptoEnginesCamelliaLightEngine_rightRotateWithInt_withInt_(x, s);
}

+ (jint)leftRotateWithInt:(jint)x
                  withInt:(jint)s {
  return OrgSpongycastleCryptoEnginesCamelliaLightEngine_leftRotateWithInt_withInt_(x, s);
}

+ (void)roldqWithInt:(jint)rot
        withIntArray:(IOSIntArray *)ki
             withInt:(jint)ioff
        withIntArray:(IOSIntArray *)ko
             withInt:(jint)ooff {
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(rot, ki, ioff, ko, ooff);
}

+ (void)decroldqWithInt:(jint)rot
           withIntArray:(IOSIntArray *)ki
                withInt:(jint)ioff
           withIntArray:(IOSIntArray *)ko
                withInt:(jint)ooff {
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(rot, ki, ioff, ko, ooff);
}

+ (void)roldqo32WithInt:(jint)rot
           withIntArray:(IOSIntArray *)ki
                withInt:(jint)ioff
           withIntArray:(IOSIntArray *)ko
                withInt:(jint)ooff {
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(rot, ki, ioff, ko, ooff);
}

+ (void)decroldqo32WithInt:(jint)rot
              withIntArray:(IOSIntArray *)ki
                   withInt:(jint)ioff
              withIntArray:(IOSIntArray *)ko
                   withInt:(jint)ooff {
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(rot, ki, ioff, ko, ooff);
}

- (jint)bytes2intWithByteArray:(IOSByteArray *)src
                       withInt:(jint)offset {
  return OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, src, offset);
}

- (void)int2bytesWithInt:(jint)word
           withByteArray:(IOSByteArray *)dst
                 withInt:(jint)offset {
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_int2bytesWithInt_withByteArray_withInt_(self, word, dst, offset);
}

- (jbyte)lRot8WithByte:(jbyte)v
               withInt:(jint)rot {
  return OrgSpongycastleCryptoEnginesCamelliaLightEngine_lRot8WithByte_withInt_(self, v, rot);
}

- (jint)sbox2WithInt:(jint)x {
  return OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox2WithInt_(self, x);
}

- (jint)sbox3WithInt:(jint)x {
  return OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox3WithInt_(self, x);
}

- (jint)sbox4WithInt:(jint)x {
  return OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox4WithInt_(self, x);
}

- (void)camelliaF2WithIntArray:(IOSIntArray *)s
                  withIntArray:(IOSIntArray *)skey
                       withInt:(jint)keyoff {
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, s, skey, keyoff);
}

- (void)camelliaFLsWithIntArray:(IOSIntArray *)s
                   withIntArray:(IOSIntArray *)fkey
                        withInt:(jint)keyoff {
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaFLsWithIntArray_withIntArray_withInt_(self, s, fkey, keyoff);
}

- (void)setKeyWithBoolean:(jboolean)forEncryption
            withByteArray:(IOSByteArray *)key {
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_setKeyWithBoolean_withByteArray_(self, forEncryption, key);
}

- (jint)processBlock128WithByteArray:(IOSByteArray *)inArg
                             withInt:(jint)inOff
                       withByteArray:(IOSByteArray *)outArg
                             withInt:(jint)outOff {
  return OrgSpongycastleCryptoEnginesCamelliaLightEngine_processBlock128WithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

- (jint)processBlock192or256WithByteArray:(IOSByteArray *)inArg
                                  withInt:(jint)inOff
                            withByteArray:(IOSByteArray *)outArg
                                  withInt:(jint)outOff {
  return OrgSpongycastleCryptoEnginesCamelliaLightEngine_processBlock192or256WithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getAlgorithmName {
  return @"Camellia";
}

- (jint)getBlockSize {
  return OrgSpongycastleCryptoEnginesCamelliaLightEngine_BLOCK_SIZE;
}

- (void)init__WithBoolean:(jboolean)forEncryption
withOrgSpongycastleCryptoCipherParameters:(id<OrgSpongycastleCryptoCipherParameters>)params {
  if (!([params isKindOfClass:[OrgSpongycastleCryptoParamsKeyParameter class]])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"only simple KeyParameter expected.");
  }
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_setKeyWithBoolean_withByteArray_(self, forEncryption, [((OrgSpongycastleCryptoParamsKeyParameter *) nil_chk(((OrgSpongycastleCryptoParamsKeyParameter *) cast_chk(params, [OrgSpongycastleCryptoParamsKeyParameter class])))) getKey]);
  initialized_ = true;
}

- (jint)processBlockWithByteArray:(IOSByteArray *)inArg
                          withInt:(jint)inOff
                    withByteArray:(IOSByteArray *)outArg
                          withInt:(jint)outOff {
  if (!initialized_) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Camellia is not initialized");
  }
  if ((inOff + OrgSpongycastleCryptoEnginesCamelliaLightEngine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(inArg))->size_) {
    @throw new_OrgSpongycastleCryptoDataLengthException_initWithNSString_(@"input buffer too short");
  }
  if ((outOff + OrgSpongycastleCryptoEnginesCamelliaLightEngine_BLOCK_SIZE) > ((IOSByteArray *) nil_chk(outArg))->size_) {
    @throw new_OrgSpongycastleCryptoOutputLengthException_initWithNSString_(@"output buffer too short");
  }
  if (_keyis128_) {
    return OrgSpongycastleCryptoEnginesCamelliaLightEngine_processBlock128WithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
  }
  else {
    return OrgSpongycastleCryptoEnginesCamelliaLightEngine_processBlock192or256WithByteArray_withInt_withByteArray_withInt_(self, inArg, inOff, outArg, outOff);
  }
}

- (void)reset {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 7, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "B", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 16, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 17, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 23, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 25, 24, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 28, 24, 29, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(rightRotateWithInt:withInt:);
  methods[1].selector = @selector(leftRotateWithInt:withInt:);
  methods[2].selector = @selector(roldqWithInt:withIntArray:withInt:withIntArray:withInt:);
  methods[3].selector = @selector(decroldqWithInt:withIntArray:withInt:withIntArray:withInt:);
  methods[4].selector = @selector(roldqo32WithInt:withIntArray:withInt:withIntArray:withInt:);
  methods[5].selector = @selector(decroldqo32WithInt:withIntArray:withInt:withIntArray:withInt:);
  methods[6].selector = @selector(bytes2intWithByteArray:withInt:);
  methods[7].selector = @selector(int2bytesWithInt:withByteArray:withInt:);
  methods[8].selector = @selector(lRot8WithByte:withInt:);
  methods[9].selector = @selector(sbox2WithInt:);
  methods[10].selector = @selector(sbox3WithInt:);
  methods[11].selector = @selector(sbox4WithInt:);
  methods[12].selector = @selector(camelliaF2WithIntArray:withIntArray:withInt:);
  methods[13].selector = @selector(camelliaFLsWithIntArray:withIntArray:withInt:);
  methods[14].selector = @selector(setKeyWithBoolean:withByteArray:);
  methods[15].selector = @selector(processBlock128WithByteArray:withInt:withByteArray:withInt:);
  methods[16].selector = @selector(processBlock192or256WithByteArray:withInt:withByteArray:withInt:);
  methods[17].selector = @selector(init);
  methods[18].selector = @selector(getAlgorithmName);
  methods[19].selector = @selector(getBlockSize);
  methods[20].selector = @selector(init__WithBoolean:withOrgSpongycastleCryptoCipherParameters:);
  methods[21].selector = @selector(processBlockWithByteArray:withInt:withByteArray:withInt:);
  methods[22].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BLOCK_SIZE", "I", .constantValue.asInt = OrgSpongycastleCryptoEnginesCamelliaLightEngine_BLOCK_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MASK8", "I", .constantValue.asInt = OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8, 0x1a, -1, -1, -1, -1 },
    { "initialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_keyis128_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "subkey_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "kw_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ke_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "state_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "SIGMA", "[I", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "SBOX1", "[B", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
  };
  static const void *ptrTable[] = { "rightRotate", "II", "leftRotate", "roldq", "I[II[II", "decroldq", "roldqo32", "decroldqo32", "bytes2int", "[BI", "int2bytes", "I[BI", "lRot8", "BI", "sbox2", "I", "sbox3", "sbox4", "camelliaF2", "[I[II", "camelliaFLs", "setKey", "Z[B", "processBlock128", "[BI[BI", "processBlock192or256", "init", "ZLOrgSpongycastleCryptoCipherParameters;", "processBlock", "LJavaLangIllegalStateException;", &OrgSpongycastleCryptoEnginesCamelliaLightEngine_SIGMA, &OrgSpongycastleCryptoEnginesCamelliaLightEngine_SBOX1 };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesCamelliaLightEngine = { "CamelliaLightEngine", "org.spongycastle.crypto.engines", ptrTable, methods, fields, 7, 0x1, 23, 10, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesCamelliaLightEngine;
}

+ (void)initialize {
  if (self == [OrgSpongycastleCryptoEnginesCamelliaLightEngine class]) {
    OrgSpongycastleCryptoEnginesCamelliaLightEngine_SIGMA = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0xa09e667f, (jint) 0x3bcc908b, (jint) 0xb67ae858, (jint) 0x4caa73b2, (jint) 0xc6ef372f, (jint) 0xe94f82be, (jint) 0x54ff53a5, (jint) 0xf1d36f1c, (jint) 0x10e527fa, (jint) 0xde682d1d, (jint) 0xb05688c2, (jint) 0xb3e6c1fd } count:12];
    OrgSpongycastleCryptoEnginesCamelliaLightEngine_SBOX1 = [IOSByteArray newArrayWithBytes:(jbyte[]){ (jbyte) 112, (jbyte) 130, (jbyte) 44, (jbyte) 236, (jbyte) 179, (jbyte) 39, (jbyte) 192, (jbyte) 229, (jbyte) 228, (jbyte) 133, (jbyte) 87, (jbyte) 53, (jbyte) 234, (jbyte) 12, (jbyte) 174, (jbyte) 65, (jbyte) 35, (jbyte) 239, (jbyte) 107, (jbyte) 147, (jbyte) 69, (jbyte) 25, (jbyte) 165, (jbyte) 33, (jbyte) 237, (jbyte) 14, (jbyte) 79, (jbyte) 78, (jbyte) 29, (jbyte) 101, (jbyte) 146, (jbyte) 189, (jbyte) 134, (jbyte) 184, (jbyte) 175, (jbyte) 143, (jbyte) 124, (jbyte) 235, (jbyte) 31, (jbyte) 206, (jbyte) 62, (jbyte) 48, (jbyte) 220, (jbyte) 95, (jbyte) 94, (jbyte) 197, (jbyte) 11, (jbyte) 26, (jbyte) 166, (jbyte) 225, (jbyte) 57, (jbyte) 202, (jbyte) 213, (jbyte) 71, (jbyte) 93, (jbyte) 61, (jbyte) 217, (jbyte) 1, (jbyte) 90, (jbyte) 214, (jbyte) 81, (jbyte) 86, (jbyte) 108, (jbyte) 77, (jbyte) 139, (jbyte) 13, (jbyte) 154, (jbyte) 102, (jbyte) 251, (jbyte) 204, (jbyte) 176, (jbyte) 45, (jbyte) 116, (jbyte) 18, (jbyte) 43, (jbyte) 32, (jbyte) 240, (jbyte) 177, (jbyte) 132, (jbyte) 153, (jbyte) 223, (jbyte) 76, (jbyte) 203, (jbyte) 194, (jbyte) 52, (jbyte) 126, (jbyte) 118, (jbyte) 5, (jbyte) 109, (jbyte) 183, (jbyte) 169, (jbyte) 49, (jbyte) 209, (jbyte) 23, (jbyte) 4, (jbyte) 215, (jbyte) 20, (jbyte) 88, (jbyte) 58, (jbyte) 97, (jbyte) 222, (jbyte) 27, (jbyte) 17, (jbyte) 28, (jbyte) 50, (jbyte) 15, (jbyte) 156, (jbyte) 22, (jbyte) 83, (jbyte) 24, (jbyte) 242, (jbyte) 34, (jbyte) 254, (jbyte) 68, (jbyte) 207, (jbyte) 178, (jbyte) 195, (jbyte) 181, (jbyte) 122, (jbyte) 145, (jbyte) 36, (jbyte) 8, (jbyte) 232, (jbyte) 168, (jbyte) 96, (jbyte) 252, (jbyte) 105, (jbyte) 80, (jbyte) 170, (jbyte) 208, (jbyte) 160, (jbyte) 125, (jbyte) 161, (jbyte) 137, (jbyte) 98, (jbyte) 151, (jbyte) 84, (jbyte) 91, (jbyte) 30, (jbyte) 149, (jbyte) 224, (jbyte) 255, (jbyte) 100, (jbyte) 210, (jbyte) 16, (jbyte) 196, (jbyte) 0, (jbyte) 72, (jbyte) 163, (jbyte) 247, (jbyte) 117, (jbyte) 219, (jbyte) 138, (jbyte) 3, (jbyte) 230, (jbyte) 218, (jbyte) 9, (jbyte) 63, (jbyte) 221, (jbyte) 148, (jbyte) 135, (jbyte) 92, (jbyte) 131, (jbyte) 2, (jbyte) 205, (jbyte) 74, (jbyte) 144, (jbyte) 51, (jbyte) 115, (jbyte) 103, (jbyte) 246, (jbyte) 243, (jbyte) 157, (jbyte) 127, (jbyte) 191, (jbyte) 226, (jbyte) 82, (jbyte) 155, (jbyte) 216, (jbyte) 38, (jbyte) 200, (jbyte) 55, (jbyte) 198, (jbyte) 59, (jbyte) 129, (jbyte) 150, (jbyte) 111, (jbyte) 75, (jbyte) 19, (jbyte) 190, (jbyte) 99, (jbyte) 46, (jbyte) 233, (jbyte) 121, (jbyte) 167, (jbyte) 140, (jbyte) 159, (jbyte) 110, (jbyte) 188, (jbyte) 142, (jbyte) 41, (jbyte) 245, (jbyte) 249, (jbyte) 182, (jbyte) 47, (jbyte) 253, (jbyte) 180, (jbyte) 89, (jbyte) 120, (jbyte) 152, (jbyte) 6, (jbyte) 106, (jbyte) 231, (jbyte) 70, (jbyte) 113, (jbyte) 186, (jbyte) 212, (jbyte) 37, (jbyte) 171, (jbyte) 66, (jbyte) 136, (jbyte) 162, (jbyte) 141, (jbyte) 250, (jbyte) 114, (jbyte) 7, (jbyte) 185, (jbyte) 85, (jbyte) 248, (jbyte) 238, (jbyte) 172, (jbyte) 10, (jbyte) 54, (jbyte) 73, (jbyte) 42, (jbyte) 104, (jbyte) 60, (jbyte) 56, (jbyte) 241, (jbyte) 164, (jbyte) 64, (jbyte) 40, (jbyte) 211, (jbyte) 123, (jbyte) 187, (jbyte) 201, (jbyte) 67, (jbyte) 193, (jbyte) 21, (jbyte) 227, (jbyte) 173, (jbyte) 244, (jbyte) 119, (jbyte) 199, (jbyte) 128, (jbyte) 158 } count:256];
    J2OBJC_SET_INITIALIZED(OrgSpongycastleCryptoEnginesCamelliaLightEngine)
  }
}

@end

jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_rightRotateWithInt_withInt_(jint x, jint s) {
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_initialize();
  return ((JreURShift32((x), (s))) + (JreLShift32((x), (32 - s))));
}

jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_leftRotateWithInt_withInt_(jint x, jint s) {
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_initialize();
  return (JreLShift32((x), (s))) + (JreURShift32((x), (32 - s)));
}

void OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(jint rot, IOSIntArray *ki, jint ioff, IOSIntArray *ko, jint ooff) {
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_initialize();
  *IOSIntArray_GetRef(nil_chk(ko), 0 + ooff) = (JreLShift32(IOSIntArray_Get(nil_chk(ki), 0 + ioff), rot)) | (JreURShift32(IOSIntArray_Get(ki, 1 + ioff), (32 - rot)));
  *IOSIntArray_GetRef(ko, 1 + ooff) = (JreLShift32(IOSIntArray_Get(ki, 1 + ioff), rot)) | (JreURShift32(IOSIntArray_Get(ki, 2 + ioff), (32 - rot)));
  *IOSIntArray_GetRef(ko, 2 + ooff) = (JreLShift32(IOSIntArray_Get(ki, 2 + ioff), rot)) | (JreURShift32(IOSIntArray_Get(ki, 3 + ioff), (32 - rot)));
  *IOSIntArray_GetRef(ko, 3 + ooff) = (JreLShift32(IOSIntArray_Get(ki, 3 + ioff), rot)) | (JreURShift32(IOSIntArray_Get(ki, 0 + ioff), (32 - rot)));
  *IOSIntArray_GetRef(ki, 0 + ioff) = IOSIntArray_Get(ko, 0 + ooff);
  *IOSIntArray_GetRef(ki, 1 + ioff) = IOSIntArray_Get(ko, 1 + ooff);
  *IOSIntArray_GetRef(ki, 2 + ioff) = IOSIntArray_Get(ko, 2 + ooff);
  *IOSIntArray_GetRef(ki, 3 + ioff) = IOSIntArray_Get(ko, 3 + ooff);
}

void OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(jint rot, IOSIntArray *ki, jint ioff, IOSIntArray *ko, jint ooff) {
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_initialize();
  *IOSIntArray_GetRef(nil_chk(ko), 2 + ooff) = (JreLShift32(IOSIntArray_Get(nil_chk(ki), 0 + ioff), rot)) | (JreURShift32(IOSIntArray_Get(ki, 1 + ioff), (32 - rot)));
  *IOSIntArray_GetRef(ko, 3 + ooff) = (JreLShift32(IOSIntArray_Get(ki, 1 + ioff), rot)) | (JreURShift32(IOSIntArray_Get(ki, 2 + ioff), (32 - rot)));
  *IOSIntArray_GetRef(ko, 0 + ooff) = (JreLShift32(IOSIntArray_Get(ki, 2 + ioff), rot)) | (JreURShift32(IOSIntArray_Get(ki, 3 + ioff), (32 - rot)));
  *IOSIntArray_GetRef(ko, 1 + ooff) = (JreLShift32(IOSIntArray_Get(ki, 3 + ioff), rot)) | (JreURShift32(IOSIntArray_Get(ki, 0 + ioff), (32 - rot)));
  *IOSIntArray_GetRef(ki, 0 + ioff) = IOSIntArray_Get(ko, 2 + ooff);
  *IOSIntArray_GetRef(ki, 1 + ioff) = IOSIntArray_Get(ko, 3 + ooff);
  *IOSIntArray_GetRef(ki, 2 + ioff) = IOSIntArray_Get(ko, 0 + ooff);
  *IOSIntArray_GetRef(ki, 3 + ioff) = IOSIntArray_Get(ko, 1 + ooff);
}

void OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(jint rot, IOSIntArray *ki, jint ioff, IOSIntArray *ko, jint ooff) {
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_initialize();
  *IOSIntArray_GetRef(nil_chk(ko), 0 + ooff) = (JreLShift32(IOSIntArray_Get(nil_chk(ki), 1 + ioff), (rot - 32))) | (JreURShift32(IOSIntArray_Get(ki, 2 + ioff), (64 - rot)));
  *IOSIntArray_GetRef(ko, 1 + ooff) = (JreLShift32(IOSIntArray_Get(ki, 2 + ioff), (rot - 32))) | (JreURShift32(IOSIntArray_Get(ki, 3 + ioff), (64 - rot)));
  *IOSIntArray_GetRef(ko, 2 + ooff) = (JreLShift32(IOSIntArray_Get(ki, 3 + ioff), (rot - 32))) | (JreURShift32(IOSIntArray_Get(ki, 0 + ioff), (64 - rot)));
  *IOSIntArray_GetRef(ko, 3 + ooff) = (JreLShift32(IOSIntArray_Get(ki, 0 + ioff), (rot - 32))) | (JreURShift32(IOSIntArray_Get(ki, 1 + ioff), (64 - rot)));
  *IOSIntArray_GetRef(ki, 0 + ioff) = IOSIntArray_Get(ko, 0 + ooff);
  *IOSIntArray_GetRef(ki, 1 + ioff) = IOSIntArray_Get(ko, 1 + ooff);
  *IOSIntArray_GetRef(ki, 2 + ioff) = IOSIntArray_Get(ko, 2 + ooff);
  *IOSIntArray_GetRef(ki, 3 + ioff) = IOSIntArray_Get(ko, 3 + ooff);
}

void OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(jint rot, IOSIntArray *ki, jint ioff, IOSIntArray *ko, jint ooff) {
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_initialize();
  *IOSIntArray_GetRef(nil_chk(ko), 2 + ooff) = (JreLShift32(IOSIntArray_Get(nil_chk(ki), 1 + ioff), (rot - 32))) | (JreURShift32(IOSIntArray_Get(ki, 2 + ioff), (64 - rot)));
  *IOSIntArray_GetRef(ko, 3 + ooff) = (JreLShift32(IOSIntArray_Get(ki, 2 + ioff), (rot - 32))) | (JreURShift32(IOSIntArray_Get(ki, 3 + ioff), (64 - rot)));
  *IOSIntArray_GetRef(ko, 0 + ooff) = (JreLShift32(IOSIntArray_Get(ki, 3 + ioff), (rot - 32))) | (JreURShift32(IOSIntArray_Get(ki, 0 + ioff), (64 - rot)));
  *IOSIntArray_GetRef(ko, 1 + ooff) = (JreLShift32(IOSIntArray_Get(ki, 0 + ioff), (rot - 32))) | (JreURShift32(IOSIntArray_Get(ki, 1 + ioff), (64 - rot)));
  *IOSIntArray_GetRef(ki, 0 + ioff) = IOSIntArray_Get(ko, 2 + ooff);
  *IOSIntArray_GetRef(ki, 1 + ioff) = IOSIntArray_Get(ko, 3 + ooff);
  *IOSIntArray_GetRef(ki, 2 + ioff) = IOSIntArray_Get(ko, 0 + ooff);
  *IOSIntArray_GetRef(ki, 3 + ioff) = IOSIntArray_Get(ko, 1 + ooff);
}

jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, IOSByteArray *src, jint offset) {
  jint word = 0;
  for (jint i = 0; i < 4; i++) {
    word = (JreLShift32(word, 8)) + (IOSByteArray_Get(nil_chk(src), i + offset) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8);
  }
  return word;
}

void OrgSpongycastleCryptoEnginesCamelliaLightEngine_int2bytesWithInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, jint word, IOSByteArray *dst, jint offset) {
  for (jint i = 0; i < 4; i++) {
    *IOSByteArray_GetRef(nil_chk(dst), (3 - i) + offset) = (jbyte) word;
    JreURShiftAssignInt(&word, 8);
  }
}

jbyte OrgSpongycastleCryptoEnginesCamelliaLightEngine_lRot8WithByte_withInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, jbyte v, jint rot) {
  return (jbyte) ((JreLShift32(v, rot)) | (JreURShift32((v & (jint) 0xff), (8 - rot))));
}

jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox2WithInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, jint x) {
  return (OrgSpongycastleCryptoEnginesCamelliaLightEngine_lRot8WithByte_withInt_(self, IOSByteArray_Get(nil_chk(OrgSpongycastleCryptoEnginesCamelliaLightEngine_SBOX1), x), 1) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8);
}

jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox3WithInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, jint x) {
  return (OrgSpongycastleCryptoEnginesCamelliaLightEngine_lRot8WithByte_withInt_(self, IOSByteArray_Get(nil_chk(OrgSpongycastleCryptoEnginesCamelliaLightEngine_SBOX1), x), 7) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8);
}

jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox4WithInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, jint x) {
  return (IOSByteArray_Get(nil_chk(OrgSpongycastleCryptoEnginesCamelliaLightEngine_SBOX1), ((jint) OrgSpongycastleCryptoEnginesCamelliaLightEngine_lRot8WithByte_withInt_(self, (jbyte) x, 1) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8);
}

void OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, IOSIntArray *s, IOSIntArray *skey, jint keyoff) {
  jint t1;
  jint t2;
  jint u;
  jint v;
  t1 = IOSIntArray_Get(nil_chk(s), 0) ^ IOSIntArray_Get(nil_chk(skey), 0 + keyoff);
  u = OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox4WithInt_(self, (t1 & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8));
  u |= (JreLShift32(OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox3WithInt_(self, ((JreURShift32(t1, 8)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8)), 8));
  u |= (JreLShift32(OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox2WithInt_(self, ((JreURShift32(t1, 16)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8)), 16));
  u |= (JreLShift32((jint) (IOSByteArray_Get(nil_chk(OrgSpongycastleCryptoEnginesCamelliaLightEngine_SBOX1), ((JreURShift32(t1, 24)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8), 24));
  t2 = IOSIntArray_Get(s, 1) ^ IOSIntArray_Get(skey, 1 + keyoff);
  v = (jint) IOSByteArray_Get(OrgSpongycastleCryptoEnginesCamelliaLightEngine_SBOX1, (t2 & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8;
  v |= (JreLShift32(OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox4WithInt_(self, ((JreURShift32(t2, 8)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8)), 8));
  v |= (JreLShift32(OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox3WithInt_(self, ((JreURShift32(t2, 16)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8)), 16));
  v |= (JreLShift32(OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox2WithInt_(self, ((JreURShift32(t2, 24)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8)), 24));
  v = OrgSpongycastleCryptoEnginesCamelliaLightEngine_leftRotateWithInt_withInt_(v, 8);
  u ^= v;
  v = OrgSpongycastleCryptoEnginesCamelliaLightEngine_leftRotateWithInt_withInt_(v, 8) ^ u;
  u = OrgSpongycastleCryptoEnginesCamelliaLightEngine_rightRotateWithInt_withInt_(u, 8) ^ v;
  *IOSIntArray_GetRef(s, 2) ^= OrgSpongycastleCryptoEnginesCamelliaLightEngine_leftRotateWithInt_withInt_(v, 16) ^ u;
  *IOSIntArray_GetRef(s, 3) ^= OrgSpongycastleCryptoEnginesCamelliaLightEngine_leftRotateWithInt_withInt_(u, 8);
  t1 = IOSIntArray_Get(s, 2) ^ IOSIntArray_Get(skey, 2 + keyoff);
  u = OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox4WithInt_(self, (t1 & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8));
  u |= JreLShift32(OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox3WithInt_(self, ((JreURShift32(t1, 8)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8)), 8);
  u |= JreLShift32(OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox2WithInt_(self, ((JreURShift32(t1, 16)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8)), 16);
  u |= JreLShift32(((jint) IOSByteArray_Get(OrgSpongycastleCryptoEnginesCamelliaLightEngine_SBOX1, ((JreURShift32(t1, 24)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8), 24);
  t2 = IOSIntArray_Get(s, 3) ^ IOSIntArray_Get(skey, 3 + keyoff);
  v = ((jint) IOSByteArray_Get(OrgSpongycastleCryptoEnginesCamelliaLightEngine_SBOX1, (t2 & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8);
  v |= JreLShift32(OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox4WithInt_(self, ((JreURShift32(t2, 8)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8)), 8);
  v |= JreLShift32(OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox3WithInt_(self, ((JreURShift32(t2, 16)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8)), 16);
  v |= JreLShift32(OrgSpongycastleCryptoEnginesCamelliaLightEngine_sbox2WithInt_(self, ((JreURShift32(t2, 24)) & OrgSpongycastleCryptoEnginesCamelliaLightEngine_MASK8)), 24);
  v = OrgSpongycastleCryptoEnginesCamelliaLightEngine_leftRotateWithInt_withInt_(v, 8);
  u ^= v;
  v = OrgSpongycastleCryptoEnginesCamelliaLightEngine_leftRotateWithInt_withInt_(v, 8) ^ u;
  u = OrgSpongycastleCryptoEnginesCamelliaLightEngine_rightRotateWithInt_withInt_(u, 8) ^ v;
  *IOSIntArray_GetRef(s, 0) ^= OrgSpongycastleCryptoEnginesCamelliaLightEngine_leftRotateWithInt_withInt_(v, 16) ^ u;
  *IOSIntArray_GetRef(s, 1) ^= OrgSpongycastleCryptoEnginesCamelliaLightEngine_leftRotateWithInt_withInt_(u, 8);
}

void OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaFLsWithIntArray_withIntArray_withInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, IOSIntArray *s, IOSIntArray *fkey, jint keyoff) {
  *IOSIntArray_GetRef(nil_chk(s), 1) ^= OrgSpongycastleCryptoEnginesCamelliaLightEngine_leftRotateWithInt_withInt_(IOSIntArray_Get(s, 0) & IOSIntArray_Get(nil_chk(fkey), 0 + keyoff), 1);
  *IOSIntArray_GetRef(s, 0) ^= IOSIntArray_Get(fkey, 1 + keyoff) | IOSIntArray_Get(s, 1);
  *IOSIntArray_GetRef(s, 2) ^= IOSIntArray_Get(fkey, 3 + keyoff) | IOSIntArray_Get(s, 3);
  *IOSIntArray_GetRef(s, 3) ^= OrgSpongycastleCryptoEnginesCamelliaLightEngine_leftRotateWithInt_withInt_(IOSIntArray_Get(fkey, 2 + keyoff) & IOSIntArray_Get(s, 2), 1);
}

void OrgSpongycastleCryptoEnginesCamelliaLightEngine_setKeyWithBoolean_withByteArray_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, jboolean forEncryption, IOSByteArray *key) {
  IOSIntArray *k = [IOSIntArray newArrayWithLength:8];
  IOSIntArray *ka = [IOSIntArray newArrayWithLength:4];
  IOSIntArray *kb = [IOSIntArray newArrayWithLength:4];
  IOSIntArray *t = [IOSIntArray newArrayWithLength:4];
  switch (((IOSByteArray *) nil_chk(key))->size_) {
    case 16:
    self->_keyis128_ = true;
    *IOSIntArray_GetRef(k, 0) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 0);
    *IOSIntArray_GetRef(k, 1) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 4);
    *IOSIntArray_GetRef(k, 2) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 8);
    *IOSIntArray_GetRef(k, 3) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 12);
    *IOSIntArray_GetRef(k, 4) = *IOSIntArray_GetRef(k, 5) = *IOSIntArray_GetRef(k, 6) = *IOSIntArray_GetRef(k, 7) = 0;
    break;
    case 24:
    *IOSIntArray_GetRef(k, 0) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 0);
    *IOSIntArray_GetRef(k, 1) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 4);
    *IOSIntArray_GetRef(k, 2) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 8);
    *IOSIntArray_GetRef(k, 3) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 12);
    *IOSIntArray_GetRef(k, 4) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 16);
    *IOSIntArray_GetRef(k, 5) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 20);
    *IOSIntArray_GetRef(k, 6) = ~IOSIntArray_Get(k, 4);
    *IOSIntArray_GetRef(k, 7) = ~IOSIntArray_Get(k, 5);
    self->_keyis128_ = false;
    break;
    case 32:
    *IOSIntArray_GetRef(k, 0) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 0);
    *IOSIntArray_GetRef(k, 1) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 4);
    *IOSIntArray_GetRef(k, 2) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 8);
    *IOSIntArray_GetRef(k, 3) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 12);
    *IOSIntArray_GetRef(k, 4) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 16);
    *IOSIntArray_GetRef(k, 5) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 20);
    *IOSIntArray_GetRef(k, 6) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 24);
    *IOSIntArray_GetRef(k, 7) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, key, 28);
    self->_keyis128_ = false;
    break;
    default:
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"key sizes are only 16/24/32 bytes.");
  }
  for (jint i = 0; i < 4; i++) {
    *IOSIntArray_GetRef(ka, i) = IOSIntArray_Get(k, i) ^ IOSIntArray_Get(k, i + 4);
  }
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, ka, OrgSpongycastleCryptoEnginesCamelliaLightEngine_SIGMA, 0);
  for (jint i = 0; i < 4; i++) {
    *IOSIntArray_GetRef(ka, i) ^= IOSIntArray_Get(k, i);
  }
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, ka, OrgSpongycastleCryptoEnginesCamelliaLightEngine_SIGMA, 4);
  if (self->_keyis128_) {
    if (forEncryption) {
      *IOSIntArray_GetRef(nil_chk(self->kw_), 0) = IOSIntArray_Get(k, 0);
      *IOSIntArray_GetRef(self->kw_, 1) = IOSIntArray_Get(k, 1);
      *IOSIntArray_GetRef(self->kw_, 2) = IOSIntArray_Get(k, 2);
      *IOSIntArray_GetRef(self->kw_, 3) = IOSIntArray_Get(k, 3);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, k, 0, self->subkey_, 4);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(30, k, 0, self->subkey_, 12);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, k, 0, t, 0);
      *IOSIntArray_GetRef(nil_chk(self->subkey_), 18) = IOSIntArray_Get(t, 2);
      *IOSIntArray_GetRef(self->subkey_, 19) = IOSIntArray_Get(t, 3);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(17, k, 0, self->ke_, 4);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(17, k, 0, self->subkey_, 24);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(17, k, 0, self->subkey_, 32);
      *IOSIntArray_GetRef(nil_chk(self->subkey_), 0) = IOSIntArray_Get(ka, 0);
      *IOSIntArray_GetRef(self->subkey_, 1) = IOSIntArray_Get(ka, 1);
      *IOSIntArray_GetRef(self->subkey_, 2) = IOSIntArray_Get(ka, 2);
      *IOSIntArray_GetRef(self->subkey_, 3) = IOSIntArray_Get(ka, 3);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, ka, 0, self->subkey_, 8);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, ka, 0, self->ke_, 0);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, ka, 0, t, 0);
      *IOSIntArray_GetRef(nil_chk(self->subkey_), 16) = IOSIntArray_Get(t, 0);
      *IOSIntArray_GetRef(self->subkey_, 17) = IOSIntArray_Get(t, 1);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, ka, 0, self->subkey_, 20);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(34, ka, 0, self->subkey_, 28);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(17, ka, 0, self->kw_, 4);
    }
    else {
      *IOSIntArray_GetRef(nil_chk(self->kw_), 4) = IOSIntArray_Get(k, 0);
      *IOSIntArray_GetRef(self->kw_, 5) = IOSIntArray_Get(k, 1);
      *IOSIntArray_GetRef(self->kw_, 6) = IOSIntArray_Get(k, 2);
      *IOSIntArray_GetRef(self->kw_, 7) = IOSIntArray_Get(k, 3);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, k, 0, self->subkey_, 28);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(30, k, 0, self->subkey_, 20);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, k, 0, t, 0);
      *IOSIntArray_GetRef(nil_chk(self->subkey_), 16) = IOSIntArray_Get(t, 0);
      *IOSIntArray_GetRef(self->subkey_, 17) = IOSIntArray_Get(t, 1);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(17, k, 0, self->ke_, 0);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(17, k, 0, self->subkey_, 8);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(17, k, 0, self->subkey_, 0);
      *IOSIntArray_GetRef(nil_chk(self->subkey_), 34) = IOSIntArray_Get(ka, 0);
      *IOSIntArray_GetRef(self->subkey_, 35) = IOSIntArray_Get(ka, 1);
      *IOSIntArray_GetRef(self->subkey_, 32) = IOSIntArray_Get(ka, 2);
      *IOSIntArray_GetRef(self->subkey_, 33) = IOSIntArray_Get(ka, 3);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, ka, 0, self->subkey_, 24);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, ka, 0, self->ke_, 4);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, ka, 0, t, 0);
      *IOSIntArray_GetRef(nil_chk(self->subkey_), 18) = IOSIntArray_Get(t, 2);
      *IOSIntArray_GetRef(self->subkey_, 19) = IOSIntArray_Get(t, 3);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, ka, 0, self->subkey_, 12);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(34, ka, 0, self->subkey_, 4);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(17, ka, 0, self->kw_, 0);
    }
  }
  else {
    for (jint i = 0; i < 4; i++) {
      *IOSIntArray_GetRef(kb, i) = IOSIntArray_Get(ka, i) ^ IOSIntArray_Get(k, i + 4);
    }
    OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, kb, OrgSpongycastleCryptoEnginesCamelliaLightEngine_SIGMA, 8);
    if (forEncryption) {
      *IOSIntArray_GetRef(nil_chk(self->kw_), 0) = IOSIntArray_Get(k, 0);
      *IOSIntArray_GetRef(self->kw_, 1) = IOSIntArray_Get(k, 1);
      *IOSIntArray_GetRef(self->kw_, 2) = IOSIntArray_Get(k, 2);
      *IOSIntArray_GetRef(self->kw_, 3) = IOSIntArray_Get(k, 3);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(45, k, 0, self->subkey_, 16);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, k, 0, self->ke_, 4);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(17, k, 0, self->subkey_, 32);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(34, k, 0, self->subkey_, 44);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, k, 4, self->subkey_, 4);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, k, 4, self->ke_, 0);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(30, k, 4, self->subkey_, 24);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(34, k, 4, self->subkey_, 36);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, ka, 0, self->subkey_, 8);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(30, ka, 0, self->subkey_, 20);
      *IOSIntArray_GetRef(nil_chk(self->ke_), 8) = IOSIntArray_Get(ka, 1);
      *IOSIntArray_GetRef(self->ke_, 9) = IOSIntArray_Get(ka, 2);
      *IOSIntArray_GetRef(self->ke_, 10) = IOSIntArray_Get(ka, 3);
      *IOSIntArray_GetRef(self->ke_, 11) = IOSIntArray_Get(ka, 0);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(49, ka, 0, self->subkey_, 40);
      *IOSIntArray_GetRef(nil_chk(self->subkey_), 0) = IOSIntArray_Get(kb, 0);
      *IOSIntArray_GetRef(self->subkey_, 1) = IOSIntArray_Get(kb, 1);
      *IOSIntArray_GetRef(self->subkey_, 2) = IOSIntArray_Get(kb, 2);
      *IOSIntArray_GetRef(self->subkey_, 3) = IOSIntArray_Get(kb, 3);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(30, kb, 0, self->subkey_, 12);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqWithInt_withIntArray_withInt_withIntArray_withInt_(30, kb, 0, self->subkey_, 28);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(51, kb, 0, self->kw_, 4);
    }
    else {
      *IOSIntArray_GetRef(nil_chk(self->kw_), 4) = IOSIntArray_Get(k, 0);
      *IOSIntArray_GetRef(self->kw_, 5) = IOSIntArray_Get(k, 1);
      *IOSIntArray_GetRef(self->kw_, 6) = IOSIntArray_Get(k, 2);
      *IOSIntArray_GetRef(self->kw_, 7) = IOSIntArray_Get(k, 3);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(45, k, 0, self->subkey_, 28);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, k, 0, self->ke_, 4);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(17, k, 0, self->subkey_, 12);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(34, k, 0, self->subkey_, 0);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, k, 4, self->subkey_, 40);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, k, 4, self->ke_, 8);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(30, k, 4, self->subkey_, 20);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(34, k, 4, self->subkey_, 8);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(15, ka, 0, self->subkey_, 36);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(30, ka, 0, self->subkey_, 24);
      *IOSIntArray_GetRef(nil_chk(self->ke_), 2) = IOSIntArray_Get(ka, 1);
      *IOSIntArray_GetRef(self->ke_, 3) = IOSIntArray_Get(ka, 2);
      *IOSIntArray_GetRef(self->ke_, 0) = IOSIntArray_Get(ka, 3);
      *IOSIntArray_GetRef(self->ke_, 1) = IOSIntArray_Get(ka, 0);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(49, ka, 0, self->subkey_, 4);
      *IOSIntArray_GetRef(nil_chk(self->subkey_), 46) = IOSIntArray_Get(kb, 0);
      *IOSIntArray_GetRef(self->subkey_, 47) = IOSIntArray_Get(kb, 1);
      *IOSIntArray_GetRef(self->subkey_, 44) = IOSIntArray_Get(kb, 2);
      *IOSIntArray_GetRef(self->subkey_, 45) = IOSIntArray_Get(kb, 3);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(30, kb, 0, self->subkey_, 32);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_decroldqWithInt_withIntArray_withInt_withIntArray_withInt_(30, kb, 0, self->subkey_, 16);
      OrgSpongycastleCryptoEnginesCamelliaLightEngine_roldqo32WithInt_withIntArray_withInt_withIntArray_withInt_(51, kb, 0, self->kw_, 0);
    }
  }
}

jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_processBlock128WithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  for (jint i = 0; i < 4; i++) {
    *IOSIntArray_GetRef(nil_chk(self->state_), i) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, inArg, inOff + (i * 4));
    *IOSIntArray_GetRef(nil_chk(self->state_), i) ^= IOSIntArray_Get(nil_chk(self->kw_), i);
  }
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 0);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 4);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 8);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaFLsWithIntArray_withIntArray_withInt_(self, self->state_, self->ke_, 0);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 12);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 16);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 20);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaFLsWithIntArray_withIntArray_withInt_(self, self->state_, self->ke_, 4);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 24);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 28);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 32);
  *IOSIntArray_GetRef(nil_chk(self->state_), 2) ^= IOSIntArray_Get(nil_chk(self->kw_), 4);
  *IOSIntArray_GetRef(self->state_, 3) ^= IOSIntArray_Get(self->kw_, 5);
  *IOSIntArray_GetRef(self->state_, 0) ^= IOSIntArray_Get(self->kw_, 6);
  *IOSIntArray_GetRef(self->state_, 1) ^= IOSIntArray_Get(self->kw_, 7);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_int2bytesWithInt_withByteArray_withInt_(self, IOSIntArray_Get(self->state_, 2), outArg, outOff);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_int2bytesWithInt_withByteArray_withInt_(self, IOSIntArray_Get(nil_chk(self->state_), 3), outArg, outOff + 4);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_int2bytesWithInt_withByteArray_withInt_(self, IOSIntArray_Get(nil_chk(self->state_), 0), outArg, outOff + 8);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_int2bytesWithInt_withByteArray_withInt_(self, IOSIntArray_Get(nil_chk(self->state_), 1), outArg, outOff + 12);
  return OrgSpongycastleCryptoEnginesCamelliaLightEngine_BLOCK_SIZE;
}

jint OrgSpongycastleCryptoEnginesCamelliaLightEngine_processBlock192or256WithByteArray_withInt_withByteArray_withInt_(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self, IOSByteArray *inArg, jint inOff, IOSByteArray *outArg, jint outOff) {
  for (jint i = 0; i < 4; i++) {
    *IOSIntArray_GetRef(nil_chk(self->state_), i) = OrgSpongycastleCryptoEnginesCamelliaLightEngine_bytes2intWithByteArray_withInt_(self, inArg, inOff + (i * 4));
    *IOSIntArray_GetRef(nil_chk(self->state_), i) ^= IOSIntArray_Get(nil_chk(self->kw_), i);
  }
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 0);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 4);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 8);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaFLsWithIntArray_withIntArray_withInt_(self, self->state_, self->ke_, 0);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 12);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 16);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 20);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaFLsWithIntArray_withIntArray_withInt_(self, self->state_, self->ke_, 4);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 24);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 28);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 32);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaFLsWithIntArray_withIntArray_withInt_(self, self->state_, self->ke_, 8);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 36);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 40);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_camelliaF2WithIntArray_withIntArray_withInt_(self, self->state_, self->subkey_, 44);
  *IOSIntArray_GetRef(nil_chk(self->state_), 2) ^= IOSIntArray_Get(nil_chk(self->kw_), 4);
  *IOSIntArray_GetRef(self->state_, 3) ^= IOSIntArray_Get(self->kw_, 5);
  *IOSIntArray_GetRef(self->state_, 0) ^= IOSIntArray_Get(self->kw_, 6);
  *IOSIntArray_GetRef(self->state_, 1) ^= IOSIntArray_Get(self->kw_, 7);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_int2bytesWithInt_withByteArray_withInt_(self, IOSIntArray_Get(self->state_, 2), outArg, outOff);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_int2bytesWithInt_withByteArray_withInt_(self, IOSIntArray_Get(nil_chk(self->state_), 3), outArg, outOff + 4);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_int2bytesWithInt_withByteArray_withInt_(self, IOSIntArray_Get(nil_chk(self->state_), 0), outArg, outOff + 8);
  OrgSpongycastleCryptoEnginesCamelliaLightEngine_int2bytesWithInt_withByteArray_withInt_(self, IOSIntArray_Get(nil_chk(self->state_), 1), outArg, outOff + 12);
  return OrgSpongycastleCryptoEnginesCamelliaLightEngine_BLOCK_SIZE;
}

void OrgSpongycastleCryptoEnginesCamelliaLightEngine_init(OrgSpongycastleCryptoEnginesCamelliaLightEngine *self) {
  NSObject_init(self);
  self->subkey_ = [IOSIntArray newArrayWithLength:24 * 4];
  self->kw_ = [IOSIntArray newArrayWithLength:4 * 2];
  self->ke_ = [IOSIntArray newArrayWithLength:6 * 2];
  self->state_ = [IOSIntArray newArrayWithLength:4];
}

OrgSpongycastleCryptoEnginesCamelliaLightEngine *new_OrgSpongycastleCryptoEnginesCamelliaLightEngine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesCamelliaLightEngine, init)
}

OrgSpongycastleCryptoEnginesCamelliaLightEngine *create_OrgSpongycastleCryptoEnginesCamelliaLightEngine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesCamelliaLightEngine, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesCamelliaLightEngine)
