//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/core/org/spongycastle/crypto/engines/VMPCKSA3Engine.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/spongycastle/crypto/engines/VMPCEngine.h"
#include "org/spongycastle/crypto/engines/VMPCKSA3Engine.h"

@implementation OrgSpongycastleCryptoEnginesVMPCKSA3Engine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSpongycastleCryptoEnginesVMPCKSA3Engine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getAlgorithmName {
  return @"VMPC-KSA3";
}

- (void)initKeyWithByteArray:(IOSByteArray *)keyBytes
               withByteArray:(IOSByteArray *)ivBytes {
  s_ = 0;
  P_ = [IOSByteArray newArrayWithLength:256];
  for (jint i = 0; i < 256; i++) {
    *IOSByteArray_GetRef(P_, i) = (jbyte) i;
  }
  for (jint m = 0; m < 768; m++) {
    s_ = IOSByteArray_Get(P_, (s_ + IOSByteArray_Get(P_, m & (jint) 0xff) + IOSByteArray_Get(keyBytes, m % ((IOSByteArray *) nil_chk(keyBytes))->size_)) & (jint) 0xff);
    jbyte temp = IOSByteArray_Get(P_, m & (jint) 0xff);
    *IOSByteArray_GetRef(P_, m & (jint) 0xff) = IOSByteArray_Get(P_, s_ & (jint) 0xff);
    *IOSByteArray_GetRef(P_, s_ & (jint) 0xff) = temp;
  }
  for (jint m = 0; m < 768; m++) {
    s_ = IOSByteArray_Get(P_, (s_ + IOSByteArray_Get(P_, m & (jint) 0xff) + IOSByteArray_Get(ivBytes, m % ((IOSByteArray *) nil_chk(ivBytes))->size_)) & (jint) 0xff);
    jbyte temp = IOSByteArray_Get(P_, m & (jint) 0xff);
    *IOSByteArray_GetRef(P_, m & (jint) 0xff) = IOSByteArray_Get(P_, s_ & (jint) 0xff);
    *IOSByteArray_GetRef(P_, s_ & (jint) 0xff) = temp;
  }
  for (jint m = 0; m < 768; m++) {
    s_ = IOSByteArray_Get(P_, (s_ + IOSByteArray_Get(P_, m & (jint) 0xff) + IOSByteArray_Get(keyBytes, m % ((IOSByteArray *) nil_chk(keyBytes))->size_)) & (jint) 0xff);
    jbyte temp = IOSByteArray_Get(P_, m & (jint) 0xff);
    *IOSByteArray_GetRef(P_, m & (jint) 0xff) = IOSByteArray_Get(P_, s_ & (jint) 0xff);
    *IOSByteArray_GetRef(P_, s_ & (jint) 0xff) = temp;
  }
  n_ = 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAlgorithmName);
  methods[2].selector = @selector(initKeyWithByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "initKey", "[B[B" };
  static const J2ObjcClassInfo _OrgSpongycastleCryptoEnginesVMPCKSA3Engine = { "VMPCKSA3Engine", "org.spongycastle.crypto.engines", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleCryptoEnginesVMPCKSA3Engine;
}

@end

void OrgSpongycastleCryptoEnginesVMPCKSA3Engine_init(OrgSpongycastleCryptoEnginesVMPCKSA3Engine *self) {
  OrgSpongycastleCryptoEnginesVMPCEngine_init(self);
}

OrgSpongycastleCryptoEnginesVMPCKSA3Engine *new_OrgSpongycastleCryptoEnginesVMPCKSA3Engine_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleCryptoEnginesVMPCKSA3Engine, init)
}

OrgSpongycastleCryptoEnginesVMPCKSA3Engine *create_OrgSpongycastleCryptoEnginesVMPCKSA3Engine_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleCryptoEnginesVMPCKSA3Engine, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleCryptoEnginesVMPCKSA3Engine)
