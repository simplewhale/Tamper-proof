//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/slf4j-api/org/slf4j/LoggerFactory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NoClassDefFoundError.h"
#include "java/lang/NoSuchFieldError.h"
#include "java/lang/NoSuchMethodError.h"
#include "java/lang/Throwable.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Enumeration.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "org/slf4j/ILoggerFactory.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/LoggerFactory.h"
#include "org/slf4j/event/SubstituteLoggingEvent.h"
#include "org/slf4j/helpers/NOPLoggerFactory.h"
#include "org/slf4j/helpers/SubstituteLogger.h"
#include "org/slf4j/helpers/SubstituteLoggerFactory.h"
#include "org/slf4j/helpers/Util.h"
#include "org/slf4j/impl/StaticLoggerBinder.h"

@interface OrgSlf4jLoggerFactory ()

- (instancetype)init;

+ (void)performInitialization;

+ (jboolean)messageContainsOrgSlf4jImplStaticLoggerBinderWithNSString:(NSString *)msg;

+ (void)bind;

+ (void)fixSubstituteLoggers;

+ (void)replayEvents;

+ (void)emitReplayOrSubstituionWarningWithOrgSlf4jEventSubstituteLoggingEvent:(OrgSlf4jEventSubstituteLoggingEvent *)event
                                                                      withInt:(jint)queueSize;

+ (void)replaySingleEventWithOrgSlf4jEventSubstituteLoggingEvent:(OrgSlf4jEventSubstituteLoggingEvent *)event;

+ (void)emitSubstitutionWarning;

+ (void)emitReplayWarningWithInt:(jint)eventCount;

+ (void)versionSanityCheck;

+ (jboolean)isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet:(id<JavaUtilSet>)binderPathSet;

+ (void)reportMultipleBindingAmbiguityWithJavaUtilSet:(id<JavaUtilSet>)binderPathSet;

+ (jboolean)isAndroid;

+ (void)reportActualBindingWithJavaUtilSet:(id<JavaUtilSet>)binderPathSet;

+ (jboolean)nonMatchingClassesWithIOSClass:(IOSClass *)clazz
                              withIOSClass:(IOSClass *)autoComputedCallingClass;

@end

inline IOSObjectArray *OrgSlf4jLoggerFactory_get_API_COMPATIBILITY_LIST(void);
static IOSObjectArray *OrgSlf4jLoggerFactory_API_COMPATIBILITY_LIST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSlf4jLoggerFactory, API_COMPATIBILITY_LIST, IOSObjectArray *)

inline NSString *OrgSlf4jLoggerFactory_get_STATIC_LOGGER_BINDER_PATH(void);
inline NSString *OrgSlf4jLoggerFactory_set_STATIC_LOGGER_BINDER_PATH(NSString *value);
static NSString *OrgSlf4jLoggerFactory_STATIC_LOGGER_BINDER_PATH = @"org/slf4j/impl/StaticLoggerBinder.class";
J2OBJC_STATIC_FIELD_OBJ(OrgSlf4jLoggerFactory, STATIC_LOGGER_BINDER_PATH, NSString *)

__attribute__((unused)) static void OrgSlf4jLoggerFactory_init(OrgSlf4jLoggerFactory *self);

__attribute__((unused)) static OrgSlf4jLoggerFactory *new_OrgSlf4jLoggerFactory_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSlf4jLoggerFactory *create_OrgSlf4jLoggerFactory_init(void);

__attribute__((unused)) static void OrgSlf4jLoggerFactory_performInitialization(void);

__attribute__((unused)) static jboolean OrgSlf4jLoggerFactory_messageContainsOrgSlf4jImplStaticLoggerBinderWithNSString_(NSString *msg);

__attribute__((unused)) static void OrgSlf4jLoggerFactory_bind(void);

__attribute__((unused)) static void OrgSlf4jLoggerFactory_fixSubstituteLoggers(void);

__attribute__((unused)) static void OrgSlf4jLoggerFactory_replayEvents(void);

__attribute__((unused)) static void OrgSlf4jLoggerFactory_emitReplayOrSubstituionWarningWithOrgSlf4jEventSubstituteLoggingEvent_withInt_(OrgSlf4jEventSubstituteLoggingEvent *event, jint queueSize);

__attribute__((unused)) static void OrgSlf4jLoggerFactory_replaySingleEventWithOrgSlf4jEventSubstituteLoggingEvent_(OrgSlf4jEventSubstituteLoggingEvent *event);

__attribute__((unused)) static void OrgSlf4jLoggerFactory_emitSubstitutionWarning(void);

__attribute__((unused)) static void OrgSlf4jLoggerFactory_emitReplayWarningWithInt_(jint eventCount);

__attribute__((unused)) static void OrgSlf4jLoggerFactory_versionSanityCheck(void);

__attribute__((unused)) static jboolean OrgSlf4jLoggerFactory_isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet_(id<JavaUtilSet> binderPathSet);

__attribute__((unused)) static void OrgSlf4jLoggerFactory_reportMultipleBindingAmbiguityWithJavaUtilSet_(id<JavaUtilSet> binderPathSet);

__attribute__((unused)) static jboolean OrgSlf4jLoggerFactory_isAndroid(void);

__attribute__((unused)) static void OrgSlf4jLoggerFactory_reportActualBindingWithJavaUtilSet_(id<JavaUtilSet> binderPathSet);

__attribute__((unused)) static jboolean OrgSlf4jLoggerFactory_nonMatchingClassesWithIOSClass_withIOSClass_(IOSClass *clazz, IOSClass *autoComputedCallingClass);

J2OBJC_INITIALIZED_DEFN(OrgSlf4jLoggerFactory)

NSString *OrgSlf4jLoggerFactory_CODES_PREFIX = @"http://www.slf4j.org/codes.html";
NSString *OrgSlf4jLoggerFactory_NO_STATICLOGGERBINDER_URL = @"http://www.slf4j.org/codes.html#StaticLoggerBinder";
NSString *OrgSlf4jLoggerFactory_MULTIPLE_BINDINGS_URL = @"http://www.slf4j.org/codes.html#multiple_bindings";
NSString *OrgSlf4jLoggerFactory_NULL_LF_URL = @"http://www.slf4j.org/codes.html#null_LF";
NSString *OrgSlf4jLoggerFactory_VERSION_MISMATCH = @"http://www.slf4j.org/codes.html#version_mismatch";
NSString *OrgSlf4jLoggerFactory_SUBSTITUTE_LOGGER_URL = @"http://www.slf4j.org/codes.html#substituteLogger";
NSString *OrgSlf4jLoggerFactory_LOGGER_NAME_MISMATCH_URL = @"http://www.slf4j.org/codes.html#loggerNameMismatch";
NSString *OrgSlf4jLoggerFactory_REPLAY_URL = @"http://www.slf4j.org/codes.html#replay";
NSString *OrgSlf4jLoggerFactory_UNSUCCESSFUL_INIT_URL = @"http://www.slf4j.org/codes.html#unsuccessfulInit";
NSString *OrgSlf4jLoggerFactory_UNSUCCESSFUL_INIT_MSG = @"org.slf4j.LoggerFactory in failed state. Original exception was thrown EARLIER. See also http://www.slf4j.org/codes.html#unsuccessfulInit";
volatile_jint OrgSlf4jLoggerFactory_INITIALIZATION_STATE = 0;
OrgSlf4jHelpersSubstituteLoggerFactory *OrgSlf4jLoggerFactory_SUBST_FACTORY;
OrgSlf4jHelpersNOPLoggerFactory *OrgSlf4jLoggerFactory_NOP_FALLBACK_FACTORY;
NSString *OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH_PROPERTY = @"slf4j.detectLoggerNameMismatch";
NSString *OrgSlf4jLoggerFactory_JAVA_VENDOR_PROPERTY = @"java.vendor.url";
jboolean OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH;

@implementation OrgSlf4jLoggerFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSlf4jLoggerFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)reset {
  OrgSlf4jLoggerFactory_reset();
}

+ (void)performInitialization {
  OrgSlf4jLoggerFactory_performInitialization();
}

+ (jboolean)messageContainsOrgSlf4jImplStaticLoggerBinderWithNSString:(NSString *)msg {
  return OrgSlf4jLoggerFactory_messageContainsOrgSlf4jImplStaticLoggerBinderWithNSString_(msg);
}

+ (void)bind {
  OrgSlf4jLoggerFactory_bind();
}

+ (void)fixSubstituteLoggers {
  OrgSlf4jLoggerFactory_fixSubstituteLoggers();
}

+ (void)failedBindingWithJavaLangThrowable:(JavaLangThrowable *)t {
  OrgSlf4jLoggerFactory_failedBindingWithJavaLangThrowable_(t);
}

+ (void)replayEvents {
  OrgSlf4jLoggerFactory_replayEvents();
}

+ (void)emitReplayOrSubstituionWarningWithOrgSlf4jEventSubstituteLoggingEvent:(OrgSlf4jEventSubstituteLoggingEvent *)event
                                                                      withInt:(jint)queueSize {
  OrgSlf4jLoggerFactory_emitReplayOrSubstituionWarningWithOrgSlf4jEventSubstituteLoggingEvent_withInt_(event, queueSize);
}

+ (void)replaySingleEventWithOrgSlf4jEventSubstituteLoggingEvent:(OrgSlf4jEventSubstituteLoggingEvent *)event {
  OrgSlf4jLoggerFactory_replaySingleEventWithOrgSlf4jEventSubstituteLoggingEvent_(event);
}

+ (void)emitSubstitutionWarning {
  OrgSlf4jLoggerFactory_emitSubstitutionWarning();
}

+ (void)emitReplayWarningWithInt:(jint)eventCount {
  OrgSlf4jLoggerFactory_emitReplayWarningWithInt_(eventCount);
}

+ (void)versionSanityCheck {
  OrgSlf4jLoggerFactory_versionSanityCheck();
}

+ (id<JavaUtilSet>)findPossibleStaticLoggerBinderPathSet {
  return OrgSlf4jLoggerFactory_findPossibleStaticLoggerBinderPathSet();
}

+ (jboolean)isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet:(id<JavaUtilSet>)binderPathSet {
  return OrgSlf4jLoggerFactory_isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet_(binderPathSet);
}

+ (void)reportMultipleBindingAmbiguityWithJavaUtilSet:(id<JavaUtilSet>)binderPathSet {
  OrgSlf4jLoggerFactory_reportMultipleBindingAmbiguityWithJavaUtilSet_(binderPathSet);
}

+ (jboolean)isAndroid {
  return OrgSlf4jLoggerFactory_isAndroid();
}

+ (void)reportActualBindingWithJavaUtilSet:(id<JavaUtilSet>)binderPathSet {
  OrgSlf4jLoggerFactory_reportActualBindingWithJavaUtilSet_(binderPathSet);
}

+ (id<OrgSlf4jLogger>)getLoggerWithNSString:(NSString *)name {
  return OrgSlf4jLoggerFactory_getLoggerWithNSString_(name);
}

+ (id<OrgSlf4jLogger>)getLoggerWithIOSClass:(IOSClass *)clazz {
  return OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(clazz);
}

+ (jboolean)nonMatchingClassesWithIOSClass:(IOSClass *)clazz
                              withIOSClass:(IOSClass *)autoComputedCallingClass {
  return OrgSlf4jLoggerFactory_nonMatchingClassesWithIOSClass_withIOSClass_(clazz, autoComputedCallingClass);
}

+ (id<OrgSlf4jILoggerFactory>)getILoggerFactory {
  return OrgSlf4jLoggerFactory_getILoggerFactory();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1a, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x8, -1, -1, -1, 10, -1, -1 },
    { NULL, "Z", 0xa, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0xa, 14, 12, -1, 15, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 16, 12, -1, 15, -1, -1 },
    { NULL, "LOrgSlf4jLogger;", 0x9, 17, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSlf4jLogger;", 0x9, 17, 18, -1, 19, -1, -1 },
    { NULL, "Z", 0xa, 20, 21, -1, 22, -1, -1 },
    { NULL, "LOrgSlf4jILoggerFactory;", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(performInitialization);
  methods[3].selector = @selector(messageContainsOrgSlf4jImplStaticLoggerBinderWithNSString:);
  methods[4].selector = @selector(bind);
  methods[5].selector = @selector(fixSubstituteLoggers);
  methods[6].selector = @selector(failedBindingWithJavaLangThrowable:);
  methods[7].selector = @selector(replayEvents);
  methods[8].selector = @selector(emitReplayOrSubstituionWarningWithOrgSlf4jEventSubstituteLoggingEvent:withInt:);
  methods[9].selector = @selector(replaySingleEventWithOrgSlf4jEventSubstituteLoggingEvent:);
  methods[10].selector = @selector(emitSubstitutionWarning);
  methods[11].selector = @selector(emitReplayWarningWithInt:);
  methods[12].selector = @selector(versionSanityCheck);
  methods[13].selector = @selector(findPossibleStaticLoggerBinderPathSet);
  methods[14].selector = @selector(isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet:);
  methods[15].selector = @selector(reportMultipleBindingAmbiguityWithJavaUtilSet:);
  methods[16].selector = @selector(isAndroid);
  methods[17].selector = @selector(reportActualBindingWithJavaUtilSet:);
  methods[18].selector = @selector(getLoggerWithNSString:);
  methods[19].selector = @selector(getLoggerWithIOSClass:);
  methods[20].selector = @selector(nonMatchingClassesWithIOSClass:withIOSClass:);
  methods[21].selector = @selector(getILoggerFactory);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CODES_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 23, -1, -1 },
    { "NO_STATICLOGGERBINDER_URL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 24, -1, -1 },
    { "MULTIPLE_BINDINGS_URL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 25, -1, -1 },
    { "NULL_LF_URL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 26, -1, -1 },
    { "VERSION_MISMATCH", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 27, -1, -1 },
    { "SUBSTITUTE_LOGGER_URL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 28, -1, -1 },
    { "LOGGER_NAME_MISMATCH_URL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 29, -1, -1 },
    { "REPLAY_URL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 30, -1, -1 },
    { "UNSUCCESSFUL_INIT_URL", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 31, -1, -1 },
    { "UNSUCCESSFUL_INIT_MSG", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 32, -1, -1 },
    { "UNINITIALIZED", "I", .constantValue.asInt = OrgSlf4jLoggerFactory_UNINITIALIZED, 0x18, -1, -1, -1, -1 },
    { "ONGOING_INITIALIZATION", "I", .constantValue.asInt = OrgSlf4jLoggerFactory_ONGOING_INITIALIZATION, 0x18, -1, -1, -1, -1 },
    { "FAILED_INITIALIZATION", "I", .constantValue.asInt = OrgSlf4jLoggerFactory_FAILED_INITIALIZATION, 0x18, -1, -1, -1, -1 },
    { "SUCCESSFUL_INITIALIZATION", "I", .constantValue.asInt = OrgSlf4jLoggerFactory_SUCCESSFUL_INITIALIZATION, 0x18, -1, -1, -1, -1 },
    { "NOP_FALLBACK_INITIALIZATION", "I", .constantValue.asInt = OrgSlf4jLoggerFactory_NOP_FALLBACK_INITIALIZATION, 0x18, -1, -1, -1, -1 },
    { "INITIALIZATION_STATE", "I", .constantValue.asLong = 0, 0x48, -1, 33, -1, -1 },
    { "SUBST_FACTORY", "LOrgSlf4jHelpersSubstituteLoggerFactory;", .constantValue.asLong = 0, 0x18, -1, 34, -1, -1 },
    { "NOP_FALLBACK_FACTORY", "LOrgSlf4jHelpersNOPLoggerFactory;", .constantValue.asLong = 0, 0x18, -1, 35, -1, -1 },
    { "DETECT_LOGGER_NAME_MISMATCH_PROPERTY", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 36, -1, -1 },
    { "JAVA_VENDOR_PROPERTY", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 37, -1, -1 },
    { "DETECT_LOGGER_NAME_MISMATCH", "Z", .constantValue.asLong = 0, 0x8, -1, 38, -1, -1 },
    { "API_COMPATIBILITY_LIST", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "STATIC_LOGGER_BINDER_PATH", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 40, -1, -1 },
  };
  static const void *ptrTable[] = { "messageContainsOrgSlf4jImplStaticLoggerBinder", "LNSString;", "failedBinding", "LJavaLangThrowable;", "emitReplayOrSubstituionWarning", "LOrgSlf4jEventSubstituteLoggingEvent;I", "replaySingleEvent", "LOrgSlf4jEventSubstituteLoggingEvent;", "emitReplayWarning", "I", "()Ljava/util/Set<Ljava/net/URL;>;", "isAmbiguousStaticLoggerBinderPathSet", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/net/URL;>;)Z", "reportMultipleBindingAmbiguity", "(Ljava/util/Set<Ljava/net/URL;>;)V", "reportActualBinding", "getLogger", "LIOSClass;", "(Ljava/lang/Class<*>;)Lorg/slf4j/Logger;", "nonMatchingClasses", "LIOSClass;LIOSClass;", "(Ljava/lang/Class<*>;Ljava/lang/Class<*>;)Z", &OrgSlf4jLoggerFactory_CODES_PREFIX, &OrgSlf4jLoggerFactory_NO_STATICLOGGERBINDER_URL, &OrgSlf4jLoggerFactory_MULTIPLE_BINDINGS_URL, &OrgSlf4jLoggerFactory_NULL_LF_URL, &OrgSlf4jLoggerFactory_VERSION_MISMATCH, &OrgSlf4jLoggerFactory_SUBSTITUTE_LOGGER_URL, &OrgSlf4jLoggerFactory_LOGGER_NAME_MISMATCH_URL, &OrgSlf4jLoggerFactory_REPLAY_URL, &OrgSlf4jLoggerFactory_UNSUCCESSFUL_INIT_URL, &OrgSlf4jLoggerFactory_UNSUCCESSFUL_INIT_MSG, &OrgSlf4jLoggerFactory_INITIALIZATION_STATE, &OrgSlf4jLoggerFactory_SUBST_FACTORY, &OrgSlf4jLoggerFactory_NOP_FALLBACK_FACTORY, &OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH_PROPERTY, &OrgSlf4jLoggerFactory_JAVA_VENDOR_PROPERTY, &OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH, &OrgSlf4jLoggerFactory_API_COMPATIBILITY_LIST, &OrgSlf4jLoggerFactory_STATIC_LOGGER_BINDER_PATH };
  static const J2ObjcClassInfo _OrgSlf4jLoggerFactory = { "LoggerFactory", "org.slf4j", ptrTable, methods, fields, 7, 0x11, 22, 23, -1, -1, -1, -1, -1 };
  return &_OrgSlf4jLoggerFactory;
}

+ (void)initialize {
  if (self == [OrgSlf4jLoggerFactory class]) {
    OrgSlf4jLoggerFactory_SUBST_FACTORY = new_OrgSlf4jHelpersSubstituteLoggerFactory_init();
    OrgSlf4jLoggerFactory_NOP_FALLBACK_FACTORY = new_OrgSlf4jHelpersNOPLoggerFactory_init();
    OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH = OrgSlf4jHelpersUtil_safeGetBooleanSystemPropertyWithNSString_(OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH_PROPERTY);
    OrgSlf4jLoggerFactory_API_COMPATIBILITY_LIST = [IOSObjectArray newArrayWithObjects:(id[]){ @"1.6", @"1.7" } count:2 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(OrgSlf4jLoggerFactory)
  }
}

@end

void OrgSlf4jLoggerFactory_init(OrgSlf4jLoggerFactory *self) {
  NSObject_init(self);
}

OrgSlf4jLoggerFactory *new_OrgSlf4jLoggerFactory_init() {
  J2OBJC_NEW_IMPL(OrgSlf4jLoggerFactory, init)
}

OrgSlf4jLoggerFactory *create_OrgSlf4jLoggerFactory_init() {
  J2OBJC_CREATE_IMPL(OrgSlf4jLoggerFactory, init)
}

void OrgSlf4jLoggerFactory_reset() {
  OrgSlf4jLoggerFactory_initialize();
  JreAssignVolatileInt(&OrgSlf4jLoggerFactory_INITIALIZATION_STATE, OrgSlf4jLoggerFactory_UNINITIALIZED);
}

void OrgSlf4jLoggerFactory_performInitialization() {
  OrgSlf4jLoggerFactory_initialize();
  OrgSlf4jLoggerFactory_bind();
  if (JreLoadVolatileInt(&OrgSlf4jLoggerFactory_INITIALIZATION_STATE) == OrgSlf4jLoggerFactory_SUCCESSFUL_INITIALIZATION) {
    OrgSlf4jLoggerFactory_versionSanityCheck();
  }
}

jboolean OrgSlf4jLoggerFactory_messageContainsOrgSlf4jImplStaticLoggerBinderWithNSString_(NSString *msg) {
  OrgSlf4jLoggerFactory_initialize();
  if (msg == nil) return false;
  if ([msg java_contains:@"org/slf4j/impl/StaticLoggerBinder"]) return true;
  if ([msg java_contains:@"org.slf4j.impl.StaticLoggerBinder"]) return true;
  return false;
}

void OrgSlf4jLoggerFactory_bind() {
  OrgSlf4jLoggerFactory_initialize();
  @try {
    id<JavaUtilSet> staticLoggerBinderPathSet = nil;
    if (!OrgSlf4jLoggerFactory_isAndroid()) {
      staticLoggerBinderPathSet = OrgSlf4jLoggerFactory_findPossibleStaticLoggerBinderPathSet();
      OrgSlf4jLoggerFactory_reportMultipleBindingAmbiguityWithJavaUtilSet_(staticLoggerBinderPathSet);
    }
    (void) OrgSlf4jImplStaticLoggerBinder_getSingleton();
    JreAssignVolatileInt(&OrgSlf4jLoggerFactory_INITIALIZATION_STATE, OrgSlf4jLoggerFactory_SUCCESSFUL_INITIALIZATION);
    OrgSlf4jLoggerFactory_reportActualBindingWithJavaUtilSet_(staticLoggerBinderPathSet);
    OrgSlf4jLoggerFactory_fixSubstituteLoggers();
    OrgSlf4jLoggerFactory_replayEvents();
    [((OrgSlf4jHelpersSubstituteLoggerFactory *) nil_chk(OrgSlf4jLoggerFactory_SUBST_FACTORY)) clear];
  }
  @catch (JavaLangNoClassDefFoundError *ncde) {
    NSString *msg = [ncde getMessage];
    if (OrgSlf4jLoggerFactory_messageContainsOrgSlf4jImplStaticLoggerBinderWithNSString_(msg)) {
      JreAssignVolatileInt(&OrgSlf4jLoggerFactory_INITIALIZATION_STATE, OrgSlf4jLoggerFactory_NOP_FALLBACK_INITIALIZATION);
      OrgSlf4jHelpersUtil_reportWithNSString_(@"Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".");
      OrgSlf4jHelpersUtil_reportWithNSString_(@"Defaulting to no-operation (NOP) logger implementation");
      OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$$$", @"See ", OrgSlf4jLoggerFactory_NO_STATICLOGGERBINDER_URL, @" for further details."));
    }
    else {
      OrgSlf4jLoggerFactory_failedBindingWithJavaLangThrowable_(ncde);
      @throw ncde;
    }
  }
  @catch (JavaLangNoSuchMethodError *nsme) {
    NSString *msg = [nsme getMessage];
    if (msg != nil && [msg java_contains:@"org.slf4j.impl.StaticLoggerBinder.getSingleton()"]) {
      JreAssignVolatileInt(&OrgSlf4jLoggerFactory_INITIALIZATION_STATE, OrgSlf4jLoggerFactory_FAILED_INITIALIZATION);
      OrgSlf4jHelpersUtil_reportWithNSString_(@"slf4j-api 1.6.x (or later) is incompatible with this binding.");
      OrgSlf4jHelpersUtil_reportWithNSString_(@"Your binding is version 1.5.5 or earlier.");
      OrgSlf4jHelpersUtil_reportWithNSString_(@"Upgrade your binding to version 1.6.x.");
    }
    @throw nsme;
  }
  @catch (JavaLangException *e) {
    OrgSlf4jLoggerFactory_failedBindingWithJavaLangThrowable_(e);
    @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"Unexpected initialization failure", e);
  }
}

void OrgSlf4jLoggerFactory_fixSubstituteLoggers() {
  OrgSlf4jLoggerFactory_initialize();
  @synchronized(OrgSlf4jLoggerFactory_SUBST_FACTORY) {
    [((OrgSlf4jHelpersSubstituteLoggerFactory *) nil_chk(OrgSlf4jLoggerFactory_SUBST_FACTORY)) postInitialization];
    for (OrgSlf4jHelpersSubstituteLogger * __strong substLogger in nil_chk([OrgSlf4jLoggerFactory_SUBST_FACTORY getLoggers])) {
      id<OrgSlf4jLogger> logger = OrgSlf4jLoggerFactory_getLoggerWithNSString_([((OrgSlf4jHelpersSubstituteLogger *) nil_chk(substLogger)) getName]);
      [substLogger setDelegateWithOrgSlf4jLogger:logger];
    }
  }
}

void OrgSlf4jLoggerFactory_failedBindingWithJavaLangThrowable_(JavaLangThrowable *t) {
  OrgSlf4jLoggerFactory_initialize();
  JreAssignVolatileInt(&OrgSlf4jLoggerFactory_INITIALIZATION_STATE, OrgSlf4jLoggerFactory_FAILED_INITIALIZATION);
  OrgSlf4jHelpersUtil_reportWithNSString_withJavaLangThrowable_(@"Failed to instantiate SLF4J LoggerFactory", t);
}

void OrgSlf4jLoggerFactory_replayEvents() {
  OrgSlf4jLoggerFactory_initialize();
  JavaUtilConcurrentLinkedBlockingQueue *queue = [((OrgSlf4jHelpersSubstituteLoggerFactory *) nil_chk(OrgSlf4jLoggerFactory_SUBST_FACTORY)) getEventQueue];
  jint queueSize = [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(queue)) size];
  jint count = 0;
  jint maxDrain = 128;
  id<JavaUtilList> eventList = new_JavaUtilArrayList_initWithInt_(maxDrain);
  while (true) {
    jint numDrained = [queue drainToWithJavaUtilCollection:eventList withInt:maxDrain];
    if (numDrained == 0) break;
    for (OrgSlf4jEventSubstituteLoggingEvent * __strong event in eventList) {
      OrgSlf4jLoggerFactory_replaySingleEventWithOrgSlf4jEventSubstituteLoggingEvent_(event);
      if (count++ == 0) OrgSlf4jLoggerFactory_emitReplayOrSubstituionWarningWithOrgSlf4jEventSubstituteLoggingEvent_withInt_(event, queueSize);
    }
    [eventList clear];
  }
}

void OrgSlf4jLoggerFactory_emitReplayOrSubstituionWarningWithOrgSlf4jEventSubstituteLoggingEvent_withInt_(OrgSlf4jEventSubstituteLoggingEvent *event, jint queueSize) {
  OrgSlf4jLoggerFactory_initialize();
  if ([((OrgSlf4jHelpersSubstituteLogger *) nil_chk([((OrgSlf4jEventSubstituteLoggingEvent *) nil_chk(event)) getLogger])) isDelegateEventAware]) {
    OrgSlf4jLoggerFactory_emitReplayWarningWithInt_(queueSize);
  }
  else if ([((OrgSlf4jHelpersSubstituteLogger *) nil_chk([event getLogger])) isDelegateNOP]) {
  }
  else {
    OrgSlf4jLoggerFactory_emitSubstitutionWarning();
  }
}

void OrgSlf4jLoggerFactory_replaySingleEventWithOrgSlf4jEventSubstituteLoggingEvent_(OrgSlf4jEventSubstituteLoggingEvent *event) {
  OrgSlf4jLoggerFactory_initialize();
  if (event == nil) return;
  OrgSlf4jHelpersSubstituteLogger *substLogger = [event getLogger];
  NSString *loggerName = [((OrgSlf4jHelpersSubstituteLogger *) nil_chk(substLogger)) getName];
  if ([substLogger isDelegateNull]) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Delegate logger cannot be null at this state.");
  }
  if ([substLogger isDelegateNOP]) {
  }
  else if ([substLogger isDelegateEventAware]) {
    [substLogger logWithOrgSlf4jEventLoggingEvent:event];
  }
  else {
    OrgSlf4jHelpersUtil_reportWithNSString_(loggerName);
  }
}

void OrgSlf4jLoggerFactory_emitSubstitutionWarning() {
  OrgSlf4jLoggerFactory_initialize();
  OrgSlf4jHelpersUtil_reportWithNSString_(@"The following set of substitute loggers may have been accessed");
  OrgSlf4jHelpersUtil_reportWithNSString_(@"during the initialization phase. Logging calls during this");
  OrgSlf4jHelpersUtil_reportWithNSString_(@"phase were not honored. However, subsequent logging calls to these");
  OrgSlf4jHelpersUtil_reportWithNSString_(@"loggers will work as normally expected.");
  OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$$", @"See also ", OrgSlf4jLoggerFactory_SUBSTITUTE_LOGGER_URL));
}

void OrgSlf4jLoggerFactory_emitReplayWarningWithInt_(jint eventCount) {
  OrgSlf4jLoggerFactory_initialize();
  OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$I$", @"A number (", eventCount, @") of logging calls during the initialization phase have been intercepted and are"));
  OrgSlf4jHelpersUtil_reportWithNSString_(@"now being replayed. These are subject to the filtering rules of the underlying logging system.");
  OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$$", @"See also ", OrgSlf4jLoggerFactory_REPLAY_URL));
}

void OrgSlf4jLoggerFactory_versionSanityCheck() {
  OrgSlf4jLoggerFactory_initialize();
  @try {
    NSString *requested = JreLoadStatic(OrgSlf4jImplStaticLoggerBinder, REQUESTED_API_VERSION);
    jboolean match = false;
    {
      IOSObjectArray *a__ = OrgSlf4jLoggerFactory_API_COMPATIBILITY_LIST;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *aAPI_COMPATIBILITY_LIST = *b__++;
        if ([((NSString *) nil_chk(requested)) java_hasPrefix:aAPI_COMPATIBILITY_LIST]) {
          match = true;
        }
      }
    }
    if (!match) {
      OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$$$$", @"The requested version ", requested, @" by your slf4j binding is not compatible with ", [((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_(OrgSlf4jLoggerFactory_API_COMPATIBILITY_LIST))) description]));
      OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$$$", @"See ", OrgSlf4jLoggerFactory_VERSION_MISMATCH, @" for further details."));
    }
  }
  @catch (JavaLangNoSuchFieldError *nsfe) {
  }
  @catch (JavaLangThrowable *e) {
    OrgSlf4jHelpersUtil_reportWithNSString_withJavaLangThrowable_(@"Unexpected problem occured during version sanity check", e);
  }
}

id<JavaUtilSet> OrgSlf4jLoggerFactory_findPossibleStaticLoggerBinderPathSet() {
  OrgSlf4jLoggerFactory_initialize();
  id<JavaUtilSet> staticLoggerBinderPathSet = new_JavaUtilLinkedHashSet_init();
  @try {
    JavaLangClassLoader *loggerFactoryClassLoader = [OrgSlf4jLoggerFactory_class_() getClassLoader];
    id<JavaUtilEnumeration> paths;
    if (loggerFactoryClassLoader == nil) {
      paths = JavaLangClassLoader_getSystemResourcesWithNSString_(OrgSlf4jLoggerFactory_STATIC_LOGGER_BINDER_PATH);
    }
    else {
      paths = [loggerFactoryClassLoader getResourcesWithNSString:OrgSlf4jLoggerFactory_STATIC_LOGGER_BINDER_PATH];
    }
    while ([((id<JavaUtilEnumeration>) nil_chk(paths)) hasMoreElements]) {
      JavaNetURL *path = [paths nextElement];
      [staticLoggerBinderPathSet addWithId:path];
    }
  }
  @catch (JavaIoIOException *ioe) {
    OrgSlf4jHelpersUtil_reportWithNSString_withJavaLangThrowable_(@"Error getting resources from path", ioe);
  }
  return staticLoggerBinderPathSet;
}

jboolean OrgSlf4jLoggerFactory_isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet_(id<JavaUtilSet> binderPathSet) {
  OrgSlf4jLoggerFactory_initialize();
  return [((id<JavaUtilSet>) nil_chk(binderPathSet)) size] > 1;
}

void OrgSlf4jLoggerFactory_reportMultipleBindingAmbiguityWithJavaUtilSet_(id<JavaUtilSet> binderPathSet) {
  OrgSlf4jLoggerFactory_initialize();
  if (OrgSlf4jLoggerFactory_isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet_(binderPathSet)) {
    OrgSlf4jHelpersUtil_reportWithNSString_(@"Class path contains multiple SLF4J bindings.");
    for (JavaNetURL * __strong path in nil_chk(binderPathSet)) {
      OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$@C", @"Found binding in [", path, ']'));
    }
    OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$$$", @"See ", OrgSlf4jLoggerFactory_MULTIPLE_BINDINGS_URL, @" for an explanation."));
  }
}

jboolean OrgSlf4jLoggerFactory_isAndroid() {
  OrgSlf4jLoggerFactory_initialize();
  NSString *vendor = OrgSlf4jHelpersUtil_safeGetSystemPropertyWithNSString_(OrgSlf4jLoggerFactory_JAVA_VENDOR_PROPERTY);
  if (vendor == nil) return false;
  return [((NSString *) nil_chk([vendor lowercaseString])) java_contains:@"android"];
}

void OrgSlf4jLoggerFactory_reportActualBindingWithJavaUtilSet_(id<JavaUtilSet> binderPathSet) {
  OrgSlf4jLoggerFactory_initialize();
  if (binderPathSet != nil && OrgSlf4jLoggerFactory_isAmbiguousStaticLoggerBinderPathSetWithJavaUtilSet_(binderPathSet)) {
    OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$$C", @"Actual binding is of type [", [((OrgSlf4jImplStaticLoggerBinder *) nil_chk(OrgSlf4jImplStaticLoggerBinder_getSingleton())) getLoggerFactoryClassStr], ']'));
  }
}

id<OrgSlf4jLogger> OrgSlf4jLoggerFactory_getLoggerWithNSString_(NSString *name) {
  OrgSlf4jLoggerFactory_initialize();
  id<OrgSlf4jILoggerFactory> iLoggerFactory = OrgSlf4jLoggerFactory_getILoggerFactory();
  return [((id<OrgSlf4jILoggerFactory>) nil_chk(iLoggerFactory)) getLoggerWithNSString:name];
}

id<OrgSlf4jLogger> OrgSlf4jLoggerFactory_getLoggerWithIOSClass_(IOSClass *clazz) {
  OrgSlf4jLoggerFactory_initialize();
  id<OrgSlf4jLogger> logger = OrgSlf4jLoggerFactory_getLoggerWithNSString_([((IOSClass *) nil_chk(clazz)) getName]);
  if (OrgSlf4jLoggerFactory_DETECT_LOGGER_NAME_MISMATCH) {
    IOSClass *autoComputedCallingClass = OrgSlf4jHelpersUtil_getCallingClass();
    if (autoComputedCallingClass != nil && OrgSlf4jLoggerFactory_nonMatchingClassesWithIOSClass_withIOSClass_(clazz, autoComputedCallingClass)) {
      OrgSlf4jHelpersUtil_reportWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Detected logger name mismatch. Given name: \"%s\"; computed name: \"%s\".", [IOSObjectArray newArrayWithObjects:(id[]){ [((id<OrgSlf4jLogger>) nil_chk(logger)) getName], [autoComputedCallingClass getName] } count:2 type:NSObject_class_()]));
      OrgSlf4jHelpersUtil_reportWithNSString_(JreStrcat("$$$", @"See ", OrgSlf4jLoggerFactory_LOGGER_NAME_MISMATCH_URL, @" for an explanation"));
    }
  }
  return logger;
}

jboolean OrgSlf4jLoggerFactory_nonMatchingClassesWithIOSClass_withIOSClass_(IOSClass *clazz, IOSClass *autoComputedCallingClass) {
  OrgSlf4jLoggerFactory_initialize();
  return ![((IOSClass *) nil_chk(autoComputedCallingClass)) isAssignableFrom:clazz];
}

id<OrgSlf4jILoggerFactory> OrgSlf4jLoggerFactory_getILoggerFactory() {
  OrgSlf4jLoggerFactory_initialize();
  if (JreLoadVolatileInt(&OrgSlf4jLoggerFactory_INITIALIZATION_STATE) == OrgSlf4jLoggerFactory_UNINITIALIZED) {
    @synchronized(OrgSlf4jLoggerFactory_class_()) {
      if (JreLoadVolatileInt(&OrgSlf4jLoggerFactory_INITIALIZATION_STATE) == OrgSlf4jLoggerFactory_UNINITIALIZED) {
        JreAssignVolatileInt(&OrgSlf4jLoggerFactory_INITIALIZATION_STATE, OrgSlf4jLoggerFactory_ONGOING_INITIALIZATION);
        OrgSlf4jLoggerFactory_performInitialization();
      }
    }
  }
  switch (JreLoadVolatileInt(&OrgSlf4jLoggerFactory_INITIALIZATION_STATE)) {
    case OrgSlf4jLoggerFactory_SUCCESSFUL_INITIALIZATION:
    return [((OrgSlf4jImplStaticLoggerBinder *) nil_chk(OrgSlf4jImplStaticLoggerBinder_getSingleton())) getLoggerFactory];
    case OrgSlf4jLoggerFactory_NOP_FALLBACK_INITIALIZATION:
    return OrgSlf4jLoggerFactory_NOP_FALLBACK_FACTORY;
    case OrgSlf4jLoggerFactory_FAILED_INITIALIZATION:
    @throw new_JavaLangIllegalStateException_initWithNSString_(OrgSlf4jLoggerFactory_UNSUCCESSFUL_INIT_MSG);
    case OrgSlf4jLoggerFactory_ONGOING_INITIALIZATION:
    return OrgSlf4jLoggerFactory_SUBST_FACTORY;
  }
  @throw new_JavaLangIllegalStateException_initWithNSString_(@"Unreachable code");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSlf4jLoggerFactory)
