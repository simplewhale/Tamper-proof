//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/slf4j-api/org/slf4j/helpers/BasicMarkerFactory.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "org/slf4j/Marker.h"
#include "org/slf4j/helpers/BasicMarker.h"
#include "org/slf4j/helpers/BasicMarkerFactory.h"

@interface OrgSlf4jHelpersBasicMarkerFactory () {
 @public
  id<JavaUtilConcurrentConcurrentMap> markerMap_;
}

@end

J2OBJC_FIELD_SETTER(OrgSlf4jHelpersBasicMarkerFactory, markerMap_, id<JavaUtilConcurrentConcurrentMap>)

@implementation OrgSlf4jHelpersBasicMarkerFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSlf4jHelpersBasicMarkerFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<OrgSlf4jMarker>)getMarkerWithNSString:(NSString *)name {
  if (name == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Marker name cannot be null");
  }
  id<OrgSlf4jMarker> marker = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(markerMap_)) getWithId:name];
  if (marker == nil) {
    marker = new_OrgSlf4jHelpersBasicMarker_initWithNSString_(name);
    id<OrgSlf4jMarker> oldMarker = [markerMap_ putIfAbsentWithId:name withId:marker];
    if (oldMarker != nil) {
      marker = oldMarker;
    }
  }
  return marker;
}

- (jboolean)existsWithNSString:(NSString *)name {
  if (name == nil) {
    return false;
  }
  return [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(markerMap_)) containsKeyWithId:name];
}

- (jboolean)detachMarkerWithNSString:(NSString *)name {
  if (name == nil) {
    return false;
  }
  return ([((id<JavaUtilConcurrentConcurrentMap>) nil_chk(markerMap_)) removeWithId:name] != nil);
}

- (id<OrgSlf4jMarker>)getDetachedMarkerWithNSString:(NSString *)name {
  return new_OrgSlf4jHelpersBasicMarker_initWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSlf4jMarker;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSlf4jMarker;", 0x1, 4, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMarkerWithNSString:);
  methods[2].selector = @selector(existsWithNSString:);
  methods[3].selector = @selector(detachMarkerWithNSString:);
  methods[4].selector = @selector(getDetachedMarkerWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "markerMap_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "getMarker", "LNSString;", "exists", "detachMarker", "getDetachedMarker", "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/String;Lorg/slf4j/Marker;>;" };
  static const J2ObjcClassInfo _OrgSlf4jHelpersBasicMarkerFactory = { "BasicMarkerFactory", "org.slf4j.helpers", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgSlf4jHelpersBasicMarkerFactory;
}

@end

void OrgSlf4jHelpersBasicMarkerFactory_init(OrgSlf4jHelpersBasicMarkerFactory *self) {
  NSObject_init(self);
  self->markerMap_ = new_JavaUtilConcurrentConcurrentHashMap_init();
}

OrgSlf4jHelpersBasicMarkerFactory *new_OrgSlf4jHelpersBasicMarkerFactory_init() {
  J2OBJC_NEW_IMPL(OrgSlf4jHelpersBasicMarkerFactory, init)
}

OrgSlf4jHelpersBasicMarkerFactory *create_OrgSlf4jHelpersBasicMarkerFactory_init() {
  J2OBJC_CREATE_IMPL(OrgSlf4jHelpersBasicMarkerFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSlf4jHelpersBasicMarkerFactory)
