//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/slf4j-api/org/slf4j/helpers/MessageFormatter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "org/slf4j/helpers/FormattingTuple.h"
#include "org/slf4j/helpers/MessageFormatter.h"
#include "org/slf4j/helpers/Util.h"

@interface OrgSlf4jHelpersMessageFormatter ()

+ (IOSObjectArray *)trimmedCopyWithNSObjectArray:(IOSObjectArray *)argArray;

+ (void)deeplyAppendParameterWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                                withId:(id)o
                                       withJavaUtilMap:(id<JavaUtilMap>)seenMap;

+ (void)safeObjectAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                           withId:(id)o;

+ (void)objectArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                 withNSObjectArray:(IOSObjectArray *)a
                                   withJavaUtilMap:(id<JavaUtilMap>)seenMap;

+ (void)booleanArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withBooleanArray:(IOSBooleanArray *)a;

+ (void)byteArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withByteArray:(IOSByteArray *)a;

+ (void)charArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withCharArray:(IOSCharArray *)a;

+ (void)shortArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withShortArray:(IOSShortArray *)a;

+ (void)intArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withIntArray:(IOSIntArray *)a;

+ (void)longArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withLongArray:(IOSLongArray *)a;

+ (void)floatArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withFloatArray:(IOSFloatArray *)a;

+ (void)doubleArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withDoubleArray:(IOSDoubleArray *)a;

@end

inline jchar OrgSlf4jHelpersMessageFormatter_get_ESCAPE_CHAR(void);
#define OrgSlf4jHelpersMessageFormatter_ESCAPE_CHAR '\\'
J2OBJC_STATIC_FIELD_CONSTANT(OrgSlf4jHelpersMessageFormatter, ESCAPE_CHAR, jchar)

__attribute__((unused)) static IOSObjectArray *OrgSlf4jHelpersMessageFormatter_trimmedCopyWithNSObjectArray_(IOSObjectArray *argArray);

__attribute__((unused)) static void OrgSlf4jHelpersMessageFormatter_deeplyAppendParameterWithJavaLangStringBuilder_withId_withJavaUtilMap_(JavaLangStringBuilder *sbuf, id o, id<JavaUtilMap> seenMap);

__attribute__((unused)) static void OrgSlf4jHelpersMessageFormatter_safeObjectAppendWithJavaLangStringBuilder_withId_(JavaLangStringBuilder *sbuf, id o);

__attribute__((unused)) static void OrgSlf4jHelpersMessageFormatter_objectArrayAppendWithJavaLangStringBuilder_withNSObjectArray_withJavaUtilMap_(JavaLangStringBuilder *sbuf, IOSObjectArray *a, id<JavaUtilMap> seenMap);

__attribute__((unused)) static void OrgSlf4jHelpersMessageFormatter_booleanArrayAppendWithJavaLangStringBuilder_withBooleanArray_(JavaLangStringBuilder *sbuf, IOSBooleanArray *a);

__attribute__((unused)) static void OrgSlf4jHelpersMessageFormatter_byteArrayAppendWithJavaLangStringBuilder_withByteArray_(JavaLangStringBuilder *sbuf, IOSByteArray *a);

__attribute__((unused)) static void OrgSlf4jHelpersMessageFormatter_charArrayAppendWithJavaLangStringBuilder_withCharArray_(JavaLangStringBuilder *sbuf, IOSCharArray *a);

__attribute__((unused)) static void OrgSlf4jHelpersMessageFormatter_shortArrayAppendWithJavaLangStringBuilder_withShortArray_(JavaLangStringBuilder *sbuf, IOSShortArray *a);

__attribute__((unused)) static void OrgSlf4jHelpersMessageFormatter_intArrayAppendWithJavaLangStringBuilder_withIntArray_(JavaLangStringBuilder *sbuf, IOSIntArray *a);

__attribute__((unused)) static void OrgSlf4jHelpersMessageFormatter_longArrayAppendWithJavaLangStringBuilder_withLongArray_(JavaLangStringBuilder *sbuf, IOSLongArray *a);

__attribute__((unused)) static void OrgSlf4jHelpersMessageFormatter_floatArrayAppendWithJavaLangStringBuilder_withFloatArray_(JavaLangStringBuilder *sbuf, IOSFloatArray *a);

__attribute__((unused)) static void OrgSlf4jHelpersMessageFormatter_doubleArrayAppendWithJavaLangStringBuilder_withDoubleArray_(JavaLangStringBuilder *sbuf, IOSDoubleArray *a);

NSString *OrgSlf4jHelpersMessageFormatter_DELIM_STR = @"{}";

@implementation OrgSlf4jHelpersMessageFormatter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSlf4jHelpersMessageFormatter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (OrgSlf4jHelpersFormattingTuple *)formatWithNSString:(NSString *)messagePattern
                                                withId:(id)arg {
  return OrgSlf4jHelpersMessageFormatter_formatWithNSString_withId_(messagePattern, arg);
}

+ (OrgSlf4jHelpersFormattingTuple *)formatWithNSString:(NSString *)messagePattern
                                                withId:(id)arg1
                                                withId:(id)arg2 {
  return OrgSlf4jHelpersMessageFormatter_formatWithNSString_withId_withId_(messagePattern, arg1, arg2);
}

+ (JavaLangThrowable *)getThrowableCandidateWithNSObjectArray:(IOSObjectArray *)argArray {
  return OrgSlf4jHelpersMessageFormatter_getThrowableCandidateWithNSObjectArray_(argArray);
}

+ (OrgSlf4jHelpersFormattingTuple *)arrayFormatWithNSString:(NSString *)messagePattern
                                          withNSObjectArray:(IOSObjectArray *)argArray {
  return OrgSlf4jHelpersMessageFormatter_arrayFormatWithNSString_withNSObjectArray_(messagePattern, argArray);
}

+ (IOSObjectArray *)trimmedCopyWithNSObjectArray:(IOSObjectArray *)argArray {
  return OrgSlf4jHelpersMessageFormatter_trimmedCopyWithNSObjectArray_(argArray);
}

+ (OrgSlf4jHelpersFormattingTuple *)arrayFormatWithNSString:(NSString *)messagePattern
                                          withNSObjectArray:(IOSObjectArray *)argArray
                                      withJavaLangThrowable:(JavaLangThrowable *)throwable {
  return OrgSlf4jHelpersMessageFormatter_arrayFormatWithNSString_withNSObjectArray_withJavaLangThrowable_(messagePattern, argArray, throwable);
}

+ (jboolean)isEscapedDelimeterWithNSString:(NSString *)messagePattern
                                   withInt:(jint)delimeterStartIndex {
  return OrgSlf4jHelpersMessageFormatter_isEscapedDelimeterWithNSString_withInt_(messagePattern, delimeterStartIndex);
}

+ (jboolean)isDoubleEscapedWithNSString:(NSString *)messagePattern
                                withInt:(jint)delimeterStartIndex {
  return OrgSlf4jHelpersMessageFormatter_isDoubleEscapedWithNSString_withInt_(messagePattern, delimeterStartIndex);
}

+ (void)deeplyAppendParameterWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                                withId:(id)o
                                       withJavaUtilMap:(id<JavaUtilMap>)seenMap {
  OrgSlf4jHelpersMessageFormatter_deeplyAppendParameterWithJavaLangStringBuilder_withId_withJavaUtilMap_(sbuf, o, seenMap);
}

+ (void)safeObjectAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                           withId:(id)o {
  OrgSlf4jHelpersMessageFormatter_safeObjectAppendWithJavaLangStringBuilder_withId_(sbuf, o);
}

+ (void)objectArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                 withNSObjectArray:(IOSObjectArray *)a
                                   withJavaUtilMap:(id<JavaUtilMap>)seenMap {
  OrgSlf4jHelpersMessageFormatter_objectArrayAppendWithJavaLangStringBuilder_withNSObjectArray_withJavaUtilMap_(sbuf, a, seenMap);
}

+ (void)booleanArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withBooleanArray:(IOSBooleanArray *)a {
  OrgSlf4jHelpersMessageFormatter_booleanArrayAppendWithJavaLangStringBuilder_withBooleanArray_(sbuf, a);
}

+ (void)byteArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withByteArray:(IOSByteArray *)a {
  OrgSlf4jHelpersMessageFormatter_byteArrayAppendWithJavaLangStringBuilder_withByteArray_(sbuf, a);
}

+ (void)charArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withCharArray:(IOSCharArray *)a {
  OrgSlf4jHelpersMessageFormatter_charArrayAppendWithJavaLangStringBuilder_withCharArray_(sbuf, a);
}

+ (void)shortArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withShortArray:(IOSShortArray *)a {
  OrgSlf4jHelpersMessageFormatter_shortArrayAppendWithJavaLangStringBuilder_withShortArray_(sbuf, a);
}

+ (void)intArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withIntArray:(IOSIntArray *)a {
  OrgSlf4jHelpersMessageFormatter_intArrayAppendWithJavaLangStringBuilder_withIntArray_(sbuf, a);
}

+ (void)longArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withLongArray:(IOSLongArray *)a {
  OrgSlf4jHelpersMessageFormatter_longArrayAppendWithJavaLangStringBuilder_withLongArray_(sbuf, a);
}

+ (void)floatArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withFloatArray:(IOSFloatArray *)a {
  OrgSlf4jHelpersMessageFormatter_floatArrayAppendWithJavaLangStringBuilder_withFloatArray_(sbuf, a);
}

+ (void)doubleArrayAppendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuf
                                   withDoubleArray:(IOSDoubleArray *)a {
  OrgSlf4jHelpersMessageFormatter_doubleArrayAppendWithJavaLangStringBuilder_withDoubleArray_(sbuf, a);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSlf4jHelpersFormattingTuple;", 0x19, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSlf4jHelpersFormattingTuple;", 0x19, 0, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x18, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgSlf4jHelpersFormattingTuple;", 0x19, 5, 6, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0xa, 7, 4, -1, -1, -1, -1 },
    { NULL, "LOrgSlf4jHelpersFormattingTuple;", 0x19, 5, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x18, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x18, 11, 10, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0xa, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 17, 18, -1, 19, -1, -1 },
    { NULL, "V", 0xa, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 34, 35, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(formatWithNSString:withId:);
  methods[2].selector = @selector(formatWithNSString:withId:withId:);
  methods[3].selector = @selector(getThrowableCandidateWithNSObjectArray:);
  methods[4].selector = @selector(arrayFormatWithNSString:withNSObjectArray:);
  methods[5].selector = @selector(trimmedCopyWithNSObjectArray:);
  methods[6].selector = @selector(arrayFormatWithNSString:withNSObjectArray:withJavaLangThrowable:);
  methods[7].selector = @selector(isEscapedDelimeterWithNSString:withInt:);
  methods[8].selector = @selector(isDoubleEscapedWithNSString:withInt:);
  methods[9].selector = @selector(deeplyAppendParameterWithJavaLangStringBuilder:withId:withJavaUtilMap:);
  methods[10].selector = @selector(safeObjectAppendWithJavaLangStringBuilder:withId:);
  methods[11].selector = @selector(objectArrayAppendWithJavaLangStringBuilder:withNSObjectArray:withJavaUtilMap:);
  methods[12].selector = @selector(booleanArrayAppendWithJavaLangStringBuilder:withBooleanArray:);
  methods[13].selector = @selector(byteArrayAppendWithJavaLangStringBuilder:withByteArray:);
  methods[14].selector = @selector(charArrayAppendWithJavaLangStringBuilder:withCharArray:);
  methods[15].selector = @selector(shortArrayAppendWithJavaLangStringBuilder:withShortArray:);
  methods[16].selector = @selector(intArrayAppendWithJavaLangStringBuilder:withIntArray:);
  methods[17].selector = @selector(longArrayAppendWithJavaLangStringBuilder:withLongArray:);
  methods[18].selector = @selector(floatArrayAppendWithJavaLangStringBuilder:withFloatArray:);
  methods[19].selector = @selector(doubleArrayAppendWithJavaLangStringBuilder:withDoubleArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DELIM_START", "C", .constantValue.asUnichar = OrgSlf4jHelpersMessageFormatter_DELIM_START, 0x18, -1, -1, -1, -1 },
    { "DELIM_STOP", "C", .constantValue.asUnichar = OrgSlf4jHelpersMessageFormatter_DELIM_STOP, 0x18, -1, -1, -1, -1 },
    { "DELIM_STR", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 36, -1, -1 },
    { "ESCAPE_CHAR", "C", .constantValue.asUnichar = OrgSlf4jHelpersMessageFormatter_ESCAPE_CHAR, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "format", "LNSString;LNSObject;", "LNSString;LNSObject;LNSObject;", "getThrowableCandidate", "[LNSObject;", "arrayFormat", "LNSString;[LNSObject;", "trimmedCopy", "LNSString;[LNSObject;LJavaLangThrowable;", "isEscapedDelimeter", "LNSString;I", "isDoubleEscaped", "deeplyAppendParameter", "LJavaLangStringBuilder;LNSObject;LJavaUtilMap;", "(Ljava/lang/StringBuilder;Ljava/lang/Object;Ljava/util/Map<[Ljava/lang/Object;Ljava/lang/Object;>;)V", "safeObjectAppend", "LJavaLangStringBuilder;LNSObject;", "objectArrayAppend", "LJavaLangStringBuilder;[LNSObject;LJavaUtilMap;", "(Ljava/lang/StringBuilder;[Ljava/lang/Object;Ljava/util/Map<[Ljava/lang/Object;Ljava/lang/Object;>;)V", "booleanArrayAppend", "LJavaLangStringBuilder;[Z", "byteArrayAppend", "LJavaLangStringBuilder;[B", "charArrayAppend", "LJavaLangStringBuilder;[C", "shortArrayAppend", "LJavaLangStringBuilder;[S", "intArrayAppend", "LJavaLangStringBuilder;[I", "longArrayAppend", "LJavaLangStringBuilder;[J", "floatArrayAppend", "LJavaLangStringBuilder;[F", "doubleArrayAppend", "LJavaLangStringBuilder;[D", &OrgSlf4jHelpersMessageFormatter_DELIM_STR };
  static const J2ObjcClassInfo _OrgSlf4jHelpersMessageFormatter = { "MessageFormatter", "org.slf4j.helpers", ptrTable, methods, fields, 7, 0x11, 20, 4, -1, -1, -1, -1, -1 };
  return &_OrgSlf4jHelpersMessageFormatter;
}

@end

void OrgSlf4jHelpersMessageFormatter_init(OrgSlf4jHelpersMessageFormatter *self) {
  NSObject_init(self);
}

OrgSlf4jHelpersMessageFormatter *new_OrgSlf4jHelpersMessageFormatter_init() {
  J2OBJC_NEW_IMPL(OrgSlf4jHelpersMessageFormatter, init)
}

OrgSlf4jHelpersMessageFormatter *create_OrgSlf4jHelpersMessageFormatter_init() {
  J2OBJC_CREATE_IMPL(OrgSlf4jHelpersMessageFormatter, init)
}

OrgSlf4jHelpersFormattingTuple *OrgSlf4jHelpersMessageFormatter_formatWithNSString_withId_(NSString *messagePattern, id arg) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  return OrgSlf4jHelpersMessageFormatter_arrayFormatWithNSString_withNSObjectArray_(messagePattern, [IOSObjectArray newArrayWithObjects:(id[]){ arg } count:1 type:NSObject_class_()]);
}

OrgSlf4jHelpersFormattingTuple *OrgSlf4jHelpersMessageFormatter_formatWithNSString_withId_withId_(NSString *messagePattern, id arg1, id arg2) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  return OrgSlf4jHelpersMessageFormatter_arrayFormatWithNSString_withNSObjectArray_(messagePattern, [IOSObjectArray newArrayWithObjects:(id[]){ arg1, arg2 } count:2 type:NSObject_class_()]);
}

JavaLangThrowable *OrgSlf4jHelpersMessageFormatter_getThrowableCandidateWithNSObjectArray_(IOSObjectArray *argArray) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  if (argArray == nil || argArray->size_ == 0) {
    return nil;
  }
  id lastEntry = IOSObjectArray_Get(argArray, argArray->size_ - 1);
  if ([lastEntry isKindOfClass:[JavaLangThrowable class]]) {
    return (JavaLangThrowable *) lastEntry;
  }
  return nil;
}

OrgSlf4jHelpersFormattingTuple *OrgSlf4jHelpersMessageFormatter_arrayFormatWithNSString_withNSObjectArray_(NSString *messagePattern, IOSObjectArray *argArray) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  JavaLangThrowable *throwableCandidate = OrgSlf4jHelpersMessageFormatter_getThrowableCandidateWithNSObjectArray_(argArray);
  IOSObjectArray *args = argArray;
  if (throwableCandidate != nil) {
    args = OrgSlf4jHelpersMessageFormatter_trimmedCopyWithNSObjectArray_(argArray);
  }
  return OrgSlf4jHelpersMessageFormatter_arrayFormatWithNSString_withNSObjectArray_withJavaLangThrowable_(messagePattern, args, throwableCandidate);
}

IOSObjectArray *OrgSlf4jHelpersMessageFormatter_trimmedCopyWithNSObjectArray_(IOSObjectArray *argArray) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  if (argArray == nil || argArray->size_ == 0) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"non-sensical empty or null argument array");
  }
  jint trimemdLen = argArray->size_ - 1;
  IOSObjectArray *trimmed = [IOSObjectArray newArrayWithLength:trimemdLen type:NSObject_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(argArray, 0, trimmed, 0, trimemdLen);
  return trimmed;
}

OrgSlf4jHelpersFormattingTuple *OrgSlf4jHelpersMessageFormatter_arrayFormatWithNSString_withNSObjectArray_withJavaLangThrowable_(NSString *messagePattern, IOSObjectArray *argArray, JavaLangThrowable *throwable) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  if (messagePattern == nil) {
    return new_OrgSlf4jHelpersFormattingTuple_initWithNSString_withNSObjectArray_withJavaLangThrowable_(nil, argArray, throwable);
  }
  if (argArray == nil) {
    return new_OrgSlf4jHelpersFormattingTuple_initWithNSString_(messagePattern);
  }
  jint i = 0;
  jint j;
  JavaLangStringBuilder *sbuf = new_JavaLangStringBuilder_initWithInt_([messagePattern java_length] + 50);
  jint L;
  for (L = 0; L < argArray->size_; L++) {
    j = [messagePattern java_indexOfString:OrgSlf4jHelpersMessageFormatter_DELIM_STR fromIndex:i];
    if (j == -1) {
      if (i == 0) {
        return new_OrgSlf4jHelpersFormattingTuple_initWithNSString_withNSObjectArray_withJavaLangThrowable_(messagePattern, argArray, throwable);
      }
      else {
        (void) [sbuf appendWithJavaLangCharSequence:messagePattern withInt:i withInt:[messagePattern java_length]];
        return new_OrgSlf4jHelpersFormattingTuple_initWithNSString_withNSObjectArray_withJavaLangThrowable_([sbuf description], argArray, throwable);
      }
    }
    else {
      if (OrgSlf4jHelpersMessageFormatter_isEscapedDelimeterWithNSString_withInt_(messagePattern, j)) {
        if (!OrgSlf4jHelpersMessageFormatter_isDoubleEscapedWithNSString_withInt_(messagePattern, j)) {
          L--;
          (void) [sbuf appendWithJavaLangCharSequence:messagePattern withInt:i withInt:j - 1];
          (void) [sbuf appendWithChar:OrgSlf4jHelpersMessageFormatter_DELIM_START];
          i = j + 1;
        }
        else {
          (void) [sbuf appendWithJavaLangCharSequence:messagePattern withInt:i withInt:j - 1];
          OrgSlf4jHelpersMessageFormatter_deeplyAppendParameterWithJavaLangStringBuilder_withId_withJavaUtilMap_(sbuf, IOSObjectArray_Get(argArray, L), new_JavaUtilHashMap_init());
          i = j + 2;
        }
      }
      else {
        (void) [sbuf appendWithJavaLangCharSequence:messagePattern withInt:i withInt:j];
        OrgSlf4jHelpersMessageFormatter_deeplyAppendParameterWithJavaLangStringBuilder_withId_withJavaUtilMap_(sbuf, IOSObjectArray_Get(argArray, L), new_JavaUtilHashMap_init());
        i = j + 2;
      }
    }
  }
  (void) [sbuf appendWithJavaLangCharSequence:messagePattern withInt:i withInt:[messagePattern java_length]];
  return new_OrgSlf4jHelpersFormattingTuple_initWithNSString_withNSObjectArray_withJavaLangThrowable_([sbuf description], argArray, throwable);
}

jboolean OrgSlf4jHelpersMessageFormatter_isEscapedDelimeterWithNSString_withInt_(NSString *messagePattern, jint delimeterStartIndex) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  if (delimeterStartIndex == 0) {
    return false;
  }
  jchar potentialEscape = [((NSString *) nil_chk(messagePattern)) charAtWithInt:delimeterStartIndex - 1];
  if (potentialEscape == OrgSlf4jHelpersMessageFormatter_ESCAPE_CHAR) {
    return true;
  }
  else {
    return false;
  }
}

jboolean OrgSlf4jHelpersMessageFormatter_isDoubleEscapedWithNSString_withInt_(NSString *messagePattern, jint delimeterStartIndex) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  if (delimeterStartIndex >= 2 && [((NSString *) nil_chk(messagePattern)) charAtWithInt:delimeterStartIndex - 2] == OrgSlf4jHelpersMessageFormatter_ESCAPE_CHAR) {
    return true;
  }
  else {
    return false;
  }
}

void OrgSlf4jHelpersMessageFormatter_deeplyAppendParameterWithJavaLangStringBuilder_withId_withJavaUtilMap_(JavaLangStringBuilder *sbuf, id o, id<JavaUtilMap> seenMap) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  if (o == nil) {
    (void) [((JavaLangStringBuilder *) nil_chk(sbuf)) appendWithNSString:@"null"];
    return;
  }
  if (![[o java_getClass] isArray]) {
    OrgSlf4jHelpersMessageFormatter_safeObjectAppendWithJavaLangStringBuilder_withId_(sbuf, o);
  }
  else {
    if ([o isKindOfClass:[IOSBooleanArray class]]) {
      OrgSlf4jHelpersMessageFormatter_booleanArrayAppendWithJavaLangStringBuilder_withBooleanArray_(sbuf, (IOSBooleanArray *) cast_chk(o, [IOSBooleanArray class]));
    }
    else if ([o isKindOfClass:[IOSByteArray class]]) {
      OrgSlf4jHelpersMessageFormatter_byteArrayAppendWithJavaLangStringBuilder_withByteArray_(sbuf, (IOSByteArray *) cast_chk(o, [IOSByteArray class]));
    }
    else if ([o isKindOfClass:[IOSCharArray class]]) {
      OrgSlf4jHelpersMessageFormatter_charArrayAppendWithJavaLangStringBuilder_withCharArray_(sbuf, (IOSCharArray *) cast_chk(o, [IOSCharArray class]));
    }
    else if ([o isKindOfClass:[IOSShortArray class]]) {
      OrgSlf4jHelpersMessageFormatter_shortArrayAppendWithJavaLangStringBuilder_withShortArray_(sbuf, (IOSShortArray *) cast_chk(o, [IOSShortArray class]));
    }
    else if ([o isKindOfClass:[IOSIntArray class]]) {
      OrgSlf4jHelpersMessageFormatter_intArrayAppendWithJavaLangStringBuilder_withIntArray_(sbuf, (IOSIntArray *) cast_chk(o, [IOSIntArray class]));
    }
    else if ([o isKindOfClass:[IOSLongArray class]]) {
      OrgSlf4jHelpersMessageFormatter_longArrayAppendWithJavaLangStringBuilder_withLongArray_(sbuf, (IOSLongArray *) cast_chk(o, [IOSLongArray class]));
    }
    else if ([o isKindOfClass:[IOSFloatArray class]]) {
      OrgSlf4jHelpersMessageFormatter_floatArrayAppendWithJavaLangStringBuilder_withFloatArray_(sbuf, (IOSFloatArray *) cast_chk(o, [IOSFloatArray class]));
    }
    else if ([o isKindOfClass:[IOSDoubleArray class]]) {
      OrgSlf4jHelpersMessageFormatter_doubleArrayAppendWithJavaLangStringBuilder_withDoubleArray_(sbuf, (IOSDoubleArray *) cast_chk(o, [IOSDoubleArray class]));
    }
    else {
      OrgSlf4jHelpersMessageFormatter_objectArrayAppendWithJavaLangStringBuilder_withNSObjectArray_withJavaUtilMap_(sbuf, (IOSObjectArray *) cast_check(o, IOSClass_arrayType(NSObject_class_(), 1)), seenMap);
    }
  }
}

void OrgSlf4jHelpersMessageFormatter_safeObjectAppendWithJavaLangStringBuilder_withId_(JavaLangStringBuilder *sbuf, id o) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  @try {
    NSString *oAsString = [nil_chk(o) description];
    (void) [((JavaLangStringBuilder *) nil_chk(sbuf)) appendWithNSString:oAsString];
  }
  @catch (JavaLangThrowable *t) {
    OrgSlf4jHelpersUtil_reportWithNSString_withJavaLangThrowable_(JreStrcat("$$C", @"SLF4J: Failed toString() invocation on an object of type [", [[o java_getClass] getName], ']'), t);
    (void) [((JavaLangStringBuilder *) nil_chk(sbuf)) appendWithNSString:@"[FAILED toString()]"];
  }
}

void OrgSlf4jHelpersMessageFormatter_objectArrayAppendWithJavaLangStringBuilder_withNSObjectArray_withJavaUtilMap_(JavaLangStringBuilder *sbuf, IOSObjectArray *a, id<JavaUtilMap> seenMap) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  (void) [((JavaLangStringBuilder *) nil_chk(sbuf)) appendWithChar:'['];
  if (![((id<JavaUtilMap>) nil_chk(seenMap)) containsKeyWithId:a]) {
    (void) [seenMap putWithId:a withId:nil];
    jint len = ((IOSObjectArray *) nil_chk(a))->size_;
    for (jint i = 0; i < len; i++) {
      OrgSlf4jHelpersMessageFormatter_deeplyAppendParameterWithJavaLangStringBuilder_withId_withJavaUtilMap_(sbuf, IOSObjectArray_Get(a, i), seenMap);
      if (i != len - 1) (void) [sbuf appendWithNSString:@", "];
    }
    (void) [seenMap removeWithId:a];
  }
  else {
    (void) [sbuf appendWithNSString:@"..."];
  }
  (void) [sbuf appendWithChar:']'];
}

void OrgSlf4jHelpersMessageFormatter_booleanArrayAppendWithJavaLangStringBuilder_withBooleanArray_(JavaLangStringBuilder *sbuf, IOSBooleanArray *a) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  (void) [((JavaLangStringBuilder *) nil_chk(sbuf)) appendWithChar:'['];
  jint len = ((IOSBooleanArray *) nil_chk(a))->size_;
  for (jint i = 0; i < len; i++) {
    (void) [sbuf appendWithBoolean:IOSBooleanArray_Get(a, i)];
    if (i != len - 1) (void) [sbuf appendWithNSString:@", "];
  }
  (void) [sbuf appendWithChar:']'];
}

void OrgSlf4jHelpersMessageFormatter_byteArrayAppendWithJavaLangStringBuilder_withByteArray_(JavaLangStringBuilder *sbuf, IOSByteArray *a) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  (void) [((JavaLangStringBuilder *) nil_chk(sbuf)) appendWithChar:'['];
  jint len = ((IOSByteArray *) nil_chk(a))->size_;
  for (jint i = 0; i < len; i++) {
    (void) [sbuf appendWithInt:IOSByteArray_Get(a, i)];
    if (i != len - 1) (void) [sbuf appendWithNSString:@", "];
  }
  (void) [sbuf appendWithChar:']'];
}

void OrgSlf4jHelpersMessageFormatter_charArrayAppendWithJavaLangStringBuilder_withCharArray_(JavaLangStringBuilder *sbuf, IOSCharArray *a) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  (void) [((JavaLangStringBuilder *) nil_chk(sbuf)) appendWithChar:'['];
  jint len = ((IOSCharArray *) nil_chk(a))->size_;
  for (jint i = 0; i < len; i++) {
    (void) [sbuf appendWithChar:IOSCharArray_Get(a, i)];
    if (i != len - 1) (void) [sbuf appendWithNSString:@", "];
  }
  (void) [sbuf appendWithChar:']'];
}

void OrgSlf4jHelpersMessageFormatter_shortArrayAppendWithJavaLangStringBuilder_withShortArray_(JavaLangStringBuilder *sbuf, IOSShortArray *a) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  (void) [((JavaLangStringBuilder *) nil_chk(sbuf)) appendWithChar:'['];
  jint len = ((IOSShortArray *) nil_chk(a))->size_;
  for (jint i = 0; i < len; i++) {
    (void) [sbuf appendWithInt:IOSShortArray_Get(a, i)];
    if (i != len - 1) (void) [sbuf appendWithNSString:@", "];
  }
  (void) [sbuf appendWithChar:']'];
}

void OrgSlf4jHelpersMessageFormatter_intArrayAppendWithJavaLangStringBuilder_withIntArray_(JavaLangStringBuilder *sbuf, IOSIntArray *a) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  (void) [((JavaLangStringBuilder *) nil_chk(sbuf)) appendWithChar:'['];
  jint len = ((IOSIntArray *) nil_chk(a))->size_;
  for (jint i = 0; i < len; i++) {
    (void) [sbuf appendWithInt:IOSIntArray_Get(a, i)];
    if (i != len - 1) (void) [sbuf appendWithNSString:@", "];
  }
  (void) [sbuf appendWithChar:']'];
}

void OrgSlf4jHelpersMessageFormatter_longArrayAppendWithJavaLangStringBuilder_withLongArray_(JavaLangStringBuilder *sbuf, IOSLongArray *a) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  (void) [((JavaLangStringBuilder *) nil_chk(sbuf)) appendWithChar:'['];
  jint len = ((IOSLongArray *) nil_chk(a))->size_;
  for (jint i = 0; i < len; i++) {
    (void) [sbuf appendWithLong:IOSLongArray_Get(a, i)];
    if (i != len - 1) (void) [sbuf appendWithNSString:@", "];
  }
  (void) [sbuf appendWithChar:']'];
}

void OrgSlf4jHelpersMessageFormatter_floatArrayAppendWithJavaLangStringBuilder_withFloatArray_(JavaLangStringBuilder *sbuf, IOSFloatArray *a) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  (void) [((JavaLangStringBuilder *) nil_chk(sbuf)) appendWithChar:'['];
  jint len = ((IOSFloatArray *) nil_chk(a))->size_;
  for (jint i = 0; i < len; i++) {
    (void) [sbuf appendWithFloat:IOSFloatArray_Get(a, i)];
    if (i != len - 1) (void) [sbuf appendWithNSString:@", "];
  }
  (void) [sbuf appendWithChar:']'];
}

void OrgSlf4jHelpersMessageFormatter_doubleArrayAppendWithJavaLangStringBuilder_withDoubleArray_(JavaLangStringBuilder *sbuf, IOSDoubleArray *a) {
  OrgSlf4jHelpersMessageFormatter_initialize();
  (void) [((JavaLangStringBuilder *) nil_chk(sbuf)) appendWithChar:'['];
  jint len = ((IOSDoubleArray *) nil_chk(a))->size_;
  for (jint i = 0; i < len; i++) {
    (void) [sbuf appendWithDouble:IOSDoubleArray_Get(a, i)];
    if (i != len - 1) (void) [sbuf appendWithNSString:@", "];
  }
  (void) [sbuf appendWithChar:']'];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSlf4jHelpersMessageFormatter)
