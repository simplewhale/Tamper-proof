//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/slf4j-api/org/slf4j/helpers/SubstituteLogger.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/Queue.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/Marker.h"
#include "org/slf4j/event/EventRecodingLogger.h"
#include "org/slf4j/event/LoggingEvent.h"
#include "org/slf4j/helpers/NOPLogger.h"
#include "org/slf4j/helpers/SubstituteLogger.h"

@interface OrgSlf4jHelpersSubstituteLogger () {
 @public
  NSString *name_;
  volatile_id _delegate_;
  JavaLangBoolean *delegateEventAware_;
  JavaLangReflectMethod *logMethodCache_;
  OrgSlf4jEventEventRecodingLogger *eventRecodingLogger_;
  id<JavaUtilQueue> eventQueue_;
  jboolean createdPostInitialization_;
}

- (id<OrgSlf4jLogger>)getEventRecordingLogger;

@end

J2OBJC_FIELD_SETTER(OrgSlf4jHelpersSubstituteLogger, name_, NSString *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgSlf4jHelpersSubstituteLogger, _delegate_, id<OrgSlf4jLogger>)
J2OBJC_FIELD_SETTER(OrgSlf4jHelpersSubstituteLogger, delegateEventAware_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(OrgSlf4jHelpersSubstituteLogger, logMethodCache_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(OrgSlf4jHelpersSubstituteLogger, eventRecodingLogger_, OrgSlf4jEventEventRecodingLogger *)
J2OBJC_FIELD_SETTER(OrgSlf4jHelpersSubstituteLogger, eventQueue_, id<JavaUtilQueue>)

__attribute__((unused)) static id<OrgSlf4jLogger> OrgSlf4jHelpersSubstituteLogger_getEventRecordingLogger(OrgSlf4jHelpersSubstituteLogger *self);

@implementation OrgSlf4jHelpersSubstituteLogger

- (instancetype)initWithNSString:(NSString *)name
               withJavaUtilQueue:(id<JavaUtilQueue>)eventQueue
                     withBoolean:(jboolean)createdPostInitialization {
  OrgSlf4jHelpersSubstituteLogger_initWithNSString_withJavaUtilQueue_withBoolean_(self, name, eventQueue, createdPostInitialization);
  return self;
}

- (NSString *)getName {
  return name_;
}

- (jboolean)isTraceEnabled {
  return [((id<OrgSlf4jLogger>) nil_chk([self delegate])) isTraceEnabled];
}

- (void)traceWithNSString:(NSString *)msg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) traceWithNSString:msg];
}

- (void)traceWithNSString:(NSString *)format
                   withId:(id)arg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) traceWithNSString:format withId:arg];
}

- (void)traceWithNSString:(NSString *)format
                   withId:(id)arg1
                   withId:(id)arg2 {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) traceWithNSString:format withId:arg1 withId:arg2];
}

- (void)traceWithNSString:(NSString *)format
        withNSObjectArray:(IOSObjectArray *)arguments {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) traceWithNSString:format withNSObjectArray:arguments];
}

- (void)traceWithNSString:(NSString *)msg
    withJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) traceWithNSString:msg withJavaLangThrowable:t];
}

- (jboolean)isTraceEnabledWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker {
  return [((id<OrgSlf4jLogger>) nil_chk([self delegate])) isTraceEnabledWithOrgSlf4jMarker:marker];
}

- (void)traceWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                   withNSString:(NSString *)msg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) traceWithOrgSlf4jMarker:marker withNSString:msg];
}

- (void)traceWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                   withNSString:(NSString *)format
                         withId:(id)arg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) traceWithOrgSlf4jMarker:marker withNSString:format withId:arg];
}

- (void)traceWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                   withNSString:(NSString *)format
                         withId:(id)arg1
                         withId:(id)arg2 {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) traceWithOrgSlf4jMarker:marker withNSString:format withId:arg1 withId:arg2];
}

- (void)traceWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                   withNSString:(NSString *)format
              withNSObjectArray:(IOSObjectArray *)arguments {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) traceWithOrgSlf4jMarker:marker withNSString:format withNSObjectArray:arguments];
}

- (void)traceWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                   withNSString:(NSString *)msg
          withJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) traceWithOrgSlf4jMarker:marker withNSString:msg withJavaLangThrowable:t];
}

- (jboolean)isDebugEnabled {
  return [((id<OrgSlf4jLogger>) nil_chk([self delegate])) isDebugEnabled];
}

- (void)debugWithNSString:(NSString *)msg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) debugWithNSString:msg];
}

- (void)debugWithNSString:(NSString *)format
                   withId:(id)arg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) debugWithNSString:format withId:arg];
}

- (void)debugWithNSString:(NSString *)format
                   withId:(id)arg1
                   withId:(id)arg2 {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) debugWithNSString:format withId:arg1 withId:arg2];
}

- (void)debugWithNSString:(NSString *)format
        withNSObjectArray:(IOSObjectArray *)arguments {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) debugWithNSString:format withNSObjectArray:arguments];
}

- (void)debugWithNSString:(NSString *)msg
    withJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) debugWithNSString:msg withJavaLangThrowable:t];
}

- (jboolean)isDebugEnabledWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker {
  return [((id<OrgSlf4jLogger>) nil_chk([self delegate])) isDebugEnabledWithOrgSlf4jMarker:marker];
}

- (void)debugWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                   withNSString:(NSString *)msg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) debugWithOrgSlf4jMarker:marker withNSString:msg];
}

- (void)debugWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                   withNSString:(NSString *)format
                         withId:(id)arg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) debugWithOrgSlf4jMarker:marker withNSString:format withId:arg];
}

- (void)debugWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                   withNSString:(NSString *)format
                         withId:(id)arg1
                         withId:(id)arg2 {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) debugWithOrgSlf4jMarker:marker withNSString:format withId:arg1 withId:arg2];
}

- (void)debugWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                   withNSString:(NSString *)format
              withNSObjectArray:(IOSObjectArray *)arguments {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) debugWithOrgSlf4jMarker:marker withNSString:format withNSObjectArray:arguments];
}

- (void)debugWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                   withNSString:(NSString *)msg
          withJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) debugWithOrgSlf4jMarker:marker withNSString:msg withJavaLangThrowable:t];
}

- (jboolean)isInfoEnabled {
  return [((id<OrgSlf4jLogger>) nil_chk([self delegate])) isInfoEnabled];
}

- (void)infoWithNSString:(NSString *)msg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) infoWithNSString:msg];
}

- (void)infoWithNSString:(NSString *)format
                  withId:(id)arg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) infoWithNSString:format withId:arg];
}

- (void)infoWithNSString:(NSString *)format
                  withId:(id)arg1
                  withId:(id)arg2 {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) infoWithNSString:format withId:arg1 withId:arg2];
}

- (void)infoWithNSString:(NSString *)format
       withNSObjectArray:(IOSObjectArray *)arguments {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) infoWithNSString:format withNSObjectArray:arguments];
}

- (void)infoWithNSString:(NSString *)msg
   withJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) infoWithNSString:msg withJavaLangThrowable:t];
}

- (jboolean)isInfoEnabledWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker {
  return [((id<OrgSlf4jLogger>) nil_chk([self delegate])) isInfoEnabledWithOrgSlf4jMarker:marker];
}

- (void)infoWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                  withNSString:(NSString *)msg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) infoWithOrgSlf4jMarker:marker withNSString:msg];
}

- (void)infoWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                  withNSString:(NSString *)format
                        withId:(id)arg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) infoWithOrgSlf4jMarker:marker withNSString:format withId:arg];
}

- (void)infoWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                  withNSString:(NSString *)format
                        withId:(id)arg1
                        withId:(id)arg2 {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) infoWithOrgSlf4jMarker:marker withNSString:format withId:arg1 withId:arg2];
}

- (void)infoWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                  withNSString:(NSString *)format
             withNSObjectArray:(IOSObjectArray *)arguments {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) infoWithOrgSlf4jMarker:marker withNSString:format withNSObjectArray:arguments];
}

- (void)infoWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                  withNSString:(NSString *)msg
         withJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) infoWithOrgSlf4jMarker:marker withNSString:msg withJavaLangThrowable:t];
}

- (jboolean)isWarnEnabled {
  return [((id<OrgSlf4jLogger>) nil_chk([self delegate])) isWarnEnabled];
}

- (void)warnWithNSString:(NSString *)msg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) warnWithNSString:msg];
}

- (void)warnWithNSString:(NSString *)format
                  withId:(id)arg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) warnWithNSString:format withId:arg];
}

- (void)warnWithNSString:(NSString *)format
                  withId:(id)arg1
                  withId:(id)arg2 {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) warnWithNSString:format withId:arg1 withId:arg2];
}

- (void)warnWithNSString:(NSString *)format
       withNSObjectArray:(IOSObjectArray *)arguments {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) warnWithNSString:format withNSObjectArray:arguments];
}

- (void)warnWithNSString:(NSString *)msg
   withJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) warnWithNSString:msg withJavaLangThrowable:t];
}

- (jboolean)isWarnEnabledWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker {
  return [((id<OrgSlf4jLogger>) nil_chk([self delegate])) isWarnEnabledWithOrgSlf4jMarker:marker];
}

- (void)warnWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                  withNSString:(NSString *)msg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) warnWithOrgSlf4jMarker:marker withNSString:msg];
}

- (void)warnWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                  withNSString:(NSString *)format
                        withId:(id)arg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) warnWithOrgSlf4jMarker:marker withNSString:format withId:arg];
}

- (void)warnWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                  withNSString:(NSString *)format
                        withId:(id)arg1
                        withId:(id)arg2 {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) warnWithOrgSlf4jMarker:marker withNSString:format withId:arg1 withId:arg2];
}

- (void)warnWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                  withNSString:(NSString *)format
             withNSObjectArray:(IOSObjectArray *)arguments {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) warnWithOrgSlf4jMarker:marker withNSString:format withNSObjectArray:arguments];
}

- (void)warnWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                  withNSString:(NSString *)msg
         withJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) warnWithOrgSlf4jMarker:marker withNSString:msg withJavaLangThrowable:t];
}

- (jboolean)isErrorEnabled {
  return [((id<OrgSlf4jLogger>) nil_chk([self delegate])) isErrorEnabled];
}

- (void)errorWithNSString:(NSString *)msg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) errorWithNSString:msg];
}

- (void)errorWithNSString:(NSString *)format
                   withId:(id)arg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) errorWithNSString:format withId:arg];
}

- (void)errorWithNSString:(NSString *)format
                   withId:(id)arg1
                   withId:(id)arg2 {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) errorWithNSString:format withId:arg1 withId:arg2];
}

- (void)errorWithNSString:(NSString *)format
        withNSObjectArray:(IOSObjectArray *)arguments {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) errorWithNSString:format withNSObjectArray:arguments];
}

- (void)errorWithNSString:(NSString *)msg
    withJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) errorWithNSString:msg withJavaLangThrowable:t];
}

- (jboolean)isErrorEnabledWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker {
  return [((id<OrgSlf4jLogger>) nil_chk([self delegate])) isErrorEnabledWithOrgSlf4jMarker:marker];
}

- (void)errorWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                   withNSString:(NSString *)msg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) errorWithOrgSlf4jMarker:marker withNSString:msg];
}

- (void)errorWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                   withNSString:(NSString *)format
                         withId:(id)arg {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) errorWithOrgSlf4jMarker:marker withNSString:format withId:arg];
}

- (void)errorWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                   withNSString:(NSString *)format
                         withId:(id)arg1
                         withId:(id)arg2 {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) errorWithOrgSlf4jMarker:marker withNSString:format withId:arg1 withId:arg2];
}

- (void)errorWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                   withNSString:(NSString *)format
              withNSObjectArray:(IOSObjectArray *)arguments {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) errorWithOrgSlf4jMarker:marker withNSString:format withNSObjectArray:arguments];
}

- (void)errorWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)marker
                   withNSString:(NSString *)msg
          withJavaLangThrowable:(JavaLangThrowable *)t {
  [((id<OrgSlf4jLogger>) nil_chk([self delegate])) errorWithOrgSlf4jMarker:marker withNSString:msg withJavaLangThrowable:t];
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  OrgSlf4jHelpersSubstituteLogger *that = (OrgSlf4jHelpersSubstituteLogger *) cast_chk(o, [OrgSlf4jHelpersSubstituteLogger class]);
  if (![((NSString *) nil_chk(name_)) isEqual:that->name_]) return false;
  return true;
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(name_)) hash]);
}

- (id<OrgSlf4jLogger>)delegate {
  if (JreLoadVolatileId(&_delegate_) != nil) {
    return JreLoadVolatileId(&_delegate_);
  }
  if (createdPostInitialization_) {
    return JreLoadStatic(OrgSlf4jHelpersNOPLogger, NOP_LOGGER);
  }
  else {
    return OrgSlf4jHelpersSubstituteLogger_getEventRecordingLogger(self);
  }
}

- (id<OrgSlf4jLogger>)getEventRecordingLogger {
  return OrgSlf4jHelpersSubstituteLogger_getEventRecordingLogger(self);
}

- (void)setDelegateWithOrgSlf4jLogger:(id<OrgSlf4jLogger>)delegate {
  (void) JreVolatileStrongAssign(&self->_delegate_, delegate);
}

- (jboolean)isDelegateEventAware {
  if (delegateEventAware_ != nil) return [delegateEventAware_ booleanValue];
  @try {
    logMethodCache_ = [[((id<OrgSlf4jLogger>) nil_chk(JreLoadVolatileId(&_delegate_))) java_getClass] getMethod:@"log" parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ OrgSlf4jEventLoggingEvent_class_() } count:1 type:IOSClass_class_()]];
    delegateEventAware_ = JreLoadStatic(JavaLangBoolean, TRUE);
  }
  @catch (JavaLangNoSuchMethodException *e) {
    delegateEventAware_ = JreLoadStatic(JavaLangBoolean, FALSE);
  }
  return [((JavaLangBoolean *) nil_chk(delegateEventAware_)) booleanValue];
}

- (void)logWithOrgSlf4jEventLoggingEvent:(id<OrgSlf4jEventLoggingEvent>)event {
  if ([self isDelegateEventAware]) {
    @try {
      (void) [((JavaLangReflectMethod *) nil_chk(logMethodCache_)) invokeWithId:JreLoadVolatileId(&_delegate_) withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ event } count:1 type:NSObject_class_()]];
    }
    @catch (JavaLangIllegalAccessException *e) {
    }
    @catch (JavaLangIllegalArgumentException *e) {
    }
    @catch (JavaLangReflectInvocationTargetException *e) {
    }
  }
}

- (jboolean)isDelegateNull {
  return JreLoadVolatileId(&_delegate_) == nil;
}

- (jboolean)isDelegateNOP {
  return [JreLoadVolatileId(&_delegate_) isKindOfClass:[OrgSlf4jHelpersNOPLogger class]];
}

- (void)__javaClone:(OrgSlf4jHelpersSubstituteLogger *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&_delegate_, &original->_delegate_);
}

- (void)dealloc {
  JreReleaseVolatile(&_delegate_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 2, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 2, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 15, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 15, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 17, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 17, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 19, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 19, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 21, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 21, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 25, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSlf4jLogger;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSlf4jLogger;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withJavaUtilQueue:withBoolean:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(isTraceEnabled);
  methods[3].selector = @selector(traceWithNSString:);
  methods[4].selector = @selector(traceWithNSString:withId:);
  methods[5].selector = @selector(traceWithNSString:withId:withId:);
  methods[6].selector = @selector(traceWithNSString:withNSObjectArray:);
  methods[7].selector = @selector(traceWithNSString:withJavaLangThrowable:);
  methods[8].selector = @selector(isTraceEnabledWithOrgSlf4jMarker:);
  methods[9].selector = @selector(traceWithOrgSlf4jMarker:withNSString:);
  methods[10].selector = @selector(traceWithOrgSlf4jMarker:withNSString:withId:);
  methods[11].selector = @selector(traceWithOrgSlf4jMarker:withNSString:withId:withId:);
  methods[12].selector = @selector(traceWithOrgSlf4jMarker:withNSString:withNSObjectArray:);
  methods[13].selector = @selector(traceWithOrgSlf4jMarker:withNSString:withJavaLangThrowable:);
  methods[14].selector = @selector(isDebugEnabled);
  methods[15].selector = @selector(debugWithNSString:);
  methods[16].selector = @selector(debugWithNSString:withId:);
  methods[17].selector = @selector(debugWithNSString:withId:withId:);
  methods[18].selector = @selector(debugWithNSString:withNSObjectArray:);
  methods[19].selector = @selector(debugWithNSString:withJavaLangThrowable:);
  methods[20].selector = @selector(isDebugEnabledWithOrgSlf4jMarker:);
  methods[21].selector = @selector(debugWithOrgSlf4jMarker:withNSString:);
  methods[22].selector = @selector(debugWithOrgSlf4jMarker:withNSString:withId:);
  methods[23].selector = @selector(debugWithOrgSlf4jMarker:withNSString:withId:withId:);
  methods[24].selector = @selector(debugWithOrgSlf4jMarker:withNSString:withNSObjectArray:);
  methods[25].selector = @selector(debugWithOrgSlf4jMarker:withNSString:withJavaLangThrowable:);
  methods[26].selector = @selector(isInfoEnabled);
  methods[27].selector = @selector(infoWithNSString:);
  methods[28].selector = @selector(infoWithNSString:withId:);
  methods[29].selector = @selector(infoWithNSString:withId:withId:);
  methods[30].selector = @selector(infoWithNSString:withNSObjectArray:);
  methods[31].selector = @selector(infoWithNSString:withJavaLangThrowable:);
  methods[32].selector = @selector(isInfoEnabledWithOrgSlf4jMarker:);
  methods[33].selector = @selector(infoWithOrgSlf4jMarker:withNSString:);
  methods[34].selector = @selector(infoWithOrgSlf4jMarker:withNSString:withId:);
  methods[35].selector = @selector(infoWithOrgSlf4jMarker:withNSString:withId:withId:);
  methods[36].selector = @selector(infoWithOrgSlf4jMarker:withNSString:withNSObjectArray:);
  methods[37].selector = @selector(infoWithOrgSlf4jMarker:withNSString:withJavaLangThrowable:);
  methods[38].selector = @selector(isWarnEnabled);
  methods[39].selector = @selector(warnWithNSString:);
  methods[40].selector = @selector(warnWithNSString:withId:);
  methods[41].selector = @selector(warnWithNSString:withId:withId:);
  methods[42].selector = @selector(warnWithNSString:withNSObjectArray:);
  methods[43].selector = @selector(warnWithNSString:withJavaLangThrowable:);
  methods[44].selector = @selector(isWarnEnabledWithOrgSlf4jMarker:);
  methods[45].selector = @selector(warnWithOrgSlf4jMarker:withNSString:);
  methods[46].selector = @selector(warnWithOrgSlf4jMarker:withNSString:withId:);
  methods[47].selector = @selector(warnWithOrgSlf4jMarker:withNSString:withId:withId:);
  methods[48].selector = @selector(warnWithOrgSlf4jMarker:withNSString:withNSObjectArray:);
  methods[49].selector = @selector(warnWithOrgSlf4jMarker:withNSString:withJavaLangThrowable:);
  methods[50].selector = @selector(isErrorEnabled);
  methods[51].selector = @selector(errorWithNSString:);
  methods[52].selector = @selector(errorWithNSString:withId:);
  methods[53].selector = @selector(errorWithNSString:withId:withId:);
  methods[54].selector = @selector(errorWithNSString:withNSObjectArray:);
  methods[55].selector = @selector(errorWithNSString:withJavaLangThrowable:);
  methods[56].selector = @selector(isErrorEnabledWithOrgSlf4jMarker:);
  methods[57].selector = @selector(errorWithOrgSlf4jMarker:withNSString:);
  methods[58].selector = @selector(errorWithOrgSlf4jMarker:withNSString:withId:);
  methods[59].selector = @selector(errorWithOrgSlf4jMarker:withNSString:withId:withId:);
  methods[60].selector = @selector(errorWithOrgSlf4jMarker:withNSString:withNSObjectArray:);
  methods[61].selector = @selector(errorWithOrgSlf4jMarker:withNSString:withJavaLangThrowable:);
  methods[62].selector = @selector(isEqual:);
  methods[63].selector = @selector(hash);
  methods[64].selector = @selector(delegate);
  methods[65].selector = @selector(getEventRecordingLogger);
  methods[66].selector = @selector(setDelegateWithOrgSlf4jLogger:);
  methods[67].selector = @selector(isDelegateEventAware);
  methods[68].selector = @selector(logWithOrgSlf4jEventLoggingEvent:);
  methods[69].selector = @selector(isDelegateNull);
  methods[70].selector = @selector(isDelegateNOP);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "_delegate_", "LOrgSlf4jLogger;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "delegateEventAware_", "LJavaLangBoolean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "logMethodCache_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "eventRecodingLogger_", "LOrgSlf4jEventEventRecodingLogger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "eventQueue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x2, -1, -1, 30, -1 },
    { "createdPostInitialization_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaUtilQueue;Z", "(Ljava/lang/String;Ljava/util/Queue<Lorg/slf4j/event/SubstituteLoggingEvent;>;Z)V", "trace", "LNSString;", "LNSString;LNSObject;", "LNSString;LNSObject;LNSObject;", "LNSString;[LNSObject;", "LNSString;LJavaLangThrowable;", "isTraceEnabled", "LOrgSlf4jMarker;", "LOrgSlf4jMarker;LNSString;", "LOrgSlf4jMarker;LNSString;LNSObject;", "LOrgSlf4jMarker;LNSString;LNSObject;LNSObject;", "LOrgSlf4jMarker;LNSString;[LNSObject;", "LOrgSlf4jMarker;LNSString;LJavaLangThrowable;", "debug", "isDebugEnabled", "info", "isInfoEnabled", "warn", "isWarnEnabled", "error", "isErrorEnabled", "equals", "LNSObject;", "hashCode", "setDelegate", "LOrgSlf4jLogger;", "log", "LOrgSlf4jEventLoggingEvent;", "Ljava/util/Queue<Lorg/slf4j/event/SubstituteLoggingEvent;>;" };
  static const J2ObjcClassInfo _OrgSlf4jHelpersSubstituteLogger = { "SubstituteLogger", "org.slf4j.helpers", ptrTable, methods, fields, 7, 0x1, 71, 7, -1, -1, -1, -1, -1 };
  return &_OrgSlf4jHelpersSubstituteLogger;
}

@end

void OrgSlf4jHelpersSubstituteLogger_initWithNSString_withJavaUtilQueue_withBoolean_(OrgSlf4jHelpersSubstituteLogger *self, NSString *name, id<JavaUtilQueue> eventQueue, jboolean createdPostInitialization) {
  NSObject_init(self);
  self->name_ = name;
  self->eventQueue_ = eventQueue;
  self->createdPostInitialization_ = createdPostInitialization;
}

OrgSlf4jHelpersSubstituteLogger *new_OrgSlf4jHelpersSubstituteLogger_initWithNSString_withJavaUtilQueue_withBoolean_(NSString *name, id<JavaUtilQueue> eventQueue, jboolean createdPostInitialization) {
  J2OBJC_NEW_IMPL(OrgSlf4jHelpersSubstituteLogger, initWithNSString_withJavaUtilQueue_withBoolean_, name, eventQueue, createdPostInitialization)
}

OrgSlf4jHelpersSubstituteLogger *create_OrgSlf4jHelpersSubstituteLogger_initWithNSString_withJavaUtilQueue_withBoolean_(NSString *name, id<JavaUtilQueue> eventQueue, jboolean createdPostInitialization) {
  J2OBJC_CREATE_IMPL(OrgSlf4jHelpersSubstituteLogger, initWithNSString_withJavaUtilQueue_withBoolean_, name, eventQueue, createdPostInitialization)
}

id<OrgSlf4jLogger> OrgSlf4jHelpersSubstituteLogger_getEventRecordingLogger(OrgSlf4jHelpersSubstituteLogger *self) {
  if (self->eventRecodingLogger_ == nil) {
    self->eventRecodingLogger_ = new_OrgSlf4jEventEventRecodingLogger_initWithOrgSlf4jHelpersSubstituteLogger_withJavaUtilQueue_(self, self->eventQueue_);
  }
  return self->eventRecodingLogger_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSlf4jHelpersSubstituteLogger)
