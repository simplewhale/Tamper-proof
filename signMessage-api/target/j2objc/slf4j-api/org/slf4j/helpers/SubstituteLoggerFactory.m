//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/slf4j-api/org/slf4j/helpers/SubstituteLoggerFactory.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "org/slf4j/Logger.h"
#include "org/slf4j/helpers/SubstituteLogger.h"
#include "org/slf4j/helpers/SubstituteLoggerFactory.h"

@implementation OrgSlf4jHelpersSubstituteLoggerFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSlf4jHelpersSubstituteLoggerFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<OrgSlf4jLogger>)getLoggerWithNSString:(NSString *)name {
  @synchronized(self) {
    OrgSlf4jHelpersSubstituteLogger *logger = [((id<JavaUtilMap>) nil_chk(loggers_)) getWithId:name];
    if (logger == nil) {
      logger = new_OrgSlf4jHelpersSubstituteLogger_initWithNSString_withJavaUtilQueue_withBoolean_(name, eventQueue_, postInitialization_);
      (void) [loggers_ putWithId:name withId:logger];
    }
    return logger;
  }
}

- (id<JavaUtilList>)getLoggerNames {
  return new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(loggers_)) keySet]);
}

- (id<JavaUtilList>)getLoggers {
  return new_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(loggers_)) values]);
}

- (JavaUtilConcurrentLinkedBlockingQueue *)getEventQueue {
  return eventQueue_;
}

- (void)postInitialization {
  postInitialization_ = true;
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(loggers_)) clear];
  [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(eventQueue_)) clear];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSlf4jLogger;", 0x21, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LJavaUtilConcurrentLinkedBlockingQueue;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getLoggerWithNSString:);
  methods[2].selector = @selector(getLoggerNames);
  methods[3].selector = @selector(getLoggers);
  methods[4].selector = @selector(getEventQueue);
  methods[5].selector = @selector(postInitialization);
  methods[6].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "postInitialization_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "loggers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "eventQueue_", "LJavaUtilConcurrentLinkedBlockingQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "getLogger", "LNSString;", "()Ljava/util/List<Ljava/lang/String;>;", "()Ljava/util/List<Lorg/slf4j/helpers/SubstituteLogger;>;", "()Ljava/util/concurrent/LinkedBlockingQueue<Lorg/slf4j/event/SubstituteLoggingEvent;>;", "Ljava/util/Map<Ljava/lang/String;Lorg/slf4j/helpers/SubstituteLogger;>;", "Ljava/util/concurrent/LinkedBlockingQueue<Lorg/slf4j/event/SubstituteLoggingEvent;>;" };
  static const J2ObjcClassInfo _OrgSlf4jHelpersSubstituteLoggerFactory = { "SubstituteLoggerFactory", "org.slf4j.helpers", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_OrgSlf4jHelpersSubstituteLoggerFactory;
}

@end

void OrgSlf4jHelpersSubstituteLoggerFactory_init(OrgSlf4jHelpersSubstituteLoggerFactory *self) {
  NSObject_init(self);
  self->postInitialization_ = false;
  self->loggers_ = new_JavaUtilHashMap_init();
  self->eventQueue_ = new_JavaUtilConcurrentLinkedBlockingQueue_init();
}

OrgSlf4jHelpersSubstituteLoggerFactory *new_OrgSlf4jHelpersSubstituteLoggerFactory_init() {
  J2OBJC_NEW_IMPL(OrgSlf4jHelpersSubstituteLoggerFactory, init)
}

OrgSlf4jHelpersSubstituteLoggerFactory *create_OrgSlf4jHelpersSubstituteLoggerFactory_init() {
  J2OBJC_CREATE_IMPL(OrgSlf4jHelpersSubstituteLoggerFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSlf4jHelpersSubstituteLoggerFactory)
