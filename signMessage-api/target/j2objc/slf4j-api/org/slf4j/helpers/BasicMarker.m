//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/slf4j-api/org/slf4j/helpers/BasicMarker.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "org/slf4j/Marker.h"
#include "org/slf4j/helpers/BasicMarker.h"

@interface OrgSlf4jHelpersBasicMarker () {
 @public
  NSString *name_;
  id<JavaUtilList> referenceList_;
}

@end

J2OBJC_FIELD_SETTER(OrgSlf4jHelpersBasicMarker, name_, NSString *)
J2OBJC_FIELD_SETTER(OrgSlf4jHelpersBasicMarker, referenceList_, id<JavaUtilList>)

inline jlong OrgSlf4jHelpersBasicMarker_get_serialVersionUID(void);
#define OrgSlf4jHelpersBasicMarker_serialVersionUID -2849567615646933777LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgSlf4jHelpersBasicMarker, serialVersionUID, jlong)

inline NSString *OrgSlf4jHelpersBasicMarker_get_OPEN(void);
inline NSString *OrgSlf4jHelpersBasicMarker_set_OPEN(NSString *value);
static NSString *OrgSlf4jHelpersBasicMarker_OPEN = @"[ ";
J2OBJC_STATIC_FIELD_OBJ(OrgSlf4jHelpersBasicMarker, OPEN, NSString *)

inline NSString *OrgSlf4jHelpersBasicMarker_get_CLOSE(void);
inline NSString *OrgSlf4jHelpersBasicMarker_set_CLOSE(NSString *value);
static NSString *OrgSlf4jHelpersBasicMarker_CLOSE = @" ]";
J2OBJC_STATIC_FIELD_OBJ(OrgSlf4jHelpersBasicMarker, CLOSE, NSString *)

inline NSString *OrgSlf4jHelpersBasicMarker_get_SEP(void);
inline NSString *OrgSlf4jHelpersBasicMarker_set_SEP(NSString *value);
static NSString *OrgSlf4jHelpersBasicMarker_SEP = @", ";
J2OBJC_STATIC_FIELD_OBJ(OrgSlf4jHelpersBasicMarker, SEP, NSString *)

@implementation OrgSlf4jHelpersBasicMarker

- (instancetype)initWithNSString:(NSString *)name {
  OrgSlf4jHelpersBasicMarker_initWithNSString_(self, name);
  return self;
}

- (NSString *)getName {
  return name_;
}

- (void)addWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)reference {
  if (reference == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A null value cannot be added to a Marker as reference.");
  }
  if ([self containsWithOrgSlf4jMarker:reference]) {
    return;
  }
  else if ([reference containsWithOrgSlf4jMarker:self]) {
    return;
  }
  else {
    [((id<JavaUtilList>) nil_chk(referenceList_)) addWithId:reference];
  }
}

- (jboolean)hasReferences {
  return ([((id<JavaUtilList>) nil_chk(referenceList_)) size] > 0);
}

- (jboolean)hasChildren {
  return [self hasReferences];
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilList>) nil_chk(referenceList_)) iterator];
}

- (jboolean)removeWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)referenceToRemove {
  return [((id<JavaUtilList>) nil_chk(referenceList_)) removeWithId:referenceToRemove];
}

- (jboolean)containsWithOrgSlf4jMarker:(id<OrgSlf4jMarker>)other {
  if (other == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Other cannot be null");
  }
  if ([self isEqual:other]) {
    return true;
  }
  if ([self hasReferences]) {
    for (id<OrgSlf4jMarker> __strong ref in nil_chk(referenceList_)) {
      if ([((id<OrgSlf4jMarker>) nil_chk(ref)) containsWithOrgSlf4jMarker:other]) {
        return true;
      }
    }
  }
  return false;
}

- (jboolean)containsWithNSString:(NSString *)name {
  if (name == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Other cannot be null");
  }
  if ([((NSString *) nil_chk(self->name_)) isEqual:name]) {
    return true;
  }
  if ([self hasReferences]) {
    for (id<OrgSlf4jMarker> __strong ref in nil_chk(referenceList_)) {
      if ([((id<OrgSlf4jMarker>) nil_chk(ref)) containsWithNSString:name]) {
        return true;
      }
    }
  }
  return false;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) return true;
  if (obj == nil) return false;
  if (!([OrgSlf4jMarker_class_() isInstance:obj])) return false;
  id<OrgSlf4jMarker> other = (id<OrgSlf4jMarker>) cast_check(obj, OrgSlf4jMarker_class_());
  return [((NSString *) nil_chk(name_)) isEqual:[other getName]];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(name_)) hash]);
}

- (NSString *)description {
  if (![self hasReferences]) {
    return [self getName];
  }
  id<JavaUtilIterator> it = [self iterator];
  id<OrgSlf4jMarker> reference;
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_initWithNSString_([self getName]);
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:' '])) appendWithNSString:OrgSlf4jHelpersBasicMarker_OPEN];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    reference = [it next];
    (void) [sb appendWithNSString:[((id<OrgSlf4jMarker>) nil_chk(reference)) getName]];
    if ([it hasNext]) {
      (void) [sb appendWithNSString:OrgSlf4jHelpersBasicMarker_SEP];
    }
  }
  (void) [sb appendWithNSString:OrgSlf4jHelpersBasicMarker_CLOSE];
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(addWithOrgSlf4jMarker:);
  methods[3].selector = @selector(hasReferences);
  methods[4].selector = @selector(hasChildren);
  methods[5].selector = @selector(iterator);
  methods[6].selector = @selector(removeWithOrgSlf4jMarker:);
  methods[7].selector = @selector(containsWithOrgSlf4jMarker:);
  methods[8].selector = @selector(containsWithNSString:);
  methods[9].selector = @selector(isEqual:);
  methods[10].selector = @selector(hash);
  methods[11].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgSlf4jHelpersBasicMarker_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "referenceList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "OPEN", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 11, -1, -1 },
    { "CLOSE", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
    { "SEP", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "add", "LOrgSlf4jMarker;", "()Ljava/util/Iterator<Lorg/slf4j/Marker;>;", "remove", "contains", "equals", "LNSObject;", "hashCode", "toString", "Ljava/util/List<Lorg/slf4j/Marker;>;", &OrgSlf4jHelpersBasicMarker_OPEN, &OrgSlf4jHelpersBasicMarker_CLOSE, &OrgSlf4jHelpersBasicMarker_SEP };
  static const J2ObjcClassInfo _OrgSlf4jHelpersBasicMarker = { "BasicMarker", "org.slf4j.helpers", ptrTable, methods, fields, 7, 0x1, 12, 6, -1, -1, -1, -1, -1 };
  return &_OrgSlf4jHelpersBasicMarker;
}

@end

void OrgSlf4jHelpersBasicMarker_initWithNSString_(OrgSlf4jHelpersBasicMarker *self, NSString *name) {
  NSObject_init(self);
  self->referenceList_ = new_JavaUtilConcurrentCopyOnWriteArrayList_init();
  if (name == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A marker name cannot be null");
  }
  self->name_ = name;
}

OrgSlf4jHelpersBasicMarker *new_OrgSlf4jHelpersBasicMarker_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(OrgSlf4jHelpersBasicMarker, initWithNSString_, name)
}

OrgSlf4jHelpersBasicMarker *create_OrgSlf4jHelpersBasicMarker_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(OrgSlf4jHelpersBasicMarker, initWithNSString_, name)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSlf4jHelpersBasicMarker)
