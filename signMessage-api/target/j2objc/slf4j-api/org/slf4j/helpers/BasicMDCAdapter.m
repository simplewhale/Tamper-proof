//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/slf4j-api/org/slf4j/helpers/BasicMDCAdapter.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InheritableThreadLocal.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/slf4j/helpers/BasicMDCAdapter.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgSlf4jHelpersBasicMDCAdapter () {
 @public
  JavaLangInheritableThreadLocal *inheritableThreadLocal_;
}

@end

J2OBJC_FIELD_SETTER(OrgSlf4jHelpersBasicMDCAdapter, inheritableThreadLocal_, JavaLangInheritableThreadLocal *)

@interface OrgSlf4jHelpersBasicMDCAdapter_1 : JavaLangInheritableThreadLocal

- (instancetype)init;

- (id<JavaUtilMap>)childValueWithId:(id<JavaUtilMap>)parentValue;

- (id<JavaUtilMap>)get;

- (id<JavaUtilMap>)initialValue OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSlf4jHelpersBasicMDCAdapter_1)

__attribute__((unused)) static void OrgSlf4jHelpersBasicMDCAdapter_1_init(OrgSlf4jHelpersBasicMDCAdapter_1 *self);

__attribute__((unused)) static OrgSlf4jHelpersBasicMDCAdapter_1 *new_OrgSlf4jHelpersBasicMDCAdapter_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSlf4jHelpersBasicMDCAdapter_1 *create_OrgSlf4jHelpersBasicMDCAdapter_1_init(void);

@implementation OrgSlf4jHelpersBasicMDCAdapter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSlf4jHelpersBasicMDCAdapter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)putWithNSString:(NSString *)key
           withNSString:(NSString *)val {
  if (key == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"key cannot be null");
  }
  id<JavaUtilMap> map = [((JavaLangInheritableThreadLocal *) nil_chk(inheritableThreadLocal_)) get];
  if (map == nil) {
    map = new_JavaUtilHashMap_init();
    [((JavaLangInheritableThreadLocal *) nil_chk(inheritableThreadLocal_)) setWithId:map];
  }
  (void) [map putWithId:key withId:val];
}

- (NSString *)getWithNSString:(NSString *)key {
  id<JavaUtilMap> map = [((JavaLangInheritableThreadLocal *) nil_chk(inheritableThreadLocal_)) get];
  if ((map != nil) && (key != nil)) {
    return [((id<JavaUtilMap>) nil_chk(map)) getWithId:key];
  }
  else {
    return nil;
  }
}

- (void)removeWithNSString:(NSString *)key {
  id<JavaUtilMap> map = [((JavaLangInheritableThreadLocal *) nil_chk(inheritableThreadLocal_)) get];
  if (map != nil) {
    (void) [map removeWithId:key];
  }
}

- (void)clear {
  id<JavaUtilMap> map = [((JavaLangInheritableThreadLocal *) nil_chk(inheritableThreadLocal_)) get];
  if (map != nil) {
    [map clear];
    [((JavaLangInheritableThreadLocal *) nil_chk(inheritableThreadLocal_)) remove];
  }
}

- (id<JavaUtilSet>)getKeys {
  id<JavaUtilMap> map = [((JavaLangInheritableThreadLocal *) nil_chk(inheritableThreadLocal_)) get];
  if (map != nil) {
    return [map keySet];
  }
  else {
    return nil;
  }
}

- (id<JavaUtilMap>)getCopyOfContextMap {
  id<JavaUtilMap> oldMap = [((JavaLangInheritableThreadLocal *) nil_chk(inheritableThreadLocal_)) get];
  if (oldMap != nil) {
    return new_JavaUtilHashMap_initWithJavaUtilMap_(oldMap);
  }
  else {
    return nil;
  }
}

- (void)setContextMapWithJavaUtilMap:(id<JavaUtilMap>)contextMap {
  [((JavaLangInheritableThreadLocal *) nil_chk(inheritableThreadLocal_)) setWithId:new_JavaUtilHashMap_initWithJavaUtilMap_(contextMap)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(putWithNSString:withNSString:);
  methods[2].selector = @selector(getWithNSString:);
  methods[3].selector = @selector(removeWithNSString:);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(getKeys);
  methods[6].selector = @selector(getCopyOfContextMap);
  methods[7].selector = @selector(setContextMapWithJavaUtilMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "inheritableThreadLocal_", "LJavaLangInheritableThreadLocal;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "put", "LNSString;LNSString;", "get", "LNSString;", "remove", "()Ljava/util/Set<Ljava/lang/String;>;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "setContextMap", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "Ljava/lang/InheritableThreadLocal<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _OrgSlf4jHelpersBasicMDCAdapter = { "BasicMDCAdapter", "org.slf4j.helpers", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_OrgSlf4jHelpersBasicMDCAdapter;
}

@end

void OrgSlf4jHelpersBasicMDCAdapter_init(OrgSlf4jHelpersBasicMDCAdapter *self) {
  NSObject_init(self);
  self->inheritableThreadLocal_ = new_OrgSlf4jHelpersBasicMDCAdapter_1_init();
}

OrgSlf4jHelpersBasicMDCAdapter *new_OrgSlf4jHelpersBasicMDCAdapter_init() {
  J2OBJC_NEW_IMPL(OrgSlf4jHelpersBasicMDCAdapter, init)
}

OrgSlf4jHelpersBasicMDCAdapter *create_OrgSlf4jHelpersBasicMDCAdapter_init() {
  J2OBJC_CREATE_IMPL(OrgSlf4jHelpersBasicMDCAdapter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSlf4jHelpersBasicMDCAdapter)

@implementation OrgSlf4jHelpersBasicMDCAdapter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgSlf4jHelpersBasicMDCAdapter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)childValueWithId:(id<JavaUtilMap>)parentValue {
  if (parentValue == nil) {
    return nil;
  }
  return new_JavaUtilHashMap_initWithJavaUtilMap_(parentValue);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x4, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(childValueWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "childValue", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LOrgSlf4jHelpersBasicMDCAdapter;", "Ljava/lang/InheritableThreadLocal<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;" };
  static const J2ObjcClassInfo _OrgSlf4jHelpersBasicMDCAdapter_1 = { "", "org.slf4j.helpers", ptrTable, methods, NULL, 7, 0x8010, 2, 0, 3, -1, -1, 4, -1 };
  return &_OrgSlf4jHelpersBasicMDCAdapter_1;
}

@end

void OrgSlf4jHelpersBasicMDCAdapter_1_init(OrgSlf4jHelpersBasicMDCAdapter_1 *self) {
  JavaLangInheritableThreadLocal_init(self);
}

OrgSlf4jHelpersBasicMDCAdapter_1 *new_OrgSlf4jHelpersBasicMDCAdapter_1_init() {
  J2OBJC_NEW_IMPL(OrgSlf4jHelpersBasicMDCAdapter_1, init)
}

OrgSlf4jHelpersBasicMDCAdapter_1 *create_OrgSlf4jHelpersBasicMDCAdapter_1_init() {
  J2OBJC_CREATE_IMPL(OrgSlf4jHelpersBasicMDCAdapter_1, init)
}
