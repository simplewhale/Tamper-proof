//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/commons-codec/org/apache/commons/codec/binary/StringUtils.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/IllegalStateException.h"
#include "org/apache/commons/codec/CharEncoding.h"
#include "org/apache/commons/codec/binary/StringUtils.h"

@interface OrgApacheCommonsCodecBinaryStringUtils ()

+ (JavaLangIllegalStateException *)newIllegalStateExceptionWithNSString:(NSString *)charsetName
                                 withJavaIoUnsupportedEncodingException:(JavaIoUnsupportedEncodingException *)e OBJC_METHOD_FAMILY_NONE;

@end

__attribute__((unused)) static JavaLangIllegalStateException *OrgApacheCommonsCodecBinaryStringUtils_newIllegalStateExceptionWithNSString_withJavaIoUnsupportedEncodingException_(NSString *charsetName, JavaIoUnsupportedEncodingException *e);

@implementation OrgApacheCommonsCodecBinaryStringUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecBinaryStringUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)getBytesIso8859_1WithNSString:(NSString *)string {
  return OrgApacheCommonsCodecBinaryStringUtils_getBytesIso8859_1WithNSString_(string);
}

+ (IOSByteArray *)getBytesUsAsciiWithNSString:(NSString *)string {
  return OrgApacheCommonsCodecBinaryStringUtils_getBytesUsAsciiWithNSString_(string);
}

+ (IOSByteArray *)getBytesUtf16WithNSString:(NSString *)string {
  return OrgApacheCommonsCodecBinaryStringUtils_getBytesUtf16WithNSString_(string);
}

+ (IOSByteArray *)getBytesUtf16BeWithNSString:(NSString *)string {
  return OrgApacheCommonsCodecBinaryStringUtils_getBytesUtf16BeWithNSString_(string);
}

+ (IOSByteArray *)getBytesUtf16LeWithNSString:(NSString *)string {
  return OrgApacheCommonsCodecBinaryStringUtils_getBytesUtf16LeWithNSString_(string);
}

+ (IOSByteArray *)getBytesUtf8WithNSString:(NSString *)string {
  return OrgApacheCommonsCodecBinaryStringUtils_getBytesUtf8WithNSString_(string);
}

+ (IOSByteArray *)getBytesUncheckedWithNSString:(NSString *)string
                                   withNSString:(NSString *)charsetName {
  return OrgApacheCommonsCodecBinaryStringUtils_getBytesUncheckedWithNSString_withNSString_(string, charsetName);
}

+ (JavaLangIllegalStateException *)newIllegalStateExceptionWithNSString:(NSString *)charsetName
                                 withJavaIoUnsupportedEncodingException:(JavaIoUnsupportedEncodingException *)e {
  return OrgApacheCommonsCodecBinaryStringUtils_newIllegalStateExceptionWithNSString_withJavaIoUnsupportedEncodingException_(charsetName, e);
}

+ (NSString *)newStringWithByteArray:(IOSByteArray *)bytes
                        withNSString:(NSString *)charsetName {
  return OrgApacheCommonsCodecBinaryStringUtils_newStringWithByteArray_withNSString_(bytes, charsetName);
}

+ (NSString *)newStringIso8859_1WithByteArray:(IOSByteArray *)bytes {
  return OrgApacheCommonsCodecBinaryStringUtils_newStringIso8859_1WithByteArray_(bytes);
}

+ (NSString *)newStringUsAsciiWithByteArray:(IOSByteArray *)bytes {
  return OrgApacheCommonsCodecBinaryStringUtils_newStringUsAsciiWithByteArray_(bytes);
}

+ (NSString *)newStringUtf16WithByteArray:(IOSByteArray *)bytes {
  return OrgApacheCommonsCodecBinaryStringUtils_newStringUtf16WithByteArray_(bytes);
}

+ (NSString *)newStringUtf16BeWithByteArray:(IOSByteArray *)bytes {
  return OrgApacheCommonsCodecBinaryStringUtils_newStringUtf16BeWithByteArray_(bytes);
}

+ (NSString *)newStringUtf16LeWithByteArray:(IOSByteArray *)bytes {
  return OrgApacheCommonsCodecBinaryStringUtils_newStringUtf16LeWithByteArray_(bytes);
}

+ (NSString *)newStringUtf8WithByteArray:(IOSByteArray *)bytes {
  return OrgApacheCommonsCodecBinaryStringUtils_newStringUtf8WithByteArray_(bytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 6, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaLangIllegalStateException;", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 15, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 16, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 17, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 18, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 19, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getBytesIso8859_1WithNSString:);
  methods[2].selector = @selector(getBytesUsAsciiWithNSString:);
  methods[3].selector = @selector(getBytesUtf16WithNSString:);
  methods[4].selector = @selector(getBytesUtf16BeWithNSString:);
  methods[5].selector = @selector(getBytesUtf16LeWithNSString:);
  methods[6].selector = @selector(getBytesUtf8WithNSString:);
  methods[7].selector = @selector(getBytesUncheckedWithNSString:withNSString:);
  methods[8].selector = @selector(newIllegalStateExceptionWithNSString:withJavaIoUnsupportedEncodingException:);
  methods[9].selector = @selector(newStringWithByteArray:withNSString:);
  methods[10].selector = @selector(newStringIso8859_1WithByteArray:);
  methods[11].selector = @selector(newStringUsAsciiWithByteArray:);
  methods[12].selector = @selector(newStringUtf16WithByteArray:);
  methods[13].selector = @selector(newStringUtf16BeWithByteArray:);
  methods[14].selector = @selector(newStringUtf16LeWithByteArray:);
  methods[15].selector = @selector(newStringUtf8WithByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getBytesIso8859_1", "LNSString;", "getBytesUsAscii", "getBytesUtf16", "getBytesUtf16Be", "getBytesUtf16Le", "getBytesUtf8", "getBytesUnchecked", "LNSString;LNSString;", "newIllegalStateException", "LNSString;LJavaIoUnsupportedEncodingException;", "newString", "[BLNSString;", "newStringIso8859_1", "[B", "newStringUsAscii", "newStringUtf16", "newStringUtf16Be", "newStringUtf16Le", "newStringUtf8" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecBinaryStringUtils = { "StringUtils", "org.apache.commons.codec.binary", ptrTable, methods, NULL, 7, 0x1, 16, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecBinaryStringUtils;
}

@end

void OrgApacheCommonsCodecBinaryStringUtils_init(OrgApacheCommonsCodecBinaryStringUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsCodecBinaryStringUtils *new_OrgApacheCommonsCodecBinaryStringUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecBinaryStringUtils, init)
}

OrgApacheCommonsCodecBinaryStringUtils *create_OrgApacheCommonsCodecBinaryStringUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecBinaryStringUtils, init)
}

IOSByteArray *OrgApacheCommonsCodecBinaryStringUtils_getBytesIso8859_1WithNSString_(NSString *string) {
  OrgApacheCommonsCodecBinaryStringUtils_initialize();
  return OrgApacheCommonsCodecBinaryStringUtils_getBytesUncheckedWithNSString_withNSString_(string, OrgApacheCommonsCodecCharEncoding_ISO_8859_1);
}

IOSByteArray *OrgApacheCommonsCodecBinaryStringUtils_getBytesUsAsciiWithNSString_(NSString *string) {
  OrgApacheCommonsCodecBinaryStringUtils_initialize();
  return OrgApacheCommonsCodecBinaryStringUtils_getBytesUncheckedWithNSString_withNSString_(string, OrgApacheCommonsCodecCharEncoding_US_ASCII);
}

IOSByteArray *OrgApacheCommonsCodecBinaryStringUtils_getBytesUtf16WithNSString_(NSString *string) {
  OrgApacheCommonsCodecBinaryStringUtils_initialize();
  return OrgApacheCommonsCodecBinaryStringUtils_getBytesUncheckedWithNSString_withNSString_(string, OrgApacheCommonsCodecCharEncoding_UTF_16);
}

IOSByteArray *OrgApacheCommonsCodecBinaryStringUtils_getBytesUtf16BeWithNSString_(NSString *string) {
  OrgApacheCommonsCodecBinaryStringUtils_initialize();
  return OrgApacheCommonsCodecBinaryStringUtils_getBytesUncheckedWithNSString_withNSString_(string, OrgApacheCommonsCodecCharEncoding_UTF_16BE);
}

IOSByteArray *OrgApacheCommonsCodecBinaryStringUtils_getBytesUtf16LeWithNSString_(NSString *string) {
  OrgApacheCommonsCodecBinaryStringUtils_initialize();
  return OrgApacheCommonsCodecBinaryStringUtils_getBytesUncheckedWithNSString_withNSString_(string, OrgApacheCommonsCodecCharEncoding_UTF_16LE);
}

IOSByteArray *OrgApacheCommonsCodecBinaryStringUtils_getBytesUtf8WithNSString_(NSString *string) {
  OrgApacheCommonsCodecBinaryStringUtils_initialize();
  return OrgApacheCommonsCodecBinaryStringUtils_getBytesUncheckedWithNSString_withNSString_(string, OrgApacheCommonsCodecCharEncoding_UTF_8);
}

IOSByteArray *OrgApacheCommonsCodecBinaryStringUtils_getBytesUncheckedWithNSString_withNSString_(NSString *string, NSString *charsetName) {
  OrgApacheCommonsCodecBinaryStringUtils_initialize();
  if (string == nil) {
    return nil;
  }
  @try {
    return [string java_getBytesWithCharsetName:charsetName];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw nil_chk(OrgApacheCommonsCodecBinaryStringUtils_newIllegalStateExceptionWithNSString_withJavaIoUnsupportedEncodingException_(charsetName, e));
  }
}

JavaLangIllegalStateException *OrgApacheCommonsCodecBinaryStringUtils_newIllegalStateExceptionWithNSString_withJavaIoUnsupportedEncodingException_(NSString *charsetName, JavaIoUnsupportedEncodingException *e) {
  OrgApacheCommonsCodecBinaryStringUtils_initialize();
  return new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$@", charsetName, @": ", e));
}

NSString *OrgApacheCommonsCodecBinaryStringUtils_newStringWithByteArray_withNSString_(IOSByteArray *bytes, NSString *charsetName) {
  OrgApacheCommonsCodecBinaryStringUtils_initialize();
  if (bytes == nil) {
    return nil;
  }
  @try {
    return [NSString java_stringWithBytes:bytes charsetName:charsetName];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw nil_chk(OrgApacheCommonsCodecBinaryStringUtils_newIllegalStateExceptionWithNSString_withJavaIoUnsupportedEncodingException_(charsetName, e));
  }
}

NSString *OrgApacheCommonsCodecBinaryStringUtils_newStringIso8859_1WithByteArray_(IOSByteArray *bytes) {
  OrgApacheCommonsCodecBinaryStringUtils_initialize();
  return OrgApacheCommonsCodecBinaryStringUtils_newStringWithByteArray_withNSString_(bytes, OrgApacheCommonsCodecCharEncoding_ISO_8859_1);
}

NSString *OrgApacheCommonsCodecBinaryStringUtils_newStringUsAsciiWithByteArray_(IOSByteArray *bytes) {
  OrgApacheCommonsCodecBinaryStringUtils_initialize();
  return OrgApacheCommonsCodecBinaryStringUtils_newStringWithByteArray_withNSString_(bytes, OrgApacheCommonsCodecCharEncoding_US_ASCII);
}

NSString *OrgApacheCommonsCodecBinaryStringUtils_newStringUtf16WithByteArray_(IOSByteArray *bytes) {
  OrgApacheCommonsCodecBinaryStringUtils_initialize();
  return OrgApacheCommonsCodecBinaryStringUtils_newStringWithByteArray_withNSString_(bytes, OrgApacheCommonsCodecCharEncoding_UTF_16);
}

NSString *OrgApacheCommonsCodecBinaryStringUtils_newStringUtf16BeWithByteArray_(IOSByteArray *bytes) {
  OrgApacheCommonsCodecBinaryStringUtils_initialize();
  return OrgApacheCommonsCodecBinaryStringUtils_newStringWithByteArray_withNSString_(bytes, OrgApacheCommonsCodecCharEncoding_UTF_16BE);
}

NSString *OrgApacheCommonsCodecBinaryStringUtils_newStringUtf16LeWithByteArray_(IOSByteArray *bytes) {
  OrgApacheCommonsCodecBinaryStringUtils_initialize();
  return OrgApacheCommonsCodecBinaryStringUtils_newStringWithByteArray_withNSString_(bytes, OrgApacheCommonsCodecCharEncoding_UTF_16LE);
}

NSString *OrgApacheCommonsCodecBinaryStringUtils_newStringUtf8WithByteArray_(IOSByteArray *bytes) {
  OrgApacheCommonsCodecBinaryStringUtils_initialize();
  return OrgApacheCommonsCodecBinaryStringUtils_newStringWithByteArray_withNSString_(bytes, OrgApacheCommonsCodecCharEncoding_UTF_8);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecBinaryStringUtils)
