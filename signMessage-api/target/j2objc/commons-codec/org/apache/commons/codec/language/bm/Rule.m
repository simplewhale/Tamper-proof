//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/commons-codec/org/apache/commons/codec/language/bm/Rule.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/CharSequence.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Iterable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/EnumMap.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Scanner.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/commons/codec/language/bm/Languages.h"
#include "org/apache/commons/codec/language/bm/NameType.h"
#include "org/apache/commons/codec/language/bm/ResourceConstants.h"
#include "org/apache/commons/codec/language/bm/Rule.h"
#include "org/apache/commons/codec/language/bm/RuleType.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheCommonsCodecLanguageBmRule () {
 @public
  id<OrgApacheCommonsCodecLanguageBmRule_RPattern> lContext_;
  NSString *pattern_;
  id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr> phoneme_;
  id<OrgApacheCommonsCodecLanguageBmRule_RPattern> rContext_;
}

+ (jboolean)containsWithJavaLangCharSequence:(id<JavaLangCharSequence>)chars
                                    withChar:(jchar)input;

+ (NSString *)createResourceNameWithOrgApacheCommonsCodecLanguageBmNameType:(OrgApacheCommonsCodecLanguageBmNameType *)nameType
                                withOrgApacheCommonsCodecLanguageBmRuleType:(OrgApacheCommonsCodecLanguageBmRuleType *)rt
                                                               withNSString:(NSString *)lang;

+ (JavaUtilScanner *)createScannerWithOrgApacheCommonsCodecLanguageBmNameType:(OrgApacheCommonsCodecLanguageBmNameType *)nameType
                                  withOrgApacheCommonsCodecLanguageBmRuleType:(OrgApacheCommonsCodecLanguageBmRuleType *)rt
                                                                 withNSString:(NSString *)lang;

+ (JavaUtilScanner *)createScannerWithNSString:(NSString *)lang;

+ (jboolean)endsWithWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)suffix;

+ (OrgApacheCommonsCodecLanguageBmRule_Phoneme *)parsePhonemeWithNSString:(NSString *)ph;

+ (id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr>)parsePhonemeExprWithNSString:(NSString *)ph;

+ (id<JavaUtilList>)parseRulesWithJavaUtilScanner:(JavaUtilScanner *)scanner
                                     withNSString:(NSString *)location;

+ (id<OrgApacheCommonsCodecLanguageBmRule_RPattern>)patternWithNSString:(NSString *)regex;

+ (jboolean)startsWithWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                      withJavaLangCharSequence:(id<JavaLangCharSequence>)prefix;

+ (NSString *)stripQuotesWithNSString:(NSString *)str;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmRule, lContext_, id<OrgApacheCommonsCodecLanguageBmRule_RPattern>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmRule, pattern_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmRule, phoneme_, id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmRule, rContext_, id<OrgApacheCommonsCodecLanguageBmRule_RPattern>)

inline NSString *OrgApacheCommonsCodecLanguageBmRule_get_DOUBLE_QUOTE(void);
static NSString *OrgApacheCommonsCodecLanguageBmRule_DOUBLE_QUOTE = @"\"";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageBmRule, DOUBLE_QUOTE, NSString *)

inline NSString *OrgApacheCommonsCodecLanguageBmRule_get_HASH_INCLUDE(void);
static NSString *OrgApacheCommonsCodecLanguageBmRule_HASH_INCLUDE = @"#include";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageBmRule, HASH_INCLUDE, NSString *)

inline id<JavaUtilMap> OrgApacheCommonsCodecLanguageBmRule_get_RULES(void);
static id<JavaUtilMap> OrgApacheCommonsCodecLanguageBmRule_RULES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageBmRule, RULES, id<JavaUtilMap>)

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageBmRule_containsWithJavaLangCharSequence_withChar_(id<JavaLangCharSequence> chars, jchar input);

__attribute__((unused)) static NSString *OrgApacheCommonsCodecLanguageBmRule_createResourceNameWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(OrgApacheCommonsCodecLanguageBmNameType *nameType, OrgApacheCommonsCodecLanguageBmRuleType *rt, NSString *lang);

__attribute__((unused)) static JavaUtilScanner *OrgApacheCommonsCodecLanguageBmRule_createScannerWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(OrgApacheCommonsCodecLanguageBmNameType *nameType, OrgApacheCommonsCodecLanguageBmRuleType *rt, NSString *lang);

__attribute__((unused)) static JavaUtilScanner *OrgApacheCommonsCodecLanguageBmRule_createScannerWithNSString_(NSString *lang);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageBmRule_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> input, id<JavaLangCharSequence> suffix);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_Phoneme *OrgApacheCommonsCodecLanguageBmRule_parsePhonemeWithNSString_(NSString *ph);

__attribute__((unused)) static id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr> OrgApacheCommonsCodecLanguageBmRule_parsePhonemeExprWithNSString_(NSString *ph);

__attribute__((unused)) static id<JavaUtilList> OrgApacheCommonsCodecLanguageBmRule_parseRulesWithJavaUtilScanner_withNSString_(JavaUtilScanner *scanner, NSString *location);

__attribute__((unused)) static id<OrgApacheCommonsCodecLanguageBmRule_RPattern> OrgApacheCommonsCodecLanguageBmRule_patternWithNSString_(NSString *regex);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageBmRule_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> input, id<JavaLangCharSequence> prefix);

__attribute__((unused)) static NSString *OrgApacheCommonsCodecLanguageBmRule_stripQuotesWithNSString_(NSString *str);

@interface OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr : NSObject

@end

@interface OrgApacheCommonsCodecLanguageBmRule_Phoneme () {
 @public
  id<JavaLangCharSequence> phonemeText_;
  OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *languages_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmRule_Phoneme, phonemeText_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmRule_Phoneme, languages_, OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)

@interface OrgApacheCommonsCodecLanguageBmRule_Phoneme_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(OrgApacheCommonsCodecLanguageBmRule_Phoneme *)o1
               withId:(OrgApacheCommonsCodecLanguageBmRule_Phoneme *)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmRule_Phoneme_1)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmRule_Phoneme_1_init(OrgApacheCommonsCodecLanguageBmRule_Phoneme_1 *self);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_Phoneme_1 *new_OrgApacheCommonsCodecLanguageBmRule_Phoneme_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_Phoneme_1 *create_OrgApacheCommonsCodecLanguageBmRule_Phoneme_1_init(void);

@interface OrgApacheCommonsCodecLanguageBmRule_PhonemeList () {
 @public
  id<JavaUtilList> phonemes_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmRule_PhonemeList, phonemes_, id<JavaUtilList>)

@interface OrgApacheCommonsCodecLanguageBmRule_RPattern : NSObject

@end

@interface OrgApacheCommonsCodecLanguageBmRule_1 : NSObject < OrgApacheCommonsCodecLanguageBmRule_RPattern >

- (instancetype)init;

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmRule_1)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmRule_1_init(OrgApacheCommonsCodecLanguageBmRule_1 *self);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_1 *new_OrgApacheCommonsCodecLanguageBmRule_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_1 *create_OrgApacheCommonsCodecLanguageBmRule_1_init(void);

@interface OrgApacheCommonsCodecLanguageBmRule_2 : OrgApacheCommonsCodecLanguageBmRule {
 @public
  jint myLine_;
  NSString *loc_;
}

- (instancetype)initWithInt:(jint)capture$0
               withNSString:(NSString *)capture$1
               withNSString:(NSString *)pattern
               withNSString:(NSString *)lContext
               withNSString:(NSString *)rContext
withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr:(id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr>)phoneme;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmRule_2)

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmRule_2, loc_, NSString *)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmRule_2_initWithInt_withNSString_withNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_(OrgApacheCommonsCodecLanguageBmRule_2 *self, jint capture$0, NSString *capture$1, NSString *pattern, NSString *lContext, NSString *rContext, id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr> phoneme);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_2 *new_OrgApacheCommonsCodecLanguageBmRule_2_initWithInt_withNSString_withNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_(jint capture$0, NSString *capture$1, NSString *pattern, NSString *lContext, NSString *rContext, id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr> phoneme) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_2 *create_OrgApacheCommonsCodecLanguageBmRule_2_initWithInt_withNSString_withNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_(jint capture$0, NSString *capture$1, NSString *pattern, NSString *lContext, NSString *rContext, id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr> phoneme);

@interface OrgApacheCommonsCodecLanguageBmRule_3 : NSObject < OrgApacheCommonsCodecLanguageBmRule_RPattern >

- (instancetype)init;

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmRule_3)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmRule_3_init(OrgApacheCommonsCodecLanguageBmRule_3 *self);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_3 *new_OrgApacheCommonsCodecLanguageBmRule_3_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_3 *create_OrgApacheCommonsCodecLanguageBmRule_3_init(void);

@interface OrgApacheCommonsCodecLanguageBmRule_4 : NSObject < OrgApacheCommonsCodecLanguageBmRule_RPattern > {
 @public
  NSString *val$content_;
}

- (instancetype)initWithNSString:(NSString *)capture$0;

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmRule_4)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmRule_4_initWithNSString_(OrgApacheCommonsCodecLanguageBmRule_4 *self, NSString *capture$0);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_4 *new_OrgApacheCommonsCodecLanguageBmRule_4_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_4 *create_OrgApacheCommonsCodecLanguageBmRule_4_initWithNSString_(NSString *capture$0);

@interface OrgApacheCommonsCodecLanguageBmRule_5 : NSObject < OrgApacheCommonsCodecLanguageBmRule_RPattern > {
 @public
  NSString *val$content_;
}

- (instancetype)initWithNSString:(NSString *)capture$0;

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmRule_5)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmRule_5_initWithNSString_(OrgApacheCommonsCodecLanguageBmRule_5 *self, NSString *capture$0);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_5 *new_OrgApacheCommonsCodecLanguageBmRule_5_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_5 *create_OrgApacheCommonsCodecLanguageBmRule_5_initWithNSString_(NSString *capture$0);

@interface OrgApacheCommonsCodecLanguageBmRule_6 : NSObject < OrgApacheCommonsCodecLanguageBmRule_RPattern > {
 @public
  NSString *val$content_;
}

- (instancetype)initWithNSString:(NSString *)capture$0;

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmRule_6)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmRule_6_initWithNSString_(OrgApacheCommonsCodecLanguageBmRule_6 *self, NSString *capture$0);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_6 *new_OrgApacheCommonsCodecLanguageBmRule_6_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_6 *create_OrgApacheCommonsCodecLanguageBmRule_6_initWithNSString_(NSString *capture$0);

@interface OrgApacheCommonsCodecLanguageBmRule_7 : NSObject < OrgApacheCommonsCodecLanguageBmRule_RPattern > {
 @public
  NSString *val$bContent_;
  jboolean val$shouldMatch_;
}

- (instancetype)initWithNSString:(NSString *)capture$0
                     withBoolean:(jboolean)capture$1;

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmRule_7)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmRule_7_initWithNSString_withBoolean_(OrgApacheCommonsCodecLanguageBmRule_7 *self, NSString *capture$0, jboolean capture$1);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_7 *new_OrgApacheCommonsCodecLanguageBmRule_7_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_7 *create_OrgApacheCommonsCodecLanguageBmRule_7_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1);

@interface OrgApacheCommonsCodecLanguageBmRule_8 : NSObject < OrgApacheCommonsCodecLanguageBmRule_RPattern > {
 @public
  NSString *val$bContent_;
  jboolean val$shouldMatch_;
}

- (instancetype)initWithNSString:(NSString *)capture$0
                     withBoolean:(jboolean)capture$1;

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmRule_8)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmRule_8_initWithNSString_withBoolean_(OrgApacheCommonsCodecLanguageBmRule_8 *self, NSString *capture$0, jboolean capture$1);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_8 *new_OrgApacheCommonsCodecLanguageBmRule_8_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_8 *create_OrgApacheCommonsCodecLanguageBmRule_8_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1);

@interface OrgApacheCommonsCodecLanguageBmRule_9 : NSObject < OrgApacheCommonsCodecLanguageBmRule_RPattern > {
 @public
  NSString *val$bContent_;
  jboolean val$shouldMatch_;
}

- (instancetype)initWithNSString:(NSString *)capture$0
                     withBoolean:(jboolean)capture$1;

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmRule_9)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmRule_9_initWithNSString_withBoolean_(OrgApacheCommonsCodecLanguageBmRule_9 *self, NSString *capture$0, jboolean capture$1);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_9 *new_OrgApacheCommonsCodecLanguageBmRule_9_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_9 *create_OrgApacheCommonsCodecLanguageBmRule_9_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1);

@interface OrgApacheCommonsCodecLanguageBmRule_10 : NSObject < OrgApacheCommonsCodecLanguageBmRule_RPattern > {
 @public
  JavaUtilRegexPattern *pattern_;
}

- (instancetype)initWithNSString:(NSString *)capture$0;

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmRule_10)

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmRule_10, pattern_, JavaUtilRegexPattern *)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmRule_10_initWithNSString_(OrgApacheCommonsCodecLanguageBmRule_10 *self, NSString *capture$0);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_10 *new_OrgApacheCommonsCodecLanguageBmRule_10_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmRule_10 *create_OrgApacheCommonsCodecLanguageBmRule_10_initWithNSString_(NSString *capture$0);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsCodecLanguageBmRule)

id<OrgApacheCommonsCodecLanguageBmRule_RPattern> OrgApacheCommonsCodecLanguageBmRule_ALL_STRINGS_RMATCHER;
NSString *OrgApacheCommonsCodecLanguageBmRule_ALL = @"ALL";

@implementation OrgApacheCommonsCodecLanguageBmRule

+ (jboolean)containsWithJavaLangCharSequence:(id<JavaLangCharSequence>)chars
                                    withChar:(jchar)input {
  return OrgApacheCommonsCodecLanguageBmRule_containsWithJavaLangCharSequence_withChar_(chars, input);
}

+ (NSString *)createResourceNameWithOrgApacheCommonsCodecLanguageBmNameType:(OrgApacheCommonsCodecLanguageBmNameType *)nameType
                                withOrgApacheCommonsCodecLanguageBmRuleType:(OrgApacheCommonsCodecLanguageBmRuleType *)rt
                                                               withNSString:(NSString *)lang {
  return OrgApacheCommonsCodecLanguageBmRule_createResourceNameWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(nameType, rt, lang);
}

+ (JavaUtilScanner *)createScannerWithOrgApacheCommonsCodecLanguageBmNameType:(OrgApacheCommonsCodecLanguageBmNameType *)nameType
                                  withOrgApacheCommonsCodecLanguageBmRuleType:(OrgApacheCommonsCodecLanguageBmRuleType *)rt
                                                                 withNSString:(NSString *)lang {
  return OrgApacheCommonsCodecLanguageBmRule_createScannerWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(nameType, rt, lang);
}

+ (JavaUtilScanner *)createScannerWithNSString:(NSString *)lang {
  return OrgApacheCommonsCodecLanguageBmRule_createScannerWithNSString_(lang);
}

+ (jboolean)endsWithWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)suffix {
  return OrgApacheCommonsCodecLanguageBmRule_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_(input, suffix);
}

+ (id<JavaUtilList>)getInstanceWithOrgApacheCommonsCodecLanguageBmNameType:(OrgApacheCommonsCodecLanguageBmNameType *)nameType
                               withOrgApacheCommonsCodecLanguageBmRuleType:(OrgApacheCommonsCodecLanguageBmRuleType *)rt
                  withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:(OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)langs {
  return OrgApacheCommonsCodecLanguageBmRule_getInstanceWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(nameType, rt, langs);
}

+ (id<JavaUtilList>)getInstanceWithOrgApacheCommonsCodecLanguageBmNameType:(OrgApacheCommonsCodecLanguageBmNameType *)nameType
                               withOrgApacheCommonsCodecLanguageBmRuleType:(OrgApacheCommonsCodecLanguageBmRuleType *)rt
                                                              withNSString:(NSString *)lang {
  return OrgApacheCommonsCodecLanguageBmRule_getInstanceWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(nameType, rt, lang);
}

+ (OrgApacheCommonsCodecLanguageBmRule_Phoneme *)parsePhonemeWithNSString:(NSString *)ph {
  return OrgApacheCommonsCodecLanguageBmRule_parsePhonemeWithNSString_(ph);
}

+ (id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr>)parsePhonemeExprWithNSString:(NSString *)ph {
  return OrgApacheCommonsCodecLanguageBmRule_parsePhonemeExprWithNSString_(ph);
}

+ (id<JavaUtilList>)parseRulesWithJavaUtilScanner:(JavaUtilScanner *)scanner
                                     withNSString:(NSString *)location {
  return OrgApacheCommonsCodecLanguageBmRule_parseRulesWithJavaUtilScanner_withNSString_(scanner, location);
}

+ (id<OrgApacheCommonsCodecLanguageBmRule_RPattern>)patternWithNSString:(NSString *)regex {
  return OrgApacheCommonsCodecLanguageBmRule_patternWithNSString_(regex);
}

+ (jboolean)startsWithWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                      withJavaLangCharSequence:(id<JavaLangCharSequence>)prefix {
  return OrgApacheCommonsCodecLanguageBmRule_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_(input, prefix);
}

+ (NSString *)stripQuotesWithNSString:(NSString *)str {
  return OrgApacheCommonsCodecLanguageBmRule_stripQuotesWithNSString_(str);
}

- (instancetype)initWithNSString:(NSString *)pattern
                    withNSString:(NSString *)lContext
                    withNSString:(NSString *)rContext
withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr:(id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr>)phoneme {
  OrgApacheCommonsCodecLanguageBmRule_initWithNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_(self, pattern, lContext, rContext, phoneme);
  return self;
}

- (id<OrgApacheCommonsCodecLanguageBmRule_RPattern>)getLContext {
  return self->lContext_;
}

- (NSString *)getPattern {
  return self->pattern_;
}

- (id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr>)getPhoneme {
  return self->phoneme_;
}

- (id<OrgApacheCommonsCodecLanguageBmRule_RPattern>)getRContext {
  return self->rContext_;
}

- (jboolean)patternAndContextMatchesWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                                                     withInt:(jint)i {
  if (i < 0) {
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(@"Can not match pattern at negative indexes");
  }
  jint patternLength = [((NSString *) nil_chk(self->pattern_)) java_length];
  jint ipl = i + patternLength;
  if (ipl > [((id<JavaLangCharSequence>) nil_chk(input)) java_length]) {
    return false;
  }
  jboolean patternMatches = [((id<JavaLangCharSequence>) nil_chk([input subSequenceFrom:i to:ipl])) isEqual:self->pattern_];
  jboolean rContextMatches = [((id<OrgApacheCommonsCodecLanguageBmRule_RPattern>) nil_chk(self->rContext_)) isMatchWithJavaLangCharSequence:[input subSequenceFrom:ipl to:[input java_length]]];
  jboolean lContextMatches = [((id<OrgApacheCommonsCodecLanguageBmRule_RPattern>) nil_chk(self->lContext_)) isMatchWithJavaLangCharSequence:[input subSequenceFrom:0 to:i]];
  return patternMatches && rContextMatches && lContextMatches;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilScanner;", 0xa, 4, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilScanner;", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 8, 9, -1, 10, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 8, 3, -1, 11, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmRule_Phoneme;", 0xa, 12, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr;", 0xa, 13, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 14, 15, -1, 16, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmRule_RPattern;", 0xa, 17, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 18, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 19, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 20, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmRule_RPattern;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmRule_RPattern;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(containsWithJavaLangCharSequence:withChar:);
  methods[1].selector = @selector(createResourceNameWithOrgApacheCommonsCodecLanguageBmNameType:withOrgApacheCommonsCodecLanguageBmRuleType:withNSString:);
  methods[2].selector = @selector(createScannerWithOrgApacheCommonsCodecLanguageBmNameType:withOrgApacheCommonsCodecLanguageBmRuleType:withNSString:);
  methods[3].selector = @selector(createScannerWithNSString:);
  methods[4].selector = @selector(endsWithWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[5].selector = @selector(getInstanceWithOrgApacheCommonsCodecLanguageBmNameType:withOrgApacheCommonsCodecLanguageBmRuleType:withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:);
  methods[6].selector = @selector(getInstanceWithOrgApacheCommonsCodecLanguageBmNameType:withOrgApacheCommonsCodecLanguageBmRuleType:withNSString:);
  methods[7].selector = @selector(parsePhonemeWithNSString:);
  methods[8].selector = @selector(parsePhonemeExprWithNSString:);
  methods[9].selector = @selector(parseRulesWithJavaUtilScanner:withNSString:);
  methods[10].selector = @selector(patternWithNSString:);
  methods[11].selector = @selector(startsWithWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[12].selector = @selector(stripQuotesWithNSString:);
  methods[13].selector = @selector(initWithNSString:withNSString:withNSString:withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr:);
  methods[14].selector = @selector(getLContext);
  methods[15].selector = @selector(getPattern);
  methods[16].selector = @selector(getPhoneme);
  methods[17].selector = @selector(getRContext);
  methods[18].selector = @selector(patternAndContextMatchesWithJavaLangCharSequence:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ALL_STRINGS_RMATCHER", "LOrgApacheCommonsCodecLanguageBmRule_RPattern;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "ALL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "DOUBLE_QUOTE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "HASH_INCLUDE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "RULES", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 27, 28, -1 },
    { "lContext_", "LOrgApacheCommonsCodecLanguageBmRule_RPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pattern_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "phoneme_", "LOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rContext_", "LOrgApacheCommonsCodecLanguageBmRule_RPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "contains", "LJavaLangCharSequence;C", "createResourceName", "LOrgApacheCommonsCodecLanguageBmNameType;LOrgApacheCommonsCodecLanguageBmRuleType;LNSString;", "createScanner", "LNSString;", "endsWith", "LJavaLangCharSequence;LJavaLangCharSequence;", "getInstance", "LOrgApacheCommonsCodecLanguageBmNameType;LOrgApacheCommonsCodecLanguageBmRuleType;LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", "(Lorg/apache/commons/codec/language/bm/NameType;Lorg/apache/commons/codec/language/bm/RuleType;Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;)Ljava/util/List<Lorg/apache/commons/codec/language/bm/Rule;>;", "(Lorg/apache/commons/codec/language/bm/NameType;Lorg/apache/commons/codec/language/bm/RuleType;Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/codec/language/bm/Rule;>;", "parsePhoneme", "parsePhonemeExpr", "parseRules", "LJavaUtilScanner;LNSString;", "(Ljava/util/Scanner;Ljava/lang/String;)Ljava/util/List<Lorg/apache/commons/codec/language/bm/Rule;>;", "pattern", "startsWith", "stripQuotes", "LNSString;LNSString;LNSString;LOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr;", "patternAndContextMatches", "LJavaLangCharSequence;I", &OrgApacheCommonsCodecLanguageBmRule_ALL_STRINGS_RMATCHER, &OrgApacheCommonsCodecLanguageBmRule_ALL, &OrgApacheCommonsCodecLanguageBmRule_DOUBLE_QUOTE, &OrgApacheCommonsCodecLanguageBmRule_HASH_INCLUDE, &OrgApacheCommonsCodecLanguageBmRule_RULES, "Ljava/util/Map<Lorg/apache/commons/codec/language/bm/NameType;Ljava/util/Map<Lorg/apache/commons/codec/language/bm/RuleType;Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Lorg/apache/commons/codec/language/bm/Rule;>;>;>;>;", "LOrgApacheCommonsCodecLanguageBmRule_Phoneme;LOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr;LOrgApacheCommonsCodecLanguageBmRule_PhonemeList;LOrgApacheCommonsCodecLanguageBmRule_RPattern;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule = { "Rule", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x1, 19, 9, -1, 29, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsCodecLanguageBmRule class]) {
    OrgApacheCommonsCodecLanguageBmRule_ALL_STRINGS_RMATCHER = new_OrgApacheCommonsCodecLanguageBmRule_1_init();
    OrgApacheCommonsCodecLanguageBmRule_RULES = new_JavaUtilEnumMap_initWithIOSClass_(OrgApacheCommonsCodecLanguageBmNameType_class_());
    {
      {
        IOSObjectArray *a__ = OrgApacheCommonsCodecLanguageBmNameType_values();
        OrgApacheCommonsCodecLanguageBmNameType * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgApacheCommonsCodecLanguageBmNameType * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgApacheCommonsCodecLanguageBmNameType *s = *b__++;
          id<JavaUtilMap> rts = new_JavaUtilEnumMap_initWithIOSClass_(OrgApacheCommonsCodecLanguageBmRuleType_class_());
          {
            IOSObjectArray *a__ = OrgApacheCommonsCodecLanguageBmRuleType_values();
            OrgApacheCommonsCodecLanguageBmRuleType * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
            OrgApacheCommonsCodecLanguageBmRuleType * const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              OrgApacheCommonsCodecLanguageBmRuleType *rt = *b__++;
              id<JavaUtilMap> rs = new_JavaUtilHashMap_init();
              OrgApacheCommonsCodecLanguageBmLanguages *ls = OrgApacheCommonsCodecLanguageBmLanguages_getInstanceWithOrgApacheCommonsCodecLanguageBmNameType_(s);
              for (NSString * __strong l in nil_chk([((OrgApacheCommonsCodecLanguageBmLanguages *) nil_chk(ls)) getLanguages])) {
                @try {
                  (void) [rs putWithId:l withId:OrgApacheCommonsCodecLanguageBmRule_parseRulesWithJavaUtilScanner_withNSString_(OrgApacheCommonsCodecLanguageBmRule_createScannerWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(s, rt, l), OrgApacheCommonsCodecLanguageBmRule_createResourceNameWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(s, rt, l))];
                }
                @catch (JavaLangIllegalStateException *e) {
                  @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Problem processing ", OrgApacheCommonsCodecLanguageBmRule_createResourceNameWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(s, rt, l)), e);
                }
              }
              if (![((OrgApacheCommonsCodecLanguageBmRuleType *) nil_chk(rt)) isEqual:JreLoadEnum(OrgApacheCommonsCodecLanguageBmRuleType, RULES)]) {
                (void) [rs putWithId:@"common" withId:OrgApacheCommonsCodecLanguageBmRule_parseRulesWithJavaUtilScanner_withNSString_(OrgApacheCommonsCodecLanguageBmRule_createScannerWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(s, rt, @"common"), OrgApacheCommonsCodecLanguageBmRule_createResourceNameWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(s, rt, @"common"))];
              }
              (void) [rts putWithId:rt withId:JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(rs)];
            }
          }
          (void) [OrgApacheCommonsCodecLanguageBmRule_RULES putWithId:s withId:JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(rts)];
        }
      }
    }
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsCodecLanguageBmRule)
  }
}

@end

jboolean OrgApacheCommonsCodecLanguageBmRule_containsWithJavaLangCharSequence_withChar_(id<JavaLangCharSequence> chars, jchar input) {
  OrgApacheCommonsCodecLanguageBmRule_initialize();
  for (jint i = 0; i < [((id<JavaLangCharSequence>) nil_chk(chars)) java_length]; i++) {
    if ([chars charAtWithInt:i] == input) {
      return true;
    }
  }
  return false;
}

NSString *OrgApacheCommonsCodecLanguageBmRule_createResourceNameWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(OrgApacheCommonsCodecLanguageBmNameType *nameType, OrgApacheCommonsCodecLanguageBmRuleType *rt, NSString *lang) {
  OrgApacheCommonsCodecLanguageBmRule_initialize();
  return NSString_java_formatWithNSString_withNSObjectArray_(@"org/apache/commons/codec/language/bm/%s_%s_%s.txt", [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgApacheCommonsCodecLanguageBmNameType *) nil_chk(nameType)) getName], [((OrgApacheCommonsCodecLanguageBmRuleType *) nil_chk(rt)) getName], lang } count:3 type:NSObject_class_()]);
}

JavaUtilScanner *OrgApacheCommonsCodecLanguageBmRule_createScannerWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(OrgApacheCommonsCodecLanguageBmNameType *nameType, OrgApacheCommonsCodecLanguageBmRuleType *rt, NSString *lang) {
  OrgApacheCommonsCodecLanguageBmRule_initialize();
  NSString *resName = OrgApacheCommonsCodecLanguageBmRule_createResourceNameWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(nameType, rt, lang);
  JavaIoInputStream *rulesIS = [((JavaLangClassLoader *) nil_chk([OrgApacheCommonsCodecLanguageBmLanguages_class_() getClassLoader])) getResourceAsStreamWithNSString:resName];
  if (rulesIS == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unable to load resource: ", resName));
  }
  return new_JavaUtilScanner_initWithJavaIoInputStream_withNSString_(rulesIS, OrgApacheCommonsCodecLanguageBmResourceConstants_ENCODING);
}

JavaUtilScanner *OrgApacheCommonsCodecLanguageBmRule_createScannerWithNSString_(NSString *lang) {
  OrgApacheCommonsCodecLanguageBmRule_initialize();
  NSString *resName = NSString_java_formatWithNSString_withNSObjectArray_(@"org/apache/commons/codec/language/bm/%s.txt", [IOSObjectArray newArrayWithObjects:(id[]){ lang } count:1 type:NSObject_class_()]);
  JavaIoInputStream *rulesIS = [((JavaLangClassLoader *) nil_chk([OrgApacheCommonsCodecLanguageBmLanguages_class_() getClassLoader])) getResourceAsStreamWithNSString:resName];
  if (rulesIS == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unable to load resource: ", resName));
  }
  return new_JavaUtilScanner_initWithJavaIoInputStream_withNSString_(rulesIS, OrgApacheCommonsCodecLanguageBmResourceConstants_ENCODING);
}

jboolean OrgApacheCommonsCodecLanguageBmRule_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> input, id<JavaLangCharSequence> suffix) {
  OrgApacheCommonsCodecLanguageBmRule_initialize();
  if ([((id<JavaLangCharSequence>) nil_chk(suffix)) java_length] > [((id<JavaLangCharSequence>) nil_chk(input)) java_length]) {
    return false;
  }
  for (jint i = [input java_length] - 1, j = [suffix java_length] - 1; j >= 0; i--, j--) {
    if ([input charAtWithInt:i] != [suffix charAtWithInt:j]) {
      return false;
    }
  }
  return true;
}

id<JavaUtilList> OrgApacheCommonsCodecLanguageBmRule_getInstanceWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(OrgApacheCommonsCodecLanguageBmNameType *nameType, OrgApacheCommonsCodecLanguageBmRuleType *rt, OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *langs) {
  OrgApacheCommonsCodecLanguageBmRule_initialize();
  return [((OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *) nil_chk(langs)) isSingleton] ? OrgApacheCommonsCodecLanguageBmRule_getInstanceWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(nameType, rt, [langs getAny]) : OrgApacheCommonsCodecLanguageBmRule_getInstanceWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(nameType, rt, OrgApacheCommonsCodecLanguageBmLanguages_ANY);
}

id<JavaUtilList> OrgApacheCommonsCodecLanguageBmRule_getInstanceWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(OrgApacheCommonsCodecLanguageBmNameType *nameType, OrgApacheCommonsCodecLanguageBmRuleType *rt, NSString *lang) {
  OrgApacheCommonsCodecLanguageBmRule_initialize();
  id<JavaUtilList> rules = [((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap>) nil_chk(OrgApacheCommonsCodecLanguageBmRule_RULES)) getWithId:nameType])) getWithId:rt])) getWithId:lang];
  if (rules == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"No rules found for %s, %s, %s.", [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgApacheCommonsCodecLanguageBmNameType *) nil_chk(nameType)) getName], [((OrgApacheCommonsCodecLanguageBmRuleType *) nil_chk(rt)) getName], lang } count:3 type:NSObject_class_()]));
  }
  return rules;
}

OrgApacheCommonsCodecLanguageBmRule_Phoneme *OrgApacheCommonsCodecLanguageBmRule_parsePhonemeWithNSString_(NSString *ph) {
  OrgApacheCommonsCodecLanguageBmRule_initialize();
  jint open = [((NSString *) nil_chk(ph)) java_indexOfString:@"["];
  if (open >= 0) {
    if (![ph java_hasSuffix:@"]"]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Phoneme expression contains a '[' but does not end in ']'");
    }
    NSString *before = [ph java_substring:0 endIndex:open];
    NSString *in = [ph java_substring:open + 1 endIndex:[ph java_length] - 1];
    id<JavaUtilSet> langs = new_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([((NSString *) nil_chk(in)) java_split:@"[+]"]));
    return new_OrgApacheCommonsCodecLanguageBmRule_Phoneme_initWithJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(before, OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_fromWithJavaUtilSet_(langs));
  }
  else {
    return new_OrgApacheCommonsCodecLanguageBmRule_Phoneme_initWithJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(ph, JreLoadStatic(OrgApacheCommonsCodecLanguageBmLanguages, ANY_LANGUAGE));
  }
}

id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr> OrgApacheCommonsCodecLanguageBmRule_parsePhonemeExprWithNSString_(NSString *ph) {
  OrgApacheCommonsCodecLanguageBmRule_initialize();
  if ([((NSString *) nil_chk(ph)) java_hasPrefix:@"("]) {
    if (![ph java_hasSuffix:@")"]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Phoneme starts with '(' so must end with ')'");
    }
    id<JavaUtilList> phs = new_JavaUtilArrayList_init();
    NSString *body = [ph java_substring:1 endIndex:[ph java_length] - 1];
    {
      IOSObjectArray *a__ = [((NSString *) nil_chk(body)) java_split:@"[|]"];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *part = *b__++;
        [phs addWithId:OrgApacheCommonsCodecLanguageBmRule_parsePhonemeWithNSString_(part)];
      }
    }
    if ([body java_hasPrefix:@"|"] || [body java_hasSuffix:@"|"]) {
      [phs addWithId:new_OrgApacheCommonsCodecLanguageBmRule_Phoneme_initWithJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(@"", JreLoadStatic(OrgApacheCommonsCodecLanguageBmLanguages, ANY_LANGUAGE))];
    }
    return new_OrgApacheCommonsCodecLanguageBmRule_PhonemeList_initWithJavaUtilList_(phs);
  }
  else {
    return OrgApacheCommonsCodecLanguageBmRule_parsePhonemeWithNSString_(ph);
  }
}

id<JavaUtilList> OrgApacheCommonsCodecLanguageBmRule_parseRulesWithJavaUtilScanner_withNSString_(JavaUtilScanner *scanner, NSString *location) {
  OrgApacheCommonsCodecLanguageBmRule_initialize();
  id<JavaUtilList> lines = new_JavaUtilArrayList_init();
  jint currentLine = 0;
  jboolean inMultilineComment = false;
  while ([((JavaUtilScanner *) nil_chk(scanner)) hasNextLine]) {
    currentLine++;
    NSString *rawLine = [scanner nextLine];
    NSString *line = rawLine;
    if (inMultilineComment) {
      if ([((NSString *) nil_chk(line)) java_hasSuffix:OrgApacheCommonsCodecLanguageBmResourceConstants_EXT_CMT_END]) {
        inMultilineComment = false;
      }
      else {
      }
    }
    else {
      if ([((NSString *) nil_chk(line)) java_hasPrefix:OrgApacheCommonsCodecLanguageBmResourceConstants_EXT_CMT_START]) {
        inMultilineComment = true;
      }
      else {
        jint cmtI = [line java_indexOfString:OrgApacheCommonsCodecLanguageBmResourceConstants_CMT];
        if (cmtI >= 0) {
          line = [line java_substring:0 endIndex:cmtI];
        }
        line = [((NSString *) nil_chk(line)) java_trim];
        if ([((NSString *) nil_chk(line)) java_length] == 0) {
          continue;
        }
        if ([line java_hasPrefix:OrgApacheCommonsCodecLanguageBmRule_HASH_INCLUDE]) {
          NSString *incl = [((NSString *) nil_chk([line java_substring:[((NSString *) nil_chk(OrgApacheCommonsCodecLanguageBmRule_HASH_INCLUDE)) java_length]])) java_trim];
          if ([((NSString *) nil_chk(incl)) java_contains:@" "]) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Warining: malformed import statement: ", rawLine)];
          }
          else {
            [lines addAllWithJavaUtilCollection:OrgApacheCommonsCodecLanguageBmRule_parseRulesWithJavaUtilScanner_withNSString_(OrgApacheCommonsCodecLanguageBmRule_createScannerWithNSString_(incl), JreStrcat("$$$", location, @"->", incl))];
          }
        }
        else {
          IOSObjectArray *parts = [line java_split:@"\\s+"];
          if (((IOSObjectArray *) nil_chk(parts))->size_ != 4) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$$", @"Warning: malformed rule statement split into ", parts->size_, @" parts: ", rawLine)];
          }
          else {
            @try {
              NSString *pat = OrgApacheCommonsCodecLanguageBmRule_stripQuotesWithNSString_(IOSObjectArray_Get(parts, 0));
              NSString *lCon = OrgApacheCommonsCodecLanguageBmRule_stripQuotesWithNSString_(IOSObjectArray_Get(parts, 1));
              NSString *rCon = OrgApacheCommonsCodecLanguageBmRule_stripQuotesWithNSString_(IOSObjectArray_Get(parts, 2));
              id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr> ph = OrgApacheCommonsCodecLanguageBmRule_parsePhonemeExprWithNSString_(OrgApacheCommonsCodecLanguageBmRule_stripQuotesWithNSString_(IOSObjectArray_Get(parts, 3)));
              jint cLine = currentLine;
              OrgApacheCommonsCodecLanguageBmRule *r = new_OrgApacheCommonsCodecLanguageBmRule_2_initWithInt_withNSString_withNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_(cLine, location, pat, lCon, rCon, ph);
              [lines addWithId:r];
            }
            @catch (JavaLangIllegalArgumentException *e) {
              @throw new_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(JreStrcat("$I", @"Problem parsing line ", currentLine), e);
            }
          }
        }
      }
    }
  }
  return lines;
}

id<OrgApacheCommonsCodecLanguageBmRule_RPattern> OrgApacheCommonsCodecLanguageBmRule_patternWithNSString_(NSString *regex) {
  OrgApacheCommonsCodecLanguageBmRule_initialize();
  jboolean startsWith = [((NSString *) nil_chk(regex)) java_hasPrefix:@"^"];
  jboolean endsWith = [regex java_hasSuffix:@"$"];
  NSString *content = [regex java_substring:startsWith ? 1 : 0 endIndex:endsWith ? [regex java_length] - 1 : [regex java_length]];
  jboolean boxes = [((NSString *) nil_chk(content)) java_contains:@"["];
  if (!boxes) {
    if (startsWith && endsWith) {
      if ([content java_length] == 0) {
        return new_OrgApacheCommonsCodecLanguageBmRule_3_init();
      }
      else {
        return new_OrgApacheCommonsCodecLanguageBmRule_4_initWithNSString_(content);
      }
    }
    else if ((startsWith || endsWith) && [content java_length] == 0) {
      return OrgApacheCommonsCodecLanguageBmRule_ALL_STRINGS_RMATCHER;
    }
    else if (startsWith) {
      return new_OrgApacheCommonsCodecLanguageBmRule_5_initWithNSString_(content);
    }
    else if (endsWith) {
      return new_OrgApacheCommonsCodecLanguageBmRule_6_initWithNSString_(content);
    }
  }
  else {
    jboolean startsWithBox = [content java_hasPrefix:@"["];
    jboolean endsWithBox = [content java_hasSuffix:@"]"];
    if (startsWithBox && endsWithBox) {
      NSString *boxContent = [content java_substring:1 endIndex:[content java_length] - 1];
      if (![((NSString *) nil_chk(boxContent)) java_contains:@"["]) {
        jboolean negate = [boxContent java_hasPrefix:@"^"];
        if (negate) {
          boxContent = [boxContent java_substring:1];
        }
        NSString *bContent = boxContent;
        jboolean shouldMatch = !negate;
        if (startsWith && endsWith) {
          return new_OrgApacheCommonsCodecLanguageBmRule_7_initWithNSString_withBoolean_(bContent, shouldMatch);
        }
        else if (startsWith) {
          return new_OrgApacheCommonsCodecLanguageBmRule_8_initWithNSString_withBoolean_(bContent, shouldMatch);
        }
        else if (endsWith) {
          return new_OrgApacheCommonsCodecLanguageBmRule_9_initWithNSString_withBoolean_(bContent, shouldMatch);
        }
      }
    }
  }
  return new_OrgApacheCommonsCodecLanguageBmRule_10_initWithNSString_(regex);
}

jboolean OrgApacheCommonsCodecLanguageBmRule_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> input, id<JavaLangCharSequence> prefix) {
  OrgApacheCommonsCodecLanguageBmRule_initialize();
  if ([((id<JavaLangCharSequence>) nil_chk(prefix)) java_length] > [((id<JavaLangCharSequence>) nil_chk(input)) java_length]) {
    return false;
  }
  for (jint i = 0; i < [prefix java_length]; i++) {
    if ([input charAtWithInt:i] != [prefix charAtWithInt:i]) {
      return false;
    }
  }
  return true;
}

NSString *OrgApacheCommonsCodecLanguageBmRule_stripQuotesWithNSString_(NSString *str) {
  OrgApacheCommonsCodecLanguageBmRule_initialize();
  if ([((NSString *) nil_chk(str)) java_hasPrefix:OrgApacheCommonsCodecLanguageBmRule_DOUBLE_QUOTE]) {
    str = [str java_substring:1];
  }
  if ([((NSString *) nil_chk(str)) java_hasSuffix:OrgApacheCommonsCodecLanguageBmRule_DOUBLE_QUOTE]) {
    str = [str java_substring:0 endIndex:[str java_length] - 1];
  }
  return str;
}

void OrgApacheCommonsCodecLanguageBmRule_initWithNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_(OrgApacheCommonsCodecLanguageBmRule *self, NSString *pattern, NSString *lContext, NSString *rContext, id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr> phoneme) {
  NSObject_init(self);
  self->pattern_ = pattern;
  self->lContext_ = OrgApacheCommonsCodecLanguageBmRule_patternWithNSString_(JreStrcat("$C", lContext, '$'));
  self->rContext_ = OrgApacheCommonsCodecLanguageBmRule_patternWithNSString_(JreStrcat("C$", '^', rContext));
  self->phoneme_ = phoneme;
}

OrgApacheCommonsCodecLanguageBmRule *new_OrgApacheCommonsCodecLanguageBmRule_initWithNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_(NSString *pattern, NSString *lContext, NSString *rContext, id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr> phoneme) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmRule, initWithNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_, pattern, lContext, rContext, phoneme)
}

OrgApacheCommonsCodecLanguageBmRule *create_OrgApacheCommonsCodecLanguageBmRule_initWithNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_(NSString *pattern, NSString *lContext, NSString *rContext, id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr> phoneme) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmRule, initWithNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_, pattern, lContext, rContext, phoneme)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageBmRule)

@implementation OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangIterable;", 0x401, -1, -1, -1, 0, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getPhonemes);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/lang/Iterable<Lorg/apache/commons/codec/language/bm/Rule$Phoneme;>;", "LOrgApacheCommonsCodecLanguageBmRule;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr = { "PhonemeExpr", "org.apache.commons.codec.language.bm", ptrTable, methods, NULL, 7, 0x609, 1, 0, 1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsCodecLanguageBmRule_Phoneme)

id<JavaUtilComparator> OrgApacheCommonsCodecLanguageBmRule_Phoneme_COMPARATOR;

@implementation OrgApacheCommonsCodecLanguageBmRule_Phoneme

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)phonemeText
withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:(OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)languages {
  OrgApacheCommonsCodecLanguageBmRule_Phoneme_initWithJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(self, phonemeText, languages);
  return self;
}

- (OrgApacheCommonsCodecLanguageBmRule_Phoneme *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)str {
  return new_OrgApacheCommonsCodecLanguageBmRule_Phoneme_initWithJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(JreStrcat("$$", [((id<JavaLangCharSequence>) nil_chk(self->phonemeText_)) description], [((id<JavaLangCharSequence>) nil_chk(str)) description]), self->languages_);
}

- (OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)getLanguages {
  return self->languages_;
}

- (id<JavaLangIterable>)getPhonemes {
  return JavaUtilCollections_singletonWithId_(self);
}

- (id<JavaLangCharSequence>)getPhonemeText {
  return self->phonemeText_;
}

- (OrgApacheCommonsCodecLanguageBmRule_Phoneme *)joinWithOrgApacheCommonsCodecLanguageBmRule_Phoneme:(OrgApacheCommonsCodecLanguageBmRule_Phoneme *)right {
  return new_OrgApacheCommonsCodecLanguageBmRule_Phoneme_initWithJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(JreStrcat("$$", [((id<JavaLangCharSequence>) nil_chk(self->phonemeText_)) description], [((OrgApacheCommonsCodecLanguageBmRule_Phoneme *) nil_chk(right))->phonemeText_ description]), [((OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *) nil_chk(self->languages_)) restrictToWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:right->languages_]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmRule_Phoneme;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmRule_Phoneme;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangCharSequence:withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:);
  methods[1].selector = @selector(appendWithJavaLangCharSequence:);
  methods[2].selector = @selector(getLanguages);
  methods[3].selector = @selector(getPhonemes);
  methods[4].selector = @selector(getPhonemeText);
  methods[5].selector = @selector(joinWithOrgApacheCommonsCodecLanguageBmRule_Phoneme:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COMPARATOR", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x19, -1, 6, 7, -1 },
    { "phonemeText_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "languages_", "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangCharSequence;LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", "append", "LJavaLangCharSequence;", "()Ljava/lang/Iterable<Lorg/apache/commons/codec/language/bm/Rule$Phoneme;>;", "join", "LOrgApacheCommonsCodecLanguageBmRule_Phoneme;", &OrgApacheCommonsCodecLanguageBmRule_Phoneme_COMPARATOR, "Ljava/util/Comparator<Lorg/apache/commons/codec/language/bm/Rule$Phoneme;>;", "LOrgApacheCommonsCodecLanguageBmRule;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule_Phoneme = { "Phoneme", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x19, 6, 3, 8, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule_Phoneme;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsCodecLanguageBmRule_Phoneme class]) {
    OrgApacheCommonsCodecLanguageBmRule_Phoneme_COMPARATOR = new_OrgApacheCommonsCodecLanguageBmRule_Phoneme_1_init();
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsCodecLanguageBmRule_Phoneme)
  }
}

@end

void OrgApacheCommonsCodecLanguageBmRule_Phoneme_initWithJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(OrgApacheCommonsCodecLanguageBmRule_Phoneme *self, id<JavaLangCharSequence> phonemeText, OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *languages) {
  NSObject_init(self);
  self->phonemeText_ = phonemeText;
  self->languages_ = languages;
}

OrgApacheCommonsCodecLanguageBmRule_Phoneme *new_OrgApacheCommonsCodecLanguageBmRule_Phoneme_initWithJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(id<JavaLangCharSequence> phonemeText, OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *languages) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmRule_Phoneme, initWithJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_, phonemeText, languages)
}

OrgApacheCommonsCodecLanguageBmRule_Phoneme *create_OrgApacheCommonsCodecLanguageBmRule_Phoneme_initWithJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(id<JavaLangCharSequence> phonemeText, OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *languages) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmRule_Phoneme, initWithJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_, phonemeText, languages)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageBmRule_Phoneme)

@implementation OrgApacheCommonsCodecLanguageBmRule_Phoneme_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageBmRule_Phoneme_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(OrgApacheCommonsCodecLanguageBmRule_Phoneme *)o1
               withId:(OrgApacheCommonsCodecLanguageBmRule_Phoneme *)o2 {
  for (jint i = 0; i < [((id<JavaLangCharSequence>) nil_chk(((OrgApacheCommonsCodecLanguageBmRule_Phoneme *) nil_chk(o1))->phonemeText_)) java_length]; i++) {
    if (i >= [((OrgApacheCommonsCodecLanguageBmRule_Phoneme *) nil_chk(o2))->phonemeText_ java_length]) {
      return +1;
    }
    jint c = [o1->phonemeText_ charAtWithInt:i] - [o2->phonemeText_ charAtWithInt:i];
    if (c != 0) {
      return c;
    }
  }
  if ([o1->phonemeText_ java_length] < [((OrgApacheCommonsCodecLanguageBmRule_Phoneme *) nil_chk(o2))->phonemeText_ java_length]) {
    return -1;
  }
  return 0;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LOrgApacheCommonsCodecLanguageBmRule_Phoneme;LOrgApacheCommonsCodecLanguageBmRule_Phoneme;", "LOrgApacheCommonsCodecLanguageBmRule_Phoneme;", "Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/commons/codec/language/bm/Rule$Phoneme;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule_Phoneme_1 = { "", "org.apache.commons.codec.language.bm", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, 3, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule_Phoneme_1;
}

@end

void OrgApacheCommonsCodecLanguageBmRule_Phoneme_1_init(OrgApacheCommonsCodecLanguageBmRule_Phoneme_1 *self) {
  NSObject_init(self);
}

OrgApacheCommonsCodecLanguageBmRule_Phoneme_1 *new_OrgApacheCommonsCodecLanguageBmRule_Phoneme_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmRule_Phoneme_1, init)
}

OrgApacheCommonsCodecLanguageBmRule_Phoneme_1 *create_OrgApacheCommonsCodecLanguageBmRule_Phoneme_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmRule_Phoneme_1, init)
}

@implementation OrgApacheCommonsCodecLanguageBmRule_PhonemeList

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)phonemes {
  OrgApacheCommonsCodecLanguageBmRule_PhonemeList_initWithJavaUtilList_(self, phonemes);
  return self;
}

- (id<JavaUtilList>)getPhonemes {
  return self->phonemes_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(getPhonemes);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "phonemes_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Lorg/apache/commons/codec/language/bm/Rule$Phoneme;>;)V", "()Ljava/util/List<Lorg/apache/commons/codec/language/bm/Rule$Phoneme;>;", "Ljava/util/List<Lorg/apache/commons/codec/language/bm/Rule$Phoneme;>;", "LOrgApacheCommonsCodecLanguageBmRule;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule_PhonemeList = { "PhonemeList", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x19, 2, 1, 4, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule_PhonemeList;
}

@end

void OrgApacheCommonsCodecLanguageBmRule_PhonemeList_initWithJavaUtilList_(OrgApacheCommonsCodecLanguageBmRule_PhonemeList *self, id<JavaUtilList> phonemes) {
  NSObject_init(self);
  self->phonemes_ = phonemes;
}

OrgApacheCommonsCodecLanguageBmRule_PhonemeList *new_OrgApacheCommonsCodecLanguageBmRule_PhonemeList_initWithJavaUtilList_(id<JavaUtilList> phonemes) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmRule_PhonemeList, initWithJavaUtilList_, phonemes)
}

OrgApacheCommonsCodecLanguageBmRule_PhonemeList *create_OrgApacheCommonsCodecLanguageBmRule_PhonemeList_initWithJavaUtilList_(id<JavaUtilList> phonemes) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmRule_PhonemeList, initWithJavaUtilList_, phonemes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageBmRule_PhonemeList)

@implementation OrgApacheCommonsCodecLanguageBmRule_RPattern

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(isMatchWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isMatch", "LJavaLangCharSequence;", "LOrgApacheCommonsCodecLanguageBmRule;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule_RPattern = { "RPattern", "org.apache.commons.codec.language.bm", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule_RPattern;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageBmRule_RPattern)

@implementation OrgApacheCommonsCodecLanguageBmRule_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageBmRule_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isMatchWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isMatch", "LJavaLangCharSequence;", "LOrgApacheCommonsCodecLanguageBmRule;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule_1 = { "", "org.apache.commons.codec.language.bm", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule_1;
}

@end

void OrgApacheCommonsCodecLanguageBmRule_1_init(OrgApacheCommonsCodecLanguageBmRule_1 *self) {
  NSObject_init(self);
}

OrgApacheCommonsCodecLanguageBmRule_1 *new_OrgApacheCommonsCodecLanguageBmRule_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmRule_1, init)
}

OrgApacheCommonsCodecLanguageBmRule_1 *create_OrgApacheCommonsCodecLanguageBmRule_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmRule_1, init)
}

@implementation OrgApacheCommonsCodecLanguageBmRule_2

- (instancetype)initWithInt:(jint)capture$0
               withNSString:(NSString *)capture$1
               withNSString:(NSString *)pattern
               withNSString:(NSString *)lContext
               withNSString:(NSString *)rContext
withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr:(id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr>)phoneme {
  OrgApacheCommonsCodecLanguageBmRule_2_initWithInt_withNSString_withNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_(self, capture$0, capture$1, pattern, lContext, rContext, phoneme);
  return self;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  (void) [sb appendWithNSString:@"Rule"];
  (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"{line="])) appendWithInt:myLine_];
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@", loc='"])) appendWithNSString:loc_])) appendWithChar:'\''];
  (void) [sb appendWithChar:'}'];
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withNSString:withNSString:withNSString:withNSString:withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "myLine_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "loc_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;LNSString;LOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr;", "toString", "LOrgApacheCommonsCodecLanguageBmRule;", "parseRulesWithJavaUtilScanner:withNSString:" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule_2 = { "", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule_2;
}

@end

void OrgApacheCommonsCodecLanguageBmRule_2_initWithInt_withNSString_withNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_(OrgApacheCommonsCodecLanguageBmRule_2 *self, jint capture$0, NSString *capture$1, NSString *pattern, NSString *lContext, NSString *rContext, id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr> phoneme) {
  OrgApacheCommonsCodecLanguageBmRule_initWithNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_(self, pattern, lContext, rContext, phoneme);
  self->myLine_ = capture$0;
  self->loc_ = capture$1;
}

OrgApacheCommonsCodecLanguageBmRule_2 *new_OrgApacheCommonsCodecLanguageBmRule_2_initWithInt_withNSString_withNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_(jint capture$0, NSString *capture$1, NSString *pattern, NSString *lContext, NSString *rContext, id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr> phoneme) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmRule_2, initWithInt_withNSString_withNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_, capture$0, capture$1, pattern, lContext, rContext, phoneme)
}

OrgApacheCommonsCodecLanguageBmRule_2 *create_OrgApacheCommonsCodecLanguageBmRule_2_initWithInt_withNSString_withNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_(jint capture$0, NSString *capture$1, NSString *pattern, NSString *lContext, NSString *rContext, id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr> phoneme) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmRule_2, initWithInt_withNSString_withNSString_withNSString_withNSString_withOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr_, capture$0, capture$1, pattern, lContext, rContext, phoneme)
}

@implementation OrgApacheCommonsCodecLanguageBmRule_3

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageBmRule_3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  return [((id<JavaLangCharSequence>) nil_chk(input)) java_length] == 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isMatchWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isMatch", "LJavaLangCharSequence;", "LOrgApacheCommonsCodecLanguageBmRule;", "patternWithNSString:" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule_3 = { "", "org.apache.commons.codec.language.bm", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule_3;
}

@end

void OrgApacheCommonsCodecLanguageBmRule_3_init(OrgApacheCommonsCodecLanguageBmRule_3 *self) {
  NSObject_init(self);
}

OrgApacheCommonsCodecLanguageBmRule_3 *new_OrgApacheCommonsCodecLanguageBmRule_3_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmRule_3, init)
}

OrgApacheCommonsCodecLanguageBmRule_3 *create_OrgApacheCommonsCodecLanguageBmRule_3_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmRule_3, init)
}

@implementation OrgApacheCommonsCodecLanguageBmRule_4

- (instancetype)initWithNSString:(NSString *)capture$0 {
  OrgApacheCommonsCodecLanguageBmRule_4_initWithNSString_(self, capture$0);
  return self;
}

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  return [((id<JavaLangCharSequence>) nil_chk(input)) isEqual:val$content_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(isMatchWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$content_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isMatch", "LJavaLangCharSequence;", "LOrgApacheCommonsCodecLanguageBmRule;", "patternWithNSString:" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule_4 = { "", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule_4;
}

@end

void OrgApacheCommonsCodecLanguageBmRule_4_initWithNSString_(OrgApacheCommonsCodecLanguageBmRule_4 *self, NSString *capture$0) {
  self->val$content_ = capture$0;
  NSObject_init(self);
}

OrgApacheCommonsCodecLanguageBmRule_4 *new_OrgApacheCommonsCodecLanguageBmRule_4_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmRule_4, initWithNSString_, capture$0)
}

OrgApacheCommonsCodecLanguageBmRule_4 *create_OrgApacheCommonsCodecLanguageBmRule_4_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmRule_4, initWithNSString_, capture$0)
}

@implementation OrgApacheCommonsCodecLanguageBmRule_5

- (instancetype)initWithNSString:(NSString *)capture$0 {
  OrgApacheCommonsCodecLanguageBmRule_5_initWithNSString_(self, capture$0);
  return self;
}

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  return OrgApacheCommonsCodecLanguageBmRule_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_(input, val$content_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(isMatchWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$content_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isMatch", "LJavaLangCharSequence;", "LOrgApacheCommonsCodecLanguageBmRule;", "patternWithNSString:" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule_5 = { "", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule_5;
}

@end

void OrgApacheCommonsCodecLanguageBmRule_5_initWithNSString_(OrgApacheCommonsCodecLanguageBmRule_5 *self, NSString *capture$0) {
  self->val$content_ = capture$0;
  NSObject_init(self);
}

OrgApacheCommonsCodecLanguageBmRule_5 *new_OrgApacheCommonsCodecLanguageBmRule_5_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmRule_5, initWithNSString_, capture$0)
}

OrgApacheCommonsCodecLanguageBmRule_5 *create_OrgApacheCommonsCodecLanguageBmRule_5_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmRule_5, initWithNSString_, capture$0)
}

@implementation OrgApacheCommonsCodecLanguageBmRule_6

- (instancetype)initWithNSString:(NSString *)capture$0 {
  OrgApacheCommonsCodecLanguageBmRule_6_initWithNSString_(self, capture$0);
  return self;
}

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  return OrgApacheCommonsCodecLanguageBmRule_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_(input, val$content_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(isMatchWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$content_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isMatch", "LJavaLangCharSequence;", "LOrgApacheCommonsCodecLanguageBmRule;", "patternWithNSString:" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule_6 = { "", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule_6;
}

@end

void OrgApacheCommonsCodecLanguageBmRule_6_initWithNSString_(OrgApacheCommonsCodecLanguageBmRule_6 *self, NSString *capture$0) {
  self->val$content_ = capture$0;
  NSObject_init(self);
}

OrgApacheCommonsCodecLanguageBmRule_6 *new_OrgApacheCommonsCodecLanguageBmRule_6_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmRule_6, initWithNSString_, capture$0)
}

OrgApacheCommonsCodecLanguageBmRule_6 *create_OrgApacheCommonsCodecLanguageBmRule_6_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmRule_6, initWithNSString_, capture$0)
}

@implementation OrgApacheCommonsCodecLanguageBmRule_7

- (instancetype)initWithNSString:(NSString *)capture$0
                     withBoolean:(jboolean)capture$1 {
  OrgApacheCommonsCodecLanguageBmRule_7_initWithNSString_withBoolean_(self, capture$0, capture$1);
  return self;
}

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  return [((id<JavaLangCharSequence>) nil_chk(input)) java_length] == 1 && (OrgApacheCommonsCodecLanguageBmRule_containsWithJavaLangCharSequence_withChar_(val$bContent_, [input charAtWithInt:0]) == val$shouldMatch_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withBoolean:);
  methods[1].selector = @selector(isMatchWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$bContent_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$shouldMatch_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isMatch", "LJavaLangCharSequence;", "LOrgApacheCommonsCodecLanguageBmRule;", "patternWithNSString:" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule_7 = { "", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule_7;
}

@end

void OrgApacheCommonsCodecLanguageBmRule_7_initWithNSString_withBoolean_(OrgApacheCommonsCodecLanguageBmRule_7 *self, NSString *capture$0, jboolean capture$1) {
  self->val$bContent_ = capture$0;
  self->val$shouldMatch_ = capture$1;
  NSObject_init(self);
}

OrgApacheCommonsCodecLanguageBmRule_7 *new_OrgApacheCommonsCodecLanguageBmRule_7_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmRule_7, initWithNSString_withBoolean_, capture$0, capture$1)
}

OrgApacheCommonsCodecLanguageBmRule_7 *create_OrgApacheCommonsCodecLanguageBmRule_7_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmRule_7, initWithNSString_withBoolean_, capture$0, capture$1)
}

@implementation OrgApacheCommonsCodecLanguageBmRule_8

- (instancetype)initWithNSString:(NSString *)capture$0
                     withBoolean:(jboolean)capture$1 {
  OrgApacheCommonsCodecLanguageBmRule_8_initWithNSString_withBoolean_(self, capture$0, capture$1);
  return self;
}

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  return [((id<JavaLangCharSequence>) nil_chk(input)) java_length] > 0 && (OrgApacheCommonsCodecLanguageBmRule_containsWithJavaLangCharSequence_withChar_(val$bContent_, [input charAtWithInt:0]) == val$shouldMatch_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withBoolean:);
  methods[1].selector = @selector(isMatchWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$bContent_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$shouldMatch_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isMatch", "LJavaLangCharSequence;", "LOrgApacheCommonsCodecLanguageBmRule;", "patternWithNSString:" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule_8 = { "", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule_8;
}

@end

void OrgApacheCommonsCodecLanguageBmRule_8_initWithNSString_withBoolean_(OrgApacheCommonsCodecLanguageBmRule_8 *self, NSString *capture$0, jboolean capture$1) {
  self->val$bContent_ = capture$0;
  self->val$shouldMatch_ = capture$1;
  NSObject_init(self);
}

OrgApacheCommonsCodecLanguageBmRule_8 *new_OrgApacheCommonsCodecLanguageBmRule_8_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmRule_8, initWithNSString_withBoolean_, capture$0, capture$1)
}

OrgApacheCommonsCodecLanguageBmRule_8 *create_OrgApacheCommonsCodecLanguageBmRule_8_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmRule_8, initWithNSString_withBoolean_, capture$0, capture$1)
}

@implementation OrgApacheCommonsCodecLanguageBmRule_9

- (instancetype)initWithNSString:(NSString *)capture$0
                     withBoolean:(jboolean)capture$1 {
  OrgApacheCommonsCodecLanguageBmRule_9_initWithNSString_withBoolean_(self, capture$0, capture$1);
  return self;
}

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  return [((id<JavaLangCharSequence>) nil_chk(input)) java_length] > 0 && (OrgApacheCommonsCodecLanguageBmRule_containsWithJavaLangCharSequence_withChar_(val$bContent_, [input charAtWithInt:[input java_length] - 1]) == val$shouldMatch_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withBoolean:);
  methods[1].selector = @selector(isMatchWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$bContent_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$shouldMatch_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isMatch", "LJavaLangCharSequence;", "LOrgApacheCommonsCodecLanguageBmRule;", "patternWithNSString:" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule_9 = { "", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x8018, 2, 2, 2, -1, 3, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule_9;
}

@end

void OrgApacheCommonsCodecLanguageBmRule_9_initWithNSString_withBoolean_(OrgApacheCommonsCodecLanguageBmRule_9 *self, NSString *capture$0, jboolean capture$1) {
  self->val$bContent_ = capture$0;
  self->val$shouldMatch_ = capture$1;
  NSObject_init(self);
}

OrgApacheCommonsCodecLanguageBmRule_9 *new_OrgApacheCommonsCodecLanguageBmRule_9_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmRule_9, initWithNSString_withBoolean_, capture$0, capture$1)
}

OrgApacheCommonsCodecLanguageBmRule_9 *create_OrgApacheCommonsCodecLanguageBmRule_9_initWithNSString_withBoolean_(NSString *capture$0, jboolean capture$1) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmRule_9, initWithNSString_withBoolean_, capture$0, capture$1)
}

@implementation OrgApacheCommonsCodecLanguageBmRule_10

- (instancetype)initWithNSString:(NSString *)capture$0 {
  OrgApacheCommonsCodecLanguageBmRule_10_initWithNSString_(self, capture$0);
  return self;
}

- (jboolean)isMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:input];
  return [((JavaUtilRegexMatcher *) nil_chk(matcher)) find];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(isMatchWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isMatch", "LJavaLangCharSequence;", "LOrgApacheCommonsCodecLanguageBmRule;", "patternWithNSString:" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmRule_10 = { "", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x8018, 2, 1, 2, -1, 3, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmRule_10;
}

@end

void OrgApacheCommonsCodecLanguageBmRule_10_initWithNSString_(OrgApacheCommonsCodecLanguageBmRule_10 *self, NSString *capture$0) {
  NSObject_init(self);
  self->pattern_ = JavaUtilRegexPattern_compileWithNSString_(capture$0);
}

OrgApacheCommonsCodecLanguageBmRule_10 *new_OrgApacheCommonsCodecLanguageBmRule_10_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmRule_10, initWithNSString_, capture$0)
}

OrgApacheCommonsCodecLanguageBmRule_10 *create_OrgApacheCommonsCodecLanguageBmRule_10_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmRule_10, initWithNSString_, capture$0)
}
