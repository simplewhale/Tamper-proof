//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/commons-codec/org/apache/commons/codec/language/Soundex.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/apache/commons/codec/EncoderException.h"
#include "org/apache/commons/codec/language/Soundex.h"
#include "org/apache/commons/codec/language/SoundexUtils.h"

@interface OrgApacheCommonsCodecLanguageSoundex () {
 @public
  jint maxLength_;
  IOSCharArray *soundexMapping_;
}

- (jchar)getMappingCodeWithNSString:(NSString *)str
                            withInt:(jint)index;

- (IOSCharArray *)getSoundexMapping;

- (jchar)mapWithChar:(jchar)ch;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageSoundex, soundexMapping_, IOSCharArray *)

inline IOSCharArray *OrgApacheCommonsCodecLanguageSoundex_get_US_ENGLISH_MAPPING(void);
static IOSCharArray *OrgApacheCommonsCodecLanguageSoundex_US_ENGLISH_MAPPING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageSoundex, US_ENGLISH_MAPPING, IOSCharArray *)

__attribute__((unused)) static jchar OrgApacheCommonsCodecLanguageSoundex_getMappingCodeWithNSString_withInt_(OrgApacheCommonsCodecLanguageSoundex *self, NSString *str, jint index);

__attribute__((unused)) static IOSCharArray *OrgApacheCommonsCodecLanguageSoundex_getSoundexMapping(OrgApacheCommonsCodecLanguageSoundex *self);

__attribute__((unused)) static jchar OrgApacheCommonsCodecLanguageSoundex_mapWithChar_(OrgApacheCommonsCodecLanguageSoundex *self, jchar ch);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsCodecLanguageSoundex)

NSString *OrgApacheCommonsCodecLanguageSoundex_US_ENGLISH_MAPPING_STRING = @"01230120022455012623010202";
OrgApacheCommonsCodecLanguageSoundex *OrgApacheCommonsCodecLanguageSoundex_US_ENGLISH;

@implementation OrgApacheCommonsCodecLanguageSoundex

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageSoundex_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithCharArray:(IOSCharArray *)mapping {
  OrgApacheCommonsCodecLanguageSoundex_initWithCharArray_(self, mapping);
  return self;
}

- (instancetype)initWithNSString:(NSString *)mapping {
  OrgApacheCommonsCodecLanguageSoundex_initWithNSString_(self, mapping);
  return self;
}

- (jint)differenceWithNSString:(NSString *)s1
                  withNSString:(NSString *)s2 {
  return OrgApacheCommonsCodecLanguageSoundexUtils_differenceWithOrgApacheCommonsCodecStringEncoder_withNSString_withNSString_(self, s1, s2);
}

- (id)encodeWithId:(id)pObject {
  if (!([pObject isKindOfClass:[NSString class]])) {
    @throw new_OrgApacheCommonsCodecEncoderException_initWithNSString_(@"Parameter supplied to Soundex encode is not of type java.lang.String");
  }
  return [self soundexWithNSString:(NSString *) cast_chk(pObject, [NSString class])];
}

- (NSString *)encodeWithNSString:(NSString *)pString {
  return [self soundexWithNSString:pString];
}

- (jchar)getMappingCodeWithNSString:(NSString *)str
                            withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageSoundex_getMappingCodeWithNSString_withInt_(self, str, index);
}

- (jint)getMaxLength {
  return self->maxLength_;
}

- (IOSCharArray *)getSoundexMapping {
  return OrgApacheCommonsCodecLanguageSoundex_getSoundexMapping(self);
}

- (jchar)mapWithChar:(jchar)ch {
  return OrgApacheCommonsCodecLanguageSoundex_mapWithChar_(self, ch);
}

- (void)setMaxLengthWithInt:(jint)maxLength {
  self->maxLength_ = maxLength;
}

- (NSString *)soundexWithNSString:(NSString *)str {
  if (str == nil) {
    return nil;
  }
  str = OrgApacheCommonsCodecLanguageSoundexUtils_cleanWithNSString_(str);
  if ([((NSString *) nil_chk(str)) java_length] == 0) {
    return str;
  }
  IOSCharArray *out = [IOSCharArray newArrayWithChars:(jchar[]){ '0', '0', '0', '0' } count:4];
  jchar last;
  jchar mapped;
  jint incount = 1;
  jint count = 1;
  *IOSCharArray_GetRef(out, 0) = [str charAtWithInt:0];
  last = OrgApacheCommonsCodecLanguageSoundex_getMappingCodeWithNSString_withInt_(self, str, 0);
  while ((incount < [str java_length]) && (count < out->size_)) {
    mapped = OrgApacheCommonsCodecLanguageSoundex_getMappingCodeWithNSString_withInt_(self, str, incount++);
    if (mapped != 0) {
      if ((mapped != '0') && (mapped != last)) {
        *IOSCharArray_GetRef(out, count++) = mapped;
      }
      last = mapped;
    }
  }
  return [NSString java_stringWithCharacters:out];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "C", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithCharArray:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(differenceWithNSString:withNSString:);
  methods[4].selector = @selector(encodeWithId:);
  methods[5].selector = @selector(encodeWithNSString:);
  methods[6].selector = @selector(getMappingCodeWithNSString:withInt:);
  methods[7].selector = @selector(getMaxLength);
  methods[8].selector = @selector(getSoundexMapping);
  methods[9].selector = @selector(mapWithChar:);
  methods[10].selector = @selector(setMaxLengthWithInt:);
  methods[11].selector = @selector(soundexWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "US_ENGLISH_MAPPING_STRING", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "US_ENGLISH_MAPPING", "[C", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "US_ENGLISH", "LOrgApacheCommonsCodecLanguageSoundex;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "maxLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "soundexMapping_", "[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[C", "LNSString;", "difference", "LNSString;LNSString;", "LOrgApacheCommonsCodecEncoderException;", "encode", "LNSObject;", "getMappingCode", "LNSString;I", "map", "C", "setMaxLength", "I", "soundex", &OrgApacheCommonsCodecLanguageSoundex_US_ENGLISH_MAPPING_STRING, &OrgApacheCommonsCodecLanguageSoundex_US_ENGLISH_MAPPING, &OrgApacheCommonsCodecLanguageSoundex_US_ENGLISH };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageSoundex = { "Soundex", "org.apache.commons.codec.language", ptrTable, methods, fields, 7, 0x1, 12, 5, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageSoundex;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsCodecLanguageSoundex class]) {
    OrgApacheCommonsCodecLanguageSoundex_US_ENGLISH_MAPPING = [((NSString *) nil_chk(OrgApacheCommonsCodecLanguageSoundex_US_ENGLISH_MAPPING_STRING)) java_toCharArray];
    OrgApacheCommonsCodecLanguageSoundex_US_ENGLISH = new_OrgApacheCommonsCodecLanguageSoundex_init();
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsCodecLanguageSoundex)
  }
}

@end

void OrgApacheCommonsCodecLanguageSoundex_init(OrgApacheCommonsCodecLanguageSoundex *self) {
  NSObject_init(self);
  self->maxLength_ = 4;
  self->soundexMapping_ = OrgApacheCommonsCodecLanguageSoundex_US_ENGLISH_MAPPING;
}

OrgApacheCommonsCodecLanguageSoundex *new_OrgApacheCommonsCodecLanguageSoundex_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageSoundex, init)
}

OrgApacheCommonsCodecLanguageSoundex *create_OrgApacheCommonsCodecLanguageSoundex_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageSoundex, init)
}

void OrgApacheCommonsCodecLanguageSoundex_initWithCharArray_(OrgApacheCommonsCodecLanguageSoundex *self, IOSCharArray *mapping) {
  NSObject_init(self);
  self->maxLength_ = 4;
  self->soundexMapping_ = [IOSCharArray newArrayWithLength:((IOSCharArray *) nil_chk(mapping))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mapping, 0, self->soundexMapping_, 0, mapping->size_);
}

OrgApacheCommonsCodecLanguageSoundex *new_OrgApacheCommonsCodecLanguageSoundex_initWithCharArray_(IOSCharArray *mapping) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageSoundex, initWithCharArray_, mapping)
}

OrgApacheCommonsCodecLanguageSoundex *create_OrgApacheCommonsCodecLanguageSoundex_initWithCharArray_(IOSCharArray *mapping) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageSoundex, initWithCharArray_, mapping)
}

void OrgApacheCommonsCodecLanguageSoundex_initWithNSString_(OrgApacheCommonsCodecLanguageSoundex *self, NSString *mapping) {
  NSObject_init(self);
  self->maxLength_ = 4;
  self->soundexMapping_ = [((NSString *) nil_chk(mapping)) java_toCharArray];
}

OrgApacheCommonsCodecLanguageSoundex *new_OrgApacheCommonsCodecLanguageSoundex_initWithNSString_(NSString *mapping) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageSoundex, initWithNSString_, mapping)
}

OrgApacheCommonsCodecLanguageSoundex *create_OrgApacheCommonsCodecLanguageSoundex_initWithNSString_(NSString *mapping) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageSoundex, initWithNSString_, mapping)
}

jchar OrgApacheCommonsCodecLanguageSoundex_getMappingCodeWithNSString_withInt_(OrgApacheCommonsCodecLanguageSoundex *self, NSString *str, jint index) {
  jchar mappedChar = OrgApacheCommonsCodecLanguageSoundex_mapWithChar_(self, [((NSString *) nil_chk(str)) charAtWithInt:index]);
  if (index > 1 && mappedChar != '0') {
    jchar hwChar = [str charAtWithInt:index - 1];
    if ('H' == hwChar || 'W' == hwChar) {
      jchar preHWChar = [str charAtWithInt:index - 2];
      jchar firstCode = OrgApacheCommonsCodecLanguageSoundex_mapWithChar_(self, preHWChar);
      if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
        return 0;
      }
    }
  }
  return mappedChar;
}

IOSCharArray *OrgApacheCommonsCodecLanguageSoundex_getSoundexMapping(OrgApacheCommonsCodecLanguageSoundex *self) {
  return self->soundexMapping_;
}

jchar OrgApacheCommonsCodecLanguageSoundex_mapWithChar_(OrgApacheCommonsCodecLanguageSoundex *self, jchar ch) {
  jint index = ch - 'A';
  if (index < 0 || index >= ((IOSCharArray *) nil_chk(OrgApacheCommonsCodecLanguageSoundex_getSoundexMapping(self)))->size_) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C", @"The character is not mapped: ", ch));
  }
  return IOSCharArray_Get(nil_chk(OrgApacheCommonsCodecLanguageSoundex_getSoundexMapping(self)), index);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageSoundex)
