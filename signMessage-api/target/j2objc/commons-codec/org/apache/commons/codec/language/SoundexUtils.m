//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/commons-codec/org/apache/commons/codec/language/SoundexUtils.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/Math.h"
#include "java/util/Locale.h"
#include "org/apache/commons/codec/StringEncoder.h"
#include "org/apache/commons/codec/language/SoundexUtils.h"

@implementation OrgApacheCommonsCodecLanguageSoundexUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageSoundexUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)cleanWithNSString:(NSString *)str {
  return OrgApacheCommonsCodecLanguageSoundexUtils_cleanWithNSString_(str);
}

+ (jint)differenceWithOrgApacheCommonsCodecStringEncoder:(id<OrgApacheCommonsCodecStringEncoder>)encoder
                                            withNSString:(NSString *)s1
                                            withNSString:(NSString *)s2 {
  return OrgApacheCommonsCodecLanguageSoundexUtils_differenceWithOrgApacheCommonsCodecStringEncoder_withNSString_withNSString_(encoder, s1, s2);
}

+ (jint)differenceEncodedWithNSString:(NSString *)es1
                         withNSString:(NSString *)es2 {
  return OrgApacheCommonsCodecLanguageSoundexUtils_differenceEncodedWithNSString_withNSString_(es1, es2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 2, 3, 4, -1, -1, -1 },
    { NULL, "I", 0x8, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(cleanWithNSString:);
  methods[2].selector = @selector(differenceWithOrgApacheCommonsCodecStringEncoder:withNSString:withNSString:);
  methods[3].selector = @selector(differenceEncodedWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "clean", "LNSString;", "difference", "LOrgApacheCommonsCodecStringEncoder;LNSString;LNSString;", "LOrgApacheCommonsCodecEncoderException;", "differenceEncoded", "LNSString;LNSString;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageSoundexUtils = { "SoundexUtils", "org.apache.commons.codec.language", ptrTable, methods, NULL, 7, 0x10, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageSoundexUtils;
}

@end

void OrgApacheCommonsCodecLanguageSoundexUtils_init(OrgApacheCommonsCodecLanguageSoundexUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsCodecLanguageSoundexUtils *new_OrgApacheCommonsCodecLanguageSoundexUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageSoundexUtils, init)
}

OrgApacheCommonsCodecLanguageSoundexUtils *create_OrgApacheCommonsCodecLanguageSoundexUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageSoundexUtils, init)
}

NSString *OrgApacheCommonsCodecLanguageSoundexUtils_cleanWithNSString_(NSString *str) {
  OrgApacheCommonsCodecLanguageSoundexUtils_initialize();
  if (str == nil || [str java_length] == 0) {
    return str;
  }
  jint len = [str java_length];
  IOSCharArray *chars = [IOSCharArray newArrayWithLength:len];
  jint count = 0;
  for (jint i = 0; i < len; i++) {
    if (JavaLangCharacter_isLetterWithChar_([str charAtWithInt:i])) {
      *IOSCharArray_GetRef(chars, count++) = [str charAtWithInt:i];
    }
  }
  if (count == len) {
    return [str java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)];
  }
  return [[NSString java_stringWithCharacters:chars offset:0 length:count] java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)];
}

jint OrgApacheCommonsCodecLanguageSoundexUtils_differenceWithOrgApacheCommonsCodecStringEncoder_withNSString_withNSString_(id<OrgApacheCommonsCodecStringEncoder> encoder, NSString *s1, NSString *s2) {
  OrgApacheCommonsCodecLanguageSoundexUtils_initialize();
  return OrgApacheCommonsCodecLanguageSoundexUtils_differenceEncodedWithNSString_withNSString_([((id<OrgApacheCommonsCodecStringEncoder>) nil_chk(encoder)) encodeWithNSString:s1], [encoder encodeWithNSString:s2]);
}

jint OrgApacheCommonsCodecLanguageSoundexUtils_differenceEncodedWithNSString_withNSString_(NSString *es1, NSString *es2) {
  OrgApacheCommonsCodecLanguageSoundexUtils_initialize();
  if (es1 == nil || es2 == nil) {
    return 0;
  }
  jint lengthToMatch = JavaLangMath_minWithInt_withInt_([es1 java_length], [es2 java_length]);
  jint diff = 0;
  for (jint i = 0; i < lengthToMatch; i++) {
    if ([es1 charAtWithInt:i] == [es2 charAtWithInt:i]) {
      diff++;
    }
  }
  return diff;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageSoundexUtils)
