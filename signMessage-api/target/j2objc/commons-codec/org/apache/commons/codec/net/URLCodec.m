//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/commons-codec/org/apache/commons/codec/net/URLCodec.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Character.h"
#include "java/util/BitSet.h"
#include "org/apache/commons/codec/CharEncoding.h"
#include "org/apache/commons/codec/DecoderException.h"
#include "org/apache/commons/codec/EncoderException.h"
#include "org/apache/commons/codec/binary/StringUtils.h"
#include "org/apache/commons/codec/net/URLCodec.h"
#include "org/apache/commons/codec/net/Utils.h"

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsCodecNetURLCodec)

JavaUtilBitSet *OrgApacheCommonsCodecNetURLCodec_WWW_FORM_URL;

@implementation OrgApacheCommonsCodecNetURLCodec

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecNetURLCodec_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)charset {
  OrgApacheCommonsCodecNetURLCodec_initWithNSString_(self, charset);
  return self;
}

+ (IOSByteArray *)encodeUrlWithJavaUtilBitSet:(JavaUtilBitSet *)urlsafe
                                withByteArray:(IOSByteArray *)bytes {
  return OrgApacheCommonsCodecNetURLCodec_encodeUrlWithJavaUtilBitSet_withByteArray_(urlsafe, bytes);
}

+ (IOSByteArray *)decodeUrlWithByteArray:(IOSByteArray *)bytes {
  return OrgApacheCommonsCodecNetURLCodec_decodeUrlWithByteArray_(bytes);
}

- (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)bytes {
  return OrgApacheCommonsCodecNetURLCodec_encodeUrlWithJavaUtilBitSet_withByteArray_(OrgApacheCommonsCodecNetURLCodec_WWW_FORM_URL, bytes);
}

- (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)bytes {
  return OrgApacheCommonsCodecNetURLCodec_decodeUrlWithByteArray_(bytes);
}

- (NSString *)encodeWithNSString:(NSString *)pString
                    withNSString:(NSString *)charset {
  if (pString == nil) {
    return nil;
  }
  return OrgApacheCommonsCodecBinaryStringUtils_newStringUsAsciiWithByteArray_([self encodeWithByteArray:[pString java_getBytesWithCharsetName:charset]]);
}

- (NSString *)encodeWithNSString:(NSString *)pString {
  if (pString == nil) {
    return nil;
  }
  @try {
    return [self encodeWithNSString:pString withNSString:[self getDefaultCharset]];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw new_OrgApacheCommonsCodecEncoderException_initWithNSString_withJavaLangThrowable_([e getMessage], e);
  }
}

- (NSString *)decodeWithNSString:(NSString *)pString
                    withNSString:(NSString *)charset {
  if (pString == nil) {
    return nil;
  }
  return [NSString java_stringWithBytes:[self decodeWithByteArray:OrgApacheCommonsCodecBinaryStringUtils_getBytesUsAsciiWithNSString_(pString)] charsetName:charset];
}

- (NSString *)decodeWithNSString:(NSString *)pString {
  if (pString == nil) {
    return nil;
  }
  @try {
    return [self decodeWithNSString:pString withNSString:[self getDefaultCharset]];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw new_OrgApacheCommonsCodecDecoderException_initWithNSString_withJavaLangThrowable_([e getMessage], e);
  }
}

- (id)encodeWithId:(id)pObject {
  if (pObject == nil) {
    return nil;
  }
  else if ([pObject isKindOfClass:[IOSByteArray class]]) {
    return [self encodeWithByteArray:(IOSByteArray *) cast_chk(pObject, [IOSByteArray class])];
  }
  else if ([pObject isKindOfClass:[NSString class]]) {
    return [self encodeWithNSString:(NSString *) pObject];
  }
  else {
    @throw new_OrgApacheCommonsCodecEncoderException_initWithNSString_(JreStrcat("$$$", @"Objects of type ", [[pObject java_getClass] getName], @" cannot be URL encoded"));
  }
}

- (id)decodeWithId:(id)pObject {
  if (pObject == nil) {
    return nil;
  }
  else if ([pObject isKindOfClass:[IOSByteArray class]]) {
    return [self decodeWithByteArray:(IOSByteArray *) cast_chk(pObject, [IOSByteArray class])];
  }
  else if ([pObject isKindOfClass:[NSString class]]) {
    return [self decodeWithNSString:(NSString *) pObject];
  }
  else {
    @throw new_OrgApacheCommonsCodecDecoderException_initWithNSString_(JreStrcat("$$$", @"Objects of type ", [[pObject java_getClass] getName], @" cannot be URL decoded"));
  }
}

- (NSString *)getDefaultCharset {
  return self->charset_;
}

- (NSString *)getEncoding {
  return self->charset_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0x19, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x19, 3, 4, 5, -1, -1, -1 },
    { NULL, "[B", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 7, 4, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 8, 9, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 0, 10, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 8, 11, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 0, 5, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 12, 10, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 12, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(encodeUrlWithJavaUtilBitSet:withByteArray:);
  methods[3].selector = @selector(decodeUrlWithByteArray:);
  methods[4].selector = @selector(encodeWithByteArray:);
  methods[5].selector = @selector(decodeWithByteArray:);
  methods[6].selector = @selector(encodeWithNSString:withNSString:);
  methods[7].selector = @selector(encodeWithNSString:);
  methods[8].selector = @selector(decodeWithNSString:withNSString:);
  methods[9].selector = @selector(decodeWithNSString:);
  methods[10].selector = @selector(encodeWithId:);
  methods[11].selector = @selector(decodeWithId:);
  methods[12].selector = @selector(getDefaultCharset);
  methods[13].selector = @selector(getEncoding);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "RADIX", "I", .constantValue.asInt = OrgApacheCommonsCodecNetURLCodec_RADIX, 0x18, -1, -1, -1, -1 },
    { "charset_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ESCAPE_CHAR", "B", .constantValue.asChar = OrgApacheCommonsCodecNetURLCodec_ESCAPE_CHAR, 0x1c, -1, -1, -1, -1 },
    { "WWW_FORM_URL", "LJavaUtilBitSet;", .constantValue.asLong = 0, 0x1c, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "encodeUrl", "LJavaUtilBitSet;[B", "decodeUrl", "[B", "LOrgApacheCommonsCodecDecoderException;", "encode", "decode", "LNSString;LNSString;", "LJavaIoUnsupportedEncodingException;", "LOrgApacheCommonsCodecEncoderException;", "LOrgApacheCommonsCodecDecoderException;LJavaIoUnsupportedEncodingException;", "LNSObject;", &OrgApacheCommonsCodecNetURLCodec_WWW_FORM_URL };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecNetURLCodec = { "URLCodec", "org.apache.commons.codec.net", ptrTable, methods, fields, 7, 0x1, 14, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecNetURLCodec;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsCodecNetURLCodec class]) {
    OrgApacheCommonsCodecNetURLCodec_WWW_FORM_URL = new_JavaUtilBitSet_initWithInt_(256);
    {
      for (jint i = 'a'; i <= 'z'; i++) {
        [OrgApacheCommonsCodecNetURLCodec_WWW_FORM_URL setWithInt:i];
      }
      for (jint i = 'A'; i <= 'Z'; i++) {
        [OrgApacheCommonsCodecNetURLCodec_WWW_FORM_URL setWithInt:i];
      }
      for (jint i = '0'; i <= '9'; i++) {
        [OrgApacheCommonsCodecNetURLCodec_WWW_FORM_URL setWithInt:i];
      }
      [OrgApacheCommonsCodecNetURLCodec_WWW_FORM_URL setWithInt:'-'];
      [OrgApacheCommonsCodecNetURLCodec_WWW_FORM_URL setWithInt:'_'];
      [OrgApacheCommonsCodecNetURLCodec_WWW_FORM_URL setWithInt:'.'];
      [OrgApacheCommonsCodecNetURLCodec_WWW_FORM_URL setWithInt:'*'];
      [OrgApacheCommonsCodecNetURLCodec_WWW_FORM_URL setWithInt:' '];
    }
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsCodecNetURLCodec)
  }
}

@end

void OrgApacheCommonsCodecNetURLCodec_init(OrgApacheCommonsCodecNetURLCodec *self) {
  OrgApacheCommonsCodecNetURLCodec_initWithNSString_(self, OrgApacheCommonsCodecCharEncoding_UTF_8);
}

OrgApacheCommonsCodecNetURLCodec *new_OrgApacheCommonsCodecNetURLCodec_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecNetURLCodec, init)
}

OrgApacheCommonsCodecNetURLCodec *create_OrgApacheCommonsCodecNetURLCodec_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecNetURLCodec, init)
}

void OrgApacheCommonsCodecNetURLCodec_initWithNSString_(OrgApacheCommonsCodecNetURLCodec *self, NSString *charset) {
  NSObject_init(self);
  self->charset_ = charset;
}

OrgApacheCommonsCodecNetURLCodec *new_OrgApacheCommonsCodecNetURLCodec_initWithNSString_(NSString *charset) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecNetURLCodec, initWithNSString_, charset)
}

OrgApacheCommonsCodecNetURLCodec *create_OrgApacheCommonsCodecNetURLCodec_initWithNSString_(NSString *charset) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecNetURLCodec, initWithNSString_, charset)
}

IOSByteArray *OrgApacheCommonsCodecNetURLCodec_encodeUrlWithJavaUtilBitSet_withByteArray_(JavaUtilBitSet *urlsafe, IOSByteArray *bytes) {
  OrgApacheCommonsCodecNetURLCodec_initialize();
  if (bytes == nil) {
    return nil;
  }
  if (urlsafe == nil) {
    urlsafe = OrgApacheCommonsCodecNetURLCodec_WWW_FORM_URL;
  }
  JavaIoByteArrayOutputStream *buffer = new_JavaIoByteArrayOutputStream_init();
  {
    IOSByteArray *a__ = bytes;
    jbyte const *b__ = a__->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte c = *b__++;
      jint b = c;
      if (b < 0) {
        b = 256 + b;
      }
      if ([((JavaUtilBitSet *) nil_chk(urlsafe)) getWithInt:b]) {
        if (b == ' ') {
          b = '+';
        }
        [buffer writeWithInt:b];
      }
      else {
        [buffer writeWithInt:OrgApacheCommonsCodecNetURLCodec_ESCAPE_CHAR];
        jchar hex1 = JavaLangCharacter_toUpperCaseWithChar_(JavaLangCharacter_forDigitWithInt_withInt_((JreRShift32(b, 4)) & (jint) 0xF, OrgApacheCommonsCodecNetURLCodec_RADIX));
        jchar hex2 = JavaLangCharacter_toUpperCaseWithChar_(JavaLangCharacter_forDigitWithInt_withInt_(b & (jint) 0xF, OrgApacheCommonsCodecNetURLCodec_RADIX));
        [buffer writeWithInt:hex1];
        [buffer writeWithInt:hex2];
      }
    }
  }
  return [buffer toByteArray];
}

IOSByteArray *OrgApacheCommonsCodecNetURLCodec_decodeUrlWithByteArray_(IOSByteArray *bytes) {
  OrgApacheCommonsCodecNetURLCodec_initialize();
  if (bytes == nil) {
    return nil;
  }
  JavaIoByteArrayOutputStream *buffer = new_JavaIoByteArrayOutputStream_init();
  for (jint i = 0; i < bytes->size_; i++) {
    jint b = IOSByteArray_Get(bytes, i);
    if (b == '+') {
      [buffer writeWithInt:' '];
    }
    else if (b == OrgApacheCommonsCodecNetURLCodec_ESCAPE_CHAR) {
      @try {
        jint u = OrgApacheCommonsCodecNetUtils_digit16WithByte_(IOSByteArray_Get(bytes, ++i));
        jint l = OrgApacheCommonsCodecNetUtils_digit16WithByte_(IOSByteArray_Get(bytes, ++i));
        [buffer writeWithInt:(jchar) ((JreLShift32(u, 4)) + l)];
      }
      @catch (JavaLangArrayIndexOutOfBoundsException *e) {
        @throw new_OrgApacheCommonsCodecDecoderException_initWithNSString_withJavaLangThrowable_(@"Invalid URL encoding: ", e);
      }
    }
    else {
      [buffer writeWithInt:b];
    }
  }
  return [buffer toByteArray];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecNetURLCodec)
