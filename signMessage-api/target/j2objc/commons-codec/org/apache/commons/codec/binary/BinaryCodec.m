//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/commons-codec/org/apache/commons/codec/binary/BinaryCodec.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/commons/codec/DecoderException.h"
#include "org/apache/commons/codec/EncoderException.h"
#include "org/apache/commons/codec/binary/BinaryCodec.h"

@interface OrgApacheCommonsCodecBinaryBinaryCodec ()

+ (jboolean)isEmptyWithByteArray:(IOSByteArray *)array;

@end

inline IOSCharArray *OrgApacheCommonsCodecBinaryBinaryCodec_get_EMPTY_CHAR_ARRAY(void);
static IOSCharArray *OrgApacheCommonsCodecBinaryBinaryCodec_EMPTY_CHAR_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecBinaryBinaryCodec, EMPTY_CHAR_ARRAY, IOSCharArray *)

inline IOSByteArray *OrgApacheCommonsCodecBinaryBinaryCodec_get_EMPTY_BYTE_ARRAY(void);
static IOSByteArray *OrgApacheCommonsCodecBinaryBinaryCodec_EMPTY_BYTE_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecBinaryBinaryCodec, EMPTY_BYTE_ARRAY, IOSByteArray *)

inline jint OrgApacheCommonsCodecBinaryBinaryCodec_get_BIT_0(void);
#define OrgApacheCommonsCodecBinaryBinaryCodec_BIT_0 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBinaryCodec, BIT_0, jint)

inline jint OrgApacheCommonsCodecBinaryBinaryCodec_get_BIT_1(void);
#define OrgApacheCommonsCodecBinaryBinaryCodec_BIT_1 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBinaryCodec, BIT_1, jint)

inline jint OrgApacheCommonsCodecBinaryBinaryCodec_get_BIT_2(void);
#define OrgApacheCommonsCodecBinaryBinaryCodec_BIT_2 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBinaryCodec, BIT_2, jint)

inline jint OrgApacheCommonsCodecBinaryBinaryCodec_get_BIT_3(void);
#define OrgApacheCommonsCodecBinaryBinaryCodec_BIT_3 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBinaryCodec, BIT_3, jint)

inline jint OrgApacheCommonsCodecBinaryBinaryCodec_get_BIT_4(void);
#define OrgApacheCommonsCodecBinaryBinaryCodec_BIT_4 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBinaryCodec, BIT_4, jint)

inline jint OrgApacheCommonsCodecBinaryBinaryCodec_get_BIT_5(void);
#define OrgApacheCommonsCodecBinaryBinaryCodec_BIT_5 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBinaryCodec, BIT_5, jint)

inline jint OrgApacheCommonsCodecBinaryBinaryCodec_get_BIT_6(void);
#define OrgApacheCommonsCodecBinaryBinaryCodec_BIT_6 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBinaryCodec, BIT_6, jint)

inline jint OrgApacheCommonsCodecBinaryBinaryCodec_get_BIT_7(void);
#define OrgApacheCommonsCodecBinaryBinaryCodec_BIT_7 128
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBinaryCodec, BIT_7, jint)

inline IOSIntArray *OrgApacheCommonsCodecBinaryBinaryCodec_get_BITS(void);
static IOSIntArray *OrgApacheCommonsCodecBinaryBinaryCodec_BITS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecBinaryBinaryCodec, BITS, IOSIntArray *)

__attribute__((unused)) static jboolean OrgApacheCommonsCodecBinaryBinaryCodec_isEmptyWithByteArray_(IOSByteArray *array);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsCodecBinaryBinaryCodec)

@implementation OrgApacheCommonsCodecBinaryBinaryCodec

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecBinaryBinaryCodec_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)raw {
  return OrgApacheCommonsCodecBinaryBinaryCodec_toAsciiBytesWithByteArray_(raw);
}

- (id)encodeWithId:(id)raw {
  if (!([raw isKindOfClass:[IOSByteArray class]])) {
    @throw new_OrgApacheCommonsCodecEncoderException_initWithNSString_(@"argument not a byte array");
  }
  return OrgApacheCommonsCodecBinaryBinaryCodec_toAsciiCharsWithByteArray_((IOSByteArray *) cast_chk(raw, [IOSByteArray class]));
}

- (id)decodeWithId:(id)ascii {
  if (ascii == nil) {
    return OrgApacheCommonsCodecBinaryBinaryCodec_EMPTY_BYTE_ARRAY;
  }
  if ([ascii isKindOfClass:[IOSByteArray class]]) {
    return OrgApacheCommonsCodecBinaryBinaryCodec_fromAsciiWithByteArray_((IOSByteArray *) cast_chk(ascii, [IOSByteArray class]));
  }
  if ([ascii isKindOfClass:[IOSCharArray class]]) {
    return OrgApacheCommonsCodecBinaryBinaryCodec_fromAsciiWithCharArray_((IOSCharArray *) cast_chk(ascii, [IOSCharArray class]));
  }
  if ([ascii isKindOfClass:[NSString class]]) {
    return OrgApacheCommonsCodecBinaryBinaryCodec_fromAsciiWithCharArray_([((NSString *) ascii) java_toCharArray]);
  }
  @throw new_OrgApacheCommonsCodecDecoderException_initWithNSString_(@"argument not a byte array");
}

- (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)ascii {
  return OrgApacheCommonsCodecBinaryBinaryCodec_fromAsciiWithByteArray_(ascii);
}

- (IOSByteArray *)toByteArrayWithNSString:(NSString *)ascii {
  if (ascii == nil) {
    return OrgApacheCommonsCodecBinaryBinaryCodec_EMPTY_BYTE_ARRAY;
  }
  return OrgApacheCommonsCodecBinaryBinaryCodec_fromAsciiWithCharArray_([ascii java_toCharArray]);
}

+ (IOSByteArray *)fromAsciiWithCharArray:(IOSCharArray *)ascii {
  return OrgApacheCommonsCodecBinaryBinaryCodec_fromAsciiWithCharArray_(ascii);
}

+ (IOSByteArray *)fromAsciiWithByteArray:(IOSByteArray *)ascii {
  return OrgApacheCommonsCodecBinaryBinaryCodec_fromAsciiWithByteArray_(ascii);
}

+ (jboolean)isEmptyWithByteArray:(IOSByteArray *)array {
  return OrgApacheCommonsCodecBinaryBinaryCodec_isEmptyWithByteArray_(array);
}

+ (IOSByteArray *)toAsciiBytesWithByteArray:(IOSByteArray *)raw {
  return OrgApacheCommonsCodecBinaryBinaryCodec_toAsciiBytesWithByteArray_(raw);
}

+ (IOSCharArray *)toAsciiCharsWithByteArray:(IOSByteArray *)raw {
  return OrgApacheCommonsCodecBinaryBinaryCodec_toAsciiCharsWithByteArray_(raw);
}

+ (NSString *)toAsciiStringWithByteArray:(IOSByteArray *)raw {
  return OrgApacheCommonsCodecBinaryBinaryCodec_toAsciiStringWithByteArray_(raw);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 2, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 2, 5, -1, -1, -1 },
    { NULL, "[B", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 8, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 10, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 11, 1, -1, -1, -1, -1 },
    { NULL, "[C", 0x9, 12, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encodeWithByteArray:);
  methods[2].selector = @selector(encodeWithId:);
  methods[3].selector = @selector(decodeWithId:);
  methods[4].selector = @selector(decodeWithByteArray:);
  methods[5].selector = @selector(toByteArrayWithNSString:);
  methods[6].selector = @selector(fromAsciiWithCharArray:);
  methods[7].selector = @selector(fromAsciiWithByteArray:);
  methods[8].selector = @selector(isEmptyWithByteArray:);
  methods[9].selector = @selector(toAsciiBytesWithByteArray:);
  methods[10].selector = @selector(toAsciiCharsWithByteArray:);
  methods[11].selector = @selector(toAsciiStringWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_CHAR_ARRAY", "[C", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "EMPTY_BYTE_ARRAY", "[B", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "BIT_0", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBinaryCodec_BIT_0, 0x1a, -1, -1, -1, -1 },
    { "BIT_1", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBinaryCodec_BIT_1, 0x1a, -1, -1, -1, -1 },
    { "BIT_2", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBinaryCodec_BIT_2, 0x1a, -1, -1, -1, -1 },
    { "BIT_3", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBinaryCodec_BIT_3, 0x1a, -1, -1, -1, -1 },
    { "BIT_4", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBinaryCodec_BIT_4, 0x1a, -1, -1, -1, -1 },
    { "BIT_5", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBinaryCodec_BIT_5, 0x1a, -1, -1, -1, -1 },
    { "BIT_6", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBinaryCodec_BIT_6, 0x1a, -1, -1, -1, -1 },
    { "BIT_7", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBinaryCodec_BIT_7, 0x1a, -1, -1, -1, -1 },
    { "BITS", "[I", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
  };
  static const void *ptrTable[] = { "encode", "[B", "LNSObject;", "LOrgApacheCommonsCodecEncoderException;", "decode", "LOrgApacheCommonsCodecDecoderException;", "toByteArray", "LNSString;", "fromAscii", "[C", "isEmpty", "toAsciiBytes", "toAsciiChars", "toAsciiString", &OrgApacheCommonsCodecBinaryBinaryCodec_EMPTY_CHAR_ARRAY, &OrgApacheCommonsCodecBinaryBinaryCodec_EMPTY_BYTE_ARRAY, &OrgApacheCommonsCodecBinaryBinaryCodec_BITS };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecBinaryBinaryCodec = { "BinaryCodec", "org.apache.commons.codec.binary", ptrTable, methods, fields, 7, 0x1, 12, 11, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecBinaryBinaryCodec;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsCodecBinaryBinaryCodec class]) {
    OrgApacheCommonsCodecBinaryBinaryCodec_EMPTY_CHAR_ARRAY = [IOSCharArray newArrayWithLength:0];
    OrgApacheCommonsCodecBinaryBinaryCodec_EMPTY_BYTE_ARRAY = [IOSByteArray newArrayWithLength:0];
    OrgApacheCommonsCodecBinaryBinaryCodec_BITS = [IOSIntArray newArrayWithInts:(jint[]){ OrgApacheCommonsCodecBinaryBinaryCodec_BIT_0, OrgApacheCommonsCodecBinaryBinaryCodec_BIT_1, OrgApacheCommonsCodecBinaryBinaryCodec_BIT_2, OrgApacheCommonsCodecBinaryBinaryCodec_BIT_3, OrgApacheCommonsCodecBinaryBinaryCodec_BIT_4, OrgApacheCommonsCodecBinaryBinaryCodec_BIT_5, OrgApacheCommonsCodecBinaryBinaryCodec_BIT_6, OrgApacheCommonsCodecBinaryBinaryCodec_BIT_7 } count:8];
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsCodecBinaryBinaryCodec)
  }
}

@end

void OrgApacheCommonsCodecBinaryBinaryCodec_init(OrgApacheCommonsCodecBinaryBinaryCodec *self) {
  NSObject_init(self);
}

OrgApacheCommonsCodecBinaryBinaryCodec *new_OrgApacheCommonsCodecBinaryBinaryCodec_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecBinaryBinaryCodec, init)
}

OrgApacheCommonsCodecBinaryBinaryCodec *create_OrgApacheCommonsCodecBinaryBinaryCodec_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecBinaryBinaryCodec, init)
}

IOSByteArray *OrgApacheCommonsCodecBinaryBinaryCodec_fromAsciiWithCharArray_(IOSCharArray *ascii) {
  OrgApacheCommonsCodecBinaryBinaryCodec_initialize();
  if (ascii == nil || ascii->size_ == 0) {
    return OrgApacheCommonsCodecBinaryBinaryCodec_EMPTY_BYTE_ARRAY;
  }
  IOSByteArray *l_raw = [IOSByteArray newArrayWithLength:JreRShift32(ascii->size_, 3)];
  for (jint ii = 0, jj = ascii->size_ - 1; ii < l_raw->size_; ii++, jj -= 8) {
    for (jint bits = 0; bits < ((IOSIntArray *) nil_chk(OrgApacheCommonsCodecBinaryBinaryCodec_BITS))->size_; ++bits) {
      if (IOSCharArray_Get(ascii, jj - bits) == '1') {
        *IOSByteArray_GetRef(l_raw, ii) |= IOSIntArray_Get(OrgApacheCommonsCodecBinaryBinaryCodec_BITS, bits);
      }
    }
  }
  return l_raw;
}

IOSByteArray *OrgApacheCommonsCodecBinaryBinaryCodec_fromAsciiWithByteArray_(IOSByteArray *ascii) {
  OrgApacheCommonsCodecBinaryBinaryCodec_initialize();
  if (OrgApacheCommonsCodecBinaryBinaryCodec_isEmptyWithByteArray_(ascii)) {
    return OrgApacheCommonsCodecBinaryBinaryCodec_EMPTY_BYTE_ARRAY;
  }
  IOSByteArray *l_raw = [IOSByteArray newArrayWithLength:JreRShift32(((IOSByteArray *) nil_chk(ascii))->size_, 3)];
  for (jint ii = 0, jj = ascii->size_ - 1; ii < l_raw->size_; ii++, jj -= 8) {
    for (jint bits = 0; bits < ((IOSIntArray *) nil_chk(OrgApacheCommonsCodecBinaryBinaryCodec_BITS))->size_; ++bits) {
      if (IOSByteArray_Get(ascii, jj - bits) == '1') {
        *IOSByteArray_GetRef(l_raw, ii) |= IOSIntArray_Get(OrgApacheCommonsCodecBinaryBinaryCodec_BITS, bits);
      }
    }
  }
  return l_raw;
}

jboolean OrgApacheCommonsCodecBinaryBinaryCodec_isEmptyWithByteArray_(IOSByteArray *array) {
  OrgApacheCommonsCodecBinaryBinaryCodec_initialize();
  return array == nil || array->size_ == 0;
}

IOSByteArray *OrgApacheCommonsCodecBinaryBinaryCodec_toAsciiBytesWithByteArray_(IOSByteArray *raw) {
  OrgApacheCommonsCodecBinaryBinaryCodec_initialize();
  if (OrgApacheCommonsCodecBinaryBinaryCodec_isEmptyWithByteArray_(raw)) {
    return OrgApacheCommonsCodecBinaryBinaryCodec_EMPTY_BYTE_ARRAY;
  }
  IOSByteArray *l_ascii = [IOSByteArray newArrayWithLength:JreLShift32(((IOSByteArray *) nil_chk(raw))->size_, 3)];
  for (jint ii = 0, jj = l_ascii->size_ - 1; ii < raw->size_; ii++, jj -= 8) {
    for (jint bits = 0; bits < ((IOSIntArray *) nil_chk(OrgApacheCommonsCodecBinaryBinaryCodec_BITS))->size_; ++bits) {
      if ((IOSByteArray_Get(raw, ii) & IOSIntArray_Get(OrgApacheCommonsCodecBinaryBinaryCodec_BITS, bits)) == 0) {
        *IOSByteArray_GetRef(l_ascii, jj - bits) = '0';
      }
      else {
        *IOSByteArray_GetRef(l_ascii, jj - bits) = '1';
      }
    }
  }
  return l_ascii;
}

IOSCharArray *OrgApacheCommonsCodecBinaryBinaryCodec_toAsciiCharsWithByteArray_(IOSByteArray *raw) {
  OrgApacheCommonsCodecBinaryBinaryCodec_initialize();
  if (OrgApacheCommonsCodecBinaryBinaryCodec_isEmptyWithByteArray_(raw)) {
    return OrgApacheCommonsCodecBinaryBinaryCodec_EMPTY_CHAR_ARRAY;
  }
  IOSCharArray *l_ascii = [IOSCharArray newArrayWithLength:JreLShift32(((IOSByteArray *) nil_chk(raw))->size_, 3)];
  for (jint ii = 0, jj = l_ascii->size_ - 1; ii < raw->size_; ii++, jj -= 8) {
    for (jint bits = 0; bits < ((IOSIntArray *) nil_chk(OrgApacheCommonsCodecBinaryBinaryCodec_BITS))->size_; ++bits) {
      if ((IOSByteArray_Get(raw, ii) & IOSIntArray_Get(OrgApacheCommonsCodecBinaryBinaryCodec_BITS, bits)) == 0) {
        *IOSCharArray_GetRef(l_ascii, jj - bits) = '0';
      }
      else {
        *IOSCharArray_GetRef(l_ascii, jj - bits) = '1';
      }
    }
  }
  return l_ascii;
}

NSString *OrgApacheCommonsCodecBinaryBinaryCodec_toAsciiStringWithByteArray_(IOSByteArray *raw) {
  OrgApacheCommonsCodecBinaryBinaryCodec_initialize();
  return [NSString java_stringWithCharacters:OrgApacheCommonsCodecBinaryBinaryCodec_toAsciiCharsWithByteArray_(raw)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecBinaryBinaryCodec)
