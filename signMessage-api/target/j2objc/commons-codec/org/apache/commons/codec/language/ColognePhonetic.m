//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/commons-codec/org/apache/commons/codec/language/ColognePhonetic.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/util/Locale.h"
#include "org/apache/commons/codec/EncoderException.h"
#include "org/apache/commons/codec/language/ColognePhonetic.h"

@interface OrgApacheCommonsCodecLanguageColognePhonetic ()

+ (jboolean)arrayContainsWithCharArray:(IOSCharArray *)arr
                              withChar:(jchar)key;

- (NSString *)preprocessWithNSString:(NSString *)text;

@end

inline IOSObjectArray *OrgApacheCommonsCodecLanguageColognePhonetic_get_PREPROCESS_MAP(void);
static IOSObjectArray *OrgApacheCommonsCodecLanguageColognePhonetic_PREPROCESS_MAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageColognePhonetic, PREPROCESS_MAP, IOSObjectArray *)

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageColognePhonetic_arrayContainsWithCharArray_withChar_(IOSCharArray *arr, jchar key);

__attribute__((unused)) static NSString *OrgApacheCommonsCodecLanguageColognePhonetic_preprocessWithNSString_(OrgApacheCommonsCodecLanguageColognePhonetic *self, NSString *text);

@interface OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer : NSObject {
 @public
  IOSCharArray *data_;
  jint length_;
}

- (instancetype)initWithOrgApacheCommonsCodecLanguageColognePhonetic:(OrgApacheCommonsCodecLanguageColognePhonetic *)outer$
                                                       withCharArray:(IOSCharArray *)data;

- (instancetype)initWithOrgApacheCommonsCodecLanguageColognePhonetic:(OrgApacheCommonsCodecLanguageColognePhonetic *)outer$
                                                             withInt:(jint)buffSize;

- (IOSCharArray *)copyDataWithInt:(jint)start
                          withInt:(jint)length OBJC_METHOD_FAMILY_NONE;

- (jint)length;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer)

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer, data_, IOSCharArray *)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withCharArray_(OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer *self, OrgApacheCommonsCodecLanguageColognePhonetic *outer$, IOSCharArray *data);

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withInt_(OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer *self, OrgApacheCommonsCodecLanguageColognePhonetic *outer$, jint buffSize);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer)

@interface OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer : OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer

- (instancetype)initWithOrgApacheCommonsCodecLanguageColognePhonetic:(OrgApacheCommonsCodecLanguageColognePhonetic *)outer$
                                                             withInt:(jint)buffSize;

- (void)addRightWithChar:(jchar)chr;

- (IOSCharArray *)copyDataWithInt:(jint)start
                          withInt:(jint)length OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withInt_(OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer *self, OrgApacheCommonsCodecLanguageColognePhonetic *outer$, jint buffSize);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer *new_OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withInt_(OrgApacheCommonsCodecLanguageColognePhonetic *outer$, jint buffSize) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer *create_OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withInt_(OrgApacheCommonsCodecLanguageColognePhonetic *outer$, jint buffSize);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer)

@interface OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer : OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer

- (instancetype)initWithOrgApacheCommonsCodecLanguageColognePhonetic:(OrgApacheCommonsCodecLanguageColognePhonetic *)outer$
                                                       withCharArray:(IOSCharArray *)data;

- (void)addLeftWithChar:(jchar)ch;

- (IOSCharArray *)copyDataWithInt:(jint)start
                          withInt:(jint)length OBJC_METHOD_FAMILY_NONE;

- (jchar)getNextChar;

- (jint)getNextPos;

- (jchar)removeNext;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withCharArray_(OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer *self, OrgApacheCommonsCodecLanguageColognePhonetic *outer$, IOSCharArray *data);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer *new_OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withCharArray_(OrgApacheCommonsCodecLanguageColognePhonetic *outer$, IOSCharArray *data) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer *create_OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withCharArray_(OrgApacheCommonsCodecLanguageColognePhonetic *outer$, IOSCharArray *data);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsCodecLanguageColognePhonetic)

@implementation OrgApacheCommonsCodecLanguageColognePhonetic

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageColognePhonetic_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)arrayContainsWithCharArray:(IOSCharArray *)arr
                              withChar:(jchar)key {
  return OrgApacheCommonsCodecLanguageColognePhonetic_arrayContainsWithCharArray_withChar_(arr, key);
}

- (NSString *)colognePhoneticWithNSString:(NSString *)text {
  if (text == nil) {
    return nil;
  }
  text = OrgApacheCommonsCodecLanguageColognePhonetic_preprocessWithNSString_(self, text);
  OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer *output = new_OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withInt_(self, [((NSString *) nil_chk(text)) java_length] * 2);
  OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer *input = new_OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withCharArray_(self, [text java_toCharArray]);
  jchar nextChar;
  jchar lastChar = '-';
  jchar lastCode = '/';
  jchar code;
  jchar chr;
  jint rightLength = [input length];
  while (rightLength > 0) {
    chr = [input removeNext];
    if ((rightLength = [input length]) > 0) {
      nextChar = [input getNextChar];
    }
    else {
      nextChar = '-';
    }
    if (OrgApacheCommonsCodecLanguageColognePhonetic_arrayContainsWithCharArray_withChar_([IOSCharArray newArrayWithChars:(jchar[]){ 'A', 'E', 'I', 'J', 'O', 'U', 'Y' } count:7], chr)) {
      code = '0';
    }
    else if (chr == 'H' || chr < 'A' || chr > 'Z') {
      if (lastCode == '/') {
        continue;
      }
      code = '-';
    }
    else if (chr == 'B' || (chr == 'P' && nextChar != 'H')) {
      code = '1';
    }
    else if ((chr == 'D' || chr == 'T') && !OrgApacheCommonsCodecLanguageColognePhonetic_arrayContainsWithCharArray_withChar_([IOSCharArray newArrayWithChars:(jchar[]){ 'S', 'C', 'Z' } count:3], nextChar)) {
      code = '2';
    }
    else if (OrgApacheCommonsCodecLanguageColognePhonetic_arrayContainsWithCharArray_withChar_([IOSCharArray newArrayWithChars:(jchar[]){ 'W', 'F', 'P', 'V' } count:4], chr)) {
      code = '3';
    }
    else if (OrgApacheCommonsCodecLanguageColognePhonetic_arrayContainsWithCharArray_withChar_([IOSCharArray newArrayWithChars:(jchar[]){ 'G', 'K', 'Q' } count:3], chr)) {
      code = '4';
    }
    else if (chr == 'X' && !OrgApacheCommonsCodecLanguageColognePhonetic_arrayContainsWithCharArray_withChar_([IOSCharArray newArrayWithChars:(jchar[]){ 'C', 'K', 'Q' } count:3], lastChar)) {
      code = '4';
      [input addLeftWithChar:'S'];
      rightLength++;
    }
    else if (chr == 'S' || chr == 'Z') {
      code = '8';
    }
    else if (chr == 'C') {
      if (lastCode == '/') {
        if (OrgApacheCommonsCodecLanguageColognePhonetic_arrayContainsWithCharArray_withChar_([IOSCharArray newArrayWithChars:(jchar[]){ 'A', 'H', 'K', 'L', 'O', 'Q', 'R', 'U', 'X' } count:9], nextChar)) {
          code = '4';
        }
        else {
          code = '8';
        }
      }
      else {
        if (OrgApacheCommonsCodecLanguageColognePhonetic_arrayContainsWithCharArray_withChar_([IOSCharArray newArrayWithChars:(jchar[]){ 'S', 'Z' } count:2], lastChar) || !OrgApacheCommonsCodecLanguageColognePhonetic_arrayContainsWithCharArray_withChar_([IOSCharArray newArrayWithChars:(jchar[]){ 'A', 'H', 'O', 'U', 'K', 'Q', 'X' } count:7], nextChar)) {
          code = '8';
        }
        else {
          code = '4';
        }
      }
    }
    else if (OrgApacheCommonsCodecLanguageColognePhonetic_arrayContainsWithCharArray_withChar_([IOSCharArray newArrayWithChars:(jchar[]){ 'T', 'D', 'X' } count:3], chr)) {
      code = '8';
    }
    else if (chr == 'R') {
      code = '7';
    }
    else if (chr == 'L') {
      code = '5';
    }
    else if (chr == 'M' || chr == 'N') {
      code = '6';
    }
    else {
      code = chr;
    }
    if (code != '-' && ((lastCode != code && (code != '0' || lastCode == '/')) || code < '0' || code > '8')) {
      [output addRightWithChar:code];
    }
    lastChar = chr;
    lastCode = code;
  }
  return [output description];
}

- (id)encodeWithId:(id)object {
  if (!([object isKindOfClass:[NSString class]])) {
    @throw new_OrgApacheCommonsCodecEncoderException_initWithNSString_(JreStrcat("$$$$C", @"This method's parameter was expected to be of the type ", [NSString_class_() getName], @". But actually it was of the type ", [[nil_chk(object) java_getClass] getName], '.'));
  }
  return [self encodeWithNSString:(NSString *) cast_chk(object, [NSString class])];
}

- (NSString *)encodeWithNSString:(NSString *)text {
  return [self colognePhoneticWithNSString:text];
}

- (jboolean)isEncodeEqualWithNSString:(NSString *)text1
                         withNSString:(NSString *)text2 {
  return [((NSString *) nil_chk([self colognePhoneticWithNSString:text1])) isEqual:[self colognePhoneticWithNSString:text2]];
}

- (NSString *)preprocessWithNSString:(NSString *)text {
  return OrgApacheCommonsCodecLanguageColognePhonetic_preprocessWithNSString_(self, text);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 9, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(arrayContainsWithCharArray:withChar:);
  methods[2].selector = @selector(colognePhoneticWithNSString:);
  methods[3].selector = @selector(encodeWithId:);
  methods[4].selector = @selector(encodeWithNSString:);
  methods[5].selector = @selector(isEncodeEqualWithNSString:withNSString:);
  methods[6].selector = @selector(preprocessWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREPROCESS_MAP", "[[C", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "arrayContains", "[CC", "colognePhonetic", "LNSString;", "encode", "LNSObject;", "LOrgApacheCommonsCodecEncoderException;", "isEncodeEqual", "LNSString;LNSString;", "preprocess", &OrgApacheCommonsCodecLanguageColognePhonetic_PREPROCESS_MAP, "LOrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer;LOrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer;LOrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageColognePhonetic = { "ColognePhonetic", "org.apache.commons.codec.language", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, 11, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageColognePhonetic;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsCodecLanguageColognePhonetic class]) {
    OrgApacheCommonsCodecLanguageColognePhonetic_PREPROCESS_MAP = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSCharArray newArrayWithChars:(jchar[]){ 0x00c4, 'A' } count:2], [IOSCharArray newArrayWithChars:(jchar[]){ 0x00dc, 'U' } count:2], [IOSCharArray newArrayWithChars:(jchar[]){ 0x00d6, 'O' } count:2], [IOSCharArray newArrayWithChars:(jchar[]){ 0x00df, 'S' } count:2] } count:4 type:IOSClass_charArray(1)];
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsCodecLanguageColognePhonetic)
  }
}

@end

void OrgApacheCommonsCodecLanguageColognePhonetic_init(OrgApacheCommonsCodecLanguageColognePhonetic *self) {
  NSObject_init(self);
}

OrgApacheCommonsCodecLanguageColognePhonetic *new_OrgApacheCommonsCodecLanguageColognePhonetic_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageColognePhonetic, init)
}

OrgApacheCommonsCodecLanguageColognePhonetic *create_OrgApacheCommonsCodecLanguageColognePhonetic_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageColognePhonetic, init)
}

jboolean OrgApacheCommonsCodecLanguageColognePhonetic_arrayContainsWithCharArray_withChar_(IOSCharArray *arr, jchar key) {
  OrgApacheCommonsCodecLanguageColognePhonetic_initialize();
  {
    IOSCharArray *a__ = arr;
    jchar const *b__ = ((IOSCharArray *) nil_chk(a__))->buffer_;
    jchar const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jchar element = *b__++;
      if (element == key) {
        return true;
      }
    }
  }
  return false;
}

NSString *OrgApacheCommonsCodecLanguageColognePhonetic_preprocessWithNSString_(OrgApacheCommonsCodecLanguageColognePhonetic *self, NSString *text) {
  text = [((NSString *) nil_chk(text)) java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, GERMAN)];
  IOSCharArray *chrs = [((NSString *) nil_chk(text)) java_toCharArray];
  for (jint index = 0; index < ((IOSCharArray *) nil_chk(chrs))->size_; index++) {
    if (IOSCharArray_Get(chrs, index) > 'Z') {
      {
        IOSObjectArray *a__ = OrgApacheCommonsCodecLanguageColognePhonetic_PREPROCESS_MAP;
        IOSCharArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        IOSCharArray * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IOSCharArray *element = *b__++;
          if (IOSCharArray_Get(chrs, index) == IOSCharArray_Get(nil_chk(element), 0)) {
            *IOSCharArray_GetRef(chrs, index) = IOSCharArray_Get(element, 1);
            break;
          }
        }
      }
    }
  }
  return [NSString java_stringWithCharacters:chrs];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageColognePhonetic)

@implementation OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer

- (instancetype)initWithOrgApacheCommonsCodecLanguageColognePhonetic:(OrgApacheCommonsCodecLanguageColognePhonetic *)outer$
                                                       withCharArray:(IOSCharArray *)data {
  OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withCharArray_(self, outer$, data);
  return self;
}

- (instancetype)initWithOrgApacheCommonsCodecLanguageColognePhonetic:(OrgApacheCommonsCodecLanguageColognePhonetic *)outer$
                                                             withInt:(jint)buffSize {
  OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withInt_(self, outer$, buffSize);
  return self;
}

- (IOSCharArray *)copyDataWithInt:(jint)start
                          withInt:(jint)length {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)length {
  return length_;
}

- (NSString *)description {
  return [NSString java_stringWithCharacters:[self copyDataWithInt:0 withInt:length_]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "[C", 0x404, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheCommonsCodecLanguageColognePhonetic:withCharArray:);
  methods[1].selector = @selector(initWithOrgApacheCommonsCodecLanguageColognePhonetic:withInt:);
  methods[2].selector = @selector(copyDataWithInt:withInt:);
  methods[3].selector = @selector(length);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "data_", "[C", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[C", "I", "copyData", "II", "toString", "LOrgApacheCommonsCodecLanguageColognePhonetic;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer = { "CologneBuffer", "org.apache.commons.codec.language", ptrTable, methods, fields, 7, 0x402, 5, 2, 5, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer;
}

@end

void OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withCharArray_(OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer *self, OrgApacheCommonsCodecLanguageColognePhonetic *outer$, IOSCharArray *data) {
  NSObject_init(self);
  self->length_ = 0;
  self->data_ = data;
  self->length_ = ((IOSCharArray *) nil_chk(data))->size_;
}

void OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withInt_(OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer *self, OrgApacheCommonsCodecLanguageColognePhonetic *outer$, jint buffSize) {
  NSObject_init(self);
  self->length_ = 0;
  self->data_ = [IOSCharArray newArrayWithLength:buffSize];
  self->length_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer)

@implementation OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer

- (instancetype)initWithOrgApacheCommonsCodecLanguageColognePhonetic:(OrgApacheCommonsCodecLanguageColognePhonetic *)outer$
                                                             withInt:(jint)buffSize {
  OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withInt_(self, outer$, buffSize);
  return self;
}

- (void)addRightWithChar:(jchar)chr {
  *IOSCharArray_GetRef(nil_chk(data_), length_) = chr;
  length_++;
}

- (IOSCharArray *)copyDataWithInt:(jint)start
                          withInt:(jint)length {
  IOSCharArray *newData = [IOSCharArray newArrayWithLength:length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data_, start, newData, 0, length);
  return newData;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[C", 0x4, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheCommonsCodecLanguageColognePhonetic:withInt:);
  methods[1].selector = @selector(addRightWithChar:);
  methods[2].selector = @selector(copyDataWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "addRight", "C", "copyData", "II", "LOrgApacheCommonsCodecLanguageColognePhonetic;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer = { "CologneOutputBuffer", "org.apache.commons.codec.language", ptrTable, methods, NULL, 7, 0x2, 3, 0, 5, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer;
}

@end

void OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withInt_(OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer *self, OrgApacheCommonsCodecLanguageColognePhonetic *outer$, jint buffSize) {
  OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withInt_(self, outer$, buffSize);
}

OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer *new_OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withInt_(OrgApacheCommonsCodecLanguageColognePhonetic *outer$, jint buffSize) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer, initWithOrgApacheCommonsCodecLanguageColognePhonetic_withInt_, outer$, buffSize)
}

OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer *create_OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withInt_(OrgApacheCommonsCodecLanguageColognePhonetic *outer$, jint buffSize) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer, initWithOrgApacheCommonsCodecLanguageColognePhonetic_withInt_, outer$, buffSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageColognePhonetic_CologneOutputBuffer)

@implementation OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer

- (instancetype)initWithOrgApacheCommonsCodecLanguageColognePhonetic:(OrgApacheCommonsCodecLanguageColognePhonetic *)outer$
                                                       withCharArray:(IOSCharArray *)data {
  OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withCharArray_(self, outer$, data);
  return self;
}

- (void)addLeftWithChar:(jchar)ch {
  length_++;
  *IOSCharArray_GetRef(nil_chk(data_), [self getNextPos]) = ch;
}

- (IOSCharArray *)copyDataWithInt:(jint)start
                          withInt:(jint)length {
  IOSCharArray *newData = [IOSCharArray newArrayWithLength:length];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data_, ((IOSCharArray *) nil_chk(data_))->size_ - self->length_ + start, newData, 0, length);
  return newData;
}

- (jchar)getNextChar {
  return IOSCharArray_Get(nil_chk(data_), [self getNextPos]);
}

- (jint)getNextPos {
  return ((IOSCharArray *) nil_chk(data_))->size_ - length_;
}

- (jchar)removeNext {
  jchar ch = [self getNextChar];
  length_--;
  return ch;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[C", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheCommonsCodecLanguageColognePhonetic:withCharArray:);
  methods[1].selector = @selector(addLeftWithChar:);
  methods[2].selector = @selector(copyDataWithInt:withInt:);
  methods[3].selector = @selector(getNextChar);
  methods[4].selector = @selector(getNextPos);
  methods[5].selector = @selector(removeNext);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "[C", "addLeft", "C", "copyData", "II", "LOrgApacheCommonsCodecLanguageColognePhonetic;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer = { "CologneInputBuffer", "org.apache.commons.codec.language", ptrTable, methods, NULL, 7, 0x2, 6, 0, 5, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer;
}

@end

void OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withCharArray_(OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer *self, OrgApacheCommonsCodecLanguageColognePhonetic *outer$, IOSCharArray *data) {
  OrgApacheCommonsCodecLanguageColognePhonetic_CologneBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withCharArray_(self, outer$, data);
}

OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer *new_OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withCharArray_(OrgApacheCommonsCodecLanguageColognePhonetic *outer$, IOSCharArray *data) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer, initWithOrgApacheCommonsCodecLanguageColognePhonetic_withCharArray_, outer$, data)
}

OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer *create_OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer_initWithOrgApacheCommonsCodecLanguageColognePhonetic_withCharArray_(OrgApacheCommonsCodecLanguageColognePhonetic *outer$, IOSCharArray *data) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer, initWithOrgApacheCommonsCodecLanguageColognePhonetic_withCharArray_, outer$, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageColognePhonetic_CologneInputBuffer)
