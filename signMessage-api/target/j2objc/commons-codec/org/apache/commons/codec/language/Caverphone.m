//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/commons-codec/org/apache/commons/codec/language/Caverphone.java
//

#include "J2ObjC_source.h"
#include "org/apache/commons/codec/EncoderException.h"
#include "org/apache/commons/codec/language/Caverphone.h"
#include "org/apache/commons/codec/language/Caverphone2.h"

@interface OrgApacheCommonsCodecLanguageCaverphone () {
 @public
  OrgApacheCommonsCodecLanguageCaverphone2 *encoder_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageCaverphone, encoder_, OrgApacheCommonsCodecLanguageCaverphone2 *)

@implementation OrgApacheCommonsCodecLanguageCaverphone

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageCaverphone_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)caverphoneWithNSString:(NSString *)source {
  return [((OrgApacheCommonsCodecLanguageCaverphone2 *) nil_chk(self->encoder_)) encodeWithNSString:source];
}

- (id)encodeWithId:(id)pObject {
  if (!([pObject isKindOfClass:[NSString class]])) {
    @throw new_OrgApacheCommonsCodecEncoderException_initWithNSString_(@"Parameter supplied to Caverphone encode is not of type java.lang.String");
  }
  return [self caverphoneWithNSString:(NSString *) cast_chk(pObject, [NSString class])];
}

- (NSString *)encodeWithNSString:(NSString *)pString {
  return [self caverphoneWithNSString:pString];
}

- (jboolean)isCaverphoneEqualWithNSString:(NSString *)str1
                             withNSString:(NSString *)str2 {
  return [((NSString *) nil_chk([self caverphoneWithNSString:str1])) isEqual:[self caverphoneWithNSString:str2]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(caverphoneWithNSString:);
  methods[2].selector = @selector(encodeWithId:);
  methods[3].selector = @selector(encodeWithNSString:);
  methods[4].selector = @selector(isCaverphoneEqualWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "encoder_", "LOrgApacheCommonsCodecLanguageCaverphone2;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "caverphone", "LNSString;", "encode", "LNSObject;", "LOrgApacheCommonsCodecEncoderException;", "isCaverphoneEqual", "LNSString;LNSString;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageCaverphone = { "Caverphone", "org.apache.commons.codec.language", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageCaverphone;
}

@end

void OrgApacheCommonsCodecLanguageCaverphone_init(OrgApacheCommonsCodecLanguageCaverphone *self) {
  NSObject_init(self);
  self->encoder_ = new_OrgApacheCommonsCodecLanguageCaverphone2_init();
}

OrgApacheCommonsCodecLanguageCaverphone *new_OrgApacheCommonsCodecLanguageCaverphone_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageCaverphone, init)
}

OrgApacheCommonsCodecLanguageCaverphone *create_OrgApacheCommonsCodecLanguageCaverphone_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageCaverphone, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageCaverphone)
