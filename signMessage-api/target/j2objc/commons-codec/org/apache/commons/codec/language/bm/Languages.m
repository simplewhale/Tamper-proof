//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/commons-codec/org/apache/commons/codec/language/bm/Languages.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Collections.h"
#include "java/util/EnumMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/Scanner.h"
#include "java/util/Set.h"
#include "org/apache/commons/codec/language/bm/Languages.h"
#include "org/apache/commons/codec/language/bm/NameType.h"
#include "org/apache/commons/codec/language/bm/ResourceConstants.h"

@interface OrgApacheCommonsCodecLanguageBmLanguages () {
 @public
  id<JavaUtilSet> languages_;
}

+ (NSString *)langResourceNameWithOrgApacheCommonsCodecLanguageBmNameType:(OrgApacheCommonsCodecLanguageBmNameType *)nameType;

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)languages;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmLanguages, languages_, id<JavaUtilSet>)

inline id<JavaUtilMap> OrgApacheCommonsCodecLanguageBmLanguages_get_LANGUAGES(void);
static id<JavaUtilMap> OrgApacheCommonsCodecLanguageBmLanguages_LANGUAGES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageBmLanguages, LANGUAGES, id<JavaUtilMap>)

__attribute__((unused)) static NSString *OrgApacheCommonsCodecLanguageBmLanguages_langResourceNameWithOrgApacheCommonsCodecLanguageBmNameType_(OrgApacheCommonsCodecLanguageBmNameType *nameType);

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmLanguages_initWithJavaUtilSet_(OrgApacheCommonsCodecLanguageBmLanguages *self, id<JavaUtilSet> languages);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmLanguages *new_OrgApacheCommonsCodecLanguageBmLanguages_initWithJavaUtilSet_(id<JavaUtilSet> languages) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmLanguages *create_OrgApacheCommonsCodecLanguageBmLanguages_initWithJavaUtilSet_(id<JavaUtilSet> languages);

@interface OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages () {
 @public
  id<JavaUtilSet> languages_;
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)languages;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages, languages_, id<JavaUtilSet>)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages_initWithJavaUtilSet_(OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages *self, id<JavaUtilSet> languages);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages *new_OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages_initWithJavaUtilSet_(id<JavaUtilSet> languages) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages *create_OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages_initWithJavaUtilSet_(id<JavaUtilSet> languages);

@interface OrgApacheCommonsCodecLanguageBmLanguages_1 : OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet

- (instancetype)init;

- (jboolean)containsWithNSString:(NSString *)language;

- (NSString *)getAny;

- (jboolean)isEmpty;

- (jboolean)isSingleton;

- (OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)restrictToWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:(OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)other;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmLanguages_1)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmLanguages_1_init(OrgApacheCommonsCodecLanguageBmLanguages_1 *self);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmLanguages_1 *new_OrgApacheCommonsCodecLanguageBmLanguages_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmLanguages_1 *create_OrgApacheCommonsCodecLanguageBmLanguages_1_init(void);

@interface OrgApacheCommonsCodecLanguageBmLanguages_2 : OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet

- (instancetype)init;

- (jboolean)containsWithNSString:(NSString *)language;

- (NSString *)getAny;

- (jboolean)isEmpty;

- (jboolean)isSingleton;

- (OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)restrictToWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:(OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)other;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmLanguages_2)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmLanguages_2_init(OrgApacheCommonsCodecLanguageBmLanguages_2 *self);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmLanguages_2 *new_OrgApacheCommonsCodecLanguageBmLanguages_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmLanguages_2 *create_OrgApacheCommonsCodecLanguageBmLanguages_2_init(void);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsCodecLanguageBmLanguages)

NSString *OrgApacheCommonsCodecLanguageBmLanguages_ANY = @"any";
OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *OrgApacheCommonsCodecLanguageBmLanguages_NO_LANGUAGES;
OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *OrgApacheCommonsCodecLanguageBmLanguages_ANY_LANGUAGE;

@implementation OrgApacheCommonsCodecLanguageBmLanguages

+ (OrgApacheCommonsCodecLanguageBmLanguages *)getInstanceWithOrgApacheCommonsCodecLanguageBmNameType:(OrgApacheCommonsCodecLanguageBmNameType *)nameType {
  return OrgApacheCommonsCodecLanguageBmLanguages_getInstanceWithOrgApacheCommonsCodecLanguageBmNameType_(nameType);
}

+ (OrgApacheCommonsCodecLanguageBmLanguages *)getInstanceWithNSString:(NSString *)languagesResourceName {
  return OrgApacheCommonsCodecLanguageBmLanguages_getInstanceWithNSString_(languagesResourceName);
}

+ (NSString *)langResourceNameWithOrgApacheCommonsCodecLanguageBmNameType:(OrgApacheCommonsCodecLanguageBmNameType *)nameType {
  return OrgApacheCommonsCodecLanguageBmLanguages_langResourceNameWithOrgApacheCommonsCodecLanguageBmNameType_(nameType);
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)languages {
  OrgApacheCommonsCodecLanguageBmLanguages_initWithJavaUtilSet_(self, languages);
  return self;
}

- (id<JavaUtilSet>)getLanguages {
  return self->languages_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheCommonsCodecLanguageBmLanguages;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmLanguages;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 3, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithOrgApacheCommonsCodecLanguageBmNameType:);
  methods[1].selector = @selector(getInstanceWithNSString:);
  methods[2].selector = @selector(langResourceNameWithOrgApacheCommonsCodecLanguageBmNameType:);
  methods[3].selector = @selector(initWithJavaUtilSet:);
  methods[4].selector = @selector(getLanguages);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ANY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "LANGUAGES", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 8, 9, -1 },
    { "languages_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "NO_LANGUAGES", "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "ANY_LANGUAGE", "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LOrgApacheCommonsCodecLanguageBmNameType;", "LNSString;", "langResourceName", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;)V", "()Ljava/util/Set<Ljava/lang/String;>;", &OrgApacheCommonsCodecLanguageBmLanguages_ANY, &OrgApacheCommonsCodecLanguageBmLanguages_LANGUAGES, "Ljava/util/Map<Lorg/apache/commons/codec/language/bm/NameType;Lorg/apache/commons/codec/language/bm/Languages;>;", "Ljava/util/Set<Ljava/lang/String;>;", &OrgApacheCommonsCodecLanguageBmLanguages_NO_LANGUAGES, &OrgApacheCommonsCodecLanguageBmLanguages_ANY_LANGUAGE, "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;LOrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmLanguages = { "Languages", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x1, 5, 5, -1, 13, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmLanguages;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsCodecLanguageBmLanguages class]) {
    OrgApacheCommonsCodecLanguageBmLanguages_LANGUAGES = new_JavaUtilEnumMap_initWithIOSClass_(OrgApacheCommonsCodecLanguageBmNameType_class_());
    {
      {
        IOSObjectArray *a__ = OrgApacheCommonsCodecLanguageBmNameType_values();
        OrgApacheCommonsCodecLanguageBmNameType * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgApacheCommonsCodecLanguageBmNameType * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgApacheCommonsCodecLanguageBmNameType *s = *b__++;
          (void) [OrgApacheCommonsCodecLanguageBmLanguages_LANGUAGES putWithId:s withId:OrgApacheCommonsCodecLanguageBmLanguages_getInstanceWithNSString_(OrgApacheCommonsCodecLanguageBmLanguages_langResourceNameWithOrgApacheCommonsCodecLanguageBmNameType_(s))];
        }
      }
    }
    OrgApacheCommonsCodecLanguageBmLanguages_NO_LANGUAGES = new_OrgApacheCommonsCodecLanguageBmLanguages_1_init();
    OrgApacheCommonsCodecLanguageBmLanguages_ANY_LANGUAGE = new_OrgApacheCommonsCodecLanguageBmLanguages_2_init();
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsCodecLanguageBmLanguages)
  }
}

@end

OrgApacheCommonsCodecLanguageBmLanguages *OrgApacheCommonsCodecLanguageBmLanguages_getInstanceWithOrgApacheCommonsCodecLanguageBmNameType_(OrgApacheCommonsCodecLanguageBmNameType *nameType) {
  OrgApacheCommonsCodecLanguageBmLanguages_initialize();
  return [((id<JavaUtilMap>) nil_chk(OrgApacheCommonsCodecLanguageBmLanguages_LANGUAGES)) getWithId:nameType];
}

OrgApacheCommonsCodecLanguageBmLanguages *OrgApacheCommonsCodecLanguageBmLanguages_getInstanceWithNSString_(NSString *languagesResourceName) {
  OrgApacheCommonsCodecLanguageBmLanguages_initialize();
  id<JavaUtilSet> ls = new_JavaUtilHashSet_init();
  JavaIoInputStream *langIS = [((JavaLangClassLoader *) nil_chk([OrgApacheCommonsCodecLanguageBmLanguages_class_() getClassLoader])) getResourceAsStreamWithNSString:languagesResourceName];
  if (langIS == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unable to resolve required resource: ", languagesResourceName));
  }
  JavaUtilScanner *lsScanner = new_JavaUtilScanner_initWithJavaIoInputStream_withNSString_(langIS, OrgApacheCommonsCodecLanguageBmResourceConstants_ENCODING);
  jboolean inExtendedComment = false;
  while ([lsScanner hasNextLine]) {
    NSString *line = [((NSString *) nil_chk([lsScanner nextLine])) java_trim];
    if (inExtendedComment) {
      if ([((NSString *) nil_chk(line)) java_hasSuffix:OrgApacheCommonsCodecLanguageBmResourceConstants_EXT_CMT_END]) {
        inExtendedComment = false;
      }
      else {
      }
    }
    else {
      if ([((NSString *) nil_chk(line)) java_hasPrefix:OrgApacheCommonsCodecLanguageBmResourceConstants_EXT_CMT_START]) {
        inExtendedComment = true;
      }
      else if ([line java_length] > 0) {
        [ls addWithId:line];
      }
      else {
      }
    }
  }
  return new_OrgApacheCommonsCodecLanguageBmLanguages_initWithJavaUtilSet_(JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(ls));
}

NSString *OrgApacheCommonsCodecLanguageBmLanguages_langResourceNameWithOrgApacheCommonsCodecLanguageBmNameType_(OrgApacheCommonsCodecLanguageBmNameType *nameType) {
  OrgApacheCommonsCodecLanguageBmLanguages_initialize();
  return NSString_java_formatWithNSString_withNSObjectArray_(@"org/apache/commons/codec/language/bm/%s_languages.txt", [IOSObjectArray newArrayWithObjects:(id[]){ [((OrgApacheCommonsCodecLanguageBmNameType *) nil_chk(nameType)) getName] } count:1 type:NSObject_class_()]);
}

void OrgApacheCommonsCodecLanguageBmLanguages_initWithJavaUtilSet_(OrgApacheCommonsCodecLanguageBmLanguages *self, id<JavaUtilSet> languages) {
  NSObject_init(self);
  self->languages_ = languages;
}

OrgApacheCommonsCodecLanguageBmLanguages *new_OrgApacheCommonsCodecLanguageBmLanguages_initWithJavaUtilSet_(id<JavaUtilSet> languages) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmLanguages, initWithJavaUtilSet_, languages)
}

OrgApacheCommonsCodecLanguageBmLanguages *create_OrgApacheCommonsCodecLanguageBmLanguages_initWithJavaUtilSet_(id<JavaUtilSet> languages) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmLanguages, initWithJavaUtilSet_, languages)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageBmLanguages)

@implementation OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)fromWithJavaUtilSet:(id<JavaUtilSet>)langs {
  return OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_fromWithJavaUtilSet_(langs);
}

- (jboolean)containsWithNSString:(NSString *)language {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getAny {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isEmpty {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isSingleton {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)restrictToWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:(OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)other {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", 0x401, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fromWithJavaUtilSet:);
  methods[2].selector = @selector(containsWithNSString:);
  methods[3].selector = @selector(getAny);
  methods[4].selector = @selector(isEmpty);
  methods[5].selector = @selector(isSingleton);
  methods[6].selector = @selector(restrictToWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "from", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;)Lorg/apache/commons/codec/language/bm/Languages$LanguageSet;", "contains", "LNSString;", "restrictTo", "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", "LOrgApacheCommonsCodecLanguageBmLanguages;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet = { "LanguageSet", "org.apache.commons.codec.language.bm", ptrTable, methods, NULL, 7, 0x409, 7, 0, 7, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;
}

@end

void OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_init(OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *self) {
  NSObject_init(self);
}

OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_fromWithJavaUtilSet_(id<JavaUtilSet> langs) {
  OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_initialize();
  return [((id<JavaUtilSet>) nil_chk(langs)) isEmpty] ? JreLoadStatic(OrgApacheCommonsCodecLanguageBmLanguages, NO_LANGUAGES) : new_OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages_initWithJavaUtilSet_(langs);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet)

@implementation OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)languages {
  OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages_initWithJavaUtilSet_(self, languages);
  return self;
}

- (jboolean)containsWithNSString:(NSString *)language {
  return [((id<JavaUtilSet>) nil_chk(self->languages_)) containsWithId:language];
}

- (NSString *)getAny {
  return [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilSet>) nil_chk(self->languages_)) iterator])) next];
}

- (id<JavaUtilSet>)getLanguages {
  return self->languages_;
}

- (jboolean)isEmpty {
  return [((id<JavaUtilSet>) nil_chk(self->languages_)) isEmpty];
}

- (jboolean)isSingleton {
  return [((id<JavaUtilSet>) nil_chk(self->languages_)) size] == 1;
}

- (OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)restrictToWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:(OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)other {
  if (other == JreLoadStatic(OrgApacheCommonsCodecLanguageBmLanguages, NO_LANGUAGES)) {
    return other;
  }
  else if (other == JreLoadStatic(OrgApacheCommonsCodecLanguageBmLanguages, ANY_LANGUAGE)) {
    return self;
  }
  else {
    OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages *sl = (OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages *) cast_chk(other, [OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages class]);
    if ([((id<JavaUtilSet>) nil_chk(((OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages *) nil_chk(sl))->languages_)) containsAllWithJavaUtilCollection:languages_]) {
      return self;
    }
    else {
      id<JavaUtilSet> ls = new_JavaUtilHashSet_initWithJavaUtilCollection_(self->languages_);
      [ls retainAllWithJavaUtilCollection:sl->languages_];
      return OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_fromWithJavaUtilSet_(ls);
    }
  }
}

- (NSString *)description {
  return JreStrcat("$$C", @"Languages(", [((id<JavaUtilSet>) nil_chk(languages_)) description], ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilSet:);
  methods[1].selector = @selector(containsWithNSString:);
  methods[2].selector = @selector(getAny);
  methods[3].selector = @selector(getLanguages);
  methods[4].selector = @selector(isEmpty);
  methods[5].selector = @selector(isSingleton);
  methods[6].selector = @selector(restrictToWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "languages_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/String;>;)V", "contains", "LNSString;", "()Ljava/util/Set<Ljava/lang/String;>;", "restrictTo", "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", "toString", "Ljava/util/Set<Ljava/lang/String;>;", "LOrgApacheCommonsCodecLanguageBmLanguages;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages = { "SomeLanguages", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x19, 8, 1, 9, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages;
}

@end

void OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages_initWithJavaUtilSet_(OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages *self, id<JavaUtilSet> languages) {
  OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_init(self);
  self->languages_ = JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(languages);
}

OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages *new_OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages_initWithJavaUtilSet_(id<JavaUtilSet> languages) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages, initWithJavaUtilSet_, languages)
}

OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages *create_OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages_initWithJavaUtilSet_(id<JavaUtilSet> languages) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages, initWithJavaUtilSet_, languages)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageBmLanguages_SomeLanguages)

@implementation OrgApacheCommonsCodecLanguageBmLanguages_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageBmLanguages_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)containsWithNSString:(NSString *)language {
  return false;
}

- (NSString *)getAny {
  @throw new_JavaUtilNoSuchElementException_initWithNSString_(@"Can't fetch any language from the empty language set.");
}

- (jboolean)isEmpty {
  return true;
}

- (jboolean)isSingleton {
  return false;
}

- (OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)restrictToWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:(OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)other {
  return self;
}

- (NSString *)description {
  return @"NO_LANGUAGES";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(containsWithNSString:);
  methods[2].selector = @selector(getAny);
  methods[3].selector = @selector(isEmpty);
  methods[4].selector = @selector(isSingleton);
  methods[5].selector = @selector(restrictToWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "contains", "LNSString;", "restrictTo", "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", "toString", "LOrgApacheCommonsCodecLanguageBmLanguages;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmLanguages_1 = { "", "org.apache.commons.codec.language.bm", ptrTable, methods, NULL, 7, 0x8018, 7, 0, 5, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmLanguages_1;
}

@end

void OrgApacheCommonsCodecLanguageBmLanguages_1_init(OrgApacheCommonsCodecLanguageBmLanguages_1 *self) {
  OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_init(self);
}

OrgApacheCommonsCodecLanguageBmLanguages_1 *new_OrgApacheCommonsCodecLanguageBmLanguages_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmLanguages_1, init)
}

OrgApacheCommonsCodecLanguageBmLanguages_1 *create_OrgApacheCommonsCodecLanguageBmLanguages_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmLanguages_1, init)
}

@implementation OrgApacheCommonsCodecLanguageBmLanguages_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageBmLanguages_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)containsWithNSString:(NSString *)language {
  return true;
}

- (NSString *)getAny {
  @throw new_JavaUtilNoSuchElementException_initWithNSString_(@"Can't fetch any language from the any language set.");
}

- (jboolean)isEmpty {
  return false;
}

- (jboolean)isSingleton {
  return false;
}

- (OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)restrictToWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:(OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)other {
  return other;
}

- (NSString *)description {
  return @"ANY_LANGUAGE";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(containsWithNSString:);
  methods[2].selector = @selector(getAny);
  methods[3].selector = @selector(isEmpty);
  methods[4].selector = @selector(isSingleton);
  methods[5].selector = @selector(restrictToWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "contains", "LNSString;", "restrictTo", "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", "toString", "LOrgApacheCommonsCodecLanguageBmLanguages;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmLanguages_2 = { "", "org.apache.commons.codec.language.bm", ptrTable, methods, NULL, 7, 0x8018, 7, 0, 5, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmLanguages_2;
}

@end

void OrgApacheCommonsCodecLanguageBmLanguages_2_init(OrgApacheCommonsCodecLanguageBmLanguages_2 *self) {
  OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_init(self);
}

OrgApacheCommonsCodecLanguageBmLanguages_2 *new_OrgApacheCommonsCodecLanguageBmLanguages_2_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmLanguages_2, init)
}

OrgApacheCommonsCodecLanguageBmLanguages_2 *create_OrgApacheCommonsCodecLanguageBmLanguages_2_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmLanguages_2, init)
}
