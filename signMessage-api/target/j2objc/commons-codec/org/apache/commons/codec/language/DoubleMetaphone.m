//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/commons-codec/org/apache/commons/codec/language/DoubleMetaphone.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Locale.h"
#include "org/apache/commons/codec/EncoderException.h"
#include "org/apache/commons/codec/language/DoubleMetaphone.h"

@interface OrgApacheCommonsCodecLanguageDoubleMetaphone () {
 @public
  jint maxCodeLen_;
}

- (jint)handleAEIOUYWithOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                                                                                   withInt:(jint)index;

- (jint)handleCWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index;

- (jint)handleCCWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                     withInt:(jint)index;

- (jint)handleCHWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                     withInt:(jint)index;

- (jint)handleDWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index;

- (jint)handleGWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index
                withBoolean:(jboolean)slavoGermanic;

- (jint)handleGHWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                     withInt:(jint)index;

- (jint)handleHWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index;

- (jint)handleJWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index
                withBoolean:(jboolean)slavoGermanic;

- (jint)handleLWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index;

- (jint)handlePWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index;

- (jint)handleRWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index
                withBoolean:(jboolean)slavoGermanic;

- (jint)handleSWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index
                withBoolean:(jboolean)slavoGermanic;

- (jint)handleSCWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                     withInt:(jint)index;

- (jint)handleTWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index;

- (jint)handleWWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index;

- (jint)handleXWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index;

- (jint)handleZWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index
                withBoolean:(jboolean)slavoGermanic;

- (jboolean)conditionC0WithNSString:(NSString *)value
                            withInt:(jint)index;

- (jboolean)conditionCH0WithNSString:(NSString *)value
                             withInt:(jint)index;

- (jboolean)conditionCH1WithNSString:(NSString *)value
                             withInt:(jint)index;

- (jboolean)conditionL0WithNSString:(NSString *)value
                            withInt:(jint)index;

- (jboolean)conditionM0WithNSString:(NSString *)value
                            withInt:(jint)index;

- (jboolean)isSlavoGermanicWithNSString:(NSString *)value;

- (jboolean)isVowelWithChar:(jchar)ch;

- (jboolean)isSilentStartWithNSString:(NSString *)value;

- (NSString *)cleanInputWithNSString:(NSString *)input;

+ (jboolean)containsWithNSString:(NSString *)value
                         withInt:(jint)start
                         withInt:(jint)length
                    withNSString:(NSString *)criteria;

+ (jboolean)containsWithNSString:(NSString *)value
                         withInt:(jint)start
                         withInt:(jint)length
                    withNSString:(NSString *)criteria1
                    withNSString:(NSString *)criteria2;

+ (jboolean)containsWithNSString:(NSString *)value
                         withInt:(jint)start
                         withInt:(jint)length
                    withNSString:(NSString *)criteria1
                    withNSString:(NSString *)criteria2
                    withNSString:(NSString *)criteria3;

+ (jboolean)containsWithNSString:(NSString *)value
                         withInt:(jint)start
                         withInt:(jint)length
                    withNSString:(NSString *)criteria1
                    withNSString:(NSString *)criteria2
                    withNSString:(NSString *)criteria3
                    withNSString:(NSString *)criteria4;

+ (jboolean)containsWithNSString:(NSString *)value
                         withInt:(jint)start
                         withInt:(jint)length
                    withNSString:(NSString *)criteria1
                    withNSString:(NSString *)criteria2
                    withNSString:(NSString *)criteria3
                    withNSString:(NSString *)criteria4
                    withNSString:(NSString *)criteria5;

+ (jboolean)containsWithNSString:(NSString *)value
                         withInt:(jint)start
                         withInt:(jint)length
                    withNSString:(NSString *)criteria1
                    withNSString:(NSString *)criteria2
                    withNSString:(NSString *)criteria3
                    withNSString:(NSString *)criteria4
                    withNSString:(NSString *)criteria5
                    withNSString:(NSString *)criteria6;

@end

inline NSString *OrgApacheCommonsCodecLanguageDoubleMetaphone_get_VOWELS(void);
static NSString *OrgApacheCommonsCodecLanguageDoubleMetaphone_VOWELS = @"AEIOUY";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageDoubleMetaphone, VOWELS, NSString *)

inline IOSObjectArray *OrgApacheCommonsCodecLanguageDoubleMetaphone_get_SILENT_START(void);
static IOSObjectArray *OrgApacheCommonsCodecLanguageDoubleMetaphone_SILENT_START;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageDoubleMetaphone, SILENT_START, IOSObjectArray *)

inline IOSObjectArray *OrgApacheCommonsCodecLanguageDoubleMetaphone_get_L_R_N_M_B_H_F_V_W_SPACE(void);
static IOSObjectArray *OrgApacheCommonsCodecLanguageDoubleMetaphone_L_R_N_M_B_H_F_V_W_SPACE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageDoubleMetaphone, L_R_N_M_B_H_F_V_W_SPACE, IOSObjectArray *)

inline IOSObjectArray *OrgApacheCommonsCodecLanguageDoubleMetaphone_get_ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER(void);
static IOSObjectArray *OrgApacheCommonsCodecLanguageDoubleMetaphone_ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageDoubleMetaphone, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER, IOSObjectArray *)

inline IOSObjectArray *OrgApacheCommonsCodecLanguageDoubleMetaphone_get_L_T_K_S_N_M_B_Z(void);
static IOSObjectArray *OrgApacheCommonsCodecLanguageDoubleMetaphone_L_T_K_S_N_M_B_Z;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageDoubleMetaphone, L_T_K_S_N_M_B_Z, IOSObjectArray *)

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleAEIOUYWithOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleCWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleCCWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleCHWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleDWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleGWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index, jboolean slavoGermanic);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleGHWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleHWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleJWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index, jboolean slavoGermanic);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleLWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handlePWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleRWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index, jboolean slavoGermanic);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleSWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index, jboolean slavoGermanic);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleSCWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleTWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleWWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleXWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index);

__attribute__((unused)) static jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleZWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index, jboolean slavoGermanic);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionC0WithNSString_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, jint index);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionCH0WithNSString_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, jint index);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionCH1WithNSString_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, jint index);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionL0WithNSString_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, jint index);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionM0WithNSString_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, jint index);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_isSlavoGermanicWithNSString_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_isVowelWithChar_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, jchar ch);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_isSilentStartWithNSString_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value);

__attribute__((unused)) static NSString *OrgApacheCommonsCodecLanguageDoubleMetaphone_cleanInputWithNSString_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *input);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(NSString *value, jint start, jint length, NSString *criteria);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(NSString *value, jint start, jint length, NSString *criteria1, NSString *criteria2);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(NSString *value, jint start, jint length, NSString *criteria1, NSString *criteria2, NSString *criteria3);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_(NSString *value, jint start, jint length, NSString *criteria1, NSString *criteria2, NSString *criteria3, NSString *criteria4);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_withNSString_(NSString *value, jint start, jint length, NSString *criteria1, NSString *criteria2, NSString *criteria3, NSString *criteria4, NSString *criteria5);

__attribute__((unused)) static jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(NSString *value, jint start, jint length, NSString *criteria1, NSString *criteria2, NSString *criteria3, NSString *criteria4, NSString *criteria5, NSString *criteria6);

@interface OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult () {
 @public
  JavaLangStringBuffer *primary_;
  JavaLangStringBuffer *alternate_;
  jint maxLength_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult, primary_, JavaLangStringBuffer *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult, alternate_, JavaLangStringBuffer *)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsCodecLanguageDoubleMetaphone)

@implementation OrgApacheCommonsCodecLanguageDoubleMetaphone

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsCodecLanguageDoubleMetaphone_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)doubleMetaphoneWithNSString:(NSString *)value {
  return [self doubleMetaphoneWithNSString:value withBoolean:false];
}

- (NSString *)doubleMetaphoneWithNSString:(NSString *)value
                              withBoolean:(jboolean)alternate {
  value = OrgApacheCommonsCodecLanguageDoubleMetaphone_cleanInputWithNSString_(self, value);
  if (value == nil) {
    return nil;
  }
  jboolean slavoGermanic = OrgApacheCommonsCodecLanguageDoubleMetaphone_isSlavoGermanicWithNSString_(self, value);
  jint index = OrgApacheCommonsCodecLanguageDoubleMetaphone_isSilentStartWithNSString_(self, value) ? 1 : 0;
  OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result = new_OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_initWithOrgApacheCommonsCodecLanguageDoubleMetaphone_withInt_(self, [self getMaxCodeLen]);
  while (![result isComplete] && index <= [value java_length] - 1) {
    switch ([value charAtWithInt:index]) {
      case 'A':
      case 'E':
      case 'I':
      case 'O':
      case 'U':
      case 'Y':
      index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleAEIOUYWithOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, result, index);
      break;
      case 'B':
      [result appendWithChar:'P'];
      index = [self charAtWithNSString:value withInt:index + 1] == 'B' ? index + 2 : index + 1;
      break;
      case 0x00c7:
      [result appendWithChar:'S'];
      index++;
      break;
      case 'C':
      index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleCWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
      break;
      case 'D':
      index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleDWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
      break;
      case 'F':
      [result appendWithChar:'F'];
      index = [self charAtWithNSString:value withInt:index + 1] == 'F' ? index + 2 : index + 1;
      break;
      case 'G':
      index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleGWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(self, value, result, index, slavoGermanic);
      break;
      case 'H':
      index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleHWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
      break;
      case 'J':
      index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleJWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(self, value, result, index, slavoGermanic);
      break;
      case 'K':
      [result appendWithChar:'K'];
      index = [self charAtWithNSString:value withInt:index + 1] == 'K' ? index + 2 : index + 1;
      break;
      case 'L':
      index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleLWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
      break;
      case 'M':
      [result appendWithChar:'M'];
      index = OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionM0WithNSString_withInt_(self, value, index) ? index + 2 : index + 1;
      break;
      case 'N':
      [result appendWithChar:'N'];
      index = [self charAtWithNSString:value withInt:index + 1] == 'N' ? index + 2 : index + 1;
      break;
      case 0x00d1:
      [result appendWithChar:'N'];
      index++;
      break;
      case 'P':
      index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handlePWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
      break;
      case 'Q':
      [result appendWithChar:'K'];
      index = [self charAtWithNSString:value withInt:index + 1] == 'Q' ? index + 2 : index + 1;
      break;
      case 'R':
      index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleRWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(self, value, result, index, slavoGermanic);
      break;
      case 'S':
      index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleSWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(self, value, result, index, slavoGermanic);
      break;
      case 'T':
      index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleTWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
      break;
      case 'V':
      [result appendWithChar:'F'];
      index = [self charAtWithNSString:value withInt:index + 1] == 'V' ? index + 2 : index + 1;
      break;
      case 'W':
      index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleWWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
      break;
      case 'X':
      index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleXWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
      break;
      case 'Z':
      index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleZWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(self, value, result, index, slavoGermanic);
      break;
      default:
      index++;
      break;
    }
  }
  return alternate ? [result getAlternate] : [result getPrimary];
}

- (id)encodeWithId:(id)obj {
  if (!([obj isKindOfClass:[NSString class]])) {
    @throw new_OrgApacheCommonsCodecEncoderException_initWithNSString_(@"DoubleMetaphone encode parameter is not of type String");
  }
  return [self doubleMetaphoneWithNSString:(NSString *) cast_chk(obj, [NSString class])];
}

- (NSString *)encodeWithNSString:(NSString *)value {
  return [self doubleMetaphoneWithNSString:value];
}

- (jboolean)isDoubleMetaphoneEqualWithNSString:(NSString *)value1
                                  withNSString:(NSString *)value2 {
  return [self isDoubleMetaphoneEqualWithNSString:value1 withNSString:value2 withBoolean:false];
}

- (jboolean)isDoubleMetaphoneEqualWithNSString:(NSString *)value1
                                  withNSString:(NSString *)value2
                                   withBoolean:(jboolean)alternate {
  return [((NSString *) nil_chk([self doubleMetaphoneWithNSString:value1 withBoolean:alternate])) isEqual:[self doubleMetaphoneWithNSString:value2 withBoolean:alternate]];
}

- (jint)getMaxCodeLen {
  return self->maxCodeLen_;
}

- (void)setMaxCodeLenWithInt:(jint)maxCodeLen {
  self->maxCodeLen_ = maxCodeLen;
}

- (jint)handleAEIOUYWithOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                                                                                   withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleAEIOUYWithOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, result, index);
}

- (jint)handleCWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleCWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
}

- (jint)handleCCWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                     withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleCCWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
}

- (jint)handleCHWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                     withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleCHWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
}

- (jint)handleDWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleDWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
}

- (jint)handleGWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index
                withBoolean:(jboolean)slavoGermanic {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleGWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(self, value, result, index, slavoGermanic);
}

- (jint)handleGHWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                     withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleGHWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
}

- (jint)handleHWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleHWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
}

- (jint)handleJWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index
                withBoolean:(jboolean)slavoGermanic {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleJWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(self, value, result, index, slavoGermanic);
}

- (jint)handleLWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleLWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
}

- (jint)handlePWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handlePWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
}

- (jint)handleRWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index
                withBoolean:(jboolean)slavoGermanic {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleRWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(self, value, result, index, slavoGermanic);
}

- (jint)handleSWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index
                withBoolean:(jboolean)slavoGermanic {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleSWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(self, value, result, index, slavoGermanic);
}

- (jint)handleSCWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                     withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleSCWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
}

- (jint)handleTWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleTWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
}

- (jint)handleWWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleWWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
}

- (jint)handleXWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleXWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
}

- (jint)handleZWithNSString:(NSString *)value
withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *)result
                    withInt:(jint)index
                withBoolean:(jboolean)slavoGermanic {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleZWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(self, value, result, index, slavoGermanic);
}

- (jboolean)conditionC0WithNSString:(NSString *)value
                            withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionC0WithNSString_withInt_(self, value, index);
}

- (jboolean)conditionCH0WithNSString:(NSString *)value
                             withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionCH0WithNSString_withInt_(self, value, index);
}

- (jboolean)conditionCH1WithNSString:(NSString *)value
                             withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionCH1WithNSString_withInt_(self, value, index);
}

- (jboolean)conditionL0WithNSString:(NSString *)value
                            withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionL0WithNSString_withInt_(self, value, index);
}

- (jboolean)conditionM0WithNSString:(NSString *)value
                            withInt:(jint)index {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionM0WithNSString_withInt_(self, value, index);
}

- (jboolean)isSlavoGermanicWithNSString:(NSString *)value {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_isSlavoGermanicWithNSString_(self, value);
}

- (jboolean)isVowelWithChar:(jchar)ch {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_isVowelWithChar_(self, ch);
}

- (jboolean)isSilentStartWithNSString:(NSString *)value {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_isSilentStartWithNSString_(self, value);
}

- (NSString *)cleanInputWithNSString:(NSString *)input {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_cleanInputWithNSString_(self, input);
}

- (jchar)charAtWithNSString:(NSString *)value
                    withInt:(jint)index {
  if (index < 0 || index >= [((NSString *) nil_chk(value)) java_length]) {
    return JavaLangCharacter_MIN_VALUE;
  }
  return [((NSString *) nil_chk(value)) charAtWithInt:index];
}

+ (jboolean)containsWithNSString:(NSString *)value
                         withInt:(jint)start
                         withInt:(jint)length
                    withNSString:(NSString *)criteria {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, start, length, criteria);
}

+ (jboolean)containsWithNSString:(NSString *)value
                         withInt:(jint)start
                         withInt:(jint)length
                    withNSString:(NSString *)criteria1
                    withNSString:(NSString *)criteria2 {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, start, length, criteria1, criteria2);
}

+ (jboolean)containsWithNSString:(NSString *)value
                         withInt:(jint)start
                         withInt:(jint)length
                    withNSString:(NSString *)criteria1
                    withNSString:(NSString *)criteria2
                    withNSString:(NSString *)criteria3 {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, start, length, criteria1, criteria2, criteria3);
}

+ (jboolean)containsWithNSString:(NSString *)value
                         withInt:(jint)start
                         withInt:(jint)length
                    withNSString:(NSString *)criteria1
                    withNSString:(NSString *)criteria2
                    withNSString:(NSString *)criteria3
                    withNSString:(NSString *)criteria4 {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_(value, start, length, criteria1, criteria2, criteria3, criteria4);
}

+ (jboolean)containsWithNSString:(NSString *)value
                         withInt:(jint)start
                         withInt:(jint)length
                    withNSString:(NSString *)criteria1
                    withNSString:(NSString *)criteria2
                    withNSString:(NSString *)criteria3
                    withNSString:(NSString *)criteria4
                    withNSString:(NSString *)criteria5 {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_withNSString_(value, start, length, criteria1, criteria2, criteria3, criteria4, criteria5);
}

+ (jboolean)containsWithNSString:(NSString *)value
                         withInt:(jint)start
                         withInt:(jint)length
                    withNSString:(NSString *)criteria1
                    withNSString:(NSString *)criteria2
                    withNSString:(NSString *)criteria3
                    withNSString:(NSString *)criteria4
                    withNSString:(NSString *)criteria5
                    withNSString:(NSString *)criteria6 {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(value, start, length, criteria1, criteria2, criteria3, criteria4, criteria5, criteria6);
}

+ (jboolean)containsWithNSString:(NSString *)value
                         withInt:(jint)start
                         withInt:(jint)length
               withNSStringArray:(IOSObjectArray *)criteria {
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSStringArray_(value, start, length, criteria);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 15, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 16, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 17, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 20, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 21, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 22, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 23, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 24, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 25, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 26, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 27, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 28, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 29, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 30, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 31, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 32, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 34, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 35, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 36, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 37, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 38, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 39, 40, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 41, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 42, 1, -1, -1, -1, -1 },
    { NULL, "C", 0x4, 43, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 44, 45, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 44, 46, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 44, 47, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 44, 48, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 44, 49, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 44, 50, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 44, 51, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(doubleMetaphoneWithNSString:);
  methods[2].selector = @selector(doubleMetaphoneWithNSString:withBoolean:);
  methods[3].selector = @selector(encodeWithId:);
  methods[4].selector = @selector(encodeWithNSString:);
  methods[5].selector = @selector(isDoubleMetaphoneEqualWithNSString:withNSString:);
  methods[6].selector = @selector(isDoubleMetaphoneEqualWithNSString:withNSString:withBoolean:);
  methods[7].selector = @selector(getMaxCodeLen);
  methods[8].selector = @selector(setMaxCodeLenWithInt:);
  methods[9].selector = @selector(handleAEIOUYWithOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:);
  methods[10].selector = @selector(handleCWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:);
  methods[11].selector = @selector(handleCCWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:);
  methods[12].selector = @selector(handleCHWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:);
  methods[13].selector = @selector(handleDWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:);
  methods[14].selector = @selector(handleGWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:withBoolean:);
  methods[15].selector = @selector(handleGHWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:);
  methods[16].selector = @selector(handleHWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:);
  methods[17].selector = @selector(handleJWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:withBoolean:);
  methods[18].selector = @selector(handleLWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:);
  methods[19].selector = @selector(handlePWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:);
  methods[20].selector = @selector(handleRWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:withBoolean:);
  methods[21].selector = @selector(handleSWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:withBoolean:);
  methods[22].selector = @selector(handleSCWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:);
  methods[23].selector = @selector(handleTWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:);
  methods[24].selector = @selector(handleWWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:);
  methods[25].selector = @selector(handleXWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:);
  methods[26].selector = @selector(handleZWithNSString:withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult:withInt:withBoolean:);
  methods[27].selector = @selector(conditionC0WithNSString:withInt:);
  methods[28].selector = @selector(conditionCH0WithNSString:withInt:);
  methods[29].selector = @selector(conditionCH1WithNSString:withInt:);
  methods[30].selector = @selector(conditionL0WithNSString:withInt:);
  methods[31].selector = @selector(conditionM0WithNSString:withInt:);
  methods[32].selector = @selector(isSlavoGermanicWithNSString:);
  methods[33].selector = @selector(isVowelWithChar:);
  methods[34].selector = @selector(isSilentStartWithNSString:);
  methods[35].selector = @selector(cleanInputWithNSString:);
  methods[36].selector = @selector(charAtWithNSString:withInt:);
  methods[37].selector = @selector(containsWithNSString:withInt:withInt:withNSString:);
  methods[38].selector = @selector(containsWithNSString:withInt:withInt:withNSString:withNSString:);
  methods[39].selector = @selector(containsWithNSString:withInt:withInt:withNSString:withNSString:withNSString:);
  methods[40].selector = @selector(containsWithNSString:withInt:withInt:withNSString:withNSString:withNSString:withNSString:);
  methods[41].selector = @selector(containsWithNSString:withInt:withInt:withNSString:withNSString:withNSString:withNSString:withNSString:);
  methods[42].selector = @selector(containsWithNSString:withInt:withInt:withNSString:withNSString:withNSString:withNSString:withNSString:withNSString:);
  methods[43].selector = @selector(containsWithNSString:withInt:withInt:withNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VOWELS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 52, -1, -1 },
    { "SILENT_START", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 53, -1, -1 },
    { "L_R_N_M_B_H_F_V_W_SPACE", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 54, -1, -1 },
    { "ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 55, -1, -1 },
    { "L_T_K_S_N_M_B_Z", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 56, -1, -1 },
    { "maxCodeLen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "doubleMetaphone", "LNSString;", "LNSString;Z", "encode", "LNSObject;", "LOrgApacheCommonsCodecEncoderException;", "isDoubleMetaphoneEqual", "LNSString;LNSString;", "LNSString;LNSString;Z", "setMaxCodeLen", "I", "handleAEIOUY", "LOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult;I", "handleC", "LNSString;LOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult;I", "handleCC", "handleCH", "handleD", "handleG", "LNSString;LOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult;IZ", "handleGH", "handleH", "handleJ", "handleL", "handleP", "handleR", "handleS", "handleSC", "handleT", "handleW", "handleX", "handleZ", "conditionC0", "LNSString;I", "conditionCH0", "conditionCH1", "conditionL0", "conditionM0", "isSlavoGermanic", "isVowel", "C", "isSilentStart", "cleanInput", "charAt", "contains", "LNSString;IILNSString;", "LNSString;IILNSString;LNSString;", "LNSString;IILNSString;LNSString;LNSString;", "LNSString;IILNSString;LNSString;LNSString;LNSString;", "LNSString;IILNSString;LNSString;LNSString;LNSString;LNSString;", "LNSString;IILNSString;LNSString;LNSString;LNSString;LNSString;LNSString;", "LNSString;II[LNSString;", &OrgApacheCommonsCodecLanguageDoubleMetaphone_VOWELS, &OrgApacheCommonsCodecLanguageDoubleMetaphone_SILENT_START, &OrgApacheCommonsCodecLanguageDoubleMetaphone_L_R_N_M_B_H_F_V_W_SPACE, &OrgApacheCommonsCodecLanguageDoubleMetaphone_ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER, &OrgApacheCommonsCodecLanguageDoubleMetaphone_L_T_K_S_N_M_B_Z, "LOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageDoubleMetaphone = { "DoubleMetaphone", "org.apache.commons.codec.language", ptrTable, methods, fields, 7, 0x1, 44, 6, -1, 57, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageDoubleMetaphone;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsCodecLanguageDoubleMetaphone class]) {
    OrgApacheCommonsCodecLanguageDoubleMetaphone_SILENT_START = [IOSObjectArray newArrayWithObjects:(id[]){ @"GN", @"KN", @"PN", @"WR", @"PS" } count:5 type:NSString_class_()];
    OrgApacheCommonsCodecLanguageDoubleMetaphone_L_R_N_M_B_H_F_V_W_SPACE = [IOSObjectArray newArrayWithObjects:(id[]){ @"L", @"R", @"N", @"M", @"B", @"H", @"F", @"V", @"W", @" " } count:10 type:NSString_class_()];
    OrgApacheCommonsCodecLanguageDoubleMetaphone_ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER = [IOSObjectArray newArrayWithObjects:(id[]){ @"ES", @"EP", @"EB", @"EL", @"EY", @"IB", @"IL", @"IN", @"IE", @"EI", @"ER" } count:11 type:NSString_class_()];
    OrgApacheCommonsCodecLanguageDoubleMetaphone_L_T_K_S_N_M_B_Z = [IOSObjectArray newArrayWithObjects:(id[]){ @"L", @"T", @"K", @"S", @"N", @"M", @"B", @"Z" } count:8 type:NSString_class_()];
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsCodecLanguageDoubleMetaphone)
  }
}

@end

void OrgApacheCommonsCodecLanguageDoubleMetaphone_init(OrgApacheCommonsCodecLanguageDoubleMetaphone *self) {
  NSObject_init(self);
  self->maxCodeLen_ = 4;
}

OrgApacheCommonsCodecLanguageDoubleMetaphone *new_OrgApacheCommonsCodecLanguageDoubleMetaphone_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageDoubleMetaphone, init)
}

OrgApacheCommonsCodecLanguageDoubleMetaphone *create_OrgApacheCommonsCodecLanguageDoubleMetaphone_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageDoubleMetaphone, init)
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleAEIOUYWithOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index) {
  if (index == 0) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'A'];
  }
  return index + 1;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleCWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index) {
  if (OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionC0WithNSString_withInt_(self, value, index)) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K'];
    index += 2;
  }
  else if (index == 0 && OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 6, @"CAESAR")) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'S'];
    index += 2;
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 2, @"CH")) {
    index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleCHWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 2, @"CZ") && !OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index - 2, 4, @"WICZ")) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'S' withChar:'X'];
    index += 2;
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index + 1, 3, @"CIA")) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'X'];
    index += 3;
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 2, @"CC") && !(index == 1 && [self charAtWithNSString:value withInt:0] == 'M')) {
    return OrgApacheCommonsCodecLanguageDoubleMetaphone_handleCCWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, index, 2, @"CK", @"CG", @"CQ")) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K'];
    index += 2;
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, index, 2, @"CI", @"CE", @"CY")) {
    if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, index, 3, @"CIO", @"CIE", @"CIA")) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'S' withChar:'X'];
    }
    else {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'S'];
    }
    index += 2;
  }
  else {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K'];
    if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, index + 1, 2, @" C", @" Q", @" G")) {
      index += 3;
    }
    else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, index + 1, 1, @"C", @"K", @"Q") && !OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index + 1, 2, @"CE", @"CI")) {
      index += 2;
    }
    else {
      index++;
    }
  }
  return index;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleCCWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index) {
  if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, index + 2, 1, @"I", @"E", @"H") && !OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index + 2, 2, @"HU")) {
    if ((index == 1 && [self charAtWithNSString:value withInt:index - 1] == 'A') || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index - 1, 5, @"UCCEE", @"UCCES")) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithNSString:@"KS"];
    }
    else {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'X'];
    }
    index += 3;
  }
  else {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K'];
    index += 2;
  }
  return index;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleCHWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index) {
  if (index > 0 && OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 4, @"CHAE")) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K' withChar:'X'];
    return index + 2;
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionCH0WithNSString_withInt_(self, value, index)) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K'];
    return index + 2;
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionCH1WithNSString_withInt_(self, value, index)) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K'];
    return index + 2;
  }
  else {
    if (index > 0) {
      if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, 0, 2, @"MC")) {
        [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K'];
      }
      else {
        [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'X' withChar:'K'];
      }
    }
    else {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'X'];
    }
    return index + 2;
  }
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleDWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index) {
  if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 2, @"DG")) {
    if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, index + 2, 1, @"I", @"E", @"Y")) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'J'];
      index += 3;
    }
    else {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithNSString:@"TK"];
      index += 2;
    }
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index, 2, @"DT", @"DD")) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'T'];
    index += 2;
  }
  else {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'T'];
    index++;
  }
  return index;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleGWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index, jboolean slavoGermanic) {
  if ([self charAtWithNSString:value withInt:index + 1] == 'H') {
    index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleGHWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
  }
  else if ([self charAtWithNSString:value withInt:index + 1] == 'N') {
    if (index == 1 && OrgApacheCommonsCodecLanguageDoubleMetaphone_isVowelWithChar_(self, [self charAtWithNSString:value withInt:0]) && !slavoGermanic) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithNSString:@"KN" withNSString:@"N"];
    }
    else if (!OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index + 2, 2, @"EY") && [self charAtWithNSString:value withInt:index + 1] != 'Y' && !slavoGermanic) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithNSString:@"N" withNSString:@"KN"];
    }
    else {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithNSString:@"KN"];
    }
    index = index + 2;
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index + 1, 2, @"LI") && !slavoGermanic) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithNSString:@"KL" withNSString:@"L"];
    index += 2;
  }
  else if (index == 0 && ([self charAtWithNSString:value withInt:index + 1] == 'Y' || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSStringArray_(value, index + 1, 2, OrgApacheCommonsCodecLanguageDoubleMetaphone_ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K' withChar:'J'];
    index += 2;
  }
  else if ((OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index + 1, 2, @"ER") || [self charAtWithNSString:value withInt:index + 1] == 'Y') && !OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, 0, 6, @"DANGER", @"RANGER", @"MANGER") && !OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index - 1, 1, @"E", @"I") && !OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index - 1, 3, @"RGY", @"OGY")) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K' withChar:'J'];
    index += 2;
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, index + 1, 1, @"E", @"I", @"Y") || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index - 1, 4, @"AGGI", @"OGGI")) {
    if ((OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, 0, 4, @"VAN ", @"VON ") || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, 0, 3, @"SCH")) || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index + 1, 2, @"ET")) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K'];
    }
    else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index + 1, 3, @"IER")) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'J'];
    }
    else {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'J' withChar:'K'];
    }
    index += 2;
  }
  else if ([self charAtWithNSString:value withInt:index + 1] == 'G') {
    index += 2;
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K'];
  }
  else {
    index++;
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K'];
  }
  return index;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleGHWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index) {
  if (index > 0 && !OrgApacheCommonsCodecLanguageDoubleMetaphone_isVowelWithChar_(self, [self charAtWithNSString:value withInt:index - 1])) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K'];
    index += 2;
  }
  else if (index == 0) {
    if ([self charAtWithNSString:value withInt:index + 2] == 'I') {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'J'];
    }
    else {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K'];
    }
    index += 2;
  }
  else if ((index > 1 && OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, index - 2, 1, @"B", @"H", @"D")) || (index > 2 && OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, index - 3, 1, @"B", @"H", @"D")) || (index > 3 && OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index - 4, 1, @"B", @"H"))) {
    index += 2;
  }
  else {
    if (index > 2 && [self charAtWithNSString:value withInt:index - 1] == 'U' && OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_withNSString_(value, index - 3, 1, @"C", @"G", @"L", @"R", @"T")) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'F'];
    }
    else if (index > 0 && [self charAtWithNSString:value withInt:index - 1] != 'I') {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'K'];
    }
    index += 2;
  }
  return index;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleHWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index) {
  if ((index == 0 || OrgApacheCommonsCodecLanguageDoubleMetaphone_isVowelWithChar_(self, [self charAtWithNSString:value withInt:index - 1])) && OrgApacheCommonsCodecLanguageDoubleMetaphone_isVowelWithChar_(self, [self charAtWithNSString:value withInt:index + 1])) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'H'];
    index += 2;
  }
  else {
    index++;
  }
  return index;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleJWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index, jboolean slavoGermanic) {
  if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 4, @"JOSE") || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, 0, 4, @"SAN ")) {
    if (((index == 0 && ([self charAtWithNSString:value withInt:index + 4] == ' ')) || [((NSString *) nil_chk(value)) java_length] == 4) || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, 0, 4, @"SAN ")) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'H'];
    }
    else {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'J' withChar:'H'];
    }
    index++;
  }
  else {
    if (index == 0 && !OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 4, @"JOSE")) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'J' withChar:'A'];
    }
    else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_isVowelWithChar_(self, [self charAtWithNSString:value withInt:index - 1]) && !slavoGermanic && ([self charAtWithNSString:value withInt:index + 1] == 'A' || [self charAtWithNSString:value withInt:index + 1] == 'O')) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'J' withChar:'H'];
    }
    else if (index == [((NSString *) nil_chk(value)) java_length] - 1) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'J' withChar:' '];
    }
    else if (!OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSStringArray_(value, index + 1, 1, OrgApacheCommonsCodecLanguageDoubleMetaphone_L_T_K_S_N_M_B_Z) && !OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, index - 1, 1, @"S", @"K", @"L")) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'J'];
    }
    if ([self charAtWithNSString:value withInt:index + 1] == 'J') {
      index += 2;
    }
    else {
      index++;
    }
  }
  return index;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleLWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index) {
  if ([self charAtWithNSString:value withInt:index + 1] == 'L') {
    if (OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionL0WithNSString_withInt_(self, value, index)) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendPrimaryWithChar:'L'];
    }
    else {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'L'];
    }
    index += 2;
  }
  else {
    index++;
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'L'];
  }
  return index;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handlePWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index) {
  if ([self charAtWithNSString:value withInt:index + 1] == 'H') {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'F'];
    index += 2;
  }
  else {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'P'];
    index = OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index + 1, 1, @"P", @"B") ? index + 2 : index + 1;
  }
  return index;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleRWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index, jboolean slavoGermanic) {
  if (index == [((NSString *) nil_chk(value)) java_length] - 1 && !slavoGermanic && OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index - 2, 2, @"IE") && !OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index - 4, 2, @"ME", @"MA")) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendAlternateWithChar:'R'];
  }
  else {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'R'];
  }
  return [self charAtWithNSString:value withInt:index + 1] == 'R' ? index + 2 : index + 1;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleSWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index, jboolean slavoGermanic) {
  if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index - 1, 3, @"ISL", @"YSL")) {
    index++;
  }
  else if (index == 0 && OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 5, @"SUGAR")) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'X' withChar:'S'];
    index++;
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 2, @"SH")) {
    if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_(value, index + 1, 4, @"HEIM", @"HOEK", @"HOLM", @"HOLZ")) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'S'];
    }
    else {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'X'];
    }
    index += 2;
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index, 3, @"SIO", @"SIA") || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 4, @"SIAN")) {
    if (slavoGermanic) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'S'];
    }
    else {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'S' withChar:'X'];
    }
    index += 3;
  }
  else if ((index == 0 && OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_(value, index + 1, 1, @"M", @"N", @"L", @"W")) || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index + 1, 1, @"Z")) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'S' withChar:'X'];
    index = OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index + 1, 1, @"Z") ? index + 2 : index + 1;
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 2, @"SC")) {
    index = OrgApacheCommonsCodecLanguageDoubleMetaphone_handleSCWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(self, value, result, index);
  }
  else {
    if (index == [((NSString *) nil_chk(value)) java_length] - 1 && OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index - 2, 2, @"AI", @"OI")) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendAlternateWithChar:'S'];
    }
    else {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'S'];
    }
    index = OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index + 1, 1, @"S", @"Z") ? index + 2 : index + 1;
  }
  return index;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleSCWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index) {
  if ([self charAtWithNSString:value withInt:index + 2] == 'H') {
    if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(value, index + 3, 2, @"OO", @"ER", @"EN", @"UY", @"ED", @"EM")) {
      if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index + 3, 2, @"ER", @"EN")) {
        [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithNSString:@"X" withNSString:@"SK"];
      }
      else {
        [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithNSString:@"SK"];
      }
    }
    else {
      if (index == 0 && !OrgApacheCommonsCodecLanguageDoubleMetaphone_isVowelWithChar_(self, [self charAtWithNSString:value withInt:3]) && [self charAtWithNSString:value withInt:3] != 'W') {
        [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'X' withChar:'S'];
      }
      else {
        [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'X'];
      }
    }
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, index + 2, 1, @"I", @"E", @"Y")) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'S'];
  }
  else {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithNSString:@"SK"];
  }
  return index + 3;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleTWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index) {
  if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 4, @"TION")) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'X'];
    index += 3;
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index, 3, @"TIA", @"TCH")) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'X'];
    index += 3;
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 2, @"TH") || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 3, @"TTH")) {
    if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index + 2, 2, @"OM", @"AM") || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, 0, 4, @"VAN ", @"VON ") || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, 0, 3, @"SCH")) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'T'];
    }
    else {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'0' withChar:'T'];
    }
    index += 2;
  }
  else {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'T'];
    index = OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index + 1, 1, @"T", @"D") ? index + 2 : index + 1;
  }
  return index;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleWWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index) {
  if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 2, @"WR")) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'R'];
    index += 2;
  }
  else {
    if (index == 0 && (OrgApacheCommonsCodecLanguageDoubleMetaphone_isVowelWithChar_(self, [self charAtWithNSString:value withInt:index + 1]) || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 2, @"WH"))) {
      if (OrgApacheCommonsCodecLanguageDoubleMetaphone_isVowelWithChar_(self, [self charAtWithNSString:value withInt:index + 1])) {
        [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'A' withChar:'F'];
      }
      else {
        [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'A'];
      }
      index++;
    }
    else if ((index == [((NSString *) nil_chk(value)) java_length] - 1 && OrgApacheCommonsCodecLanguageDoubleMetaphone_isVowelWithChar_(self, [self charAtWithNSString:value withInt:index - 1])) || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_(value, index - 1, 5, @"EWSKI", @"EWSKY", @"OWSKI", @"OWSKY") || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, 0, 3, @"SCH")) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendAlternateWithChar:'F'];
      index++;
    }
    else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index, 4, @"WICZ", @"WITZ")) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithNSString:@"TS" withNSString:@"FX"];
      index += 4;
    }
    else {
      index++;
    }
  }
  return index;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleXWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index) {
  if (index == 0) {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'S'];
    index++;
  }
  else {
    if (!((index == [((NSString *) nil_chk(value)) java_length] - 1) && (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index - 3, 3, @"IAU", @"EAU") || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index - 2, 2, @"AU", @"OU")))) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithNSString:@"KS"];
    }
    index = OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index + 1, 1, @"C", @"X") ? index + 2 : index + 1;
  }
  return index;
}

jint OrgApacheCommonsCodecLanguageDoubleMetaphone_handleZWithNSString_withOrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_withInt_withBoolean_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *result, jint index, jboolean slavoGermanic) {
  if ([self charAtWithNSString:value withInt:index + 1] == 'H') {
    [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'J'];
    index += 2;
  }
  else {
    if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, index + 1, 2, @"ZO", @"ZI", @"ZA") || (slavoGermanic && (index > 0 && [self charAtWithNSString:value withInt:index - 1] != 'T'))) {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithNSString:@"S" withNSString:@"TS"];
    }
    else {
      [((OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *) nil_chk(result)) appendWithChar:'S'];
    }
    index = [self charAtWithNSString:value withInt:index + 1] == 'Z' ? index + 2 : index + 1;
  }
  return index;
}

jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionC0WithNSString_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, jint index) {
  if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index, 4, @"CHIA")) {
    return true;
  }
  else if (index <= 1) {
    return false;
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_isVowelWithChar_(self, [self charAtWithNSString:value withInt:index - 2])) {
    return false;
  }
  else if (!OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index - 1, 3, @"ACH")) {
    return false;
  }
  else {
    jchar c = [self charAtWithNSString:value withInt:index + 2];
    return (c != 'I' && c != 'E') || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index - 2, 6, @"BACHER", @"MACHER");
  }
}

jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionCH0WithNSString_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, jint index) {
  if (index != 0) {
    return false;
  }
  else if (!OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index + 1, 5, @"HARAC", @"HARIS") && !OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_(value, index + 1, 3, @"HOR", @"HYM", @"HIA", @"HEM")) {
    return false;
  }
  else if (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, 0, 5, @"CHORE")) {
    return false;
  }
  else {
    return true;
  }
}

jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionCH1WithNSString_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, jint index) {
  return ((OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, 0, 4, @"VAN ", @"VON ") || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, 0, 3, @"SCH")) || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, index - 2, 6, @"ORCHES", @"ARCHIT", @"ORCHID") || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, index + 2, 1, @"T", @"S") || ((OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_(value, index - 1, 1, @"A", @"O", @"U", @"E") || index == 0) && (OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSStringArray_(value, index + 2, 1, OrgApacheCommonsCodecLanguageDoubleMetaphone_L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == [((NSString *) nil_chk(value)) java_length] - 1)));
}

jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionL0WithNSString_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, jint index) {
  if (index == [((NSString *) nil_chk(value)) java_length] - 3 && OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(value, index - 1, 4, @"ILLO", @"ILLA", @"ALLE")) {
    return true;
  }
  else if ((OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, [value java_length] - 2, 2, @"AS", @"OS") || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(value, [value java_length] - 1, 1, @"A", @"O")) && OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index - 1, 4, @"ALLE")) {
    return true;
  }
  else {
    return false;
  }
}

jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_conditionM0WithNSString_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value, jint index) {
  if ([self charAtWithNSString:value withInt:index + 1] == 'M') {
    return true;
  }
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index - 1, 3, @"UMB") && ((index + 1) == [((NSString *) nil_chk(value)) java_length] - 1 || OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(value, index + 2, 2, @"ER"));
}

jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_isSlavoGermanicWithNSString_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value) {
  return [((NSString *) nil_chk(value)) java_indexOf:'W'] > -1 || [value java_indexOf:'K'] > -1 || [value java_indexOfString:@"CZ"] > -1 || [value java_indexOfString:@"WITZ"] > -1;
}

jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_isVowelWithChar_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, jchar ch) {
  return [((NSString *) nil_chk(OrgApacheCommonsCodecLanguageDoubleMetaphone_VOWELS)) java_indexOf:ch] != -1;
}

jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_isSilentStartWithNSString_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *value) {
  jboolean result = false;
  {
    IOSObjectArray *a__ = OrgApacheCommonsCodecLanguageDoubleMetaphone_SILENT_START;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *element = *b__++;
      if ([((NSString *) nil_chk(value)) java_hasPrefix:element]) {
        result = true;
        break;
      }
    }
  }
  return result;
}

NSString *OrgApacheCommonsCodecLanguageDoubleMetaphone_cleanInputWithNSString_(OrgApacheCommonsCodecLanguageDoubleMetaphone *self, NSString *input) {
  if (input == nil) {
    return nil;
  }
  input = [input java_trim];
  if ([((NSString *) nil_chk(input)) java_length] == 0) {
    return nil;
  }
  return [input java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)];
}

jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_(NSString *value, jint start, jint length, NSString *criteria) {
  OrgApacheCommonsCodecLanguageDoubleMetaphone_initialize();
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSStringArray_(value, start, length, [IOSObjectArray newArrayWithObjects:(id[]){ criteria } count:1 type:NSString_class_()]);
}

jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_(NSString *value, jint start, jint length, NSString *criteria1, NSString *criteria2) {
  OrgApacheCommonsCodecLanguageDoubleMetaphone_initialize();
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSStringArray_(value, start, length, [IOSObjectArray newArrayWithObjects:(id[]){ criteria1, criteria2 } count:2 type:NSString_class_()]);
}

jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_(NSString *value, jint start, jint length, NSString *criteria1, NSString *criteria2, NSString *criteria3) {
  OrgApacheCommonsCodecLanguageDoubleMetaphone_initialize();
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSStringArray_(value, start, length, [IOSObjectArray newArrayWithObjects:(id[]){ criteria1, criteria2, criteria3 } count:3 type:NSString_class_()]);
}

jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_(NSString *value, jint start, jint length, NSString *criteria1, NSString *criteria2, NSString *criteria3, NSString *criteria4) {
  OrgApacheCommonsCodecLanguageDoubleMetaphone_initialize();
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSStringArray_(value, start, length, [IOSObjectArray newArrayWithObjects:(id[]){ criteria1, criteria2, criteria3, criteria4 } count:4 type:NSString_class_()]);
}

jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_withNSString_(NSString *value, jint start, jint length, NSString *criteria1, NSString *criteria2, NSString *criteria3, NSString *criteria4, NSString *criteria5) {
  OrgApacheCommonsCodecLanguageDoubleMetaphone_initialize();
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSStringArray_(value, start, length, [IOSObjectArray newArrayWithObjects:(id[]){ criteria1, criteria2, criteria3, criteria4, criteria5 } count:5 type:NSString_class_()]);
}

jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(NSString *value, jint start, jint length, NSString *criteria1, NSString *criteria2, NSString *criteria3, NSString *criteria4, NSString *criteria5, NSString *criteria6) {
  OrgApacheCommonsCodecLanguageDoubleMetaphone_initialize();
  return OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSStringArray_(value, start, length, [IOSObjectArray newArrayWithObjects:(id[]){ criteria1, criteria2, criteria3, criteria4, criteria5, criteria6 } count:6 type:NSString_class_()]);
}

jboolean OrgApacheCommonsCodecLanguageDoubleMetaphone_containsWithNSString_withInt_withInt_withNSStringArray_(NSString *value, jint start, jint length, IOSObjectArray *criteria) {
  OrgApacheCommonsCodecLanguageDoubleMetaphone_initialize();
  jboolean result = false;
  if (start >= 0 && start + length <= [((NSString *) nil_chk(value)) java_length]) {
    NSString *target = [((NSString *) nil_chk(value)) java_substring:start endIndex:start + length];
    {
      IOSObjectArray *a__ = criteria;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *element = *b__++;
        if ([((NSString *) nil_chk(target)) isEqual:element]) {
          result = true;
          break;
        }
      }
    }
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageDoubleMetaphone)

@implementation OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult

- (instancetype)initWithOrgApacheCommonsCodecLanguageDoubleMetaphone:(OrgApacheCommonsCodecLanguageDoubleMetaphone *)outer$
                                                             withInt:(jint)maxLength {
  OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_initWithOrgApacheCommonsCodecLanguageDoubleMetaphone_withInt_(self, outer$, maxLength);
  return self;
}

- (void)appendWithChar:(jchar)value {
  [self appendPrimaryWithChar:value];
  [self appendAlternateWithChar:value];
}

- (void)appendWithChar:(jchar)primary
              withChar:(jchar)alternate {
  [self appendPrimaryWithChar:primary];
  [self appendAlternateWithChar:alternate];
}

- (void)appendPrimaryWithChar:(jchar)value {
  if ([((JavaLangStringBuffer *) nil_chk(self->primary_)) java_length] < self->maxLength_) {
    (void) [self->primary_ appendWithChar:value];
  }
}

- (void)appendAlternateWithChar:(jchar)value {
  if ([((JavaLangStringBuffer *) nil_chk(self->alternate_)) java_length] < self->maxLength_) {
    (void) [self->alternate_ appendWithChar:value];
  }
}

- (void)appendWithNSString:(NSString *)value {
  [self appendPrimaryWithNSString:value];
  [self appendAlternateWithNSString:value];
}

- (void)appendWithNSString:(NSString *)primary
              withNSString:(NSString *)alternate {
  [self appendPrimaryWithNSString:primary];
  [self appendAlternateWithNSString:alternate];
}

- (void)appendPrimaryWithNSString:(NSString *)value {
  jint addChars = self->maxLength_ - [((JavaLangStringBuffer *) nil_chk(self->primary_)) java_length];
  if ([((NSString *) nil_chk(value)) java_length] <= addChars) {
    (void) [self->primary_ appendWithNSString:value];
  }
  else {
    (void) [self->primary_ appendWithNSString:[value java_substring:0 endIndex:addChars]];
  }
}

- (void)appendAlternateWithNSString:(NSString *)value {
  jint addChars = self->maxLength_ - [((JavaLangStringBuffer *) nil_chk(self->alternate_)) java_length];
  if ([((NSString *) nil_chk(value)) java_length] <= addChars) {
    (void) [self->alternate_ appendWithNSString:value];
  }
  else {
    (void) [self->alternate_ appendWithNSString:[value java_substring:0 endIndex:addChars]];
  }
}

- (NSString *)getPrimary {
  return [((JavaLangStringBuffer *) nil_chk(self->primary_)) description];
}

- (NSString *)getAlternate {
  return [((JavaLangStringBuffer *) nil_chk(self->alternate_)) description];
}

- (jboolean)isComplete {
  return [((JavaLangStringBuffer *) nil_chk(self->primary_)) java_length] >= self->maxLength_ && [((JavaLangStringBuffer *) nil_chk(self->alternate_)) java_length] >= self->maxLength_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheCommonsCodecLanguageDoubleMetaphone:withInt:);
  methods[1].selector = @selector(appendWithChar:);
  methods[2].selector = @selector(appendWithChar:withChar:);
  methods[3].selector = @selector(appendPrimaryWithChar:);
  methods[4].selector = @selector(appendAlternateWithChar:);
  methods[5].selector = @selector(appendWithNSString:);
  methods[6].selector = @selector(appendWithNSString:withNSString:);
  methods[7].selector = @selector(appendPrimaryWithNSString:);
  methods[8].selector = @selector(appendAlternateWithNSString:);
  methods[9].selector = @selector(getPrimary);
  methods[10].selector = @selector(getAlternate);
  methods[11].selector = @selector(isComplete);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "primary_", "LJavaLangStringBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "alternate_", "LJavaLangStringBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxLength_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "append", "C", "CC", "appendPrimary", "appendAlternate", "LNSString;", "LNSString;LNSString;", "LOrgApacheCommonsCodecLanguageDoubleMetaphone;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult = { "DoubleMetaphoneResult", "org.apache.commons.codec.language", ptrTable, methods, fields, 7, 0x1, 12, 3, 8, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult;
}

@end

void OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_initWithOrgApacheCommonsCodecLanguageDoubleMetaphone_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *self, OrgApacheCommonsCodecLanguageDoubleMetaphone *outer$, jint maxLength) {
  NSObject_init(self);
  self->primary_ = new_JavaLangStringBuffer_initWithInt_([outer$ getMaxCodeLen]);
  self->alternate_ = new_JavaLangStringBuffer_initWithInt_([outer$ getMaxCodeLen]);
  self->maxLength_ = maxLength;
}

OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *new_OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_initWithOrgApacheCommonsCodecLanguageDoubleMetaphone_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *outer$, jint maxLength) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult, initWithOrgApacheCommonsCodecLanguageDoubleMetaphone_withInt_, outer$, maxLength)
}

OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult *create_OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult_initWithOrgApacheCommonsCodecLanguageDoubleMetaphone_withInt_(OrgApacheCommonsCodecLanguageDoubleMetaphone *outer$, jint maxLength) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult, initWithOrgApacheCommonsCodecLanguageDoubleMetaphone_withInt_, outer$, maxLength)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageDoubleMetaphone_DoubleMetaphoneResult)
