//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/commons-codec/org/apache/commons/codec/binary/BaseNCodecInputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/FilterInputStream.h"
#include "java/io/InputStream.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "org/apache/commons/codec/binary/BaseNCodec.h"
#include "org/apache/commons/codec/binary/BaseNCodecInputStream.h"

@interface OrgApacheCommonsCodecBinaryBaseNCodecInputStream () {
 @public
  jboolean doEncode_;
  OrgApacheCommonsCodecBinaryBaseNCodec *baseNCodec_;
  IOSByteArray *singleByte_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecBinaryBaseNCodecInputStream, baseNCodec_, OrgApacheCommonsCodecBinaryBaseNCodec *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecBinaryBaseNCodecInputStream, singleByte_, IOSByteArray *)

@implementation OrgApacheCommonsCodecBinaryBaseNCodecInputStream

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
withOrgApacheCommonsCodecBinaryBaseNCodec:(OrgApacheCommonsCodecBinaryBaseNCodec *)baseNCodec
                              withBoolean:(jboolean)doEncode {
  OrgApacheCommonsCodecBinaryBaseNCodecInputStream_initWithJavaIoInputStream_withOrgApacheCommonsCodecBinaryBaseNCodec_withBoolean_(self, inArg, baseNCodec, doEncode);
  return self;
}

- (jint)read {
  jint r = [self readWithByteArray:singleByte_ withInt:0 withInt:1];
  while (r == 0) {
    r = [self readWithByteArray:singleByte_ withInt:0 withInt:1];
  }
  if (r > 0) {
    return IOSByteArray_Get(nil_chk(singleByte_), 0) < 0 ? 256 + IOSByteArray_Get(singleByte_, 0) : IOSByteArray_Get(singleByte_, 0);
  }
  return -1;
}

- (jint)readWithByteArray:(IOSByteArray *)b
                  withInt:(jint)offset
                  withInt:(jint)len {
  if (b == nil) {
    @throw new_JavaLangNullPointerException_init();
  }
  else if (offset < 0 || len < 0) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  else if (offset > b->size_ || offset + len > b->size_) {
    @throw new_JavaLangIndexOutOfBoundsException_init();
  }
  else if (len == 0) {
    return 0;
  }
  else {
    jint readLen = 0;
    while (readLen == 0) {
      if (![((OrgApacheCommonsCodecBinaryBaseNCodec *) nil_chk(baseNCodec_)) hasData]) {
        IOSByteArray *buf = [IOSByteArray newArrayWithLength:doEncode_ ? 4096 : 8192];
        jint c = [((JavaIoInputStream *) nil_chk(JreLoadVolatileId(&in_))) readWithByteArray:buf];
        if (doEncode_) {
          [baseNCodec_ encodeWithByteArray:buf withInt:0 withInt:c];
        }
        else {
          [baseNCodec_ decodeWithByteArray:buf withInt:0 withInt:c];
        }
      }
      readLen = [baseNCodec_ readResultsWithByteArray:b withInt:offset withInt:len];
    }
    return readLen;
  }
}

- (jboolean)markSupported {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:withOrgApacheCommonsCodecBinaryBaseNCodec:withBoolean:);
  methods[1].selector = @selector(read);
  methods[2].selector = @selector(readWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(markSupported);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "doEncode_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "baseNCodec_", "LOrgApacheCommonsCodecBinaryBaseNCodec;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "singleByte_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;LOrgApacheCommonsCodecBinaryBaseNCodec;Z", "LJavaIoIOException;", "read", "[BII" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecBinaryBaseNCodecInputStream = { "BaseNCodecInputStream", "org.apache.commons.codec.binary", ptrTable, methods, fields, 7, 0x1, 4, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecBinaryBaseNCodecInputStream;
}

@end

void OrgApacheCommonsCodecBinaryBaseNCodecInputStream_initWithJavaIoInputStream_withOrgApacheCommonsCodecBinaryBaseNCodec_withBoolean_(OrgApacheCommonsCodecBinaryBaseNCodecInputStream *self, JavaIoInputStream *inArg, OrgApacheCommonsCodecBinaryBaseNCodec *baseNCodec, jboolean doEncode) {
  JavaIoFilterInputStream_initWithJavaIoInputStream_(self, inArg);
  self->singleByte_ = [IOSByteArray newArrayWithLength:1];
  self->doEncode_ = doEncode;
  self->baseNCodec_ = baseNCodec;
}

OrgApacheCommonsCodecBinaryBaseNCodecInputStream *new_OrgApacheCommonsCodecBinaryBaseNCodecInputStream_initWithJavaIoInputStream_withOrgApacheCommonsCodecBinaryBaseNCodec_withBoolean_(JavaIoInputStream *inArg, OrgApacheCommonsCodecBinaryBaseNCodec *baseNCodec, jboolean doEncode) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecBinaryBaseNCodecInputStream, initWithJavaIoInputStream_withOrgApacheCommonsCodecBinaryBaseNCodec_withBoolean_, inArg, baseNCodec, doEncode)
}

OrgApacheCommonsCodecBinaryBaseNCodecInputStream *create_OrgApacheCommonsCodecBinaryBaseNCodecInputStream_initWithJavaIoInputStream_withOrgApacheCommonsCodecBinaryBaseNCodec_withBoolean_(JavaIoInputStream *inArg, OrgApacheCommonsCodecBinaryBaseNCodec *baseNCodec, jboolean doEncode) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecBinaryBaseNCodecInputStream, initWithJavaIoInputStream_withOrgApacheCommonsCodecBinaryBaseNCodec_withBoolean_, inArg, baseNCodec, doEncode)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecBinaryBaseNCodecInputStream)
