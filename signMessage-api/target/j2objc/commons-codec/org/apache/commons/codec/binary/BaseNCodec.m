//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/commons-codec/org/apache/commons/codec/binary/BaseNCodec.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/apache/commons/codec/DecoderException.h"
#include "org/apache/commons/codec/EncoderException.h"
#include "org/apache/commons/codec/binary/BaseNCodec.h"
#include "org/apache/commons/codec/binary/StringUtils.h"

@interface OrgApacheCommonsCodecBinaryBaseNCodec () {
 @public
  jint unencodedBlockSize_;
  jint encodedBlockSize_;
  jint chunkSeparatorLength_;
  jint readPos_;
}

- (void)resizeBuffer;

- (void)reset;

@end

inline jint OrgApacheCommonsCodecBinaryBaseNCodec_get_DEFAULT_BUFFER_RESIZE_FACTOR(void);
#define OrgApacheCommonsCodecBinaryBaseNCodec_DEFAULT_BUFFER_RESIZE_FACTOR 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBaseNCodec, DEFAULT_BUFFER_RESIZE_FACTOR, jint)

inline jint OrgApacheCommonsCodecBinaryBaseNCodec_get_DEFAULT_BUFFER_SIZE(void);
#define OrgApacheCommonsCodecBinaryBaseNCodec_DEFAULT_BUFFER_SIZE 8192
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsCodecBinaryBaseNCodec, DEFAULT_BUFFER_SIZE, jint)

__attribute__((unused)) static void OrgApacheCommonsCodecBinaryBaseNCodec_resizeBuffer(OrgApacheCommonsCodecBinaryBaseNCodec *self);

__attribute__((unused)) static void OrgApacheCommonsCodecBinaryBaseNCodec_reset(OrgApacheCommonsCodecBinaryBaseNCodec *self);

@implementation OrgApacheCommonsCodecBinaryBaseNCodec

- (instancetype)initWithInt:(jint)unencodedBlockSize
                    withInt:(jint)encodedBlockSize
                    withInt:(jint)lineLength
                    withInt:(jint)chunkSeparatorLength {
  OrgApacheCommonsCodecBinaryBaseNCodec_initWithInt_withInt_withInt_withInt_(self, unencodedBlockSize, encodedBlockSize, lineLength, chunkSeparatorLength);
  return self;
}

- (jboolean)hasData {
  return self->buffer_ != nil;
}

- (jint)available {
  return buffer_ != nil ? pos_ - readPos_ : 0;
}

- (jint)getDefaultBufferSize {
  return OrgApacheCommonsCodecBinaryBaseNCodec_DEFAULT_BUFFER_SIZE;
}

- (void)resizeBuffer {
  OrgApacheCommonsCodecBinaryBaseNCodec_resizeBuffer(self);
}

- (void)ensureBufferSizeWithInt:(jint)size {
  if ((buffer_ == nil) || (((IOSByteArray *) nil_chk(buffer_))->size_ < pos_ + size)) {
    OrgApacheCommonsCodecBinaryBaseNCodec_resizeBuffer(self);
  }
}

- (jint)readResultsWithByteArray:(IOSByteArray *)b
                         withInt:(jint)bPos
                         withInt:(jint)bAvail {
  if (buffer_ != nil) {
    jint len = JavaLangMath_minWithInt_withInt_([self available], bAvail);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, readPos_, b, bPos, len);
    readPos_ += len;
    if (readPos_ >= pos_) {
      buffer_ = nil;
    }
    return len;
  }
  return eof_ ? -1 : 0;
}

+ (jboolean)isWhiteSpaceWithByte:(jbyte)byteToCheck {
  return OrgApacheCommonsCodecBinaryBaseNCodec_isWhiteSpaceWithByte_(byteToCheck);
}

- (void)reset {
  OrgApacheCommonsCodecBinaryBaseNCodec_reset(self);
}

- (id)encodeWithId:(id)pObject {
  if (!([pObject isKindOfClass:[IOSByteArray class]])) {
    @throw new_OrgApacheCommonsCodecEncoderException_initWithNSString_(@"Parameter supplied to Base-N encode is not a byte[]");
  }
  return [self encodeWithByteArray:(IOSByteArray *) cast_chk(pObject, [IOSByteArray class])];
}

- (NSString *)encodeToStringWithByteArray:(IOSByteArray *)pArray {
  return OrgApacheCommonsCodecBinaryStringUtils_newStringUtf8WithByteArray_([self encodeWithByteArray:pArray]);
}

- (id)decodeWithId:(id)pObject {
  if ([pObject isKindOfClass:[IOSByteArray class]]) {
    return [self decodeWithByteArray:(IOSByteArray *) cast_chk(pObject, [IOSByteArray class])];
  }
  else if ([pObject isKindOfClass:[NSString class]]) {
    return [self decodeWithNSString:(NSString *) pObject];
  }
  else {
    @throw new_OrgApacheCommonsCodecDecoderException_initWithNSString_(@"Parameter supplied to Base-N decode is not a byte[] or a String");
  }
}

- (IOSByteArray *)decodeWithNSString:(NSString *)pArray {
  return [self decodeWithByteArray:OrgApacheCommonsCodecBinaryStringUtils_getBytesUtf8WithNSString_(pArray)];
}

- (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)pArray {
  OrgApacheCommonsCodecBinaryBaseNCodec_reset(self);
  if (pArray == nil || pArray->size_ == 0) {
    return pArray;
  }
  [self decodeWithByteArray:pArray withInt:0 withInt:pArray->size_];
  [self decodeWithByteArray:pArray withInt:0 withInt:-1];
  IOSByteArray *result = [IOSByteArray newArrayWithLength:pos_];
  [self readResultsWithByteArray:result withInt:0 withInt:result->size_];
  return result;
}

- (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)pArray {
  OrgApacheCommonsCodecBinaryBaseNCodec_reset(self);
  if (pArray == nil || pArray->size_ == 0) {
    return pArray;
  }
  [self encodeWithByteArray:pArray withInt:0 withInt:pArray->size_];
  [self encodeWithByteArray:pArray withInt:0 withInt:-1];
  IOSByteArray *buf = [IOSByteArray newArrayWithLength:pos_ - readPos_];
  [self readResultsWithByteArray:buf withInt:0 withInt:buf->size_];
  return buf;
}

- (NSString *)encodeAsStringWithByteArray:(IOSByteArray *)pArray {
  return OrgApacheCommonsCodecBinaryStringUtils_newStringUtf8WithByteArray_([self encodeWithByteArray:pArray]);
}

- (void)encodeWithByteArray:(IOSByteArray *)pArray
                    withInt:(jint)i
                    withInt:(jint)length {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)decodeWithByteArray:(IOSByteArray *)pArray
                    withInt:(jint)i
                    withInt:(jint)length {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)isInAlphabetWithByte:(jbyte)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isInAlphabetWithByteArray:(IOSByteArray *)arrayOctet
                          withBoolean:(jboolean)allowWSPad {
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(arrayOctet))->size_; i++) {
    if (![self isInAlphabetWithByte:IOSByteArray_Get(arrayOctet, i)] && (!allowWSPad || ((IOSByteArray_Get(arrayOctet, i) != OrgApacheCommonsCodecBinaryBaseNCodec_PAD) && !OrgApacheCommonsCodecBinaryBaseNCodec_isWhiteSpaceWithByte_(IOSByteArray_Get(arrayOctet, i))))) {
      return false;
    }
  }
  return true;
}

- (jboolean)isInAlphabetWithNSString:(NSString *)basen {
  return [self isInAlphabetWithByteArray:OrgApacheCommonsCodecBinaryStringUtils_getBytesUtf8WithNSString_(basen) withBoolean:true];
}

- (jboolean)containsAlphabetOrPadWithByteArray:(IOSByteArray *)arrayOctet {
  if (arrayOctet == nil) {
    return false;
  }
  {
    IOSByteArray *a__ = arrayOctet;
    jbyte const *b__ = a__->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte element = *b__++;
      if (OrgApacheCommonsCodecBinaryBaseNCodec_PAD == element || [self isInAlphabetWithByte:element]) {
        return true;
      }
    }
  }
  return false;
}

- (jlong)getEncodedLengthWithByteArray:(IOSByteArray *)pArray {
  jlong len = ((((IOSByteArray *) nil_chk(pArray))->size_ + unencodedBlockSize_ - 1) / unencodedBlockSize_) * (jlong) encodedBlockSize_;
  if (lineLength_ > 0) {
    len += ((len + lineLength_ - 1) / lineLength_) * chunkSeparatorLength_;
  }
  return len;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, 9, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 12, 8, 13, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 7, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 12, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x404, 16, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 18, 11, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 19, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withInt:);
  methods[1].selector = @selector(hasData);
  methods[2].selector = @selector(available);
  methods[3].selector = @selector(getDefaultBufferSize);
  methods[4].selector = @selector(resizeBuffer);
  methods[5].selector = @selector(ensureBufferSizeWithInt:);
  methods[6].selector = @selector(readResultsWithByteArray:withInt:withInt:);
  methods[7].selector = @selector(isWhiteSpaceWithByte:);
  methods[8].selector = @selector(reset);
  methods[9].selector = @selector(encodeWithId:);
  methods[10].selector = @selector(encodeToStringWithByteArray:);
  methods[11].selector = @selector(decodeWithId:);
  methods[12].selector = @selector(decodeWithNSString:);
  methods[13].selector = @selector(decodeWithByteArray:);
  methods[14].selector = @selector(encodeWithByteArray:);
  methods[15].selector = @selector(encodeAsStringWithByteArray:);
  methods[16].selector = @selector(encodeWithByteArray:withInt:withInt:);
  methods[17].selector = @selector(decodeWithByteArray:withInt:withInt:);
  methods[18].selector = @selector(isInAlphabetWithByte:);
  methods[19].selector = @selector(isInAlphabetWithByteArray:withBoolean:);
  methods[20].selector = @selector(isInAlphabetWithNSString:);
  methods[21].selector = @selector(containsAlphabetOrPadWithByteArray:);
  methods[22].selector = @selector(getEncodedLengthWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MIME_CHUNK_SIZE", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBaseNCodec_MIME_CHUNK_SIZE, 0x19, -1, -1, -1, -1 },
    { "PEM_CHUNK_SIZE", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBaseNCodec_PEM_CHUNK_SIZE, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_BUFFER_RESIZE_FACTOR", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBaseNCodec_DEFAULT_BUFFER_RESIZE_FACTOR, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_BUFFER_SIZE", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBaseNCodec_DEFAULT_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "MASK_8BITS", "I", .constantValue.asInt = OrgApacheCommonsCodecBinaryBaseNCodec_MASK_8BITS, 0x1c, -1, -1, -1, -1 },
    { "PAD_DEFAULT", "B", .constantValue.asChar = OrgApacheCommonsCodecBinaryBaseNCodec_PAD_DEFAULT, 0x1c, -1, -1, -1, -1 },
    { "PAD", "B", .constantValue.asChar = OrgApacheCommonsCodecBinaryBaseNCodec_PAD, 0x14, 20, -1, -1, -1 },
    { "unencodedBlockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "encodedBlockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lineLength_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "chunkSeparatorLength_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "buffer_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pos_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "readPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "eof_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "currentLinePos_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "modulus_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIII", "ensureBufferSize", "I", "readResults", "[BII", "isWhiteSpace", "B", "encode", "LNSObject;", "LOrgApacheCommonsCodecEncoderException;", "encodeToString", "[B", "decode", "LOrgApacheCommonsCodecDecoderException;", "LNSString;", "encodeAsString", "isInAlphabet", "[BZ", "containsAlphabetOrPad", "getEncodedLength", "PAD" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecBinaryBaseNCodec = { "BaseNCodec", "org.apache.commons.codec.binary", ptrTable, methods, fields, 7, 0x401, 23, 17, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecBinaryBaseNCodec;
}

@end

void OrgApacheCommonsCodecBinaryBaseNCodec_initWithInt_withInt_withInt_withInt_(OrgApacheCommonsCodecBinaryBaseNCodec *self, jint unencodedBlockSize, jint encodedBlockSize, jint lineLength, jint chunkSeparatorLength) {
  NSObject_init(self);
  self->unencodedBlockSize_ = unencodedBlockSize;
  self->encodedBlockSize_ = encodedBlockSize;
  self->lineLength_ = (lineLength > 0 && chunkSeparatorLength > 0) ? (lineLength / encodedBlockSize) * encodedBlockSize : 0;
  self->chunkSeparatorLength_ = chunkSeparatorLength;
}

void OrgApacheCommonsCodecBinaryBaseNCodec_resizeBuffer(OrgApacheCommonsCodecBinaryBaseNCodec *self) {
  if (self->buffer_ == nil) {
    self->buffer_ = [IOSByteArray newArrayWithLength:[self getDefaultBufferSize]];
    self->pos_ = 0;
    self->readPos_ = 0;
  }
  else {
    IOSByteArray *b = [IOSByteArray newArrayWithLength:self->buffer_->size_ * OrgApacheCommonsCodecBinaryBaseNCodec_DEFAULT_BUFFER_RESIZE_FACTOR];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buffer_, 0, b, 0, self->buffer_->size_);
    self->buffer_ = b;
  }
}

jboolean OrgApacheCommonsCodecBinaryBaseNCodec_isWhiteSpaceWithByte_(jbyte byteToCheck) {
  OrgApacheCommonsCodecBinaryBaseNCodec_initialize();
  switch (byteToCheck) {
    case ' ':
    case 0x000a:
    case 0x000d:
    case 0x0009:
    return true;
    default:
    return false;
  }
}

void OrgApacheCommonsCodecBinaryBaseNCodec_reset(OrgApacheCommonsCodecBinaryBaseNCodec *self) {
  self->buffer_ = nil;
  self->pos_ = 0;
  self->readPos_ = 0;
  self->currentLinePos_ = 0;
  self->modulus_ = 0;
  self->eof_ = false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecBinaryBaseNCodec)
