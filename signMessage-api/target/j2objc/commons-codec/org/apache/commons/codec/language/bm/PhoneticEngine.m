//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/commons-codec/org/apache/commons/codec/language/bm/PhoneticEngine.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/EnumMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "java/util/stream/IntStream.h"
#include "org/apache/commons/codec/language/bm/Lang.h"
#include "org/apache/commons/codec/language/bm/Languages.h"
#include "org/apache/commons/codec/language/bm/NameType.h"
#include "org/apache/commons/codec/language/bm/PhoneticEngine.h"
#include "org/apache/commons/codec/language/bm/Rule.h"
#include "org/apache/commons/codec/language/bm/RuleType.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheCommonsCodecLanguageBmPhoneticEngine () {
 @public
  OrgApacheCommonsCodecLanguageBmLang *lang_;
  OrgApacheCommonsCodecLanguageBmNameType *nameType_;
  OrgApacheCommonsCodecLanguageBmRuleType *ruleType_;
  jboolean concat_;
}

+ (id<JavaLangCharSequence>)cacheSubSequenceWithJavaLangCharSequence:(id<JavaLangCharSequence>)cached;

+ (NSString *)joinWithJavaLangIterable:(id<JavaLangIterable>)strings
                          withNSString:(NSString *)sep;

- (OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *)applyFinalRulesWithOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder:(OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *)phonemeBuilder
                                                                                                                                 withJavaUtilList:(id<JavaUtilList>)finalRules;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmPhoneticEngine, lang_, OrgApacheCommonsCodecLanguageBmLang *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmPhoneticEngine, nameType_, OrgApacheCommonsCodecLanguageBmNameType *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmPhoneticEngine, ruleType_, OrgApacheCommonsCodecLanguageBmRuleType *)

inline id<JavaUtilMap> OrgApacheCommonsCodecLanguageBmPhoneticEngine_get_NAME_PREFIXES(void);
static id<JavaUtilMap> OrgApacheCommonsCodecLanguageBmPhoneticEngine_NAME_PREFIXES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageBmPhoneticEngine, NAME_PREFIXES, id<JavaUtilMap>)

__attribute__((unused)) static id<JavaLangCharSequence> OrgApacheCommonsCodecLanguageBmPhoneticEngine_cacheSubSequenceWithJavaLangCharSequence_(id<JavaLangCharSequence> cached);

__attribute__((unused)) static NSString *OrgApacheCommonsCodecLanguageBmPhoneticEngine_joinWithJavaLangIterable_withNSString_(id<JavaLangIterable> strings, NSString *sep);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *OrgApacheCommonsCodecLanguageBmPhoneticEngine_applyFinalRulesWithOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withJavaUtilList_(OrgApacheCommonsCodecLanguageBmPhoneticEngine *self, OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *phonemeBuilder, id<JavaUtilList> finalRules);

@interface OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder () {
 @public
  id<JavaUtilSet> phonemes_;
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)phonemes;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder, phonemes_, id<JavaUtilSet>)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_initWithJavaUtilSet_(OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *self, id<JavaUtilSet> phonemes);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_initWithJavaUtilSet_(id<JavaUtilSet> phonemes) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *create_OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_initWithJavaUtilSet_(id<JavaUtilSet> phonemes);

@interface OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication : NSObject {
 @public
  id<JavaUtilList> finalRules_;
  id<JavaLangCharSequence> input_;
  OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *phonemeBuilder_;
  jint i_;
  jboolean found_;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)finalRules
            withJavaLangCharSequence:(id<JavaLangCharSequence>)input
withOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder:(OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *)phonemeBuilder
                             withInt:(jint)i;

- (jint)getI;

- (OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *)getPhonemeBuilder;

- (OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication *)invoke;

- (jboolean)isFound;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication)

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication, finalRules_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication, input_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication, phonemeBuilder_, OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication_initWithJavaUtilList_withJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withInt_(OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication *self, id<JavaUtilList> finalRules, id<JavaLangCharSequence> input, OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *phonemeBuilder, jint i);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication *new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication_initWithJavaUtilList_withJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withInt_(id<JavaUtilList> finalRules, id<JavaLangCharSequence> input, OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *phonemeBuilder, jint i) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication *create_OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication_initWithJavaUtilList_withJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withInt_(id<JavaUtilList> finalRules, id<JavaLangCharSequence> input, OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *phonemeBuilder, jint i);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication)

@interface OrgApacheCommonsCodecLanguageBmPhoneticEngine_1 : NSObject < JavaLangCharSequence > {
 @public
  id<JavaLangCharSequence> val$cached_;
  IOSObjectArray *val$cache_;
}

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)capture$0
              withJavaLangCharSequenceArray2:(IOSObjectArray *)capture$1;

- (jchar)charAtWithInt:(jint)index;

- (jint)java_length;

- (id<JavaLangCharSequence>)subSequenceFrom:(jint)start
                                         to:(jint)end;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmPhoneticEngine_1)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmPhoneticEngine_1_initWithJavaLangCharSequence_withJavaLangCharSequenceArray2_(OrgApacheCommonsCodecLanguageBmPhoneticEngine_1 *self, id<JavaLangCharSequence> capture$0, IOSObjectArray *capture$1);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmPhoneticEngine_1 *new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_1_initWithJavaLangCharSequence_withJavaLangCharSequenceArray2_(id<JavaLangCharSequence> capture$0, IOSObjectArray *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmPhoneticEngine_1 *create_OrgApacheCommonsCodecLanguageBmPhoneticEngine_1_initWithJavaLangCharSequence_withJavaLangCharSequenceArray2_(id<JavaLangCharSequence> capture$0, IOSObjectArray *capture$1);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsCodecLanguageBmPhoneticEngine)

@implementation OrgApacheCommonsCodecLanguageBmPhoneticEngine

+ (id<JavaLangCharSequence>)cacheSubSequenceWithJavaLangCharSequence:(id<JavaLangCharSequence>)cached {
  return OrgApacheCommonsCodecLanguageBmPhoneticEngine_cacheSubSequenceWithJavaLangCharSequence_(cached);
}

+ (NSString *)joinWithJavaLangIterable:(id<JavaLangIterable>)strings
                          withNSString:(NSString *)sep {
  return OrgApacheCommonsCodecLanguageBmPhoneticEngine_joinWithJavaLangIterable_withNSString_(strings, sep);
}

- (instancetype)initWithOrgApacheCommonsCodecLanguageBmNameType:(OrgApacheCommonsCodecLanguageBmNameType *)nameType
                    withOrgApacheCommonsCodecLanguageBmRuleType:(OrgApacheCommonsCodecLanguageBmRuleType *)ruleType
                                                    withBoolean:(jboolean)concat {
  OrgApacheCommonsCodecLanguageBmPhoneticEngine_initWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withBoolean_(self, nameType, ruleType, concat);
  return self;
}

- (OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *)applyFinalRulesWithOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder:(OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *)phonemeBuilder
                                                                                                                                 withJavaUtilList:(id<JavaUtilList>)finalRules {
  return OrgApacheCommonsCodecLanguageBmPhoneticEngine_applyFinalRulesWithOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withJavaUtilList_(self, phonemeBuilder, finalRules);
}

- (NSString *)encodeWithNSString:(NSString *)input {
  OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *languageSet = [((OrgApacheCommonsCodecLanguageBmLang *) nil_chk(self->lang_)) guessLanguagesWithNSString:input];
  return [self encodeWithNSString:input withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:languageSet];
}

- (NSString *)encodeWithNSString:(NSString *)input
withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:(OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)languageSet {
  id<JavaUtilList> rules = OrgApacheCommonsCodecLanguageBmRule_getInstanceWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(self->nameType_, JreLoadEnum(OrgApacheCommonsCodecLanguageBmRuleType, RULES), languageSet);
  id<JavaUtilList> finalRules1 = OrgApacheCommonsCodecLanguageBmRule_getInstanceWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withNSString_(self->nameType_, self->ruleType_, @"common");
  id<JavaUtilList> finalRules2 = OrgApacheCommonsCodecLanguageBmRule_getInstanceWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(self->nameType_, self->ruleType_, languageSet);
  input = [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(input)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)])) java_replace:'-' withChar:' '])) java_trim];
  if (self->nameType_ == JreLoadEnum(OrgApacheCommonsCodecLanguageBmNameType, GENERIC)) {
    if ([((NSString *) nil_chk(input)) java_length] >= 2 && [((NSString *) nil_chk([input java_substring:0 endIndex:2])) isEqual:@"d'"]) {
      NSString *remainder = [input java_substring:2];
      NSString *combined = JreStrcat("C$", 'd', remainder);
      return JreStrcat("C$$$C", '(', [self encodeWithNSString:remainder], @")-(", [self encodeWithNSString:combined], ')');
    }
    for (NSString * __strong l in nil_chk([((id<JavaUtilMap>) nil_chk(OrgApacheCommonsCodecLanguageBmPhoneticEngine_NAME_PREFIXES)) getWithId:self->nameType_])) {
      if ([input java_hasPrefix:JreStrcat("$C", l, ' ')]) {
        NSString *remainder = [input java_substring:[((NSString *) nil_chk(l)) java_length] + 1];
        NSString *combined = JreStrcat("$$", l, remainder);
        return JreStrcat("C$$$C", '(', [self encodeWithNSString:remainder], @")-(", [self encodeWithNSString:combined], ')');
      }
    }
  }
  id<JavaUtilList> words = JavaUtilArrays_asListWithNSObjectArray_([((NSString *) nil_chk(input)) java_split:@"\\s+"]);
  id<JavaUtilList> words2 = new_JavaUtilArrayList_init();
  switch ([self->nameType_ ordinal]) {
    case OrgApacheCommonsCodecLanguageBmNameType_Enum_SEPHARDIC:
    for (NSString * __strong aWord in nil_chk(words)) {
      IOSObjectArray *parts = [((NSString *) nil_chk(aWord)) java_split:@"'"];
      NSString *lastPart = IOSObjectArray_Get(parts, ((IOSObjectArray *) nil_chk(parts))->size_ - 1);
      [words2 addWithId:lastPart];
    }
    [words2 removeAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(OrgApacheCommonsCodecLanguageBmPhoneticEngine_NAME_PREFIXES)) getWithId:self->nameType_]];
    break;
    case OrgApacheCommonsCodecLanguageBmNameType_Enum_ASHKENAZI:
    [words2 addAllWithJavaUtilCollection:words];
    [words2 removeAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(OrgApacheCommonsCodecLanguageBmPhoneticEngine_NAME_PREFIXES)) getWithId:self->nameType_]];
    break;
    case OrgApacheCommonsCodecLanguageBmNameType_Enum_GENERIC:
    [words2 addAllWithJavaUtilCollection:words];
    break;
    default:
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Unreachable case: ", self->nameType_));
  }
  if (self->concat_) {
    input = OrgApacheCommonsCodecLanguageBmPhoneticEngine_joinWithJavaLangIterable_withNSString_(words2, @" ");
  }
  else if ([words2 size] == 1) {
    input = [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilList>) nil_chk(words)) iterator])) next];
  }
  else {
    JavaLangStringBuilder *result = new_JavaLangStringBuilder_init();
    for (NSString * __strong word in words2) {
      (void) [((JavaLangStringBuilder *) nil_chk([result appendWithNSString:@"-"])) appendWithNSString:[self encodeWithNSString:word]];
    }
    return [result substringWithInt:1];
  }
  OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *phonemeBuilder = OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_emptyWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(languageSet);
  id<JavaLangCharSequence> inputCache = OrgApacheCommonsCodecLanguageBmPhoneticEngine_cacheSubSequenceWithJavaLangCharSequence_(input);
  for (jint i = 0; i < [((id<JavaLangCharSequence>) nil_chk(inputCache)) java_length]; ) {
    OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication *rulesApplication = [new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication_initWithJavaUtilList_withJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withInt_(rules, inputCache, phonemeBuilder, i) invoke];
    i = [((OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication *) nil_chk(rulesApplication)) getI];
    phonemeBuilder = [rulesApplication getPhonemeBuilder];
  }
  phonemeBuilder = OrgApacheCommonsCodecLanguageBmPhoneticEngine_applyFinalRulesWithOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withJavaUtilList_(self, phonemeBuilder, finalRules1);
  phonemeBuilder = OrgApacheCommonsCodecLanguageBmPhoneticEngine_applyFinalRulesWithOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withJavaUtilList_(self, phonemeBuilder, finalRules2);
  return [((OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *) nil_chk(phonemeBuilder)) makeString];
}

- (OrgApacheCommonsCodecLanguageBmLang *)getLang {
  return self->lang_;
}

- (OrgApacheCommonsCodecLanguageBmNameType *)getNameType {
  return self->nameType_;
}

- (OrgApacheCommonsCodecLanguageBmRuleType *)getRuleType {
  return self->ruleType_;
}

- (jboolean)isConcat {
  return self->concat_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaLangCharSequence;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 2, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder;", 0x2, 6, 7, -1, 8, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 11, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmLang;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmNameType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmRuleType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(cacheSubSequenceWithJavaLangCharSequence:);
  methods[1].selector = @selector(joinWithJavaLangIterable:withNSString:);
  methods[2].selector = @selector(initWithOrgApacheCommonsCodecLanguageBmNameType:withOrgApacheCommonsCodecLanguageBmRuleType:withBoolean:);
  methods[3].selector = @selector(applyFinalRulesWithOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder:withJavaUtilList:);
  methods[4].selector = @selector(encodeWithNSString:);
  methods[5].selector = @selector(encodeWithNSString:withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:);
  methods[6].selector = @selector(getLang);
  methods[7].selector = @selector(getNameType);
  methods[8].selector = @selector(getRuleType);
  methods[9].selector = @selector(isConcat);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NAME_PREFIXES", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 12, 13, -1 },
    { "lang_", "LOrgApacheCommonsCodecLanguageBmLang;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "nameType_", "LOrgApacheCommonsCodecLanguageBmNameType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ruleType_", "LOrgApacheCommonsCodecLanguageBmRuleType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "concat_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "cacheSubSequence", "LJavaLangCharSequence;", "join", "LJavaLangIterable;LNSString;", "(Ljava/lang/Iterable<Ljava/lang/String;>;Ljava/lang/String;)Ljava/lang/String;", "LOrgApacheCommonsCodecLanguageBmNameType;LOrgApacheCommonsCodecLanguageBmRuleType;Z", "applyFinalRules", "LOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder;LJavaUtilList;", "(Lorg/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder;Ljava/util/List<Lorg/apache/commons/codec/language/bm/Rule;>;)Lorg/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder;", "encode", "LNSString;", "LNSString;LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", &OrgApacheCommonsCodecLanguageBmPhoneticEngine_NAME_PREFIXES, "Ljava/util/Map<Lorg/apache/commons/codec/language/bm/NameType;Ljava/util/Set<Ljava/lang/String;>;>;", "LOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder;LOrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmPhoneticEngine = { "PhoneticEngine", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x1, 10, 5, -1, 14, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmPhoneticEngine;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsCodecLanguageBmPhoneticEngine class]) {
    OrgApacheCommonsCodecLanguageBmPhoneticEngine_NAME_PREFIXES = new_JavaUtilEnumMap_initWithIOSClass_(OrgApacheCommonsCodecLanguageBmNameType_class_());
    {
      (void) [OrgApacheCommonsCodecLanguageBmPhoneticEngine_NAME_PREFIXES putWithId:JreLoadEnum(OrgApacheCommonsCodecLanguageBmNameType, ASHKENAZI) withId:JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(new_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"bar", @"ben", @"da", @"de", @"van", @"von" } count:6 type:NSString_class_()])))];
      (void) [OrgApacheCommonsCodecLanguageBmPhoneticEngine_NAME_PREFIXES putWithId:JreLoadEnum(OrgApacheCommonsCodecLanguageBmNameType, SEPHARDIC) withId:JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(new_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"al", @"el", @"da", @"dal", @"de", @"del", @"dela", @"de la", @"della", @"des", @"di", @"do", @"dos", @"du", @"van", @"von" } count:16 type:NSString_class_()])))];
      (void) [OrgApacheCommonsCodecLanguageBmPhoneticEngine_NAME_PREFIXES putWithId:JreLoadEnum(OrgApacheCommonsCodecLanguageBmNameType, GENERIC) withId:JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(new_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"da", @"dal", @"de", @"del", @"dela", @"de la", @"della", @"des", @"di", @"do", @"dos", @"du", @"van", @"von" } count:14 type:NSString_class_()])))];
    }
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsCodecLanguageBmPhoneticEngine)
  }
}

@end

id<JavaLangCharSequence> OrgApacheCommonsCodecLanguageBmPhoneticEngine_cacheSubSequenceWithJavaLangCharSequence_(id<JavaLangCharSequence> cached) {
  OrgApacheCommonsCodecLanguageBmPhoneticEngine_initialize();
  IOSObjectArray *cache = [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ [((id<JavaLangCharSequence>) nil_chk(cached)) java_length], [cached java_length] } type:JavaLangCharSequence_class_()];
  return new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_1_initWithJavaLangCharSequence_withJavaLangCharSequenceArray2_(cached, cache);
}

NSString *OrgApacheCommonsCodecLanguageBmPhoneticEngine_joinWithJavaLangIterable_withNSString_(id<JavaLangIterable> strings, NSString *sep) {
  OrgApacheCommonsCodecLanguageBmPhoneticEngine_initialize();
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  id<JavaUtilIterator> si = [((id<JavaLangIterable>) nil_chk(strings)) iterator];
  if ([((id<JavaUtilIterator>) nil_chk(si)) hasNext]) {
    (void) [sb appendWithNSString:[si next]];
  }
  while ([si hasNext]) {
    (void) [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:sep])) appendWithNSString:[si next]];
  }
  return [sb description];
}

void OrgApacheCommonsCodecLanguageBmPhoneticEngine_initWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withBoolean_(OrgApacheCommonsCodecLanguageBmPhoneticEngine *self, OrgApacheCommonsCodecLanguageBmNameType *nameType, OrgApacheCommonsCodecLanguageBmRuleType *ruleType, jboolean concat) {
  NSObject_init(self);
  if (ruleType == JreLoadEnum(OrgApacheCommonsCodecLanguageBmRuleType, RULES)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"ruleType must not be ", JreLoadEnum(OrgApacheCommonsCodecLanguageBmRuleType, RULES)));
  }
  self->nameType_ = nameType;
  self->ruleType_ = ruleType;
  self->concat_ = concat;
  self->lang_ = OrgApacheCommonsCodecLanguageBmLang_instanceWithOrgApacheCommonsCodecLanguageBmNameType_(nameType);
}

OrgApacheCommonsCodecLanguageBmPhoneticEngine *new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_initWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withBoolean_(OrgApacheCommonsCodecLanguageBmNameType *nameType, OrgApacheCommonsCodecLanguageBmRuleType *ruleType, jboolean concat) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmPhoneticEngine, initWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withBoolean_, nameType, ruleType, concat)
}

OrgApacheCommonsCodecLanguageBmPhoneticEngine *create_OrgApacheCommonsCodecLanguageBmPhoneticEngine_initWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withBoolean_(OrgApacheCommonsCodecLanguageBmNameType *nameType, OrgApacheCommonsCodecLanguageBmRuleType *ruleType, jboolean concat) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmPhoneticEngine, initWithOrgApacheCommonsCodecLanguageBmNameType_withOrgApacheCommonsCodecLanguageBmRuleType_withBoolean_, nameType, ruleType, concat)
}

OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *OrgApacheCommonsCodecLanguageBmPhoneticEngine_applyFinalRulesWithOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withJavaUtilList_(OrgApacheCommonsCodecLanguageBmPhoneticEngine *self, OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *phonemeBuilder, id<JavaUtilList> finalRules) {
  if (finalRules == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"finalRules can not be null");
  }
  if ([finalRules isEmpty]) {
    return phonemeBuilder;
  }
  id<JavaUtilSet> phonemes = new_JavaUtilTreeSet_initWithJavaUtilComparator_(JreLoadStatic(OrgApacheCommonsCodecLanguageBmRule_Phoneme, COMPARATOR));
  for (OrgApacheCommonsCodecLanguageBmRule_Phoneme * __strong phoneme in nil_chk([((OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *) nil_chk(phonemeBuilder)) getPhonemes])) {
    OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *subBuilder = OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_emptyWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_([((OrgApacheCommonsCodecLanguageBmRule_Phoneme *) nil_chk(phoneme)) getLanguages]);
    id<JavaLangCharSequence> phonemeText = OrgApacheCommonsCodecLanguageBmPhoneticEngine_cacheSubSequenceWithJavaLangCharSequence_([phoneme getPhonemeText]);
    for (jint i = 0; i < [((id<JavaLangCharSequence>) nil_chk(phonemeText)) java_length]; ) {
      OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication *rulesApplication = [new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication_initWithJavaUtilList_withJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withInt_(finalRules, phonemeText, subBuilder, i) invoke];
      jboolean found = [((OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication *) nil_chk(rulesApplication)) isFound];
      subBuilder = [rulesApplication getPhonemeBuilder];
      if (!found) {
        subBuilder = [((OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *) nil_chk(subBuilder)) appendWithJavaLangCharSequence:[phonemeText subSequenceFrom:i to:i + 1]];
      }
      i = [rulesApplication getI];
    }
    [phonemes addAllWithJavaUtilCollection:[((OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *) nil_chk(subBuilder)) getPhonemes]];
  }
  return new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_initWithJavaUtilSet_(phonemes);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageBmPhoneticEngine)

@implementation OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder

+ (OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *)emptyWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:(OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)languages {
  return OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_emptyWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(languages);
}

- (instancetype)initWithJavaUtilSet:(id<JavaUtilSet>)phonemes {
  OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_initWithJavaUtilSet_(self, phonemes);
  return self;
}

- (OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)str {
  id<JavaUtilSet> newPhonemes = new_JavaUtilHashSet_init();
  for (OrgApacheCommonsCodecLanguageBmRule_Phoneme * __strong ph in nil_chk(self->phonemes_)) {
    [newPhonemes addWithId:[((OrgApacheCommonsCodecLanguageBmRule_Phoneme *) nil_chk(ph)) appendWithJavaLangCharSequence:str]];
  }
  return new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_initWithJavaUtilSet_(newPhonemes);
}

- (OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *)applyWithOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr:(id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr>)phonemeExpr {
  id<JavaUtilSet> newPhonemes = new_JavaUtilHashSet_init();
  for (OrgApacheCommonsCodecLanguageBmRule_Phoneme * __strong left in nil_chk(self->phonemes_)) {
    for (OrgApacheCommonsCodecLanguageBmRule_Phoneme * __strong right in nil_chk([((id<OrgApacheCommonsCodecLanguageBmRule_PhonemeExpr>) nil_chk(phonemeExpr)) getPhonemes])) {
      OrgApacheCommonsCodecLanguageBmRule_Phoneme *join = [((OrgApacheCommonsCodecLanguageBmRule_Phoneme *) nil_chk(left)) joinWithOrgApacheCommonsCodecLanguageBmRule_Phoneme:right];
      if (![((OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *) nil_chk([((OrgApacheCommonsCodecLanguageBmRule_Phoneme *) nil_chk(join)) getLanguages])) isEmpty]) {
        [newPhonemes addWithId:join];
      }
    }
  }
  return new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_initWithJavaUtilSet_(newPhonemes);
}

- (id<JavaUtilSet>)getPhonemes {
  return self->phonemes_;
}

- (NSString *)makeString {
  JavaLangStringBuilder *sb = new_JavaLangStringBuilder_init();
  for (OrgApacheCommonsCodecLanguageBmRule_Phoneme * __strong ph in nil_chk(self->phonemes_)) {
    if ([sb java_length] > 0) {
      (void) [sb appendWithNSString:@"|"];
    }
    (void) [sb appendWithJavaLangCharSequence:[((OrgApacheCommonsCodecLanguageBmRule_Phoneme *) nil_chk(ph)) getPhonemeText]];
  }
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, 3, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 8, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(emptyWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet:);
  methods[1].selector = @selector(initWithJavaUtilSet:);
  methods[2].selector = @selector(appendWithJavaLangCharSequence:);
  methods[3].selector = @selector(applyWithOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr:);
  methods[4].selector = @selector(getPhonemes);
  methods[5].selector = @selector(makeString);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "phonemes_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "empty", "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/commons/codec/language/bm/Rule$Phoneme;>;)V", "append", "LJavaLangCharSequence;", "apply", "LOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr;", "()Ljava/util/Set<Lorg/apache/commons/codec/language/bm/Rule$Phoneme;>;", "Ljava/util/Set<Lorg/apache/commons/codec/language/bm/Rule$Phoneme;>;", "LOrgApacheCommonsCodecLanguageBmPhoneticEngine;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder = { "PhonemeBuilder", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x18, 6, 1, 10, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder;
}

@end

OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_emptyWithOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *languages) {
  OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_initialize();
  return new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_initWithJavaUtilSet_(JavaUtilCollections_singletonWithId_(new_OrgApacheCommonsCodecLanguageBmRule_Phoneme_initWithJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_(@"", languages)));
}

void OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_initWithJavaUtilSet_(OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *self, id<JavaUtilSet> phonemes) {
  NSObject_init(self);
  self->phonemes_ = phonemes;
}

OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_initWithJavaUtilSet_(id<JavaUtilSet> phonemes) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder, initWithJavaUtilSet_, phonemes)
}

OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *create_OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_initWithJavaUtilSet_(id<JavaUtilSet> phonemes) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder, initWithJavaUtilSet_, phonemes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder)

@implementation OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)finalRules
            withJavaLangCharSequence:(id<JavaLangCharSequence>)input
withOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder:(OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *)phonemeBuilder
                             withInt:(jint)i {
  OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication_initWithJavaUtilList_withJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withInt_(self, finalRules, input, phonemeBuilder, i);
  return self;
}

- (jint)getI {
  return self->i_;
}

- (OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *)getPhonemeBuilder {
  return self->phonemeBuilder_;
}

- (OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication *)invoke {
  self->found_ = false;
  jint patternLength = 0;
  for (OrgApacheCommonsCodecLanguageBmRule * __strong rule in nil_chk(self->finalRules_)) {
    {
      NSString *pattern = [((OrgApacheCommonsCodecLanguageBmRule *) nil_chk(rule)) getPattern];
      patternLength = [((NSString *) nil_chk(pattern)) java_length];
      if (![rule patternAndContextMatchesWithJavaLangCharSequence:self->input_ withInt:self->i_]) {
        goto continue_RULES;
      }
      self->phonemeBuilder_ = [((OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *) nil_chk(self->phonemeBuilder_)) applyWithOrgApacheCommonsCodecLanguageBmRule_PhonemeExpr:[rule getPhoneme]];
      self->found_ = true;
      goto break_RULES;
    }
    continue_RULES: ;
  }
  break_RULES: ;
  if (!self->found_) {
    patternLength = 1;
  }
  self->i_ += patternLength;
  return self;
}

- (jboolean)isFound {
  return self->found_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:withJavaLangCharSequence:withOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder:withInt:);
  methods[1].selector = @selector(getI);
  methods[2].selector = @selector(getPhonemeBuilder);
  methods[3].selector = @selector(invoke);
  methods[4].selector = @selector(isFound);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "finalRules_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
    { "input_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "phonemeBuilder_", "LOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "i_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "found_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;LJavaLangCharSequence;LOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder;I", "(Ljava/util/List<Lorg/apache/commons/codec/language/bm/Rule;>;Ljava/lang/CharSequence;Lorg/apache/commons/codec/language/bm/PhoneticEngine$PhonemeBuilder;I)V", "Ljava/util/List<Lorg/apache/commons/codec/language/bm/Rule;>;", "LOrgApacheCommonsCodecLanguageBmPhoneticEngine;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication = { "RulesApplication", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x1a, 5, 5, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication;
}

@end

void OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication_initWithJavaUtilList_withJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withInt_(OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication *self, id<JavaUtilList> finalRules, id<JavaLangCharSequence> input, OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *phonemeBuilder, jint i) {
  NSObject_init(self);
  if (finalRules == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"The finalRules argument must not be null");
  }
  self->finalRules_ = finalRules;
  self->phonemeBuilder_ = phonemeBuilder;
  self->input_ = input;
  self->i_ = i;
}

OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication *new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication_initWithJavaUtilList_withJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withInt_(id<JavaUtilList> finalRules, id<JavaLangCharSequence> input, OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *phonemeBuilder, jint i) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication, initWithJavaUtilList_withJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withInt_, finalRules, input, phonemeBuilder, i)
}

OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication *create_OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication_initWithJavaUtilList_withJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withInt_(id<JavaUtilList> finalRules, id<JavaLangCharSequence> input, OrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder *phonemeBuilder, jint i) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication, initWithJavaUtilList_withJavaLangCharSequence_withOrgApacheCommonsCodecLanguageBmPhoneticEngine_PhonemeBuilder_withInt_, finalRules, input, phonemeBuilder, i)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageBmPhoneticEngine_RulesApplication)

@implementation OrgApacheCommonsCodecLanguageBmPhoneticEngine_1

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)capture$0
              withJavaLangCharSequenceArray2:(IOSObjectArray *)capture$1 {
  OrgApacheCommonsCodecLanguageBmPhoneticEngine_1_initWithJavaLangCharSequence_withJavaLangCharSequenceArray2_(self, capture$0, capture$1);
  return self;
}

- (jchar)charAtWithInt:(jint)index {
  return [((id<JavaLangCharSequence>) nil_chk(val$cached_)) charAtWithInt:index];
}

- (jint)java_length {
  return [((id<JavaLangCharSequence>) nil_chk(val$cached_)) java_length];
}

- (id<JavaLangCharSequence>)subSequenceFrom:(jint)start
                                         to:(jint)end {
  if (start == end) {
    return @"";
  }
  id<JavaLangCharSequence> res = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(val$cache_), start)), end - 1);
  if (res == nil) {
    res = [((id<JavaLangCharSequence>) nil_chk(val$cached_)) subSequenceFrom:start to:end];
    (void) IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(val$cache_, start)), end - 1, res);
  }
  return res;
}

- (id<JavaUtilStreamIntStream>)chars {
  return JavaLangCharSequence_chars(self);
}

- (id<JavaUtilStreamIntStream>)codePoints {
  return JavaLangCharSequence_codePoints(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangCharSequence:withJavaLangCharSequenceArray2:);
  methods[1].selector = @selector(charAtWithInt:);
  methods[2].selector = @selector(java_length);
  methods[3].selector = @selector(subSequenceFrom:to:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$cached_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$cache_", "[[LJavaLangCharSequence;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "charAt", "I", "length", "subSequence", "II", "LOrgApacheCommonsCodecLanguageBmPhoneticEngine;", "cacheSubSequenceWithJavaLangCharSequence:" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmPhoneticEngine_1 = { "", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x8018, 4, 2, 5, -1, 6, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmPhoneticEngine_1;
}

@end

void OrgApacheCommonsCodecLanguageBmPhoneticEngine_1_initWithJavaLangCharSequence_withJavaLangCharSequenceArray2_(OrgApacheCommonsCodecLanguageBmPhoneticEngine_1 *self, id<JavaLangCharSequence> capture$0, IOSObjectArray *capture$1) {
  self->val$cached_ = capture$0;
  self->val$cache_ = capture$1;
  NSObject_init(self);
}

OrgApacheCommonsCodecLanguageBmPhoneticEngine_1 *new_OrgApacheCommonsCodecLanguageBmPhoneticEngine_1_initWithJavaLangCharSequence_withJavaLangCharSequenceArray2_(id<JavaLangCharSequence> capture$0, IOSObjectArray *capture$1) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmPhoneticEngine_1, initWithJavaLangCharSequence_withJavaLangCharSequenceArray2_, capture$0, capture$1)
}

OrgApacheCommonsCodecLanguageBmPhoneticEngine_1 *create_OrgApacheCommonsCodecLanguageBmPhoneticEngine_1_initWithJavaLangCharSequence_withJavaLangCharSequenceArray2_(id<JavaLangCharSequence> capture$0, IOSObjectArray *capture$1) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmPhoneticEngine_1, initWithJavaLangCharSequence_withJavaLangCharSequenceArray2_, capture$0, capture$1)
}
