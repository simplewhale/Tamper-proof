//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/commons-codec/org/apache/commons/codec/language/bm/Lang.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/EnumMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Scanner.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/commons/codec/language/bm/Lang.h"
#include "org/apache/commons/codec/language/bm/Languages.h"
#include "org/apache/commons/codec/language/bm/NameType.h"
#include "org/apache/commons/codec/language/bm/ResourceConstants.h"

@interface OrgApacheCommonsCodecLanguageBmLang () {
 @public
  OrgApacheCommonsCodecLanguageBmLanguages *languages_;
  id<JavaUtilList> rules_;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)rules
withOrgApacheCommonsCodecLanguageBmLanguages:(OrgApacheCommonsCodecLanguageBmLanguages *)languages;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmLang, languages_, OrgApacheCommonsCodecLanguageBmLanguages *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmLang, rules_, id<JavaUtilList>)

inline id<JavaUtilMap> OrgApacheCommonsCodecLanguageBmLang_get_Langs(void);
static id<JavaUtilMap> OrgApacheCommonsCodecLanguageBmLang_Langs;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageBmLang, Langs, id<JavaUtilMap>)

inline NSString *OrgApacheCommonsCodecLanguageBmLang_get_LANGUAGE_RULES_RN(void);
static NSString *OrgApacheCommonsCodecLanguageBmLang_LANGUAGE_RULES_RN = @"org/apache/commons/codec/language/bm/lang.txt";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsCodecLanguageBmLang, LANGUAGE_RULES_RN, NSString *)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmLang_initWithJavaUtilList_withOrgApacheCommonsCodecLanguageBmLanguages_(OrgApacheCommonsCodecLanguageBmLang *self, id<JavaUtilList> rules, OrgApacheCommonsCodecLanguageBmLanguages *languages);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmLang *new_OrgApacheCommonsCodecLanguageBmLang_initWithJavaUtilList_withOrgApacheCommonsCodecLanguageBmLanguages_(id<JavaUtilList> rules, OrgApacheCommonsCodecLanguageBmLanguages *languages) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmLang *create_OrgApacheCommonsCodecLanguageBmLang_initWithJavaUtilList_withOrgApacheCommonsCodecLanguageBmLanguages_(id<JavaUtilList> rules, OrgApacheCommonsCodecLanguageBmLanguages *languages);

@interface OrgApacheCommonsCodecLanguageBmLang_LangRule : NSObject {
 @public
  jboolean acceptOnMatch_;
  id<JavaUtilSet> languages_;
  JavaUtilRegexPattern *pattern_;
}

- (instancetype)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                             withJavaUtilSet:(id<JavaUtilSet>)languages
                                 withBoolean:(jboolean)acceptOnMatch;

- (jboolean)matchesWithNSString:(NSString *)txt;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCodecLanguageBmLang_LangRule)

J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmLang_LangRule, languages_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCodecLanguageBmLang_LangRule, pattern_, JavaUtilRegexPattern *)

__attribute__((unused)) static void OrgApacheCommonsCodecLanguageBmLang_LangRule_initWithJavaUtilRegexPattern_withJavaUtilSet_withBoolean_(OrgApacheCommonsCodecLanguageBmLang_LangRule *self, JavaUtilRegexPattern *pattern, id<JavaUtilSet> languages, jboolean acceptOnMatch);

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmLang_LangRule *new_OrgApacheCommonsCodecLanguageBmLang_LangRule_initWithJavaUtilRegexPattern_withJavaUtilSet_withBoolean_(JavaUtilRegexPattern *pattern, id<JavaUtilSet> languages, jboolean acceptOnMatch) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsCodecLanguageBmLang_LangRule *create_OrgApacheCommonsCodecLanguageBmLang_LangRule_initWithJavaUtilRegexPattern_withJavaUtilSet_withBoolean_(JavaUtilRegexPattern *pattern, id<JavaUtilSet> languages, jboolean acceptOnMatch);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsCodecLanguageBmLang_LangRule)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsCodecLanguageBmLang)

@implementation OrgApacheCommonsCodecLanguageBmLang

+ (OrgApacheCommonsCodecLanguageBmLang *)instanceWithOrgApacheCommonsCodecLanguageBmNameType:(OrgApacheCommonsCodecLanguageBmNameType *)nameType {
  return OrgApacheCommonsCodecLanguageBmLang_instanceWithOrgApacheCommonsCodecLanguageBmNameType_(nameType);
}

+ (OrgApacheCommonsCodecLanguageBmLang *)loadFromResourceWithNSString:(NSString *)languageRulesResourceName
                         withOrgApacheCommonsCodecLanguageBmLanguages:(OrgApacheCommonsCodecLanguageBmLanguages *)languages {
  return OrgApacheCommonsCodecLanguageBmLang_loadFromResourceWithNSString_withOrgApacheCommonsCodecLanguageBmLanguages_(languageRulesResourceName, languages);
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)rules
withOrgApacheCommonsCodecLanguageBmLanguages:(OrgApacheCommonsCodecLanguageBmLanguages *)languages {
  OrgApacheCommonsCodecLanguageBmLang_initWithJavaUtilList_withOrgApacheCommonsCodecLanguageBmLanguages_(self, rules, languages);
  return self;
}

- (NSString *)guessLanguageWithNSString:(NSString *)text {
  OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *ls = [self guessLanguagesWithNSString:text];
  return [((OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *) nil_chk(ls)) isSingleton] ? [ls getAny] : OrgApacheCommonsCodecLanguageBmLanguages_ANY;
}

- (OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *)guessLanguagesWithNSString:(NSString *)input {
  NSString *text = [((NSString *) nil_chk(input)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)];
  id<JavaUtilSet> langs = new_JavaUtilHashSet_initWithJavaUtilCollection_([((OrgApacheCommonsCodecLanguageBmLanguages *) nil_chk(self->languages_)) getLanguages]);
  for (OrgApacheCommonsCodecLanguageBmLang_LangRule * __strong rule in nil_chk(self->rules_)) {
    if ([((OrgApacheCommonsCodecLanguageBmLang_LangRule *) nil_chk(rule)) matchesWithNSString:text]) {
      if (rule->acceptOnMatch_) {
        [langs retainAllWithJavaUtilCollection:rule->languages_];
      }
      else {
        [langs removeAllWithJavaUtilCollection:rule->languages_];
      }
    }
    else {
    }
  }
  OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *ls = OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet_fromWithJavaUtilSet_(langs);
  return [((OrgApacheCommonsCodecLanguageBmLanguages_LanguageSet *) nil_chk(ls)) isEqual:JreLoadStatic(OrgApacheCommonsCodecLanguageBmLanguages, NO_LANGUAGES)] ? JreLoadStatic(OrgApacheCommonsCodecLanguageBmLanguages, ANY_LANGUAGE) : ls;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheCommonsCodecLanguageBmLang;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmLang;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 4, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsCodecLanguageBmLanguages_LanguageSet;", 0x1, 8, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(instanceWithOrgApacheCommonsCodecLanguageBmNameType:);
  methods[1].selector = @selector(loadFromResourceWithNSString:withOrgApacheCommonsCodecLanguageBmLanguages:);
  methods[2].selector = @selector(initWithJavaUtilList:withOrgApacheCommonsCodecLanguageBmLanguages:);
  methods[3].selector = @selector(guessLanguageWithNSString:);
  methods[4].selector = @selector(guessLanguagesWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "Langs", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 9, 10, -1 },
    { "LANGUAGE_RULES_RN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "languages_", "LOrgApacheCommonsCodecLanguageBmLanguages;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rules_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "instance", "LOrgApacheCommonsCodecLanguageBmNameType;", "loadFromResource", "LNSString;LOrgApacheCommonsCodecLanguageBmLanguages;", "LJavaUtilList;LOrgApacheCommonsCodecLanguageBmLanguages;", "(Ljava/util/List<Lorg/apache/commons/codec/language/bm/Lang$LangRule;>;Lorg/apache/commons/codec/language/bm/Languages;)V", "guessLanguage", "LNSString;", "guessLanguages", &OrgApacheCommonsCodecLanguageBmLang_Langs, "Ljava/util/Map<Lorg/apache/commons/codec/language/bm/NameType;Lorg/apache/commons/codec/language/bm/Lang;>;", &OrgApacheCommonsCodecLanguageBmLang_LANGUAGE_RULES_RN, "Ljava/util/List<Lorg/apache/commons/codec/language/bm/Lang$LangRule;>;", "LOrgApacheCommonsCodecLanguageBmLang_LangRule;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmLang = { "Lang", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x1, 5, 4, -1, 13, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmLang;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsCodecLanguageBmLang class]) {
    OrgApacheCommonsCodecLanguageBmLang_Langs = new_JavaUtilEnumMap_initWithIOSClass_(OrgApacheCommonsCodecLanguageBmNameType_class_());
    {
      {
        IOSObjectArray *a__ = OrgApacheCommonsCodecLanguageBmNameType_values();
        OrgApacheCommonsCodecLanguageBmNameType * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgApacheCommonsCodecLanguageBmNameType * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgApacheCommonsCodecLanguageBmNameType *s = *b__++;
          (void) [OrgApacheCommonsCodecLanguageBmLang_Langs putWithId:s withId:OrgApacheCommonsCodecLanguageBmLang_loadFromResourceWithNSString_withOrgApacheCommonsCodecLanguageBmLanguages_(OrgApacheCommonsCodecLanguageBmLang_LANGUAGE_RULES_RN, OrgApacheCommonsCodecLanguageBmLanguages_getInstanceWithOrgApacheCommonsCodecLanguageBmNameType_(s))];
        }
      }
    }
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsCodecLanguageBmLang)
  }
}

@end

OrgApacheCommonsCodecLanguageBmLang *OrgApacheCommonsCodecLanguageBmLang_instanceWithOrgApacheCommonsCodecLanguageBmNameType_(OrgApacheCommonsCodecLanguageBmNameType *nameType) {
  OrgApacheCommonsCodecLanguageBmLang_initialize();
  return [((id<JavaUtilMap>) nil_chk(OrgApacheCommonsCodecLanguageBmLang_Langs)) getWithId:nameType];
}

OrgApacheCommonsCodecLanguageBmLang *OrgApacheCommonsCodecLanguageBmLang_loadFromResourceWithNSString_withOrgApacheCommonsCodecLanguageBmLanguages_(NSString *languageRulesResourceName, OrgApacheCommonsCodecLanguageBmLanguages *languages) {
  OrgApacheCommonsCodecLanguageBmLang_initialize();
  id<JavaUtilList> rules = new_JavaUtilArrayList_init();
  JavaIoInputStream *lRulesIS = [((JavaLangClassLoader *) nil_chk([OrgApacheCommonsCodecLanguageBmLang_class_() getClassLoader])) getResourceAsStreamWithNSString:languageRulesResourceName];
  if (lRulesIS == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Unable to resolve required resource:", OrgApacheCommonsCodecLanguageBmLang_LANGUAGE_RULES_RN));
  }
  JavaUtilScanner *scanner = new_JavaUtilScanner_initWithJavaIoInputStream_withNSString_(lRulesIS, OrgApacheCommonsCodecLanguageBmResourceConstants_ENCODING);
  jboolean inExtendedComment = false;
  while ([scanner hasNextLine]) {
    NSString *rawLine = [scanner nextLine];
    NSString *line = rawLine;
    if (inExtendedComment) {
      if ([((NSString *) nil_chk(line)) java_hasSuffix:OrgApacheCommonsCodecLanguageBmResourceConstants_EXT_CMT_END]) {
        inExtendedComment = false;
      }
      else {
      }
    }
    else {
      if ([((NSString *) nil_chk(line)) java_hasPrefix:OrgApacheCommonsCodecLanguageBmResourceConstants_EXT_CMT_START]) {
        inExtendedComment = true;
      }
      else {
        jint cmtI = [line java_indexOfString:OrgApacheCommonsCodecLanguageBmResourceConstants_CMT];
        if (cmtI >= 0) {
          line = [line java_substring:0 endIndex:cmtI];
        }
        line = [((NSString *) nil_chk(line)) java_trim];
        if ([((NSString *) nil_chk(line)) java_length] == 0) {
          continue;
        }
        IOSObjectArray *parts = [line java_split:@"\\s+"];
        if (((IOSObjectArray *) nil_chk(parts))->size_ != 3) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$C", @"Warning: malformed line '", rawLine, '\'')];
          continue;
        }
        JavaUtilRegexPattern *pattern = JavaUtilRegexPattern_compileWithNSString_(IOSObjectArray_Get(parts, 0));
        IOSObjectArray *langs = [((NSString *) nil_chk(IOSObjectArray_Get(parts, 1))) java_split:@"\\+"];
        jboolean accept = [((NSString *) nil_chk(IOSObjectArray_Get(parts, 2))) isEqual:@"true"];
        [rules addWithId:new_OrgApacheCommonsCodecLanguageBmLang_LangRule_initWithJavaUtilRegexPattern_withJavaUtilSet_withBoolean_(pattern, new_JavaUtilHashSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(langs)), accept)];
      }
    }
  }
  return new_OrgApacheCommonsCodecLanguageBmLang_initWithJavaUtilList_withOrgApacheCommonsCodecLanguageBmLanguages_(rules, languages);
}

void OrgApacheCommonsCodecLanguageBmLang_initWithJavaUtilList_withOrgApacheCommonsCodecLanguageBmLanguages_(OrgApacheCommonsCodecLanguageBmLang *self, id<JavaUtilList> rules, OrgApacheCommonsCodecLanguageBmLanguages *languages) {
  NSObject_init(self);
  self->rules_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(rules);
  self->languages_ = languages;
}

OrgApacheCommonsCodecLanguageBmLang *new_OrgApacheCommonsCodecLanguageBmLang_initWithJavaUtilList_withOrgApacheCommonsCodecLanguageBmLanguages_(id<JavaUtilList> rules, OrgApacheCommonsCodecLanguageBmLanguages *languages) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmLang, initWithJavaUtilList_withOrgApacheCommonsCodecLanguageBmLanguages_, rules, languages)
}

OrgApacheCommonsCodecLanguageBmLang *create_OrgApacheCommonsCodecLanguageBmLang_initWithJavaUtilList_withOrgApacheCommonsCodecLanguageBmLanguages_(id<JavaUtilList> rules, OrgApacheCommonsCodecLanguageBmLanguages *languages) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmLang, initWithJavaUtilList_withOrgApacheCommonsCodecLanguageBmLanguages_, rules, languages)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageBmLang)

@implementation OrgApacheCommonsCodecLanguageBmLang_LangRule

- (instancetype)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                             withJavaUtilSet:(id<JavaUtilSet>)languages
                                 withBoolean:(jboolean)acceptOnMatch {
  OrgApacheCommonsCodecLanguageBmLang_LangRule_initWithJavaUtilRegexPattern_withJavaUtilSet_withBoolean_(self, pattern, languages, acceptOnMatch);
  return self;
}

- (jboolean)matchesWithNSString:(NSString *)txt {
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(self->pattern_)) matcherWithJavaLangCharSequence:txt])) find];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilRegexPattern:withJavaUtilSet:withBoolean:);
  methods[1].selector = @selector(matchesWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "acceptOnMatch_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "languages_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilRegexPattern;LJavaUtilSet;Z", "(Ljava/util/regex/Pattern;Ljava/util/Set<Ljava/lang/String;>;Z)V", "matches", "LNSString;", "Ljava/util/Set<Ljava/lang/String;>;", "LOrgApacheCommonsCodecLanguageBmLang;" };
  static const J2ObjcClassInfo _OrgApacheCommonsCodecLanguageBmLang_LangRule = { "LangRule", "org.apache.commons.codec.language.bm", ptrTable, methods, fields, 7, 0x1a, 2, 3, 5, -1, -1, -1, -1 };
  return &_OrgApacheCommonsCodecLanguageBmLang_LangRule;
}

@end

void OrgApacheCommonsCodecLanguageBmLang_LangRule_initWithJavaUtilRegexPattern_withJavaUtilSet_withBoolean_(OrgApacheCommonsCodecLanguageBmLang_LangRule *self, JavaUtilRegexPattern *pattern, id<JavaUtilSet> languages, jboolean acceptOnMatch) {
  NSObject_init(self);
  self->pattern_ = pattern;
  self->languages_ = languages;
  self->acceptOnMatch_ = acceptOnMatch;
}

OrgApacheCommonsCodecLanguageBmLang_LangRule *new_OrgApacheCommonsCodecLanguageBmLang_LangRule_initWithJavaUtilRegexPattern_withJavaUtilSet_withBoolean_(JavaUtilRegexPattern *pattern, id<JavaUtilSet> languages, jboolean acceptOnMatch) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsCodecLanguageBmLang_LangRule, initWithJavaUtilRegexPattern_withJavaUtilSet_withBoolean_, pattern, languages, acceptOnMatch)
}

OrgApacheCommonsCodecLanguageBmLang_LangRule *create_OrgApacheCommonsCodecLanguageBmLang_LangRule_initWithJavaUtilRegexPattern_withJavaUtilSet_withBoolean_(JavaUtilRegexPattern *pattern, id<JavaUtilSet> languages, jboolean acceptOnMatch) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsCodecLanguageBmLang_LangRule, initWithJavaUtilRegexPattern_withJavaUtilSet_withBoolean_, pattern, languages, acceptOnMatch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCodecLanguageBmLang_LangRule)
