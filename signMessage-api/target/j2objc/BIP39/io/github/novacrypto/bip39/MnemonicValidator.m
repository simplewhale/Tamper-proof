//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/BIP39/io/github/novacrypto/bip39/MnemonicValidator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "io/github/novacrypto/bip39/AlphabeticalCharSequenceComparator.h"
#include "io/github/novacrypto/bip39/ByteUtils.h"
#include "io/github/novacrypto/bip39/CharSequenceSplitter.h"
#include "io/github/novacrypto/bip39/MnemonicGenerator.h"
#include "io/github/novacrypto/bip39/MnemonicValidator.h"
#include "io/github/novacrypto/bip39/NFKDNormalizer.h"
#include "io/github/novacrypto/bip39/Normalization.h"
#include "io/github/novacrypto/bip39/Validation/InvalidChecksumException.h"
#include "io/github/novacrypto/bip39/Validation/InvalidWordCountException.h"
#include "io/github/novacrypto/bip39/Validation/UnexpectedWhiteSpaceException.h"
#include "io/github/novacrypto/bip39/Validation/WordNotFoundException.h"
#include "io/github/novacrypto/bip39/WordList.h"
#include "io/github/novacrypto/bip39/WordListMapNormalization.h"
#include "java/lang/CharSequence.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@class IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex;

#pragma clang diagnostic ignored "-Wprotocol"

@interface IoGithubNovacryptoBip39MnemonicValidator () {
 @public
  IOSObjectArray *words_;
  IoGithubNovacryptoBip39CharSequenceSplitter *charSequenceSplitter_;
  id<IoGithubNovacryptoBip39NFKDNormalizer> normalizer_;
}

- (instancetype)initWithIoGithubNovacryptoBip39WordList:(id<IoGithubNovacryptoBip39WordList>)wordList;

+ (void)validateWithIntArray:(IOSIntArray *)wordIndexes;

- (IOSIntArray *)findWordIndexesWithJavaUtilCollection:(id<JavaUtilCollection>)split;

- (jint)findWordIndexWithJavaLangCharSequence:(id<JavaLangCharSequence>)buffer;

+ (void)wordIndexesToEntropyWithCheckSumWithIntArray:(IOSIntArray *)wordIndexes
                                       withByteArray:(IOSByteArray *)entropyWithChecksum;

+ (jbyte)maskOfFirstNBitsWithInt:(jint)n;

@end

J2OBJC_FIELD_SETTER(IoGithubNovacryptoBip39MnemonicValidator, words_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(IoGithubNovacryptoBip39MnemonicValidator, charSequenceSplitter_, IoGithubNovacryptoBip39CharSequenceSplitter *)
J2OBJC_FIELD_SETTER(IoGithubNovacryptoBip39MnemonicValidator, normalizer_, id<IoGithubNovacryptoBip39NFKDNormalizer>)

inline id<JavaUtilComparator> IoGithubNovacryptoBip39MnemonicValidator_get_wordListSortOrder(void);
static id<JavaUtilComparator> IoGithubNovacryptoBip39MnemonicValidator_wordListSortOrder;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoGithubNovacryptoBip39MnemonicValidator, wordListSortOrder, id<JavaUtilComparator>)

__attribute__((unused)) static void IoGithubNovacryptoBip39MnemonicValidator_initWithIoGithubNovacryptoBip39WordList_(IoGithubNovacryptoBip39MnemonicValidator *self, id<IoGithubNovacryptoBip39WordList> wordList);

__attribute__((unused)) static IoGithubNovacryptoBip39MnemonicValidator *new_IoGithubNovacryptoBip39MnemonicValidator_initWithIoGithubNovacryptoBip39WordList_(id<IoGithubNovacryptoBip39WordList> wordList) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoGithubNovacryptoBip39MnemonicValidator *create_IoGithubNovacryptoBip39MnemonicValidator_initWithIoGithubNovacryptoBip39WordList_(id<IoGithubNovacryptoBip39WordList> wordList);

__attribute__((unused)) static void IoGithubNovacryptoBip39MnemonicValidator_validateWithIntArray_(IOSIntArray *wordIndexes);

__attribute__((unused)) static IOSIntArray *IoGithubNovacryptoBip39MnemonicValidator_findWordIndexesWithJavaUtilCollection_(IoGithubNovacryptoBip39MnemonicValidator *self, id<JavaUtilCollection> split);

__attribute__((unused)) static jint IoGithubNovacryptoBip39MnemonicValidator_findWordIndexWithJavaLangCharSequence_(IoGithubNovacryptoBip39MnemonicValidator *self, id<JavaLangCharSequence> buffer);

__attribute__((unused)) static void IoGithubNovacryptoBip39MnemonicValidator_wordIndexesToEntropyWithCheckSumWithIntArray_withByteArray_(IOSIntArray *wordIndexes, IOSByteArray *entropyWithChecksum);

__attribute__((unused)) static jbyte IoGithubNovacryptoBip39MnemonicValidator_maskOfFirstNBitsWithInt_(jint n);

@interface IoGithubNovacryptoBip39MnemonicValidator_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *)o1
               withId:(IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(IoGithubNovacryptoBip39MnemonicValidator_1)

__attribute__((unused)) static void IoGithubNovacryptoBip39MnemonicValidator_1_init(IoGithubNovacryptoBip39MnemonicValidator_1 *self);

__attribute__((unused)) static IoGithubNovacryptoBip39MnemonicValidator_1 *new_IoGithubNovacryptoBip39MnemonicValidator_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoGithubNovacryptoBip39MnemonicValidator_1 *create_IoGithubNovacryptoBip39MnemonicValidator_1_init(void);

@interface IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex : NSObject {
 @public
  id<JavaLangCharSequence> word_;
  NSString *normalized_;
  jint index_;
}

- (instancetype)initWithIoGithubNovacryptoBip39MnemonicValidator:(IoGithubNovacryptoBip39MnemonicValidator *)outer$
                                                         withInt:(jint)i
                                        withJavaLangCharSequence:(id<JavaLangCharSequence>)word;

@end

J2OBJC_EMPTY_STATIC_INIT(IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex)

J2OBJC_FIELD_SETTER(IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex, word_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex, normalized_, NSString *)

__attribute__((unused)) static void IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex_initWithIoGithubNovacryptoBip39MnemonicValidator_withInt_withJavaLangCharSequence_(IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *self, IoGithubNovacryptoBip39MnemonicValidator *outer$, jint i, id<JavaLangCharSequence> word);

__attribute__((unused)) static IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *new_IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex_initWithIoGithubNovacryptoBip39MnemonicValidator_withInt_withJavaLangCharSequence_(IoGithubNovacryptoBip39MnemonicValidator *outer$, jint i, id<JavaLangCharSequence> word) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *create_IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex_initWithIoGithubNovacryptoBip39MnemonicValidator_withInt_withJavaLangCharSequence_(IoGithubNovacryptoBip39MnemonicValidator *outer$, jint i, id<JavaLangCharSequence> word);

J2OBJC_TYPE_LITERAL_HEADER(IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex)

J2OBJC_INITIALIZED_DEFN(IoGithubNovacryptoBip39MnemonicValidator)

@implementation IoGithubNovacryptoBip39MnemonicValidator

- (instancetype)initWithIoGithubNovacryptoBip39WordList:(id<IoGithubNovacryptoBip39WordList>)wordList {
  IoGithubNovacryptoBip39MnemonicValidator_initWithIoGithubNovacryptoBip39WordList_(self, wordList);
  return self;
}

+ (IoGithubNovacryptoBip39MnemonicValidator *)ofWordListWithIoGithubNovacryptoBip39WordList:(id<IoGithubNovacryptoBip39WordList>)wordList {
  return IoGithubNovacryptoBip39MnemonicValidator_ofWordListWithIoGithubNovacryptoBip39WordList_(wordList);
}

- (void)validateWithJavaLangCharSequence:(id<JavaLangCharSequence>)mnemonic {
  [self validateWithJavaUtilCollection:[((IoGithubNovacryptoBip39CharSequenceSplitter *) nil_chk(charSequenceSplitter_)) splitWithJavaLangCharSequence:mnemonic]];
}

- (void)validateWithJavaUtilCollection:(id<JavaUtilCollection>)mnemonic {
  IOSIntArray *wordIndexes = IoGithubNovacryptoBip39MnemonicValidator_findWordIndexesWithJavaUtilCollection_(self, mnemonic);
  @try {
    IoGithubNovacryptoBip39MnemonicValidator_validateWithIntArray_(wordIndexes);
  }
  @finally {
    JavaUtilArrays_fillWithIntArray_withInt_(wordIndexes, 0);
  }
}

+ (void)validateWithIntArray:(IOSIntArray *)wordIndexes {
  IoGithubNovacryptoBip39MnemonicValidator_validateWithIntArray_(wordIndexes);
}

- (IOSIntArray *)findWordIndexesWithJavaUtilCollection:(id<JavaUtilCollection>)split {
  return IoGithubNovacryptoBip39MnemonicValidator_findWordIndexesWithJavaUtilCollection_(self, split);
}

- (jint)findWordIndexWithJavaLangCharSequence:(id<JavaLangCharSequence>)buffer {
  return IoGithubNovacryptoBip39MnemonicValidator_findWordIndexWithJavaLangCharSequence_(self, buffer);
}

+ (void)wordIndexesToEntropyWithCheckSumWithIntArray:(IOSIntArray *)wordIndexes
                                       withByteArray:(IOSByteArray *)entropyWithChecksum {
  IoGithubNovacryptoBip39MnemonicValidator_wordIndexesToEntropyWithCheckSumWithIntArray_withByteArray_(wordIndexes, entropyWithChecksum);
}

+ (jbyte)maskOfFirstNBitsWithInt:(jint)n {
  return IoGithubNovacryptoBip39MnemonicValidator_maskOfFirstNBitsWithInt_(n);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LIoGithubNovacryptoBip39MnemonicValidator;", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, 4, 6, -1, -1 },
    { NULL, "V", 0xa, 2, 7, 8, -1, -1, -1 },
    { NULL, "[I", 0x2, 9, 5, 10, 11, -1, -1 },
    { NULL, "I", 0x2, 12, 3, 13, -1, -1, -1 },
    { NULL, "V", 0xa, 14, 15, -1, -1, -1, -1 },
    { NULL, "B", 0xa, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoGithubNovacryptoBip39WordList:);
  methods[1].selector = @selector(ofWordListWithIoGithubNovacryptoBip39WordList:);
  methods[2].selector = @selector(validateWithJavaLangCharSequence:);
  methods[3].selector = @selector(validateWithJavaUtilCollection:);
  methods[4].selector = @selector(validateWithIntArray:);
  methods[5].selector = @selector(findWordIndexesWithJavaUtilCollection:);
  methods[6].selector = @selector(findWordIndexWithJavaLangCharSequence:);
  methods[7].selector = @selector(wordIndexesToEntropyWithCheckSumWithIntArray:withByteArray:);
  methods[8].selector = @selector(maskOfFirstNBitsWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "words_", "[LIoGithubNovacryptoBip39MnemonicValidator_WordAndIndex;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "charSequenceSplitter_", "LIoGithubNovacryptoBip39CharSequenceSplitter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "normalizer_", "LIoGithubNovacryptoBip39NFKDNormalizer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "wordListSortOrder", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x1a, -1, 18, 19, -1 },
  };
  static const void *ptrTable[] = { "LIoGithubNovacryptoBip39WordList;", "ofWordList", "validate", "LJavaLangCharSequence;", "LIoGithubNovacryptoBip39ValidationInvalidChecksumException;LIoGithubNovacryptoBip39ValidationInvalidWordCountException;LIoGithubNovacryptoBip39ValidationWordNotFoundException;LIoGithubNovacryptoBip39ValidationUnexpectedWhiteSpaceException;", "LJavaUtilCollection;", "(Ljava/util/Collection<+Ljava/lang/CharSequence;>;)V", "[I", "LIoGithubNovacryptoBip39ValidationInvalidWordCountException;LIoGithubNovacryptoBip39ValidationInvalidChecksumException;", "findWordIndexes", "LIoGithubNovacryptoBip39ValidationUnexpectedWhiteSpaceException;LIoGithubNovacryptoBip39ValidationWordNotFoundException;", "(Ljava/util/Collection<+Ljava/lang/CharSequence;>;)[I", "findWordIndex", "LIoGithubNovacryptoBip39ValidationWordNotFoundException;", "wordIndexesToEntropyWithCheckSum", "[I[B", "maskOfFirstNBits", "I", &IoGithubNovacryptoBip39MnemonicValidator_wordListSortOrder, "Ljava/util/Comparator<Lio/github/novacrypto/bip39/MnemonicValidator$WordAndIndex;>;", "LIoGithubNovacryptoBip39MnemonicValidator_WordAndIndex;" };
  static const J2ObjcClassInfo _IoGithubNovacryptoBip39MnemonicValidator = { "MnemonicValidator", "io.github.novacrypto.bip39", ptrTable, methods, fields, 7, 0x11, 9, 4, -1, 20, -1, -1, -1 };
  return &_IoGithubNovacryptoBip39MnemonicValidator;
}

+ (void)initialize {
  if (self == [IoGithubNovacryptoBip39MnemonicValidator class]) {
    IoGithubNovacryptoBip39MnemonicValidator_wordListSortOrder = new_IoGithubNovacryptoBip39MnemonicValidator_1_init();
    J2OBJC_SET_INITIALIZED(IoGithubNovacryptoBip39MnemonicValidator)
  }
}

@end

void IoGithubNovacryptoBip39MnemonicValidator_initWithIoGithubNovacryptoBip39WordList_(IoGithubNovacryptoBip39MnemonicValidator *self, id<IoGithubNovacryptoBip39WordList> wordList) {
  NSObject_init(self);
  self->normalizer_ = new_IoGithubNovacryptoBip39WordListMapNormalization_initWithIoGithubNovacryptoBip39WordList_(wordList);
  self->words_ = [IOSObjectArray newArrayWithLength:JreLShift32(1, 11) type:IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex_class_()];
  for (jint i = 0; i < JreLShift32(1, 11); i++) {
    (void) IOSObjectArray_SetAndConsume(self->words_, i, new_IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex_initWithIoGithubNovacryptoBip39MnemonicValidator_withInt_withJavaLangCharSequence_(self, i, [((id<IoGithubNovacryptoBip39WordList>) nil_chk(wordList)) getWordWithInt:i]));
  }
  self->charSequenceSplitter_ = new_IoGithubNovacryptoBip39CharSequenceSplitter_initWithChar_withChar_([((id<IoGithubNovacryptoBip39WordList>) nil_chk(wordList)) getSpace], IoGithubNovacryptoBip39Normalization_normalizeNFKDWithChar_([wordList getSpace]));
  JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(self->words_, IoGithubNovacryptoBip39MnemonicValidator_wordListSortOrder);
}

IoGithubNovacryptoBip39MnemonicValidator *new_IoGithubNovacryptoBip39MnemonicValidator_initWithIoGithubNovacryptoBip39WordList_(id<IoGithubNovacryptoBip39WordList> wordList) {
  J2OBJC_NEW_IMPL(IoGithubNovacryptoBip39MnemonicValidator, initWithIoGithubNovacryptoBip39WordList_, wordList)
}

IoGithubNovacryptoBip39MnemonicValidator *create_IoGithubNovacryptoBip39MnemonicValidator_initWithIoGithubNovacryptoBip39WordList_(id<IoGithubNovacryptoBip39WordList> wordList) {
  J2OBJC_CREATE_IMPL(IoGithubNovacryptoBip39MnemonicValidator, initWithIoGithubNovacryptoBip39WordList_, wordList)
}

IoGithubNovacryptoBip39MnemonicValidator *IoGithubNovacryptoBip39MnemonicValidator_ofWordListWithIoGithubNovacryptoBip39WordList_(id<IoGithubNovacryptoBip39WordList> wordList) {
  IoGithubNovacryptoBip39MnemonicValidator_initialize();
  return new_IoGithubNovacryptoBip39MnemonicValidator_initWithIoGithubNovacryptoBip39WordList_(wordList);
}

void IoGithubNovacryptoBip39MnemonicValidator_validateWithIntArray_(IOSIntArray *wordIndexes) {
  IoGithubNovacryptoBip39MnemonicValidator_initialize();
  jint ms = ((IOSIntArray *) nil_chk(wordIndexes))->size_;
  jint entPlusCs = ms * 11;
  jint ent = (entPlusCs * 32) / 33;
  jint cs = ent / 32;
  if (entPlusCs != ent + cs) @throw new_IoGithubNovacryptoBip39ValidationInvalidWordCountException_init();
  IOSByteArray *entropyWithChecksum = [IOSByteArray newArrayWithLength:(entPlusCs + 7) / 8];
  IoGithubNovacryptoBip39MnemonicValidator_wordIndexesToEntropyWithCheckSumWithIntArray_withByteArray_(wordIndexes, entropyWithChecksum);
  JavaUtilArrays_fillWithIntArray_withInt_(wordIndexes, 0);
  IOSByteArray *entropy = JavaUtilArrays_copyOfWithByteArray_withInt_(entropyWithChecksum, entropyWithChecksum->size_ - 1);
  jbyte lastByte = IOSByteArray_Get(entropyWithChecksum, entropyWithChecksum->size_ - 1);
  JavaUtilArrays_fillWithByteArray_withByte_(entropyWithChecksum, (jbyte) 0);
  jbyte sha = IoGithubNovacryptoBip39MnemonicGenerator_firstByteOfSha256WithByteArray_(entropy);
  jbyte mask = IoGithubNovacryptoBip39MnemonicValidator_maskOfFirstNBitsWithInt_(cs);
  if (((sha ^ lastByte) & mask) != 0) @throw new_IoGithubNovacryptoBip39ValidationInvalidChecksumException_init();
}

IOSIntArray *IoGithubNovacryptoBip39MnemonicValidator_findWordIndexesWithJavaUtilCollection_(IoGithubNovacryptoBip39MnemonicValidator *self, id<JavaUtilCollection> split) {
  jint ms = [((id<JavaUtilCollection>) nil_chk(split)) size];
  IOSIntArray *result = [IOSIntArray newArrayWithLength:ms];
  jint i = 0;
  for (id<JavaLangCharSequence> __strong buffer in split) {
    if ([((id<JavaLangCharSequence>) nil_chk(buffer)) java_length] == 0) {
      @throw new_IoGithubNovacryptoBip39ValidationUnexpectedWhiteSpaceException_init();
    }
    *IOSIntArray_GetRef(result, i++) = IoGithubNovacryptoBip39MnemonicValidator_findWordIndexWithJavaLangCharSequence_(self, buffer);
  }
  return result;
}

jint IoGithubNovacryptoBip39MnemonicValidator_findWordIndexWithJavaLangCharSequence_(IoGithubNovacryptoBip39MnemonicValidator *self, id<JavaLangCharSequence> buffer) {
  IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *key = new_IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex_initWithIoGithubNovacryptoBip39MnemonicValidator_withInt_withJavaLangCharSequence_(self, -1, buffer);
  jint index = JavaUtilArrays_binarySearchWithNSObjectArray_withId_withJavaUtilComparator_(self->words_, key, IoGithubNovacryptoBip39MnemonicValidator_wordListSortOrder);
  if (index < 0) {
    jint insertionPoint = -index - 1;
    jint suggestion = insertionPoint == 0 ? insertionPoint : insertionPoint - 1;
    if (suggestion + 1 == ((IOSObjectArray *) nil_chk(self->words_))->size_) suggestion--;
    @throw new_IoGithubNovacryptoBip39ValidationWordNotFoundException_initWithJavaLangCharSequence_withJavaLangCharSequence_withJavaLangCharSequence_(buffer, ((IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *) nil_chk(IOSObjectArray_Get(self->words_, suggestion)))->word_, ((IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *) nil_chk(IOSObjectArray_Get(self->words_, suggestion + 1)))->word_);
  }
  return ((IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *) nil_chk(IOSObjectArray_Get(nil_chk(self->words_), index)))->index_;
}

void IoGithubNovacryptoBip39MnemonicValidator_wordIndexesToEntropyWithCheckSumWithIntArray_withByteArray_(IOSIntArray *wordIndexes, IOSByteArray *entropyWithChecksum) {
  IoGithubNovacryptoBip39MnemonicValidator_initialize();
  for (jint i = 0, bi = 0; i < ((IOSIntArray *) nil_chk(wordIndexes))->size_; i++, bi += 11) {
    IoGithubNovacryptoBip39ByteUtils_writeNext11WithByteArray_withInt_withInt_(entropyWithChecksum, IOSIntArray_Get(wordIndexes, i), bi);
  }
}

jbyte IoGithubNovacryptoBip39MnemonicValidator_maskOfFirstNBitsWithInt_(jint n) {
  IoGithubNovacryptoBip39MnemonicValidator_initialize();
  return (jbyte) ~((JreLShift32(1, (8 - n))) - 1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoGithubNovacryptoBip39MnemonicValidator)

@implementation IoGithubNovacryptoBip39MnemonicValidator_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoGithubNovacryptoBip39MnemonicValidator_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *)o1
               withId:(IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *)o2 {
  return [((IoGithubNovacryptoBip39CharSequenceComparators *) nil_chk(JreLoadEnum(IoGithubNovacryptoBip39CharSequenceComparators, ALPHABETICAL))) compareWithId:((IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *) nil_chk(o1))->normalized_ withId:((IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *) nil_chk(o2))->normalized_];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LIoGithubNovacryptoBip39MnemonicValidator_WordAndIndex;LIoGithubNovacryptoBip39MnemonicValidator_WordAndIndex;", "LIoGithubNovacryptoBip39MnemonicValidator;", "Ljava/lang/Object;Ljava/util/Comparator<Lio/github/novacrypto/bip39/MnemonicValidator$WordAndIndex;>;" };
  static const J2ObjcClassInfo _IoGithubNovacryptoBip39MnemonicValidator_1 = { "", "io.github.novacrypto.bip39", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, 3, -1 };
  return &_IoGithubNovacryptoBip39MnemonicValidator_1;
}

@end

void IoGithubNovacryptoBip39MnemonicValidator_1_init(IoGithubNovacryptoBip39MnemonicValidator_1 *self) {
  NSObject_init(self);
}

IoGithubNovacryptoBip39MnemonicValidator_1 *new_IoGithubNovacryptoBip39MnemonicValidator_1_init() {
  J2OBJC_NEW_IMPL(IoGithubNovacryptoBip39MnemonicValidator_1, init)
}

IoGithubNovacryptoBip39MnemonicValidator_1 *create_IoGithubNovacryptoBip39MnemonicValidator_1_init() {
  J2OBJC_CREATE_IMPL(IoGithubNovacryptoBip39MnemonicValidator_1, init)
}

@implementation IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex

- (instancetype)initWithIoGithubNovacryptoBip39MnemonicValidator:(IoGithubNovacryptoBip39MnemonicValidator *)outer$
                                                         withInt:(jint)i
                                        withJavaLangCharSequence:(id<JavaLangCharSequence>)word {
  IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex_initWithIoGithubNovacryptoBip39MnemonicValidator_withInt_withJavaLangCharSequence_(self, outer$, i, word);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoGithubNovacryptoBip39MnemonicValidator:withInt:withJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "word_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "normalized_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILJavaLangCharSequence;", "LIoGithubNovacryptoBip39MnemonicValidator;" };
  static const J2ObjcClassInfo _IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex = { "WordAndIndex", "io.github.novacrypto.bip39", ptrTable, methods, fields, 7, 0x2, 1, 3, 1, -1, -1, -1, -1 };
  return &_IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex;
}

@end

void IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex_initWithIoGithubNovacryptoBip39MnemonicValidator_withInt_withJavaLangCharSequence_(IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *self, IoGithubNovacryptoBip39MnemonicValidator *outer$, jint i, id<JavaLangCharSequence> word) {
  NSObject_init(self);
  self->word_ = word;
  self->normalized_ = [((id<IoGithubNovacryptoBip39NFKDNormalizer>) nil_chk(outer$->normalizer_)) normalizeWithJavaLangCharSequence:word];
  self->index_ = i;
}

IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *new_IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex_initWithIoGithubNovacryptoBip39MnemonicValidator_withInt_withJavaLangCharSequence_(IoGithubNovacryptoBip39MnemonicValidator *outer$, jint i, id<JavaLangCharSequence> word) {
  J2OBJC_NEW_IMPL(IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex, initWithIoGithubNovacryptoBip39MnemonicValidator_withInt_withJavaLangCharSequence_, outer$, i, word)
}

IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex *create_IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex_initWithIoGithubNovacryptoBip39MnemonicValidator_withInt_withJavaLangCharSequence_(IoGithubNovacryptoBip39MnemonicValidator *outer$, jint i, id<JavaLangCharSequence> word) {
  J2OBJC_CREATE_IMPL(IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex, initWithIoGithubNovacryptoBip39MnemonicValidator_withInt_withJavaLangCharSequence_, outer$, i, word)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoGithubNovacryptoBip39MnemonicValidator_WordAndIndex)
