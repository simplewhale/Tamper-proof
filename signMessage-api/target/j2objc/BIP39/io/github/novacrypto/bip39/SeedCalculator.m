//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/BIP39/io/github/novacrypto/bip39/SeedCalculator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "io/github/novacrypto/bip39/Normalization.h"
#include "io/github/novacrypto/bip39/PBKDF2WithHmacSHA512.h"
#include "io/github/novacrypto/bip39/SeedCalculator.h"
#include "io/github/novacrypto/bip39/SeedCalculatorByWordListLookUp.h"
#include "io/github/novacrypto/bip39/SpongyCastlePBKDF2WithHmacSHA512.h"
#include "io/github/novacrypto/bip39/WordList.h"
#include "io/github/novacrypto/toruntime/CheckedExceptionToRuntime.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"

@interface IoGithubNovacryptoBip39SeedCalculator () {
 @public
  IOSByteArray *fixedSalt_;
  id<IoGithubNovacryptoBip39PBKDF2WithHmacSHA512> hashAlgorithm_;
}

+ (IOSByteArray *)combineWithByteArray:(IOSByteArray *)array1
                         withByteArray:(IOSByteArray *)array2;

+ (void)clearWithByteArray:(IOSByteArray *)salt;

- (IOSByteArray *)hash__WithCharArray:(IOSCharArray *)chars
                        withByteArray:(IOSByteArray *)salt;

+ (IOSByteArray *)getUtf8BytesWithNSString:(NSString *)string;

@end

J2OBJC_FIELD_SETTER(IoGithubNovacryptoBip39SeedCalculator, fixedSalt_, IOSByteArray *)
J2OBJC_FIELD_SETTER(IoGithubNovacryptoBip39SeedCalculator, hashAlgorithm_, id<IoGithubNovacryptoBip39PBKDF2WithHmacSHA512>)

__attribute__((unused)) static IOSByteArray *IoGithubNovacryptoBip39SeedCalculator_combineWithByteArray_withByteArray_(IOSByteArray *array1, IOSByteArray *array2);

__attribute__((unused)) static void IoGithubNovacryptoBip39SeedCalculator_clearWithByteArray_(IOSByteArray *salt);

__attribute__((unused)) static IOSByteArray *IoGithubNovacryptoBip39SeedCalculator_hash__WithCharArray_withByteArray_(IoGithubNovacryptoBip39SeedCalculator *self, IOSCharArray *chars, IOSByteArray *salt);

__attribute__((unused)) static IOSByteArray *IoGithubNovacryptoBip39SeedCalculator_getUtf8BytesWithNSString_(NSString *string);

@interface IoGithubNovacryptoBip39SeedCalculator_1 : NSObject < IoGithubNovacryptoToruntimeCheckedExceptionToRuntime_Func > {
 @public
  NSString *val$string_;
}

- (instancetype)initWithNSString:(NSString *)capture$0;

- (IOSByteArray *)run;

@end

J2OBJC_EMPTY_STATIC_INIT(IoGithubNovacryptoBip39SeedCalculator_1)

__attribute__((unused)) static void IoGithubNovacryptoBip39SeedCalculator_1_initWithNSString_(IoGithubNovacryptoBip39SeedCalculator_1 *self, NSString *capture$0);

__attribute__((unused)) static IoGithubNovacryptoBip39SeedCalculator_1 *new_IoGithubNovacryptoBip39SeedCalculator_1_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoGithubNovacryptoBip39SeedCalculator_1 *create_IoGithubNovacryptoBip39SeedCalculator_1_initWithNSString_(NSString *capture$0);

@implementation IoGithubNovacryptoBip39SeedCalculator

- (instancetype)initWithIoGithubNovacryptoBip39PBKDF2WithHmacSHA512:(id<IoGithubNovacryptoBip39PBKDF2WithHmacSHA512>)hashAlgorithm {
  IoGithubNovacryptoBip39SeedCalculator_initWithIoGithubNovacryptoBip39PBKDF2WithHmacSHA512_(self, hashAlgorithm);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  IoGithubNovacryptoBip39SeedCalculator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSByteArray *)calculateSeedWithNSString:(NSString *)mnemonic
                               withNSString:(NSString *)passphrase {
  IOSCharArray *chars = [((NSString *) nil_chk(IoGithubNovacryptoBip39Normalization_normalizeNFKDWithNSString_(mnemonic))) java_toCharArray];
  @try {
    return [self calculateSeedWithCharArray:chars withNSString:passphrase];
  }
  @finally {
    JavaUtilArrays_fillWithCharArray_withChar_(chars, 0x0000);
  }
}

- (IOSByteArray *)calculateSeedWithCharArray:(IOSCharArray *)mnemonicChars
                                withNSString:(NSString *)passphrase {
  NSString *normalizedPassphrase = IoGithubNovacryptoBip39Normalization_normalizeNFKDWithNSString_(passphrase);
  IOSByteArray *salt2 = IoGithubNovacryptoBip39SeedCalculator_getUtf8BytesWithNSString_(normalizedPassphrase);
  IOSByteArray *salt = IoGithubNovacryptoBip39SeedCalculator_combineWithByteArray_withByteArray_(fixedSalt_, salt2);
  IoGithubNovacryptoBip39SeedCalculator_clearWithByteArray_(salt2);
  IOSByteArray *encoded = IoGithubNovacryptoBip39SeedCalculator_hash__WithCharArray_withByteArray_(self, mnemonicChars, salt);
  IoGithubNovacryptoBip39SeedCalculator_clearWithByteArray_(salt);
  return encoded;
}

- (IoGithubNovacryptoBip39SeedCalculatorByWordListLookUp *)withWordsFromWordListWithIoGithubNovacryptoBip39WordList:(id<IoGithubNovacryptoBip39WordList>)wordList {
  return new_IoGithubNovacryptoBip39SeedCalculatorByWordListLookUp_initWithIoGithubNovacryptoBip39SeedCalculator_withIoGithubNovacryptoBip39WordList_(self, wordList);
}

+ (IOSByteArray *)combineWithByteArray:(IOSByteArray *)array1
                         withByteArray:(IOSByteArray *)array2 {
  return IoGithubNovacryptoBip39SeedCalculator_combineWithByteArray_withByteArray_(array1, array2);
}

+ (void)clearWithByteArray:(IOSByteArray *)salt {
  IoGithubNovacryptoBip39SeedCalculator_clearWithByteArray_(salt);
}

- (IOSByteArray *)hash__WithCharArray:(IOSCharArray *)chars
                        withByteArray:(IOSByteArray *)salt {
  return IoGithubNovacryptoBip39SeedCalculator_hash__WithCharArray_withByteArray_(self, chars, salt);
}

+ (IOSByteArray *)getUtf8BytesWithNSString:(NSString *)string {
  return IoGithubNovacryptoBip39SeedCalculator_getUtf8BytesWithNSString_(string);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 1, 3, -1, -1, -1, -1 },
    { NULL, "LIoGithubNovacryptoBip39SeedCalculatorByWordListLookUp;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoGithubNovacryptoBip39PBKDF2WithHmacSHA512:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(calculateSeedWithNSString:withNSString:);
  methods[3].selector = @selector(calculateSeedWithCharArray:withNSString:);
  methods[4].selector = @selector(withWordsFromWordListWithIoGithubNovacryptoBip39WordList:);
  methods[5].selector = @selector(combineWithByteArray:withByteArray:);
  methods[6].selector = @selector(clearWithByteArray:);
  methods[7].selector = @selector(hash__WithCharArray:withByteArray:);
  methods[8].selector = @selector(getUtf8BytesWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fixedSalt_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hashAlgorithm_", "LIoGithubNovacryptoBip39PBKDF2WithHmacSHA512;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoGithubNovacryptoBip39PBKDF2WithHmacSHA512;", "calculateSeed", "LNSString;LNSString;", "[CLNSString;", "withWordsFromWordList", "LIoGithubNovacryptoBip39WordList;", "combine", "[B[B", "clear", "[B", "hash", "[C[B", "getUtf8Bytes", "LNSString;" };
  static const J2ObjcClassInfo _IoGithubNovacryptoBip39SeedCalculator = { "SeedCalculator", "io.github.novacrypto.bip39", ptrTable, methods, fields, 7, 0x11, 9, 2, -1, -1, -1, -1, -1 };
  return &_IoGithubNovacryptoBip39SeedCalculator;
}

@end

void IoGithubNovacryptoBip39SeedCalculator_initWithIoGithubNovacryptoBip39PBKDF2WithHmacSHA512_(IoGithubNovacryptoBip39SeedCalculator *self, id<IoGithubNovacryptoBip39PBKDF2WithHmacSHA512> hashAlgorithm) {
  NSObject_init(self);
  self->fixedSalt_ = IoGithubNovacryptoBip39SeedCalculator_getUtf8BytesWithNSString_(@"mnemonic");
  self->hashAlgorithm_ = hashAlgorithm;
}

IoGithubNovacryptoBip39SeedCalculator *new_IoGithubNovacryptoBip39SeedCalculator_initWithIoGithubNovacryptoBip39PBKDF2WithHmacSHA512_(id<IoGithubNovacryptoBip39PBKDF2WithHmacSHA512> hashAlgorithm) {
  J2OBJC_NEW_IMPL(IoGithubNovacryptoBip39SeedCalculator, initWithIoGithubNovacryptoBip39PBKDF2WithHmacSHA512_, hashAlgorithm)
}

IoGithubNovacryptoBip39SeedCalculator *create_IoGithubNovacryptoBip39SeedCalculator_initWithIoGithubNovacryptoBip39PBKDF2WithHmacSHA512_(id<IoGithubNovacryptoBip39PBKDF2WithHmacSHA512> hashAlgorithm) {
  J2OBJC_CREATE_IMPL(IoGithubNovacryptoBip39SeedCalculator, initWithIoGithubNovacryptoBip39PBKDF2WithHmacSHA512_, hashAlgorithm)
}

void IoGithubNovacryptoBip39SeedCalculator_init(IoGithubNovacryptoBip39SeedCalculator *self) {
  IoGithubNovacryptoBip39SeedCalculator_initWithIoGithubNovacryptoBip39PBKDF2WithHmacSHA512_(self, JreLoadEnum(IoGithubNovacryptoBip39SpongyCastlePBKDF2WithHmacSHA512, INSTANCE));
}

IoGithubNovacryptoBip39SeedCalculator *new_IoGithubNovacryptoBip39SeedCalculator_init() {
  J2OBJC_NEW_IMPL(IoGithubNovacryptoBip39SeedCalculator, init)
}

IoGithubNovacryptoBip39SeedCalculator *create_IoGithubNovacryptoBip39SeedCalculator_init() {
  J2OBJC_CREATE_IMPL(IoGithubNovacryptoBip39SeedCalculator, init)
}

IOSByteArray *IoGithubNovacryptoBip39SeedCalculator_combineWithByteArray_withByteArray_(IOSByteArray *array1, IOSByteArray *array2) {
  IoGithubNovacryptoBip39SeedCalculator_initialize();
  IOSByteArray *bytes = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(array1))->size_ + ((IOSByteArray *) nil_chk(array2))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array1, 0, bytes, 0, array1->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array2, 0, bytes, array1->size_, bytes->size_ - array1->size_);
  return bytes;
}

void IoGithubNovacryptoBip39SeedCalculator_clearWithByteArray_(IOSByteArray *salt) {
  IoGithubNovacryptoBip39SeedCalculator_initialize();
  JavaUtilArrays_fillWithByteArray_withByte_(salt, (jbyte) 0);
}

IOSByteArray *IoGithubNovacryptoBip39SeedCalculator_hash__WithCharArray_withByteArray_(IoGithubNovacryptoBip39SeedCalculator *self, IOSCharArray *chars, IOSByteArray *salt) {
  return [((id<IoGithubNovacryptoBip39PBKDF2WithHmacSHA512>) nil_chk(self->hashAlgorithm_)) hash__WithCharArray:chars withByteArray:salt];
}

IOSByteArray *IoGithubNovacryptoBip39SeedCalculator_getUtf8BytesWithNSString_(NSString *string) {
  IoGithubNovacryptoBip39SeedCalculator_initialize();
  return IoGithubNovacryptoToruntimeCheckedExceptionToRuntime_toRuntimeWithIoGithubNovacryptoToruntimeCheckedExceptionToRuntime_Func_(new_IoGithubNovacryptoBip39SeedCalculator_1_initWithNSString_(string));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoGithubNovacryptoBip39SeedCalculator)

@implementation IoGithubNovacryptoBip39SeedCalculator_1

- (instancetype)initWithNSString:(NSString *)capture$0 {
  IoGithubNovacryptoBip39SeedCalculator_1_initWithNSString_(self, capture$0);
  return self;
}

- (IOSByteArray *)run {
  return [((NSString *) nil_chk(val$string_)) java_getBytesWithCharsetName:@"UTF-8"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$string_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangException;", "LIoGithubNovacryptoBip39SeedCalculator;", "getUtf8BytesWithNSString:", "Ljava/lang/Object;Lio/github/novacrypto/toruntime/CheckedExceptionToRuntime$Func<[B>;" };
  static const J2ObjcClassInfo _IoGithubNovacryptoBip39SeedCalculator_1 = { "", "io.github.novacrypto.bip39", ptrTable, methods, fields, 7, 0x8018, 2, 1, 1, -1, 2, 3, -1 };
  return &_IoGithubNovacryptoBip39SeedCalculator_1;
}

@end

void IoGithubNovacryptoBip39SeedCalculator_1_initWithNSString_(IoGithubNovacryptoBip39SeedCalculator_1 *self, NSString *capture$0) {
  self->val$string_ = capture$0;
  NSObject_init(self);
}

IoGithubNovacryptoBip39SeedCalculator_1 *new_IoGithubNovacryptoBip39SeedCalculator_1_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(IoGithubNovacryptoBip39SeedCalculator_1, initWithNSString_, capture$0)
}

IoGithubNovacryptoBip39SeedCalculator_1 *create_IoGithubNovacryptoBip39SeedCalculator_1_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(IoGithubNovacryptoBip39SeedCalculator_1, initWithNSString_, capture$0)
}
