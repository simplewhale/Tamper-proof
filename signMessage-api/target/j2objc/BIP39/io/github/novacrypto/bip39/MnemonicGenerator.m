//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/alen/Downloads/signMessage-api/target/classes/BIP39/io/github/novacrypto/bip39/MnemonicGenerator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "io/github/novacrypto/bip39/ByteUtils.h"
#include "io/github/novacrypto/bip39/MnemonicGenerator.h"
#include "io/github/novacrypto/bip39/WordList.h"
#include "io/github/novacrypto/hashing/Sha256.h"
#include "java/lang/CharSequence.h"
#include "java/lang/RuntimeException.h"
#include "java/util/Arrays.h"

@interface IoGithubNovacryptoBip39MnemonicGenerator () {
 @public
  id<IoGithubNovacryptoBip39WordList> wordList_;
}

- (void)createMnemonicWithIntArray:(IOSIntArray *)wordIndexes
withIoGithubNovacryptoBip39MnemonicGenerator_Target:(id<IoGithubNovacryptoBip39MnemonicGenerator_Target>)target;

+ (IOSIntArray *)wordIndexesWithByteArray:(IOSByteArray *)entropy;

+ (void)entropyLengthPreChecksWithInt:(jint)ent;

+ (jint)parseHexWithChar:(jchar)c;

@end

J2OBJC_FIELD_SETTER(IoGithubNovacryptoBip39MnemonicGenerator, wordList_, id<IoGithubNovacryptoBip39WordList>)

__attribute__((unused)) static void IoGithubNovacryptoBip39MnemonicGenerator_createMnemonicWithIntArray_withIoGithubNovacryptoBip39MnemonicGenerator_Target_(IoGithubNovacryptoBip39MnemonicGenerator *self, IOSIntArray *wordIndexes, id<IoGithubNovacryptoBip39MnemonicGenerator_Target> target);

__attribute__((unused)) static IOSIntArray *IoGithubNovacryptoBip39MnemonicGenerator_wordIndexesWithByteArray_(IOSByteArray *entropy);

__attribute__((unused)) static void IoGithubNovacryptoBip39MnemonicGenerator_entropyLengthPreChecksWithInt_(jint ent);

__attribute__((unused)) static jint IoGithubNovacryptoBip39MnemonicGenerator_parseHexWithChar_(jchar c);

@interface IoGithubNovacryptoBip39MnemonicGenerator_Target : NSObject

@end

@implementation IoGithubNovacryptoBip39MnemonicGenerator

- (instancetype)initWithIoGithubNovacryptoBip39WordList:(id<IoGithubNovacryptoBip39WordList>)wordList {
  IoGithubNovacryptoBip39MnemonicGenerator_initWithIoGithubNovacryptoBip39WordList_(self, wordList);
  return self;
}

- (void)createMnemonicWithJavaLangCharSequence:(id<JavaLangCharSequence>)entropyHex
withIoGithubNovacryptoBip39MnemonicGenerator_Target:(id<IoGithubNovacryptoBip39MnemonicGenerator_Target>)target {
  jint length = [((id<JavaLangCharSequence>) nil_chk(entropyHex)) java_length];
  if (length % 2 == 1) @throw new_JavaLangRuntimeException_initWithNSString_(@"Length of hex chars must be divisible by 2");
  IOSByteArray *entropy = [IOSByteArray newArrayWithLength:length / 2];
  @try {
    for (jint i = 0, j = 0; i < length; i += 2, j++) {
      *IOSByteArray_GetRef(entropy, j) = (jbyte) ((JreLShift32(IoGithubNovacryptoBip39MnemonicGenerator_parseHexWithChar_([entropyHex charAtWithInt:i]), 4)) | IoGithubNovacryptoBip39MnemonicGenerator_parseHexWithChar_([entropyHex charAtWithInt:i + 1]));
    }
    [self createMnemonicWithByteArray:entropy withIoGithubNovacryptoBip39MnemonicGenerator_Target:target];
  }
  @finally {
    JavaUtilArrays_fillWithByteArray_withByte_(entropy, (jbyte) 0);
  }
}

- (void)createMnemonicWithByteArray:(IOSByteArray *)entropy
withIoGithubNovacryptoBip39MnemonicGenerator_Target:(id<IoGithubNovacryptoBip39MnemonicGenerator_Target>)target {
  IOSIntArray *wordIndexes = IoGithubNovacryptoBip39MnemonicGenerator_wordIndexesWithByteArray_(entropy);
  @try {
    IoGithubNovacryptoBip39MnemonicGenerator_createMnemonicWithIntArray_withIoGithubNovacryptoBip39MnemonicGenerator_Target_(self, wordIndexes, target);
  }
  @finally {
    JavaUtilArrays_fillWithIntArray_withInt_(wordIndexes, 0);
  }
}

- (void)createMnemonicWithIntArray:(IOSIntArray *)wordIndexes
withIoGithubNovacryptoBip39MnemonicGenerator_Target:(id<IoGithubNovacryptoBip39MnemonicGenerator_Target>)target {
  IoGithubNovacryptoBip39MnemonicGenerator_createMnemonicWithIntArray_withIoGithubNovacryptoBip39MnemonicGenerator_Target_(self, wordIndexes, target);
}

+ (IOSIntArray *)wordIndexesWithByteArray:(IOSByteArray *)entropy {
  return IoGithubNovacryptoBip39MnemonicGenerator_wordIndexesWithByteArray_(entropy);
}

+ (jbyte)firstByteOfSha256WithByteArray:(IOSByteArray *)entropy {
  return IoGithubNovacryptoBip39MnemonicGenerator_firstByteOfSha256WithByteArray_(entropy);
}

+ (void)entropyLengthPreChecksWithInt:(jint)ent {
  IoGithubNovacryptoBip39MnemonicGenerator_entropyLengthPreChecksWithInt_(ent);
}

+ (jint)parseHexWithChar:(jchar)c {
  return IoGithubNovacryptoBip39MnemonicGenerator_parseHexWithChar_(c);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 4, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "B", 0x8, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoGithubNovacryptoBip39WordList:);
  methods[1].selector = @selector(createMnemonicWithJavaLangCharSequence:withIoGithubNovacryptoBip39MnemonicGenerator_Target:);
  methods[2].selector = @selector(createMnemonicWithByteArray:withIoGithubNovacryptoBip39MnemonicGenerator_Target:);
  methods[3].selector = @selector(createMnemonicWithIntArray:withIoGithubNovacryptoBip39MnemonicGenerator_Target:);
  methods[4].selector = @selector(wordIndexesWithByteArray:);
  methods[5].selector = @selector(firstByteOfSha256WithByteArray:);
  methods[6].selector = @selector(entropyLengthPreChecksWithInt:);
  methods[7].selector = @selector(parseHexWithChar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "wordList_", "LIoGithubNovacryptoBip39WordList;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoGithubNovacryptoBip39WordList;", "createMnemonic", "LJavaLangCharSequence;LIoGithubNovacryptoBip39MnemonicGenerator_Target;", "[BLIoGithubNovacryptoBip39MnemonicGenerator_Target;", "[ILIoGithubNovacryptoBip39MnemonicGenerator_Target;", "wordIndexes", "[B", "firstByteOfSha256", "entropyLengthPreChecks", "I", "parseHex", "C", "LIoGithubNovacryptoBip39MnemonicGenerator_Target;" };
  static const J2ObjcClassInfo _IoGithubNovacryptoBip39MnemonicGenerator = { "MnemonicGenerator", "io.github.novacrypto.bip39", ptrTable, methods, fields, 7, 0x11, 8, 1, -1, 12, -1, -1, -1 };
  return &_IoGithubNovacryptoBip39MnemonicGenerator;
}

@end

void IoGithubNovacryptoBip39MnemonicGenerator_initWithIoGithubNovacryptoBip39WordList_(IoGithubNovacryptoBip39MnemonicGenerator *self, id<IoGithubNovacryptoBip39WordList> wordList) {
  NSObject_init(self);
  self->wordList_ = wordList;
}

IoGithubNovacryptoBip39MnemonicGenerator *new_IoGithubNovacryptoBip39MnemonicGenerator_initWithIoGithubNovacryptoBip39WordList_(id<IoGithubNovacryptoBip39WordList> wordList) {
  J2OBJC_NEW_IMPL(IoGithubNovacryptoBip39MnemonicGenerator, initWithIoGithubNovacryptoBip39WordList_, wordList)
}

IoGithubNovacryptoBip39MnemonicGenerator *create_IoGithubNovacryptoBip39MnemonicGenerator_initWithIoGithubNovacryptoBip39WordList_(id<IoGithubNovacryptoBip39WordList> wordList) {
  J2OBJC_CREATE_IMPL(IoGithubNovacryptoBip39MnemonicGenerator, initWithIoGithubNovacryptoBip39WordList_, wordList)
}

void IoGithubNovacryptoBip39MnemonicGenerator_createMnemonicWithIntArray_withIoGithubNovacryptoBip39MnemonicGenerator_Target_(IoGithubNovacryptoBip39MnemonicGenerator *self, IOSIntArray *wordIndexes, id<IoGithubNovacryptoBip39MnemonicGenerator_Target> target) {
  NSString *space = NSString_java_valueOfChar_([((id<IoGithubNovacryptoBip39WordList>) nil_chk(self->wordList_)) getSpace]);
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(wordIndexes))->size_; i++) {
    if (i > 0) [((id<IoGithubNovacryptoBip39MnemonicGenerator_Target>) nil_chk(target)) appendWithJavaLangCharSequence:space];
    [((id<IoGithubNovacryptoBip39MnemonicGenerator_Target>) nil_chk(target)) appendWithJavaLangCharSequence:[self->wordList_ getWordWithInt:IOSIntArray_Get(wordIndexes, i)]];
  }
}

IOSIntArray *IoGithubNovacryptoBip39MnemonicGenerator_wordIndexesWithByteArray_(IOSByteArray *entropy) {
  IoGithubNovacryptoBip39MnemonicGenerator_initialize();
  jint ent = ((IOSByteArray *) nil_chk(entropy))->size_ * 8;
  IoGithubNovacryptoBip39MnemonicGenerator_entropyLengthPreChecksWithInt_(ent);
  IOSByteArray *entropyWithChecksum = JavaUtilArrays_copyOfWithByteArray_withInt_(entropy, entropy->size_ + 1);
  *IOSByteArray_GetRef(nil_chk(entropyWithChecksum), entropy->size_) = IoGithubNovacryptoBip39MnemonicGenerator_firstByteOfSha256WithByteArray_(entropy);
  jint cs = ent / 32;
  jint ms = (ent + cs) / 11;
  IOSIntArray *wordIndexes = [IOSIntArray newArrayWithLength:ms];
  for (jint i = 0, wi = 0; wi < ms; i += 11, wi++) {
    *IOSIntArray_GetRef(wordIndexes, wi) = IoGithubNovacryptoBip39ByteUtils_next11BitsWithByteArray_withInt_(entropyWithChecksum, i);
  }
  return wordIndexes;
}

jbyte IoGithubNovacryptoBip39MnemonicGenerator_firstByteOfSha256WithByteArray_(IOSByteArray *entropy) {
  IoGithubNovacryptoBip39MnemonicGenerator_initialize();
  IOSByteArray *hash_ = IoGithubNovacryptoHashingSha256_sha256WithByteArray_(entropy);
  jbyte firstByte = IOSByteArray_Get(nil_chk(hash_), 0);
  JavaUtilArrays_fillWithByteArray_withByte_(hash_, (jbyte) 0);
  return firstByte;
}

void IoGithubNovacryptoBip39MnemonicGenerator_entropyLengthPreChecksWithInt_(jint ent) {
  IoGithubNovacryptoBip39MnemonicGenerator_initialize();
  if (ent < 128) @throw new_JavaLangRuntimeException_initWithNSString_(@"Entropy too low, 128-256 bits allowed");
  if (ent > 256) @throw new_JavaLangRuntimeException_initWithNSString_(@"Entropy too high, 128-256 bits allowed");
  if (ent % 32 > 0) @throw new_JavaLangRuntimeException_initWithNSString_(@"Number of entropy bits must be divisible by 32");
}

jint IoGithubNovacryptoBip39MnemonicGenerator_parseHexWithChar_(jchar c) {
  IoGithubNovacryptoBip39MnemonicGenerator_initialize();
  if (c >= '0' && c <= '9') return c - '0';
  if (c >= 'a' && c <= 'f') return (c - 'a') + 10;
  if (c >= 'A' && c <= 'F') return (c - 'A') + 10;
  @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$CC", @"Invalid hex char '", c, '\''));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoGithubNovacryptoBip39MnemonicGenerator)

@implementation IoGithubNovacryptoBip39MnemonicGenerator_Target

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(appendWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "append", "LJavaLangCharSequence;", "LIoGithubNovacryptoBip39MnemonicGenerator;" };
  static const J2ObjcClassInfo _IoGithubNovacryptoBip39MnemonicGenerator_Target = { "Target", "io.github.novacrypto.bip39", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_IoGithubNovacryptoBip39MnemonicGenerator_Target;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(IoGithubNovacryptoBip39MnemonicGenerator_Target)
